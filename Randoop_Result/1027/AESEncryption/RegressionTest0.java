package AESEncryption;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        javax.crypto.SecretKey secretKey0 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.Class<?> wildcardClass1 = secretKey0.getClass();
        org.junit.Assert.assertNotNull(secretKey0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) 1, (byte) 1, (byte) 10, (byte) 1, (byte) -1 };
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey7);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 1, 10, 1, -1]");
        org.junit.Assert.assertNotNull(secretKey7);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey6);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0101FF" + "'", str5, "0101FF");
        org.junit.Assert.assertNotNull(secretKey6);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.Class<?> wildcardClass5 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.Class<?> wildcardClass5 = secretKey2.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-29, 50, -76, 31, 79, -122, 44, 54, -99, -7, 20, -3, -87, 119, 75, -56]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[3, -1, -91, 115, 42, 22, -39, 89, 61, -119, -74, 19, -23, 2, 0, -33]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        java.lang.Class<?> wildcardClass4 = secretKey2.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey3);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        java.lang.Class<?> wildcardClass4 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[24, -92, -108, 34, 73, -52, -53, 82, -127, -44, 72, -125, -22, 46, -59, 10]");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-63, -80, -81, -7, 44, 51, 126, -89, 21, -74, 67, -96, -103, 56, 105, -120]");
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey7);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[40, 64, 11, -103, -53, -21, -8, 53, -70, -127, 16, 93, -27, -126, -3, 82]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-31, -2, 5, -35, -123, 119, -115, 54, 36, 91, -63, 18, 107, 82, -122, 31]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[76, -121, -70, -23, -96, 63, 102, 109, 100, 79, 16, 69, -68, 23, -54, -41]");
        org.junit.Assert.assertNotNull(secretKey7);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey2);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey7);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-92, 42, -60, 75, 23, -60, -109, -101, 10, 86, 78, -107, 4, -56, -38, 37]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-38, 87, -110, -118, 59, 117, -128, 2, -60, -19, 90, 57, -4, 22, -86, -7]");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[112, -61, 56, -55, -86, -95, -51, 114, -102, 47, 0, -75, 106, 106, -65, 122]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, -36, -31, -15, -88, -34, -62, 121, -7, -11, 31, -15, -100, 18, 103, 62]");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.Class<?> wildcardClass10 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-70, 40, 125, 98, 19, 31, 78, -62, -126, -108, 77, 100, 108, 57, 43, 60]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[91, 83, -78, 99, -82, -54, -22, -31, 4, -79, -125, -89, 111, 20, 0, -89]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey9);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[91, 65, -91, -69, 60, 90, -34, 43, -23, -104, 29, 99, -94, -88, 106, 60]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-14, -80, -26, 59, 60, -60, 104, 114, -45, -76, -70, 41, 48, 79, -50, -88]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-14, -80, -26, 59, 60, -60, 104, 114, -45, -76, -70, 41, 48, 79, -50, -88]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[82, -30, -61, -55, 110, 90, 111, -55, 95, -10, 37, 114, -3, -124, -44, 7]");
        org.junit.Assert.assertNotNull(secretKey9);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey13);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[60, 117, -25, 54, 60, -11, -119, 7, -122, 83, -24, 27, 101, 123, 21, 12]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-60, -19, -26, 86, 5, -92, 27, -61, 70, 114, 95, 69, -60, -51, 20, 7]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-60, -19, -26, 86, 5, -92, 27, -61, 70, 114, 95, 69, -60, -51, 20, 7]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-99, 6, -4, 50, 73, 46, 74, 20, -123, -5, 57, -13, -86, -90, 115, 117]");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-93, -28, 99, -21, 63, 7, -8, -77, 25, 17, -77, 68, -22, -8, -98, 20]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-106, 72, -30, -111, -123, -82, 101, 80, 49, -13, -13, 72, -30, 85, -96, -105]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-106, 72, -30, -111, -123, -82, 101, 80, 49, -13, -13, 72, -30, 85, -96, -105]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, -116, -54, -59, 79, -82, 17, 99, -19, 99, -108, -4, 57, 112, -19, 84]");
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass2 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey7);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[101, 76, 10, 36, -98, 95, -109, -43, -52, -68, 29, 2, 41, -24, 97, -11]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[113, 63, -54, 87, -85, 5, -102, 51, -24, -62, 112, 10, 102, 50, 16, 124]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[113, 63, -54, 87, -85, 5, -102, 51, -24, -62, 112, 10, 102, 50, 16, 124]");
        org.junit.Assert.assertNotNull(secretKey7);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey12);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[27, -46, 3, 64, 44, -13, -41, 113, 55, -93, 127, -73, 98, -114, 101, -48]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[12, 110, -109, 16, -83, -20, 108, 92, 12, 91, -124, 38, 6, -92, -90, -101]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[76, 89, -32, -61, 49, -41, 98, -53, -123, -124, 123, -98, 109, 47, 38, -121]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[27, -46, 3, 64, 44, -13, -41, 113, 55, -93, 127, -73, 98, -114, 101, -48]");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-22, 17, 13, -11, -101, 1, 55, -65, -122, 29, -81, -65, 32, -103, -40, 11]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[53, 52, -50, -73, 23, -126, -101, -14, 126, -36, -62, 38, -95, 64, 75, 19]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[53, 52, -50, -73, 23, -126, -101, -14, 126, -36, -62, 38, -95, 64, 75, 19]");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey17);
        java.lang.Class<?> wildcardClass23 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-52, 92, -95, 27, 100, -55, -117, -48, 33, 83, 99, 116, -65, 66, 66, 48]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[5, -98, -89, 102, -8, -15, -15, -14, -47, -71, 59, -72, -22, -23, -46, -15]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, -38, -94, 67, -80, 82, 36, 37, 55, 8, -9, 47, -102, 19, -51, 73]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[19, -48, 97, 13, 97, -113, 36, 108, -110, 82, -102, 89, -29, -119, -26, -36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-85, -69, 45, 119, -57, 100, -2, 44, -22, 87, 76, -74, -14, -10, 68, 108, 106, 80, -60, -94, 16, -55, -34, 105, 122, 0, 85, 44, -42, 118, 95, -75, 65, -38, -94, 67, -80, 82, 36, 37, 55, 8, -9, 47, -102, 19, -51, 73]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey11);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-63, 123, -62, 6, -20, -43, -39, -62, 40, 24, 31, -113, 58, 91, -42, -76]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-65, 36, 89, 121, -127, 46, 60, 117, 106, -90, 69, -31, 32, 12, 52, 96]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-65, 36, 89, 121, -127, 46, 60, 117, 106, -90, 69, -31, 32, 12, 52, 96]");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, 40, 73, 104, -73, 72, -94, -35, -128, -44, 107, 121, -115, -120, -104, 28]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[57, -101, 79, 75, -111, 78, -121, 39, 113, -7, 94, 15, 82, 55, -90, -87]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, -64, 13, -69, 124, -78, -52, -110, -112, 125, 127, 115, -11, -122, -24, 68]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-72, 40, 73, 104, -73, 72, -94, -35, -128, -44, 107, 121, -115, -120, -104, 28]");
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.Class<?> wildcardClass21 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[56, -105, -81, 23, 65, 56, -78, -32, -62, -6, -127, 89, 39, 91, -81, 53]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-51, 39, -112, -9, -96, -13, -20, -31, -9, 75, -34, 31, 70, 9, -49, -94]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, -1, 33, -7, -4, -67, -18, -58, 45, -30, -85, 121, 43, 109, 124, 27]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[21, 67, -111, 93, 99, 55, 115, -56, 14, 32, -28, 62, 44, -12, 1, 80]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"bytes\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[27, 16, 87, 39, -103, 120, -42, 44, -78, -79, -89, 76, 85, -112, 104, -5]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-82, -54, -4, -47, 114, -71, -98, -65, -90, -32, -51, -75, -123, -96, 120, -36]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -52, 56, 29, -13, -35, 50, -79, -19, -108, 5, -21, 88, 49, -69, 101]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[27, 16, 87, 39, -103, 120, -42, 44, -78, -79, -89, 76, 85, -112, 104, -5]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey2);
        java.lang.Class<?> wildcardClass5 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-3, -83, -121, -44, -52, -112, 104, -101, -13, -115, 24, -7, -73, -85, 22, -81]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-58, -35, 10, 2, 78, 40, -18, -23, -15, -113, 124, -17, 63, 36, 9, -57]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.Class<?> wildcardClass5 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[116, -14, 20, 81, 14, 61, -125, 78, 40, -42, -104, -105, 30, -9, -11, -103]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-4, -35, 108, -27, 56, 62, -24, -43, 44, 57, -126, 122, 114, -43, -54, -68]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey38);
        java.lang.Class<?> wildcardClass45 = secretKey38.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[16, -100, 24, 36, -114, 11, -123, 45, 115, -81, 1, -11, -20, -57, 8, -46]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[12, 23, 20, 28, 80, -49, 39, 90, 42, -113, -91, 74, 53, -1, 120, 88]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[85, -124, -118, -53, 101, -28, 48, 47, 4, 98, -72, 67, 116, -112, 57, 5]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-123, -84, 43, 78, -117, 107, -15, -124, -122, 6, 65, 79, 81, -76, -60, -3]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-35, -8, 97, 117, -82, 113, -84, 49, -103, -97, 11, 71, -69, 88, -84, -43]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-124, -49, 30, 99, 121, -50, -90, -12, -84, 29, 49, 116, -24, -114, 102, -30]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-91, -10, 21, -71, -35, 41, 101, 92, 27, -72, -117, 0, -70, -13, -54, 103]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-37, -84, 96, -54, 95, 81, -18, 26, 15, 122, -82, 88, 80, -52, -4, -67]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[77, 1, -46, -27, 93, 110, -14, -30, -123, -18, -75, 69, -36, -22, 113, 56, -87, -49, 100, -107, -34, -47, 55, 86, -33, 20, 5, -58, -103, -127, -22, -1, -91, -10, 21, -71, -35, 41, 101, 92, 27, -72, -117, 0, -70, -13, -54, 103]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey18);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey28);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-56, -27, 8, -65, -53, 73, -101, 67, -85, 49, 71, -30, -87, -80, -88, -105]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-32, -30, -119, 80, 31, -42, 85, -38, 99, -66, -104, 118, 81, -72, 38, 42]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-111, -73, -57, 73, 116, 108, -106, 7, 20, 90, -119, -47, -123, 76, 75, 88]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[62, -10, 102, 42, 15, 48, 106, 34, 111, -45, 8, -27, -36, 3, 39, -10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-64, -84, 28, -52, 99, 58, -118, -12, -26, 83, 62, 63, -32, 27, -123, 102, -1, -99, -100, 41, 95, -31, 46, -97, 116, -37, -123, 10, 86, -66, -94, 108, -111, -73, -57, 73, 116, 108, -106, 7, 20, 90, -119, -47, -123, 76, 75, 88]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-8, 108, 86, -118, -119, 93, 72, 110, -25, 104, 116, 119, -94, 116, -66, -120, -50, -15, 51, 33, 31, -32, -2, 66, -57, 99, -84, 47, -8, 117, -113, -92, -111, -73, -57, 73, 116, 108, -106, 7, 20, 90, -119, -47, -123, 76, 75, 88]");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-79, 80, -74, -97, 59, 100, 88, 54, 7, -65, 51, -61, 41, -61, 123, -14]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[124, -55, 88, -3, -80, -46, -52, -97, 56, -78, 17, 81, 126, 57, -38, -78]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[124, -55, 88, -3, -80, -46, -52, -97, 56, -78, 17, 81, 126, 57, -38, -78]");
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey24);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-122, 60, 33, 42, 0, 19, 34, -15, -72, -9, 84, 11, -47, -106, -1, -101]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[73, 61, 74, 104, -85, 99, 3, -67, -127, -32, -114, -6, -68, -87, -43, -70]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-120, -111, 29, -15, -32, -51, -88, -87, -91, 121, -78, -3, 10, 76, -11, -100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[74, -117, -62, 104, 77, -7, -11, -126, -52, 24, -108, 126, 40, 32, 61, 95]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[91, 75, 80, 104, -56, 82, -31, -121, 126, -1, -90, -26, 123, 57, 98, -123]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[95, -6, -2, -124, -122, -79, 125, -7, 55, 85, -28, -37, 60, 0, -17, 116]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[87, -92, -32, 127, 9, 92, 85, 35, 77, -46, -74, 47, 49, -76, -105, -38]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[120, 38, 60, -64, -121, -22, -106, -54, 83, 54, 72, -81, -124, -88, -21, -12, 103, -24, -16, -9, -101, -22, 7, -93, 42, 89, 16, -29, 80, 98, -120, 70, 95, -6, -2, -124, -122, -79, 125, -7, 55, 85, -28, -37, 60, 0, -17, 116]");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey2);
        java.lang.Class<?> wildcardClass5 = secretKey2.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[8, -50, 69, -128, 46, -58, 112, 3, 51, -91, 125, -89, 61, 1, -34, -118]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-57, -88, -6, 52, 95, 97, 75, 41, -52, -110, -11, 21, -6, 63, -44, -89]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey13);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[47, -28, 61, -122, 39, 5, 72, 3, 109, 10, 58, -14, -69, -103, -63, -30]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[21, -87, 38, 127, -59, -72, -1, -9, -63, 61, -128, -57, 79, 57, -79, 18]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-115, -60, -97, -98, 127, 63, -99, -59, -18, -34, -66, -84, 37, 65, 37, -32]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, -28, 61, -122, 39, 5, 72, 3, 109, 10, 58, -14, -69, -103, -63, -30]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2FE43D86270548036D0A3AF2BB99C1E2" + "'", str9, "2FE43D86270548036D0A3AF2BB99C1E2");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-68, 50, 38, 1, 47, -58, -48, -124, 83, -31, -81, 43, -35, 69, 49, 15]");
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey12);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-31, -53, 43, 14, -29, -9, 91, -67, 59, -43, -54, -49, -89, 28, 47, -32]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[8, 37, 68, -50, -111, 105, -121, -103, -17, -89, -97, -16, 24, -115, -73, -114]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[8, 37, 68, -50, -111, 105, -121, -103, -17, -89, -97, -16, 24, -115, -73, -114]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[25, -126, -89, 54, 59, 77, 49, 100, 87, -38, -19, -117, -120, 25, -82, -40]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-114, -48, -5, -83, -46, -5, 80, -77, 125, 60, -112, -104, 99, -59, -122, 54]");
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey25);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-123, 118, 9, 17, 6, -102, 9, -36, -128, -86, -65, 14, -60, 39, 62, -105]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[95, -43, -1, -104, -41, -72, 46, -82, 61, 124, -22, 32, 20, -35, 24, -28]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[95, -43, -1, -104, -41, -72, 46, -82, 61, 124, -22, 32, 20, -35, 24, -28]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "5FD5FF98D7B82EAE3D7CEA2014DD18E4" + "'", str7, "5FD5FF98D7B82EAE3D7CEA2014DD18E4");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-2, -33, -39, 22, -35, -23, -14, -30, 79, 34, 114, -26, -2, 112, 41, 58]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-73, 82, 4, 118, 109, 62, 96, -65, 104, 106, -4, -101, 103, -55, -56, -123]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-9, 44, -125, 96, 57, 25, 119, -10, -57, 108, -39, 123, -104, 101, 30, 25]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-76, -90, -106, 30, 46, 54, -127, -48, 22, 15, -106, -85, -118, 104, 46, 123]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-94, 35, -127, -73, -17, -11, 106, -46, -24, -66, 48, -20, 12, 103, 3, -62, -50, -82, -96, 76, 25, 123, 21, -27, -126, -31, 22, -128, -88, 71, -77, 37, -9, 44, -125, 96, 57, 25, 119, -10, -57, 108, -39, 123, -104, 101, 30, 25]");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey2);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey9);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[92, -55, 72, -24, -26, 103, -8, -5, 67, 55, -93, 124, -54, -5, -15, 42]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-82, -7, 111, -16, 75, -95, -50, 38, 96, 57, -114, 85, 57, 0, -95, -65]");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[88, 7, 111, 23, 25, 2, 80, 115, 61, 85, 23, -119, -23, 115, -65, -60]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-40, -26, -12, 47, 50, -98, -124, 118, 19, -71, 73, -51, 80, 49, 22, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[115, -41, 64, -98, 1, -28, 74, 50, 2, 92, 114, 21, -56, 32, 116, 104]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[88, 7, 111, 23, 25, 2, 80, 115, 61, 85, 23, -119, -23, 115, -65, -60]");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey5);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey18);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[71, 35, -77, -5, 105, 116, 39, -26, 88, -24, -3, 50, -88, -103, 41, -103]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-72, 114, 18, -41, 49, -12, 93, 11, -78, -27, -80, 96, 84, 64, -36, 85]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[77, 7, 4, 87, 114, 10, -106, 75, 51, -31, 47, -53, -109, 82, 30, 81]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[71, 35, -77, -5, 105, 116, 39, -26, 88, -24, -3, 50, -88, -103, 41, -103]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 26, -105, -103, 11, -81, 84, -93, 18, -42, 34, -122, -67, -106, 38, -114, 111, 74, -120, 4, 116, 12, 15, -54, -35, 37, -109, 80, 19, -78, 6, 91, 120, -8, 27, 73, 45, 59, -94, -49, -119, -117, -11, 122, 45, -31, -98, -59, -112, -58, -111, -87, 101, -4, -97, -23, -36, -18, 12, 69, -86, -90, 92, -96, 102, 107, 94, 107, -93, -21, 4, -8, 37, -91, -98, -106, -98, -21, 104, 19, 126, 20, 94, 67, -118, -38, -85, -65, 70, 55, -81, 6, 39, -32, 96, 47, 71, 35, -77, -5, 105, 116, 39, -26, 88, -24, -3, 50, -88, -103, 41, -103]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[66, 6, -40, -15, 0, 2, -57, 107, 42, -19, 53, -71, 85, -82, -122, -8]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-26, 107, -28, -3, 84, 83, -92, -16, -117, 45, 11, 78, 126, -79, 103, 66]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-116, -68, 123, -63, 4, -65, -74, -44, -80, -26, -33, 100, 121, -46, -44, 101, 116, 114, 63, -108, 18, -85, 49, -66, 95, 53, 40, -88, 89, -73, 98, 123, -8, 94, -84, 48, -95, 5, 76, -80, 65, 101, -50, -7, 99, -93, 123, -6, -119, 115, -40, 89, 47, -100, 8, 46, 33, 13, 0, 116, -125, 15, -57, 115, -60, 86, 77, 5, -50, 113, -9, -119, 65, -106, 104, -17, 61, 25, 42, -76, 94, 19, 14, -127, -89, 118, -13, -107, 27, 88, -78, 48, 117, 98, 67, -70, 66, 6, -40, -15, 0, 2, -57, 107, 42, -19, 53, -71, 85, -82, -122, -8]");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[62, 95, 85, -88, 45, 101, 117, 76, 61, -18, 127, -73, -55, -30, 24, 101]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[55, 33, -100, 121, -39, 16, 54, 112, 29, 115, 44, 37, 26, -111, -73, -70]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[55, 33, -100, 121, -39, 16, 54, 112, 29, 115, 44, 37, 26, -111, -73, -70]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[69, 84, 6, 81, 122, -25, -14, 85, 97, 11, 100, -110, 48, -56, -51, -104]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[55, 33, -100, 121, -39, 16, 54, 112, 29, 115, 44, 37, 26, -111, -73, -70]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        com.thealgorithms.ciphers.AESEncryption aESEncryption0 = new com.thealgorithms.ciphers.AESEncryption();
        java.lang.Class<?> wildcardClass1 = aESEncryption0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.Class<?> wildcardClass7 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[55, -76, 122, -32, 65, 88, -66, 84, 125, -39, -40, -52, 84, -10, 40, 91]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-73, -93, -115, 109, 33, 23, 27, -48, 48, 64, -82, -117, -48, -108, 45, 32]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B7A38D6D21171BD03040AE8BD0942D20" + "'", str5, "B7A38D6D21171BD03040AE8BD0942D20");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B7A38D6D21171BD03040AE8BD0942D20" + "'", str6, "B7A38D6D21171BD03040AE8BD0942D20");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        java.lang.Class<?> wildcardClass30 = secretKey25.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-13, 88, -55, 124, 13, 121, -68, -93, 41, 110, 56, -123, -78, -9, 122, 31]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-102, 123, -75, -19, -30, -98, -55, 98, 127, -27, -64, -83, 94, 87, -60, -67]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-74, -85, -112, -87, -34, 106, -88, 112, 35, -70, -102, 64, 70, 127, 14, 6]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-107, -52, -76, -61, 61, -58, -110, -61, -115, 69, -105, 126, -61, 55, -96, 106]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 44, -100, -38, 49, 88, -128, -29, 97, -22, 10, -60, 82, 22, -58, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[13, -66, 104, 10, 21, 72, 67, -85, -63, 46, -16, 108, 62, 43, -3, -103]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[13, -66, 104, 10, 21, 72, 67, -85, -63, 46, -16, 108, 62, 43, -3, -103]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey10);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[86, -21, -8, 77, 92, -127, -16, 45, 33, 33, 62, -39, -56, 11, 69, 78]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[95, 83, 120, -47, -15, -82, 26, -22, -83, 114, -66, -34, -119, 53, 66, -106]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[95, 83, 120, -47, -15, -82, 26, -22, -83, 114, -66, -34, -119, 53, 66, -106]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-19, -3, 41, -63, -117, -66, -34, 43, -82, 37, 62, -99, -47, 109, -108, 3]");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey17);
        java.lang.Class<?> wildcardClass23 = secretKey17.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[64, -39, 74, -34, -25, -53, -39, -112, 77, -94, -80, -124, -85, 86, 34, -53]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[112, -12, 60, -9, -111, -51, -18, -28, -43, 38, 105, -86, -118, 86, -62, -10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-40, -115, 32, -84, 88, 85, 109, -73, 51, 25, -27, -117, 11, -33, -65, -21]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 63, 13, 84, 44, -18, 100, -58, 60, -115, -6, -20, -21, 42, -56, 87]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[16, 62, 100, -126, 82, 104, -63, -64, 68, 48, -93, 43, -80, 119, 25, 64, -35, -56, -10, -47, 98, -11, -66, -77, 118, 57, 99, -65, 105, -108, -41, 60, -40, -115, 32, -84, 88, 85, 109, -73, 51, 25, -27, -117, 11, -33, -65, -21]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey7);
        java.lang.Class<?> wildcardClass12 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[22, 8, 57, 11, -65, 105, 74, -126, -78, 54, -91, -24, -58, -97, -55, -81]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-98, -87, 117, -80, 74, 127, -118, -36, 54, 96, 113, -92, -6, -5, 37, -82]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[57, 49, -70, 23, 106, 39, -71, 29, -107, -117, 34, 72, -25, -50, 109, -31, -95, -42, -116, -68, 37, 101, -45, 7, 102, -63, 35, 57, 39, -41, 11, -60, 56, 7, -59, -64, 108, 49, -76, -111, 38, -25, 10, 73, 31, 17, 88, 115, -108, -49, -22, -46, -54, -113, -105, 7, -87, 89, 26, 17, -92, 58, 107, -119, -121, -75, -18, 108, 103, 20, 42, -119, 12, -59, -81, -65, -40, -4, 3, -46, -113, -86, 111, -126, 17, -30, -119, -76, 86, -33, -75, -60, -112, -99, -81, -14, 22, 8, 57, 11, -65, 105, 74, -126, -78, 54, -91, -24, -58, -97, -55, -81]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[125, -12, 5, -105, -75, 80, -34, -41, -12, -51, -34, 8, -73, -33, -82, 20]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-118, -17, 7, 105, 33, 66, 97, 126, -56, -124, 115, 120, 65, 35, 68, 29]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-27, 53, 93, -36, 9, 98, -101, 69, 20, -14, 109, 102, -72, -127, 13, 36]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey17);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey26);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[2, -4, 26, 23, 20, 89, 3, 104, -90, -73, -48, -47, -86, 90, 100, -12]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[121, -77, 97, 48, 9, 121, -46, -95, -46, -61, 41, 77, -4, 123, -111, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[52, -48, 16, 65, 69, -115, -59, -72, -56, -6, 86, 47, 25, -31, 127, 97]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[5, 61, 78, 7, 77, -110, -95, 11, 33, -112, -84, 61, 111, 115, 75, 38]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[45, -117, 91, 95, -93, 96, 1, 89, 6, -14, -48, -32, 55, -60, -127, 76, 66, -119, -5, -102, -25, -22, 99, -95, 126, -23, -117, -29, 67, 52, -29, 121, 52, -48, 16, 65, 69, -115, -59, -72, -56, -6, 86, 47, 25, -31, 127, 97]");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-82, -109, -41, -79, 26, -96, -19, 67, 6, 6, 73, 85, -118, 92, -96, -19]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[56, -96, 115, 20, -48, 51, -11, -4, 124, -123, -96, -33, 59, -68, -114, -40]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[56, -96, 115, 20, -48, 51, -11, -4, 124, -123, -96, -33, 59, -68, -114, -40]");
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey6);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-70, 104, -103, -82, -11, 100, -110, -70, 94, 27, -33, -83, 77, 108, -104, 42]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[36, 106, -105, 41, 9, -76, 15, -20, 88, 89, 70, 11, -75, -37, -34, -27]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[36, 106, -105, 41, 9, -76, 15, -20, 88, 89, 70, 11, -75, -37, -34, -27]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 78, 20, -56, -75, 123, 23, -119, -36, 48, -12, 106, 65, 23, -12, -79]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[36, 106, -105, 41, 9, -76, 15, -20, 88, 89, 70, 11, -75, -37, -34, -27]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-87, -45, -125, 18, 33, 37, 34, 28, 81, 22, -39, 19, 13, -2, -69, 61, 97, -121, 54, -19, 123, 51, 65, -125, 66, -13, -56, -71, 40, -68, -3, 4, -70, 104, -103, -82, -11, 100, -110, -70, 94, 27, -33, -83, 77, 108, -104, 42]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-67, 64, 35, -55, -92, -24, -91, 54, -88, -109, 100, -43, 83, 110, 88, -96]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-97, -22, 106, 77, -33, -102, -51, -75, -57, 114, -12, 49, 78, -122, 10, 95]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-63, -54, -51, -54, 7, -63, 63, -92, 22, 1, -33, 11, 88, -23, 85, -107]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[58, 117, 16, 73, 66, -127, 123, -1, -6, 93, -63, -12, 61, -83, 84, -107]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[5, 72, 17, 69, -9, 13, -40, -59, 100, 25, 99, -94, 89, -16, 13, 57, -66, 26, -35, 12, -50, 96, 108, -100, -104, -84, -107, 34, -34, -87, 84, -54, -63, -54, -51, -54, 7, -63, 63, -92, 22, 1, -33, 11, 88, -23, 85, -107]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-63, -54, -51, -54, 7, -63, 63, -92, 22, 1, -33, 11, 88, -23, 85, -107]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[58, 117, 16, 73, 66, -127, 123, -1, -6, 93, -63, -12, 61, -83, 84, -107]");
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey38);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey62);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey62);
        byte[] byteArray68 = new byte[] {};
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray68);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey70);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey74);
        byte[] byteArray78 = new byte[] {};
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray78);
        javax.crypto.SecretKey secretKey80 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray78, secretKey80);
        javax.crypto.SecretKey secretKey84 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey84);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey84);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray78, secretKey84);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey84);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey84);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey84);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey84);
        javax.crypto.SecretKey secretKey95 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey95);
        byte[] byteArray97 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey95);
        byte[] byteArray98 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey95);
        java.lang.String str99 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey95);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-76, -84, -99, 104, 46, 31, 106, -31, -29, 44, -123, 101, -68, -19, 50, -125]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-15, 52, 72, 124, 100, 99, -103, 116, 1, -100, -54, -60, -22, -48, -76, 2]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[36, 59, 116, 41, -22, -6, -15, 112, 84, -84, 119, 49, 83, 107, -119, -14]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-87, -41, -16, 33, -120, 11, -60, -75, 124, -44, 28, -102, -56, -17, -60, 23]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-13, -111, 24, -56, 95, 38, 78, -58, 7, -31, -121, -109, 15, 8, 36, 111]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-44, 17, 117, -34, -98, 96, 118, 65, 50, -13, 66, -35, 62, -99, -48, 36]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-104, -13, 61, -10, 41, -113, 37, -90, -103, 126, 69, 26, -87, 66, -120, 51]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[114, 55, 96, -62, 18, -79, -87, -109, -80, 41, -78, -45, -122, -26, -118, 87]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-14, 43, -57, -106, 6, 65, -99, -102, -84, 98, 86, 127, -69, -22, 112, 97, 0, -9, 116, -50, -47, -103, -44, -2, -46, -31, 68, 81, -54, 66, 36, 27, -104, -13, 61, -10, 41, -113, 37, -90, -103, 126, 69, 26, -87, 66, -120, 51]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[104, -29, 108, -47, 96, -61, -4, 46, 69, -124, 121, -77, 108, 6, 89, -118]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-76, 111, 113, 66, -103, -1, -44, 120, 82, 123, -91, -15, -105, -55, 49, 88]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-82, 4, 118, -94, -4, -71, 23, -72, 78, 42, -99, 87, -68, 17, 72, -93]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[36, -91, -4, 9, 43, -10, -63, -87, 28, 45, -25, -74, -112, -3, -77, 74]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-31, -88, 72, 92, -75, 9, 23, -19, 53, -76, -71, -16, -79, 6, 101, -15]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-41, 78, -104, -2, 38, 104, 109, -96, -53, 40, 41, 88, -31, 71, -112, -22]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(secretKey80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey84);
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-18, 69, 68, -123, 78, -113, 36, 77, -93, 52, 20, 45, 103, 114, -88, 127]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[42, 77, 82, 93, -10, -85, -51, 82, -21, 42, -87, -34, -43, -61, -118, 80]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[17, -73, -92, -81, 76, -94, 54, -13, 11, -109, -73, 97, 55, 123, 11, -23, 22, -77, 69, -125, 119, -110, -44, 42, -52, -4, -22, 97, -70, -125, -120, 4, -18, 69, 68, -123, 78, -113, 36, 77, -93, 52, 20, 45, 103, 114, -88, 127]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(secretKey95);
        org.junit.Assert.assertNotNull(byteArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[83, 7, -89, 101, -69, 65, -24, 13, -21, 73, -68, 114, 48, 12, -59, -33]");
        org.junit.Assert.assertNotNull(byteArray97);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[53, -14, -104, 4, 125, -101, 41, 61, 76, -24, -72, 82, -1, -77, 111, -107]");
        org.junit.Assert.assertNotNull(byteArray98);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[53, -14, -104, 4, 125, -101, 41, 61, 76, -24, -72, 82, -1, -77, 111, -107]");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-95, -116, 98, -82, 110, -105, -54, 3, -95, -121, 47, 25, -52, -41, 86, -91]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[125, 11, -117, -97, 98, 18, 99, -19, -68, 123, -68, 55, -89, 56, 19, -111]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[125, 11, -117, -97, 98, 18, 99, -19, -68, 123, -68, 55, -89, 56, 19, -111]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[16, 3, 49, 83, -48, -48, 110, -72, 19, 104, 94, 118, 10, -96, 114, -48]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        java.lang.Class<?> wildcardClass25 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-41, 118, 37, -38, 31, -59, -11, 104, 125, 7, 99, -83, -18, 81, 120, 79]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-22, 68, 49, -1, 48, 46, 86, 73, -11, 109, 19, -59, -128, -37, -105, 98]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-38, 65, 7, -33, 103, 30, -89, 79, 79, 42, 118, -66, -118, 4, 109, -88]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[30, -37, -24, 37, -92, 13, 48, 79, -119, -86, 122, 11, 2, 45, -38, -91]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122, 28, -111, 90, 108, 72, 118, -16, 1, -74, -49, 0, -25, 11, -3, -121, -69, -106, -104, 92, -101, -45, 1, -72, 112, 94, 45, 6, -57, 72, -10, 82, -38, 65, 7, -33, 103, 30, -89, 79, 79, 42, 118, -66, -118, 4, 109, -88]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[88, 106, 116, -111, -128, -83, 28, 118, 111, -42, -33, 45, 78, 61, 34, 2, 54, 47, -19, -23, -111, -36, 35, -122, -56, 6, -20, -62, 99, -48, -60, -8, -38, 65, 7, -33, 103, 30, -89, 79, 79, 42, 118, -66, -118, 4, 109, -88]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey17);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey41);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[117, 61, 19, 113, 6, 109, -83, 111, 100, -46, -47, -39, 102, -25, -127, -69]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-88, -103, 34, -76, 125, 92, -17, 87, 120, 75, 106, 114, -8, 71, -4, 3]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-28, 41, 26, -103, 91, -93, -73, -98, -43, 35, 23, 27, 125, -90, -109, -103]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[91, -59, -8, 93, 30, -103, 12, -34, 112, 110, 41, -76, -8, -15, 120, 76]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-96, 110, -7, -126, 11, 78, 24, 72, -82, -100, 54, -38, 98, 119, -106, -41, -50, -29, -116, -113, 21, -89, 113, -121, -96, 52, -59, 62, 57, -51, -63, -58, -28, 41, 26, -103, 91, -93, -73, -98, -43, 35, 23, 27, 125, -90, -109, -103]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[53, -100, 2, -5, -42, 125, -101, -46, 64, -85, -36, 57, 127, -128, -115, -31]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-90, -85, 32, 31, 79, -3, 50, 1, -9, -19, -13, -28, 114, -38, 56, -13]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-28, 118, 111, -69, -64, -93, -68, 21, -23, 88, -45, 107, 1, -95, 122, -77]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[77, -100, 28, 73, 56, 118, 58, -104, 67, -104, 20, 36, -34, 32, 98, 13]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-65, -124, 90, 1, 31, 108, -119, 6, -96, -73, 5, -107, 114, -53, 19, -104, -100, -49, -73, -16, -99, 83, -51, 65, 100, 72, -33, -13, -68, -59, 19, -25, -28, 118, 111, -69, -64, -93, -68, 21, -23, 88, -45, 107, 1, -95, 122, -77]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-121, -3, 126, 52, -55, -61, -11, 63, -12, -86, -10, -51, 78, 121, -114, -8, 21, 69, -100, -19, -76, 9, 51, -76, -61, -121, -70, 112, 18, -11, -113, -110, -28, 118, 111, -69, -64, -93, -68, 21, -23, 88, -45, 107, 1, -95, 122, -77]");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[81, -35, 9, 53, -5, 96, -87, -106, -67, -30, -30, -83, 57, -120, 49, 74]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-97, 88, 3, 83, 118, 81, 25, 0, -119, 35, 45, -125, 60, 34, -2, -33]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[110, -87, -89, 40, 99, -69, -102, 124, -83, -86, 73, 47, -51, 45, 29, -52]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, -35, 9, 53, -5, 96, -87, -106, -67, -30, -30, -83, 57, -120, 49, 74]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-47, 0, 62, 39, 111, -123, -22, -7, 48, 109, 5, 53, 89, 86, -9, -121, -70, 16, -21, 53, 75, 88, 55, 28, 29, -31, 9, -11, 94, -61, -94, -71, -42, 111, 125, -107, -106, 62, -127, -19, 111, 1, -59, -127, 104, -11, -7, -48, 4, -96, -127, -106, -46, 100, 62, 42, 18, -47, 111, -6, -53, -9, -111, 10, -13, 90, -86, -53, -111, -116, 74, 63, -41, 97, -69, 82, 81, -123, 80, 79, 127, 29, -106, 124, 79, -68, 126, -69, -88, 120, -10, 5, -47, -76, -121, -26, 81, -35, 9, 53, -5, 96, -87, -106, -67, -30, -30, -83, 57, -120, 49, 74]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        java.lang.Class<?> wildcardClass25 = secretKey18.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[125, 21, -44, -37, -49, 121, 65, -108, -8, 65, 59, -96, 108, -96, 101, -65]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[62, -113, 12, -51, 23, -28, -94, 125, 39, 119, 26, -21, 119, -103, 41, -8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-30, 1, 5, -91, -128, -106, 78, 41, 123, -69, -115, 56, 19, -31, 102, -83]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-90, -14, -66, 7, 73, 90, -15, 13, -32, -111, 97, 34, -72, 30, 82, 28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-63, -104, 40, -93, 67, -38, 30, -46, -120, 30, -82, -75, 60, 114, 50, -3, -102, -33, -3, 77, 17, -63, -7, -117, 114, -118, 111, 67, 69, -20, -83, 54, -30, 1, 5, -91, -128, -106, 78, 41, 123, -69, -115, 56, 19, -31, 102, -83]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-30, 1, 5, -91, -128, -106, 78, 41, 123, -69, -115, 56, 19, -31, 102, -83]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey25);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-64, -37, -117, -13, 70, 94, -14, -23, 125, -64, -71, 70, -21, 22, 25, 122]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-18, 77, 15, 118, -22, 45, -14, 116, 90, -111, -46, 53, -87, 104, -54, 60]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-18, 77, 15, 118, -22, 45, -14, 116, 90, -111, -46, 53, -87, 104, -54, 60]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[112, -57, -15, -3, 109, 59, 59, -128, 95, -81, -21, 106, 9, 116, 72, -14]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-52, -51, 76, -43, 20, -119, -29, -113, 51, 122, -17, -17, 24, 114, -114, -27]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[102, -26, -4, 101, 113, 14, -64, -45, -80, -88, -114, 117, 104, -18, -52, 82]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-6, -59, 37, 111, -85, 27, 94, 124, 74, 66, -102, -53, -91, 41, 91, 105]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-17, -61, -115, -43, 69, -34, -43, 81, -9, 5, -20, -81, -29, -9, -6, 117, 36, 58, -5, -99, -125, -23, -80, -8, -59, -74, 78, -23, 54, -23, 124, 90, 102, -26, -4, 101, 113, 14, -64, -45, -80, -88, -114, 117, 104, -18, -52, 82]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-121, -73, -19, -31, -43, 21, -65, -128, -8, -58, 9, -86, -20, 1, 124, 120, 70, 82, 14, -69, 0, 12, -55, 55, 12, -103, 54, 44, -17, 59, -127, 94, 102, -26, -4, 101, 113, 14, -64, -45, -80, -88, -114, 117, 104, -18, -52, 82]");
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.Class<?> wildcardClass4 = byteArray2.getClass();
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-36, -127, -60, -96, 95, 22, -108, -13, -56, 35, 39, 95, -27, -27, -113, -120]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DC81C4A05F1694F3C823275FE5E58F88" + "'", str3, "DC81C4A05F1694F3C823275FE5E58F88");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey43);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey43);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey67);
        byte[] byteArray73 = new byte[] {};
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray73);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey75);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey79);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey79);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey79);
        byte[] byteArray83 = new byte[] {};
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray83);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray83, secretKey85);
        javax.crypto.SecretKey secretKey89 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey89);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey89);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray83, secretKey89);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey89);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey89);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey89);
        java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey89);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-115, -24, 6, 81, 75, -75, -47, 63, -77, -121, -42, -34, -121, -41, -68, 31]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "8DE806514BB5D13FB387D6DE87D7BC1F" + "'", str3, "8DE806514BB5D13FB387D6DE87D7BC1F");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "8DE806514BB5D13FB387D6DE87D7BC1F" + "'", str4, "8DE806514BB5D13FB387D6DE87D7BC1F");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-21, 63, 15, -87, 106, 90, 25, -55, 34, 43, 102, 115, -58, 61, -35, -22]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-127, 28, 49, 2, 10, -112, -97, -61, 40, -26, 58, -42, -125, -33, -93, -59]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[88, -100, -78, 34, 96, -38, 16, -110, -108, 59, 106, 30, -122, -125, -120, -30]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[98, -103, 23, -71, 126, -25, 38, -62, -67, -91, -65, 9, -54, 1, 25, -20]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[91, -73, -52, -74, 121, 48, -119, -73, -52, -36, -76, 6, 20, 10, 48, -35]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[72, 98, -30, 92, -22, 65, -64, 25, 124, 30, 78, 24, 84, -21, 74, 110]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-9, 81, -87, -122, 77, -66, 100, 126, 104, 22, 4, 5, 42, 55, -77, -46]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-99, -4, -33, 83, -97, -50, -24, -127, -74, 58, 123, -50, 90, -123, -103, 56]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[70, -74, -112, -73, 50, -118, 47, -77, -6, 126, -87, -62, 110, 10, 19, -72, 0, 114, -113, -70, 12, -88, -14, 29, 81, -35, 35, -85, -70, 69, 70, -79, -9, 81, -87, -122, 77, -66, 100, 126, 104, 22, 4, 5, 42, 55, -77, -46]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-102, 4, 90, 89, 56, -76, 19, -89, -67, 22, -82, -87, 49, 27, -90, 121]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-65, -25, 40, 93, -102, -104, 118, 104, -115, 125, 108, 114, -11, 103, -29, 88]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-28, -24, -36, 22, 9, -94, 7, 9, 85, 66, 116, -3, -86, -2, 69, 90]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[58, -19, 106, 104, -14, 4, 31, 108, -26, -12, -79, -73, 82, 29, -127, -71]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[19, -93, -35, -116, 101, 65, -18, 76, 22, -67, -43, 107, -24, -66, 55, -59]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[40, 34, 6, -50, 72, 90, -124, 86, 126, -2, 60, -91, -28, -45, -8, -16]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(secretKey89);
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-96, 57, 69, 84, -114, 39, 4, 47, -87, 61, -85, -57, 115, 79, -92, -57]");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[113, -71, -42, 21, -67, 76, 111, -6, -77, -7, 44, 66, 78, 121, -38, -118]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[57, 107, -79, -32, 49, 119, 72, 45, -64, -44, 92, 12, -80, -3, -30, 80, -127, -78, -81, -47, 70, 84, -51, 63, -100, 118, 104, -41, 69, 91, -49, 116, -96, 57, 69, 84, -114, 39, 4, 47, -87, 61, -85, -57, 115, 79, -92, -57]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey31);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[26, -92, -46, -122, -65, -106, 74, -101, 103, -73, 43, 102, -94, -28, -127, 99]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[29, -111, -2, -82, 41, -118, 27, -28, 72, 54, -43, -37, 108, -16, 44, -119]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[78, -43, 79, -19, -32, -116, -19, -116, -116, 105, -104, -4, -61, -112, 51, 36]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-114, 45, 104, -59, -19, 99, 58, 90, -54, 60, -115, 12, 20, -108, -84, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[110, 40, -57, 77, 37, 33, -79, 53, -86, 2, -100, -116, 94, -66, 69, 93, 53, 34, -97, 105, -127, 58, -68, -2, -89, -127, 104, 20, 82, 36, -34, 91, 78, -43, 79, -19, -32, -116, -19, -116, -116, 105, -104, -4, -61, -112, 51, 36]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "6E28C74D2521B135AA029C8C5EBE455D35229F69813ABCFEA78168145224DE5B4ED54FEDE08CED8C8C6998FCC3903324" + "'", str23, "6E28C74D2521B135AA029C8C5EBE455D35229F69813ABCFEA78168145224DE5B4ED54FEDE08CED8C8C6998FCC3903324");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-56, -68, -33, -24, -17, 48, -66, -15, 73, 78, -17, -98, -7, -96, 92, 127]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-26, -101, 121, 91, 29, -127, -13, 52, 38, -49, -108, 68, -109, -122, 51, -116]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-72, -33, 96, -18, -70, 127, 100, 103, 41, -13, 106, 14, 120, 85, 21, 42, -39, 40, 0, 111, -85, 0, -6, -17, -45, -126, -112, 92, 52, 48, -36, -115, 36, 105, -27, 58, -42, 14, 82, -51, 93, -50, -23, -49, 45, -103, 14, -45, -71, 88, -116, 40, -65, -65, 127, -111, 40, 119, -19, -86, 60, 125, -3, 0, 47, -47, 106, -102, -40, -46, 1, -74, 63, -27, 108, -9, -18, 82, -100, -41, -22, 30, 10, 115, 106, 104, -42, -21, 81, 78, -86, 41, -111, 93, 98, 36, -56, -68, -33, -24, -17, 48, -66, -15, 73, 78, -17, -98, -7, -96, 92, 127]");
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey45);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey45);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-104, -59, 86, -90, 122, -40, 71, 32, 0, 36, 26, 123, 119, 64, -82, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[63, 61, -128, -59, 54, -8, 79, -121, 63, -2, -111, 122, 28, 85, 43, 93]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-123, -105, -66, -43, -16, -57, 93, -38, 125, -107, -94, -102, -69, -104, 80, -13]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[54, -121, -104, 52, -121, -62, 97, 54, -17, -79, -39, 76, 103, 4, -16, 59]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[15, -10, 6, -46, 42, 46, -33, 126, 44, -54, -59, 120, -111, -93, -123, 50, 85, -98, 111, -125, 67, -30, -77, 20, 21, -43, 29, 115, 52, -112, -14, -81, -123, -105, -66, -43, -16, -57, 93, -38, 125, -107, -94, -102, -69, -104, 80, -13]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-123, -105, -66, -43, -16, -57, 93, -38, 125, -107, -94, -102, -69, -104, 80, -13]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[54, -121, -104, 52, -121, -62, 97, 54, -17, -79, -39, 76, 103, 4, -16, 59]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, -27, 5, -83, 85, -83, -25, 1, 19, 78, -82, 61, 81, -34, -24, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[90, 120, 41, 25, 51, 72, -128, 68, 121, -100, 9, 23, 14, 12, -96, -101]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-7, 35, 99, -74, 3, 2, 102, -54, 61, -17, 61, 106, 9, -109, 77, -56]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[121, 58, 7, -79, 25, 95, -69, 60, -113, -10, 96, -38, -20, 103, -86, 23]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-118, -113, 97, -70, 46, 85, 127, 114, -21, 78, -11, -13, -20, 63, 33, -13, -120, 99, -73, 33, 20, 90, 32, -55, 125, -120, 66, -52, -43, -16, -50, -59, -7, 35, 99, -74, 3, 2, 102, -54, 61, -17, 61, 106, 9, -109, 77, -56]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-7, 35, 99, -74, 3, 2, 102, -54, 61, -17, 61, 106, 9, -109, 77, -56]");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        byte[] byteArray0 = null;
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-117, -6, 40, -42, 112, -88, -125, 70, 126, 97, -79, 38, 50, -115, 70, -26]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[34, 31, 113, 59, -56, 18, -59, 116, 98, -3, 10, 98, -51, -45, -58, 99]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[19, -51, 33, 106, -55, -19, 20, 87, -45, -81, -116, 51, -117, 79, -72, -35]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-21, 120, 39, -83, -127, 59, 94, 90, -92, -125, 101, -99, 44, -84, -43, -123]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 104, -84, -42, -8, -92, -122, -24, 125, -94, 99, -57, 13, -35, -101, 45]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0A68ACD6F8A486E87DA263C70DDD9B2D" + "'", str7, "0A68ACD6F8A486E87DA263C70DDD9B2D");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0A68ACD6F8A486E87DA263C70DDD9B2D" + "'", str8, "0A68ACD6F8A486E87DA263C70DDD9B2D");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-12, -21, 100, -108, 123, 2, -98, 35, -60, -51, 40, -124, -11, 111, 114, 91]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[7, -114, 118, 51, 59, -40, 53, 69, -98, 15, 109, 13, -78, 14, -46, 4]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-126, -22, -87, -59, 2, 71, -99, -43, 107, -43, 37, -56, -69, -88, -52, 10]");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-39, 22, -70, -51, 81, 72, 1, 3, 97, 34, 93, 85, 64, 45, 106, -93]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey26);
        java.lang.Class<?> wildcardClass32 = byteArray31.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-83, 110, 47, 69, -31, 49, -89, 102, 61, -94, -33, -111, 94, 34, -36, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-107, -59, -40, 100, -88, -70, 23, -86, -42, 52, -62, -38, -6, 87, 114, -122]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-22, -50, -76, 18, -12, 86, -17, 30, -20, -53, 19, -50, -9, 62, -116, 77]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-29, -113, -76, -120, 19, -58, -50, -21, -109, 5, 55, 87, -101, 47, -12, -80]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-110, 36, -100, -56, 80, -121, 13, 122, 100, -60, 97, 96, 91, 120, -11, 34]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[65, 95, -126, 106, -52, -90, -107, -24, -56, -35, -101, 0, -21, 25, -28, -41]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 95, -126, 106, -52, -90, -107, -24, -56, -35, -101, 0, -21, 25, -28, -41]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-113, 75, 109, -19, -83, -48, 29, -14, 15, 55, 15, -68, -41, 36, 21, -62, -107, 73, -90, -83, 121, -50, 79, -104, -30, -22, 104, -59, -125, 107, -89, -121, -110, 36, -100, -56, 80, -121, 13, 122, 100, -60, 97, 96, 91, 120, -11, 34]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.Class<?> wildcardClass26 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-128, 90, -123, 108, 69, 69, 28, -50, 64, 9, 39, 58, 8, -70, 104, -24]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[67, -32, 57, 16, 40, -56, -84, -104, -12, -115, 98, -122, -83, -127, -52, -59]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-81, 56, -122, 56, 118, -67, 11, 14, -122, -118, -52, 46, 99, 42, 64, -62]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-35, -127, -65, 56, 4, 18, -78, 58, -37, -42, 5, 42, -44, -123, 11, 2]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-46, -8, -32, 61, -31, -61, 80, 101, -104, 73, -58, -50, -8, -28, 32, 7, 68, 8, -116, 23, 6, 44, 83, 122, -89, -35, -118, -29, -38, 39, -105, 3, -81, 56, -122, 56, 118, -67, 11, 14, -122, -118, -52, 46, 99, 42, 64, -62]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[77, 102, -100, -127, 38, 17, -44, 18, 101, 80, 16, -42, -111, 105, -123, -80, 89, -62, -84, -54, 118, 56, -65, -45, 92, 38, -37, 87, 14, 57, -66, -26, -81, 56, -122, 56, 118, -67, 11, 14, -122, -118, -52, 46, 99, 42, 64, -62]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2" + "'", str25, "4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-71, -76, 5, 6, -81, 103, 14, 86, -102, 115, 115, -82, -90, 33, -70, 117]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-90, 117, 18, 91, -73, -103, -98, -49, 61, -57, -21, 17, 98, 98, -65, -89]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-33, 59, 73, 8, -41, 101, 113, 39, -108, 122, 22, -50, -35, -57, -108, -66]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-71, -76, 5, 6, -81, 103, 14, 86, -102, 115, 115, -82, -90, 33, -70, 117]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, -66, 77, 75, 90, -13, 23, -118, -44, -30, 99, 47, -128, 94, 72, 37, -16, -112, 125, 64, 65, 36, -107, -87, -122, 91, -1, 5, 82, 3, -90, 15, -71, -76, 5, 6, -81, 103, 14, 86, -102, 115, 115, -82, -90, 33, -70, 117]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[93, 94, 31, -35, -4, -106, -70, -22, -97, -70, -16, 32, -27, 64, -39, -126, 42, -47, -27, 36, 78, 36, -20, -56, 4, -23, -65, -11, -28, 108, 11, -96, -71, -76, 5, 6, -81, 103, 14, 86, -102, 115, 115, -82, -90, 33, -70, 117]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-67, -11, -84, 25, 125, 27, -26, -108, -85, 89, 48, -78, 54, -68, 16, -25]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[48, -28, 65, 106, 9, -4, -58, 42, -55, 64, 53, -109, -102, 56, 33, -26]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-44, 25, -77, -36, -12, -121, 112, -70, -75, 124, -51, 2, -64, 127, 110, 112]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-70, -123, 31, 8, 123, 118, -94, -126, 115, 7, -110, -59, -128, -89, 13, -123]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122, -81, 26, -98, -56, -85, 44, -32, 79, -6, -40, -104, 124, -18, -103, 71, 62, -17, -125, 52, -88, 126, -9, 115, 111, 45, -97, 96, 30, -111, 57, 122, -44, 25, -77, -36, -12, -121, 112, -70, -75, 124, -51, 2, -64, 127, 110, 112]");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -119, -41, -29, 107, 122, 108, 88, 115, 111, -61, 84, 93, 108, 32, -51]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[37, -123, 107, 24, 115, -24, -98, 45, 103, 104, -21, 105, -103, 116, -25, -63]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[5, 68, -46, 10, -107, -107, 69, -33, -46, 99, 8, 61, 10, 120, -127, -57]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -119, -41, -29, 107, 122, 108, 88, 115, 111, -61, 84, 93, 108, 32, -51]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-98, 74, -71, -111, 32, 68, 64, -14, 127, -7, 62, -111, -26, -21, -121, 92, 49, -14, 14, 109, 64, 17, 43, 91, -126, 97, 47, -100, -69, 94, 112, 122, -84, -119, -41, -29, 107, 122, 108, 88, 115, 111, -61, 84, 93, 108, 32, -51]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[110, -22, 124, -62, -34, -36, 23, 114, -89, 56, 55, 120, 119, -118, -103, -57, -119, -65, 19, -90, -127, -19, -113, 50, -82, -102, -37, -74, 26, 88, -100, -70, -84, -119, -41, -29, 107, 122, 108, 88, 115, 111, -61, 84, 93, 108, 32, -51]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey38);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass46 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-22, -59, 14, -110, -28, 124, -37, -71, -85, -90, -72, -56, 86, -31, -64, -85]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[32, -81, -40, -48, 31, -42, -3, -83, 74, -55, 2, -4, 48, 0, 8, -11]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[54, 93, 96, 50, -21, -91, 94, 47, -114, 81, -30, -43, 68, 23, 121, 40]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-14, 124, -66, 60, 95, -72, -122, 79, -104, -21, 112, 93, -25, 108, -71, -118]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[88, 120, 114, -29, -33, 29, 88, 85, -2, 127, -9, -107, -119, -1, 75, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[58, -61, -106, 123, 114, -128, -12, -21, -121, 125, -86, -27, -49, 117, 29, 75]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-108, -71, 107, 52, 70, -47, -64, -2, -101, -17, -82, 79, 110, 34, -22, 69]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[50, -108, 99, 29, 86, -120, -42, -100, -128, -63, -92, 29, 115, 112, -118, -43]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-90, -56, -70, -107, -33, 97, -28, -64, 12, -108, 28, 107, -92, 105, -109, 65, -8, 83, -17, 92, 36, -29, -4, -67, -34, -88, 65, -113, 41, 124, -104, 124, -108, -71, 107, 52, 70, -47, -64, -2, -101, -17, -82, 79, 110, 34, -22, 69]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-8, 19, -12, -80, 34, -63, 94, -50, 29, 77, -104, -91, -50, 11, -70, -7]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-99, 89, 24, -128, -119, -41, -90, -110, -58, -92, 125, 40, -77, 11, 84, -40]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-4, 58, 51, 121, 13, -68, -22, 13, -91, 110, -90, -116, 0, 45, -69, 99]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-30, 93, -124, -78, 122, 123, -126, -126, 25, -68, -111, -56, -26, 51, 18, 83]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-4, -80, -118, -74, -11, -97, 104, 86, -37, -57, 38, 122, 52, 72, -51, 113, -49, -75, 1, -105, 109, -120, -128, 104, -14, 124, 4, -52, 58, 46, 65, -94, -4, 58, 51, 121, 13, -68, -22, 13, -91, 110, -90, -116, 0, 45, -69, 99]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-4, 58, 51, 121, 13, -68, -22, 13, -91, 110, -90, -116, 0, 45, -69, 99]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-30, 93, -124, -78, 122, 123, -126, -126, 25, -68, -111, -56, -26, 51, 18, 83]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey19);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-59, -50, -111, 83, 122, 115, 109, 105, 108, -116, 61, -90, 118, 46, -8, 59]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-107, 10, 90, 66, -100, -90, 97, -109, 115, 62, 120, -80, -12, 37, -23, -78]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[49, 122, 4, 106, -84, -28, 86, -51, 11, -109, -28, 79, 102, -7, 36, 84]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-82, -61, -43, 9, -56, -1, -108, -72, -88, 48, 86, -52, 3, 84, -11, 112]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-15, 119, 106, 43, -70, -93, -39, 93, 93, 61, 61, -112, -10, -63, 60, 75, 0, 17, -53, 118, -128, -104, -117, 23, -126, -68, -12, 77, 117, 45, 119, 84, 49, 122, 4, 106, -84, -28, 86, -51, 11, -109, -28, 79, 102, -7, 36, 84]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[35, 124, -12, -104, 86, 112, 124, -106, 98, 53, 111, 82, -113, 38, 82, 85, -112, 36, -53, 3, 38, -70, 8, 115, 25, -127, 111, 5, 118, -23, -23, -120, 49, 122, 4, 106, -84, -28, 86, -51, 11, -109, -28, 79, 102, -7, 36, 84]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-60, -92, 61, -87, -6, -28, 13, -19, -124, 110, 109, -10, 97, -91, 26, 66, 62, -113, -74, 104, -52, 49, 124, -27, 5, -112, -25, 122, -61, -78, 48, 45, 77, 4, -121, -44, -59, -107, -22, -58, 103, 80, 22, -22, -94, -78, 94, 82, 67, 66, 17, 54, 40, -6, 13, -72, -105, 105, 113, 11, 65, 24, -84, 58, -41, 19, -27, 69, 87, -103, 92, 28, -15, -42, -8, 96, -18, 32, 27, 22, -59, 44, 116, -51, -85, 93, -113, -40, -109, -52, -79, -59, 115, 60, 71, 1, 49, 122, 4, 106, -84, -28, 86, -51, 11, -109, -28, 79, 102, -7, 36, 84]");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-14, 20, 115, 75, -78, 12, -124, -94, 26, -45, -77, 65, -82, 89, -54, 95]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-68, 34, 84, 5, 35, 2, -23, 82, -75, -36, -124, -94, 82, -106, 57, 75]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-68, 34, 84, 5, 35, 2, -23, 82, -75, -36, -124, -94, 82, -106, 57, 75]");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[80, 75, -48, -118, -59, 98, -52, -40, 82, 87, -125, 81, 73, 86, 11, 98]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[36, 0, 113, 101, -114, 96, 53, 123, 29, 125, -81, -66, 40, -118, -123, 127]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[14, -102, 54, 101, 117, 85, 8, 34, 21, -42, -28, -45, -30, 35, -40, 89]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-53, -59, -18, 107, -50, 112, -11, 5, -1, 66, -73, -65, -70, -111, 19, -92]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-87, -56, 74, -90, 15, 15, 125, -91, 95, 44, -71, -115, 39, -17, 8, 46, 28, 49, -74, 10, -64, 60, 63, -59, -125, 79, -100, -79, -26, -113, 84, 118, 14, -102, 54, 101, 117, 85, 8, 34, 21, -42, -28, -45, -30, 35, -40, 89]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[14, -102, 54, 101, 117, 85, 8, 34, 21, -42, -28, -45, -30, 35, -40, 89]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-53, -59, -18, 107, -50, 112, -11, 5, -1, 66, -73, -65, -70, -111, 19, -92]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-44, 103, 72, 36, -83, 63, -17, 117, 95, 40, 18, -113, 47, -2, 26, -48]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-62, 25, -48, 120, -95, 105, -38, -22, -125, 38, 55, 2, -104, 105, 76, -66]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-62, 25, -48, 120, -95, 105, -38, -22, -125, 38, 55, 2, -104, 105, 76, -66]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-44, 103, 72, 36, -83, 63, -17, 117, 95, 40, 18, -113, 47, -2, 26, -48]");
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey10);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 79, 12, -23, 78, -67, -113, -27, -78, 14, 12, -110, -102, -65, -21, -45]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[91, -5, 29, -40, 80, -87, -11, -16, -53, -101, -29, -101, -60, 11, 88, -14]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[50, 43, -122, 77, 70, -65, -42, -86, -8, 89, 53, 24, -115, 14, 27, -75]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[50, 43, -122, 77, 70, -65, -42, -86, -8, 89, 53, 24, -115, 14, 27, -75]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[91, -5, 29, -40, 80, -87, -11, -16, -53, -101, -29, -101, -60, 11, 88, -14]");
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        java.lang.Class<?> wildcardClass30 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[110, -128, -34, 45, 26, -19, -93, -47, 64, -101, 79, 103, -126, -59, -17, 18]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-127, 56, 83, 83, 11, 20, 16, 53, -16, 102, 48, 77, -34, -79, -42, -118]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[31, 120, 33, 101, -101, 73, -54, 19, -51, 65, -64, -51, -52, 5, 90, 122]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-118, -66, 26, -16, 55, -8, -11, -50, 69, 105, -59, -75, -48, -126, -49, 80]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[86, 14, 68, 22, 77, -58, 12, -127, 119, 19, -81, -42, -21, 91, 59, 124]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-67, 29, 9, -40, -126, -117, -106, 100, -32, -83, 121, 65, -124, 114, -93, -117]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-67, 29, 9, -40, -126, -117, -106, 100, -32, -83, 121, 65, -124, 114, -93, -117]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-98, -5, 126, 32, -50, 75, -33, 99, -20, -61, 46, 46, -103, -123, -100, 109]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-73, -12, -60, 60, 111, -117, -38, 26, 14, -84, 17, 120, -63, 66, -121, -68]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-73, -12, -60, 60, 111, -117, -38, 26, 14, -84, 17, 120, -63, 66, -121, -68]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-98, -5, 126, 32, -50, 75, -33, 99, -20, -61, 46, 46, -103, -123, -100, 109]");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[52, 56, 10, 94, 124, -23, 10, -115, 86, 85, -29, -84, 74, -54, 119, 105]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-119, -2, -60, 14, -47, -117, -31, 86, 76, 15, 37, -113, -32, 126, -103, 65]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "89FEC40ED18BE1564C0F258FE07E9941" + "'", str5, "89FEC40ED18BE1564C0F258FE07E9941");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "89FEC40ED18BE1564C0F258FE07E9941" + "'", str6, "89FEC40ED18BE1564C0F258FE07E9941");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "89FEC40ED18BE1564C0F258FE07E9941" + "'", str7, "89FEC40ED18BE1564C0F258FE07E9941");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[76, 11, 111, 79, -100, 10, -4, -44, 50, 40, 21, 69, -94, -36, -83, -44]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-116, -97, -44, -42, -72, -85, 90, 79, 26, -23, -91, 119, 76, -51, -35, -20]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC" + "'", str5, "8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[71, 94, 36, 2, -83, 32, -17, 50, -109, 124, 26, -38, -47, -88, -44, 118]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[21, -121, -26, -55, 45, 14, 70, 53, 111, 67, -68, 55, -88, -109, 84, -121]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[103, 63, 31, -87, 127, 127, 87, 30, 80, -110, -1, -123, 44, 106, -95, -121]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-21, -63, -94, 69, -67, -92, -118, 105, 108, -112, 46, -24, 77, -107, -29, -38]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-34, 32, 51, 0, 83, 67, 26, -39, -83, 48, 40, -62, 40, 62, 102, 67, -43, 24, 30, 46, 2, -64, 110, 52, 50, 5, 90, -84, 1, 63, -4, 118, 103, 63, 31, -87, 127, 127, 87, 30, 80, -110, -1, -123, 44, 106, -95, -121]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[103, 63, 31, -87, 127, 127, 87, 30, 80, -110, -1, -123, 44, 106, -95, -121]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-21, -63, -94, 69, -67, -92, -118, 105, 108, -112, 46, -24, 77, -107, -29, -38]");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-2, 81, 14, -115, -121, 38, -14, -79, -99, -80, -121, 112, -18, 57, 118, 97]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-30, -72, -125, 103, -83, 4, -13, -5, -101, 44, -13, -51, -89, -20, 27, -38]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-30, -72, -125, 103, -83, 4, -13, -5, -101, 44, -13, -51, -89, -20, 27, -38]");
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-115, 14, 94, 10, -90, -10, 37, -79, 75, 77, -47, -65, -29, -19, 32, 110]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[106, 100, 95, -127, 62, -14, 8, -102, -75, -87, 121, 43, 84, 8, -22, -33]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-60, -120, -52, 26, -107, -3, -105, 69, -42, 123, -100, 90, 110, -49, -2, 110]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-115, 14, 94, 10, -90, -10, 37, -79, 75, 77, -47, -65, -29, -19, 32, 110]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[51, 107, 1, 20, -8, 90, 113, -48, -125, 127, -48, 124, -86, -106, -60, -37, 82, 71, -84, 13, 42, 102, -68, 79, -107, 36, 74, -47, 94, 50, 6, 89, -115, 14, 94, 10, -90, -10, 37, -79, 75, 77, -47, -65, -29, -19, 32, 110]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey24);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-77, -38, 2, -128, -100, 89, -115, -77, -90, -94, -104, -117, -54, 69, -91, -87]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[97, 112, -86, -38, -64, -105, 68, -127, -32, 99, 71, 56, -22, 40, -111, -17]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[2, -115, 114, 53, 112, -81, -9, -46, 35, -118, 79, -81, -84, 65, 0, -115]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[38, 123, 26, 116, -121, 63, 45, 1, -91, 122, 103, 69, 64, -84, -63, -76]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[41, 116, -24, -64, 6, 54, 4, 36, 22, -21, -46, 112, 102, -80, 83, -35]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-85, 31, 39, -42, -76, -53, -109, 66, -104, -81, -56, -5, -87, -16, -81, 10, 69, -79, 88, 101, 105, 56, 41, 65, -100, 90, -102, -17, 93, 19, -9, -60, 38, 123, 26, 116, -121, 63, 45, 1, -91, 122, 103, 69, 64, -84, -63, -76]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[57, 77, -76, -63, 30, -1, -18, 50, 28, -125, -20, -29, 72, 81, 92, 84, 124, 78, 77, -94, 56, -109, -40, 88, -11, -109, 19, -57, 79, 119, 127, -57, 38, 123, 26, 116, -121, 63, 45, 1, -91, 122, 103, 69, 64, -84, -63, -76]");
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-46, 115, -87, -108, -55, 60, -26, 42, 61, 14, 52, -3, -106, 114, -117, 32]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-93, 90, 75, 125, -54, 118, 17, 12, 53, -90, -12, -27, 100, 79, -105, 4]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-93, 90, 75, 125, -54, 118, 17, 12, 53, -90, -12, -27, 100, 79, -105, 4]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "A35A4B7DCA76110C35A6F4E5644F9704" + "'", str7, "A35A4B7DCA76110C35A6F4E5644F9704");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey26);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey35);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[125, 123, 4, 33, 91, 44, 10, 116, -44, 12, -12, -97, -53, 16, -3, -8]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[109, -31, -72, 0, -44, 86, -33, -105, 76, 85, 50, 49, -104, -61, -30, 36]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[91, -36, 97, -37, -110, 90, -126, 115, -124, -68, 103, 16, -41, -119, 5, -99]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[18, 6, -13, -11, -84, -20, -24, -110, 119, -51, -7, 89, 6, -18, -62, -46]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-98, 68, 6, 9, -91, -67, -53, 7, -82, -117, 36, -24, 64, -55, 33, -70]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[125, 27, -9, -74, 51, 2, 53, 48, -84, -33, 26, -124, 113, -83, 87, -65]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[125, 27, -9, -74, 51, 2, 53, 48, -84, -33, 26, -124, 113, -83, 87, -65]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-23, -95, 59, -39, -6, 101, -100, -11, -68, -34, 94, -48, -128, 92, -35, 16, -93, 66, 121, 77, 24, -24, 44, -42, 42, 87, 3, -105, 102, -66, 111, -102, -98, 68, 6, 9, -91, -67, -53, 7, -82, -117, 36, -24, 64, -55, 33, -70]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-88, 7, 2, -70, -113, -80, 124, -8, -66, 0, -6, -90, 21, 19, -116, 54]");
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.Class<?> wildcardClass14 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-125, 23, 83, 109, -126, -12, 126, -119, -58, 57, 56, -19, -65, -17, -90, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-98, 114, -107, -120, -31, 110, 88, -121, -28, 114, 109, 96, -117, -78, 67, -48]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[54, 42, 83, -60, -90, 110, -70, 44, -113, -45, 92, 70, -77, -121, -7, 4]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-125, 23, 83, 109, -126, -12, 126, -119, -58, 57, 56, -19, -65, -17, -90, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-102, 55, -75, -102, -117, -81, 24, 9, 82, 22, -103, 115, -4, -88, 30, 101, -15, 98, -67, 78, -19, -39, 54, -23, 85, -104, 99, -1, 80, 75, 55, 22, -125, 23, 83, 109, -126, -12, 126, -119, -58, 57, 56, -19, -65, -17, -90, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-34, 104, -38, 47, 31, 52, -83, -94, 21, -77, 50, -42, 14, 72, 50, -49, 84, -3, -47, 0, -41, -94, -121, 62, -94, 26, 127, -40, -25, -97, -9, -116, -125, 23, 83, 109, -126, -12, 126, -119, -58, 57, 56, -19, -65, -17, -90, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600" + "'", str13, "DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-67, 73, -27, -116, -47, -64, -57, 109, -38, -78, 104, 86, -56, -68, 35, -61]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[14, -26, 3, -99, 68, -78, 84, -104, 18, -29, -39, -93, 25, -57, -21, 2]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[126, -82, -49, 126, -14, 17, 61, -92, 82, 39, 17, -120, 21, 80, -39, -28]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-44, -4, 75, -75, -46, -104, -111, 54, -4, 29, 22, -29, -100, 72, -110, 46]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[114, -1, -92, 79, 125, 126, 26, 35, 75, 88, -65, -22, 68, -22, -78, -120, -80, -49, -37, 39, -105, 81, 67, -106, -94, 40, -106, -110, -7, 121, -79, 15, 126, -82, -49, 126, -14, 17, 61, -92, 82, 39, 17, -120, 21, 80, -39, -28]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[31, -63, 52, -47, -85, -126, 109, -62, 88, -67, 0, 89, -118, -99, -119, -64, -43, -5, 77, -39, 81, -99, 114, -95, -64, -20, -126, -103, -110, 12, 55, 3, 126, -82, -49, 126, -14, 17, 61, -92, 82, 39, 17, -120, 21, 80, -39, -28]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[74, -11, -77, -10, -35, -78, -110, 95, -51, -126, -45, 94, 35, 43, -86, 120, -49, -114, 114, 62, -45, -93, 4, 8, 25, -99, 43, -74, 111, 26, -2, -24, -31, 27, -124, 25, 55, 58, 98, -3, 83, 87, 97, 116, 74, 71, -2, 81, 53, -83, -90, 13, 127, -66, 4, -103, -108, 87, -18, 83, -6, -77, -126, -28, -50, 36, 84, -6, 10, 48, -36, 113, -87, -59, -118, -107, 112, 122, -73, 75, -59, -37, -98, 56, -70, 109, 60, 73, 61, -34, -82, 85, -80, -99, 107, 67, 126, -82, -49, 126, -14, 17, 61, -92, 82, 39, 17, -120, 21, 80, -39, -28]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[31, -63, 52, -47, -85, -126, 109, -62, 88, -67, 0, 89, -118, -99, -119, -64, -43, -5, 77, -39, 81, -99, 114, -95, -64, -20, -126, -103, -110, 12, 55, 3, 126, -82, -49, 126, -14, 17, 61, -92, 82, 39, 17, -120, 21, 80, -39, -28]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass8 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey26);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey26);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey26);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-79, 61, -103, 65, -7, -116, -74, -37, 76, 7, -107, -62, -98, -108, 111, -83]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-27, 86, 45, 81, 35, 114, 55, -40, -106, 93, 117, 55, -23, 39, -115, -126]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[36, 121, -12, -58, -106, -40, -22, -2, -84, 46, 39, -57, 75, -35, 103, -79, -118, 20, -71, 64, 29, 50, -86, -87, -74, -50, -95, 20, -13, 16, 4, 125, -79, 61, -103, 65, -7, -116, -74, -37, 76, 7, -107, -62, -98, -108, 111, -83]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-40, 80, 41, -75, -127, 121, -61, -44, -82, 70, -91, 32, 51, -108, 1, 95]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-74, 43, 2, 18, -92, 36, 74, 33, -82, -59, -39, 75, -56, 41, -67, -122]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-59, 104, 97, -7, 31, -86, -109, 16, -78, 123, -21, 72, 105, -4, -123, -124]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-61, 105, 18, 121, 47, 89, -41, -43, 68, -124, 89, 105, -25, -64, 65, 44]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-24, 27, -119, 1, 96, 39, 14, -128, -18, 81, -9, -33, -11, 124, -52, -66, -74, 48, -40, 43, -77, -77, 5, -20, 71, -29, -17, -9, -97, 60, -84, 46, -59, 104, 97, -7, 31, -86, -109, 16, -78, 123, -21, 72, 105, -4, -123, -124]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[85, -12, 64, -27, -64, 39, -106, -92, -49, -60, -46, -77, -38, -113, -42, -107, 55, -120, -119, 51, 125, 7, -107, 92, -10, -28, 99, 17, 61, 7, 1, -9, -59, 104, 97, -7, 31, -86, -109, 16, -78, 123, -21, 72, 105, -4, -123, -124]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-41, 76, 59, 59, -101, 1, 99, 73, 117, -85, -16, 97, 13, 104, 22, 115, 23, 58, -76, -121, 31, -43, 65, -59, -71, -19, 11, -124, -120, -28, -17, -34, 96, 87, 6, 72, 79, 88, -72, -65, -19, -42, 6, 5, -59, -82, -98, -2, -89, -67, 42, 84, -119, 36, -126, -11, -58, 83, -88, 23, 48, 40, 70, -8, -123, 93, -59, 100, 51, -106, -84, -77, -12, -33, 22, 29, 94, -117, 88, 5, -128, 12, -83, 85, 68, -37, -76, 106, -91, 9, 71, 0, -113, 107, 126, 16, -59, 104, 97, -7, 31, -86, -109, 16, -78, 123, -21, 72, 105, -4, -123, -124]");
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[68, -62, 80, 34, 127, 37, -28, 39, -42, 115, 36, 17, -73, -1, 31, 53]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[3, -113, 4, -41, 32, 67, -2, 118, -33, 94, 62, -36, -71, -64, 107, 13]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[46, 110, 73, 3, 40, -95, -118, 7, -3, 12, 0, -101, -57, 6, -103, 41]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-21, 75, 106, 87, -19, -69, -45, 66, 65, 115, -71, -10, 55, 49, 0, -18]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-8, -31, -44, -91, -113, -8, 48, 121, -35, 67, -50, 62, 87, 33, 86, 52, -74, 33, -8, -7, 60, 104, 115, 47, -29, -92, -44, 127, 0, -49, 18, 52, 46, 110, 73, 3, 40, -95, -118, 7, -3, 12, 0, -101, -57, 6, -103, 41]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[52, -70, 52, -66, -78, 58, 82, 62, -117, 29, -82, -115, 105, 29, -20, -9, 59, -52, -12, 111, 124, 112, 105, 8, -113, -66, -71, 0, -110, 85, -86, -36, -38, 82, -72, 7, -76, -49, 28, -122, -44, 9, 67, -109, -54, 85, -8, -96, 53, -97, 124, 120, 53, -87, 10, 22, -47, -53, 56, 89, -68, 91, -52, -22, 88, -102, -49, 65, 45, 51, -8, -1, -114, 125, -72, -54, 96, 19, 75, -27, 54, -19, -14, 56, 90, 114, 45, -25, 97, 29, -24, 71, 73, -32, 7, -93, 46, 110, 73, 3, 40, -95, -118, 7, -3, 12, 0, -101, -57, 6, -103, 41]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[52, -70, 52, -66, -78, 58, 82, 62, -117, 29, -82, -115, 105, 29, -20, -9, 59, -52, -12, 111, 124, 112, 105, 8, -113, -66, -71, 0, -110, 85, -86, -36, -38, 82, -72, 7, -76, -49, 28, -122, -44, 9, 67, -109, -54, 85, -8, -96, 53, -97, 124, 120, 53, -87, 10, 22, -47, -53, 56, 89, -68, 91, -52, -22, 88, -102, -49, 65, 45, 51, -8, -1, -114, 125, -72, -54, 96, 19, 75, -27, 54, -19, -14, 56, 90, 114, 45, -25, 97, 29, -24, 71, 73, -32, 7, -93, 46, 110, 73, 3, 40, -95, -118, 7, -3, 12, 0, -101, -57, 6, -103, 41]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey7);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey15);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey15);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-78, -7, 92, -54, -54, 40, 53, -100, 79, -39, 99, -20, 52, 46, -75, -7]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[119, 68, 91, -91, -107, -87, -94, 114, -126, -97, 54, -120, -50, 30, 72, -109]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[108, 14, -88, -46, 99, -62, -48, -50, 127, -7, 19, -110, -52, -105, -71, -117, -95, -2, -112, 1, 70, -92, 115, 112, -93, 117, -72, 63, 30, -85, -46, 55, 5, 23, 86, 78, -22, -118, -5, -90, -23, -69, 63, -35, -2, -79, -68, -85, 107, 20, -76, 107, 125, -65, -27, -14, 46, -44, 123, -55, 28, 75, -35, -96, -41, -71, -115, 88, -128, 97, -18, 81, -123, 77, -24, -127, 20, -91, -76, -55, 0, 90, 57, 104, -28, 61, 22, 82, -65, 106, 1, 110, 127, 16, 7, -56, -78, -7, 92, -54, -54, 40, 53, -100, 79, -39, 99, -20, 52, 46, -75, -7]");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[124, 37, 117, 35, -47, 76, -18, -48, 100, -27, 47, 117, -79, -57, -82, -28]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[74, -6, 37, 126, -71, -49, -23, -78, 52, 126, -45, 78, 115, -59, -1, 105]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-105, -97, -2, 44, 39, 9, 63, 59, -36, 38, -106, 80, -59, 67, -28, -114, 21, -44, 69, -86, 61, -101, -20, 7, -94, -122, -36, -34, 114, -58, -12, -35, 124, 37, 117, 35, -47, 76, -18, -48, 100, -27, 47, 117, -79, -57, -82, -28]");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey43);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey43);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[94, -110, -65, 56, 63, 29, -73, 91, 16, -22, 66, 61, 97, -68, 60, 4]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, -27, 28, 28, -15, -82, -32, -85, 98, -127, 39, 75, -82, -4, 42, -72]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-97, 19, -116, -69, -89, -63, 42, -102, 105, 55, -7, 87, 85, 3, -10, -90]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[32, 115, -46, 76, -51, -84, -44, -113, 116, 10, -94, 41, 118, 36, -112, -128]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-97, 87, 117, -115, -113, 26, 88, -42, -85, -3, 104, -119, -39, -110, 103, 107, 82, 52, 38, 40, -36, 116, -74, 94, 13, -58, -98, 29, -46, -8, 53, 16, -97, 19, -116, -69, -89, -63, 42, -102, 105, 55, -7, 87, 85, 3, -10, -90]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-97, 87, 117, -115, -113, 26, 88, -42, -85, -3, 104, -119, -39, -110, 103, 107, 82, 52, 38, 40, -36, 116, -74, 94, 13, -58, -98, 29, -46, -8, 53, 16, -97, 19, -116, -69, -89, -63, 42, -102, 105, 55, -7, 87, 85, 3, -10, -90]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[102, 3, -38, 14, -74, -96, 57, -28, -113, 117, 79, -98, 21, -28, 122, 104]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[124, 108, -34, -110, -14, 110, -89, 6, -28, 80, -41, -35, -68, 66, -64, -106]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[35, 99, 119, -53, 126, 23, 50, -49, -109, 2, -46, 34, 89, 91, -54, 77]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[50, 114, 64, 42, 34, -108, 107, 46, -67, -26, 102, 32, 41, -13, 107, 61]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-112, -117, 80, 30, 8, 68, -31, 6, -9, -120, -20, 105, 42, -122, -21, 48, 103, -32, -61, -77, -121, 122, 100, 73, 64, -70, -36, -84, -31, -113, 55, -71, 35, 99, 119, -53, 126, 23, 50, -49, -109, 2, -46, 34, 89, 91, -54, 77]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-112, -117, 80, 30, 8, 68, -31, 6, -9, -120, -20, 105, 42, -122, -21, 48, 103, -32, -61, -77, -121, 122, 100, 73, 64, -70, -36, -84, -31, -113, 55, -71, 35, 99, 119, -53, 126, 23, 50, -49, -109, 2, -46, 34, 89, 91, -54, 77]");
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-42, 112, 80, -119, 125, -54, -21, 63, -88, 0, 62, 85, -45, 108, 32, -57]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[93, -18, 8, -31, 16, 4, 34, 31, -72, 78, 107, 66, -40, -46, -5, 8]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[93, -18, 8, -31, 16, 4, 34, 31, -72, 78, 107, 66, -40, -46, -5, 8]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-9, 63, -45, 98, -92, 105, -102, 20, 41, -104, 78, -69, 4, 62, -22, 14]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[93, -18, 8, -31, 16, 4, 34, 31, -72, 78, 107, 66, -40, -46, -5, 8]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122, -82, 4, -84, -45, -78, 108, 122, 35, -15, -112, 51, -2, -102, 7, -68, 24, 45, 71, 99, 16, 56, 62, 23, 121, 28, -79, -47, -49, 69, 20, -103, -42, 112, 80, -119, 125, -54, -21, 63, -88, 0, 62, 85, -45, 108, 32, -57]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        java.lang.Class<?> wildcardClass14 = byteArray13.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-3, -86, -5, -19, 107, 57, 61, 32, -26, -33, 87, -39, -10, -83, 70, 96]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-20, -94, 16, -72, 18, 59, 38, -80, -105, -51, 44, 21, 44, -10, -127, 79]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-20, 91, -98, 65, -9, 17, 108, 53, -63, 42, 5, 31, -2, 55, -50, 122, 109, 54, 3, 107, 109, 94, 101, 58, -2, -30, 57, -24, 64, -78, -102, 115, 75, 112, 92, 114, 74, -30, 108, -117, 11, -116, -22, -73, -77, -8, 82, 82, 30, -46, 30, 117, -56, 110, 80, 107, 58, 7, -11, -67, -47, -93, 15, -42, 122, -98, -117, 69, -124, 109, -20, 122, -114, -103, 36, 58, -9, -57, -63, 18, 127, 67, -127, -64, -63, 45, -65, -87, -67, 50, -46, -77, 118, -56, 107, 82, -3, -86, -5, -19, 107, 57, 61, 32, -26, -33, 87, -39, -10, -83, 70, 96]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-12, -106, 105, -49, -15, 97, -102, 12, -41, 22, -82, -112, 42, 93, -113, -31]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[40, -90, -114, -45, -48, -87, 52, 12, 93, 56, 104, 36, 114, 27, -87, -3]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[112, 103, 104, -50, 36, -42, -96, -51, 112, 76, -102, 88, -122, 77, 39, -45]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[112, 103, 104, -50, 36, -42, -96, -51, 112, 76, -102, 88, -122, 77, 39, -45]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, -57, 52, -116, 36, -63, -43, 115, 118, -59, 52, 55, 76, 119, 18, -116]");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[114, 85, -93, -20, -128, 36, -45, -23, -50, 69, 35, -83, 87, -18, 119, -44]");
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass12 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-31, 66, 42, -111, -65, -78, 24, -106, 79, 96, 47, 2, -12, 82, -4, -10]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[67, -32, -31, -47, 13, 52, -70, -18, 35, -74, -96, 26, -74, 108, -125, -56]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey19);
        java.lang.Class<?> wildcardClass27 = secretKey19.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[72, -14, 27, 3, -8, 118, -38, 68, 28, 109, 83, -8, 50, -13, -128, -85]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-126, 92, -112, -69, -6, 107, 39, 63, 18, -106, -78, 63, -66, 83, -120, -22]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-105, 13, 42, 35, 117, -15, 14, -57, 37, -102, 42, -112, 8, -76, -47, 98]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[11, -88, -103, 124, 11, -119, 54, 58, -83, -2, -5, -23, -20, 99, 116, -75]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[118, -108, -108, -10, -98, -5, -66, -93, 36, -58, -47, 47, -26, -90, -126, 32, -101, 52, 96, 48, 32, -120, 16, -94, 28, -44, -127, -122, -94, -114, 34, -104, -105, 13, 42, 35, 117, -15, 14, -57, 37, -102, 42, -112, 8, -76, -47, 98]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-27, 118, -97, 16, -36, 3, -118, 118, 29, -64, -122, 117, -34, -49, 99, 74, -29, 14, -53, -1, 55, -50, 90, 76, 93, 26, 37, 8, 16, 99, -15, -15, -105, 13, 42, 35, 117, -15, 14, -57, 37, -102, 42, -112, 8, -76, -47, 98]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-40, -78, -123, -112, -119, 90, -40, -111, -57, 81, 82, 121, 16, 14, -37, 88, 95, -36, -9, -74, 127, 103, 44, 123, -114, 70, -44, 0, -108, 43, 29, 10, -73, -61, -11, 25, 81, -4, 23, -43, 105, 109, 105, 40, 17, -12, 30, 67, -114, 73, -103, 109, -31, -82, 11, -116, -66, 102, -64, 113, -42, -114, -121, 38, -2, -105, 122, 71, -11, -91, -72, 89, 113, 124, 58, -99, -57, -117, 74, 1, -88, -14, -84, -126, -96, 94, 31, -120, -127, 61, 109, 106, -65, 12, 100, 94, -105, 13, 42, 35, 117, -15, 14, -57, 37, -102, 42, -112, 8, -76, -47, 98]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        java.lang.Class<?> wildcardClass24 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-31, 57, -111, 42, 49, -1, -15, 34, 36, -13, 97, 109, 115, 17, -122, -45]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-97, 80, -89, -98, 112, 102, 104, 77, 54, 98, 111, -23, -74, -24, 112, -54]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-45, -61, 1, -39, 106, 48, -6, 101, -89, -11, 1, 75, 59, 106, -59, 59]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-14, 82, 7, 102, 113, -35, -93, -21, -86, 81, 36, -91, 77, -5, 9, -86]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-3, -47, -52, 45, 31, -35, -14, 62, -122, -9, -48, 8, 76, 68, -51, 69, -48, 69, -62, 72, -100, 117, 38, 79, -29, 84, -28, 0, 101, -109, 55, -58, -45, -61, 1, -39, 106, 48, -6, 101, -89, -11, 1, 75, 59, 106, -59, 59]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B" + "'", str23, "FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        java.lang.Class<?> wildcardClass25 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[20, 95, 99, 110, 23, -45, 88, 105, 43, -94, 57, -119, 16, 4, -10, 9]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[84, -59, -28, -48, 48, 116, 53, -124, -65, 11, -55, 105, -29, -7, -13, -113]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[8, 81, -117, -101, 25, 108, -128, -86, -100, 9, 59, 43, 62, -35, 26, -37]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[39, -115, 45, 124, 27, -98, 81, -78, 58, -86, 103, 43, -114, -6, 76, 98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-67, 60, 6, 121, 74, -60, -32, -49, -95, 10, -75, 47, -90, -77, 32, 5, -27, 20, -49, -85, 54, 92, -9, -32, 92, 119, -63, 126, 36, -95, -61, 100, 8, 81, -117, -101, 25, 108, -128, -86, -100, 9, 59, 43, 62, -35, 26, -37]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[8, 81, -117, -101, 25, 108, -128, -86, -100, 9, 59, 43, 62, -35, 26, -37]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[72, 113, -62, -90, 73, 26, 96, -110, -92, 20, 69, 51, -123, 74, -101, 21]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, -82, 105, 118, 42, 52, 123, 10, -66, -5, -113, 23, 62, -36, -118]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, -82, 105, 118, 42, 52, 123, 10, -66, -5, -113, 23, 62, -36, -118]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-98, -8, 84, -28, -40, 95, 27, -75, 24, -87, -82, 94, -62, 96, -58, -72]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, -82, 105, 118, 42, 52, 123, 10, -66, -5, -113, 23, 62, -36, -118]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FF64AE69762A347B0ABEFB8F173EDC8A" + "'", str11, "FF64AE69762A347B0ABEFB8F173EDC8A");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-72, 120, 23, 64, 28, -87, 42, 108, -3, 105, -118, 31, 21, 61, -10, 54]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-95, -39, 58, 5, -13, -98, 108, 69, 83, 8, 60, -109, 107, 89, -99, 122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-34, 111, -94, 60, 3, -66, -111, 67, 114, -2, 74, -6, 68, -49, -19, -12]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-114, -35, -98, -23, 45, -72, 27, -47, -104, -115, -122, 26, -6, 124, 12, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-73, 89, -61, -35, 58, 114, -103, -112, -78, 124, -90, -50, 10, 80, -56, -60, 69, 41, 21, 59, -27, -16, 10, 13, -74, -56, 106, -5, -112, 123, -86, -9, -34, 111, -94, 60, 3, -66, -111, 67, 114, -2, 74, -6, 68, -49, -19, -12]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-34, 111, -94, 60, 3, -66, -111, 67, 114, -2, 74, -6, 68, -49, -19, -12]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.Class<?> wildcardClass26 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[39, 28, 33, -28, -110, -107, -15, 54, -82, -85, -115, -98, -4, 11, 60, -15]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-111, -119, 114, -79, -119, 116, -124, -49, -26, -59, 105, -110, 5, -15, -122, 115]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[83, 66, -99, 108, -94, -80, 108, 34, -125, -25, -38, -114, 59, 34, -60, 21]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-41, -98, 79, -40, 69, 0, 58, -29, 27, 124, -94, 104, -6, -32, 38, 42]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-111, -50, -2, -107, -55, -38, -116, 17, -44, -120, -86, -28, 68, 52, -17, -28, -62, -81, 34, -67, -111, 71, 98, -19, 93, 99, -128, 121, -92, 111, -102, 105, 83, 66, -99, 108, -94, -80, 108, 34, -125, -25, -38, -114, 59, 34, -60, 21]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-40, 55, 78, 71, 119, 49, -84, -4, -96, 23, -83, -41, 114, 59, -108, 18, -69, 70, -103, 80, 17, -47, 67, 18, -98, -94, 122, -108, 25, -84, -22, -48, 83, 66, -99, 108, -94, -80, 108, 34, -125, -25, -38, -114, 59, 34, -60, 21]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415" + "'", str25, "D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey87);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey87);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey87);
        java.lang.Class<?> wildcardClass96 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[31, -36, 97, 18, -107, -103, -47, -38, -36, 2, -5, -73, 29, -15, -118, -47]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[7, -1, -107, -30, 82, -109, -84, -53, -104, 32, -22, 17, 33, -25, -68, 80]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[86, -89, -94, -8, 99, 91, -8, 11, -76, 34, -61, -67, 37, 125, 103, 66]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[7, -80, 39, 5, -52, -88, -75, -120, -23, -96, -80, -34, 49, 99, 116, 45]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[25, -120, 63, -78, 76, -72, -73, -123, -40, -9, -88, -123, 122, 37, -94, 5]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[46, 89, -43, 57, -98, 93, 120, -55, -93, -111, 8, 89, 82, 27, 122, -68]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[84, 116, -127, -59, -40, 19, 69, 24, 42, -41, 73, -13, 96, 87, -58, -5]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[86, 70, 8, 81, -24, 103, -36, -89, 54, -35, 16, 21, -3, 42, 25, 80]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[98, 27, -36, 28, -87, 49, -27, 42, -7, 39, -98, -4, 104, 46, 21, 115, 101, 51, -43, 70, -20, -37, 102, -124, 63, -101, -93, 31, -123, 45, -50, -78, 84, 116, -127, -59, -40, 19, 69, 24, 42, -41, 73, -13, 96, 87, -58, -5]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-55, 35, 76, 9, -88, -107, 52, -62, -65, -46, -64, 83, -57, -60, -17, -56]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[84, 19, 27, -79, -49, 89, 110, 35, -36, 27, 64, 17, -56, 27, 1, -53]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[41, -65, -33, -112, 49, 60, 28, -14, -23, 72, -120, -118, -99, -112, -11, -108]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-78, -74, -13, -14, 58, -84, 67, 60, -110, 3, -122, 102, 94, 58, 120, 1]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[76, 107, 1, -42, 3, 103, 26, -86, -19, 97, -54, 2, 124, 91, -19, -121]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[120, 13, -60, 25, -66, -122, -99, 111, 11, -103, 13, 65, 114, -103, 121, 88]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-31, 7, -64, 106, 28, -91, 48, 68, -118, -75, 33, 62, -70, -40, -26, 1]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[52, -25, 81, 125, 73, 44, -100, -35, 58, 41, -64, 63, -39, 54, -112, -24]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[5, -81, -1, -48, 38, -104, -99, 34, -41, 103, 102, 102, -83, 58, -5, 53, 68, -115, -114, -72, -43, -45, 85, 20, -90, 5, -23, -46, 9, -86, -42, -87, -31, 7, -64, 106, 28, -91, 48, 68, -118, -75, 33, 62, -70, -40, -26, 1]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[72, 114, 57, 43, -57, 39, 34, 33, 48, 109, 70, -26, 101, -55, 75, 8]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-26, 85, 123, -84, 27, -108, -31, -125, 23, -2, 42, 23, 43, -33, 25, 32]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[91, -13, 114, -9, 110, -42, -78, -28, -107, 96, 50, 8, 82, -82, -118, -65]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[98, -67, 120, 60, -31, 93, 116, -118, 34, -20, -103, -79, 103, -73, 6, 121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-102, 86, 37, -100, 84, 82, -84, 87, 98, -10, 59, -15, -94, 84, -90, -104, -115, -50, -101, -46, 72, 19, 93, 10, -11, 22, -89, -6, -32, -71, -72, 95, 91, -13, 114, -9, 110, -42, -78, -28, -107, 96, 50, 8, 82, -82, -118, -65]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[5, 25, -86, 107, -93, 12, 20, 71, 10, 44, -77, -74, 125, -110, -113, 93, 127, 57, 28, 56, 63, 95, -40, -91, -61, -4, 20, 63, 102, 89, -81, 4, 91, -13, 114, -9, 110, -42, -78, -28, -107, 96, 50, 8, 82, -82, -118, -65]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-67, -86, 80, 93, -20, -117, -78, -77, -118, -1, 100, 33, 40, -76, -55, 83, -117, -125, 7, -78, -112, 107, 87, 48, 75, 15, 23, -58, -18, 29, 73, -3, 48, -72, -21, -89, -89, 62, 30, 61, -58, -102, -113, -71, 91, -71, 61, -85, 107, 47, -116, -27, 110, 32, -29, -94, -22, 40, 105, 67, -71, -6, -21, -8, -17, -124, -10, -61, 84, -9, 99, -115, -120, -52, 9, -126, 53, 92, 41, 40, 101, -48, -17, -10, 37, -7, -19, 53, 56, 77, -126, 117, -124, -92, -60, 10, 91, -13, 114, -9, 110, -42, -78, -28, -107, 96, 50, 8, 82, -82, -118, -65]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[102, 105, -73, 126, -25, -42, -105, 21, 103, 111, -45, -116, -128, -11, 56, -65, 76, 27, -106, -18, -40, 35, -84, -62, 41, 117, 38, -71, 10, 91, 73, 126, 91, -13, 114, -9, 110, -42, -78, -28, -107, 96, 50, 8, 82, -82, -118, -65]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-67, -86, 80, 93, -20, -117, -78, -77, -118, -1, 100, 33, 40, -76, -55, 83, -117, -125, 7, -78, -112, 107, 87, 48, 75, 15, 23, -58, -18, 29, 73, -3, 48, -72, -21, -89, -89, 62, 30, 61, -58, -102, -113, -71, 91, -71, 61, -85, 107, 47, -116, -27, 110, 32, -29, -94, -22, 40, 105, 67, -71, -6, -21, -8, -17, -124, -10, -61, 84, -9, 99, -115, -120, -52, 9, -126, 53, 92, 41, 40, 101, -48, -17, -10, 37, -7, -19, 53, 56, 77, -126, 117, -124, -92, -60, 10, 91, -13, 114, -9, 110, -42, -78, -28, -107, 96, 50, 8, 82, -82, -118, -65]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey3);
        java.lang.Class<?> wildcardClass7 = secretKey3.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, -43, 35, 120, -70, -51, -93, 4, 56, 7, 39, -94, 58, -36, 52, -47]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[121, -79, 6, -82, 65, -93, 113, 44, -114, 82, -91, 18, -20, -90, -54, -48]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-111, -48, -99, -55, 8, -87, -27, -80, -101, -94, 93, 123, -90, -17, -40, 57, -99, 112, -83, 33, 16, -49, 60, -2, 104, 2, 64, -124, 12, -15, 73, 58, -128, -33, -101, -6, -4, -121, -6, -41, 2, -47, 124, -65, 52, -106, 114, 84, -30, 21, -87, -98, 16, 77, 5, 57, 46, 104, -54, -44, -65, 55, -67, 61, -96, 64, -30, 52, -14, -26, -20, 57, 17, -64, 35, 80, -29, -11, 53, 37, -85, 35, 73, -24, 93, 16, 66, 85, 32, -39, -98, 0, 11, 45, 69, -53, -84, -43, 35, 120, -70, -51, -93, 4, 56, 7, 39, -94, 58, -36, 52, -47]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey39);
        java.lang.Class<?> wildcardClass47 = byteArray46.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[94, -112, -26, -1, -82, 44, -21, -19, 16, -45, 102, -50, -26, -2, 72, -81]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-30, 96, -50, -109, 31, 82, -113, -45, 23, 78, -114, -97, 78, -16, 70, 73]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-83, 52, 5, 79, 52, -65, -46, 75, 27, -47, -23, 1, -7, 50, 55, -25]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[105, -30, -82, 108, -14, 114, -8, 121, 64, -19, -90, -101, 69, -116, -40, 107]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-58, -48, 18, 67, 28, -30, -49, -120, -12, 50, -45, 33, 32, 16, 100, 26]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-121, 83, 119, 31, -72, 92, -73, -126, -35, 70, 29, 45, -47, 120, 26, 99]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-122, 54, -39, -59, 84, -18, 58, -114, 11, -122, -12, 107, 95, -49, 10, 107]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-28, -121, 107, -99, 0, 5, -82, 8, 113, 103, 33, 100, 31, 18, -76, 126]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[94, 32, -6, -4, 62, 114, -89, 89, 24, 111, 62, 99, 119, -1, 99, -102, -39, 44, -43, 63, -118, -57, 114, -78, -33, 88, -29, 60, 80, 50, 118, -20, -122, 54, -39, -59, 84, -18, 58, -114, 11, -122, -12, 107, 95, -49, 10, 107]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[59, -20, 115, 47, 2, -106, 120, -25, 64, -51, -37, -126, 103, -33, -33, -52, -106, 48, -21, 72, 88, -112, 6, -115, 72, -72, 110, -10, 49, 23, -106, 80, -122, 54, -39, -59, 84, -18, 58, -114, 11, -122, -12, 107, 95, -49, 10, 107]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        java.lang.Class<?> wildcardClass7 = secretKey3.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[55, 26, -73, -99, -25, 13, 105, -59, 109, 50, 27, -1, 61, -102, -40, -43]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-33, -88, 80, -37, -78, 57, -74, -82, 77, -18, -109, -125, -90, -96, -108, -60]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-2, -21, -34, 80, 55, 98, -19, -107, 67, -47, -99, -5, 42, 28, -44, 41, -59, -126, 102, 70, -26, 70, -10, 121, 57, 69, -4, -68, 19, -40, 23, 51, 55, 26, -73, -99, -25, 13, 105, -59, 109, 50, 27, -1, 61, -102, -40, -43]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[99, 79, 74, 6, -63, -51, -118, 112, -109, 37, 89, 51, -127, 46, -1, 66]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[9, 51, -59, 105, -42, 70, 110, -65, -105, -122, 46, -84, 74, 25, 45, 61]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-18, -123, -101, -106, -107, 3, -52, 88, -25, 119, -121, 53, -8, -27, 82, 120]");
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-100, -29, 54, 29, -73, -119, 7, 0, 16, 117, -24, -101, 86, -50, 71, -57]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[32, -1, -119, 22, 50, 39, 58, 56, 116, 121, 118, -91, 14, 62, -89, 93]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[103, -98, 86, -114, -105, -98, -115, -79, 72, -59, -62, -22, -88, -67, 20, -64]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-100, -29, 54, 29, -73, -119, 7, 0, 16, 117, -24, -101, 86, -50, 71, -57]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[32, -98, 0, 48, -123, 69, 47, -60, -40, 97, 116, -94, -104, 6, 3, 1, -4, -40, -34, 123, 112, 81, 35, -65, 73, 20, 28, 119, -69, 69, -27, 7, -35, -46, -30, -92, -103, 109, -124, 12, -54, 68, 62, 125, 10, -38, -53, 110, 97, 9, 79, 93, -103, -17, -27, -50, 67, -53, -76, 23, 84, 1, 101, 107, 124, 12, 126, 96, -32, -63, 57, 80, -124, 28, -47, -87, 66, 0, 125, -2, 35, 113, 26, -4, -86, -100, 92, -102, 106, -41, 95, 71, -21, 43, -27, 20, -100, -29, 54, 29, -73, -119, 7, 0, 16, 117, -24, -101, 86, -50, 71, -57]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7" + "'", str11, "209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey14);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey14);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-91, -96, -115, 56, 17, 104, -1, -86, -34, -85, -61, -13, 22, 85, 13, 100]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[93, 43, 88, 39, -80, -100, -21, -57, 121, 38, -70, 123, -72, 107, -91, -25]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "5D2B5827B09CEBC77926BA7BB86BA5E7" + "'", str5, "5D2B5827B09CEBC77926BA7BB86BA5E7");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[3, 53, -35, 5, -12, -66, -58, -103, -35, 78, -6, 113, -17, -81, -60, -4]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[36, 14, 17, 88, -98, 76, 25, 6, 35, -1, -8, 52, -105, 40, 125, 69]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-95, -1, -49, -41, 53, 23, -28, 92, -113, -11, 110, 94, -103, -62, 26, 83, -37, -11, -55, 63, 55, -33, 101, 42, 111, 29, 19, 127, 98, 3, -97, 94, 3, 53, -35, 5, -12, -66, -58, -103, -35, 78, -6, 113, -17, -81, -60, -4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey5);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey28);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 84, 52, -33, -28, 48, 102, 5, -106, -31, -95, -107, -58, 91, 118, -38]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[66, -18, -125, -50, 5, -57, -71, 44, -107, -13, 74, -20, -23, 24, 119, -60, -118, 94, 16, -48, 63, -7, -32, 27, -125, 8, 1, 2, -37, 57, -49, 53, -119, -125, 125, 6, -39, 26, -108, -74, 15, -65, 65, -73, 83, -58, -51, 43]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, 33, 68, -22, -83, 109, 82, 16, 81, 84, 126, -127, 115, 75, -116, -116, -89, 54, -91, -1, -100, 93, -21, 35, 78, 48, 60, -72, -43, 80, -105, 53, -119, -125, 125, 6, -39, 26, -108, -74, 15, -65, 65, -73, 83, -58, -51, 43]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-69, -86, 78, -29, -35, 38, -74, 55, -121, 4, -2, 22, -109, -72, -14, 90]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-57, 96, -58, -43, -6, 76, 94, -128, -103, -59, -94, 119, 113, 9, -58, 30]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-42, 90, -3, -29, -95, -75, 63, 35, 78, 57, -41, -66, -9, 77, 22, 33]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[94, -58, 3, -39, 125, 34, 45, 74, 34, 75, -40, 85, -28, 43, -96, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[9, -25, 0, -6, 4, -12, -36, 76, -110, -65, 99, -99, 115, 89, 120, -58, 24, -53, 11, -66, -116, 36, 51, 38, 20, -2, 126, 113, 106, 107, 45, 88, -42, 90, -3, -29, -95, -75, 63, 35, 78, 57, -41, -66, -9, 77, 22, 33]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[9, -25, 0, -6, 4, -12, -36, 76, -110, -65, 99, -99, 115, 89, 120, -58, 24, -53, 11, -66, -116, 36, 51, 38, 20, -2, 126, 113, 106, 107, 45, 88, -42, 90, -3, -29, -95, -75, 63, 35, 78, 57, -41, -66, -9, 77, 22, 33]");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey22);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-50, -24, 125, 62, -115, 125, -12, 58, -25, -106, -118, -59, 64, -69, 77, 120]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[64, -81, -5, 82, -124, -107, -64, 49, 49, 36, -75, -46, -27, 68, -91, 24]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[9, 45, 6, -113, -4, 29, -124, -115, 118, -107, -64, -59, -98, 1, -45, -5]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[116, -34, 119, -92, 46, 95, -72, -75, 67, -26, -18, 82, 18, -49, 21, -30]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-48, 79, 70, 46, 13, 94, 100, 95, 103, -56, -109, 25, -15, 86, -95, -50]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[13, -99, -11, 14, 9, -9, -78, 99, 114, -126, 117, 31, 108, 24, 6, -57, 96, 123, 13, -10, -57, 117, -29, -120, -103, 90, 42, 82, -86, 18, -69, -98, 116, -34, 119, -92, 46, 95, -72, -75, 67, -26, -18, 82, 18, -49, 21, -30]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[105, 44, -38, 31, 32, 6, 71, -47, 9, -61, -96, -31, -40, 110, -117, 37, 92, 15, 87, 105, -89, 61, 26, -114, 100, 84, 43, 115, -115, -41, -125, -30, 116, -34, 119, -92, 46, 95, -72, -75, 67, -26, -18, 82, 18, -49, 21, -30]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-27, -27, 1, 100, 34, 111, -30, 126, 45, -54, 19, -126, 112, -65, 77, -114, 11, 97, -104, -40, 42, 57, -52, 51, -65, -7, 4, -64, 88, -123, -128, 71, 74, -98, 107, -123, 9, 19, 36, -74, 112, -68, 6, -122, -112, 99, 33, 96, 62, -6, 108, 19, -82, 112, 2, -40, -56, -57, 14, -115, -94, 105, -44, 44, -115, -92, 119, 79, 75, 26, 63, 3, -14, -23, -27, 113, -43, 13, -23, -92, 45, 76, -93, -7, -60, -116, -59, 82, 66, 99, -122, 85, -95, 24, -47, 71, 116, -34, 119, -92, 46, 95, -72, -75, 67, -26, -18, 82, 18, -49, 21, -30]");
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey13);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-125, 39, -57, 79, -99, 21, 63, -91, -107, 79, -121, 127, -1, 21, 71, -3]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-80, -2, 80, 117, -72, -9, -69, 117, -38, -12, 10, 4, -70, 28, -36, 9]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-87, -50, -125, 55, -23, -10, -106, -12, -13, -59, 38, -122, 56, -87, 114, -5, -37, 24, -20, 45, -5, 114, -109, 44, -122, -74, -65, -51, 40, 28, 70, -67, -125, 39, -57, 79, -99, 21, 63, -91, -107, 79, -121, 127, -1, 21, 71, -3]");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[107, 67, -97, 91, 51, 58, 98, 116, 108, 93, -114, 103, 118, -3, 39, -8]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[28, -16, -2, 5, 62, -86, -46, 105, 56, -22, -43, 48, 21, -99, -113, 6]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[28, -16, -2, 5, 62, -86, -46, 105, 56, -22, -43, 48, 21, -99, -113, 6]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[39, -93, -11, 53, -82, 65, 10, 57, 43, 118, -68, 63, 124, 75, -60, -106]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[28, -16, -2, 5, 62, -86, -46, 105, 56, -22, -43, 48, 21, -99, -113, 6]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[83, -122, -40, -40, -118, 117, -20, -69, -122, 88, 110, 20, 100, -64, 49, 64, -47, -45, -19, 78, 106, 11, -125, 60, 93, -87, -117, -69, -14, 9, 106, 45, 107, 67, -97, 91, 51, 58, 98, 116, 108, 93, -114, 103, 118, -3, 39, -8]");
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey5);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[34, 65, 94, 70, -53, 57, -23, 24, 48, -109, 79, -16, -111, 50, 5, -117]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[4, 34, 80, 63, 3, -105, -81, 78, -115, -82, 100, -42, 0, 3, 39, -24]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-113, 103, 32, -18, 87, -101, 20, 94, -79, -128, 49, 120, -18, 92, 32, -15]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[34, 65, 94, 70, -53, 57, -23, 24, 48, -109, 79, -16, -111, 50, 5, -117]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[39, 90, 81, -106, 125, -111, -28, 127, -66, -42, -67, -75, -11, -82, -55, -51, 115, 9, 30, 46, -48, 63, -108, -115, -31, 124, 43, 120, -27, -1, 22, -17, -54, -3, -2, 62, 81, 33, 46, -89, 12, -5, -21, -85, -5, 17, -15, 118, 50, 100, 18, -36, -55, -36, 55, 80, 18, 98, 22, 60, 110, 44, -77, -52, -61, -25, -90, 74, -24, 34, -39, -93, -10, -18, 71, -104, -3, -103, 126, 15, -91, -122, 101, -52, -121, -128, 121, -86, -103, 113, -94, 80, -30, -52, 127, -78, 34, 65, 94, 70, -53, 57, -23, 24, 48, -109, 79, -16, -111, 50, 5, -117]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[75, 112, 38, 4, -24, -86, 48, -66, 107, -114, 69, -104, -12, 92, -49, -67]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[44, -77, 19, -14, -32, 47, 89, 123, 125, -11, -67, -79, 119, -78, -101, -5]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[127, 34, 126, 90, -20, -105, -80, -93, 94, 67, 46, 73, -101, -35, 124, 12]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[101, -7, 116, 73, 5, -49, 61, -103, 20, 123, 54, -10, 77, 20, -94, 56]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-47, -10, -21, -19, 105, 42, 2, 93, 84, 64, -63, 107, 35, -95, -77, -120, 108, 22, 103, -22, -5, 103, 72, 79, -110, 118, -97, 4, -60, -79, -85, -62, 127, 34, 126, 90, -20, -105, -80, -93, 94, 67, 46, 73, -101, -35, 124, 12]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[14, 80, -78, -122, -86, -93, -66, 84, -64, 34, 10, -28, -95, -127, 97, -31, 54, 0, -114, -36, -12, -98, -88, -22, -108, -53, -14, -69, -107, 12, 5, -116, 17, 78, 16, -90, -113, -73, -98, 127, -93, -110, 37, 55, 61, 58, -76, -110, -23, -14, -48, 98, -102, 121, 114, 75, 63, 63, -98, -5, 96, -1, -43, -37, -12, -124, -56, -122, -39, -57, 80, -89, 27, -7, -2, -108, 5, 22, -94, -103, -80, 17, -66, -65, 16, -5, -86, 90, 121, -55, -54, 21, -74, 64, -9, 56, 127, 34, 126, 90, -20, -105, -80, -93, 94, 67, 46, 73, -101, -35, 124, 12]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[14, 80, -78, -122, -86, -93, -66, 84, -64, 34, 10, -28, -95, -127, 97, -31, 54, 0, -114, -36, -12, -98, -88, -22, -108, -53, -14, -69, -107, 12, 5, -116, 17, 78, 16, -90, -113, -73, -98, 127, -93, -110, 37, 55, 61, 58, -76, -110, -23, -14, -48, 98, -102, 121, 114, 75, 63, 63, -98, -5, 96, -1, -43, -37, -12, -124, -56, -122, -39, -57, 80, -89, 27, -7, -2, -108, 5, 22, -94, -103, -80, 17, -66, -65, 16, -5, -86, 90, 121, -55, -54, 21, -74, 64, -9, 56, 127, 34, 126, 90, -20, -105, -80, -93, 94, 67, 46, 73, -101, -35, 124, 12]");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.Class<?> wildcardClass11 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-21, -121, 55, -97, 126, 39, 54, -94, -99, -120, 58, -92, 71, 86, -86, -3]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[73, 113, 31, 121, -100, 31, -76, -26, -6, 60, 114, -12, 28, -43, -15, 123]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[73, 113, 31, 121, -100, 31, -76, -26, -6, 60, 114, -12, 28, -43, -15, 123]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-35, -72, 34, -50, 30, 6, -40, -111, 59, -24, -96, 6, -3, 15, 77, -14]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-104, 66, -12, -44, -123, 84, 84, -1, -127, -123, 111, 22, -96, -128, -11, 124]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-70, -1, -42, -52, -7, 107, -104, -59, -58, 101, 4, -28, 46, 74, 84, -106, -44, -115, 34, -93, -71, 127, 126, -48, 60, 42, 101, 96, 110, 110, -104, -102, 30, -103, -12, -21, 60, -77, 116, -119, 76, -19, -114, -75, 10, 100, 113, 72, -40, 68, 126, 107, 59, -102, -2, -88, -111, 17, 39, 14, 65, -52, -32, -47, 123, -50, -59, 124, 45, -88, -121, -28, 22, -4, 77, 11, 46, -45, 102, 125, -22, 68, -44, 113, 51, 8, -33, -107, -13, -102, 88, 122, -39, 19, -14, 69, -35, -72, 34, -50, 30, 6, -40, -111, 59, -24, -96, 6, -3, 15, 77, -14]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[5, -59, 15, -51, -103, -45, -59, 59, 28, -27, -99, 0, -54, 96, -66, 58, -67, -127, 26, -58, -61, -107, 121, -4, 79, -13, 112, 69, 78, 65, 18, 68, -35, -72, 34, -50, 30, 6, -40, -111, 59, -24, -96, 6, -3, 15, 77, -14]");
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 0, (byte) 1 };
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey23);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-6, 39, -25, -10, 36, 83, -124, -62, 82, 86, -51, -64, -97, 56, -78, 46]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, -126, -97, 22, 100, -8, -3, -51, -88, -15, 123, -36, 17, -75, -87, -81]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-23, -30, -60, 17, 31, -110, 56, 126, -18, -118, 52, -30, 114, -61, 106, 125]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[42, -30, 123, -101, -93, -43, -89, 59, -40, -69, 12, 0, 40, -114, -45, -98]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-48, -108, 57, 37, 117, 6, -62, -32, 67, -100, 127, -25, 45, 17, -109, -102, -94, 71, -127, 47, 76, -25, 57, 49, -30, -24, -99, -37, 54, -55, 103, 54, -23, -30, -60, 17, 31, -110, 56, 126, -18, -118, 52, -30, 114, -61, 106, 125]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-22, 12, 85, -13, 36, -49, 28, -22, -53, -36, -11, -41, -48, 86, -37, 115, -126, 89, 31, -86, -89, -78, 70, -47, -87, -101, 92, 1, -84, -37, -96, 113, 69, -9, 0, 42, -70, 95, -22, -31, -113, 106, -74, 58, -47, -15, 94, 76, 15, 43, -119, 82, -16, 83, -84, 57, -15, 75, 82, -32, 73, 97, 102, -66, -65, 59, -72, 108, -91, 83, 117, 17, -17, 109, -95, 81, 2, -60, -26, -78, -18, -101, -90, -59, 56, -20, -82, -128, 82, 30, -28, -15, -29, -7, 61, 66, -23, -30, -60, 17, 31, -110, 56, 126, -18, -118, 52, -30, 114, -61, 106, 125]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[27, -56, 29, -3, 100, -47, 40, 64, 67, -3, -112, -93, -3, 124, -78, -18, 71, 9, 83, 23, -123, -106, 110, -122, -112, 62, 85, -10, -37, -128, -88, 110, -23, -30, -60, 17, 31, -110, 56, 126, -18, -118, 52, -30, 114, -61, 106, 125]");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey25);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-105, -125, 68, 50, -22, -69, -55, -71, -120, 26, -4, 12, -64, -43, -85, -26]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-88, -91, -54, 90, -25, -96, -122, 19, -63, 59, 73, -75, -63, 50, -115, -48]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "A8A5CA5AE7A08613C13B49B5C1328DD0" + "'", str5, "A8A5CA5AE7A08613C13B49B5C1328DD0");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-67, 53, 84, 43, -96, -45, -115, -101, 41, -26, 116, -49, 44, -79, 103, -35]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[61, -92, 90, -68, -115, 94, -112, 1, 10, 67, 27, -93, 103, 21, -119, 98]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[113, 56, 126, 58, 74, 15, 89, 72, -45, 59, 54, -81, 23, -19, 125, -49]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-115, -122, 16, 28, 91, 89, 74, -16, 81, 74, -73, 75, 96, 14, -58, 83]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-38, 115, 110, 4, -112, -30, -65, -110, 114, -84, 124, -127, -22, 26, 3, -73, 60, 43, 104, 12, -60, 121, 52, -73, 67, 68, -46, 55, -12, -60, -12, -97, 113, 56, 126, 58, 74, 15, 89, 72, -45, 59, 54, -81, 23, -19, 125, -49]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[96, 113, -79, 101, 66, -84, 76, -113, 61, -7, -22, 14, 5, 41, 119, -88, 2, -55, 110, -60, 107, 51, 120, 55, -103, 122, -99, 59, 49, 30, -7, 38, -81, 109, -37, 124, 5, -109, 55, 91, 37, -51, 53, 101, 81, -74, 76, 102, -114, -122, -97, -99, 64, 58, -8, -89, -121, 88, 27, -53, -100, -83, -99, 95, -71, -43, 30, 9, -125, -102, -31, 49, 112, -16, 109, 17, -23, -112, -84, 81, 9, 55, -61, 80, 71, 10, 7, -86, -73, -102, 65, 81, -46, 90, -52, 101, 113, 56, 126, 58, 74, 15, 89, 72, -45, 59, 54, -81, 23, -19, 125, -49]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[96, 113, -79, 101, 66, -84, 76, -113, 61, -7, -22, 14, 5, 41, 119, -88, 2, -55, 110, -60, 107, 51, 120, 55, -103, 122, -99, 59, 49, 30, -7, 38, -81, 109, -37, 124, 5, -109, 55, 91, 37, -51, 53, 101, 81, -74, 76, 102, -114, -122, -97, -99, 64, 58, -8, -89, -121, 88, 27, -53, -100, -83, -99, 95, -71, -43, 30, 9, -125, -102, -31, 49, 112, -16, 109, 17, -23, -112, -84, 81, 9, 55, -61, 80, 71, 10, 7, -86, -73, -102, 65, 81, -46, 90, -52, 101, 113, 56, 126, 58, 74, 15, 89, 72, -45, 59, 54, -81, 23, -19, 125, -49]");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey8);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey8);
        java.lang.Class<?> wildcardClass13 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[107, 41, -66, 99, -16, 52, -72, 9, 46, 41, -93, -27, 95, 53, 116, -105]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[58, 76, -84, -89, -71, 105, -118, 127, 54, -106, 10, 83, 35, -106, -25, -18]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[86, -123, 92, 59, -104, 80, -56, 37, 101, -97, 119, -80, 85, 120, 55, -121, 15, 32, 8, -1, -99, -108, 51, 84, -92, -111, -77, -37, 107, 41, 78, 40, 107, 41, -66, 99, -16, 52, -72, 9, 46, 41, -93, -27, 95, 53, 116, -105]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey8);
        java.lang.Class<?> wildcardClass14 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[86, 17, -98, 91, -75, 30, -93, 98, 64, -76, 65, -90, 122, 91, -92, 86]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[112, 69, -75, 60, -21, 67, -41, -85, 108, -2, -59, 68, 95, 111, 59, 29]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-42, -45, -35, 60, -110, -40, 100, 6, -30, -10, 64, 78, 48, -77, 125, -4, 48, 89, -35, -21, 119, -18, -14, -109, -43, 6, -42, -8, -53, -86, -2, 39, 30, -76, -23, -64, 122, 25, 7, 14, -38, -110, -122, 11, 7, 92, -86, -121, -111, -4, -87, -118, -93, 87, -122, 8, 53, -61, 41, 44, 116, -23, -81, -5, 17, -54, -77, -61, -85, -65, 103, 60, -16, -88, 93, -20, -113, -110, -113, 21, -120, -69, -85, -69, 70, 41, 24, -19, 65, 118, 77, 44, -59, -112, -29, 35, 86, 17, -98, 91, -75, 30, -93, 98, 64, -76, 65, -90, 122, 91, -92, 86]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[78, 126, -89, -1, 106, -22, -106, -50, 83, 21, -71, 46, 9, -119, 42, -77, -86, 89, 21, -16, 86, -4, 8, -15, 10, 32, -106, 39, -21, -102, 104, -11, 86, 17, -98, 91, -75, 30, -93, 98, 64, -76, 65, -90, 122, 91, -92, 86]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-124, 74, 121, 41, 90, 20, 56, -27, 10, -24, -4, -51, -99, -3, -100, -48]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[92, 85, 84, 75, -111, -50, 106, 90, -2, 2, -6, 36, -93, -57, -79, 33]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[51, 72, -85, -106, 87, -100, -55, -53, -65, -35, -35, 62, -87, 123, -91, 14]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-108, 86, -23, -55, -22, -128, -126, -10, 35, 127, 18, 89, -30, -89, 122, -96]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[116, 41, 111, -9, -113, 116, -48, -69, -118, 3, 113, 116, 7, -14, 24, 49, -13, -115, -49, -69, 56, 63, -82, -119, 121, 51, -45, 114, 24, 75, -126, -127, 51, 72, -85, -106, 87, -100, -55, -53, -65, -35, -35, 62, -87, 123, -91, 14]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-86, -35, -35, 85, -119, -97, 79, -20, -80, -72, 93, -37, 81, 121, 116, -115, -71, -56, 54, 73, -27, 74, -127, 88, 37, -34, -92, -88, -119, 3, -16, 125, 51, 72, -85, -106, 87, -100, -55, -53, -65, -35, -35, 62, -87, 123, -91, 14]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-57, -88, 27, 40, -127, -57, -64, -10, 38, -13, -35, 124, 111, 59, 74, -18, 70, -58, 96, -25, 46, -82, -118, 32, 101, 53, -88, -47, 74, -1, -68, 82, -32, 125, 105, -52, 95, 36, 111, 59, -32, -19, -126, 92, -48, 71, 113, -33, 85, -45, -27, -36, -37, 59, 98, 100, -45, 99, -41, -7, -25, 103, -91, -98, 49, -109, 89, -66, -55, 21, -37, -94, -48, 113, -77, -119, -75, -90, 24, 0, 50, 79, -8, -45, -109, -41, -27, 89, -27, 121, 15, 7, 36, -123, 104, -40, 51, 72, -85, -106, 87, -100, -55, -53, -65, -35, -35, 62, -87, 123, -91, 14]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[11, 7, 119, -16, -99, -110, 80, -59, -67, 113, 12, 80, -48, 20, 120, -85, 40, -52, -74, -124, -28, -47, -2, 119, -113, -84, -60, -14, 64, -46, 45, 120, -6, 57, 19, 28, -10, 101, -103, -18, 12, -73, 33, -29, -106, 99, -108, -80, -121, 36, 61, -85, -95, 123, -27, 97, 108, -42, 24, 113, -21, -116, -51, 1, 82, -52, 73, 83, 92, -97, -102, 65, 7, -67, 89, -86, -118, 13, 46, -9, 15, 66, 109, 34, -95, 28, 126, 71, 127, -102, -56, 123, 6, -46, -49, -55, 51, 72, -85, -106, 87, -100, -55, -53, -65, -35, -35, 62, -87, 123, -91, 14]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        java.lang.Class<?> wildcardClass33 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-122, 33, -107, -39, -32, -38, -2, 50, 126, -57, -43, 96, 70, 127, 96, -8]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-9, 6, -58, 76, 11, 3, 57, -3, 11, -74, 82, -29, 103, 23, -118, 50]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[83, 114, 45, -17, 32, -29, 106, 24, -75, 60, 88, 80, 14, 87, 94, 30]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-94, -116, 102, -126, 46, 75, -53, 97, -44, -72, 108, -35, -51, 7, 81, 61]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[34, -17, -24, -67, 13, 54, -117, -73, -86, 76, 124, -36, 2, -10, -61, -21]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-4, 109, -81, 91, 122, 118, -38, 99, -34, 30, -50, 127, 121, -59, -55, 21]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-3, 54, -21, 85, -32, 62, -114, -61, -55, 44, -62, -45, -128, -114, -42, -33]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[34, -17, -24, -67, 13, 54, -117, -73, -86, 76, 124, -36, 2, -10, -61, -21]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey39);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey39);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey47);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-17, 18, -85, -50, -21, -110, -23, 126, 9, 44, -30, 10, -3, 50, 30, -46]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[36, -71, -31, -16, -109, 107, -20, -48, -39, -127, -47, -9, -25, -105, -39, 56]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-12, -114, 7, 99, 72, 91, 82, 53, 118, -64, -90, 81, -15, -2, 100, -76]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-17, 18, -85, -50, -21, -110, -23, 126, 9, 44, -30, 10, -3, 50, 30, -46]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[71, 49, -94, 120, 125, -126, 85, 60, 53, 19, 85, 108, 125, -62, 102, 49, -27, 122, -11, -24, -114, -10, -78, 1, -62, 31, -101, 73, 82, -62, -14, -27, -17, 18, -85, -50, -21, -110, -23, 126, 9, 44, -30, 10, -3, 50, 30, -46]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "4731A2787D82553C3513556C7DC26631E57AF5E88EF6B201C21F9B4952C2F2E5EF12ABCEEB92E97E092CE20AFD321ED2" + "'", str11, "4731A2787D82553C3513556C7DC26631E57AF5E88EF6B201C21F9B4952C2F2E5EF12ABCEEB92E97E092CE20AFD321ED2");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-110, 39, 48, -109, 70, -94, -84, -6, 18, -105, -31, -10, 82, 40, -51, 92]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-40, 73, 107, 78, 38, 85, 19, -21, -83, -52, -123, -32, 44, 64, -92, -55]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[122, 107, -114, -85, 109, -85, -54, -69, -76, 127, -116, -97, 5, 34, 32, 70]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-50, 18, -24, 60, -76, 70, 47, 22, 10, 23, -65, 78, 32, 49, -3, 63]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-33, 47, -120, -123, 99, 32, -121, 55, 96, -23, 81, 100, 15, 33, 85, 44]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-42, -120, 62, -11, 83, 106, 63, -106, -79, -103, -70, -87, 44, -61, -50, 72]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[61, -43, -89, -43, -22, 3, -70, -49, 44, -25, 21, -3, -85, -60, 99, -41]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-33, 47, -120, -123, 99, 32, -121, 55, 96, -23, 81, 100, 15, 33, 85, 44]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[109, 101, -93, 80, -19, 107, 45, 75, 11, -47, -103, 101, -24, -43, -35, 30]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-121, 84, -76, 2, 25, 104, -56, 43, 2, -32, -28, 113, -11, -29, -73, -57, -108, 10, -29, 120, -20, -123, 103, -69, 126, -81, -72, -51, -34, 45, 54, 6, 99, 69, -97, 125, -60, 97, -73, 115, 80, 13, 65, -57, -98, 102, -7, 55]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.Class<?> wildcardClass8 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0101FF" + "'", str5, "0101FF");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0101FF" + "'", str6, "0101FF");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0101FF" + "'", str7, "0101FF");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey2);
        java.lang.Class<?> wildcardClass5 = secretKey2.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-57, -124, 39, 54, -121, -20, 85, 39, -81, 17, -86, -69, 102, -15, -33, -114]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-84, 75, 122, 111, 82, 125, 97, -84, 46, 13, -68, 107, -94, 50, 111, 59, 83, 27, 83, -24, 17, 47, -68, -12, 119, -52, 29, -49, 110, 55, 101, 41, 4, 28, 70, 58, 54, -13, -29, 113, 78, 46, -5, -9, -67, -111, -17, 110, 31, -31, -6, -69, -45, 95, -65, 100, 61, -46, 103, 114, 0, 118, 26, 1, -71, -113, 50, -86, -30, 102, 12, -56, -102, -48, 0, 44, 64, -40, 4, -88, -43, -13, 93, -124, -71, 49, 81, 38, -48, 32, 28, 73, -91, -51, 74, -65, -57, -124, 39, 54, -121, -20, 85, 39, -81, 17, -86, -69, 102, -15, -33, -114]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey18);
        java.lang.Class<?> wildcardClass25 = secretKey18.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-7, 25, 31, 42, -72, -92, 92, 55, 53, -52, 90, -120, -98, -83, 73, 23]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[34, -9, -126, -116, 96, 81, 19, 7, -117, -4, -53, -100, 100, -50, -121, -34]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-2, -118, 57, 109, -58, -86, 98, 89, -28, 46, -90, 36, 31, -45, 42, -45]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[64, -7, -32, 116, -92, -22, 44, 11, 88, -124, -58, 93, -108, 124, -40, -100]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-34, -120, 101, 102, -106, 106, -49, 69, 16, 117, -91, 38, -104, 0, -48, -97, 94, -38, -21, -57, -79, 72, -4, 7, -10, -121, 42, -22, 1, 54, 54, 25, -2, -118, 57, 109, -58, -86, 98, 89, -28, 46, -90, 36, 31, -45, 42, -45]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[8, -51, 121, -22, 93, -126, 67, -14, -67, 124, -103, 16, -111, 96, 50, 44, 18, -45, -125, 86, -59, -67, 51, 100, -40, -106, -18, 49, 58, 50, -52, -77, -103, -5, 16, -116, 82, -32, 40, 33, 88, -23, -32, 30, 31, -19, 19, -28, -26, 57, -55, 11, -97, -65, 29, 65, -58, 20, 124, 59, -97, -118, -79, -26, -6, 98, -61, -99, -69, 32, -121, 105, -29, 92, -46, -117, -82, 84, 1, 45, 122, 84, -66, 2, -31, 103, -121, 127, -73, 92, -99, 33, -1, 77, 49, -106, -2, -118, 57, 109, -58, -86, 98, 89, -28, 46, -90, 36, 31, -45, 42, -45]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        byte[] byteArray0 = null;
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[6, -51, 9, 86, 28, -76, -104, 56, -81, 23, -55, 118, 92, 47, 122, -23]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-4, 32, 68, -40, 83, 64, -111, -65, 121, -21, -115, 80, 18, -30, 85, 31]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[32, -109, 0, 98, 78, 69, -10, 23, 62, -106, 92, -18, 17, 16, -5, 17]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[16, 81, 96, -89, 30, 70, 89, 30, -28, -33, 94, 81, 60, -22, 112, -23]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-10, 24, -43, 8, 114, 97, -81, -41, -122, -48, -109, -41, 61, -55, -42, 74, 81, 98, -64, -8, 37, -113, -79, -17, -79, 90, 95, 106, 106, 59, -123, -31, 32, -109, 0, 98, 78, 69, -10, 23, 62, -106, 92, -18, 17, 16, -5, 17]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-5, 53, -93, -6, -57, -14, -1, 57, -83, -74, -120, -85, 31, -89, -38, -20, 37, 47, -100, -35, -58, 25, -114, -82, -91, 106, 112, -15, 65, -126, 104, -128, 32, -109, 0, 98, 78, 69, -10, 23, 62, -106, 92, -18, 17, 16, -5, 17]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[90, 97, 103, 47, -43, 50, -112, 10, 45, 101, 100, -4, -18, 106, 122, 118, 68, -22, -45, -40, -15, 16, 6, -107, -34, 53, -26, 16, -66, 56, 2, 38, 108, -78, 60, 66, 93, 8, -95, 7, -43, 88, -46, -28, -58, -91, 113, -58, -27, -97, -106, -5, -21, 112, 28, -26, 47, -82, 3, -76, 79, 9, 72, 49, -20, 63, 95, -56, -110, 43, -119, -24, 69, -52, -24, 100, 113, -81, 81, 12, -112, -14, -109, -121, 31, 61, 69, 45, -74, -16, 31, -47, -109, 7, 60, 114, 32, -109, 0, 98, 78, 69, -10, 23, 62, -106, 92, -18, 17, 16, -5, 17]");
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-63, 78, -40, 96, -55, 45, 43, -75, -22, 65, -65, 82, -22, -58, 94, 88]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[99, 35, -17, -47, 16, 81, 2, -100, -19, 53, 3, -79, 114, -15, -128, -37]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[99, 35, -17, -47, 16, 81, 2, -100, -19, 53, 3, -79, 114, -15, -128, -37]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-10, 9, -48, -89, -39, 47, -62, 18, 122, -22, -32, -118, -78, 68, -114, 5]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[99, 35, -17, -47, 16, 81, 2, -100, -19, 53, 3, -79, 114, -15, -128, -37]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-63, -36, 1, 123, -67, 54, 58, 95, 1, -31, 46, -46, 50, 112, 110, 11]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-37, 18, 101, -75, 114, 9, 105, -10, -33, 73, -92, 71, 66, -55, 28, 56]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-62, 6, 70, 32, 19, -47, 112, 25, -101, 13, 35, -73, 83, 124, 34, -45]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[101, 96, 42, -12, 119, -117, 111, -35, 66, 73, 54, 117, -22, 20, -61, 125]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-46, 20, -33, 125, 93, 103, 59, -17, -41, 112, -76, -52, -27, -46, -48, -31, 24, 10, 24, 1, 81, -63, -15, -103, 58, 36, -117, 124, -9, 108, -128, -63, -62, 6, 70, 32, 19, -47, 112, 25, -101, 13, 35, -73, 83, 124, 34, -45]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[84, -82, -27, -100, -88, -127, -67, -4, 24, -10, 7, 104, 96, 117, -127, 16, 30, 42, 84, -72, -67, 1, 76, 70, -14, 58, 99, 93, -118, -61, -18, -79, -62, 6, 70, 32, 19, -47, 112, 25, -101, 13, 35, -73, 83, 124, 34, -45]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[13, 119, -3, 105, -86, -47, 28, -115, -27, 15, 16, -6, -111, -1, -69, -12, -39, -7, 53, -27, 46, 39, 127, 120, 43, 3, 123, 6, 28, -25, 71, -125, -105, -96, 99, -44, 82, 24, -108, -34, 51, -79, -52, -55, -107, 118, 31, -38, 72, -25, -112, -46, -117, -20, -6, -35, 38, -41, -127, 86, 9, 33, 111, 113, 116, -109, -51, -22, -59, -107, 85, 84, 119, -11, 86, 116, -80, 70, 67, -15, 31, 63, -5, 86, -27, 114, -122, 76, -102, 55, -32, -37, -117, 40, 61, 82, -62, 6, 70, 32, 19, -47, 112, 25, -101, 13, 35, -73, 83, 124, 34, -45]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[114, -106, -71, 66, -53, -22, 39, -66, 37, 59, -115, -126, 88, 84, 23, 81, 2, 100, -61, 95, 8, 123, -54, 93, -17, -34, -72, 49, -117, 73, 114, -20, -62, 6, 70, 32, 19, -47, 112, 25, -101, 13, 35, -73, 83, 124, 34, -45]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[123, 2, 31, -117, 79, -2, 70, -28, -113, 111, 125, 74, -49, -51, -86, -108, -82, -126, -95, -99, -116, 90, 51, -7, -105, -29, 87, 3, 21, 1, 99, 57, 87, -42, 76, 58, 59, -128, -36, -128, -36, 55, -114, 81, -27, 36, -24, -30, -92, 19, 69, 25, 4, 25, 49, 75, -6, 30, 107, -122, -83, -73, 52, 39, -111, 116, -100, 7, 76, -115, 118, 121, -57, -103, -50, -48, -98, -92, 36, -46, 114, -85, -126, 5, -59, 75, 70, -77, 45, 17, -108, -87, -29, -61, 64, -74, -62, 6, 70, 32, 19, -47, 112, 25, -101, 13, 35, -73, 83, 124, 34, -45]");
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        java.lang.Class<?> wildcardClass7 = secretKey3.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, 116, 64, -41, -89, -105, 58, -60, 45, -86, -55, -45, -56, 25, -93, -103]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-50, -36, -114, -72, 113, 20, 126, -11, -30, 50, 74, -112, -89, 6, -18, 89]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-50, -36, -114, -72, 113, 20, 126, -11, -30, 50, 74, -112, -89, 6, -18, 89]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey44);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey44);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey44);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey68);
        byte[] byteArray74 = new byte[] {};
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray74);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey76);
        javax.crypto.SecretKey secretKey80 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey80);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey80);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey80);
        byte[] byteArray84 = new byte[] {};
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray84);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray84, secretKey86);
        javax.crypto.SecretKey secretKey90 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey90);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey90);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray84, secretKey90);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey90);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey90);
        java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey90);
        java.lang.String str97 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey90);
        byte[] byteArray98 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey90);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[73, 19, 3, -1, 51, 56, 39, 92, -3, -96, 15, -61, 4, -4, 82, 29]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-8, -118, 101, 101, 64, 68, -99, -119, 36, -7, 50, 122, -79, 124, 49, 74]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-99, -56, -27, 101, 111, -110, 34, 61, -5, 19, -115, 29, 50, 1, 31, -27]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[114, -123, 57, -111, 119, -40, 117, 100, 118, -90, -1, 71, -37, -64, -30, 15]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-120, -67, 75, -60, 122, -70, -45, -106, -68, 81, 104, -67, 86, 92, -54, -105]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[14, 98, -50, 73, 103, 37, -64, 4, 46, -98, 39, 59, 73, -124, -50, -46]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-128, -8, -28, -47, 105, 118, -111, -32, -53, 113, 5, 121, 124, 80, 20, 28]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[9, -54, 85, 4, 88, -17, 109, -108, 7, -107, -124, -50, 47, 127, -64, 68]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[33, 101, -15, -41, 11, -5, 49, 106, -116, -122, 14, -35, -40, 122, -24, 75, 25, 14, 45, 76, 43, -53, 0, 125, 125, -60, -120, -8, -62, 99, 11, 41, -128, -8, -28, -47, 105, 118, -111, -32, -53, 113, 5, 121, 124, 80, 20, 28]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-126, 75, -63, 82, -96, 58, -28, -16, -15, -55, 14, 4, 106, -118, -57, 23]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[45, 9, 90, 43, 73, -26, -59, -62, -53, -93, 80, 110, -108, -78, -15, 32]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-21, -85, -21, -80, 50, 104, 12, 69, -125, 76, -79, -110, -97, 22, -26, -116]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-39, -16, -120, -44, 58, -37, 122, -94, 121, -65, -43, -115, -57, 98, 83, -114]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(secretKey80);
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[46, -115, -2, 73, 9, -116, 88, -111, 5, -77, -114, -126, -59, 74, 121, 47]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[2, -93, 6, -105, -36, 71, -44, -85, 71, -13, 65, -98, -112, -103, -54, -27]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(secretKey90);
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-10, 85, 65, -59, -29, -84, 31, 14, 59, 35, -3, -17, -69, 126, -123, -55]");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[33, -102, 44, -109, -85, -92, 108, 45, 25, 125, 45, -119, 53, 7, -51, -14]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-78, 78, 17, -95, -36, 116, -56, 64, 64, -67, -93, -90, -23, -23, 33, -16, 34, 22, -6, 66, -2, 72, -13, 67, 58, -27, 17, 100, -79, -51, -42, -82, -10, 85, 65, -59, -29, -84, 31, 14, 59, 35, -3, -17, -69, 126, -123, -55]");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(byteArray98);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[37, 62, 15, -101, 116, 6, -103, -78, -107, 88, 44, -68, 21, 124, 48, -40, -48, -109, 79, 121, 23, 111, 81, -123, -54, -30, 62, 10, -91, 47, -72, -49, -10, 85, 65, -59, -29, -84, 31, 14, 59, 35, -3, -17, -69, 126, -123, -55]");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey2);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey25);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-126, -78, -50, 58, 70, -60, 7, -110, 34, -29, 74, 31, -118, -75, -39, 99]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-60, 52, -91, -30, -11, 117, 103, 17, 65, -60, 36, -21, -97, 104, 91, 110, -84, 76, 14, 117, 22, -8, 115, -53, -29, 47, -21, -15, 48, -116, 12, 62, 3, -62, 36, -81, -120, 33, -78, -70, 110, -9, 9, -74, 76, 38, 81, 4, -117, -56, 7, -96, -106, -43, -80, 107, 80, -21, -23, -2, -49, -97, 101, -30, 9, -27, -10, 123, 61, 48, -1, 91, 56, 119, 116, -66, -117, 78, 1, 105, 20, -85, -16, -79, -89, 21, -17, 86, -78, -90, 46, 65, 33, -57, -1, 96, -126, -78, -50, 58, 70, -60, 7, -110, 34, -29, 74, 31, -118, -75, -39, 99]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-96, -120, 5, -19, 42, 71, -64, 70, -104, -33, 47, 97, -49, -42, -82, -75]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[122, 102, 96, 111, 18, -34, -95, 35, -93, 0, 48, 98, -113, 29, 28, -5]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-31, 106, -57, -79, -47, -37, -70, -125, 74, -121, -27, -111, -7, -73, -21, 117]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-98, 11, -62, 94, 70, -72, 55, 90, -109, -1, 39, -61, -107, 1, -70, 58]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-17, 38, 88, -47, -54, -65, 82, 77, -23, 6, -54, 16, -65, 69, -4, 62, 36, -76, 10, 83, 19, 106, -126, -94, 11, -96, 103, -114, -100, 71, 126, -48, -31, 106, -57, -79, -47, -37, -70, -125, 74, -121, -27, -111, -7, -73, -21, 117]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[122, 35, -113, 46, 126, 74, 12, 36, -45, 42, -103, -80, -87, -5, 82, 56, 115, 4, -128, -9, -40, 54, -7, -28, 98, 26, 13, 77, 121, 109, 40, -9, 5, -88, -21, -112, 114, -73, -63, -35, 81, 35, 61, -44, 52, -122, 98, 74, 17, 110, 124, -128, -11, 40, 42, 47, -66, -89, -9, 85, 59, 55, 40, -113, -6, 7, -27, 54, -109, -71, 37, -32, 39, -107, 74, -51, 100, -70, -18, -2, 91, 31, 96, -51, 37, -2, -110, -15, 67, -33, -37, -28, -77, 84, -113, -104, -31, 106, -57, -79, -47, -37, -70, -125, 74, -121, -27, -111, -7, -73, -21, 117]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[122, 35, -113, 46, 126, 74, 12, 36, -45, 42, -103, -80, -87, -5, 82, 56, 115, 4, -128, -9, -40, 54, -7, -28, 98, 26, 13, 77, 121, 109, 40, -9, 5, -88, -21, -112, 114, -73, -63, -35, 81, 35, 61, -44, 52, -122, 98, 74, 17, 110, 124, -128, -11, 40, 42, 47, -66, -89, -9, 85, 59, 55, 40, -113, -6, 7, -27, 54, -109, -71, 37, -32, 39, -107, 74, -51, 100, -70, -18, -2, 91, 31, 96, -51, 37, -2, -110, -15, 67, -33, -37, -28, -77, 84, -113, -104, -31, 106, -57, -79, -47, -37, -70, -125, 74, -121, -27, -111, -7, -73, -21, 117]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, -102, -20, -123, 28, 61, -48, -97, -3, -103, 84, -75, 44, -52, 65, -42, 22, 76, 11, -31, -48, -62, -74, 36, 54, -52, 44, 55, 109, 100, 83, -75, -31, 106, -57, -79, -47, -37, -70, -125, 74, -121, -27, -111, -7, -73, -21, 117]");
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey39);
        java.lang.Class<?> wildcardClass47 = secretKey39.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-99, 91, 4, 117, -48, -51, -14, -46, -81, 109, -70, 122, 67, 93, 96, 54]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[96, -109, 11, -80, 64, 88, -57, -5, 83, 26, -62, -104, -49, -15, 87, 25]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[82, -56, 61, 74, 53, -84, -49, 74, -30, -61, 115, -4, -86, 61, 108, 60]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[37, 39, -46, -107, 101, 110, 121, -23, -45, 40, -80, -110, -78, 28, 9, -86]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[22, -106, 108, 29, -91, 79, 60, 118, 124, -122, -85, 86, 66, 89, -40, -52]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[119, 58, 13, -125, -56, 105, 106, 24, -77, -111, 88, -3, -69, -67, 80, 31]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[70, 27, 67, 121, 69, 3, 38, 39, -71, 86, -64, 34, 107, 108, 86, -107]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[5, 27, 10, -101, -79, 70, 87, -72, -88, -109, -65, -112, 96, -43, 16, 87]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-123, 59, -89, -83, 0, -83, 77, 46, -56, -28, -17, 75, -106, -12, 0, -28, -12, 50, -96, 7, 24, -25, -71, 62, -103, 23, -19, 15, -70, 17, -82, -30, 70, 27, 67, 121, 69, 3, 38, 39, -71, 86, -64, 34, 107, 108, 86, -107]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-97, -80, -69, -71, 92, 111, -1, -20, 0, 57, 122, 89, -7, -82, 15, -66, 117, 40, -120, 79, -35, 100, 51, 88, 126, 18, 58, -127, 69, 106, -86, -108, 70, 27, 67, 121, 69, 3, 38, 39, -71, 86, -64, 34, 107, 108, 86, -107]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey38);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey38);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey38);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey38);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[62, 88, -83, -50, -29, 118, -32, 100, -52, 56, -13, -72, -71, -17, 109, 20]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-52, 36, -28, 113, -64, 124, 81, 109, -65, -109, -121, 95, -50, 62, -24, -69]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[46, 113, 101, -11, -4, 27, -46, -34, -71, -111, 85, -53, -24, -96, 23, -124]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-11, 54, 42, -102, -53, 91, -5, 69, 20, -7, 96, -72, 55, 67, -16, 95]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-47, 66, 85, -78, -83, 64, 80, 115, -75, 108, 29, 111, -115, -9, -15, 54, -64, 73, -62, 112, 79, -63, -118, 17, -69, 30, -82, -12, 57, 44, 34, -115, 46, 113, 101, -11, -4, 27, -46, -34, -71, -111, 85, -53, -24, -96, 23, -124]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-112, -33, -118, -127, 69, -100, 33, -69, -94, -31, 2, -41, -42, 10, -124, 0, -76, -19, -77, -44, 28, 74, 123, -35, 99, 101, -41, -39, 42, -74, 79, 22, 46, 113, 101, -11, -4, 27, -46, -34, -71, -111, 85, -53, -24, -96, 23, -124]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 62, -124, -69, -60, 69, 67, -115, 2, 122, -78, 73, -108, 90, 0, -117, -61, 73, -50, 44, -92, 74, -13, -61, -91, 82, 122, -46, 6, 91, -99, -103, 64, -41, 24, -56, 108, 43, 114, 92, 67, 19, -106, 87, 63, -66, -14, -17, 18, 36, -75, 98, -101, 98, -81, 58, 117, -127, -57, 70, -3, 125, 27, 9, -7, -76, -80, 9, 19, -3, -86, 73, 69, 5, -80, -57, 60, 106, -105, -90, 9, 47, -51, 121, -82, -31, -22, 25, -109, 12, -29, -71, -85, -47, 78, 67, 46, 113, 101, -11, -4, 27, -46, -34, -71, -111, 85, -53, -24, -96, 23, -124]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-125, -18, 39, 85, 74, 37, -2, -107, 114, 86, 73, 23, -16, 112, -14, -83, -76, -42, 64, 31, 5, 118, 119, -28, 80, -48, -113, 54, 58, 57, -62, -105, 46, 113, 101, -11, -4, 27, -46, -34, -71, -111, 85, -53, -24, -96, 23, -124]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 62, -124, -69, -60, 69, 67, -115, 2, 122, -78, 73, -108, 90, 0, -117, -61, 73, -50, 44, -92, 74, -13, -61, -91, 82, 122, -46, 6, 91, -99, -103, 64, -41, 24, -56, 108, 43, 114, 92, 67, 19, -106, 87, 63, -66, -14, -17, 18, 36, -75, 98, -101, 98, -81, 58, 117, -127, -57, 70, -3, 125, 27, 9, -7, -76, -80, 9, 19, -3, -86, 73, 69, 5, -80, -57, 60, 106, -105, -90, 9, 47, -51, 121, -82, -31, -22, 25, -109, 12, -29, -71, -85, -47, 78, 67, 46, 113, 101, -11, -4, 27, -46, -34, -71, -111, 85, -53, -24, -96, 23, -124]");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[24, -104, -7, -126, 93, 100, -35, -80, -108, -48, 39, -79, 49, 127, 64, -121]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-17, -21, 90, 4, 41, 111, -90, -127, -117, -102, -38, 60, -110, -67, 23, 28]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-23, -123, -10, 122, 56, 34, -66, 111, -65, -5, 91, 41, -112, 91, 96, 125]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[24, -104, -7, -126, 93, 100, -35, -80, -108, -48, 39, -79, 49, 127, 64, -121]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-36, -74, -38, 100, -92, 72, 75, 63, 91, 5, -56, 85, 112, 93, -103, 38, -87, -94, 93, 40, -59, -100, 4, -116, 98, -64, 62, -118, -46, 99, -73, -32, 24, -104, -7, -126, 93, 100, -35, -80, -108, -48, 39, -79, 49, 127, 64, -121]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-67, 123, 37, 97, -97, 97, -75, -79, 42, -59, -82, 74, 62, -64, 82, 11, 77, 26, 8, 33, 69, -114, 99, 32, 93, -34, -18, 121, -7, -24, 58, -30, 24, -104, -7, -126, 93, 100, -35, -80, -108, -48, 39, -79, 49, 127, 64, -121]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-23, -123, -10, 122, 56, 34, -66, 111, -65, -5, 91, 41, -112, 91, 96, 125]");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey39);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey65);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey65);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[23, 14, -25, -106, -30, 117, -20, 26, 11, -118, 97, 108, 14, 2, 115, 37]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-74, -24, 28, 46, -5, 19, 63, 119, -63, -61, -120, -31, -128, 79, -58, -39]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-17, 109, -16, 66, -86, 74, -13, 51, -57, -76, 38, -16, -88, -122, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-127, 116, -73, 5, 49, 7, -14, 36, -52, -24, -106, 72, -62, 117, 38, -57]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[83, 114, -119, 29, -92, 97, -109, 43, -106, 115, -59, -78, -10, -68, -94, 120]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-87, 44, 15, 2, -71, 117, 52, -63, 89, 0, 63, 33, 118, 71, -33, -1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[24, -29, 56, -13, 2, -107, 100, 95, -98, -96, 69, -83, -82, 85, -120, 114]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-40, -33, -81, 15, 101, 123, 108, 83, -116, -117, 101, 5, 11, 20, -123, 63]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-123, -107, 31, 123, 14, 51, -50, 8, -86, -29, -12, 33, 67, 32, 4, 41, 56, -120, -19, -99, 126, -5, -49, 63, 45, 91, 113, 22, 69, -36, 84, -20, 24, -29, 56, -13, 2, -107, 100, 95, -98, -96, 69, -83, -82, 85, -120, 114]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-56, -67, 17, 43, -7, -5, 100, 112, -74, -27, 52, 16, 117, 111, 93, 11, -39, 13, 26, -113, 77, -68, -21, 12, 58, -46, -39, -42, 33, 90, -22, 54, 24, -29, 56, -13, 2, -107, 100, 95, -98, -96, 69, -83, -82, 85, -120, 114]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-11, -34, 102, 69, -113, -84, 39, -44, 84, 15, 74, -92, 105, -114, -101, -124]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-81, 89, -97, -97, -92, -112, -13, -121, -24, 108, -86, -84, 41, -11, -6, 46]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[24, 80, -18, 46, -78, -64, 95, -19, -65, 39, 73, 57, 59, 113, 51, -109]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-58, -75, -88, 98, 67, 78, 45, -48, -34, -83, -116, 45, 104, -23, 85, -11]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[21, 106, 83, -126, 66, -92, -120, -29, 92, 65, -28, 125, -120, 108, 9, 44, -60, -72, 4, 127, 14, -58, 79, -34, -86, 112, -122, 49, 124, 75, -50, 61, 24, 80, -18, 46, -78, -64, 95, -19, -65, 39, 73, 57, 59, 113, 51, -109]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[21, 106, 83, -126, 66, -92, -120, -29, 92, 65, -28, 125, -120, 108, 9, 44, -60, -72, 4, 127, 14, -58, 79, -34, -86, 112, -122, 49, 124, 75, -50, 61, 24, 80, -18, 46, -78, -64, 95, -19, -65, 39, 73, 57, 59, 113, 51, -109]");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey26);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[95, -94, 0, 56, 41, -94, 74, 122, 30, 60, 90, -23, 22, -79, -125, 13]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-64, 58, 12, 72, 76, 77, 91, -84, 31, 81, -26, -101, -100, -127, -12, -64]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-40, -79, -24, -85, 97, 104, -125, 3, -16, 87, -9, -34, -75, 15, -68, 47]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[39, 120, 60, 69, 7, 87, -73, 41, -92, 112, -60, 85, 58, -3, 116, -82]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-25, 10, -67, -110, 113, 32, 119, -7, 79, -46, 119, -66, -37, 30, -99, 36]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-65, -127, -107, 78, -14, -111, -74, 65, 114, -114, -13, 16, -67, 69, 14, -119]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-65, -127, -107, 78, -14, -111, -74, 65, 114, -114, -13, 16, -67, 69, 14, -119]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[54, 27, -11, -102, -31, -68, -105, -12, 11, -50, 7, 33, 32, 125, 115, 70, -28, 75, -32, -21, -53, -19, 18, -56, -109, -44, 59, 112, -99, 97, 95, 30, -25, 10, -67, -110, 113, 32, 119, -7, 79, -46, 119, -66, -37, 30, -99, 36]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 127, -67, -37, -10, 116, -51, -18, 97, 110, 44, 123, 10, 74, 57, -29]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, -71, -73, -62, 20, -36, -126, 46, -93, -55, 111, 21, 73, 96, 35, -121]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[85, -121, 115, 98, -49, 66, -87, -112, -6, 88, 100, 3, -76, 18, -52, -55]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-62, 6, 16, -25, -35, 101, 25, -20, 31, 63, 47, -121, -14, 44, 26, 117]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-57, -104, -98, 23, 117, 101, 39, 0, -30, 49, 93, 81, -61, 104, -18, -60, -121, 42, 60, -29, 39, 17, -111, 114, 56, -28, 95, -32, -26, -35, -85, 86, 85, -121, 115, 98, -49, 66, -87, -112, -6, 88, 100, 3, -76, 18, -52, -55]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[27, 58, 105, -83, 116, 99, -120, -29, -78, 99, -67, -93, 118, -13, -65, 41, 79, -27, 78, 15, 61, 3, -117, 108, -86, 18, -93, -68, -85, 39, 99, -43, 85, -121, 115, 98, -49, 66, -87, -112, -6, 88, 100, 3, -76, 18, -52, -55]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-114, 13, -100, 44, -116, -33, -18, -67, -31, -90, -84, 116, -37, 25, 33, 8, 59, 79, -61, -103, 39, -112, 42, -90, 55, -75, -12, -64, -17, 1, -81, 88, 35, -126, 15, -103, 62, -21, -31, -36, 14, 98, -126, -70, -17, 38, 113, 68, -91, 111, 60, 90, -40, 1, 51, 91, -22, 17, 99, 95, 39, -46, 15, -24, -49, -39, -91, 28, 63, -91, 95, -22, 1, 114, 2, -18, -109, -1, -53, -44, -99, 29, 7, 5, -43, -97, -120, 56, -92, 121, 49, 45, -112, -23, 108, 89, 85, -121, 115, 98, -49, 66, -87, -112, -6, 88, 100, 3, -76, 18, -52, -55]");
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey39);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey65);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey65);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[52, -65, -114, -105, -47, 62, 84, -32, 56, 110, 11, -3, 33, 9, 121, 84]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[9, 35, -126, 56, 110, -107, -80, -40, 60, -52, -16, -28, 116, -101, 38, -112]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-79, -22, -8, -123, 83, -81, -50, 104, 30, -105, -39, -99, -7, -115, -21, 16]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-60, 42, -86, 24, -22, 74, 83, -63, -84, 88, -82, 48, 63, -55, 120, -21]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-19, -18, 29, 17, -127, -27, 87, -73, -15, 80, -2, -1, -22, -57, 5, 116]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[20, 103, -5, 49, 28, 123, 103, 46, 103, -45, 90, 109, -39, -79, 108, -15]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[110, 30, -105, 28, 85, 114, 42, -73, -11, 66, -122, 76, 81, 13, 20, -31]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-70, -81, 64, 30, -112, -9, 60, 32, 120, -115, 60, 68, -6, 98, -120, -22]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-49, 97, -69, 64, -15, -76, -124, -51, 57, -73, -101, -40, 18, 9, 8, -94, 0, 30, 59, 74, -110, -96, 93, 38, -34, -71, 72, -43, 51, 70, -4, -106, 110, 30, -105, 28, 85, 114, 42, -73, -11, 66, -122, 76, 81, 13, 20, -31]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-20, 19, -119, 60, 108, -122, -104, 55, -120, 83, 19, -56, 53, -48, 73, -94, 126, 2, 21, -9, -102, 54, -11, -24, -15, -90, -101, -94, -21, 127, 15, 85, 110, 30, -105, 28, 85, 114, 42, -73, -11, 66, -122, 76, 81, 13, 20, -31]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-106, 108, 40, 17, -10, 4, 96, 126, -66, -89, 98, 88, -22, -127, 15, 122]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-105, -38, 101, 58, 36, 60, -3, -42, 8, 53, -47, -91, 55, -4, -64, 68]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-76, -102, -125, -11, -101, -115, -61, 94, 74, 54, -72, 52, 116, 56, -65, -74]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-68, -97, 71, 7, 53, 0, -107, -86, 4, 78, 28, -125, 43, 78, -112, -55]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[59, 63, -70, 50, -118, 20, -78, 97, 21, -16, -115, 74, -3, 54, 90, 117, -74, 8, -63, 21, -14, -26, -12, 98, 91, -22, 4, 87, -10, 1, -77, 67, -76, -102, -125, -11, -101, -115, -61, 94, 74, 54, -72, 52, 116, 56, -65, -74]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-43, -30, -94, -20, 13, -85, -39, 68, 109, -44, 81, -102, 102, -54, -102, 120, -120, 125, 65, 98, 79, -77, -25, -105, 44, 28, 48, 82, 59, -35, 99, -37, -76, -102, -125, -11, -101, -115, -61, 94, 74, 54, -72, 52, 116, 56, -65, -74]");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey9);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        java.lang.Class<?> wildcardClass3 = secretKey1.getClass();
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[104, 55, -11, -109, -21, -128, 1, -8, 11, -38, -92, -84, -42, 126, -37, 72]");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey5);
        java.lang.Class<?> wildcardClass10 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-124, -54, -42, 106, 43, -119, -60, -98, -79, -64, -101, -117, -110, -113, -9, -50]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-73, 46, -16, -121, -36, -51, 70, -81, 21, 5, -91, -108, 37, -17, -99, -51, 31, -63, -120, 120, -21, 78, -94, -72, 126, 14, -100, 75, -23, -32, -66, 84, 23, 51, -16, 38, 37, 122, 123, 42, 5, 84, 114, -117, -105, 39, -67, -29]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[35, -11, -77, -11, 108, 6, -96, -6, -21, -5, -11, 77, -102, -82, 89, -28, -1, -117, -105, -117, -20, 51, 81, -107, 87, -41, 58, -19, 3, -76, 87, -84, 23, 51, -16, 38, 37, 122, 123, 42, 5, 84, 114, -117, -105, 39, -67, -29]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.Class<?> wildcardClass28 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[66, 74, -70, -38, 85, -45, 25, 40, 82, -18, 84, -31, 58, 78, -2, -47]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-16, -109, -51, 15, -57, -57, -109, 44, 29, -48, -64, -37, -76, 85, -50, -6]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-67, 104, -40, -58, 71, 30, 104, -2, 92, 111, -40, 13, 110, 24, -17, -122]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[6, -21, 111, 96, 20, 109, -57, -68, -108, -113, 54, 35, 110, -88, 85, 37]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, -2, 31, 28, 72, 100, -60, -21, -76, -77, -118, 116, -70, -72, 83, 91, 39, -23, 32, -70, -11, -70, -74, -36, -58, -30, -76, -81, 54, 49, -121, 104, -67, 104, -40, -58, 71, 30, 104, -2, 92, 111, -40, 13, 110, 24, -17, -122]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, -78, -58, 36, -86, 59, -12, 26, 71, 78, 120, -59, 122, -7, 86, 54, 31, -17, -52, -60, -28, 40, -125, -37, 124, 100, 105, -24, -21, -106, 98, -34, -67, 104, -40, -58, 71, 30, 104, -2, 92, 111, -40, 13, 110, 24, -17, -122]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[9, 91, 87, 8, 24, 49, 5, -123, -48, 64, 89, 86, -53, -70, 108, -82, 99, 115, 44, 103, -9, 83, -118, -22, 37, -92, -60, -32, -53, -50, 53, 29, -6, 97, -65, 41, 12, 50, 118, -4, -8, 83, -109, -48, 12, 47, 53, -63, -51, -49, -63, -106, 34, -41, -31, -27, -13, 69, -63, 123, -71, 4, -56, 36, 63, 124, -91, 50, 69, -58, -20, -52, -118, -12, -82, -89, 120, -30, 3, 98, 70, 102, -24, -28, -68, -96, 39, -120, -5, 121, -109, -67, 82, -36, -70, -33, -67, 104, -40, -58, 71, 30, 104, -2, 92, 111, -40, 13, 110, 24, -17, -122]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86" + "'", str27, "095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.Class<?> wildcardClass27 = secretKey19.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[45, -81, 44, 11, -87, -109, 57, -101, -109, -57, 74, -3, 43, 115, 74, -7]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[105, 80, 116, -104, -96, 58, -85, 2, -49, -13, -79, -93, 112, -18, -68, -14]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-12, 48, -56, 80, -33, -59, -24, -43, 55, -4, -16, -43, -128, -113, 22, -64]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-100, 40, 75, 102, 4, -63, 49, -57, 103, -30, -87, -5, 19, 77, 103, 20]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[125, -11, 39, 60, -69, 11, -100, 14, -69, -79, -125, -107, 87, 124, -15, -23, -83, -88, -6, 100, -104, 67, -30, 45, -89, -35, 55, 121, -3, -85, -99, -110, -12, 48, -56, 80, -33, -59, -24, -43, 55, -4, -16, -43, -128, -113, 22, -64]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-12, 48, -56, 80, -33, -59, -24, -43, 55, -4, -16, -43, -128, -113, 22, -64]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-100, 40, 75, 102, 4, -63, 49, -57, 103, -30, -87, -5, 19, 77, 103, 20]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        java.lang.Class<?> wildcardClass27 = secretKey19.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[68, 50, 48, -128, -81, -95, 59, 111, -106, 83, 17, 76, 93, -65, 28, -28]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[16, 37, 70, 8, -73, -78, -120, -20, 21, 62, -113, -30, 63, -65, 57, 13]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[74, -13, -24, -73, -36, 79, 74, -79, -6, -10, -73, -28, 98, -104, -97, -78]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[34, -77, -64, -19, 63, -97, 54, -11, -5, 27, 60, 32, 125, -19, -22, 77]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[67, 5, 57, -15, -95, -30, 7, 111, -25, 46, -10, -125, 124, 46, 80, -28, -25, -21, -114, -34, -106, 92, -75, 72, 52, -18, 63, -90, 117, 65, -13, 4, 74, -13, -24, -73, -36, 79, 74, -79, -6, -10, -73, -28, 98, -104, -97, -78]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[67, 5, 57, -15, -95, -30, 7, 111, -25, 46, -10, -125, 124, 46, 80, -28, -25, -21, -114, -34, -106, 92, -75, 72, 52, -18, 63, -90, 117, 65, -13, 4, 74, -13, -24, -73, -36, 79, 74, -79, -6, -10, -73, -28, 98, -104, -97, -78]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[74, -13, -24, -73, -36, 79, 74, -79, -6, -10, -73, -28, 98, -104, -97, -78]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey24);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey24);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey24);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-33, -27, -79, -87, 53, 84, -122, 97, 63, 21, -22, -12, 61, -65, 126, -103]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-111, 7, 74, -20, -19, -48, -59, 27, -81, -90, 55, -87, -18, -10, -97, -57]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[68, -57, -28, 88, 55, 114, 98, -42, -120, -87, 115, 61, -39, 13, 0, 65]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[66, 6, -45, 13, 23, 61, -59, -37, 108, 10, -48, 70, -63, -70, 127, -86]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-31, -23, 62, -57, 92, 111, 94, 101, 90, 84, -53, 79, 88, -43, 37, -106]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-46, 26, 40, -93, 16, 67, 92, -28, -66, 49, 117, -14, -43, -113, 87, -41, -127, -89, -66, 67, 103, -47, 63, 18, 122, -5, -72, 48, 45, 13, -87, -89, 66, 6, -45, 13, 23, 61, -59, -37, 108, 10, -48, 70, -63, -70, 127, -86]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[63, 107, -65, -30, 3, -80, -85, 1, 80, 6, 85, -94, 9, -125, -128, 53, 90, 85, -27, 114, 37, -104, 81, -42, -97, -65, -51, -108, 4, 67, -85, 71, 66, 6, -45, 13, 23, 61, -59, -37, 108, 10, -48, 70, -63, -70, 127, -86]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[53, -116, 126, -128, 40, -98, -35, 16, -68, 30, 107, 100, 113, -120, 53, -58, -1, -76, -76, 94, 103, 124, -71, -120, 93, 110, 26, 111, 92, -87, -60, 3, 68, 118, 4, 81, 44, 111, -53, 78, -23, -110, 15, 122, -30, -96, -121, -48, 60, -113, -81, -103, -83, -49, 86, 8, -107, 97, 108, -70, 31, 17, 77, -100, -58, -128, -113, -122, 74, 38, 103, -62, -2, -51, 11, -104, 116, -80, -76, 35, 47, -124, -19, 44, -97, -61, -55, 37, -65, -57, 54, 32, 78, 109, -103, 65, 66, 6, -45, 13, 23, 61, -59, -37, 108, 10, -48, 70, -63, -70, 127, -86]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-34, 24, 111, 93, -102, 82, -49, 83, -95, -103, -56, 98, -57, -24, 1, 121, -100, 89, -66, 111, -109, -68, 51, 123, 26, 59, 66, 4, 21, -95, -4, -86, 66, 6, -45, 13, 23, 61, -59, -37, 108, 10, -48, 70, -63, -70, 127, -86]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[72, -12, 77, -67, -19, 94, -12, 101, 105, 63, -49, 84, 101, -75, 99, -48, 86, -46, -45, 109, -57, -97, -83, -76, -19, -102, 11, -46, 93, 56, 25, -118, 66, 6, -45, 13, 23, 61, -59, -37, 108, 10, -48, 70, -63, -70, 127, -86]");
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey2);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey27);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey27);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey27);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey27);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[46, -79, 59, -62, -19, 8, -40, 75, -78, -66, -71, 64, 48, 17, 46, -7]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[47, 50, 43, 31, 3, -63, -107, 110, 16, -128, -36, -83, -45, 10, 92, -6, 79, -81, -30, -83, -93, -114, -37, 96, -15, 93, 82, 77, -93, 114, -103, -39, 69, -113, 110, 28, -48, -8, 57, -36, -7, 30, -94, -101, 14, -34, 36, -38]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[107, -18, -50, 111, 108, -41, -39, -111, 33, -55, 54, 9, 115, 102, 11, 126]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[81, -98, 38, 117, 12, -76, -4, 53, -76, -24, -21, 100, 30, -106, 124, 77]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-108, 94, 82, 118, -108, 29, 125, -61, -65, -10, 117, -41, 88, -62, -81, 88]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-98, 45, -71, 122, -111, -111, -117, 124, 124, -126, 105, -126, -56, -84, 117, -9]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[113, 94, 125, -108, -54, -83, -37, 25, -59, 77, 55, 68, 122, 74, 35, -71, -101, 92, 3, 16, -13, 51, 71, 46, -86, -125, -128, -110, 105, -82, -7, 84, -108, 94, 82, 118, -108, 29, 125, -61, -65, -10, 117, -41, 88, -62, -81, 88]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, -89, 127, -123, 110, 121, 103, 11, 70, 78, -65, 99, -111, -13, -60, 12, -80, 63, -123, -46, 77, 57, -49, -80, -111, 122, 108, 81, 40, 106, 14, -49, -108, 94, 82, 118, -108, 29, 125, -61, -65, -10, 117, -41, 88, -62, -81, 88]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-84, -16, 79, 60, -96, -1, 105, 98, -75, -106, 111, -121, 94, 9, 36, 69, 46, 57, -88, -85, 40, -41, -94, 99, -44, -31, 90, 113, 27, 1, 116, 90, -46, -20, -94, 17, 90, -98, -70, 84, -38, 41, -121, -112, -26, 120, -56, 88, -49, 127, -57, 52, 50, -128, -102, 19, 104, -125, 33, -8, 47, 50, 47, -101, -98, -34, 52, 33, 40, -114, -57, -93, -80, -24, 64, 31, -8, -44, 127, -13, 86, 27, 58, 22, -35, -114, 109, -112, -63, 69, -55, -1, -32, -4, -101, 30, -108, 94, 82, 118, -108, 29, 125, -61, -65, -10, 117, -41, 88, -62, -81, 88]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[36, -56, 93, -10, 64, 15, 2, -18, 114, -56, 67, -54, -26, -33, -127, -123, 36, 48, 38, 27, 92, 88, -86, -85, 15, 81, -110, -64, 122, 100, 95, 97, -108, 94, 82, 118, -108, 29, 125, -61, -65, -10, 117, -41, 88, -62, -81, 88]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-84, -16, 79, 60, -96, -1, 105, 98, -75, -106, 111, -121, 94, 9, 36, 69, 46, 57, -88, -85, 40, -41, -94, 99, -44, -31, 90, 113, 27, 1, 116, 90, -46, -20, -94, 17, 90, -98, -70, 84, -38, 41, -121, -112, -26, 120, -56, 88, -49, 127, -57, 52, 50, -128, -102, 19, 104, -125, 33, -8, 47, 50, 47, -101, -98, -34, 52, 33, 40, -114, -57, -93, -80, -24, 64, 31, -8, -44, 127, -13, 86, 27, 58, 22, -35, -114, 109, -112, -63, 69, -55, -1, -32, -4, -101, 30, -108, 94, 82, 118, -108, 29, 125, -61, -65, -10, 117, -41, 88, -62, -81, 88]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-107, 119, 13, 81, -109, -39, 41, -15, -20, -84, -96, -2, -51, -71, -91, 88, 77, -61, 49, 83, -92, -78, 50, -107, -75, -97, 92, 112, 18, 37, -81, 118, -45, -64, 115, -69, -97, -91, -97, -3, 3, -82, 122, 87, 88, 8, 89, 97, -18, -72, -56, -90, 21, 104, 2, 18, -31, -100, 68, 118, 50, -95, 22, -57, 2, 61, -123, 20, -123, 9, 38, -72, 86, 6, -11, 115, 69, -114, -1, 127, -36, 29, 77, 122, 100, 63, -69, -17, 47, -46, 40, 61, -124, 74, 91, 54, -108, 94, 82, 118, -108, 29, 125, -61, -65, -10, 117, -41, 88, -62, -81, 88]");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey7);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[92, -101, 2, -61, -25, -72, 24, -31, 37, 59, 99, 8, -7, -105, 75, 17]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-85, 126, 94, -103, -40, -20, 102, -31, 25, 6, -17, -42, -66, -12, -61, 100]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AB7E5E99D8EC66E11906EFD6BEF4C364" + "'", str5, "AB7E5E99D8EC66E11906EFD6BEF4C364");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AB7E5E99D8EC66E11906EFD6BEF4C364" + "'", str6, "AB7E5E99D8EC66E11906EFD6BEF4C364");
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[91, 103, -27, -51, -65, -12, 69, -65, 93, 115, -47, 36, -4, 9, -21, 77]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[33, 117, 16, 55, 41, 20, 51, -15, -101, 54, 92, -37, -110, 105, -89, 54]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[33, 117, 16, 55, 41, 20, 51, -15, -101, 54, 92, -37, -110, 105, -89, 54]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-37, -72, 5, 11, -64, -35, -16, -22, -47, 25, 58, 57, 104, 46, 22, -116]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[91, 103, -27, -51, -65, -12, 69, -65, 93, 115, -47, 36, -4, 9, -21, 77]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[115, -80, 103, -67, 76, 91, 81, -7, 106, -80, -37, 113, -95, -95, -16, 74]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-87, 36, 90, 6, -91, -42, 61, 72, -78, 8, 37, 6, -6, 121, 9, -83]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[31, 7, -28, -22, -63, 31, 15, 68, 43, -69, 5, 112, 19, -56, 114, 72]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-115, 3, 7, -23, -76, 51, 29, -89, -106, -85, 108, 13, -114, 21, -128, -73]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[107, -126, 31, 126, -108, -28, 94, -58, 32, 118, 31, -117, 18, -48, 2, -44, -64, 68, 74, 26, 2, -96, -106, -51, 13, -43, -91, -110, -65, 110, 31, 14, 31, 7, -28, -22, -63, 31, 15, 68, 43, -69, 5, 112, 19, -56, 114, 72]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-111, 108, -67, -72, -70, 107, -8, 31, -45, -11, -71, -89, -59, 97, -91, -41, 46, -43, 73, -47, 81, -10, -93, -118, 98, 64, 76, -1, -31, -41, -17, 47, 11, 95, -86, 118, -62, -36, -111, 95, -114, 40, -66, -25, -99, -127, -73, -92, 8, 59, 115, 96, -68, -54, 80, -102, 25, -103, 107, 48, 120, -45, -119, 88, 68, -2, 56, -32, 3, -19, -105, -122, 40, -80, 45, -45, -53, -47, 42, 103, -49, 28, 116, 70, -108, 46, 98, -106, 74, -46, 98, 114, 121, -45, -31, -46, 31, 7, -28, -22, -63, 31, 15, 68, 43, -69, 5, 112, 19, -56, 114, 72]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-111, 108, -67, -72, -70, 107, -8, 31, -45, -11, -71, -89, -59, 97, -91, -41, 46, -43, 73, -47, 81, -10, -93, -118, 98, 64, 76, -1, -31, -41, -17, 47, 11, 95, -86, 118, -62, -36, -111, 95, -114, 40, -66, -25, -99, -127, -73, -92, 8, 59, 115, 96, -68, -54, 80, -102, 25, -103, 107, 48, 120, -45, -119, 88, 68, -2, 56, -32, 3, -19, -105, -122, 40, -80, 45, -45, -53, -47, 42, 103, -49, 28, 116, 70, -108, 46, 98, -106, 74, -46, 98, 114, 121, -45, -31, -46, 31, 7, -28, -22, -63, 31, 15, 68, 43, -69, 5, 112, 19, -56, 114, 72]");
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey2);
        java.lang.Class<?> wildcardClass5 = secretKey2.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-76, 121, 107, 62, 113, -110, 52, 68, -56, -72, -53, 108, 46, 21, 112, 88]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[54, -117, 56, 118, -5, -110, 31, -111, -115, -119, -63, -122, 64, 53, -33, -16, 97, 108, 43, -76, 4, 89, -43, -30, 66, -19, 9, 43, -103, 13, 67, -91, 34, 125, 67, -66, 62, 41, 115, -59, 12, -116, -56, -38, -114, 87, 98, 84]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey13);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey13);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[101, 49, -13, 39, 88, -80, 87, 12, 37, -4, 5, 123, -70, -74, 66, 33]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-109, -94, 59, -111, -43, 9, -14, 27, 79, 92, 26, 120, -60, -120, -27, -26]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "93A23B91D509F21B4F5C1A78C488E5E6" + "'", str5, "93A23B91D509F21B4F5C1A78C488E5E6");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "93A23B91D509F21B4F5C1A78C488E5E6" + "'", str6, "93A23B91D509F21B4F5C1A78C488E5E6");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-84, 50, -2, -93, 75, -115, -45, -92, 2, 49, 42, 86, -34, -55, -28, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[87, 73, -79, -78, 125, 11, -80, -4, 38, 17, -66, -49, -93, 78, 49, 22]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[60, 113, 105, 13, 27, -57, 46, -83, 50, -9, 27, -73, 119, -25, -4, -98]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-84, 50, -2, -93, 75, -115, -45, -92, 2, 49, 42, 86, -34, -55, -28, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[8, 51, 13, -88, 106, -84, 60, -110, 99, 45, -27, -30, -127, 14, 29, 99, -48, -96, -125, -62, -24, 15, -25, 107, -39, -40, -65, 124, -84, 4, -76, -18, -43, 123, 13, -14, 68, -46, -52, 79, 44, -53, 107, 78, 49, 33, 33, 43, -118, 11, -128, 18, -91, 73, -63, 18, -2, -67, -22, -9, -13, -12, 12, -96, -97, -86, 110, -72, -87, -24, -89, 83, 100, -47, 112, -105, 97, 51, 0, -29, -58, 100, -79, -123, -85, -128, 67, -1, -65, -83, -32, 8, -9, -30, 117, -44, -84, 50, -2, -93, 75, -115, -45, -92, 2, 49, 42, 86, -34, -55, -28, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-119, -1, -117, -38, 99, 78, 76, -114, -122, -18, 3, -38, 85, -127, 125, 120, 39, 49, -105, 127, -89, 69, 59, -38, -58, 83, -59, 82, -27, 75, 23, 95, -84, 50, -2, -93, 75, -115, -45, -92, 2, 49, 42, 86, -34, -55, -28, -1]");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey85);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.Class<?> wildcardClass94 = byteArray93.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[124, 83, 98, 102, 85, -47, 92, 0, 55, 117, -12, -68, -62, -47, 93, -11]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-20, -94, -72, -93, -44, 59, 96, -34, 18, -103, 93, -63, -46, -85, -48, -53]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[110, 127, 73, -77, -42, -47, -33, 87, 12, 88, -10, -39, -115, -67, -15, 18]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[3, 104, -51, 80, -72, 112, -65, -23, -8, -24, 27, 27, 70, 119, -41, 95]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, -53, 86, 121, 37, -89, -4, 36, -126, -121, -20, -42, -33, 105, -30, -60]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-114, -71, -19, 48, 71, -117, 73, -84, -77, 36, -39, 76, 64, -114, -93, -40]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-60, -73, -25, -47, -123, 29, 41, 75, -19, 51, -12, -49, 57, 48, -112, 2]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-58, 68, -128, 115, -68, 113, 115, 71, -55, -122, 27, -91, 117, 95, 99, 18]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-38, -111, 72, -8, 83, -14, -96, 34, 107, -8, 17, 93, 109, -13, -74, 105, -95, -4, 102, -97, -62, -69, 73, 75, 106, -82, 48, 112, -72, -76, 123, 94, -60, -73, -25, -47, -123, 29, 41, 75, -19, 51, -12, -49, 57, 48, -112, 2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[39, 28, 110, 107, 84, 126, -1, 49, -98, 50, 2, 40, 33, 84, -109, 46]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-121, 24, 23, -44, -95, -35, 59, 104, 119, -119, -54, 123, 33, -72, -65, 70]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-111, -100, -59, 45, 48, 71, 4, -90, -38, -90, -78, 36, 57, 85, 8, -127]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-87, -121, -67, -69, -15, 37, -106, 85, -42, 100, -105, -4, -54, 11, -87, 15]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-78, -122, -93, -67, -116, 69, -69, -63, -90, -34, 85, 22, 124, -10, 111, 79]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-48, -40, 36, 62, 56, 70, 125, 20, 106, 80, 19, -4, 44, -80, 113, -56]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[99, 18, 19, 100, 116, -67, -71, 45, 7, 117, -107, -125, 69, -83, 6, -113]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[76, 106, 47, -66, -90, -101, 74, 113, 91, -43, 57, 26, -99, -119, -89, 84]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-114, 40, 103, 23, 7, 83, 22, 106, 110, 23, 108, 126, 14, -64, 68, -128, -19, 20, 74, 44, -100, 38, -68, -23, 22, 17, 86, 84, 124, -86, -55, -24, 99, 18, 19, 100, 116, -67, -71, 45, 7, 117, -107, -125, 69, -83, 6, -113]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[76, 106, 47, -66, -90, -101, 74, 113, 91, -43, 57, 26, -99, -119, -89, 84]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey26);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey26);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey26);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey26);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-16, 17, 42, -76, -128, -20, 121, 85, 68, 3, 88, -74, 30, 13, 75, -48]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[15, 109, 83, 92, -55, 24, 14, 46, -22, 109, 84, 97, 35, 68, 77, 110, -36, -47, 109, -26, 41, 89, 29, 25, -59, 87, 23, 124, 25, -10, 28, -52, 117, 88, 54, 99, 12, -80, 4, 19, 4, 12, 120, 71, 40, 16, 80, -81]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0F6D535CC9180E2EEA6D546123444D6EDCD16DE629591D19C557177C19F61CCC755836630CB00413040C7847281050AF" + "'", str5, "0F6D535CC9180E2EEA6D546123444D6EDCD16DE629591D19C557177C19F61CCC755836630CB00413040C7847281050AF");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-77, 107, -123, 26, -120, -93, -115, -107, -73, 50, -62, 97, 10, -84, -18, 48]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-85, 86, -1, 99, 96, 57, -125, 30, -126, 31, 44, 45, -30, -126, 121, 101]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-7, -61, -73, -24, -38, 114, -22, -93, -128, -118, 74, -12, -128, 58, -102, -59]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 115, 67, -74, 123, -37, 2, -49, -111, -25, 19, -56, -11, 79, 114, -86]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[21, -32, -43, -55, 34, 119, -79, 124, 109, 127, 5, -106, 30, -51, -12, -118, 123, -25, -4, 54, -104, 13, -43, 94, 18, -95, -37, 118, 96, 53, -56, -13, -7, -61, -73, -24, -38, 114, -22, -93, -128, -118, 74, -12, -128, 58, -102, -59]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[57, 70, 96, -90, -47, -25, 59, 31, 93, 8, 68, -77, 91, -33, -28, 29, -86, 126, -68, -105, 41, -85, 79, -51, -43, -93, 83, 36, -82, 96, -37, -34, -7, -61, -73, -24, -38, 114, -22, -93, -128, -118, 74, -12, -128, 58, -102, -59]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-127, 106, 81, 89, -90, -112, 62, -99, -126, 24, 126, 71, 49, -121, -104, 63, 18, 124, -108, -55, 50, 109, 33, -75, -74, -86, 123, -34, 30, 112, 109, 80, -97, -75, -120, -79, -115, 106, 44, -29, -89, -18, 64, -57, 13, -27, -95, -102, -27, -37, -115, -121, -75, -54, -23, -80, -84, -23, -74, 40, 83, -122, -17, -96, -38, 122, -44, 86, -70, -76, -91, -101, 70, -8, -13, 5, 24, 114, 17, -53, -15, 96, 38, -59, 12, -88, -89, 22, 121, -81, 50, 124, 42, 110, 15, 54, -7, -61, -73, -24, -38, 114, -22, -93, -128, -118, 74, -12, -128, 58, -102, -59]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[39, 82, -8, 92, -87, -102, 10, -114, -81, -95, -67, 56, 53, -68, 17, 34, 127, -88, -30, 46, 76, -18, -28, -33, -56, -81, -128, -74, -122, -102, -127, -81, -7, -61, -73, -24, -38, 114, -22, -93, -128, -118, 74, -12, -128, 58, -102, -59]");
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey21);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[73, -32, 118, -106, -89, -66, 44, 2, 66, 30, 34, 68, 58, -26, -43, -50]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-65, -86, -105, 2, 51, -71, -72, 89, -6, 46, -48, 18, -76, 61, -63, -120]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-65, -86, -105, 2, 51, -71, -72, 89, -6, 46, -48, 18, -76, 61, -63, -120]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[25, -16, -31, -19, 63, 90, 114, -115, 15, 90, 7, -86, -30, 84, -28, -61]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-65, -86, -105, 2, 51, -71, -72, 89, -6, 46, -48, 18, -76, 61, -63, -120]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-95, -62, 2, 94, -38, 6, 77, 84, 102, -63, 82, 51, 101, 70, 7, 112, -18, -73, -55, 48, -18, 31, 62, 33, 41, 53, 97, -20, -118, -71, -106, -75, 94, -37, 3, -128, -4, -70, 31, 54, 41, -54, -100, -36, -10, -95, -27, 118, 25, -37, 62, 40, -94, 116, 49, 120, -48, 115, -109, -87, 3, -94, -74, 125, -35, -108, -37, 103, 40, -73, 119, 28, -20, -7, 100, 50, -33, -88, -99, 75, 78, 74, -33, -97, 70, -104, 82, -122, -73, 36, -85, 71, -46, 18, 106, -11, 73, -32, 118, -106, -89, -66, 44, 2, 66, 30, 34, 68, 58, -26, -43, -50]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[3, 46, 127, -119, 29, 17, 123, 106, -86, 48, -7, -67, 99, -122, 49, 69]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[59, 122, -45, 53, 0, 85, 57, 78, -8, 127, 88, 48, -110, -41, -9, -86]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-59, 76, 108, 87, 1, 5, 112, 22, 39, -82, 93, -26, -18, 45, -85, -70, 49, 117, 18, -83, 3, -88, -114, 67, 92, -110, 121, 53, 63, -49, -45, -117, 3, 46, 127, -119, 29, 17, 123, 106, -86, 48, -7, -67, 99, -122, 49, 69]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[51, 70, -32, 14, -83, 18, 3, 70, -10, -13, 97, -86, 29, 5, -41, 82]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-52, 2, 10, -53, 42, -72, 30, 116, -47, 94, 10, -104, -9, -31, 62, -78]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[13, -4, -99, 125, 63, -9, 39, -19, -102, 9, 51, 45, 28, 36, 105, -79]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-86, -24, -53, -22, -118, -124, 60, 100, 24, 14, -44, 77, -127, -80, -33, 20]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[43, 122, -126, -102, -105, 41, 111, -102, 64, 77, 7, -76, 16, -26, 32, -28, 86, -105, 30, -79, -9, -67, 19, 85, -69, -37, 39, -108, -76, 81, 32, -65, 13, -4, -99, 125, 63, -9, 39, -19, -102, 9, 51, 45, 28, 36, 105, -79]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, -4, -99, 125, 63, -9, 39, -19, -102, 9, 51, 45, 28, 36, 105, -79]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-86, -24, -53, -22, -118, -124, 60, 100, 24, 14, -44, 77, -127, -80, -33, 20]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-56, 65, -114, -120, -109, 29, -24, 111, 45, 21, -36, -82, 122, -67, -120, -80, 43, -14, 87, 93, 106, -110, -119, -77, 58, -72, -105, -94, -100, 127, 81, 69, 13, -4, -99, 125, 63, -9, 39, -19, -102, 9, 51, 45, 28, 36, 105, -79]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey11);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-125, -34, -1, 53, -78, 58, 51, -115, -35, -13, -46, -95, 15, 85, -93, 89, -20, -75, 70, 27, 121, 22, -117, 70, -4, -113, 27, 85, 71, 73, 101, 17, 49, -108, 59, -20, 52, -87, -125, -102, 87, -120, -111, -43, 74, -25, 68, -24, 88, -10, 70, 91, -7, -52, 63, -42, -82, 50, -1, -99, -116, 109, 17, -51, -106, -106, -128, -11, 25, 2, 14, 69, 118, 10, 33, 97, 15, 30, 31, -27, -101, -7, 13, 79, -98, 58, 48, 39, -70, 6, -35, 56, -58, -25, -75, -68, 39, -75, 14, 12, -4, 2, -84, -80, 17, -31, 7, 20, 120, 23, -100, 54]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "83DEFF35B23A338DDDF3D2A10F55A359ECB5461B79168B46FC8F1B554749651131943BEC34A9839A578891D54AE744E858F6465BF9CC3FD6AE32FF9D8C6D11CD969680F519020E45760A21610F1E1FE59BF90D4F9E3A3027BA06DD38C6E7B5BC27B50E0CFC02ACB011E1071478179C36" + "'", str3, "83DEFF35B23A338DDDF3D2A10F55A359ECB5461B79168B46FC8F1B554749651131943BEC34A9839A578891D54AE744E858F6465BF9CC3FD6AE32FF9D8C6D11CD969680F519020E45760A21610F1E1FE59BF90D4F9E3A3027BA06DD38C6E7B5BC27B50E0CFC02ACB011E1071478179C36");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-55, -56, -96, 85, 82, -9, -113, -61, 44, 12, -27, 21, -75, 55, -112, -84]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-79, -115, -9, -126, -104, -47, -25, 78, -105, -46, -44, -126, -73, 4, -26, -89]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-79, -115, -9, -126, -104, -47, -25, 78, -105, -46, -44, -126, -73, 4, -26, -89]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-55, -56, -96, 85, 82, -9, -113, -61, 44, 12, -27, 21, -75, 55, -112, -84]");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey22);
        java.lang.Class<?> wildcardClass33 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[31, -123, 48, -65, 10, -59, 118, 22, -59, -52, -122, 106, 114, 103, -42, -55]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-87, -2, 84, -39, -116, -113, -37, 52, 11, 117, -65, -80, -29, 70, 79, -44]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[84, -79, -28, -80, -18, -123, -49, -63, 23, -47, 96, 99, 114, 36, 104, 0]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[48, 77, 1, 126, -65, 48, -26, -80, -102, 60, -121, -6, 76, -97, -97, 4]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[2, 126, 108, -120, -23, -103, -128, 54, -87, -69, 127, 33, -33, -40, -91, 71, -102, 102, 11, 95, 38, 11, -106, -85, -1, -59, 109, 125, -2, 7, 86, 24, 84, -79, -28, -80, -18, -123, -49, -63, 23, -47, 96, 99, 114, 36, 104, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-84, -86, -74, 57, 36, -53, 116, 107, 27, 103, -114, 13, 76, -40, -117, -75, 101, -49, 125, 67, 110, -122, -3, 39, -22, -1, -1, -88, 107, 48, 82, -65, 84, -79, -28, -80, -18, -123, -49, -63, 23, -47, 96, 99, 114, 36, 104, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-78, -109, 117, 21, -24, 48, -69, -73, -102, 43, -75, -72, -68, -25, -51, 126, 2, 48, 55, 113, 76, -117, 112, -34, -35, -114, -54, -87, -38, 77, -82, -57, 7, -54, 7, 88, 118, 74, 77, -99, 55, 26, -87, -108, 20, 126, 101, 106, 125, -103, -123, 110, -91, -4, -40, 44, -2, 56, 107, 63, 69, -80, -43, -108, 99, 94, 25, -102, -96, 12, 79, 105, 65, 82, -114, -72, 31, 117, 57, -32, 97, -67, 82, 79, 127, -123, -87, 100, -51, -8, -45, -120, -13, -11, 39, 5, 84, -79, -28, -80, -18, -123, -49, -63, 23, -47, 96, 99, 114, 36, 104, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[60, 51, 94, 69, 32, -112, -21, -60, -89, -113, -80, -5, -25, -104, 70, 98, -13, 55, -43, 23, 13, -38, 47, 94, 30, 56, -113, 87, 94, -124, 9, 49, 84, -79, -28, -80, -18, -123, -49, -63, 23, -47, 96, 99, 114, 36, 104, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[29, 80, -44, -75, -12, -90, -118, 38, -36, 4, -77, -17, -33, -58, -10, -86, -48, 36, 91, -18, 83, -40, 93, 36, -39, 86, -52, 6, -66, 3, -108, -64, -113, 97, 123, 80, 73, 115, -93, 3, -105, -33, -90, -29, 14, -45, -15, -75, 80, 30, 120, -126, 41, 69, 64, 94, -61, 90, -73, 61, -31, -38, -46, 2, 49, 75, 92, 44, 84, -104, 66, 113, -115, 55, 15, 122, -65, -73, 1, -123, 126, -45, -79, -8, 27, 23, 79, -29, -126, -120, 19, 12, 51, 36, 107, -30, 84, -79, -28, -80, -18, -123, -49, -63, 23, -47, 96, 99, 114, 36, 104, 0]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-121, 119, 96, 36, -19, -51, 56, -74, -97, -100, -100, -40, -44, -31, -73, -16]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.Class<?> wildcardClass28 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[44, -41, -17, 37, 10, -112, 110, 105, 113, -47, -34, 41, -90, 85, -101, 62]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[89, -38, 109, -7, 77, 33, -116, -128, 96, -119, 69, 73, 120, 97, -45, 93]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-96, 17, 32, -121, -107, 80, 11, -27, -88, 91, -46, 95, 13, 39, -56, 15]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[9, 6, 102, 61, -96, 11, -1, -92, 82, -57, 127, 116, -48, 13, -73, -59]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[14, -7, 114, -7, -50, -124, 17, 86, 56, 16, 48, -46, 118, 33, -64, -110, 82, 93, 32, -38, -86, 6, 96, -92, 82, 23, -22, -24, 111, 111, 6, -16, -96, 17, 32, -121, -107, 80, 11, -27, -88, 91, -46, 95, 13, 39, -56, 15]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-96, 17, 32, -121, -107, 80, 11, -27, -88, 91, -46, 95, 13, 39, -56, 15]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[9, 6, 102, 61, -96, 11, -1, -92, 82, -57, 127, 116, -48, 13, -73, -59]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0906663DA00BFFA452C77F74D00DB7C5" + "'", str27, "0906663DA00BFFA452C77F74D00DB7C5");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-74, 36, -30, 39, 74, -119, -121, -10, -12, -54, -126, 111, 18, 40, 102, 33]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, 11, 3, -73, -128, -39, -109, -98, -59, -106, -93, -3, 103, -37, -103, 61]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[9, 111, 12, 22, -88, 116, -21, -16, 67, -12, -93, 117, 81, -9, -16, 68]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-36, 2, -54, -116, -19, -34, 75, -76, 100, 69, 113, 68, 96, 15, 83, 6]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[48, -8, 82, -60, 6, 105, 113, -6, 105, -59, 30, 12, 34, 62, -90, 26, -9, 69, 49, -29, -96, 80, 26, -78, 4, -103, 124, -63, -19, 32, 56, -110, 9, 111, 12, 22, -88, 116, -21, -16, 67, -12, -93, 117, 81, -9, -16, 68]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-123, 77, 1, 63, 3, -36, 34, 42, 72, 74, -58, 53, -88, -55, 24, -115, 83, 36, 103, 2, 110, -124, -95, -78, -93, 113, 109, 77, -118, 65, 79, -12, 9, 111, 12, 22, -88, 116, -21, -16, 67, -12, -93, 117, 81, -9, -16, 68]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[71, 94, 25, 5, -56, -124, -119, 96, 17, 0, 6, -8, 89, 28, 117, -108, -88, 117, -92, -112, 76, 16, 77, -94, -91, -78, 82, 5, 125, -85, -81, -37, 27, -27, -102, -49, -39, 108, 74, -15, -22, 42, -90, 126, 85, -5, -122, -119, -109, -51, -103, 18, 3, -54, 69, -75, 48, -77, -9, -27, 5, -47, 88, -10, 74, 54, -85, 97, 49, -18, -112, 71, 53, -93, -26, 84, 80, 68, 91, -68, 24, 55, 101, 94, 78, 53, 15, 125, -59, 70, 39, 123, -127, -85, -87, -48, 9, 111, 12, 22, -88, 116, -21, -16, 67, -12, -93, 117, 81, -9, -16, 68]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-43, 36, -83, 111, 26, -1, 90, 87, 11, 79, 56, 25, -95, 34, -76, 28, 31, 11, 11, 7, 58, -62, -98, -10, -128, -95, 119, 91, 70, -41, -85, 39, 49, -121, 113, 45, -68, -46, -79, -64, 83, 59, 20, -56, 13, -128, -20, -19, -114, -50, -34, 119, -123, -57, 87, 108, -82, -28, -42, 70, 92, -2, -36, 10, 115, 117, -35, -20, 77, 73, 24, 121, -127, 57, 104, 103, -71, -28, -124, 32, 37, 40, -36, -81, -27, 54, 21, -128, -59, 69, -29, -8, 37, -102, -63, 111, 9, 111, 12, 22, -88, 116, -21, -16, 67, -12, -93, 117, 81, -9, -16, 68]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[9, 111, 12, 22, -88, 116, -21, -16, 67, -12, -93, 117, 81, -9, -16, 68]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey20);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey49);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey49);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-56, -89, 29, -7, -37, 125, 109, -38, 56, 95, -5, -72, 98, 48, -118, 118]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-125, -7, 57, -112, -49, -68, -85, -52, -122, 65, -22, 104, 119, 90, -28, -91]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[119, 82, 56, -82, 113, 39, 71, -16, -33, -90, 77, -60, -24, -112, 96, 116]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-94, -47, 66, 56, -40, 72, 72, -116, 7, 70, -77, -34, -63, 98, -114, 39]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[43, -9, -92, -64, 72, 7, -70, -7, 72, -6, -88, -86, 125, -42, 10, -15, 122, 7, -7, 46, 25, -48, -71, -118, -106, -14, 67, 49, 83, -127, 94, -123, 119, 82, 56, -82, 113, 39, 71, -16, -33, -90, 77, -60, -24, -112, 96, 116]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[119, 82, 56, -82, 113, 39, 71, -16, -33, -90, 77, -60, -24, -112, 96, 116]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-94, -47, 66, 56, -40, 72, 72, -116, 7, 70, -77, -34, -63, 98, -114, 39]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[77, 21, -107, -91, 41, 115, 57, -11, -22, -8, 99, 81, 6, 55, 100, -5, -46, -80, 48, -21, -16, 124, -110, -7, 107, -13, 97, -12, -23, 5, 104, -64, 119, 82, 56, -82, 113, 39, 71, -16, -33, -90, 77, -60, -24, -112, 96, 116]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-118, -77, 11, -8, -102, 99, 52, 28, -68, -63, 93, 58, 61, 3, 75, 46]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-28, 52, 68, 14, -52, -117, 63, -52, -96, 104, 57, -76, 31, -94, -56, -7]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-5, -7, 125, -95, 78, 63, -95, 70, 96, 99, 56, 107, 54, 59, -58, 59]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-27, -16, 109, 39, 91, -39, -53, 91, 116, 1, 70, 8, 124, -10, -110, -68]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-77, -15, -45, -43, 46, 41, 41, -72, -121, -99, 91, 46, 61, -5, 42, 106, 32, 8, -42, 40, -50, 60, 42, 49, -108, 117, 46, 21, 42, -112, 69, -60, -5, -7, 125, -95, 78, 63, -95, 70, 96, 99, 56, 107, 54, 59, -58, 59]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[93, -77, -69, 49, -19, -30, 108, 9, 121, -17, 48, 6, 63, 41, -32, -34, -36, -15, -52, -117, -72, 41, 10, 127, 92, -11, 37, 84, 86, 78, 8, -30, -51, 68, -85, 78, 79, 46, -53, 120, 109, 44, -50, -2, -29, 93, 62, -19, -23, 69, -114, -4, -106, 85, 42, 62, -68, 57, 75, 47, -60, -87, -11, 58, 39, -58, -110, -13, 59, -75, -96, 108, 18, 54, -83, -103, 62, -66, 114, -94, 68, -83, 59, 36, 94, 74, -16, 116, 103, 104, -16, 15, 49, 42, 118, -63, -5, -7, 125, -95, 78, 63, -95, 70, 96, 99, 56, 107, 54, 59, -58, 59]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[45, -101, 84, -58, 106, 87, 77, -98, -94, -120, 116, 79, -67, 68, 55, -33, 125, -13, 60, 123, -45, 25, -115, -40, 52, 14, 127, -89, -58, -88, 34, -88, -5, -7, 125, -95, 78, 63, -95, 70, 96, 99, 56, 107, 54, 59, -58, 59]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-48, -28, 3, -96, 3, 75, -95, -25, 81, 39, 97, 122, 19, -115, -33, -62, 106, -114, 100, 22, -29, -11, -95, 126, -100, 114, 19, 91, 80, 46, 83, 72, -53, -43, -107, -89, -97, -37, -44, 56, -104, 33, -80, 2, 17, -72, -83, -70, -61, 11, -8, 33, 79, -39, -89, -51, -116, -93, -110, -35, 9, -84, 94, 117, -57, 31, -109, 20, 65, -38, -114, -117, 92, -76, -53, 1, -112, 42, 13, -6, 121, -67, 1, 27, 50, 111, -124, -70, -80, -124, 8, 84, 119, 118, 25, -18, -5, -7, 125, -95, 78, 63, -95, 70, 96, 99, 56, 107, 54, 59, -58, 59]");
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.Class<?> wildcardClass7 = secretKey3.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[81, -31, 119, 38, -26, 73, 19, 48, 51, 13, 68, 59, -4, -82, -46, 102]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-20, 44, -36, 63, 33, -36, 106, 26, 20, 120, 14, -15, 83, 117, 93, -54]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[27, 20, 82, -120, 60, -109, 6, 20, 63, -125, 68, -119, -16, 1, 111, 115]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        java.lang.Class<?> wildcardClass15 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[95, -67, 100, 56, 112, 84, -60, 25, -119, 112, 4, 104, 99, -18, -110, -54]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[16, -78, -1, -75, 39, -99, -73, -105, -60, 38, 4, 91, -35, 6, -101, -36]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, -8, -97, -114, 48, -98, 67, 9, 4, 36, -47, 85, -19, -80, 76, 33]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[95, -67, 100, 56, 112, 84, -60, 25, -119, 112, 4, 104, 99, -18, -110, -54]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[39, -121, 56, -28, -15, -52, -12, 65, 119, -128, -123, -91, -84, 94, -25, 123, -28, -122, -109, 47, 28, 9, -105, -85, 73, -70, 59, 47, -45, -74, 55, -50, 95, -67, 100, 56, 112, 84, -60, 25, -119, 112, 4, 104, 99, -18, -110, -54]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-12, 89, -34, 111, 114, 32, -100, 95, -33, -102, 5, 100, -30, -48, 124, 101, 13, 37, 104, 24, -110, 104, 26, 89, 40, -63, 71, -55, -116, 58, -37, 34, 95, -67, 100, 56, 112, 84, -60, 25, -119, 112, 4, 104, 99, -18, -110, -54]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, -8, -97, -114, 48, -98, 67, 9, 4, 36, -47, 85, -19, -80, 76, 33]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        byte[] byteArray0 = null;
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-42, -80, 36, -92, 101, -107, -110, 29, 37, 19, -121, -72, 63, 120, -55, -118]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[71, -114, 28, 38, 122, -87, -44, 75, 36, 55, -84, -32, 113, -64, 107, -112]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[94, -41, -52, 87, 47, 40, -49, 94, 68, 60, 49, -91, -70, -72, 59, 102]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[3, 58, -30, -4, -49, 20, -124, -42, 28, 107, -126, 34, -128, -23, -52, 13]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-62, -47, -49, -46, -110, 84, 25, 19, -75, -43, 15, -28, -84, 123, 97, 36, 8, -65, -5, -68, 70, -75, 12, -89, -22, -101, 39, 67, 81, 49, -58, 2, 94, -41, -52, 87, 47, 40, -49, 94, 68, 60, 49, -91, -70, -72, 59, 102]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-118, 60, -17, 116, 16, -5, 82, -74, -78, -6, 100, 89, 14, 123, -108, 71, 108, -39, 1, -112, -46, -122, -54, -14, -73, 48, -15, 80, -81, -36, 81, 19, 94, -41, -52, 87, 47, 40, -49, 94, 68, 60, 49, -91, -70, -72, 59, 102]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -54, -111, 107, 72, 101, -18, -84, -33, -59, -9, -60, -12, 21, -48, 119, 97, 126, 32, 39, -23, -105, 71, -33, -68, 1, -16, 90, 74, -120, 93, -97, -91, 99, -28, 126, 39, 33, -115, 55, -15, -31, 21, -90, -54, -74, -54, 97, -72, 50, 42, 126, -125, -23, 35, -118, 42, 107, -119, -115, 107, 55, -102, 78, -30, 120, 104, 84, -113, -94, 60, -10, 80, -41, -34, 6, -29, 76, 97, 108, -84, -111, -84, 87, 72, 121, 15, -121, 77, -97, -65, 29, 70, 96, -100, 35, 94, -41, -52, 87, 47, 40, -49, 94, 68, 60, 49, -91, -70, -72, 59, 102]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[46, -95, 8, 47, 56, -54, -13, -76, 20, 64, -128, 72, 27, -39, 118, 95, 26, 71, 56, -42, -121, 20, 113, -110, 39, -60, 12, -68, -109, 68, -16, -87, -47, -73, -69, -32, 67, -95, -34, 4, -35, 83, -112, -128, 1, 105, -2, -99, -6, -72, -119, -32, -18, 61, -50, 42, -18, 82, -105, 1, 3, -110, 47, -126, 29, -9, 97, 113, -55, 54, -16, -3, -103, 0, 106, 50, 37, 106, -20, -121, -34, -47, -79, -43, -100, -1, -124, 95, -108, -85, 43, 32, -49, -64, -90, 87, 94, -41, -52, 87, 47, 40, -49, 94, 68, 60, 49, -91, -70, -72, 59, 102]");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        byte[] byteArray0 = null;
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey87);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey87);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey87);
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-47, 46, 17, -45, 15, -76, 22, -109, 119, 67, -117, 89, -118, -13, 12, -120]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 24, -67, -76, 24, 22, 41, 92, -47, -47, 119, -80, -59, 74, -65, 121]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[94, -14, 124, 81, -105, -103, 122, -107, -108, 122, -22, 57, 5, 53, -44, 77]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-119, -107, 102, -38, -49, 103, -4, -63, -99, -93, -62, 58, 101, 11, 108, 83]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[59, -37, -5, -27, 87, 22, -117, 74, -99, 119, 83, 56, 0, 71, 109, -63]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-117, 105, 57, 27, -46, 31, -77, -35, 49, 9, -51, 10, -68, 115, 61, -120]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[55, -107, 37, -5, -86, -59, -103, 64, 42, -92, -23, 110, -86, -57, 59, -89]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-2, 21, -36, -90, -37, 60, 14, -68, -71, -58, 18, -91, 10, 11, -47, -4]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[55, 0, 98, -118, -18, 87, 42, 69, -36, -23, -91, -56, -31, 51, -92, 32, 45, -103, 33, 42, -108, 47, 32, 40, 67, 104, 89, 82, 10, 27, 26, 110, 55, -107, 37, -5, -86, -59, -103, 64, 42, -92, -23, 110, -86, -57, 59, -89]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-22, -24, -52, -41, 92, 68, 8, 89, -126, 123, 73, -119, 101, -104, 33, -11]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-21, -65, 85, -98, 125, 125, 23, -25, 122, -32, 47, 86, 116, 122, 63, 61]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[59, 68, 60, 18, -30, 68, 39, 113, -35, 92, 39, -54, -71, -45, -35, 111]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[88, 5, -81, 53, 80, 42, -17, 48, -48, -92, 110, -17, -113, 62, -60, -128]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[120, 36, 87, 123, -18, -61, -117, -99, -87, 107, 105, -124, 122, -118, -101, -107]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[42, -70, -20, 98, 57, 44, -40, 69, 23, -67, 4, -120, 23, 104, -99, 97]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[8, 66, 64, -50, 81, -85, -64, 102, 59, 34, 6, -62, -32, -79, 30, -29]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[85, -125, 83, -128, -46, 46, 24, 29, 54, 68, 8, 60, 0, 58, -70, -38]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[2, -105, -42, 95, 54, -124, 84, -12, 49, -64, 74, -56, -88, -123, 66, 54, -1, -42, -22, 52, -47, -77, -90, 81, 91, 105, -58, -88, 106, 26, 66, -101, 8, 66, 64, -50, 81, -85, -64, 102, 59, 34, 6, -62, -32, -79, 30, -29]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[22, 42, -104, -17, -100, 54, 35, 38, -122, 6, 87, -31, -116, -64, 54, -42, -53, 126, 28, -93, -85, 43, -46, -121, 76, -124, -51, -51, -32, -2, 56, 73, 8, 66, 64, -50, 81, -85, -64, 102, 59, 34, 6, -62, -32, -79, 30, -29]");
        org.junit.Assert.assertNotNull(byteArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[113, 79, -12, -53, 61, -20, -122, -27, -106, 111, -119, 114, 103, 81, 20, 11, 39, 39, -114, -60, -5, 85, -83, 68, 26, 19, -103, -68, 80, 54, 36, 106, 122, -97, -25, 49, 50, -75, -66, -90, -116, 123, -101, 56, -63, 104, -9, -23, 12, -120, -124, -9, 85, 10, -37, -75, -68, 50, -81, 82, -94, -31, 25, 58, -108, 106, -14, -109, -79, -33, -56, 64, -85, -2, 109, -109, -55, 124, 6, 110, 121, -118, -71, 41, -59, -34, 33, -118, 82, -111, 44, 31, 67, 21, 34, 120, 8, 66, 64, -50, 81, -85, -64, 102, 59, 34, 6, -62, -32, -79, 30, -29]");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey4);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey12);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[106, -91, 38, -103, 43, -13, 77, -109, -90, 58, 81, -54, -121, -96, -11, -18]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[111, -101, 11, 109, -62, 109, 55, 125, -94, -75, -92, -103, -80, -114, -45, 125]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[56, -91, 101, -1, -102, 76, -126, -85, 71, -38, 93, -18, 49, 108, 2, 96, 47, 114, 109, -49, -79, 45, 13, -94, 14, 81, -47, -53, -10, 10, 122, 56, 10, -98, -127, 93, 56, -20, 89, -14, -67, -9, 101, 105, 76, -86, -56, 7, 111, -109, -22, 71, 96, -121, -53, -105, 62, 38, -121, 91, 40, -112, -42, 87, 124, -74, 17, -105, -17, -6, 124, 1, -4, -43, -44, -72, -40, -72, -41, 32, 84, -32, 117, -26, 62, -62, 29, 66, 88, 15, -78, 20, -30, 43, -72, -102, 106, -91, 38, -103, 43, -13, 77, -109, -90, 58, 81, -54, -121, -96, -11, -18]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-108, 110, 113, 57, -44, -58, -105, -90, -123, 87, -45, 90, -55, -66, -115, 47]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-17, 111, -30, 106, -110, 108, 89, -59, -12, -27, 89, 34, 23, -91, 88, 85]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-36, -68, -29, 119, -23, 57, -37, -73, -27, 113, 0, -81, -41, 12, -41, -79, -125, -50, -128, -1, 6, -122, 88, 36, 39, -39, 55, -84, 126, -5, -110, 57, 100, 45, -25, 39, -49, 104, 7, -115, -44, 4, -27, 88, 109, 32, 111, -121, 35, -38, -61, -37, -58, -110, -97, 107, -125, -28, -72, 8, 93, 38, -57, 95, 14, -125, -81, 87, -126, -64, -76, -19, -26, -79, -54, 15, -45, -29, 20, 49, 90, -10, 73, 30, -4, 29, 82, 109, 93, 30, 98, -8, -56, 3, -111, 83, -108, 110, 113, 57, -44, -58, -105, -90, -123, 87, -45, 90, -55, -66, -115, 47]");
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[71, 2, 67, 33, 53, 80, 4, -92, 70, -111, 88, 30, -86, -52, -128, -89]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-93, -10, 19, -126, 6, 27, -63, 33, 76, -47, 70, -122, 113, 79, 114, -122]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, 28, -37, 54, -104, 26, -63, -15, 31, -27, 3, 44, 76, -54, -93, -34]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[71, 2, 67, 33, 53, 80, 4, -92, 70, -111, 88, 30, -86, -52, -128, -89]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey28);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[106, 67, -52, 102, -97, -5, 114, 44, -118, 63, 16, 78, 56, 4, -66, -70]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[82, 50, 35, 77, 50, 42, 42, -107, -86, -28, -128, -33, 58, -17, -53, -81]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[68, -85, -39, 124, -4, 14, 123, -85, 35, -103, -46, -60, -18, -56, -35, 50]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "44ABD97CFC0E7BAB2399D2C4EEC8DD32" + "'", str7, "44ABD97CFC0E7BAB2399D2C4EEC8DD32");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "44ABD97CFC0E7BAB2399D2C4EEC8DD32" + "'", str8, "44ABD97CFC0E7BAB2399D2C4EEC8DD32");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "44ABD97CFC0E7BAB2399D2C4EEC8DD32" + "'", str9, "44ABD97CFC0E7BAB2399D2C4EEC8DD32");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[49, -104, 29, 103, 88, 102, 16, -70, -36, 61, 86, -71, -15, 112, 109, -96]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[92, -54, -106, -25, 20, -50, -25, -95, -78, 42, 93, 38, -102, 14, -65, -26]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[75, -80, -116, -47, -88, 82, -104, 24, 46, 37, -49, 105, 72, 97, -31, -74]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[19, -52, 95, 7, 73, -123, 45, 71, 112, -93, -108, -123, 106, -25, 23, 118]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, -125, -28, -32, 118, -102, -22, 125, -17, 11, -19, -89, 106, 121, 19, 109, 59, 114, 13, -115, -13, -127, 8, -16, 4, 18, 23, -46, 20, 8, 4, -59, 75, -80, -116, -47, -88, 82, -104, 24, 46, 37, -49, 105, 72, 97, -31, -74]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-29, -12, 10, -21, 87, -37, 107, 14, 36, 102, -11, 3, 18, -34, 120, -90, -33, -25, 72, 28, 11, -69, -126, 72, 41, -15, 15, -15, -71, 21, -17, -32, 75, -80, -116, -47, -88, 82, -104, 24, 46, 37, -49, 105, 72, 97, -31, -74]");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey28);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -82, 85, 79, -108, -7, -4, 74, 7, -81, -38, -118, 51, 116, 12, -63]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-107, -31, -68, 69, 59, -56, 70, 63, 43, 108, 15, -56, -79, 29, 55, -57]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, -17, 76, 40, -114, 114, 77, 53, -82, -104, -2, -79, -92, -43, 94, -9]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[58, -70, -64, 87, 13, 11, -98, -52, 109, -56, 23, -88, 127, 100, -99, 48]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[113, 37, -97, 126, 106, 40, -32, 96, 120, 116, 83, 71, -127, 50, 37, -68, -55, 99, -49, 25, 3, -97, -85, 63, -84, -5, -99, -48, -52, 27, -77, 67, 76, -17, 76, 40, -114, 114, 77, 53, -82, -104, -2, -79, -92, -43, 94, -9]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, -17, 76, 40, -114, 114, 77, 53, -82, -104, -2, -79, -92, -43, 94, -9]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "4CEF4C288E724D35AE98FEB1A4D55EF7" + "'", str25, "4CEF4C288E724D35AE98FEB1A4D55EF7");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-103, 94, -9, 93, 12, -14, 82, -36, 40, 62, 122, -18, 16, 2, 105, 30]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-98, 58, 76, -40, -63, 46, -119, -32, -6, -70, -34, -22, 59, -99, 127, 57]");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey17);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-69, 2, -85, 71, -78, 42, -25, 98, 103, -29, 31, 76, 119, 25, -90, 98]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-112, 23, 2, -96, 110, 24, 24, 7, -19, 85, -12, -75, -51, 112, 69, -115]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-85, 8, 123, 44, 43, 85, -26, 2, 98, -45, -57, 36, 52, -65, 105, -107]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-7, -45, -49, 42, -50, -48, 77, -92, 3, -55, -127, 67, 119, -70, -113, 87]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-3, -78, -120, -5, 56, 18, -7, -6, -62, 44, 44, 74, 33, -1, 72, -89, -25, -67, -112, -123, 1, 64, -48, -88, 84, 29, 30, 101, -24, -90, 119, 96, -85, 8, 123, 44, 43, 85, -26, 2, 98, -45, -57, 36, 52, -65, 105, -107]");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[83, -37, 0, 86, -82, 42, 24, -100, 16, -119, 67, 44, -42, 57, -62, 125]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[32, 9, -110, 86, 7, 78, -65, 114, 28, -20, -12, -15, 51, 75, -67, -29]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-117, -71, 40, -13, -16, 44, -90, -14, -89, 71, 88, 116, -90, -62, -112, -42]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[11, 43, 83, -123, -125, 80, 2, -5, -27, 1, 14, 99, -21, 81, -105, 60, 101, -7, 5, 44, -95, -89, -2, 127, -97, -36, -102, -89, -113, -128, 23, -29, 83, -37, 0, 86, -82, 42, 24, -100, 16, -119, 67, 44, -42, 57, -62, 125]");
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey30);
        java.lang.Class<?> wildcardClass38 = secretKey30.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[61, -82, -13, -82, 18, -94, -22, -19, 103, 37, 110, 107, 54, 123, 39, 85]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[56, 68, -87, 73, 118, 69, -79, -9, 47, -99, 95, 16, 104, 94, -97, -70]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[31, -48, -107, -16, 75, -67, -108, -109, -106, -108, 12, -21, 98, 13, 37, -102]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[23, 104, -79, -43, 120, 99, -97, 120, -103, 75, 27, -3, 94, 45, 63, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[14, 85, -21, -68, 95, -55, 5, -56, -128, 101, -40, -36, 64, 12, 53, 127]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-128, -71, 32, 26, 84, 120, -57, -5, -39, -85, 93, 88, -92, -48, 109, 122]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-128, -71, 32, 26, 84, 120, -57, -5, -39, -85, 93, 88, -92, -48, 109, 122]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[38, -78, -36, 6, 63, 95, -90, -32, 10, 16, 116, 7, 47, 2, -24, -125, -117, 2, 91, -65, -66, 78, 117, 117, 15, -52, 106, -52, -84, -70, -41, -119, 14, 85, -21, -68, 95, -55, 5, -56, -128, 101, -40, -36, 64, 12, 53, 127]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-8, 7, 0, 43, 28, -63, -104, -116, -124, -37, -50, 11, 122, -54, -124, 17]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-124, 111, -70, -49, 91, -30, 55, -49, 126, 123, -122, 85, 14, 75, 46, -22]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-38, 83, 124, -10, -105, -101, 0, -88, 55, 25, 45, 35, 113, -95, 121, 20]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-67, 88, -81, 76, 92, -119, 68, 80, -107, 76, -11, 44, 73, -40, -118, 41, -45, -55, 21, 109, -10, -83, 100, -124, 75, -17, 43, 10, -6, 80, 68, 122, -8, 7, 0, 43, 28, -63, -104, -116, -124, -37, -50, 11, 122, -54, -124, 17]");
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey53);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey53);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey53);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey64);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey64);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[34, 92, -86, -72, -16, 112, 32, -2, 118, -13, 124, 100, 105, -65, -2, 38]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-105, 121, -15, 114, -123, 88, 37, -63, 39, -52, 118, -95, -87, -22, 27, -26]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-110, 98, -32, 63, -89, -47, -25, 65, 70, 73, -25, -75, 18, 118, 63, 117]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[34, 92, -86, -72, -16, 112, 32, -2, 118, -13, 124, 100, 105, -65, -2, 38]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-116, -59, -78, -36, 106, 112, 21, -120, -67, 110, -77, 113, 90, 83, 79, -97, -69, 99, -60, -93, 124, 78, 26, -88, 111, -26, 105, 107, -122, -85, -27, -26, 34, 92, -86, -72, -16, 112, 32, -2, 118, -13, 124, 100, 105, -65, -2, 38]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[42, 39, -9, -80, -55, -10, -42, 73, -115, 21, 119, -31, -29, -41, -98, -65, -24, 13, 66, -41, 71, -65, -109, -12, -99, 115, -76, 8, -62, -53, 123, 52, 34, 92, -86, -72, -16, 112, 32, -2, 118, -13, 124, 100, 105, -65, -2, 38]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-110, 98, -32, 63, -89, -47, -25, 65, 70, 73, -25, -75, 18, 118, 63, 117]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[78, -9, 21, -40, -18, 14, 39, -125, -125, -66, 96, -15, 97, -98, 102, 83]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[36, -80, -94, 63, -119, 66, 77, -111, -100, 73, 62, -104, -14, -120, -7, 111]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[86, 18, 20, -80, -56, -55, -123, -68, 98, -33, 19, -111, 33, -20, -47, 35]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[84, -73, 92, 95, 57, -48, 119, -5, -27, 79, 76, 67, -11, 25, -60, -103]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-5, -8, 42, 72, -74, 46, -42, -35, -37, -45, 117, -9, -18, -32, 32, 33]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[29, -123, -111, -28, -51, 49, 114, 64, 52, -30, 72, -103, 28, 114, -113, 31]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-17, 69, -68, 61, 27, -51, -127, 27, -126, -47, -91, 35, -68, 0, 96, 77]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-103, -2, -72, -100, -54, -39, 98, 17, -124, 69, -58, 59, -127, -125, 92, -91]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[20, -72, 19, 48, -6, -66, 38, -1, -116, -30, 115, -52, -71, -85, -116, 68, 50, 123, 73, 67, 49, 2, 53, -63, 58, 63, 29, 21, 7, -68, -50, 112, -17, 69, -68, 61, 27, -51, -127, 27, -126, -47, -91, 35, -68, 0, 96, 77]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-49, -48, 13, -77, -26, -54, -13, -65, 26, -127, 88, 119, -105, 44, 41, 107]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[79, 95, 98, -40, 125, -35, -5, 112, 22, -70, 93, -102, -79, -128, 24, -45, 54, 115, 80, 110, 77, -100, 28, -68, 66, 118, -49, 107, -18, 116, -120, 31, 71, 54, 81, 38, 70, -36, 2, -121, -122, -99, -109, 35, 27, 114, -107, -17]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey2);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey8);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, 59, -74, 45, -10, 42, -18, -101, 57, 19, -112, 104, -97, -95, -42, -127]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[125, 121, -103, -77, 54, 116, 77, 12, -83, 67, 127, 114, -83, 64, -32, 61, 71, -6, -127, 51, 17, 37, -33, 125, 8, 52, 101, -120, -10, 62, -61, 56, -77, -26, -71, 81, 112, 74, 39, -91, -1, 68, -13, 43, -59, 126, -32, -74, 12, 15, -121, -84, -122, -103, -15, 82, -96, -112, -51, 81, 25, -111, -14, 25, -25, 80, -45, 115, -98, 2, -71, -45, 83, -94, 113, -100, -128, -64, 115, 20, -8, -98, -125, -110, 64, -105, -16, -40, 46, -20, -4, -28, -119, 64, 14, -99, -54, 59, -74, 45, -10, 42, -18, -101, 57, 19, -112, 104, -97, -95, -42, -127]");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-32, -92, -121, 52, 10, -71, -116, 29, -4, -81, -128, 49, -52, -107, 95, -69]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-98, 64, 60, -110, -16, 62, 100, 120, 95, -65, 45, 32, -47, -81, -21, -95]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[120, -98, -57, -8, -101, -41, 85, 62, -34, -48, -53, 68, -4, 35, 69, -31, 126, 94, -80, 102, -64, -32, 111, -43, -22, 94, -7, 120, 14, 68, 108, -19, -32, -92, -121, 52, 10, -71, -116, 29, -4, -81, -128, 49, -52, -107, 95, -69]");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey23);
        java.lang.Class<?> wildcardClass34 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-94, 100, 106, -2, 86, 9, -112, -112, -77, 99, 85, -92, -70, 82, 27, 17]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-80, 26, 102, -98, 61, -121, -119, 114, -87, 48, -22, 2, -31, 35, 119, 60]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[89, 29, 3, -6, 54, -100, -1, 11, -108, -56, 75, -69, -99, -62, 102, -99]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-32, -123, -113, -52, 127, 85, -109, 120, -57, -72, -30, 106, 121, -42, -57, 6]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-97, -116, 78, 126, -27, 97, 51, 84, 10, 36, 108, 37, 29, 10, -54, -94, 119, -82, -81, 126, 30, -89, -106, 112, -2, 72, 65, 20, -86, 91, -26, 24, 89, 29, 3, -6, 54, -100, -1, 11, -108, -56, 75, -69, -99, -62, 102, -99]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-23, -82, -54, 43, 25, -67, 48, 111, -67, -30, 8, 13, 66, 33, -35, -56, 93, -90, -25, 40, 117, 84, 20, -64, 33, -33, -3, 45, 91, -31, 47, -106, 89, 29, 3, -6, 54, -100, -1, 11, -108, -56, 75, -69, -99, -62, 102, -99]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-7, 69, 98, -90, 124, -8, 41, -50, 84, 17, -67, 76, 9, -108, -24, 110, -74, -70, 12, 30, 5, 70, -95, -122, -83, -25, -64, 30, -96, 59, -72, -127, -114, 24, 53, -59, 120, -39, 100, -108, -101, 127, -123, 37, 0, 10, 71, -33, 61, 102, 48, -11, -38, -46, -110, 74, 90, 122, -85, 87, -6, 124, 127, 38, 93, 10, -50, 37, -75, -71, 17, 48, -116, 13, 68, 73, -79, 97, -116, 83, 121, 79, -56, 53, 37, -9, -34, 22, 38, 69, -16, 83, -102, -114, -102, 96, 89, 29, 3, -6, 54, -100, -1, 11, -108, -56, 75, -69, -99, -62, 102, -99]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-83, -81, 9, 120, 102, -19, 30, 81, -85, 38, -57, -113, -57, 37, -59, 126, -79, -113, -24, 90, 125, 2, -124, -31, -80, 68, -17, 19, -120, 125, 107, 4, 89, 29, 3, -6, 54, -100, -1, 11, -108, -56, 75, -69, -99, -62, 102, -99]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[41, -54, 107, -18, -45, 12, -65, -80, -5, 16, -52, -61, 48, -89, -93, -53, 105, -118, -70, -89, -60, 92, -26, -116, -26, -67, 54, 71, -41, -50, -48, -13, -56, -3, -22, 55, -68, -72, 85, -4, 46, -74, -119, 27, 118, -13, -81, -85, 24, -65, -15, 54, -96, 1, 71, 30, -116, 100, -43, 85, -87, -99, -64, -24, -26, 52, 70, -112, 54, -3, -28, 28, 64, 82, -127, 122, -112, -101, -28, -103, -59, 0, 29, -65, 12, -95, 67, 55, 71, 98, 26, -64, -23, -44, -1, 84, 89, 29, 3, -6, 54, -100, -1, 11, -108, -56, 75, -69, -99, -62, 102, -99]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[94, 86, 101, 70, 52, 71, 65, -8, -4, -119, -47, 3, -102, -127, -38, 18]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-101, -60, -125, -72, 62, 74, -56, -61, -41, -29, -4, -61, 42, 18, -27, 44]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-59, 86, 88, 127, 21, 33, 124, -37, 31, 53, -69, 67, -21, 126, -64, -4]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-97, 89, 114, -33, -86, 50, 0, -58, -22, -81, 22, 16, 91, 49, 25, -25]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[12, -109, -42, 25, 31, 70, -58, -106, 8, 60, -127, 47, 110, -71, -8, 14, -126, 81, -113, -117, -27, 125, 45, -18, -88, 78, -45, 47, 14, 87, 34, -40, -59, 86, 88, 127, 21, 33, 124, -37, 31, 53, -69, 67, -21, 126, -64, -4]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[23, 60, -75, -95, -111, -2, 123, -87, 122, -88, -27, -5, 61, -114, 5, 70, -51, -61, -22, 96, -47, 28, -111, 16, -73, -3, 64, 11, -107, 92, 85, -38, -59, 86, 88, 127, 21, 33, 124, -37, 31, 53, -69, 67, -21, 126, -64, -4]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[43, -63, 104, 22, -88, 1, -32, -12, 26, -46, 125, 120, 60, 92, 62, 59, 108, -33, 2, -85, 3, 64, 16, 32, 35, -35, -97, 84, -49, 73, -32, -61, 94, -50, 107, -34, -114, 108, -42, 33, -59, -122, -51, -115, -114, 41, 27, -23, 6, -88, -8, 80, 8, -50, -74, 23, 98, -14, -123, -108, -10, -7, 14, 75, 23, 59, 25, 59, 97, -52, -3, -9, 114, 46, 80, -82, -114, -39, 64, 11, -21, -88, 126, -25, -111, -124, 56, -10, 111, -118, -36, 59, 15, 16, 56, 1, -59, 86, 88, 127, 21, 33, 124, -37, 31, 53, -69, 67, -21, 126, -64, -4]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-44, 97, 46, -29, -50, -85, 23, -64, 63, 4, 23, 57, -113, -2, -47, -86, 12, 73, 103, 126, 35, -39, 64, 1, -117, 31, 3, 5, 76, 122, 80, -36, -59, 86, 88, 127, 21, 33, 124, -37, 31, 53, -69, 67, -21, 126, -64, -4]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        java.lang.Class<?> wildcardClass35 = secretKey23.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[48, -67, -71, -100, -109, 76, -59, -95, 104, 67, 59, 103, 41, -54, 22, -125]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-59, -8, 41, -79, 5, 112, 9, 38, -19, 69, -61, 46, -34, -95, 75, -14]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[6, 111, 46, -17, -53, -64, -109, -35, -122, -83, 28, -109, 71, 15, 29, -119]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[64, -112, 32, 59, -66, -125, -115, 60, 87, 107, 124, -29, 107, 93, -108, -69]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-22, 15, -112, -116, 56, 63, 112, -32, 25, 32, -65, 97, -119, -56, -89, -56, 99, -119, 49, 6, 117, -3, 15, -81, 23, -39, 16, -67, 66, -12, -66, -65, 6, 111, 46, -17, -53, -64, -109, -35, -122, -83, 28, -109, 71, 15, 29, -119]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[90, 38, 122, -18, -23, -50, -69, 16, -116, 56, -52, -116, -91, 66, -52, -94, 111, 20, -94, -30, -11, 84, 84, -86, -6, -109, 10, -127, -92, -103, -42, -3, 6, 111, 46, -17, -53, -64, -109, -35, -122, -83, 28, -109, 71, 15, 29, -119]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[24, 93, -51, 12, 56, -112, 104, 107, -102, 68, -12, 82, 53, 52, -22, -80, -96, 13, 34, -21, -8, -46, -122, -61, 119, 115, 4, 91, 19, 120, -46, 106, -123, -98, 104, -96, 22, 117, 52, -60, 97, -100, 47, 103, 20, -1, -41, 83, 111, 17, 25, -23, 116, -9, -50, -101, -46, -128, 66, 85, -90, -125, 105, 1, -38, 32, 63, 21, -46, -15, 51, 64, -14, 79, 56, -52, 35, -81, -72, 121, -44, -103, -36, 42, -10, 87, -56, -75, 35, -68, -86, -113, 16, -63, 101, 98, 6, 111, 46, -17, -53, -64, -109, -35, -122, -83, 28, -109, 71, 15, 29, -119]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-57, -13, 102, -104, 30, 91, -91, 114, 103, 25, -32, 29, -34, -116, -87, 20, -73, 24, 55, -122, 15, -30, 111, -114, 13, 53, -80, 111, 123, 120, -18, 27, 6, 111, 46, -17, -53, -64, -109, -35, -122, -83, 28, -109, 71, 15, 29, -119]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[24, 93, -51, 12, 56, -112, 104, 107, -102, 68, -12, 82, 53, 52, -22, -80, -96, 13, 34, -21, -8, -46, -122, -61, 119, 115, 4, 91, 19, 120, -46, 106, -123, -98, 104, -96, 22, 117, 52, -60, 97, -100, 47, 103, 20, -1, -41, 83, 111, 17, 25, -23, 116, -9, -50, -101, -46, -128, 66, 85, -90, -125, 105, 1, -38, 32, 63, 21, -46, -15, 51, 64, -14, 79, 56, -52, 35, -81, -72, 121, -44, -103, -36, 42, -10, 87, -56, -75, 35, -68, -86, -113, 16, -63, 101, 98, 6, 111, 46, -17, -53, -64, -109, -35, -122, -83, 28, -109, 71, 15, 29, -119]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[111, -15, -11, 11, -72, 94, -91, -40, -50, 51, -14, -9, 93, -11, -103, 94, -100, -121, -9, 52, 64, 120, -62, -49, 83, 37, 78, -8, -37, -24, 32, -126, 115, -46, -82, 1, 87, -99, -124, -90, -39, -50, -2, 123, -89, -107, -91, 114, -46, -106, -45, 25, 52, 5, 57, -70, 48, -117, -40, 114, 44, 6, 52, 19, -50, -79, -23, 45, 7, 15, -36, 64, -22, -114, 98, -9, 90, 95, -120, -68, -86, -63, 54, -37, 90, 1, -63, 89, -15, -82, -70, 56, -8, -33, -93, -36, 6, 111, 46, -17, -53, -64, -109, -35, -122, -83, 28, -109, 71, 15, 29, -119]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[6, 111, 46, -17, -53, -64, -109, -35, -122, -83, 28, -109, 71, 15, 29, -119]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[65, -68, -118, 2, -33, -12, -112, -102, -82, 127, 75, 108, -69, -50, 5, 15]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-60, -25, 81, 122, -57, -28, 97, -96, -98, 109, 59, -90, 64, -42, -47, -30]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-123, 13, 33, 56, 43, -82, 111, 6, -120, 61, -32, -77, -82, -106, -40, -59]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-68, 93, -18, 45, -26, 7, 93, 0, -15, -14, 19, -12, 117, -58, -60, -122]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[95, 5, 87, 108, 71, -104, -91, -97, -70, 62, 57, -15, 38, 73, 67, -59, 77, 17, -90, -20, 31, 64, -115, -53, 52, 67, -24, 63, -23, -47, 88, 117, -123, 13, 33, 56, 43, -82, 111, 6, -120, 61, -32, -77, -82, -106, -40, -59]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[44, -20, -93, -9, -113, -87, 75, -41, -109, -80, 123, -9, -126, -8, 126, 79, -79, 1, 68, 79, 76, -97, -53, 62, 5, 111, 113, -109, 26, 48, 64, 54, -123, 13, 33, 56, 43, -82, 111, 6, -120, 61, -32, -77, -82, -106, -40, -59]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-117, -8, 40, 46, -12, 78, -115, 22, 73, -123, -97, 107, 10, -51, -110, 93, 71, 112, 50, -101, -53, 2, 90, 96, -95, -119, 54, 57, -106, -43, 19, 51, -36, -90, 69, -12, 101, 53, 74, 102, -50, -49, 81, -33, -50, -113, -120, 40, 125, -61, -111, 40, -34, 41, 19, 62, 116, 85, 119, -125, -86, -76, 63, 116, -127, -88, -37, -109, -33, 30, -14, -56, 116, -44, 43, -75, -67, -63, -100, 20, 47, -83, 33, 22, -8, -72, -17, -26, -121, 45, -25, 23, 9, -63, 62, 8, -123, 13, 33, 56, 43, -82, 111, 6, -120, 61, -32, -77, -82, -106, -40, -59]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[28, -27, 78, -94, 75, 111, -67, 88, -111, -36, -50, 70, -63, 53, 28, 126, 101, 61, -15, 35, 3, 12, -27, 32, 39, 102, -94, -51, 10, -24, -119, -85, 28, 9, 55, -83, -75, 25, 127, 113, 54, 25, -43, 2, -31, -46, 106, -80, 20, 106, -123, -123, -118, -33, -46, 54, -126, 76, -83, -55, 31, 4, 116, -113, 93, 118, -6, 90, -52, -69, 117, 99, 27, 20, 49, -44, -94, -80, 88, 87, -34, -107, 19, -124, -43, -9, 89, -50, 17, -116, 127, 114, 46, -44, 98, -99, -123, 13, 33, 56, 43, -82, 111, 6, -120, 61, -32, -77, -82, -106, -40, -59]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[29, 123, 114, -125, 50, -61, -7, 86, 112, 31, -27, -82, -37, -112, 18, -123]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[64, -68, -77, -19, 85, -111, 109, -46, 84, -22, 120, 16, 77, 41, -29, 9]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-87, 22, -114, 22, -56, 53, 117, -28, -39, 11, 27, -27, -90, 49, 113, 98]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-78, -30, -38, 99, -67, 72, -101, 53, 125, 29, 112, -33, -100, -27, -32, 58]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-70, -42, -112, 72, 100, -12, -78, -44, 1, 32, 35, 104, 81, 3, -120, -104, 75, -66, 126, -122, 22, -24, -43, -49, 95, 91, 117, 94, 11, -123, -14, 69, -87, 22, -114, 22, -56, 53, 117, -28, -39, 11, 27, -27, -90, 49, 113, 98]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-70, -42, -112, 72, 100, -12, -78, -44, 1, 32, 35, 104, 81, 3, -120, -104, 75, -66, 126, -122, 22, -24, -43, -49, 95, 91, 117, 94, 11, -123, -14, 69, -87, 22, -114, 22, -56, 53, 117, -28, -39, 11, 27, -27, -90, 49, 113, 98]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-87, 22, -114, 22, -56, 53, 117, -28, -39, 11, 27, -27, -90, 49, 113, 98]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[74, -68, -8, 56, 102, -7, 5, -58, 57, -70, 47, -107, -40, 116, -49, -61]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-46, 88, -61, 90, -68, -1, 118, -59, -77, -87, 22, 100, 64, 51, 50, 82]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-53, 16, -21, -122, 44, 42, -66, -95, -89, 59, -72, 62, -28, -22, -9, -13]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-41, -86, -127, 125, -62, 53, -97, 106, 56, 121, 40, -47, -64, 99, 0, 19]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-33, -104, -112, -117, 36, 16, 62, 16, 109, 53, -84, 75, 37, -32, 28, 5, -100, 84, -59, -94, -25, 1, -63, 124, -22, -127, -5, 107, -6, -39, 59, -75, -53, 16, -21, -122, 44, 42, -66, -95, -89, 59, -72, 62, -28, -22, -9, -13]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[40, 99, -3, 111, 41, -45, 115, 70, -75, -36, 13, 44, -95, 45, -68, -126, 9, 34, 47, 54, 61, 119, 42, 84, -114, 94, -65, 71, -37, 75, 79, -121, -53, 16, -21, -122, 44, 42, -66, -95, -89, 59, -72, 62, -28, -22, -9, -13]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-108, 73, -12, 52, -79, 95, 95, 91, 17, -94, 52, -80, 101, -120, -100, 0, 115, 34, -51, 88, -61, 60, -20, 120, -48, -128, -23, -115, -60, -125, 61, 91, 51, -65, 123, -57, 98, -12, -85, -31, -36, -77, -12, 40, 31, 73, 5, 94, -114, 114, 120, -71, -42, -38, -111, 20, -128, 88, 25, 35, 54, -11, 19, 27, 11, 71, 50, -107, 109, -86, -101, 10, 124, 92, 73, 109, -22, 34, 60, 125, -94, -98, 17, 21, 51, -122, 61, -87, 41, -9, 15, -62, -70, -8, -3, -43, -53, 16, -21, -122, 44, 42, -66, -95, -89, 59, -72, 62, -28, -22, -9, -13]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "9449F434B15F5F5B11A234B065889C007322CD58C33CEC78D080E98DC4833D5B33BF7BC762F4ABE1DCB3F4281F49055E8E7278B9D6DA91148058192336F5131B0B4732956DAA9B0A7C5C496DEA223C7DA29E111533863DA929F70FC2BAF8FDD5CB10EB862C2ABEA1A73BB83EE4EAF7F3" + "'", str27, "9449F434B15F5F5B11A234B065889C007322CD58C33CEC78D080E98DC4833D5B33BF7BC762F4ABE1DCB3F4281F49055E8E7278B9D6DA91148058192336F5131B0B4732956DAA9B0A7C5C496DEA223C7DA29E111533863DA929F70FC2BAF8FDD5CB10EB862C2ABEA1A73BB83EE4EAF7F3");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[79, 88, -28, -53, -26, 91, -5, -52, 125, -93, 123, -76, -86, -123, 61, 116]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[127, 113, 41, 125, -22, -121, 33, -39, 69, 73, -23, -128, -111, -76, -60, 77]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[75, 59, -89, 63, -80, 42, 122, -62, 122, -85, 122, 58, -66, 38, 92, 11]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-103, 91, 44, 70, 64, 9, -125, 120, 29, -125, -102, -97, 70, -94, -9, 101]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[71, 67, -1, -116, -12, -6, 118, 42, 40, -67, -106, -31, -15, 82, -64, -7, -103, -118, 79, -22, -34, -107, -31, 21, 62, 124, -24, -120, 76, -73, -55, 12, 75, 59, -89, 63, -80, 42, 122, -62, 122, -85, 122, 58, -66, 38, 92, 11]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-27, 52, -13, 81, -47, 6, 114, -25, -45, 94, 117, 66, 93, 42, 66, 60, -93, -50, 41, -23, -114, -50, -96, 6, 61, 64, -78, -42, 42, 15, 67, 60, -28, -34, 29, 71, 19, 41, 85, 74, -23, -23, 8, 110, 52, 23, 96, 16, 47, 61, 120, 50, -29, -25, 40, 105, 71, 0, 9, -11, -56, -5, 109, -52, -42, 47, -27, -104, -85, -80, -118, 50, 40, -86, -20, -93, -3, 17, -86, -101, 125, -71, 114, 22, 60, -62, 127, -54, -48, 96, -70, 87, 115, 103, 18, 90, 75, 59, -89, 63, -80, 42, 122, -62, 122, -85, 122, 58, -66, 38, 92, 11]");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey7);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey35);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey35);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey35);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey35);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey35);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-51, 100, 99, -59, 110, 59, -64, 121, 4, 37, -94, 98, 55, -70, 59, -72]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[25, 5, -88, -117, -57, -59, -60, 52, -63, -86, 100, 31, -42, -30, 65, 117]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[25, 5, -88, -117, -57, -59, -60, 52, -63, -86, 100, 31, -42, -30, 65, 117]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[64, 36, 12, -61, 106, 33, -70, 22, -108, 72, 47, -128, 32, 60, -115, -30, 14, 80, -109, -19, -36, -47, -84, 69, -32, 107, -45, 11, -21, 10, -59, 59, -51, 100, 99, -59, 110, 59, -64, 121, 4, 37, -94, 98, 55, -70, 59, -72]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-55, 110, -93, -83, -76, 16, 116, -73, -29, 12, 29, 87, -63, -13, -81, -120]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-113, -43, -27, 122, 81, 19, -33, 22, 101, 117, -44, -75, 40, -109, 83, 48]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-17, -80, 32, -11, -111, -121, -97, -29, 41, -49, 73, 41, 120, 80, -3, 98]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[72, 114, -121, 60, -128, 62, -81, -16, -39, -31, 88, 23, -32, 126, 2, -86]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[105, 23, -47, 14, -60, 32, 0, -116, -97, 1, 114, 123, 69, -71, 81, -35, -115, 0, 83, -78, 109, -76, -14, 27, 98, -26, -89, -106, 92, 91, -111, -122, -17, -80, 32, -11, -111, -121, -97, -29, 41, -49, 73, 41, 120, 80, -3, 98]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[32, -54, -92, -9, -39, 7, -26, -21, 118, 28, -69, -76, 103, -73, -70, -49, -89, 113, 77, -42, -59, -84, -91, 86, -69, -121, 109, 10, -95, 24, -110, -121, -17, -80, 32, -11, -111, -121, -97, -29, 41, -49, 73, 41, 120, 80, -3, 98]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-99, -63, -81, 117, -117, -77, -84, -96, 12, -120, 100, 44, 68, -32, 35, 17, -102, 87, -18, -41, -91, -118, -33, 48, 26, 93, 33, -17, 53, -55, 13, 0, 11, 110, 69, -123, -104, 85, 34, -90, 13, 19, -59, -125, -106, -88, 74, 11, 68, -27, 101, 82, -94, -116, 74, -48, 95, -41, 39, -22, -65, -42, -18, -66, 111, 12, -115, 64, -49, -33, 36, -4, -26, -47, 35, 70, -108, 114, 27, 0, 82, 79, -118, 123, -9, -42, 63, -46, -28, 117, 35, -30, -49, 109, -19, -74, -17, -80, 32, -11, -111, -121, -97, -29, 41, -49, 73, 41, 120, 80, -3, 98]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[34, -3, 49, 58, -1, -18, -125, -38, 61, 44, -124, 71, -29, 113, 126, 125, -106, -8, 85, -54, 78, 89, -109, -68, -106, 10, 40, 104, -20, -82, -4, -49, -17, -80, 32, -11, -111, -121, -97, -29, 41, -49, 73, 41, 120, 80, -3, 98]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-9, -59, 51, 95, 0, 92, 16, -94, -108, 110, -11, 97, -26, -46, -10, -124, -120, 12, 60, -49, 78, 49, 41, 21, 54, 4, -11, 4, 71, 43, -124, 33, 60, -121, -110, 93, 54, 75, -33, 13, -35, 26, 101, -110, 121, 118, 28, 107, -94, 80, -33, 65, 79, -32, 124, 17, -67, 108, 108, 110, -44, -4, 30, -118, 92, 61, -82, -44, 59, -93, -128, -34, -122, 45, -11, -19, 29, -100, -93, -125, 84, -125, 121, 76, -43, 80, 105, -29, -34, -50, -74, -107, -61, 67, -35, -26, -17, -80, 32, -11, -111, -121, -97, -29, 41, -49, 73, 41, 120, 80, -3, 98]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-109, 76, -77, 75, -124, 25, -105, 1, -16, 22, -51, -75, -99, 123, -90, 75]");
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey10);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 66, 68, 92, 111, -75, 4, 41, 57, 79, -123, 81, -25, 53, 92, -43]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 29, 82, 18, -113, -81, -87, 70, 13, 113, 123, 63, -91, -12, -95, 44]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-36, -97, 98, 100, -97, -67, 83, -5, 107, -5, -72, -6, -36, 47, 21, 122, 29, -47, -2, 42, 20, -41, 23, 80, -22, 25, 38, 68, -2, 1, 58, -28, 100, 66, 68, 92, 111, -75, 4, 41, 57, 79, -123, 81, -25, 53, 92, -43]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DC9F62649FBD53FB6BFBB8FADC2F157A1DD1FE2A14D71750EA192644FE013AE46442445C6FB50429394F8551E7355CD5" + "'", str7, "DC9F62649FBD53FB6BFBB8FADC2F157A1DD1FE2A14D71750EA192644FE013AE46442445C6FB50429394F8551E7355CD5");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-55, -32, 31, -57, 2, 94, 8, -94, -125, 4, 72, 74, 33, 70, 88, 66]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-81, -114, 111, 31, -44, -120, 15, 78, 35, -123, -44, -96, -13, 6, 54, 55]");
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey24);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-47, 99, -86, -128, 104, -42, 100, -120, -74, 121, 19, -78, -28, -25, -31, 95]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-94, 14, -115, 35, 0, 28, -87, -110, -93, -103, -71, -19, -86, 2, -36, 2]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-94, 14, -115, 35, 0, 28, -87, -110, -93, -103, -71, -19, -86, 2, -36, 2]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-59, 2, 85, 9, 116, 21, -53, 77, -125, -103, -22, -54, 72, -98, -1, -101]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[82, 32, -115, 12, 57, -57, 13, 9, 47, -50, 76, 123, -79, -107, -5, -113]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-90, 71, 74, 117, 1, 126, -45, -51, -39, 31, -84, -96, 116, 101, 94, -89]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[112, -92, 83, -67, 48, 23, -79, 72, -40, 23, 17, 77, 3, 85, -71, -52]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122, 86, 107, -88, 96, -50, -16, 95, 19, -5, -58, -77, 111, 118, -97, -4, 71, -87, 36, -57, 115, 50, -81, 86, 32, 123, 3, 24, -109, -108, -17, -3, -90, 71, 74, 117, 1, 126, -45, -51, -39, 31, -84, -96, 116, 101, 94, -89]");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey29);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[22, -45, 18, 23, 38, -22, -100, -110, -68, -120, 47, -120, -58, 7, 68, 36]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-59, 66, -56, -18, -7, 84, 102, 9, -22, 115, -51, -102, 45, -84, -83, -71]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-96, -89, 88, -14, 4, 19, 39, 98, 3, 2, 116, -68, -56, -13, -109, 101]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[125, 81, 3, -61, 22, 92, 54, -47, -107, -121, -4, -80, 56, -120, 91, -91]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-95, -85, 55, -123, -64, -86, 45, -87, 22, 67, -46, 122, 17, -112, 85, -117, 114, -73, 11, -74, 18, 26, 7, 14, 31, -52, 85, 10, 35, -60, 58, 101, -96, -89, 88, -14, 4, 19, 39, 98, 3, 2, 116, -68, -56, -13, -109, 101]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[36, 25, -62, 101, -88, 15, 51, 13, 15, 29, -48, -110, -110, -76, -49, -46]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[103, 111, -116, 49, 74, -47, -51, 29, 113, 10, 37, 79, 118, 114, -70, -61]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[103, 111, -116, 49, 74, -47, -51, 29, 113, 10, 37, 79, 118, 114, -70, -61]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-32, -2, 70, 97, 50, -105, -25, 121, 124, 17, -27, -122, 53, 56, 122, -63]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, 95, 56, 71, 58, -65, 11, -125, -125, 39, -86, -32, -76, 7, -14, -111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-48, 18, -119, 63, 88, 68, -120, -67, 60, -63, -55, -8, 85, -116, 71, 40]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[40, -4, 83, 4, -27, 62, -94, 60, 9, -71, -97, -33, 85, 28, 109, -82]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-88, 17, -81, 113, 24, -52, -101, -74, -65, -4, -107, -106, -34, 41, 12, -56, -118, -63, 94, 119, -77, -96, -105, 31, 44, -87, -68, -69, -46, -123, -103, 105, -48, 18, -119, 63, 88, 68, -120, -67, 60, -63, -55, -8, 85, -116, 71, 40]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[99, 112, 61, 94, -29, -94, -127, 13, 56, 74, 110, -5, 19, -19, -121, 51, 70, -14, -128, -75, 118, -59, -77, 127, 27, -75, 40, 109, 70, 20, -114, 2, -48, 18, -119, 63, 88, 68, -120, -67, 60, -63, -55, -8, 85, -116, 71, 40]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-6, 56, 38, -96, -103, -12, -118, -97, 3, 55, 5, -112, 60, -2, 116, 73, 4, 66, -12, -115, 38, -92, -57, 78, 51, 19, -114, -5, -107, 66, 28, 114, -46, -83, 29, -96, 78, 95, 25, -70, -113, 92, 105, 26, -15, 88, 125, -61, -7, -43, 120, -34, 6, -25, 94, 74, -56, -116, 10, -11, 106, -26, -48, -50, 65, -29, -81, 114, -109, 119, 12, -106, 5, -118, -123, 21, -39, -91, 87, 31, 6, 90, 39, -12, 57, -69, 95, 36, 64, 110, 107, -113, -83, -124, 120, 57, -48, 18, -119, 63, 88, 68, -120, -67, 60, -63, -55, -8, 85, -116, 71, 40]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-113, 2, -1, 31, -44, -24, -15, -16, 108, -37, -70, 77, -86, 120, -42, 46, -16, 2, -49, -121, 54, -98, -49, 51, -123, -119, -16, -97, 85, -128, 60, -113, -48, 18, -119, 63, 88, 68, -120, -67, 60, -63, -55, -8, 85, -116, 71, 40]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[63, 108, 1, 40, -67, -18, -99, 110, 62, -101, -27, -122, -2, -60, -19, -66, 70, 66, 81, -107, 82, -45, -79, -80, -119, -51, 97, 54, -75, 46, -94, -24, 48, 111, 61, 88, 49, 44, -17, 119, 94, -99, -64, -121, 25, 79, 114, 102, -83, 88, 96, 13, -85, 48, 82, 123, 98, -79, -68, -112, 71, -106, 76, -118, -128, -26, -60, 22, 53, 53, 109, -19, 60, -61, -85, -62, 126, -92, -60, -16, -37, -105, -100, -93, 15, 50, -7, -5, -41, -124, 108, -44, -89, -19, 113, -93, -48, 18, -119, 63, 88, 68, -120, -67, 60, -63, -55, -8, 85, -116, 71, 40]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "3F6C0128BDEE9D6E3E9BE586FEC4EDBE4642519552D3B1B089CD6136B52EA2E8306F3D58312CEF775E9DC087194F7266AD58600DAB30527B62B1BC9047964C8A80E6C41635356DED3CC3ABC27EA4C4F0DB979CA30F32F9FBD7846CD4A7ED71A3D012893F584488BD3CC1C9F8558C4728" + "'", str31, "3F6C0128BDEE9D6E3E9BE586FEC4EDBE4642519552D3B1B089CD6136B52EA2E8306F3D58312CEF775E9DC087194F7266AD58600DAB30527B62B1BC9047964C8A80E6C41635356DED3CC3ABC27EA4C4F0DB979CA30F32F9FBD7846CD4A7ED71A3D012893F584488BD3CC1C9F8558C4728");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, 16, 48, -42, 12, -72, 8, 84, -99, -54, -61, 43, 114, 41, 23, 63]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-121, -24, -83, -123, -18, -110, 71, 66, 55, -96, -90, 68, 54, 114, 52, 17]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-28, -81, -109, -50, 98, -50, 88, 14, 26, -96, -80, 16, 61, -7, -106, 75]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-15, -97, 106, 4, -85, -112, 68, 84, 80, 111, -126, 88, 97, -36, 15, 121]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-4, -123, -40, -32, -120, -38, -19, 0, -66, -15, -72, 103, 3, 58, -107, -53, 50, -117, -35, -73, 94, -13, -119, -85, 2, 61, 37, 20, 29, 44, 8, 24, -28, -81, -109, -50, 98, -50, 88, 14, 26, -96, -80, 16, 61, -7, -106, 75]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[84, 67, -48, -53, 14, 32, 39, 121, 123, 9, -34, -123, 41, -125, 77, -89, -14, 15, -86, 67, 15, -110, 116, -44, -23, 11, -33, -125, 113, -56, 59, 100, -28, -81, -109, -50, 98, -50, 88, 14, 26, -96, -80, 16, 61, -7, -106, 75]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-2, -63, 38, -21, -31, 90, 112, -121, 94, 65, -35, 85, -97, 24, 42, 110, 36, 80, -63, -41, -53, 86, 78, 84, -11, -43, -14, -3, 17, 4, 85, 64, 0, 47, 63, -86, -117, -114, 29, -7, -8, 50, 33, 106, 67, 60, -25, -24, 55, 109, -22, 66, -127, 115, -116, -127, 123, -79, 50, -8, -75, -125, 29, -32, 25, -57, 24, -24, -69, -46, -78, 111, 88, -35, -67, 8, -4, -52, -88, -114, -79, 123, -47, -111, 36, 116, 106, 14, -4, -23, 38, -8, 102, 84, 25, 17, -28, -81, -109, -50, 98, -50, 88, 14, 26, -96, -80, 16, 61, -7, -106, 75]");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey17);
        java.lang.Class<?> wildcardClass23 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[103, -37, 85, -101, -37, -32, 49, 52, 86, 12, 82, 86, -41, 55, -99, 88]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[62, -42, -38, 70, 64, 20, 123, 44, -122, 27, -128, -85, 11, -59, -91, 74]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-102, 86, 29, 25, -24, -62, 13, -10, 17, -68, 10, -71, 11, 48, -18, 50]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-115, 125, 92, -91, -41, -122, -2, 67, 13, -87, -67, -51, -119, -95, 88, 9]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-76, -88, -39, -71, 74, -103, -79, -89, 68, 43, 38, 15, 33, 16, 40, -124, 64, 99, -56, -125, -41, -81, 51, 119, 77, -4, 71, 30, 117, -92, 17, -56, -102, 86, 29, 25, -24, -62, 13, -10, 17, -68, 10, -71, 11, 48, -18, 50]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey4);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-105, 126, 126, 81, 76, -105, 82, -24, -18, -21, 124, -78, -7, -91, 103, 18]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[51, 55, -86, 111, 17, -102, 125, -58, -97, 116, -64, 69, -56, 84, -71, -28]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[51, 55, -86, 111, 17, -102, 125, -58, -97, 116, -64, 69, -56, 84, -71, -28]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-87, 25, -46, -28, -50, 117, 124, 111, -88, -79, -112, -23, 91, 78, -102, -28, -30, -85, -48, 14, 41, -74, -115, 99, -109, -78, 94, -101, 8, 21, -78, 12, -42, 46, -79, 32, 13, -122, -82, -3, 79, 17, 28, -5, 88, 66, 3, -76, -21, 12, 21, -8, -71, 41, -86, 23, -34, -99, 16, 42, -92, 57, -90, 127, -55, 101, 62, 46, -16, -25, 36, 126, 4, 119, 95, 23, 109, 56, -78, 99, 85, -89, 117, -68, 16, 13, 80, -11, -7, -1, -81, 107, 50, -116, 36, 20, -105, 126, 126, 81, 76, -105, 82, -24, -18, -21, 124, -78, -7, -91, 103, 18]");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-86, 84, -40, -96, -124, 14, 42, -109, -53, 91, 100, 20, -108, 54, -89, -53, -110, 46, -26, -72, -68, 33, -40, 23, -37, -108, 50, 82, 69, 83, -119, 80, -111, 9, -66, 124, 10, -68, 113, -119, -22, 94, -3, -61, 87, 105, 104, -121, 113, 35, -128, 55, 0, 69, 102, 109, -38, -105, -107, -56, 37, 16, 36, -74, 29, 59, -121, 127, 109, 74, -24, -53, -73, 71, -38, 122, -16, -17, 63, -79, -40, -8, 121, -54, 78, -51, 105, 16, 49, -15, 46, -45, -3, -27, 28, -11, -88, 76, -96, -39, 83, -15, 100, -4, -72, 97, 110, -19, 15, -35, -18, -53]");
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey12);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey12);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey12);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0101FF" + "'", str5, "0101FF");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-112, 4, 73, -92, 37, -23, 60, -33, -111, 74, -101, 92, -84, 37, -45, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-63, 27, -78, 46, -97, -40, 52, 108, 109, 45, 118, -48, -39, 88, 127, -30, -3, -48, -36, 112, 91, 97, -4, -110, 1, -65, 51, 109, 110, -84, 63, -13, 23, -45, -81, 97, 67, 47, 41, -105, -32, -18, -74, 56, 46, -127, -69, -30]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-23, 114, -102, -54, 36, 107, -55, 100, 96, 104, 21, -78, -89, 119, 40, 81, 48, 90, 107, 45, 47, 86, -92, -23, 122, -114, -69, 58, -114, -65, 76, 61, 23, -45, -81, 97, 67, 47, 41, -105, -32, -18, -74, 56, 46, -127, -69, -30]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-23, 114, -102, -54, 36, 107, -55, 100, 96, 104, 21, -78, -89, 119, 40, 81, 48, 90, 107, 45, 47, 86, -92, -23, 122, -114, -69, 58, -114, -65, 76, 61, 23, -45, -81, 97, 67, 47, 41, -105, -32, -18, -74, 56, 46, -127, -69, -30]");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey27);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey55);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey64);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey64);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey64);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey64);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-108, 11, 51, -20, 76, -11, 24, -85, 19, -38, -26, -77, -66, -72, -50, 87]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[14, 97, 68, 0, 54, -6, -32, 33, -47, -8, -124, 97, -108, -123, -17, -97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, -77, -116, 105, 29, -28, -102, -77, -55, -114, -60, -74, -10, 11, 83, -59]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-12, 5, 58, -20, 126, 123, 118, 53, 84, -99, 94, 113, -54, -98, 117, -36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[5, -21, 3, -78, 66, 45, -41, 61, -100, -48, -122, 0, 48, 104, 106, 124]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-73, -97, 77, 94, -110, 51, -32, -39, -111, 93, 83, 82, -5, -3, -79, 80]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-73, -97, 77, 94, -110, 51, -32, -39, -111, 93, 83, 82, -5, -3, -79, 80]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-22, 96, -124, 58, -26, -93, -65, 81, 44, 116, 37, 61, 123, -91, 37, 89, 24, 115, 74, -103, -116, 70, -123, -111, -126, -34, 75, -20, 82, 126, -55, -63, 5, -21, 3, -78, 66, 45, -41, 61, -100, -48, -122, 0, 48, 104, 106, 124]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-61, -113, 93, 32, -31, -41, 114, 38, 15, -44, 108, 34, 45, -53, 93, 107]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-70, 115, 97, 8, -102, -20, -43, -118, 69, -110, 126, -28, -88, 68, -50, 48]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[116, 26, 106, -75, 55, 119, 65, -79, -6, -93, 114, 76, 24, -74, -44, -126]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-89, -97, 77, 62, -128, -31, 39, -79, -78, 28, 62, 101, 116, -103, -24, 93]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[3, -108, 85, 21, -16, -12, 28, 119, -56, 68, -118, 42, -125, 94, 79, 110]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-19, 21, 90, -5, 108, 52, -24, -64, 51, 92, -16, -120, -29, 86, 61, 110]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-19, 21, 90, -5, 108, 52, -24, -64, 51, 92, -16, -120, -29, 86, 61, 110]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[58, -47, -2, -92, 83, 104, 74, 4, 45, -44, 59, 8, 0, -34, -19, 19, -76, -98, 51, -115, -10, 10, 36, -31, 19, 24, 60, -24, -83, 3, 27, -109, 3, -108, 85, 21, -16, -12, 28, 119, -56, 68, -118, 42, -125, 94, 79, 110]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey28);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.Class<?> wildcardClass37 = byteArray35.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-111, -5, 124, 123, 48, -45, 55, 11, -94, -91, 7, -106, 34, -49, 12, -26]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[18, -113, 47, -110, -15, -1, 85, 67, 4, 53, -77, -72, -75, -109, -11, -122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-58, -71, 74, 46, -48, -31, -21, 118, -3, -27, 13, 75, 59, 103, -91, -80]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 24, -119, 106, -89, 45, -101, -35, 7, 26, -17, -86, 26, -113, -69, -78]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-65, 93, -110, 123, 45, -59, 61, 114, 121, 114, 55, -124, 94, 36, 88, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[93, -126, -94, -50, -87, -3, 20, 35, -66, 6, 65, 117, -98, -80, -122, -55]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[93, -126, -94, -50, -87, -3, 20, 35, -66, 6, 65, 117, -98, -80, -122, -55]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[124, -106, -54, 36, -104, -7, -4, 48, -60, -115, -52, -29, -31, 104, 20, 93, -34, 125, -13, -53, 32, -128, 21, 126, 40, -83, 47, -112, 60, 119, 50, 46, -65, 93, -110, 123, 45, -59, 61, 114, 121, 114, 55, -124, 94, 36, 88, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-115, 99, 78, 9, 6, 13, 101, 61, -3, -65, 24, -92, 36, -109, -22, 9, -110, -83, 118, 54, 114, 111, 96, -58, 55, -13, 56, -3, 112, 26, -28, 8, -65, 93, -110, 123, 45, -59, 61, 114, 121, 114, 55, -124, 94, 36, 88, 1]");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "8D634E09060D653DFDBF18A42493EA0992AD7636726F60C637F338FD701AE408BF5D927B2DC53D72797237845E245801" + "'", str36, "8D634E09060D653DFDBF18A42493EA0992AD7636726F60C637F338FD701AE408BF5D927B2DC53D72797237845E245801");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey22);
        java.lang.Class<?> wildcardClass33 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-88, 64, -38, 14, 30, -46, -96, 21, -90, -20, 28, -57, -89, -84, -123, -114]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[53, -14, -22, -47, -31, -16, -53, -106, 22, 76, -118, 40, 40, 77, 66, 75]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[119, 74, -41, 69, 61, -42, -93, -125, 92, -110, -93, -57, -23, -3, 118, 82]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-59, 22, 74, 64, 81, 71, -30, -117, 29, -86, -51, 15, -110, 71, -44, -7]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[84, 103, 127, 78, -44, -86, 20, 41, -78, -112, 101, 99, 53, 93, -39, -12, -114, -81, 56, 21, 68, -124, 56, 70, -115, -104, 75, -123, -105, -48, -46, -110, 119, 74, -41, 69, 61, -42, -93, -125, 92, -110, -93, -57, -23, -3, 118, 82]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-40, -39, 40, 45, -128, 25, -99, -38, -43, 10, -75, -97, -108, -108, 36, 30, 53, 118, 39, -24, 98, 27, -36, 79, 81, 34, -83, -115, 35, 62, -115, -52, 119, 74, -41, 69, 61, -42, -93, -125, 92, -110, -93, -57, -23, -3, 118, 82]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[98, -79, 4, 82, 103, 36, 61, 124, -99, -31, 72, 66, -67, -124, 49, 29, 2, 7, 123, 1, 65, 85, -83, -108, 78, 124, 8, -91, 61, 24, 45, -14, 126, -94, -84, 4, -81, 82, -81, -107, 119, -77, -100, 102, -21, 11, -80, -125, 49, 41, -24, 54, -2, -78, 9, 75, 42, 51, 103, 28, 28, 89, -68, -73, -99, -24, 103, 94, -25, -85, 28, -27, 18, 38, 94, 105, 9, -70, 73, -76, -78, 40, -121, -125, -40, 52, 122, 8, -84, -6, 79, -17, -49, -125, 12, 107, 119, 74, -41, 69, 61, -42, -93, -125, 92, -110, -93, -57, -23, -3, 118, 82]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[37, -24, -97, -15, -115, -16, 67, 92, 123, -55, -111, -92, -33, 41, -26, 98, -61, -16, 39, 10, 121, 1, -102, -118, 6, -63, 96, -60, 91, -23, 2, -63, 119, 74, -41, 69, 61, -42, -93, -125, 92, -110, -93, -57, -23, -3, 118, 82]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-36, -32, -99, 102, -25, -108, -115, 100, 58, -59, -82, -2, -28, 106, 87, 7, -125, -122, -105, 104, 7, -115, -84, 68, 103, 8, 119, -112, -122, 118, -105, 98, 119, 74, -41, 69, 61, -42, -93, -125, 92, -110, -93, -57, -23, -3, 118, 82]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-86, 4, 102, 107, -62, 61, -124, 120, 122, -99, 64, 31, -62, 37, 122, -64, -76, -38, 38, 92, -1, 97, 115, 91, -63, -19, -58, 7, 67, -71, 52, 29, 62, 99, -14, -124, -89, -81, 12, 117, 69, 11, 110, -109, -28, 124, 26, 114, -91, 20, 35, 16, 46, -65, -123, 103, -5, 50, 35, -78, 13, -32, 18, -108, -87, -60, -85, -80, -15, -74, 95, -37, -35, 112, 95, 78, -128, 33, 87, 116, -121, -42, -114, -57, 102, 108, 15, -5, 48, -16, 49, -19, 74, -22, -23, 111, 119, 74, -41, 69, 61, -42, -93, -125, 92, -110, -93, -57, -23, -3, 118, 82]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-10, -80, 120, 4, -18, 29, -77, 116, 105, -45, 120, -71, 27, -114, 61, 37]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[79, 46, -77, -96, -116, -12, 89, -111, -29, 117, 28, 25, 49, 113, -55, 82]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[93, -31, 1, 112, 80, 103, 100, -68, -118, 108, 72, -14, -82, -19, -72, 2]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-10, -80, 120, 4, -18, 29, -77, 116, 105, -45, 120, -71, 27, -114, 61, 37]");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey31);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-93, 34, 19, 11, 126, -19, -52, 95, -82, 126, -77, -21, -68, -25, 103, 32]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-103, 77, 22, 60, -77, 93, 92, 68, 97, -63, -18, 75, 11, 123, 7, -19]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-96, -106, -116, 22, 54, -110, 106, -118, 109, -3, 116, -59, -30, 117, 93, -30]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-93, 34, 19, 11, 126, -19, -52, 95, -82, 126, -77, -21, -68, -25, 103, 32]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, -109, -111, -24, 21, -118, 48, 7, 102, 105, 77, -68, 92, -58, 126, -56, -125, -95, 26, 2, -124, 87, 85, -36, -4, -97, 49, 29, 115, -48, 123, -47, -93, 34, 19, 11, 126, -19, -52, 95, -82, 126, -77, -21, -68, -25, 103, 32]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[39, 58, -123, -12, 120, 70, -84, 35, -74, -25, -119, 94, -32, 31, -104, -105, 123, 7, 70, -104, 45, 68, 120, 109, -31, 5, 78, -87, -117, 85, -95, -95, -93, 34, 19, 11, 126, -19, -52, 95, -82, 126, -77, -21, -68, -25, 103, 32]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "273A85F47846AC23B6E7895EE01F98977B0746982D44786DE1054EA98B55A1A1A322130B7EEDCC5FAE7EB3EBBCE76720" + "'", str13, "273A85F47846AC23B6E7895EE01F98977B0746982D44786DE1054EA98B55A1A1A322130B7EEDCC5FAE7EB3EBBCE76720");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[108, 104, -6, 111, -89, -24, 98, -64, -4, -16, 104, 49, 93, 46, -73, 31]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[113, 118, 1, 122, 41, 2, -89, 97, -103, 33, -88, -23, -82, 28, -77, -73]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[87, 37, 48, 40, 20, 28, 5, -6, -100, 18, -32, 58, 60, 84, 100, -36]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-15, -63, 67, 125, -1, 19, 4, -110, 97, -70, -29, -101, -13, -56, -80, 127]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[9, 5, -108, 26, 56, 71, -83, -60, -80, -78, 121, -26, -8, 51, 72, -28, -22, 22, -101, 64, -124, 117, 74, -54, -13, -88, -35, 63, -83, 111, 110, 6, 87, 37, 48, 40, 20, 28, 5, -6, -100, 18, -32, 58, 60, 84, 100, -36]");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        byte[] byteArray80 = new byte[] {};
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray80);
        javax.crypto.SecretKey secretKey82 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey82);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey86);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey86);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey86);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey86);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey86);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey86);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey86);
        java.lang.Class<?> wildcardClass96 = byteArray95.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[59, 14, 32, 41, 7, -100, -32, 56, 12, -88, 76, 126, 1, 61, -32, -117]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[18, 92, 12, 56, -124, 6, 66, 61, -11, 78, -82, -60, -91, -55, -60, 101]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-57, 28, -98, -127, -75, -26, -39, -26, -100, 111, 24, -128, -55, 68, -117, 67]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 5, -92, 3, 53, 66, -93, -11, -5, 28, -122, 102, 123, -12, -108, -72]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-40, 122, 114, 53, 42, -98, -55, 43, 12, 89, 76, 98, 8, -108, -117, 92]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[38, 5, 2, -40, -68, -34, -108, -83, 79, 28, 94, -82, 15, -2, -57, 37]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-47, 126, 18, 26, 43, 93, -120, 52, 98, -123, 31, -3, 96, -110, 22, 97]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-30, -108, 45, 75, -1, 106, 78, -116, -42, 59, -34, 4, -56, -79, 116, -23]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-61, 36, -54, -84, 69, 113, -29, -53, -4, -13, 63, 49, 25, -121, -127, 33, -126, -107, 36, -15, 18, -109, 47, -98, -10, 7, -36, -51, 19, -52, 19, 73, -47, 126, 18, 26, 43, 93, -120, 52, 98, -123, 31, -3, 96, -110, 22, 97]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[95, 120, 59, 85, 10, -61, 77, -4, 35, 89, -112, -127, -10, 31, -49, -50]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[107, -79, -91, 85, -44, 63, 76, -124, 32, -12, 68, -80, -54, 62, 93, -71]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-113, -6, 15, -91, -77, -110, -75, 58, 19, 80, 49, -127, -25, -61, 118, -115]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-22, -27, -95, -125, 84, -43, -96, -61, 84, -90, 64, -19, -2, -57, 90, 65]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-110, -23, 92, -60, 109, -71, -54, -59, 102, 32, 18, 13, 108, -111, -64, 84]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[111, 17, -70, 127, -80, -75, -54, 97, 62, -31, 25, -30, 82, 68, 27, 6]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-22, -39, 59, -123, -69, -58, -30, -78, -5, -51, 82, -35, 47, -26, 121, 109]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-8, -46, 12, 68, -27, -44, 14, -98, -30, -25, -128, 15, -27, 43, 68, 117]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[71, -74, 96, -125, -118, 67, 82, 60, 16, 109, -86, -110, 10, -80, -35, 81, -117, 73, -2, 6, 30, -47, -16, 45, -52, -91, 47, -20, 25, 96, 87, -6, -22, -39, 59, -123, -69, -58, -30, -78, -5, -51, 82, -35, 47, -26, 121, 109]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-19, 58, -48, 45, 9, -79, -74, -14, 77, 112, -59, -102, -86, 17, 9, -3, -25, -92, 29, -92, -26, -86, 57, 116, -58, 51, -122, 59, 50, -41, -120, -37, -22, -39, 59, -123, -69, -58, -30, -78, -5, -51, 82, -35, 47, -26, 121, 109]");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[35, -15, 126, 75, -17, 23, -44, -73, -26, -95, -75, -36, 91, 90, -50, 123, -8, 123, -17, 36, 71, -48, -128, 86, 61, 78, 67, 95, -10, 44, 119, 67, 17, 116, -63, 71, 49, 60, -61, 11, 110, -86, 48, 37, -69, -100, -108, 0, -42, 104, 45, 21, 2, -86, -66, -121, 63, -111, -85, 74, 75, 106, -64, -100, 2, 79, -21, -88, 70, 56, -75, -81, -102, -82, -109, 105, 17, -56, 73, -9, 101, 41, -125, 16, 71, 102, -8, 72, 74, 119, -95, 30, 104, -80, -84, 100, -22, -39, 59, -123, -69, -58, -30, -78, -5, -51, 82, -35, 47, -26, 121, 109]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey11);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[49, 104, -54, 71, 109, -114, -103, 113, -101, -61, 127, 71, 94, -7, -65, -55]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3168CA476D8E99719BC37F475EF9BFC9" + "'", str3, "3168CA476D8E99719BC37F475EF9BFC9");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-120, -64, 117, 37, 37, 96, -120, 26, 60, -50, -35, 108, 109, -19, 93, -105]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-70, -4, 17, -33, 27, -82, -50, 81, 68, 67, 103, 110, 58, -54, 89, 21]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-70, -4, 17, -33, 27, -82, -50, 81, 68, 67, 103, 110, 58, -54, 89, 21]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-45, 100, -54, -21, 65, -77, 66, 46, -11, -128, 125, 89, -21, 107, -85, -33, -37, 93, 96, 19, 80, 19, -5, -6, -1, 124, 66, 102, -65, 32, 89, -88, -120, -64, 117, 37, 37, 96, -120, 26, 60, -50, -35, 108, 109, -19, 93, -105]");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-47, 107, 98, -101, 15, 8, 106, 102, -107, -59, 69, 98, -60, -34, 120, -23]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[4, -1, -31, 20, -50, 13, -43, 88, 113, -14, 2, -110, 49, -116, -103, 48]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[20, -2, -45, -94, -5, -4, -124, -60, 83, 83, -42, 110, -93, 97, -22, -11]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-37, -1, -26, 72, -94, 78, 1, -127, -12, 65, 6, 77, -25, 107, 115, -31]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-78, -93, -37, -96, -25, 126, -76, 125, 104, 85, -34, -40, -78, 71, -41, -28, -65, -25, 92, -11, 65, 13, 31, 25, -82, 101, 93, 51, -120, 35, 55, -23, 20, -2, -45, -94, -5, -4, -124, -60, 83, 83, -42, 110, -93, 97, -22, -11]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-127, 115, 112, 91, -104, -19, -108, 14, 58, 75, -28, -122, -98, 76, 90, -94, -23, -28, -97, -29, -70, -34, -113, -55, -24, 78, 44, -67, -66, 74, -48, -4, 20, -2, -45, -94, -5, -4, -124, -60, 83, 83, -42, 110, -93, 97, -22, -11]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-94, 24, -24, 86, -121, 45, -84, -86, 13, -79, -28, -125, -5, 46, -113, 45, 85, -108, -105, -34, -26, -39, 111, -2, -74, 72, 20, -12, -60, 89, 74, -118, 104, 92, -43, 63, 36, -92, 123, 122, -6, -122, -50, -126, 8, -6, -108, -47, -37, -63, -57, 47, -115, 125, -88, -2, -96, -2, 25, 78, -44, 84, 92, 94, -73, -90, 47, -25, -108, 0, -45, 32, -93, -53, -68, 64, 116, 106, 88, 27, 95, -67, 119, 21, 22, 108, -48, 122, -51, -7, 5, 0, -60, 70, -48, -117, 20, -2, -45, -94, -5, -4, -124, -60, 83, 83, -42, 110, -93, 97, -22, -11]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-29, 87, -91, -24, -18, 27, 123, -49, 32, -127, -122, -15, -65, -27, -127, 56, 126, 37, 126, -83, 76, 49, 21, 18, 105, 124, 105, -92, 79, 95, -113, -11, 83, 99, 24, -95, -59, 89, -6, 53, 50, 107, 26, -84, 123, 101, 53, 3, -76, -79, -78, 15, -44, 79, -41, 21, -27, -95, 111, -73, 101, -81, -105, 34, -57, -12, 2, 84, 46, -77, -36, 111, -106, -74, 85, -24, 66, 74, 5, -93, -105, -99, -21, 42, -107, -76, -113, 22, -120, 26, -97, 57, 117, -59, -115, 107, 20, -2, -45, -94, -5, -4, -124, -60, 83, 83, -42, 110, -93, 97, -22, -11]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey7);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[106, -99, 43, 104, 0, 124, 110, 64, -103, 90, 48, -47, 108, -71, -21, 85]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[40, -35, 101, -125, 27, 97, 89, 4, 56, -44, -46, -113, -81, 10, 48, 122]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[40, -35, 101, -125, 27, 97, 89, 4, 56, -44, -46, -113, -81, 10, 48, 122]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, -75, 57, -58, -25, 4, -112, -76, -83, -95, 22, 5, 3, -4, 91, 56, 81, -80, 119, 22, -21, 31, 36, 112, -50, 108, -48, -65, -109, -87, -9, -9, 106, -99, 43, 104, 0, 124, 110, 64, -103, 90, 48, -47, 108, -71, -21, 85]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        byte[] byteArray80 = new byte[] {};
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray80);
        javax.crypto.SecretKey secretKey82 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey82);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey86);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey86);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey86);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey86);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey86);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey86);
        java.lang.Class<?> wildcardClass96 = secretKey86.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-88, 60, -106, 26, 52, -9, -23, -127, 113, -8, 30, -67, 3, -42, 71, -90]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[87, 69, 81, -73, 100, -96, -29, -13, -91, -30, -13, 0, 84, 22, 7, 37]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[103, -76, -114, 23, -113, -105, 74, 29, 68, 1, -128, -87, 62, 20, -10, -128]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[101, 26, 55, -72, -52, 43, -83, 30, -17, -94, 72, -5, 58, 60, -62, 10]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[123, -31, -19, 51, 96, -2, -110, -51, -81, -123, 102, 41, -111, 74, 90, 118]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[28, 37, -38, 47, 103, 47, -11, 62, 118, 47, -94, -91, -38, -47, -53, -10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[4, -36, -78, 126, -72, 13, 0, 111, 60, 43, -124, -98, 10, -124, -41, -111]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-104, 4, -72, -43, 77, -82, -101, -61, 20, -110, 113, 86, -21, 12, 48, -15]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-121, -92, 44, -31, -28, 21, 52, 34, -104, 93, 16, -74, 100, -66, 68, 111, -55, 37, 88, 22, -79, 90, 110, -83, -38, -47, 120, 24, -96, -48, 95, 71, 4, -36, -78, 126, -72, 13, 0, 111, 60, 43, -124, -98, 10, -124, -41, -111]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[49, -88, -25, -40, 41, 23, -94, 59, 10, -104, 48, -94, -102, -33, 21, 62]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[7, 109, -77, -48, 66, -65, 115, -19, -42, 46, 6, 76, -25, 121, -9, -76]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[76, -95, 65, 44, 98, -32, 115, 80, 22, 31, -15, -99, 112, -17, -68, -104]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[27, 110, 102, -14, 62, -86, -34, 19, -116, -87, 84, -105, 92, -57, 81, -24]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[23, 126, 124, -100, 27, -18, -110, -65, -37, 34, -68, 115, -4, -89, -49, 55]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-99, -114, -21, -109, -79, -24, -97, 109, -15, -16, 33, -106, 100, 84, 75, 56]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[37, 102, -9, 75, 88, 98, -119, 99, -120, 77, 49, 127, 61, 43, -49, -23]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-100, 24, -63, 122, 59, -45, -113, 126, -97, 37, -26, -73, 78, 37, -16, -18]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[45, 91, -105, -63, 90, 59, -52, -109, -64, -10, 16, 83, 88, -60, 108, -44, 16, 74, -52, 15, 65, -91, -81, 105, -78, -112, 48, -49, 29, -91, -104, 73, 37, 102, -9, 75, 88, 98, -119, 99, -120, 77, 49, 127, 61, 43, -49, -23]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-100, 24, -63, 122, 59, -45, -113, 126, -97, 37, -26, -73, 78, 37, -16, -18]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-128, 3, -112, -39, -86, -11, -36, -102, 16, 110, 110, -38, -37, -14, -123, -51]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[33, 20, 68, 61, -85, -58, 79, -31, -82, -99, -38, -75, -52, -33, -119, 36]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[33, 20, 68, 61, -85, -58, 79, -31, -82, -99, -38, -75, -52, -33, -119, 36]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-128, 3, -112, -39, -86, -11, -36, -102, 16, 110, 110, -38, -37, -14, -123, -51]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey48);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey48);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[79, -92, -53, -48, -91, 58, -114, 23, -84, -51, 47, -54, -104, -59, -73, -51]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[15, 24, -42, -122, -71, -27, 55, -39, 113, 114, 77, 15, -105, -24, 14, 107]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[67, 16, -64, 28, -30, 48, -65, 103, 48, 11, 94, -21, 21, -95, -12, 4]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-119, -46, -69, 2, -22, -25, 122, 31, -90, -1, 39, 6, -25, -110, 43, -68]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[30, 90, -40, 62, 0, 5, 114, -13, 31, 57, 101, 52, 127, -33, -85, -12, 102, 65, -98, 97, -77, -21, -124, -82, -32, -49, 54, -14, 3, 84, 126, 6, 67, 16, -64, 28, -30, 48, -65, 103, 48, 11, 94, -21, 21, -95, -12, 4]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[56, 40, 62, 12, 119, 87, 57, -3, -22, 70, 26, -43, -40, 124, -66, 47, 127, -51, 120, 8, -61, 38, 94, 115, 82, -46, -87, -86, 95, -55, 46, -68, 67, 16, -64, 28, -30, 48, -65, 103, 48, 11, 94, -21, 21, -95, -12, 4]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-18, 82, 68, -93, 101, -93, -53, 67, -105, -71, -41, 127, 7, -93, -105, 16, -43, 116, -43, 56, -114, -19, 31, 9, 40, 104, -22, 88, 59, -55, -38, 64, -90, -89, -4, 47, -18, -127, 62, -23, 44, -56, -73, 82, -112, -121, -3, 81, 75, -9, 83, -78, -8, -12, -94, 9, 93, -18, -114, 1, 70, 87, 26, -60, -53, -97, 81, -32, -7, 115, 41, 45, -36, -103, -102, 29, -116, 11, 44, 29, -56, 5, 16, 11, -52, -32, 14, 58, -119, -50, -30, -86, 30, -7, 19, 99, 67, 16, -64, 28, -30, 48, -65, 103, 48, 11, 94, -21, 21, -95, -12, 4]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-98, -12, -113, 50, 8, -37, 106, 53, 110, -18, 63, 85, -49, 60, -1, 14, 13, 61, 81, -63, 71, -4, -118, -83, -74, 104, -66, -67, -20, -123, 116, 117, 19, 60, 42, -48, -85, -112, -86, 22, -88, -114, -31, 23, 66, -37, 28, -82, 19, -73, -62, -123, 44, -123, -92, -50, -40, 70, -126, -20, 0, 3, -82, 117, 28, -1, 44, 109, 9, -16, -122, -86, -70, -77, 29, -10, -25, -82, -68, 61, -37, 105, 58, -82, 78, -33, -125, 93, -80, 52, 7, 81, -37, 0, -97, 104, 67, 16, -64, 28, -30, 48, -65, 103, 48, 11, 94, -21, 21, -95, -12, 4]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "9EF48F3208DB6A356EEE3F55CF3CFF0E0D3D51C147FC8AADB668BEBDEC857475133C2AD0AB90AA16A88EE11742DB1CAE13B7C2852C85A4CED84682EC0003AE751CFF2C6D09F086AABAB31DF6E7AEBC3DDB693AAE4EDF835DB0340751DB009F684310C01CE230BF67300B5EEB15A1F404" + "'", str29, "9EF48F3208DB6A356EEE3F55CF3CFF0E0D3D51C147FC8AADB668BEBDEC857475133C2AD0AB90AA16A88EE11742DB1CAE13B7C2852C85A4CED84682EC0003AE751CFF2C6D09F086AABAB31DF6E7AEBC3DDB693AAE4EDF835DB0340751DB009F684310C01CE230BF67300B5EEB15A1F404");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[38, 89, -1, -93, 0, -120, -58, 85, -21, -95, -83, 90, -107, -104, -72, 86]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-31, 73, -97, 95, -27, -18, 120, -17, -3, -58, -107, -107, -110, 9, 6, 28]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[51, 123, -30, 45, -9, -63, 36, -69, -128, 8, -120, -44, 70, -25, 30, -26]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[107, 28, 22, -7, -49, 56, 103, -54, -4, -4, -122, 35, -66, 75, 96, -81]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[27, 25, 43, 104, -117, -51, -104, -81, 16, 108, -9, 95, 69, 62, -84, 81, 3, -31, 71, -104, -27, -82, 21, -88, 65, 72, -123, -38, 100, -38, -20, 112, 51, 123, -30, 45, -9, -63, 36, -69, -128, 8, -120, -44, 70, -25, 30, -26]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[113, 108, 89, 56, -103, -61, -74, -112, 73, 20, -53, -21, 17, 13, -122, 117, 93, 125, -44, -117, -72, -69, -83, -44, -55, 78, 1, 114, -116, 10, 117, 18, 51, 123, -30, 45, -9, -63, 36, -69, -128, 8, -120, -44, 70, -25, 30, -26]");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey52);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        java.lang.Class<?> wildcardClass62 = byteArray60.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-111, 31, 45, 38, 71, 8, 114, -123, -41, -69, 112, 119, 75, -76, 117, 7]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-108, -74, -82, 13, 47, 54, -61, -36, 57, 28, 83, 27, -58, 125, 56, 35]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-88, 66, -124, 59, -27, 81, -34, -113, 97, 58, 71, 122, -115, 37, -53, -15]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[11, 46, 74, -70, -127, -49, 122, 51, 46, -41, 113, 101, 25, -9, 122, -29]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-116, -25, -73, -74, -28, 96, -103, 75, 18, 38, -78, -17, 120, -41, 28, -124]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[19, -40, -24, -47, 96, -81, -59, 119, -86, -116, -98, -110, -34, 56, -110, -8]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-26, 127, 1, -88, 0, 42, 78, 91, -80, 16, -41, -10, 23, 106, -97, -125]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-44, 81, 115, 122, -109, 29, 34, -108, 83, 17, 58, 8, -27, 61, -54, 53]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[22, -55, -35, 95, -117, 65, -36, 4, -41, -124, 5, 126, -40, 25, -116, 124]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[88, -37, 69, -107, -111, 76, 71, -5, 27, -34, -86, -95, 16, -91, 80, 96]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-105, -48, -31, 19, 121, -64, 57, -101, 92, 94, 27, 50, -97, 67, -47, 53]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[22, -55, -35, 95, -117, 65, -36, 4, -41, -124, 5, 126, -40, 25, -116, 124]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[37, 5, 33, -1, -82, 86, -104, -119, -100, 110, -33, 101, -77, -125, 66, -102, -104, 58, -9, 52, -20, 68, -125, -44, -14, -55, -106, -96, -53, 31, -40, 89, 54, 44, 53, 100, -30, 55, -2, -60, -31, 57, 25, 107, 98, 92, -99, 116, 121, 68, -10, -75, 22, 20, -112, -121, -62, -125, -48, -65, -47, -98, -68, -71, 65, 109, 89, 55, -84, 64, 69, -111, 24, 62, 114, -108, -93, 101, 68, -6, 56, 109, 35, -60, 112, -28, -3, -90, 106, 102, 113, 28, -58, -29, -28, 34, 22, -55, -35, 95, -117, 65, -36, 4, -41, -124, 5, 126, -40, 25, -116, 124]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[64, 118, -111, -81, -7, 51, -61, -59, -60, -61, 80, 127, -36, 114, 15, 20, 53, 63, 116, -13, 104, -27, -111, -43, 101, 72, -98, -5, -27, -86, -15, 63, -75, 35, 85, 48, 21, -122, -22, -27, -36, -110, 7, 121, 33, -113, -34, 28, 83, -72, -91, 94, 64, -2, 4, -37, 46, 32, -44, 64, 4, 104, 3, -100, -87, 11, -7, 86, 99, 90, 88, -28, 32, 47, 114, 34, -123, -88, 61, -35, 93, -73, 113, 111, 51, 69, -66, -30, 84, -106, -100, -116, 97, -1, 110, 118, 22, -55, -35, 95, -117, 65, -36, 4, -41, -124, 5, 126, -40, 25, -116, 124]");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "407691AFF933C3C5C4C3507FDC720F14353F74F368E591D565489EFBE5AAF13FB52355301586EAE5DC920779218FDE1C53B8A55E40FE04DB2E20D4400468039CA90BF956635A58E4202F722285A83DDD5DB7716F3345BEE254969C8C61FF6E7616C9DD5F8B41DC04D784057ED8198C7C" + "'", str61, "407691AFF933C3C5C4C3507FDC720F14353F74F368E591D565489EFBE5AAF13FB52355301586EAE5DC920779218FDE1C53B8A55E40FE04DB2E20D4400468039CA90BF956635A58E4202F722285A83DDD5DB7716F3345BEE254969C8C61FF6E7616C9DD5F8B41DC04D784057ED8198C7C");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey20);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey20);
        java.lang.Class<?> wildcardClass27 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[44, 51, 110, 23, -10, -49, 29, 45, 77, -83, 8, 105, 14, 43, 3, 5]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[37, -8, 54, -52, -7, -17, 33, 32, -40, 13, -103, -31, -37, 49, 46, -97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[118, -69, 91, -97, 32, 15, 63, -86, 39, -26, -83, 63, 84, 8, 126, -93]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[42, -127, 42, -72, 19, 8, 83, -74, -114, -29, -25, 57, 36, 74, -115, 53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[60, 47, 87, 118, 20, 28, -77, -6, -83, 75, -107, 90, 114, -88, -38, 122, -34, -2, 76, 104, 75, -82, -94, -68, -47, -18, 53, -105, 119, 38, 84, -45, 118, -69, 91, -97, 32, 15, 63, -86, 39, -26, -83, 63, 84, 8, 126, -93]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass22 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-37, 31, -57, 74, -15, 106, -109, 99, 56, 54, 94, -117, -28, -38, 53, 46]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-7, 51, 50, -114, 101, -85, 77, -19, -62, -73, -37, -25, 12, -48, 77, -114]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-92, 123, -6, 45, 78, 89, -63, -56, -17, 58, -88, -90, 10, 97, 54, -83]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-109, 44, 98, -73, 39, -22, 21, -110, 105, -6, 78, -128, 44, 32, -44, -3]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-62, -128, -24, -61, 2, -50, 75, 91, -68, 62, 36, 50, -81, 83, -125, -70]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[18, -102, 88, 120, -17, 15, -2, -24, -24, -97, 17, -20, 22, -13, 22, 66]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-110, 14, 108, -122, 120, -109, -99, -61, -51, 106, 10, 91, -50, -63, -90, 2]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-62, -128, -24, -61, 2, -50, 75, 91, -68, 62, 36, 50, -81, 83, -125, -70]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-18, -90, -86, 12, -11, -14, 112, 15, -98, -87, -14, 79, 108, 103, -67, 22, -108, 86, -92, -110, 65, 20, -55, -36, -90, 127, -10, 22, 125, 59, -50, 91, -102, -107, -66, 51, -117, 56, 42, 49, 9, 78, -116, 0, 48, -73, -106, -109, -22, -108, 100, -42, 31, 61, -113, 103, 103, -68, 58, 23, 92, -89, -94, -89, 70, 8, -60, -88, -61, 52, -73, 92, -53, -17, -48, -13, 8, -61, 97, -36, -55, -29, -7, -5, 94, -29, 61, -127, 24, 117, 13, 94, 102, -80, 74, -10, -62, -128, -24, -61, 2, -50, 75, 91, -68, 62, 36, 50, -81, 83, -125, -70]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-25, -55, 117, -115, 73, 120, 126, -83, 110, 117, 65, -8, 67, -70, 110, 15, 77, 105, -29, -128, -93, 68, 114, 17, -57, -92, -115, 47, -56, 88, -44, -11, -62, -128, -24, -61, 2, -50, 75, 91, -68, 62, 36, 50, -81, 83, -125, -70]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey22);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-57, -113, -97, 48, 93, 96, 5, 78, -21, -30, -54, -96, 16, 68, 53, -26]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-92, -86, 7, 100, 124, 75, -28, -106, -63, 122, 43, 87, 23, -16, -92, -50]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-92, -86, 7, 100, 124, 75, -28, -106, -63, 122, 43, 87, 23, -16, -92, -50]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-120, -25, -43, -105, 65, -125, -116, -71, 61, 4, -103, 12, 31, 124, -77, 4]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-92, -86, 7, 100, 124, 75, -28, -106, -63, 122, 43, 87, 23, -16, -92, -50]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[62, -55, -16, 62, 74, -31, -96, 55, 42, -63, 79, 114, 106, -117, 42, 121, -13, -127, -75, -27, -50, 74, -93, -52, 20, 6, -40, 10, -79, 12, 13, 73, -98, -40, -63, 63, -6, -50, 5, -11, -15, -18, -114, -12, -8, -37, -52, 0, -81, 9, -35, 63, 28, -121, -35, -81, 97, 102, 65, -28, -2, 18, 53, 2, -45, 50, 7, -41, 40, -90, -96, -25, 28, -9, -36, -2, 80, -7, -88, -114, -108, -51, 11, 24, 34, 90, -104, -54, 115, -84, 110, 28, 82, 125, 60, 88, -57, -113, -97, 48, 93, 96, 5, 78, -21, -30, -54, -96, 16, 68, 53, -26]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3EC9F03E4AE1A0372AC14F726A8B2A79F381B5E5CE4AA3CC1406D80AB10C0D499ED8C13FFACE05F5F1EE8EF4F8DBCC00AF09DD3F1C87DDAF616641E4FE123502D33207D728A6A0E71CF7DCFE50F9A88E94CD0B18225A98CA73AC6E1C527D3C58C78F9F305D60054EEBE2CAA0104435E6" + "'", str13, "3EC9F03E4AE1A0372AC14F726A8B2A79F381B5E5CE4AA3CC1406D80AB10C0D499ED8C13FFACE05F5F1EE8EF4F8DBCC00AF09DD3F1C87DDAF616641E4FE123502D33207D728A6A0E71CF7DCFE50F9A88E94CD0B18225A98CA73AC6E1C527D3C58C78F9F305D60054EEBE2CAA0104435E6");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3EC9F03E4AE1A0372AC14F726A8B2A79F381B5E5CE4AA3CC1406D80AB10C0D499ED8C13FFACE05F5F1EE8EF4F8DBCC00AF09DD3F1C87DDAF616641E4FE123502D33207D728A6A0E71CF7DCFE50F9A88E94CD0B18225A98CA73AC6E1C527D3C58C78F9F305D60054EEBE2CAA0104435E6" + "'", str14, "3EC9F03E4AE1A0372AC14F726A8B2A79F381B5E5CE4AA3CC1406D80AB10C0D499ED8C13FFACE05F5F1EE8EF4F8DBCC00AF09DD3F1C87DDAF616641E4FE123502D33207D728A6A0E71CF7DCFE50F9A88E94CD0B18225A98CA73AC6E1C527D3C58C78F9F305D60054EEBE2CAA0104435E6");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3EC9F03E4AE1A0372AC14F726A8B2A79F381B5E5CE4AA3CC1406D80AB10C0D499ED8C13FFACE05F5F1EE8EF4F8DBCC00AF09DD3F1C87DDAF616641E4FE123502D33207D728A6A0E71CF7DCFE50F9A88E94CD0B18225A98CA73AC6E1C527D3C58C78F9F305D60054EEBE2CAA0104435E6" + "'", str15, "3EC9F03E4AE1A0372AC14F726A8B2A79F381B5E5CE4AA3CC1406D80AB10C0D499ED8C13FFACE05F5F1EE8EF4F8DBCC00AF09DD3F1C87DDAF616641E4FE123502D33207D728A6A0E71CF7DCFE50F9A88E94CD0B18225A98CA73AC6E1C527D3C58C78F9F305D60054EEBE2CAA0104435E6");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-95, 19, -126, 75, 89, -69, 23, 113, 115, -85, -105, 36, -115, -105, 21, 116]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-72, -23, 40, -11, -72, 43, 95, -108, 63, -20, 37, -84, 48, 7, -20, 64]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-72, -23, 40, -11, -72, 43, 95, -108, 63, -20, 37, -84, 48, 7, -20, 64]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-62, 116, -117, 0, 21, -31, -95, 35, 10, 54, -82, 3, -31, 70, -9, -37]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-95, 19, -126, 75, 89, -69, 23, 113, 115, -85, -105, 36, -115, -105, 21, 116]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-67, 5, 47, -33, -35, 122, -1, -103, 74, -9, 35, -43, -117, -78, 105, -109, -80, 43, 15, 99, -16, -74, 78, -19, 29, -8, -108, -32, -74, -13, 103, 49, 83, 30, 18, -70, -74, -41, -106, 3, -91, -87, -29, 78, -68, -85, 104, 120, 81, -75, 40, 89, -77, -1, 71, 106, -49, 49, 116, -67, 49, 47, -60, -65, -77, -124, -71, -72, 21, 70, -90, 84, 125, -64, 102, -97, -92, -68, -100, -78, -125, -42, -38, 45, 8, -83, -50, -113, -111, 34, -118, 111, 100, 118, 82, 35, -95, 19, -126, 75, 89, -69, 23, 113, 115, -85, -105, 36, -115, -105, 21, 116]");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[98, 57, -83, 6, -119, 98, 0, 10, -54, 113, -114, -6, -8, 70, -46, 105]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[73, -4, 29, 37, 64, 110, 69, 101, -90, -35, 35, -84, -59, -4, 83, 78]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[69, 50, -38, 66, -39, 127, 46, 33, -57, 60, -101, 77, 17, -64, -19, -31]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[98, 57, -83, 6, -119, 98, 0, 10, -54, 113, -114, -6, -8, 70, -46, 105]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "6239AD068962000ACA718EFAF846D269" + "'", str9, "6239AD068962000ACA718EFAF846D269");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey85);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey85);
        java.lang.Class<?> wildcardClass94 = secretKey85.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -105, 14, -70, -121, 34, -102, 126, 78, 40, -106, 56, -24, 39, 85, -42]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-128, 108, 9, 29, -11, 93, 32, -105, 106, -102, -41, 66, 84, 103, -120, 119]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-28, 74, -47, -57, -19, -94, -105, 99, 70, -27, -124, -34, 66, -3, -32, 75]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[33, 70, 92, 17, -4, 0, -11, -27, 108, 113, -112, 68, 119, -54, -107, -79]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-47, 2, 46, -19, -72, 37, -98, 64, -78, 4, 36, -119, 36, -122, 6, -15]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-64, -51, 104, 30, -16, -63, -122, -50, -105, 33, -87, 97, -70, -118, 20, 37]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-93, 16, -67, 25, 104, -117, -82, 35, -104, 66, -128, 77, -45, -81, 33, -68]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-15, -118, -78, -96, 120, 2, -13, 64, -116, 111, -27, -49, 85, 34, 19, -45]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-125, -83, 59, -8, 74, -75, -107, 8, 55, -30, -67, -99, 33, 64, -56, 4, 74, -39, -45, -84, 102, 96, -37, 1, 73, -115, 87, -10, -28, 26, 34, 118, -93, 16, -67, 25, 104, -117, -82, 35, -104, 66, -128, 77, -45, -81, 33, -68]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-12, 61, -114, 22, -70, -33, 59, -11, 33, 30, -112, 86, -107, -8, 25, -124]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[122, 92, 36, -75, -80, -122, -59, -36, 100, 121, -107, -13, 16, -18, 37, 81]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[16, 21, 31, 108, 87, -109, -126, 84, -20, -102, -124, 67, 49, -120, -86, 77]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-100, -75, -45, 24, 104, -10, -25, -7, -115, -38, 87, 120, -113, -5, -25, -87]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[58, -92, -86, -63, 33, 34, -55, -77, 36, -120, -95, 16, 72, -6, 1, 111]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-123, 36, 34, 17, -5, 82, -36, 111, 123, -72, -77, 56, 13, -56, 19, 120]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[7, -67, 8, -101, -80, 18, 98, -104, 30, 109, 124, -45, -41, 19, -85, 45]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[19, -120, -66, 22, 79, -73, 117, -53, -80, 90, 107, 83, -38, 87, 85, -75]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-65, -121, 28, -76, -26, -109, 0, -128, -6, -20, -33, 114, -124, -5, -96, -10, -54, 109, 109, 101, -84, -98, -101, -85, -14, -61, 9, -112, -22, 59, -114, -36, 7, -67, 8, -101, -80, 18, 98, -104, 30, 109, 124, -45, -41, 19, -85, 45]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-72, 96, 87, -107, 2, -32, 24, -4, 95, 8, -90, 2, -20, 50, -105, -128, 121, 38, -54, -73, 50, 42, 109, -22, -97, 86, -115, 41, 82, -107, -38, -37, 7, -67, 8, -101, -80, 18, 98, -104, 30, 109, 124, -45, -41, 19, -85, 45]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-116, -6, -14, -63, -78, -96, 27, -115, -97, 18, -34, -74, 85, -120, 115, 114]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[13, 38, 118, 35, -115, -113, -70, -50, -58, -58, 82, 68, -16, 97, 62, -71]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[105, 37, -92, 64, 54, -97, 80, -127, -117, 86, 83, -81, 93, -40, 94, -115, 27, 13, -15, 69, 33, -49, -20, 78, -18, -77, -5, -36, 14, -54, 23, 73, -112, -65, 110, -19, -65, -109, -48, 63, 66, -50, 0, -64, 84, -2, 75, 29, -122, 117, -64, 27, -126, 118, -101, -6, 8, 28, -13, 49, 100, -40, 6, 63, -74, -41, 19, -104, 8, 8, -115, 51, 20, 102, 50, 9, 60, 30, 90, -97, -43, -115, -92, 86, -119, -61, -1, 5, 12, -78, 121, 123, -39, -67, 92, -97, -116, -6, -14, -63, -78, -96, 27, -115, -97, 18, -34, -74, 85, -120, 115, 114]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey20);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey50);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey50);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey50);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey50);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey50);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[65, -74, -71, -58, -53, 43, -77, 119, -72, -98, 95, -56, -115, 79, 58, 9]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, -96, 81, -100, -74, -3, 56, -87, -71, 123, -20, -52, -13, -43, 111, -45]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[35, 96, 114, 58, 51, -95, -71, 54, -112, 78, 35, -113, 93, 83, 26, 80]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[69, 90, 59, 67, -15, -21, -11, -11, -23, 39, 59, 69, 61, 12, 52, -111]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 47, -37, 33, -93, 24, 48, -52, 115, 126, 126, 108, -71, 45, -62, 84, 6, 77, -98, 34, 52, 93, -96, -4, 93, 20, -101, 94, -91, -73, -76, -26, 35, 96, 114, 58, 51, -95, -71, 54, -112, 78, 35, -113, 93, 83, 26, 80]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[41, 113, -52, 50, 13, 53, -27, 90, 32, 10, 111, -95, 79, -78, 39, 54, 60, 6, 125, -15, -110, -127, 68, 115, 67, -3, 12, 46, -121, 70, -16, 117, 16, 90, -71, 86, -73, -53, -96, -32, 24, -107, 127, 27, -6, -99, 66, 16, 113, -80, -8, -77, 12, -104, -120, -28, 109, 79, -32, -17, 35, 110, -103, -115, 87, 31, 109, 50, 35, 10, -104, -108, 109, 103, -82, -19, 25, 12, -78, -44, -121, -82, -11, -52, -9, -52, -115, 91, -105, 24, 93, 111, -17, -28, 58, -62, 35, 96, 114, 58, 51, -95, -71, 54, -112, 78, 35, -113, 93, 83, 26, 80]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[41, 113, -52, 50, 13, 53, -27, 90, 32, 10, 111, -95, 79, -78, 39, 54, 60, 6, 125, -15, -110, -127, 68, 115, 67, -3, 12, 46, -121, 70, -16, 117, 16, 90, -71, 86, -73, -53, -96, -32, 24, -107, 127, 27, -6, -99, 66, 16, 113, -80, -8, -77, 12, -104, -120, -28, 109, 79, -32, -17, 35, 110, -103, -115, 87, 31, 109, 50, 35, 10, -104, -108, 109, 103, -82, -19, 25, 12, -78, -44, -121, -82, -11, -52, -9, -52, -115, 91, -105, 24, 93, 111, -17, -28, 58, -62, 35, 96, 114, 58, 51, -95, -71, 54, -112, 78, 35, -113, 93, 83, 26, 80]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[21, -58, -66, -118, -36, 70, -82, 87, -61, -10, -56, -55, 124, -81, -6, 69, -124, 20, 34, 117, 109, 96, 106, -40, 69, 12, 102, -87, 63, 82, 7, -18, 35, 96, 114, 58, 51, -95, -71, 54, -112, 78, 35, -113, 93, 83, 26, 80]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-36, 44, -125, -118, -74, -67, -67, -25, -42, -45, -112, -49, 117, -87, -124, -38]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-87, 33, -108, -49, -93, 60, -80, -102, -48, -121, -40, -101, 93, 56, -33, -59]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-117, -53, 37, 61, -9, -52, -26, 94, -52, -78, 59, -4, 94, 28, 79, 100]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[35, 93, -108, -65, 83, 33, -102, 20, -46, 36, 44, 14, -70, 5, 74, -54]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[52, 1, 1, 123, -37, 20, 49, 78, -122, -76, 37, 90, -128, 116, -100, -39, -35, 52, -47, -13, 78, -26, 95, -114, -6, 95, 22, 27, -8, 34, 72, -125, -117, -53, 37, 61, -9, -52, -26, 94, -52, -78, 59, -4, 94, 28, 79, 100]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[110, 4, 23, -82, 87, 72, -62, -40, -86, -18, 63, 62, -88, 55, 29, -107, 110, 21, -113, -71, 115, -112, 55, -126, -51, 44, 114, 84, -99, 109, -122, -103, -117, -53, 37, 61, -9, -52, -26, 94, -52, -78, 59, -4, 94, 28, 79, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-62, 60, 44, 30, 66, 77, 113, 106, -82, -18, -113, -94, -2, 25, -91, 98, -113, -54, 15, -58, -56, -95, 39, 77, -108, -88, 31, -79, -27, 91, -77, 32, 103, -116, -5, -33, -59, 38, 113, 119, -33, 44, -30, -123, -127, 14, -25, 57, 37, 46, -91, 55, 111, 39, 41, 63, -23, -59, 8, 74, 87, -35, -82, -87, 21, -90, -25, -55, 39, -70, 50, 111, -102, -29, 15, 85, -71, 42, 1, -111, 1, 120, 14, 31, 60, 124, -128, 72, 94, -64, -9, -76, 5, 22, 95, 51, -117, -53, 37, 61, -9, -52, -26, 94, -52, -78, 59, -4, 94, 28, 79, 100]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[92, -6, -37, 123, 63, 28, 89, -12, 72, -94, -14, -109, -65, 103, -13, -101, 11, -20, -68, -5, 5, -113, 73, -3, -28, 126, -86, 74, 28, 124, -1, -106, -117, -53, 37, 61, -9, -52, -26, 94, -52, -78, 59, -4, 94, 28, 79, 100]");
        org.junit.Assert.assertNotNull(byteArray59);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[50, -117, -37, -64, -17, 9, -120, -33, 52, 83, -38, -48, 28, 70, -32, 18]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[53, 126, 25, -30, -102, 109, 32, -104, 68, -112, 116, -58, -45, -13, -6, -37]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-121, 13, -19, 0, 84, -128, 87, 123, -60, -59, 72, 96, 55, 16, 81, -23]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-79, -128, 72, -35, 47, 24, 75, 66, -115, 45, -33, -95, -118, 75, -87, 27]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[71, -9, 104, -102, 39, 52, 40, -51, 80, 23, 114, -91, -70, -93, 25, 90, -77, -21, 74, -21, -46, 40, 78, -93, 95, -106, 9, 69, 9, -84, -4, -84, -121, 13, -19, 0, 84, -128, 87, 123, -60, -59, 72, 96, 55, 16, 81, -23]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[108, -109, -73, 81, -115, 115, 102, 34, 74, 118, 20, -22, -50, 79, 2, -28, 17, 77, 102, 123, -83, -41, 53, 4, -101, 89, -19, 86, 79, 30, -31, 72, -121, 13, -19, 0, 84, -128, 87, 123, -60, -59, 72, 96, 55, 16, 81, -23]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[55, 44, -89, -41, -92, 31, -64, 100, -73, 58, 118, -121, 6, -79, 123, 18, -11, 73, 90, 10, 43, 60, -37, 123, 42, 21, -66, 17, 124, -27, 66, 60, -60, 119, -118, -121, 89, 84, -91, -54, 40, -107, 111, -112, -106, -112, -17, 81, 69, -18, 63, -89, -15, 86, -91, 10, -96, -32, 127, -53, 120, 91, -2, -42, 87, 24, -78, 26, 98, 68, -41, -95, 77, -25, -23, -73, 112, -88, 21, 104, -64, -74, 22, 113, 90, -23, 110, -38, -106, -79, 69, 60, -74, 104, 76, -63, -121, 13, -19, 0, 84, -128, 87, 123, -60, -59, 72, 96, 55, 16, 81, -23]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[55, 44, -89, -41, -92, 31, -64, 100, -73, 58, 118, -121, 6, -79, 123, 18, -11, 73, 90, 10, 43, 60, -37, 123, 42, 21, -66, 17, 124, -27, 66, 60, -60, 119, -118, -121, 89, 84, -91, -54, 40, -107, 111, -112, -106, -112, -17, 81, 69, -18, 63, -89, -15, 86, -91, 10, -96, -32, 127, -53, 120, 91, -2, -42, 87, 24, -78, 26, 98, 68, -41, -95, 77, -25, -23, -73, 112, -88, 21, 104, -64, -74, 22, 113, 90, -23, 110, -38, -106, -79, 69, 60, -74, 104, 76, -63, -121, 13, -19, 0, 84, -128, 87, 123, -60, -59, 72, 96, 55, 16, 81, -23]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-126, 99, -117, 40, 19, -111, 95, 75, 34, 26, -52, -48, 125, -34, -19, 85]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-109, 7, 53, -112, -10, -61, 63, 18, 48, 19, -84, 58, 54, 24, 85, -6]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-109, 7, 53, -112, -10, -61, 63, 18, 48, 19, -84, 58, 54, 24, 85, -6]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-96, 19, 119, -81, 100, 4, -90, 111, 0, 5, -20, 55, -19, -54, 4, 94]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey6);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey20);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[24, 97, 118, -86, -71, -81, 81, 28, 8, 10, -7, -109, -30, -77, -14, -105]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[101, 0, 27, 96, 54, 26, -40, 37, 31, 28, -110, -85, 61, 91, -34, 11]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[101, 0, 27, 96, 54, 26, -40, 37, 31, 28, -110, -85, 61, 91, -34, 11]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[119, 32, 65, 111, 113, -115, -105, 77, -121, 63, 42, 68, 90, 96, -110, 2]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[24, 97, 118, -86, -71, -81, 81, 28, 8, 10, -7, -109, -30, -77, -14, -105]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-97, 92, -50, 52, 32, 33, 55, 18, -26, 48, 88, 111, 0, 6, 69, -77]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[36, -72, 91, -11, 40, 25, 91, 45, -42, -72, -57, 122, 20, -58, -62, -75]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[36, -72, 91, -11, 40, 25, 91, 45, -42, -72, -57, 122, 20, -58, -62, -75]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-97, 92, -50, 52, 32, 33, 55, 18, -26, 48, 88, 111, 0, 6, 69, -77]");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey52);
        java.lang.Class<?> wildcardClass61 = secretKey52.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-46, 117, 84, 11, 52, -35, 73, 100, -74, 85, 33, -60, -103, -4, 33, -49]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[31, 46, 119, 92, -35, -63, 73, 58, -20, -38, 33, -5, -21, 14, 45, 31]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-91, 122, -104, -28, 89, -105, -28, 66, -95, -56, 110, 36, 79, 97, 18, -2]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-88, -121, 10, 71, -64, 102, 23, 71, 7, -14, -103, -85, -84, -53, 122, -23]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-128, -85, -100, -73, -46, 72, -53, 106, 39, 110, 99, -36, -83, 43, 25, -44]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-15, 90, -26, -116, 88, -13, 118, 25, 6, 10, -95, -63, -81, -31, -124, 35]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-65, 10, 91, 40, -123, -86, -96, -53, -50, 109, -56, -1, 13, 17, 86, 104]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-80, 32, 96, -7, -121, -111, 53, -28, 106, -111, 49, -72, 20, -119, 63, -24]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, -36, 55, -81, 80, -74, 74, -59, -19, 55, -20, -18, -49, 121, -115, 112]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[9, -100, -42, -8, 122, -76, -67, 107, -41, 67, -31, 122, 42, 63, 123, -55]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[120, 70, -42, -116, -78, -125, -88, 85, -124, -111, 90, 103, 108, 20, -69, -91]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[39, -36, 55, -81, 80, -74, 74, -59, -19, 55, -20, -18, -49, 121, -115, 112]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-34, -56, 86, 117, -57, 22, -10, 64, -52, -100, 58, 46, 102, -119, 34, 119, 90, 84, -59, 81, -16, 15, 125, -64, -53, 10, 3, 58, 23, -110, 84, 8, 108, -46, 95, -73, 8, 50, -108, -67, 31, 104, -31, 85, 38, -48, 100, -48, 122, -87, -69, 114, 99, 124, 81, 38, -43, 95, 30, 72, -98, -45, 105, -46, -83, -27, -115, 74, 60, 43, -123, -24, 16, 58, 33, -96, 69, 112, 113, -8, 40, -40, -103, 35, -70, -8, -128, 26, 87, -126, 9, -18, 48, 50, -79, 19, 39, -36, 55, -81, 80, -74, 74, -59, -19, 55, -20, -18, -49, 121, -115, 112]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-16, 11, -74, -119, -76, 45, 83, -89, 127, 18, 77, -107, 103, 124, 91, -44, 20, -108, 7, -104, -42, -35, 42, 24, 57, -66, 116, -69, 48, -32, -115, -59, 7, 80, 109, 118, 3, -79, -113, -91, 44, -117, 11, 102, 122, -30, -67, -83, 114, 96, -88, -48, 124, -94, 113, -94, -111, 20, 79, -103, -50, -38, -65, -32, -54, 2, 83, -96, 12, -46, 61, 116, 58, 26, 96, -63, -38, -9, 28, 56, -126, -116, 118, 17, 10, 12, 47, 21, 85, 55, -24, -118, -16, -19, 85, 75, 39, -36, 55, -81, 80, -74, 74, -59, -19, 55, -20, -18, -49, 121, -115, 112]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass10 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey4);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey26);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-3, 56, 100, 33, -98, -5, 72, 9, -115, -17, -22, -88, -116, 43, 98, 108]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-88, 60, -45, 12, -15, 90, 100, -61, 93, -21, 63, -99, 28, 58, 13, 34]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[13, 71, -13, -66, -4, 36, 13, -27, -93, 17, 20, -20, 86, 54, 6, 90]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[115, 121, -15, 50, 6, -57, -43, 30, 68, -88, 20, -21, 8, 53, -128, 103, 53, -120, -35, -38, -100, -118, 11, -108, -92, -90, -59, -48, 85, 31, 111, -20, -3, 56, 100, 33, -98, -5, 72, 9, -115, -17, -22, -88, -116, 43, 98, 108]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-9, 21, 84, -36, 36, 33, -18, -16, 29, -73, -31, -110, 34, 102, -75, 52]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 17, -94, -19, 59, -125, 18, -46, -34, 32, 31, 46, -18, 36, 115, -50]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-51, 25, -36, 119, -47, -66, 75, -56, -127, -53, -105, 71, -23, -9, -61, -29]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[14, 88, 34, -109, 30, 52, -126, 20, 86, -9, 28, -92, -78, 81, 92, -73]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-87, 59, 66, 98, 35, -42, -17, -105, -15, -46, -93, -17, 1, -67, 78, -53, -124, 81, 25, -89, -11, -122, 96, 119, 22, -114, -32, -36, -82, 47, -2, -58, -51, 25, -36, 119, -47, -66, 75, -56, -127, -53, -105, 71, -23, -9, -61, -29]");
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey3);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-114, -43, 120, -74, 67, -105, -16, 23, -115, 104, -68, -77, 15, -90, -23, 48]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[3, 36, -50, -68, 112, -124, -49, 2, -82, 83, -37, 117, -115, 92, 120, 107]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-40, 68, -71, 34, -70, 19, 99, -24, -111, -91, 64, 46, 9, 24, -9, 50, 13, -16, -52, 52, -17, -71, 53, -17, 32, 56, -51, -88, -11, -95, -81, 36, -114, -43, 120, -74, 67, -105, -16, 23, -115, 104, -68, -77, 15, -90, -23, 48]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey39);
        java.lang.Class<?> wildcardClass47 = byteArray46.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-107, 87, -50, -58, 111, 64, -95, 83, 104, -39, -116, 17, -64, -88, -74, -97]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[3, -110, -98, -118, -92, -6, 97, 104, -50, 36, -8, -108, 98, -70, 33, 68]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, -93, -122, -93, -123, -23, 55, 74, -128, 111, 29, -51, -107, -49, -83, 119]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-102, -124, -75, 72, 8, -56, 113, -7, 36, -16, 39, 95, 66, -85, 16, -91]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[70, -87, 80, 43, -35, 103, -83, -24, 101, 74, -51, 50, -18, 96, -75, 44]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-126, -95, 17, -11, -78, -2, -125, -119, -93, 9, 50, 65, 65, 4, -119, -76]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-124, 114, 49, -56, -104, -105, 45, 107, -13, -8, -48, 90, -10, -100, 20, -19]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-95, -44, -47, 27, -29, -112, 6, 94, 106, -24, -21, -70, 101, 15, -63, 16]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[80, -44, 68, -32, 66, 44, -19, -108, -95, -32, 102, 22, 114, -78, -96, -85, -7, -29, -71, 50, -32, 64, 54, 69, 12, 118, 24, 5, 91, 110, 52, -100, -124, 114, 49, -56, -104, -105, 45, 107, -13, -8, -48, 90, -10, -100, 20, -19]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-31, 59, -17, 91, -83, 62, 2, 76, 22, -56, -118, -39, 121, 63, -92, -87, 51, 63, -75, 31, -93, 51, 92, -95, -77, 107, 27, 33, -92, -27, -114, 29, -124, 114, 49, -56, -104, -105, 45, 107, -13, -8, -48, 90, -10, -100, 20, -19]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey40);
        java.lang.Class<?> wildcardClass44 = secretKey40.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-101, -72, 82, 123, 26, 109, 91, -4, -2, 33, -46, 28, -118, 56, 62, -7]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[80, -111, 67, -91, -4, -52, -27, -117, 91, 101, 31, 68, 75, 81, 107, 9]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[98, -34, -122, 19, -65, -7, -4, -92, -20, -117, -72, 86, 67, -111, -58, 33]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-14, -16, 12, -65, 69, -44, 106, 26, 32, 66, -95, -48, 22, -39, 63, 2]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[55, 52, -68, 40, -125, -70, 108, -105, 17, 115, 93, 83, -53, -4, -118, -96]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[114, 96, -50, -116, 30, 79, 61, -16, -10, 111, 126, -99, -83, 90, 38, -111, 60, -47, 106, -32, 113, 53, -6, -67, -109, -27, -45, -59, -112, -117, 66, 108, -14, -16, 12, -65, 69, -44, 106, 26, 32, 66, -95, -48, 22, -39, 63, 2]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[67, -125, 109, 52, -55, 86, 20, 38, 0, -75, 34, 8, -68, 94, 16, 31]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-64, -95, -73, 22, 57, 38, -39, -27, 21, -15, -114, 10, -63, -77, -87, 97]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[85, 41, -2, -15, 25, -127, -39, 107, 124, 103, 49, 38, -94, -85, -115, 75]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-115, 43, -114, -107, 92, -104, -98, 125, 49, 120, -108, -44, 1, 104, 124, 102]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-39, -28, -107, 92, -25, 119, -16, -38, 41, 41, -82, 106, 42, -68, 45, -83, 109, -115, 11, -18, 99, -62, -39, 94, -90, 103, 71, -94, 55, -127, 64, -4, -54, -120, -29, -55, 21, -91, -81, -111, -114, 113, -31, -100, 108, 43, 112, -107, 4, 32, -115, -5, 127, -93, 68, 114, 105, 26, 11, -76, -106, 75, 5, -89, -45, 109, 14, 35, 23, -21, 91, 109, -70, 116, 62, -74, 123, 94, -17, 19, -64, 101, 75, -63, 18, -112, 70, 7, -10, -122, 127, 22, 25, -5, -126, -9, 85, 41, -2, -15, 25, -127, -39, 107, 124, 103, 49, 38, -94, -85, -115, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey26);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey26);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey26);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-22, 83, -117, -48, 46, -100, -47, 14, 12, -7, -81, -65, 57, -112, 112, 54]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[124, 4, -127, -29, 107, -26, 45, 102, 21, -52, -91, 86, -91, -69, 54, -96]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "7C0481E36BE62D6615CCA556A5BB36A0" + "'", str5, "7C0481E36BE62D6615CCA556A5BB36A0");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "7C0481E36BE62D6615CCA556A5BB36A0" + "'", str6, "7C0481E36BE62D6615CCA556A5BB36A0");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[73, -20, -105, -21, 39, -80, 20, 45, -34, -8, 95, 115, -80, -42, -6, 69]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[96, -1, 34, 98, -127, -117, 45, -81, 114, -90, -48, 108, -35, 54, 2, -111]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-36, -21, -118, -64, -121, -59, -33, -10, -39, 114, -90, 29, -28, 92, -2, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[22, -109, 44, 87, -97, -34, 59, -126, 29, -64, 16, 123, 102, 0, -83, 87]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[38, -115, 35, -114, -1, 85, 94, -69, -13, -127, -124, 78, 71, -115, -5, 5, -21, 60, -8, 98, 39, -8, -53, 60, 28, 43, 117, 47, -16, -95, -14, 110, -36, -21, -118, -64, -121, -59, -33, -10, -39, 114, -90, 29, -28, 92, -2, 103]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-76, 93, -77, -75, -126, -59, 83, -83, 97, -90, -108, 57, 125, 65, 56, 92, -39, 99, 84, 117, -26, -78, 58, -37, 99, 119, -122, 73, 118, 78, 80, 114, -36, -21, -118, -64, -121, -59, -33, -10, -39, 114, -90, 29, -28, 92, -2, 103]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[71, 87, 8, 33, 117, -40, 63, 10, 121, 60, -114, 84, 75, 94, 55, -23, -69, 119, -126, -56, 56, -22, 43, 25, 120, 73, -47, -87, -14, -19, 7, 81, 104, 12, 93, -122, -15, -4, 120, 27, 23, 119, -96, 10, 30, 64, -46, 52, -122, 72, -20, 91, 21, 109, 35, -128, 103, -71, 102, -102, 85, 14, 20, 25, 66, -109, -76, -26, -95, 75, 60, -72, -101, 50, 55, 30, 81, -32, 23, 68, 104, -116, 121, 30, 56, -59, 15, 88, -75, -115, 55, 54, 118, -88, -47, 13, -36, -21, -118, -64, -121, -59, -33, -10, -39, 114, -90, 29, -28, 92, -2, 103]");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.Class<?> wildcardClass10 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-83, -43, -29, 97, -104, 56, 25, 60, -66, 79, -103, 34, 6, -46, -24, 108]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-111, -5, 86, 12, 91, -73, 5, 47, 87, -1, 124, -52, -114, -73, 111, 62]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey18);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey64);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey64);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey64);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[46, -122, -95, -92, 14, -57, 91, -81, 115, 95, 85, -73, 111, 64, 32, -87]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100, -42, -108, -89, 127, 19, -47, -89, -125, 34, 14, 119, 34, -27, -33, -30]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-76, -109, 120, 119, -43, -77, -72, 27, 10, -31, 85, 25, 113, 67, 120, 91]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-44, 53, 16, 77, -94, -106, 59, -87, -83, -3, 5, 11, -125, 2, 63, 40]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-59, -112, -128, 120, -23, -67, 96, -127, 50, -78, 66, -32, 111, -21, -63, -25, 69, 18, 87, 37, -126, -63, -128, -115, -105, 123, 14, -47, 114, 18, 122, -89, -76, -109, 120, 119, -43, -77, -72, 27, 10, -31, 85, 25, 113, 67, 120, 91]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[62, -123, -42, 95, 122, 12, -109, -86, -14, -112, -20, -7, -28, -74, -91, -88, -39, -87, 89, -37, 99, -124, -40, -115, -45, 112, 100, 127, -95, -114, 72, -56, -102, 69, -77, -83, -125, 37, 36, -106, -61, 84, 16, 12, -107, 121, 111, -6, -67, 40, 57, 68, -11, 46, 19, -93, -50, -37, -11, 59, 85, 17, -38, -36, 31, -19, -47, 11, 5, 127, -69, 15, 113, -55, -30, 21, -49, 23, -126, 49, -75, 89, -10, -121, -56, 13, 74, -125, -100, 41, -13, 111, -13, -71, -44, 56, -76, -109, 120, 119, -43, -77, -72, 27, 10, -31, 85, 25, 113, 67, 120, 91]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-24, 98, -17, -23, 40, -29, 45, -94, 69, -45, 29, 70, 38, 56, -122, 107]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-125, -21, -39, -5, -54, 120, -83, -12, 1, -93, -18, -62, -49, 118, 111, 53]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[65, -60, -25, 29, -121, 86, 24, 121, 68, 101, 115, -75, 0, -15, -56, 41]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-69, -13, -107, 23, -25, 10, 119, -15, 12, -31, -73, 67, 50, 93, 31, -54]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-105, 121, -82, 50, 70, -13, -29, 106, -104, 110, -37, -127, 119, 112, -59, 2]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-51, 56, 112, -74, 19, 86, -114, 56, -103, 17, 96, -110, -64, 63, -11, 87]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[99, 12, 127, 86, 19, -116, 21, -106, -38, 13, -118, -79, -38, -31, -24, -67]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[30, 80, -106, 5, -105, -81, 50, -47, -85, 73, 84, -97, 60, 28, -47, -20]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-41, -26, 28, 112, 75, 31, -67, 88, 31, 91, -104, -24, 10, 69, 110, 33, 57, -123, -22, 91, 37, -43, -106, -69, 11, 26, -44, -37, 80, -94, 87, 31, 99, 12, 127, 86, 19, -116, 21, -106, -38, 13, -118, -79, -38, -31, -24, -67]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-117, 51, -101, 38, -88, 85, 116, 119, -49, -36, -126, -34, 69, 113, 22, 3, -24, 45, 69, -9, -109, -20, -125, -99, -90, -118, 53, -21, 10, 101, 102, 63, 99, 12, 127, 86, 19, -116, 21, -106, -38, 13, -118, -79, -38, -31, -24, -67]");
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey17);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-18, 107, -109, 29, 48, 116, -58, -57, -42, 112, -98, 21, 69, -45, 60, -92]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-96, -66, 10, -32, 118, 34, 66, 76, 38, -37, -18, 92, 1, 3, -28, 88]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-96, -66, 10, -32, 118, 34, 66, 76, 38, -37, -18, 92, 1, 3, -28, 88]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[6, -51, -118, 29, -1, 104, -31, 15, -124, 92, -100, -98, 119, -109, 94, 121]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-96, -66, 10, -32, 118, 34, 66, 76, 38, -37, -18, 92, 1, 3, -28, 88]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-105, 80, -41, 69, -84, -14, -53, -24, -18, 39, 79, 15, 113, 79, 42, -21, 91, 12, -20, -105, -43, -120, 3, 32, 64, 27, 80, -103, 72, 96, -89, 1, 52, -42, -4, -11, 50, -75, -97, 46, -61, -17, -63, 86, 19, -1, -49, -8, 108, -126, 92, 36, -111, 121, -27, 106, 98, -114, -65, 87, 93, -55, -60, -104, 122, -5, -116, -69, -60, -122, 97, -98, 86, -103, -21, -77, 13, 17, -1, 26, -93, -119, -95, 32, -114, -63, -89, -76, -9, -100, 92, -109, 73, -84, 88, -68, -18, 107, -109, 29, 48, 116, -58, -57, -42, 112, -98, 21, 69, -45, 60, -92]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9750D745ACF2CBE8EE274F0F714F2AEB5B0CEC97D5880320401B50994860A70134D6FCF532B59F2EC3EFC15613FFCFF86C825C249179E56A628EBF575DC9C4987AFB8CBBC486619E5699EBB30D11FF1AA389A1208EC1A7B4F79C5C9349AC58BCEE6B931D3074C6C7D6709E1545D33CA4" + "'", str13, "9750D745ACF2CBE8EE274F0F714F2AEB5B0CEC97D5880320401B50994860A70134D6FCF532B59F2EC3EFC15613FFCFF86C825C249179E56A628EBF575DC9C4987AFB8CBBC486619E5699EBB30D11FF1AA389A1208EC1A7B4F79C5C9349AC58BCEE6B931D3074C6C7D6709E1545D33CA4");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[7, 88, 62, -40, 43, -116, -28, -67, 18, -121, 114, -37, -57, 48, -3, -87]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-66, 32, 8, -128, 6, 111, -101, 89, 117, 77, -117, 65, -75, 53, -37, 50]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[46, -36, 118, 86, 119, 87, -68, 16, 84, 26, -74, -14, 103, 37, -57, -21, 57, -69, -7, 108, -95, -95, 71, 9, 86, 42, -39, 44, -94, -1, 55, 116, 99, 3, -75, -28, 72, -91, -63, 5, 59, 70, 63, -1, 109, 91, -25, 107, -59, 98, 83, 23, -31, 41, 92, 79, 48, 104, 79, -25, -97, -5, -73, 76, 125, 44, 86, -78, -105, -1, -96, -36, -45, -73, -79, -58, -63, -46, -31, -24, -23, -106, 19, 127, 121, 25, -115, -63, 24, -105, -128, 86, 76, -30, 78, -109, 7, 88, 62, -40, 43, -116, -28, -67, 18, -121, 114, -37, -57, 48, -3, -87]");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey32);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-36, 52, -75, 60, -48, 90, -67, 10, -120, 3, -45, 11, -97, -73, 23, 55]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[86, -3, -111, 23, 113, -85, 118, 109, 43, -111, 6, 66, 26, 90, 78, 86]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-64, 44, 94, 116, -67, 117, 39, 78, 121, -47, -21, -75, 23, 19, 71, 123]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-50, 7, 66, -66, 108, 16, -81, -25, -115, -107, -96, 11, 95, -53, 101, -67]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-98, -104, 15, 14, -6, 61, 13, 75, 91, 107, 125, 105, -126, -108, -80, 35]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[67, 8, 97, -111, 117, 125, -109, -9, -91, 72, -35, -59, -12, 98, -108, -26]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-9, -88, -32, 36, 110, -73, -43, 12, -34, -78, -127, 76, -83, 86, 1, -11]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[16, 14, -76, -118, -92, -90, -67, 25, 85, -108, 86, -21, -46, 111, 121, -24]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-104, -71, 112, -83, 52, -85, 112, -73, 13, -35, 75, -23, 100, -127, -72, -128, -111, 67, 51, 21, 53, 3, -33, 86, -111, 0, 77, -117, -45, 28, -52, -2, -9, -88, -32, 36, 110, -73, -43, 12, -34, -78, -127, 76, -83, 86, 1, -11]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey5);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey40);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey40);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey40);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-3, -65, -70, -19, 81, 34, 114, 24, -93, 113, -24, 52, 6, -104, 81, -96]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-99, -120, 97, 98, 4, 68, 30, -2, -39, -80, 55, 71, 96, -85, -119, 8]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-99, -120, 97, 98, 4, 68, 30, -2, -39, -80, 55, 71, 96, -85, -119, 8]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-3, -65, -70, -19, 81, 34, 114, 24, -93, 113, -24, 52, 6, -104, 81, -96]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-8, 111, 13, 91, -78, -13, 108, -23, 82, 48, -87, -42, 125, -19, -78, 58]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[53, 56, -55, 38, -45, -96, 67, -33, -116, 48, 14, 97, 52, 74, 79, 117]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[61, -76, -6, -40, 74, -92, 21, -69, 24, 124, 78, 122, 60, 77, 116, 84]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[126, 49, 118, 42, 31, -31, -54, 83, -103, 54, -27, -2, -23, 17, 87, -19]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[85, 35, 2, 90, 122, 33, 30, -84, 62, 80, 12, -47, 85, 50, 49, 83]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-45, -36, -12, 18, -55, -49, -29, 46, -116, 79, 75, -79, 79, -36, 15, -12]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-123, -113, -71, 87, 35, 15, -29, 60, 106, 14, 56, 104, -115, -113, -55, -29, -66, 52, -12, -78, 34, 9, 23, -62, -22, -77, 123, -101, -124, 13, -114, -9, 85, 35, 2, 90, 122, 33, 30, -84, 62, 80, 12, -47, 85, 50, 49, 83]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-106, -74, -51, 6, -21, 44, -88, -62, -110, -28, -90, 2, -113, 84, -62, -60, -113, 60, 110, -4, -121, 93, -119, -86, -83, 80, -76, -98, -68, -96, 126, -4, 85, 35, 2, 90, 122, 33, 30, -84, 62, 80, 12, -47, 85, 50, 49, 83]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[23, -14, -28, -16, 26, 21, -99, 119, 69, 44, -53, -58, -6, 115, -17, -112, 12, -112, 46, -80, 85, -25, -92, -107, -116, 20, 122, -87, 106, 24, -53, -86, 56, 18, 77, -48, -110, 56, -1, -100, -39, -60, -44, 21, -109, 49, -61, 58, 15, -73, 108, -24, -84, -54, -95, -5, -93, 6, -95, -36, 7, -59, 9, -27, -4, -127, 97, 105, -29, -54, -28, -61, 57, -70, 84, -19, 31, 40, 78, 24, -108, -83, -77, -84, -68, -25, 72, 10, -74, -33, -78, -105, -2, 89, -24, 65, 85, 35, 2, 90, 122, 33, 30, -84, 62, 80, 12, -47, 85, 50, 49, 83]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-43, 1, -34, -58, 114, -60, -6, -59, 116, -102, -28, 99, 90, 46, -38, -56]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[33, 103, -128, -98, 80, -73, -95, 19, 83, 1, 36, 87, -47, 106, -76, 13]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-85, 124, -24, -20, 115, 69, -18, 58, -91, -36, -113, -16, 5, -101, -88, -35]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-121, 57, -105, 92, -59, -6, 83, 91, 60, 26, -60, 28, -32, 29, 8, -125]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-4, 4, -61, -77, -74, 91, 101, 6, 4, 43, 30, 62, 124, 98, 40, -13, -74, -37, -67, 80, 101, 54, -92, 48, 96, -55, -5, 0, 51, 11, -107, 74, -85, 124, -24, -20, 115, 69, -18, 58, -91, -36, -113, -16, 5, -101, -88, -35]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-68, -114, 21, 101, -41, 40, 115, 103, -124, -66, -11, 75, -76, 88, -86, 111, 38, 73, -36, -113, 100, -24, 73, -67, 95, 12, -102, -69, 25, -73, 68, -77, -85, 124, -24, -20, 115, 69, -18, 58, -91, -36, -113, -16, 5, -101, -88, -35]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-113, -111, 5, 13, 63, 122, 33, 59, 76, 42, 45, -41, 127, 4, -39, -77, 22, -95, 95, 84, -30, 36, -104, -14, 103, -58, -121, 36, -63, -62, -81, 52, -124, 104, 72, 87, -96, -56, -81, -27, -82, 3, 91, 55, 58, -5, -104, -52, -103, 44, 59, 120, 94, -13, 82, -117, 78, 107, -97, 119, -30, -44, 0, -18, -107, 7, -29, 57, 118, 3, -19, 115, -67, -45, 126, 70, 27, 124, -44, -111, -72, -84, 41, -6, 70, 38, 61, -116, 110, -59, -51, 26, -73, 62, -46, -104, -85, 124, -24, -20, 115, 69, -18, 58, -91, -36, -113, -16, 5, -101, -88, -35]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.Class<?> wildcardClass32 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-116, 50, 101, 67, -2, 104, 26, -49, -23, -76, -5, -8, -1, 52, -36, -42]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-106, 68, 21, 84, -93, 42, 76, 108, -21, -103, -53, 33, -45, 41, 1, 90]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[109, 43, 2, -28, 105, 61, 54, 54, -100, 17, -104, 67, -7, 44, 127, 109]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-14, -18, -98, -35, -24, -49, -35, -74, -39, 34, -24, 39, -34, -107, 57, -82]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[58, 17, -124, -127, 48, -72, -97, 112, 25, -1, 64, -96, 108, -86, 125, -80, -66, -59, 24, 87, -37, -118, -105, -4, 6, 89, 72, 98, 5, 98, 76, -113, 109, 43, 2, -28, 105, 61, 54, 54, -100, 17, -104, 67, -7, 44, 127, 109]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[109, 43, 2, -28, 105, 61, 54, 54, -100, 17, -104, 67, -7, 44, 127, 109]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-14, -18, -98, -35, -24, -49, -35, -74, -39, 34, -24, 39, -34, -107, 57, -82]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-60, -63, 37, -4, 83, -118, -12, -12, 67, 33, 61, -28, -71, 1, -66, 8, 3, 51, -28, -75, -33, 40, 64, 111, -60, -77, -11, -55, -125, 96, 47, -116, 109, 43, 2, -28, 105, 61, 54, 54, -100, 17, -104, 67, -7, 44, 127, 109]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[82, -41, 24, -20, -89, -114, 16, -77, -68, 117, 12, -13, -128, -80, -1, -103, -25, 105, 2, 100, 116, -82, 122, -101, -119, 16, -62, -121, -122, 108, 116, -106, -64, 85, -57, -46, -94, -94, -2, 17, 92, -89, 28, 64, -126, 38, -101, -97, 30, 71, -89, 97, -29, -49, 126, -5, 112, -75, -1, 58, 17, 89, 95, -76, -74, -27, 36, 44, -120, -110, 124, 89, 104, -42, -56, -87, 2, 110, 87, -23, 25, 3, -41, 8, 79, 120, 93, 36, -124, 102, 118, -30, -51, -53, 85, 33, 109, 43, 2, -28, 105, 61, 54, 54, -100, 17, -104, 67, -7, 44, 127, 109]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D" + "'", str31, "52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-123, -73, -124, 25, 26, -50, -70, -121, 34, -95, -57, -90, -52, -75, 6, -101]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[72, -115, -43, 59, 65, -80, -29, 127, -49, 17, -109, 49, -104, -7, 3, 51]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-119, -45, -10, -122, -8, -107, 108, 60, -18, 117, 127, 22, 19, -67, -73, 42]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[92, 12, -66, 41, 86, -116, 1, -78, -24, -21, -84, 54, -5, -31, 95, 88]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[123, -89, -25, -8, 35, -110, 98, -124, -91, 121, -108, -62, -83, 8, 63, -40, -123, -125, -64, -34, 26, -97, 9, 7, 29, 72, 106, 51, -63, 96, 105, 105, -119, -45, -10, -122, -8, -107, 108, 60, -18, 117, 127, 22, 19, -67, -73, 42]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[14, 50, 18, 48, 19, -86, -121, 105, 59, -71, -43, -95, -95, 20, -61, 68, 42, 4, -83, 66, -21, 101, -94, 42, -123, 66, -16, 61, 118, -26, -107, 109, -119, -45, -10, -122, -8, -107, 108, 60, -18, 117, 127, 22, 19, -67, -73, 42]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[64, 124, 118, 31, 83, -109, -117, 13, 68, 67, -118, 65, -60, -128, -51, -55, 74, 18, -116, -78, 35, 91, 36, -96, -88, -53, 39, 37, -17, -6, -25, 28, 85, 96, 10, -113, 15, 117, 63, -107, 59, -39, -81, 65, -24, -66, -60, -101, 20, -53, -49, 49, -30, -47, -95, 3, 71, -55, -95, -42, 115, -11, 86, -17, 48, -88, 63, -90, 3, -32, -60, -103, -63, 56, -67, 88, -81, -104, 65, 78, -89, 127, 104, 101, -72, 47, -121, 69, -18, -57, -53, 16, 2, 102, 99, 126, -119, -45, -10, -122, -8, -107, 108, 60, -18, 117, 127, 22, 19, -67, -73, 42]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-6, -86, 10, 59, -105, 114, -89, 82, 97, -39, -116, 98, -46, -34, 36, 79, -104, -83, -122, 80, -125, 72, -99, 0, -113, 58, 2, 33, 104, -29, 9, 20, -62, -120, 106, -122, 108, 101, -71, 6, 94, 67, 123, 98, 47, -23, 65, 127, -61, -17, -41, -79, -100, -16, -13, 89, -105, -63, 3, -76, 81, -61, 84, 57, 115, 104, -69, -53, 108, -35, -43, 117, -32, 60, -17, 42, 63, -108, 74, -108, 7, 102, 113, 16, 94, -103, 1, 54, 93, 68, -34, 121, 105, 17, 17, 91, -119, -45, -10, -122, -8, -107, 108, 60, -18, 117, 127, 22, 19, -67, -73, 42]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey28);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[27, 111, -29, 88, 110, -56, -84, 120, -9, -34, 71, 56, 98, -54, -13, -49]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 53, -103, -108, 91, 111, 1, -93, 1, -65, -42, 12, -43, 105, 89, 47]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[84, 20, 115, -119, 2, 33, -50, -30, 110, 7, 27, -31, -115, 52, 48, -26, 46, -20, -19, -54, -44, 24, -66, 116, -39, -52, 9, 101, 17, -105, 69, -101, 27, 111, -29, 88, 110, -56, -84, 120, -9, -34, 71, 56, 98, -54, -13, -49]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "541473890221CEE26E071BE18D3430E62EECEDCAD418BE74D9CC09651197459B1B6FE3586EC8AC78F7DE473862CAF3CF" + "'", str7, "541473890221CEE26E071BE18D3430E62EECEDCAD418BE74D9CC09651197459B1B6FE3586EC8AC78F7DE473862CAF3CF");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "541473890221CEE26E071BE18D3430E62EECEDCAD418BE74D9CC09651197459B1B6FE3586EC8AC78F7DE473862CAF3CF" + "'", str8, "541473890221CEE26E071BE18D3430E62EECEDCAD418BE74D9CC09651197459B1B6FE3586EC8AC78F7DE473862CAF3CF");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "541473890221CEE26E071BE18D3430E62EECEDCAD418BE74D9CC09651197459B1B6FE3586EC8AC78F7DE473862CAF3CF" + "'", str9, "541473890221CEE26E071BE18D3430E62EECEDCAD418BE74D9CC09651197459B1B6FE3586EC8AC78F7DE473862CAF3CF");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-24, -114, -125, -65, 50, -99, 125, 65, -74, 77, 37, 89, 2, 8, -40, 29]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-120, 23, -79, 3, -12, 100, 10, -93, -95, 83, 7, -116, -122, 61, -81, 95]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-68, 36, 98, 50, 5, 22, -53, 41, 88, 28, -50, -59, -30, 89, -70, -121]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-89, 124, -122, -34, 7, 65, 83, 18, -83, -16, 100, 13, -19, 16, -123, 48]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-43, -20, 13, -77, -97, 62, 125, -83, 36, -51, 58, -9, 112, 81, -78, 82, -23, 63, 82, 8, -27, -55, 74, -27, -51, -36, -14, -21, 123, 38, 57, -44, -68, 36, 98, 50, 5, 22, -53, 41, 88, 28, -50, -59, -30, 89, -70, -121]");
        org.junit.Assert.assertNotNull(byteArray34);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey3);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-61, -6, -32, -75, 12, -6, -88, 35, 16, 51, -67, 32, -48, 46, 80, -40]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[7, 124, 28, -48, -53, 31, 28, 1, -72, 112, 24, -123, -19, -123, 85, -23]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-43, -61, -11, 57, 16, 89, -38, 101, -107, -10, 116, 65, -75, 127, 27, -7, -19, 33, -43, -26, -20, 126, 100, 104, 44, 112, -15, -100, -80, -128, 19, -40, -32, 44, 88, 16, 75, -94, -11, 28, 99, -80, 23, 111, -100, -97, 51, -71, -14, -100, -39, -1, 85, -95, 63, -102, -86, 112, -85, 27, 78, -41, -33, -49, -101, -76, -43, -92, 97, -121, 120, 21, 79, 73, -74, 93, -3, -59, -27, 90, -29, -3, -46, -16, 65, 94, -123, 78, 16, -106, 61, -71, -93, -116, -61, 34, -61, -6, -32, -75, 12, -6, -88, 35, 16, 51, -67, 32, -48, 46, 80, -40]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey17);
        javax.crypto.SecretKey secretKey23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey23);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[29, 101, -51, -8, -98, 47, -60, 19, 110, 52, -72, 62, 94, -22, -117, -25]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[49, -115, -45, -112, -2, -119, -1, -92, 80, -62, 80, -80, 72, 102, 72, 108]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[84, 94, -67, 95, -51, 4, 20, 44, 16, -84, -35, -120, -102, 95, 61, 29]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[71, 24, -115, 124, 13, -55, 117, -93, -31, -75, 29, -101, -45, 86, 127, -13]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[46, 49, 6, 69, -86, -15, 10, -85, -19, 103, -3, -48, -63, -87, -95, -117, -108, -65, 38, 106, 82, -110, 114, 100, -46, -70, 56, 88, -83, -104, 61, 91, 84, 94, -67, 95, -51, 4, 20, 44, 16, -84, -35, -120, -102, 95, 61, 29]");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey5);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey62);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey62);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey62);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey62);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[25, 121, -67, -95, -75, 111, -30, 21, -48, -61, -119, 43, 45, 45, 109, -116]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[123, -67, -15, -101, 12, -12, 69, -13, -18, -9, 68, 5, 71, -97, 78, -60]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-75, 10, 64, -21, 35, -96, 29, 82, -41, 106, -125, -116, -94, 9, -36, -97]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-99, 14, 37, -43, -62, -104, -11, 81, -128, -69, -10, -63, 43, 62, 105, 90, 3, 6, -51, 42, 79, 44, 19, -29, 3, -119, 52, 106, -47, 71, 48, 43, 25, 121, -67, -95, -75, 111, -30, 21, -48, -61, -119, 43, 45, 45, 109, -116]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-18, -109, 10, -65, 55, -49, 82, -9, 118, 96, -9, 32, -9, -48, 58, -70, 30, -104, -125, -38, 15, -16, 23, 65, 28, -43, 39, 69, -71, 87, -83, 95, 25, 121, -67, -95, -75, 111, -30, 21, -48, -61, -119, 43, 45, 45, 109, -116]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-63, -61, 49, -55, 121, 63, -90, 53, -104, 15, 121, -70, -31, -59, -16, 125]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[21, -81, -83, -59, -108, 47, 2, -40, 125, -12, 95, 96, 94, -81, 27, -28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-92, 122, -15, -125, 120, -32, -92, -116, 15, 12, -113, -3, -39, -18, -60, 95]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-57, -32, 124, -98, 75, 103, -61, 55, -4, -30, 25, -104, -3, -6, -122, 67]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-37, 72, -66, 68, -80, -52, -63, 35, -125, -34, 126, -82, -91, -27, 29, -69]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-64, 2, -48, -25, 24, 59, 94, 89, -37, -111, 127, 9, -41, 121, -88, -85]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[59, 24, -126, -94, -31, 65, -9, -126, 1, 86, 59, 11, -18, -52, -29, -24]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-108, -44, -16, -95, -105, -22, -19, 78, 11, -120, -82, -14, 107, 2, 71, 93]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-110, 119, -8, 85, 41, 63, 98, 3, 98, 40, 24, 122, -53, -120, -27, 28]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-85, -77, -72, -54, 56, -16, 107, 106, 49, -80, 74, -40, -113, -120, -117, -83]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[80, 115, -126, -128, -43, 19, 121, 3, 80, -59, 91, 77, 63, -41, 15, -79]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-110, 119, -8, 85, 41, 63, 98, 3, 98, 40, 24, 122, -53, -120, -27, 28]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-86, 120, 50, 57, 0, 8, -97, -4, 30, 52, -72, 113, -13, 34, -39, -48, 47, 49, -84, -98, 28, -4, 91, -60, -94, -34, 118, 7, 107, -12, -106, 17, -110, 119, -8, 85, 41, 63, 98, 3, 98, 40, 24, 122, -53, -120, -27, 28]");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey5);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[30, -102, -19, 76, 45, 47, 34, -108, -9, 1, 91, -105, -117, 73, -86, -23]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[58, 91, -88, -96, 1, -51, 27, 23, 82, -83, 115, 94, -92, -32, 37, 99]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[4, 73, 113, 101, -120, -20, -103, -9, -72, -10, 119, -52, -36, 62, -75, -81, 94, -7, -127, 104, -1, 54, -112, 101, -3, 63, 116, 108, 80, -73, 87, 109, -117, 39, -110, 99, 86, 10, 97, 30, -125, -9, 96, -46, -46, -22, -98, -9, 77, 46, 38, 18, 72, 26, 101, 110, -8, -65, -38, -29, 17, -72, -71, 116, -36, 96, -57, -38, -78, 6, -94, 25, 127, -103, -62, 54, 41, 122, -75, 53, 68, 71, 54, 46, 48, 55, 126, -61, 106, -82, 105, 1, 104, -57, 15, -97, 30, -102, -19, 76, 45, 47, 34, -108, -9, 1, 91, -105, -117, 73, -86, -23]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[120, -65, -66, 6, 4, -56, 62, 121, 11, -90, 26, -69, -63, -63, -115, 80, 75, 57, 86, -100, 25, -64, -77, -114, -65, -88, 14, -113, -27, 72, 85, 83, -105, -77, 117, 15, -9, -49, 68, 58, -28, -128, 90, 116, 77, -65, 59, 9, 42, 94, 74, -7, 100, -20, 4, 111, -16, -41, -1, -36, -89, 89, 86, 117, 115, -31, -4, 95, -113, 31, 66, 22, 62, -100, -83, -96, -55, 77, -59, 20, -35, 13, -66, -20, 46, -61, -62, 9, -76, -110, 64, -44, 11, 66, 75, 114, 30, -102, -19, 76, 45, 47, 34, -108, -9, 1, 91, -105, -117, 73, -86, -23]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-48, 23, 92, 97, 25, 100, 6, -14, -45, -24, -73, 10, 54, -71, -43, 4]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[122, -46, -61, -32, 111, 6, -76, 53, -50, -80, -30, -72, -93, -45, -106, -70]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-59, 35, 102, 67, -68, -55, -43, 77, 103, 17, -128, -5, 9, 21, 86, 122]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 118, -109, 72, -7, -124, -9, -4, 42, -17, 48, -117, 74, 40, 19, 89]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[43, 53, 33, -7, -51, 16, 27, -107, 17, -46, -74, 46, -9, -100, 76, -3, 80, -72, 107, -37, -28, -115, -64, -36, -12, 29, 65, -41, -98, -74, 23, -73, -59, 35, 102, 67, -68, -55, -43, 77, 103, 17, -128, -5, 9, 21, 86, 122]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-53, 27, -19, -28, 12, -109, -76, 44, 101, -74, 67, -39, 114, 96, 96, -54, -57, 25, -100, 37, 81, 78, -58, 49, -47, 125, 86, 85, 124, 54, -76, 80, -59, 35, 102, 67, -68, -55, -43, 77, 103, 17, -128, -5, 9, 21, 86, 122]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-34, 98, 111, -16, 12, 63, 62, 28, -124, 109, 0, 100, 123, 55, 127, 55, 91, 123, 121, 2, 97, -13, -2, -123, 89, -69, -120, 38, -72, -15, 35, -100, 42, -38, -30, -15, -126, -68, -103, 2, -109, -56, 68, 56, -120, 125, 29, -117, 109, -51, -127, 25, 33, 0, 29, -94, -28, -26, -55, -108, 39, -4, -110, 59, 95, 66, -16, 10, 75, -119, -114, -126, 55, -27, 108, 1, -9, -59, 67, 5, -81, 122, -100, -61, -27, 23, -62, -7, -11, 50, -54, 37, 62, -76, -62, 14, -59, 35, 102, 67, -68, -55, -43, 77, 103, 17, -128, -5, 9, 21, 86, 122]");
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey3);
        java.lang.Class<?> wildcardClass7 = secretKey3.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-63, -15, 31, -85, -20, -82, 45, 100, 25, 98, -92, 33, 17, 18, 19, -105]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[40, 38, -12, -128, -107, 25, -110, -42, 68, 8, 107, -84, 40, 98, -71, -114]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[123, 74, -98, -55, -9, -97, 78, 124, 122, -17, -59, -101, -116, 79, 73, -120, 25, -14, -62, -86, -106, -30, -49, -89, -10, -37, 52, -112, 76, 112, 125, 36, -63, -15, 31, -85, -20, -82, 45, 100, 25, 98, -92, 33, 17, 18, 19, -105]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey19);
        java.lang.Class<?> wildcardClass27 = secretKey19.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-107, -94, -111, -61, 108, 116, -25, -65, -108, -8, -1, 125, 1, -89, 91, 94]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-106, -41, 51, 104, 126, -107, 66, -24, -3, -95, 14, 94, 89, -33, 63, -78]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, 54, -57, -81, 102, -128, -33, 74, -125, -54, -111, -7, -107, 104, -20, 30]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[123, 114, 60, -122, 40, 89, 17, -31, -30, 35, -28, 53, -118, 102, 22, 89]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[99, -123, 11, -115, -83, 97, -64, -102, 121, -18, 86, 6, 66, 126, -111, 61, -41, -88, -60, 109, 57, -98, -96, -92, -53, -84, 60, -88, -35, -124, -126, 30, -54, 54, -57, -81, 102, -128, -33, 74, -125, -54, -111, -7, -107, 104, -20, 30]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[91, 18, -36, 7, 94, -72, -118, 61, 23, 110, -70, -15, 92, 115, 98, -60, 68, 48, -128, -101, 78, 12, 79, -52, 123, 105, -19, 119, 73, 28, 114, 116, -54, 54, -57, -81, 102, -128, -33, 74, -125, -54, -111, -7, -107, 104, -20, 30]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[29, -5, -116, 13, -29, 30, 114, 64, 18, -51, -24, -80, 69, 69, -14, 100, 66, -62, 75, -101, -4, 46, -116, -57, -50, -8, 37, -32, 74, 21, -101, 115, -116, -18, -4, -14, -7, -28, -123, 10, -75, -10, -52, 18, 3, -110, 109, -73, -114, 66, -16, -120, -13, 68, 44, 102, 84, 37, -17, 114, -35, 85, 115, -7, 33, 22, 114, -56, 38, -45, -37, -46, 95, 81, 70, 92, -10, -117, 76, 23, -112, 67, -12, -49, 101, 61, -23, -58, -71, 65, 94, -76, -71, -61, 60, -128, -54, 54, -57, -81, 102, -128, -33, 74, -125, -54, -111, -7, -107, 104, -20, 30]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey27);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[86, 22, 39, -22, 28, 68, -45, -80, -20, 119, -8, 55, -78, -37, 96, 70]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-28, 41, -124, 60, -70, 40, -41, -107, 0, 59, -43, 4, 37, -99, 99, -57]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-28, 41, -124, 60, -70, 40, -41, -107, 0, 59, -43, 4, 37, -99, 99, -57]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "E429843CBA28D795003BD504259D63C7" + "'", str7, "E429843CBA28D795003BD504259D63C7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[82, -78, 111, 123, -12, 115, -108, 22, 105, 26, 33, 120, -27, 103, 42, -70]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[102, 16, 83, -69, -90, -109, -105, -20, 27, 99, 10, -125, 114, 70, 93, 29]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[45, 20, -108, -47, 23, 47, 0, 28, -21, -24, 2, -105, -120, 66, 45, -39]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[123, 29, -106, -108, -16, -107, -94, 68, 23, -73, -94, -86, -26, 104, 104, 49]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[32, 8, -120, 64, -30, 109, -118, -115, 77, -18, -16, -6, 58, -66, 44, 61, 72, 16, -52, 59, -127, 4, -50, -18, -80, -78, -60, 90, 50, 101, -46, -52, 45, 20, -108, -47, 23, 47, 0, 28, -21, -24, 2, -105, -120, 66, 45, -39]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-69, -84, 56, 16, -19, 29, 116, 68, -99, -71, -128, 83, -119, -102, -78, -81, 13, 73, -34, -45, -112, -30, 124, -16, -6, 39, -85, 92, 13, 98, 46, -29, 45, 20, -108, -47, 23, 47, 0, 28, -21, -24, 2, -105, -120, 66, 45, -39]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[35, 43, -111, -105, 46, -83, 42, -86, -127, -24, -127, -84, 37, 63, -64, -92, 75, 88, -74, -29, -119, 87, -80, 14, -101, -81, -111, 35, 26, -62, 69, 93, -10, -8, -43, 101, -6, 74, -24, -100, 126, -78, -8, -30, -3, 69, 79, 20, -29, -34, 29, 42, -11, 1, -53, -79, 112, -56, 63, 43, 4, -89, 100, 18, -97, -30, -99, -106, 70, 10, 43, -97, -114, -96, -1, -104, 21, 50, -81, -11, -53, -108, 41, -30, 98, 125, 93, 77, -121, 89, -47, 21, -69, -2, 80, 22, 45, 20, -108, -47, 23, 47, 0, 28, -21, -24, 2, -105, -120, 66, 45, -39]");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey27);
        java.lang.Class<?> wildcardClass34 = byteArray33.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, -128, 22, -123, -82, -63, -114, -44, 88, -94, -68, 51, 46, 47, 31, -107]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-5, -120, 27, 112, 84, 63, 125, -83, 9, 109, -84, 53, 6, 125, 12, 56]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-47, -90, 33, -65, -49, 22, -18, -112, -34, 51, 29, -71, 81, -32, 54, 68]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-52, -6, -102, -43, 17, -94, 48, -41, 127, 20, -20, -44, -22, 79, -111, 43]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[8, 94, 127, 66, 19, 7, -61, 76, -16, -103, -69, 21, -23, -82, 107, 20]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-47, -87, -46, 60, 87, -116, -80, 50, 0, 19, -124, 68, -52, -44, -116, 40]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-47, -87, -46, 60, 87, -116, -80, 50, 0, 19, -124, 68, -52, -44, -116, 40]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-62, -85, 7, 64, -45, 84, 100, -78, -87, 103, -55, -94, -11, 119, 37, -53, -36, 52, 119, -26, 15, -75, 88, -29, 43, -54, 62, -41, -108, 32, -10, 96, 8, 94, 127, 66, 19, 7, -61, 76, -16, -103, -69, 21, -23, -82, 107, 20]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey7);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-2, -7, 99, -81, -92, -82, 89, 52, 48, -21, -74, 27, -99, -30, -81, 111]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-40, 1, 50, -104, 119, -99, -95, 119, 26, 80, 73, -43, -63, -74, 54, -74]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[83, 124, -39, -37, -41, -29, 70, -23, -26, 53, 10, -79, 107, -64, 33, 77]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-2, -7, 99, -81, -92, -82, 89, 52, 48, -21, -74, 27, -99, -30, -81, 111]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[120, 72, 16, -37, -38, 113, -50, -63, -64, -39, 106, -120, 88, 103, -113, -34, 23, -28, -24, -44, -122, -110, 110, -22, -73, 73, 70, -45, 8, 87, 68, 111, -31, -39, 110, 81, -53, -69, 10, 97, 39, 57, 58, 76, -68, 69, 33, 18, -1, 89, -62, -85, 65, 112, 25, 94, -89, 125, 23, 124, -128, 92, -45, 34, 109, -77, -100, -12, 112, -93, 73, 20, -46, 100, 121, 64, 31, -55, 28, -85, 51, -65, 42, 21, 18, -49, -51, 50, -30, -103, -78, 30, 28, 64, 31, 8, -2, -7, 99, -81, -92, -82, 89, 52, 48, -21, -74, 27, -99, -30, -81, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-77, 44, 87, 50, 92, -60, -122, -57, -62, 53, 109, 122, -14, -53, 5, 90, 16, -35, -88, -120, -107, 115, -96, -96, -90, 112, -64, -119, 30, -106, 102, -68, -2, -7, 99, -81, -92, -82, 89, 52, 48, -21, -74, 27, -99, -30, -81, 111]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-8, 69, 3, -13, -10, -1, 70, -41, -36, 117, 57, -122, 113, -106, 8, 24]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[50, -101, -89, -114, -92, -7, 64, 24, -2, 19, 51, -16, 15, -102, 8, -74]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-125, 26, -112, -88, 63, -24, -65, 118, -43, -50, -54, 45, -50, 70, -36, 92]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[66, -74, 106, -64, -70, 36, 106, -104, 74, 1, -108, 60, -10, 50, 5, -102]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-126, 4, -100, 80, -63, -100, -65, -87, -33, 70, 8, -75, 105, 56, 119, -92, -80, -2, -65, -42, 69, -105, 98, -22, 64, -105, 9, -31, -19, -115, -8, -18, -125, 26, -112, -88, 63, -24, -65, 118, -43, -50, -54, 45, -50, 70, -36, 92]");
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey39);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey54);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey54);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey54);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[113, -125, -18, -107, 21, 7, 68, -1, -119, 93, 80, -5, -27, 45, -5, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-70, -29, 7, 97, 28, 45, -105, 5, 91, 72, -22, -114, 121, 86, -59, -107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-44, 47, 52, 126, 14, 52, -49, 72, 30, 10, -104, 92, 42, 115, -6, 53]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-38, 109, 90, -103, 58, 100, 125, -1, 22, 22, -92, 6, -125, 115, -101, 109]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[19, 77, -36, -80, 105, 69, -50, -38, 18, -67, 72, -127, 101, 65, -21, 34]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-111, 13, 21, 117, -117, 6, -4, -57, -12, 126, -82, 12, 104, 104, 102, 122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-33, -12, 26, -116, 12, 79, 116, 33, -1, -10, 99, 69, 27, -122, -45, 20]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-14, -42, 21, -11, 109, 37, -79, -20, -32, -37, -32, 15, -68, -23, -121, 14]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[120, -120, -103, 102, -120, 127, -120, 34, 102, -13, 67, 117, 24, -2, 42, 45, 36, -83, 25, -121, -63, 108, -81, 59, 12, 72, -120, 51, -81, 55, 6, -90, -33, -12, 26, -116, 12, 79, 116, 33, -1, -10, 99, 69, 27, -122, -45, 20]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-104, 41, -72, 17, -6, -52, -100, -107, 25, 88, -66, -51, 61, -61, -82, 85, 70, -81, 46, 0, 86, -109, -71, -95, -10, 63, -105, -97, -10, -48, 119, 3, -33, -12, 26, -116, 12, 79, 116, 33, -1, -10, 99, 69, 27, -122, -45, 20]");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[98, 94, -4, -128, -51, -93, 12, 86, 83, -9, 6, 96, -13, 65, -47, -98]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[22, 85, -87, 46, -12, 26, 11, 118, -29, -36, -50, 119, 78, -121, -118, -101]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-11, 37, -88, 127, -128, 14, -121, 113, 38, -35, 73, -6, -62, 50, -29, -99]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[98, 94, -4, -128, -51, -93, 12, 86, 83, -9, 6, 96, -13, 65, -47, -98]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-4, -6, -38, 33, -81, -40, -32, 6, 81, -63, -36, 90, -102, 81, 36, -125, 20, -89, -111, -28, 47, 92, -78, -30, -43, -111, 106, 71, -3, -34, -115, 82, 98, 94, -4, -128, -51, -93, 12, 86, 83, -9, 6, 96, -13, 65, -47, -98]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[79, 125, -126, 18, -91, 65, -60, 51, 24, -111, 20, 105, -49, -5, 97, 119, 42, -115, -88, 116, 2, -94, -99, 38, 73, 88, 45, 20, 125, 64, -67, 31, 98, 94, -4, -128, -51, -93, 12, 86, 83, -9, 6, 96, -13, 65, -47, -98]");
        org.junit.Assert.assertNotNull(byteArray61);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("EAC72EF852CDB6957C3B3337E6AAFD898344A88D77B133A96575F0FEB6CF0963128C98F6465FFE174B01995E525881A246B950010C3B3FFF7E403973C3C9B01F417D856F9374C29863F9E7D0D560FCB83F86A08537994AB45AB171BA1516C64BE9700FFD6717E17102708CE6C175F0C61AF40BDC1F2B4CDC5AB3D06F00B10FC61D7ABB4EDA1D2188273BED2443A77CCCFC395CA3FA9031CE25EAA8E3FE6FC96AE723B2F0F1E0972E129CC50B23C986DD439104F2C841934C4FD047981A7EC8E383A490CDE1F2529B38D0BA929584B94DC2C8A22527897CF13C38B10D6DDB1D0C2D1892F255F35B002F69AEA221C52658", secretKey29);
        java.lang.Class<?> wildcardClass38 = byteArray37.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[81, 70, -114, -39, -128, -72, 8, 39, -109, -20, 67, -37, -46, 96, 4, -17]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, -57, -127, -110, 91, -128, -59, -9, 18, -75, 30, -44, 84, -13, 95, -29]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-99, -11, -11, -107, -103, -25, 19, -30, -37, 118, -111, -103, 6, 103, 30, 74]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-123, 73, -125, -105, 51, 75, -28, 43, -34, 17, -21, -85, 80, 84, 101, 37]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-103, 102, -42, -56, -20, -88, 31, 12, -110, 83, -35, 96, -118, 90, -37, 71]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[17, 54, 50, -21, -73, -19, -73, -71, 122, -50, -87, 27, 118, 2, -119, 5]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[17, 54, 50, -21, -73, -19, -73, -71, 122, -50, -87, 27, 118, 2, -119, 5]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-3, 79, -33, 46, -99, 101, -62, -71, 22, 125, -28, 62, 40, -103, -91, -99, -42, 101, -89, 46, -24, 124, -4, -44, -35, 46, 14, -75, -50, 25, 8, 50, -103, 102, -42, -56, -20, -88, 31, 12, -110, 83, -35, 96, -118, 90, -37, 71]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-123, 110, 15, 63, 100, 17, -4, -14, -67, 106, 101, 33, 31, -117, -96, -19, 9, 85, 70, 22, -108, -35, -29, -105, 104, -97, 40, -49, 70, 0, -94, -48, -103, 102, -42, -56, -20, -88, 31, 12, -110, 83, -35, 96, -118, 90, -37, 71]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey85);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.Class<?> wildcardClass94 = secretKey85.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-117, -20, -114, -128, -108, -71, 16, -11, 32, 55, 10, -96, 98, -53, 119, -44]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[12, 45, -123, -79, -97, -32, 38, 78, 76, 117, -52, -54, 10, 7, -122, 48]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-22, -101, 31, 96, -92, 93, -80, -96, -74, -36, -24, -7, -63, -122, -99, -76]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[48, 110, -25, 37, -120, -79, -71, 27, 17, -80, -51, -83, 12, -90, -64, -37]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[80, -46, -94, 92, 26, 103, -72, -61, 84, -89, -8, 2, 82, 63, -68, -87]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-15, 76, -92, 16, -78, 96, 96, -103, -6, -25, 126, -104, 6, -4, 107, -46]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[97, -24, 3, -67, -125, 56, -1, 55, -67, -85, 80, 60, -18, -32, 1, -43]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-91, 58, 94, -27, 58, -38, -89, 120, -17, 70, 54, -77, 6, 72, -12, -84]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-43, 40, -61, 9, 33, -109, -111, 94, 72, -68, 62, 77, -77, -86, -63, 34, -39, 73, -42, 7, 117, 97, -46, -37, -15, -109, -88, -125, 123, 96, 63, -107, 97, -24, 3, -67, -125, 56, -1, 55, -67, -85, 80, 60, -18, -32, 1, -43]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-89, 14, 22, 56, -59, 52, 0, 8, -127, 17, 124, -127, -104, -33, -112, 20]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[5, 46, -50, 124, 82, -77, -49, 121, 58, 55, 35, -103, 47, -27, -52, -88]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[24, -119, -39, -39, 72, 0, -13, -127, -60, 13, -11, 42, 43, -71, -109, -28]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[33, -92, -87, 63, -64, 81, -16, -109, -52, -4, 94, -37, -124, 42, -103, -94]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-126, 127, 74, 24, -37, -49, 16, -99, -121, -123, 24, 30, 44, 6, 40, -4]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[15, 107, 121, 26, 3, -75, -66, 57, 107, 14, 84, -28, 12, -113, 9, 63]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[79, 49, -89, 90, -111, 82, -19, -46, -27, -45, 93, 83, 75, -10, -45, 77]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-101, 37, 40, -33, 92, -67, 58, -121, -63, -116, -84, -31, 84, 88, 16, 56]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[112, 94, -64, 84, -43, -105, -30, -40, -85, 5, 111, -53, -68, -68, -28, -35, 37, 114, -71, 67, 31, 47, -119, -32, 104, -106, 21, 99, 73, 15, 45, -81, 79, 49, -89, 90, -111, 82, -19, -46, -27, -45, 93, 83, 75, -10, -45, 77]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-101, 37, 40, -33, 92, -67, 58, -121, -63, -116, -84, -31, 84, 88, 16, 56]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey21);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey49);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-124, 94, -17, -5, -97, 59, 101, 65, -116, 6, -65, -1, 113, 88, 86, 21]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-61, -79, -44, -75, 89, 17, -50, -48, -39, 41, -6, -22, -44, -25, -5, -67]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-13, 28, -84, -63, 50, 24, 95, -123, 18, 10, 42, 127, 36, -88, -99, -49]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-124, -71, -76, 124, -8, -69, -18, 0, -32, -81, -58, 125, 66, -26, -3, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122, -99, -4, -103, -59, 48, 5, 0, 12, -115, -80, 106, 11, 46, 50, 56, 74, 27, -87, -83, 104, 69, -27, 41, -128, -13, 54, -57, -32, 33, -44, -63, -13, 28, -84, -63, 50, 24, 95, -123, 18, 10, 42, 127, 36, -88, -99, -49]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[122, -8, 106, -34, 109, 89, -23, -124, -18, 125, 32, 127, -96, 54, -59, -38, 39, 77, 32, 18, -128, 86, -81, -18, -46, -46, 15, 13, 54, 60, -120, -54, -13, 28, -84, -63, 50, 24, 95, -123, 18, 10, 42, 127, 36, -88, -99, -49]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[21, 10, 124, -103, 90, 119, -114, 81, 95, 47, 42, 39, 126, 85, -60, -17, -95, -70, -111, 111, 54, 71, -121, 81, -54, 1, 39, -120, -68, -21, 63, 127, 120, -49, -30, 12, -72, -95, 66, -96, 18, -99, 29, -88, 1, 76, 4, 45, 120, 112, 103, -27, 2, -121, -64, 62, -69, 22, 73, 75, 6, -78, -55, -59, 83, 46, 68, 15, -113, -114, -76, -49, 23, -68, 76, -53, -123, 82, -97, -5, 33, -100, -5, 62, -10, 4, -71, -56, 40, 20, -54, 88, -31, -91, -76, 25, -13, 28, -84, -63, 50, 24, 95, -123, 18, 10, 42, 127, 36, -88, -99, -49]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-35, -112, 86, -59, -123, -73, -128, -127, -85, 69, 113, 9, -107, -77, -8, 91, -87, -79, -124, -104, 68, -11, 18, -71, 101, 1, 78, 104, -10, 15, 56, 83, -13, 28, -84, -63, 50, 24, 95, -123, 18, 10, 42, 127, 36, -88, -99, -49]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[19, -10, -102, 5, 121, -113, 42, -50, 19, 115, -75, 64, -28, 34, 81, -113]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[40, 121, -99, -84, 42, -5, 20, -47, -102, -69, 10, -63, -76, -69, -90, -127]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[31, 123, -95, -29, 41, 67, 118, -28, -12, 96, 56, 28, -45, 86, 102, 6]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[94, -28, 6, 72, -83, -58, 18, 22, 69, -21, -40, 81, -5, 21, 107, -74]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[99, -33, -94, 3, -81, 65, -99, 89, 67, 45, -54, 56, 102, 21, -29, 99, 96, 32, 97, -83, 73, 55, -46, 62, -30, -37, -113, -56, -46, -45, -40, -57, 31, 123, -95, -29, 41, 67, 118, -28, -12, 96, 56, 28, -45, 86, 102, 6]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[68, -107, 80, 118, 9, 88, -21, -37, -73, 81, 9, 48, 91, 93, 75, -44, 57, 36, 19, 105, 93, 21, 63, -15, 123, 77, 8, -39, -128, -31, 67, -4, 31, 123, -95, -29, 41, 67, 118, -28, -12, 96, 56, 28, -45, 86, 102, 6]");
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey1);
        java.lang.Class<?> wildcardClass3 = secretKey1.getClass();
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-28, -43, 70, -39, 118, -83, 61, 127, -64, 111, -95, -30, 40, -71, 81, -76]");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[2, -84, -60, -122, -115, -37, 23, 51, 10, 110, 36, 96, 11, -35, -28, -12]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-11, 33, 111, -31, -13, 44, 123, 99, 47, 11, -48, -111, 109, 39, 96, 11]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-28, 16, -26, -59, 30, -53, -11, 53, 125, 83, -72, 13, 127, -116, 105, -48, 64, -87, 17, -48, 28, 57, 47, -125, -110, -46, -118, -7, 94, -105, 112, 56, -120, -81, 86, -61, 64, 30, 75, -16, -61, 59, -2, 72, 52, 100, -45, -89, -16, -95, 75, 87, 98, 126, -35, -73, 79, 87, -106, -79, -83, -51, 112, -52, -37, 126, -113, -120, -55, -128, -34, -122, -121, 117, -110, -54, -67, -45, 126, -21, 45, -4, -37, -112, -96, 58, 22, 22, 84, -106, -38, 38, 60, -33, 114, -45, 2, -84, -60, -122, -115, -37, 23, 51, 10, 110, 36, 96, 11, -35, -28, -12]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-123, -99, 96, -5, 116, 69, -18, 103, -40, 4, 70, 101, 41, -93, -128, 55, -95, -13, -24, 1, 88, 40, 36, -126, 37, 96, -123, -35, 4, 34, 35, 31, 2, -84, -60, -122, -115, -37, 23, 51, 10, 110, 36, 96, 11, -35, -28, -12]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey40);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey40);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[116, -77, -125, -93, -51, -49, -49, -112, 55, -118, 10, -116, 12, 26, -102, -112]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-34, -10, 0, 44, -128, -65, 96, -19, -99, -114, -35, 123, 14, 20, 61, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[31, 97, -37, -120, 98, -83, -109, 115, -62, 55, 58, -89, 26, -106, -110, 27, -106, -9, 25, 82, -110, 64, 66, 100, 118, -22, 50, 125, 15, -53, 2, -14, -18, -73, -103, 112, -39, 66, -109, 81, 92, 70, 122, 9, -83, 54, -45, 7, -32, -110, -1, 58, 120, -4, 35, 25, -41, 28, 36, -107, 118, 76, -109, 95, -41, -55, -68, 113, -64, 36, -19, 78, -73, 57, -68, 16, -88, -58, -13, 84, -65, 38, -46, -71, -2, -75, 112, -96, 16, -39, 60, -120, 94, -123, 49, -96, 116, -77, -125, -93, -51, -49, -49, -112, 55, -118, 10, -116, 12, 26, -102, -112]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-98, 58, -63, -32, 112, 3, 0, 56, -48, -44, 6, -68, 28, 23, 39, -13, 117, -116, 33, 120, -105, 58, -91, 77, 88, -12, -77, -118, -106, -44, 24, -83, 116, -77, -125, -93, -51, -49, -49, -112, 55, -118, 10, -116, 12, 26, -102, -112]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9E3AC1E070030038D0D406BC1C1727F3758C2178973AA54D58F4B38A96D418AD74B383A3CDCFCF90378A0A8C0C1A9A90" + "'", str11, "9E3AC1E070030038D0D406BC1C1727F3758C2178973AA54D58F4B38A96D418AD74B383A3CDCFCF90378A0A8C0C1A9A90");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9E3AC1E070030038D0D406BC1C1727F3758C2178973AA54D58F4B38A96D418AD74B383A3CDCFCF90378A0A8C0C1A9A90" + "'", str12, "9E3AC1E070030038D0D406BC1C1727F3758C2178973AA54D58F4B38A96D418AD74B383A3CDCFCF90378A0A8C0C1A9A90");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-35, 62, 110, -75, -81, -110, -95, 100, 93, -8, -14, 90, 59, 93, -116, -59]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-25, -89, -93, 56, -48, 79, -29, 34, 49, 86, -55, 26, 19, 79, -29, 12]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[96, 39, -92, -68, -99, -37, 62, -44, 105, -126, 127, -17, 115, -30, 58, -34]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-119, 122, -6, -104, -75, -110, 1, -81, -76, 70, -79, 44, 38, 85, 126, -94]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[80, 31, 75, 103, -38, -6, -43, 118, -93, -109, 0, 100, -54, 16, -79, -28]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-14, -44, -19, -62, 13, 24, -90, -6, 54, -60, -31, 11, -99, 90, 98, 38]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[116, -99, 32, -95, 15, -68, 0, -105, -30, -15, -49, 124, -100, -108, -54, 89]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[80, 31, 75, 103, -38, -6, -43, 118, -93, -109, 0, 100, -54, 16, -79, -28]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey20);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-43, -13, -115, 48, 74, -80, 23, -46, 65, -59, -4, 21, 87, -49, -43, -99]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-101, -40, -37, 33, 10, -83, -118, 85, -55, 99, -59, -116, 35, -98, 126, -92]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[76, 111, 66, 25, 48, -127, -89, 21, 23, 57, -92, -96, -110, 30, 112, 108]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-11, 53, -116, -14, -14, 45, 94, -122, 31, -1, -17, 90, -98, -96, -111, -35]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[2, 108, 75, 4, -24, 91, 52, 5, 5, -23, 35, -104, 107, 15, 24, -1, -108, -4, 9, 76, -58, -13, -112, -88, -113, -65, 47, 69, -104, -106, -2, -117, 76, 111, 66, 25, 48, -127, -89, 21, 23, 57, -92, -96, -110, 30, 112, 108]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[113, -103, 124, 54, -83, 64, -20, -3, -91, 47, 120, 1, -99, -128, 68, -107, 82, -78, -85, 52, -66, -68, 44, -84, -33, -78, 49, 29, -42, -83, 85, -106, 76, 111, 66, 25, 48, -127, -89, 21, 23, 57, -92, -96, -110, 30, 112, 108]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[42, -1, -93, -37, -18, 34, 109, -49, -33, 82, 111, 98, 23, -103, -26, 90, -12, -3, -80, -69, 30, -118, 79, 72, 74, 52, 87, 27, -126, 30, -77, -13, 30, 74, 8, -90, -74, -105, -9, -82, 42, 56, 67, -119, -112, 10, -46, 12, 30, 72, -78, -16, -36, -123, 78, -59, 18, 119, 17, -69, 71, 82, -18, 54, -74, 123, -65, -49, -23, 0, -48, -22, -1, 85, 78, -78, -14, 51, -34, -43, -7, 120, 100, 9, 1, 116, 26, 21, -42, -47, -45, -41, -84, -52, -57, 102, 76, 111, 66, 25, 48, -127, -89, 21, 23, 57, -92, -96, -110, 30, 112, 108]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-73, 17, -13, -12, -57, -22, -90, 0, -92, -7, 121, 95, -44, 90, -103, -21, -19, 96, -116, -54, -51, 6, 121, 27, 8, -103, 124, 37, -58, 36, 108, -73, -123, -55, 33, -3, -40, 14, -24, -92, -4, -87, -52, -43, 26, 8, -7, -41, -60, -71, 55, -121, 69, 35, -111, -16, -44, 39, 108, -58, -39, -45, -125, -126, -74, -120, -89, 52, -116, 21, 121, -41, 14, 35, 61, -60, -15, -61, -59, -45, -86, -43, 89, 106, -24, -91, 5, 114, 42, 107, -89, -2, -113, 113, -118, -102, 76, 111, 66, 25, 48, -127, -89, 21, 23, 57, -92, -96, -110, 30, 112, 108]");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[48, -54, -95, -48, -109, -93, 13, 90, -51, -43, 4, -62, -26, 53, -126, -121]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-53, 57, 95, -68, -26, -75, 88, -72, 58, 41, -6, 5, 87, -90, -61, 123]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-53, 57, 95, -68, -26, -75, 88, -72, 58, 41, -6, 5, 87, -90, -61, 123]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, -85, -121, 92, 76, 107, 102, -103, -41, 109, -104, 112, -66, -117, -112, -41]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[48, -54, -95, -48, -109, -93, 13, 90, -51, -43, 4, -62, -26, 53, -126, -121]");
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey8);
        java.lang.Class<?> wildcardClass17 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[17, -94, 8, -49, -117, 103, 73, -79, 66, -62, 95, -22, 90, 45, 46, 69]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[73, 126, 25, 109, -54, 29, -90, 10, -112, -77, 13, -11, 51, -24, 11, 58]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-6, 4, -96, -91, 118, -123, -16, -41, 89, 100, -9, -78, 23, 93, 14, -127]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[17, -94, 8, -49, -117, 103, 73, -79, 66, -62, 95, -22, 90, 45, 46, 69]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-35, -102, 73, -63, -44, 98, 39, -29, -55, 7, -53, 16, -5, -97, -61, -77, 125, -81, 37, 9, 127, 94, 43, -116, -106, 42, -28, 46, -100, 125, -20, -49, 17, -94, 8, -49, -117, 103, 73, -79, 66, -62, 95, -22, 90, 45, 46, 69]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-105, 90, 29, -56, -83, 3, -22, -20, 18, -41, -45, 66, -22, -28, -128, -26, -115, -25, -49, -58, -19, 58, 55, 50, 126, -34, 18, -121, 121, -35, -98, -59, 17, -94, 8, -49, -117, 103, 73, -79, 66, -62, 95, -22, 90, 45, 46, 69]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-6, 4, -96, -91, 118, -123, -16, -41, 89, 100, -9, -78, 23, 93, 14, -127]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey20);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey49);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey49);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-31, 107, 60, 94, -78, 50, 1, -103, 105, -29, 28, -27, 12, -37, 33, -65]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[24, 52, 78, 31, 16, 26, 58, -58, -91, -2, 86, -51, 124, 112, -32, 31]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[125, 11, -3, -120, 2, -3, 6, 35, 0, 15, -28, -57, 25, 2, 106, 69]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-35, -18, -18, 6, -23, 79, 61, -112, -112, 36, -20, -51, -56, 118, -3, 47]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[109, -127, -50, 47, 15, 43, -50, 120, 29, -116, 120, -33, -22, -111, 29, -115, -47, -13, -77, 88, -10, 11, -45, 78, 78, 53, 3, 119, 110, 18, -85, 81, 125, 11, -3, -120, 2, -3, 6, 35, 0, 15, -28, -57, 25, 2, 106, 69]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-111, 103, -99, 41, 61, 108, 78, 34, 25, 112, 52, -69, -37, 19, 45, 82, -87, -122, 43, -29, -104, 93, 122, 126, 70, -100, -51, 102, 102, 86, 7, -27, 125, 11, -3, -120, 2, -3, 6, 35, 0, 15, -28, -57, 25, 2, 106, 69]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[31, 69, -92, 106, 74, 42, -21, -82, 102, -112, 113, -16, 120, -95, -67, 64, -2, 99, 63, 69, -114, -68, 98, -6, -101, 97, 79, -83, -4, -62, 108, 80, 76, 127, 105, -87, -44, -52, -55, -107, -83, -19, 67, 71, 2, -74, -125, 70, -108, -79, -58, -115, 30, -83, -57, 6, 91, -80, 112, -19, -27, 125, -107, 71, -68, 99, -60, -11, -37, 96, -85, -119, -90, -61, -68, 69, 104, 33, -32, 7, -3, 117, 114, -20, 90, 62, 123, -36, 110, -16, 6, -73, -31, 5, 117, 94, 125, 11, -3, -120, 2, -3, 6, 35, 0, 15, -28, -57, 25, 2, 106, 69]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 93, -34, 36, -52, -76, -69, -72, -106, -123, -69, 47, -119, 33, -113, 26, -42, 127, -1, 3, -113, 112, -115, -19, -94, -45, -121, 80, -1, 127, 58, 47, 88, -15, -52, -32, -17, 49, 23, -10, -62, 88, -27, -12, 126, -51, 29, -88, -44, -16, 7, -5, -69, -73, 13, -122, -63, 75, -8, 40, 48, -94, 115, -79, -77, 43, -107, -24, -49, -62, -106, 113, 73, 121, -104, -77, 69, -89, -105, 54, -62, -78, -8, -78, -90, -103, 47, -128, -88, -24, -74, 13, 71, 54, -96, -16, 125, 11, -3, -120, 2, -3, 6, 35, 0, 15, -28, -57, 25, 2, 106, 69]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[108, 62, -40, -97, 0, -23, -104, 46, 33, 113, -105, 84, 4, 2, 100, 30]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-58, -125, -60, 116, 111, 83, -92, -94, -66, 37, -113, 77, 109, -111, -14, 112]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-55, -99, 107, 84, -61, -13, 15, 114, 54, -35, -67, -60, 95, 124, 96, 80]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[21, 60, 50, -10, 28, -42, 111, -127, -3, 38, -60, -72, -105, 68, -54, -37]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-52, -107, 44, -82, 94, 21, -30, 73, -100, 73, 42, 121, 98, -37, 19, -124, -103, -69, -2, -120, -112, 103, 72, 15, -112, 55, 34, -17, -79, 124, -75, -28, -55, -99, 107, 84, -61, -13, 15, 114, 54, -35, -67, -60, 95, 124, 96, 80]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[112, 62, 47, -14, -105, -58, 122, 89, 122, 93, 81, 94, 102, 124, 93, 48, 110, 30, -118, -118, -120, 121, -14, -71, -34, -22, -126, 90, 61, 33, 95, -36, -55, -99, 107, 84, -61, -13, 15, 114, 54, -35, -67, -60, 95, 124, 96, 80]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[37, 47, -34, -20, 68, -97, -37, 88, 71, -22, 52, 115, -15, -17, -75, -77, 105, -111, 18, -84, 95, -18, 75, -60, 16, 26, 76, -48, -61, -102, 76, -71, 5, -6, 66, 5, 2, 51, -13, 23, -30, -120, 21, -62, 92, 19, 80, 63, 43, -95, 125, -58, 122, -77, 11, -88, 51, -98, -81, 90, 113, -20, -100, 74, -92, -73, -111, 100, -16, -58, 9, -16, -75, -20, 6, -2, -27, -84, 15, 78, -50, 59, 104, 93, -105, -19, 59, -128, -106, 6, 36, 78, -87, 73, -39, 39, -55, -99, 107, 84, -61, -13, 15, 114, 54, -35, -67, -60, 95, 124, 96, 80]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[112, 62, 47, -14, -105, -58, 122, 89, 122, 93, 81, 94, 102, 124, 93, 48, 110, 30, -118, -118, -120, 121, -14, -71, -34, -22, -126, 90, 61, 33, 95, -36, -55, -99, 107, 84, -61, -13, 15, 114, 54, -35, -67, -60, 95, 124, 96, 80]");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.Class<?> wildcardClass28 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-24, -26, 68, 61, -16, 47, 79, 98, -66, 112, 123, -123, -70, 37, -23, -21]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-94, -32, -87, 87, -112, -60, 6, 60, -27, 12, 14, -64, -13, -47, 107, 16]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -106, 35, 79, -13, -80, -25, 84, 22, 114, 24, 13, -128, 18, 45, -69]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[102, -11, 22, -18, 76, -80, -84, -86, -104, -87, -24, 127, -55, 13, -18, 23]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-64, 117, -65, 27, -98, -117, -108, -43, -93, -5, -63, -71, -103, -66, -98, 19, 23, -19, 18, 33, 16, 108, 125, 10, -3, 101, -53, -71, -81, 87, 67, -2, -54, -106, 35, 79, -13, -80, -25, 84, 22, 114, 24, 13, -128, 18, 45, -69]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-68, 92, -67, -124, -67, 102, 28, -50, -46, -91, 27, -82, -7, -12, -86, 86, -32, -108, -43, 30, 0, -59, -48, -46, 35, -18, 32, -73, 52, 54, -12, -16, -54, -106, 35, 79, -13, -80, -25, 84, 22, 114, 24, 13, -128, 18, 45, -69]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "631CD88B891BC25FC9995B70DD362D570E52845EC8867317731568B9E7523AE26B6721F6D29768B47B9C91B6E386162460CC156C55E4B5F06B716200308DD85CE13D6F3D3E22F68338846F1ECFF8553CC03153D90EE69321F8C1B48BA8E4C314951651A5FB6EC9F82A78CD2EA69D5F211C5E03848451A725EFF8A94C87AD24E08D7E10050FFE0F980274AFADD6A565F45E6A1D97EC7726764A99B76B42352A3D5055F5FB20717AE9E7D67867BA207468ED40152F4EFE4146AFF8B79DF23D9B149AB8BC11B1126C724FCB230A95EFA90CB54EC5465E9935C4A25D335288A731AECA96234FF3B0E7541672180D80122DBB" + "'", str27, "631CD88B891BC25FC9995B70DD362D570E52845EC8867317731568B9E7523AE26B6721F6D29768B47B9C91B6E386162460CC156C55E4B5F06B716200308DD85CE13D6F3D3E22F68338846F1ECFF8553CC03153D90EE69321F8C1B48BA8E4C314951651A5FB6EC9F82A78CD2EA69D5F211C5E03848451A725EFF8A94C87AD24E08D7E10050FFE0F980274AFADD6A565F45E6A1D97EC7726764A99B76B42352A3D5055F5FB20717AE9E7D67867BA207468ED40152F4EFE4146AFF8B79DF23D9B149AB8BC11B1126C724FCB230A95EFA90CB54EC5465E9935C4A25D335288A731AECA96234FF3B0E7541672180D80122DBB");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey4);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey14);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey14);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-37, -63, 42, 101, 82, 121, -48, 39, -83, -44, -102, 68, 105, -39, -23, 112]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-72, -50, 111, 71, -118, -125, -7, -64, 32, 55, 54, -6, 67, 100, -6, 67]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[121, 36, -3, 88, -86, -103, 18, -88, -83, -6, -65, -98, -104, 117, 64, -74, 5, -73, -94, -67, 100, 80, 18, -102, 59, -95, -117, 70, 97, 4, -78, -69, -118, 69, -78, -19, 127, 47, 46, -92, 75, 89, -103, 14, -103, 55, -53, -44, 7, 41, 105, 53, 10, -48, -123, 3, 36, -123, -44, 102, -51, -64, -21, -61, 8, 101, -73, -76, -83, 101, 83, 97, -126, -30, -22, 117, -54, -50, -15, 71, -21, 19, 61, 82, 56, 66, -26, 106, 14, -81, -106, -9, -69, -101, -55, 124, -37, -63, 42, 101, 82, 121, -48, 39, -83, -44, -102, 68, 105, -39, -23, 112]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-52, 120, 79, 27, 108, 60, 124, -7, 37, 25, 85, 84, -109, -107, 16, -109]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[116, -73, -99, 1, 118, -19, 54, 105, -3, 95, 38, 121, -71, 96, -27, 99]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[50, -45, -120, 52, 71, 90, 55, 120, -50, 30, -22, -45, -10, -86, 112, -110]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 126, 102, 31, -125, 118, -37, -96, -102, -119, -12, 60, -103, 94, -117, -75, 9, 16, 127, 17, 58, 16, -49, -114, -25, -11, 118, 39, -18, 63, 86, 125, -52, 120, 79, 27, 108, 60, 124, -7, 37, 25, 85, 84, -109, -107, 16, -109]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[63, 51, -2, 97, -101, -114, 121, 120, 106, -4, -85, -47, 74, 75, 94, 103, 33, -62, -68, 47, 35, 25, 87, -95, 11, -88, -111, 55, -99, -21, -14, 13, -52, 120, 79, 27, 108, 60, 124, -7, 37, 25, 85, 84, -109, -107, 16, -109]");
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey87);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey87);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey87);
        java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str97 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey98);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[54, 5, -113, -34, 110, -9, -25, -1, -100, -122, -79, 31, 52, 8, 47, -101]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[36, -35, -77, -87, 10, 88, 41, -116, 110, -66, 2, 102, -30, -11, -49, 104]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[61, 110, 86, 93, 77, -108, 8, 80, -99, -28, 17, 11, -115, 112, 115, -17]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, -20, 120, -95, -53, -116, 100, 18, -9, -16, -24, 34, 72, -14, 121, -92]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[39, -115, -74, 50, 125, -46, 125, 22, 127, 6, 69, 26, 89, 121, 21, 48]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-39, 127, 114, 127, 113, 82, 108, 41, -118, 51, -49, -94, -84, -112, 108, -92]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[45, 10, 40, 44, -88, -103, -58, -77, -30, -52, 97, -47, 25, 110, 65, -73]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-58, 35, -55, 17, 10, 113, 116, -98, -20, -7, -11, -14, 106, 61, 61, 22]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[7, -100, -81, -73, -33, -9, -102, 55, 10, 42, -54, -83, -113, 110, 107, 97, 88, 4, -19, -108, 62, -20, -118, 83, 97, -69, 7, 74, -49, -96, -6, -48, 45, 10, 40, 44, -88, -103, -58, -77, -30, -52, 97, -47, 25, 110, 65, -73]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-64, 63, 122, -41, 22, 101, 1, -19, -44, 78, 61, 51, 14, -97, -22, -96]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[28, -2, -54, 115, 99, 114, -6, 62, -20, 114, -3, -34, 48, 94, 30, 62]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-113, -9, -93, 64, 120, 25, -125, 83, 53, 32, -119, 0, -66, 60, 3, -47]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[96, 44, 49, 116, 33, 93, 82, -64, -3, -63, 92, 106, -25, 8, 28, 47]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-113, -90, -13, -80, 127, -66, 43, 118, 39, -113, 91, -91, -10, -56, 43, 115]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[81, -39, -122, -118, 14, 69, 36, -127, 66, -46, 112, -48, 126, 79, 69, -80]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[49, 81, 65, 45, -65, -123, 122, 107, 39, -41, 65, 101, -57, 25, -62, -10]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-47, 33, -127, 35, -20, 81, 120, -104, -90, 77, -83, -95, -73, -116, 121, 73]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-36, -65, 109, 121, 109, -97, 76, -49, -7, -114, 64, 30, -14, 95, 28, 55, 52, 99, -60, -124, 77, -56, -105, 126, 11, -92, -14, -14, 39, 62, 100, -88, 49, 81, 65, 45, -65, -123, 122, 107, 39, -41, 65, 101, -57, 25, -62, -10]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[61, -79, 38, -77, -114, -60, 28, -21, 14, 12, 86, 98, -75, 34, -30, -19]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[79, -90, 65, -120, -34, 87, -72, -78, -23, 97, 76, -57, -88, 45, 116, 105]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[111, 86, 61, -41, 111, 111, 29, -9, 95, 127, 63, -31, -42, -104, -48, 84, -2, 66, -112, -101, 26, 93, 29, 106, 112, 37, -125, -84, 121, 98, -43, 35, -14, -14, -27, 53, 118, -46, 63, -73, 46, 50, 28, 27, 65, 99, -29, -71, 92, -84, -48, -45, 58, -101, 107, -2, -96, 35, 80, 25, -98, 24, 7, 101, 41, 9, -84, -124, -79, 36, -81, -36, -96, 18, 0, 13, -98, 55, -9, -93, -48, 55, -10, -85, -104, 37, 126, -71, 35, 126, 28, -92, 111, 68, 79, 99, 61, -79, 38, -77, -114, -60, 28, -21, 14, 12, 86, 98, -75, 34, -30, -19]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-5, -20, 101, -18, -62, -36, 56, 21, -30, -68, -127, 25, 119, -22, -12, 49, -82, 111, -55, 13, 65, -65, -56, 41, 21, 7, -123, 24, 36, -50, -117, -116, -116, -64, 70, 38, 102, -84, 72, -41, 95, -47, -79, -76, -109, -3, 91, -5, -29, -84, -5, 29, 105, 69, -10, -101, 59, -121, 28, -31, -125, 16, 108, 8, 9, 23, -88, -104, -86, 1, -77, -109, -13, -127, 115, -115, 113, 100, 52, -15, 122, -93, 31, -53, -13, 105, 55, 6, -80, 70, 111, -104, -10, -51, -43, -109, 61, -79, 38, -77, -114, -60, 28, -21, 14, 12, 86, 98, -75, 34, -30, -19]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey25);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        java.lang.Class<?> wildcardClass36 = secretKey25.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[54, -123, 117, 54, 69, -104, 33, -22, 110, 80, 11, -12, -101, 4, -26, -83]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, -10, 91, 15, -36, 118, 7, -110, 88, 17, -48, -40, 96, 89, 74, 101]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[14, 125, -113, 61, 37, 91, -123, -83, -47, 55, -116, 77, -61, 118, -50, -30]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-59, 44, -69, -4, 23, 118, -4, -29, 35, 127, -19, 4, -126, -91, -80, -22]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-65, -53, 61, -79, 52, 69, 108, -26, 70, 111, -61, -44, -89, -54, -44, -92, -105, -90, -100, -76, -2, -28, -99, -95, -14, 38, -16, 96, 52, -42, -103, 124, 14, 125, -113, 61, 37, 91, -123, -83, -47, 55, -116, 77, -61, 118, -50, -30]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-84, -76, 86, -62, 3, 43, -96, 21, 103, -48, 106, -55, 22, -70, -10, 23, 33, 40, 117, -60, -12, -3, -79, -22, -29, -21, 55, -6, 17, -59, 107, -20, 14, 125, -113, 61, 37, 91, -123, -83, -47, 55, -116, 77, -61, 118, -50, -30]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[54, -107, 74, -13, -40, 104, -1, 45, 46, 72, -36, 2, -34, -34, 17, -114, -17, 106, 61, 73, -50, -69, 21, -55, -104, -22, -69, 43, 70, 125, -8, -3, 62, 94, 6, -98, 89, 88, 104, 7, -91, -15, 112, -34, 41, 118, -113, 36, 27, -104, -120, 25, 0, -84, -127, 95, 100, -124, -48, -61, -34, 63, -61, -11, 22, 121, 120, 17, 32, 2, -72, -57, -82, -73, 98, 3, -103, -71, -41, 114, -35, -27, 7, 7, -79, -68, 61, 1, -94, -15, 98, 14, -21, -26, 41, 5, 14, 125, -113, 61, 37, 91, -123, -83, -47, 55, -116, 77, -61, 118, -50, -30]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 42, 72, 74, -109, -21, -22, -123, 7, 26, -73, 36, 60, -36, 112, 66, 32, -116, -78, 63, 90, -34, -42, 37, 112, 62, -74, -123, 34, 2, -112, 53, 14, 125, -113, 61, 37, 91, -123, -83, -47, 55, -116, 77, -61, 118, -50, -30]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[23, 50, -120, 114, -58, -22, 22, -109, 69, 65, 55, 34, -85, 103, 29, -81, 6, 88, -99, 1, -2, -44, -70, 114, -68, -22, 105, -102, -24, 110, -35, 69, 25, -16, -121, -79, 19, -14, 85, 45, 87, -111, 0, -13, 22, 11, -128, -11, 6, -91, -28, 103, 88, 40, 67, -10, -99, -76, -104, -23, 77, -55, 99, -49, 121, 76, -32, 126, -73, 62, 58, -78, 28, 120, -33, 110, 109, 28, -29, 46, 108, 77, 37, -109, 75, -27, -93, -50, -44, -107, -58, 9, 27, 24, -96, -37, 14, 125, -113, 61, 37, 91, -123, -83, -47, 55, -116, 77, -61, 118, -50, -30]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey1);
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey10);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-13, -1, -25, -24, -42, 124, -6, 61, -76, 14, -30, 55, 124, 115, 26, 125]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 72, -126, 108, -80, -123, -1, -56, 71, -8, 74, -120, 38, -72, -55, -107]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-100, 108, -93, -108, -91, 78, -71, 125, 61, 112, 91, -54, -103, -122, 54, -62]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-100, 108, -93, -108, -91, 78, -71, 125, 61, 112, 91, -54, -103, -122, 54, -62]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[104, 72, -126, 108, -80, -123, -1, -56, 71, -8, 74, -120, 38, -72, -55, -107]");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey27);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey27);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey27);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-32, 75, 26, 52, 68, 7, 112, 33, 34, 56, 55, -48, 94, 37, -56, 55]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-25, -19, 76, -88, -50, -7, -80, 85, -84, 38, 31, 21, 61, 24, 33, -33]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[81, 15, 16, -102, 91, 40, -101, 27, 100, -109, 121, 9, 115, -20, -126, -77, -33, 83, 98, 104, 64, -127, -109, -14, 73, 123, -95, -123, 110, -34, -53, 95, -32, 75, 26, 52, 68, 7, 112, 33, 34, 56, 55, -48, 94, 37, -56, 55]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[54, -101, -85, 59, -47, 19, 2, -26, 54, -103, 38, -103, 51, -81, 74, -91]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-123, 69, 57, 54, -102, 15, -75, 51, 79, -88, -108, 12, -115, 50, -121, -11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, -61, -39, 11, 87, -103, 33, 114, -85, 42, -84, -118, -86, -61, 40, 90]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-5, -27, 62, -2, 109, 58, -20, -113, -11, 55, 76, -100, 6, -112, 15, -89]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[93, 44, 101, -40, 117, -64, -63, -70, 119, -16, -95, -127, 73, 48, -23, 106, 88, 22, -79, -114, 54, -81, 123, 16, -59, -87, -84, -16, 7, 8, 90, 72, 104, -61, -39, 11, 87, -103, 33, 114, -85, 42, -84, -118, -86, -61, 40, 90]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[6, 103, 100, 123, 125, 15, 71, 107, -22, 64, -12, 115, -122, 23, 73, -38, 121, 19, 69, 44, 4, 118, -101, -40, 109, 102, 103, -21, -64, -78, -45, -113, 104, -61, -39, 11, 87, -103, 33, 114, -85, 42, -84, -118, -86, -61, 40, 90]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-23, -80, -127, 94, 43, -6, -61, 98, 75, -4, -29, 84, 33, 3, -98, 51, -17, -40, 50, -97, 67, 22, -72, 96, 99, 22, 97, -83, -19, -112, 30, -38, -40, 39, 0, -127, 31, -112, -118, 75, 76, -104, -58, -23, 68, -81, -80, 44, -104, 13, 95, 21, -128, -23, -24, 102, -33, 69, -27, 113, -43, -76, 94, 40, -44, 114, 126, 35, -49, -118, 107, -53, 57, -100, 47, -81, 122, 28, -56, 71, -64, 126, 15, 80, -100, 47, -57, 49, 99, -52, 98, -5, -3, 9, 0, 12, 104, -61, -39, 11, 87, -103, 33, 114, -85, 42, -84, -118, -86, -61, 40, 90]");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey16);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey16);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey16);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey16);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-11, -81, 72, -39, 75, -125, 39, -29, 22, 14, 24, 124, -114, -54, -113, -76]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-45, 22, -24, -16, -25, 96, -71, 67, -39, -107, 93, 32, 41, 114, 53, 72]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-45, 22, -24, -16, -25, 96, -71, 67, -39, -107, 93, 32, 41, 114, 53, 72]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-11, -81, 72, -39, 75, -125, 39, -29, 22, 14, 24, 124, -114, -54, -113, -76]");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-81, 106, 30, 8, 35, 117, 92, -42, -27, -84, 81, 38, 6, -115, 72, -119]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[101, -31, 80, 12, 106, 118, -112, 3, -43, -13, 50, 80, -60, 15, -96, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[25, -40, 22, -81, -103, -96, -17, -99, 82, 11, -63, -52, 58, -38, 91, 118]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-81, 106, 30, 8, 35, 117, 92, -42, -27, -84, 81, 38, 6, -115, 72, -119]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-20, 82, 18, -62, -59, -123, 79, 34, -25, 7, 94, -114, -12, -12, -100, 69, -53, 43, 95, 55, 110, -101, 19, -84, 41, 22, -120, -103, -45, -40, 19, 39, -52, -93, 39, 36, -108, -51, 92, -42, 15, -34, -43, 0, 6, 120, 100, -111, 100, 57, 55, 15, 95, -99, 9, 100, 98, -58, -67, -68, -35, 99, -96, -48, -123, -59, 63, -68, 82, -72, 22, 58, 49, 70, 110, -7, -39, -35, -12, -74, -47, -93, 48, 81, 102, 70, 96, 84, 53, 8, -25, 115, -12, -77, -27, 65, -81, 106, 30, 8, 35, 117, 92, -42, -27, -84, 81, 38, 6, -115, 72, -119]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[111, 105, -115, 123, -122, -102, 12, -94, 15, -64, 111, 109, 49, 63, 96, 84, 44, 86, 35, 115, 65, 78, -102, -108, 44, -93, 15, -111, 103, -49, -90, 111, -81, 106, 30, 8, 35, 117, 92, -42, -27, -84, 81, 38, 6, -115, 72, -119]");
        org.junit.Assert.assertNotNull(byteArray23);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[124, -33, 41, 127, -55, -63, 22, -100, -52, -119, -33, -82, 38, 14, 46, 33]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[80, 25, 22, 102, 104, 75, -102, -8, -34, 91, 125, 54, 2, 122, -61, -119]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-59, 117, 60, -6, -46, -56, -113, -115, 40, -28, 30, 33, 107, -117, 48, 124]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[63, -35, 20, 21, -72, 64, 80, -100, 27, -90, -44, 89, 71, 118, 84, -101, 86, 103, -16, 10, -86, 39, 74, -13, -62, -16, -64, -117, 77, 80, 64, -11, 124, -33, 41, 127, -55, -63, 22, -100, -52, -119, -33, -82, 38, 14, 46, 33]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey18);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey43);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey43);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[91, -6, 70, 18, 43, -14, -95, 3, -115, -37, -40, -80, 53, -56, 96, -3]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[24, 58, -13, 78, 35, -29, -14, -69, 84, 11, 56, 43, -85, 41, -114, -102]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-90, 114, -85, -1, -74, -116, -106, 44, -106, -21, -104, -98, -19, 89, -102, 11]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-44, 88, -1, -4, -114, 36, -43, 40, -99, -32, 46, 71, 39, 6, -15, 36]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-21, -111, -124, 77, -91, -81, -122, -113, 97, -127, -17, -12, 80, -113, 112, -66, 96, -23, -55, -2, 98, 71, -96, 30, -73, 57, 4, 62, 91, 32, 54, -26, -90, 114, -85, -1, -74, -116, -106, 44, -106, -21, -104, -98, -19, 89, -102, 11]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[84, -125, -128, -96, 62, -120, 47, 53, 3, 17, 19, 7, -41, -69, -80, -77]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, 47, -25, -44, 125, 97, -57, 53, -121, 27, -31, -80, -83, -27, -74, -125]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[3, -123, 27, 93, 95, -18, 113, -119, 43, -7, 77, 87, 0, 55, 95, -54]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[20, -15, -30, 109, 127, 70, -85, 81, -114, 123, -58, 79, 125, -49, -125, 37]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-96, -105, -98, -16, -19, -62, -89, -60, -87, -34, -7, -73, -115, -114, 33, -80, -12, -95, -1, 82, 72, -84, 61, -25, -12, -28, -43, -126, -18, -57, -98, 47, 3, -123, 27, 93, 95, -18, 113, -119, 43, -7, 77, 87, 0, 55, 95, -54]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-9, -4, -122, -109, -80, -36, 81, -116, 119, -105, 16, -15, 111, -47, 15, 8, 67, 33, 25, -10, -11, 94, 4, -42, 10, -56, -49, -113, -48, -30, -120, -3, 3, -123, 27, 93, 95, -18, 113, -119, 43, -7, 77, 87, 0, 55, 95, -54]");
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[127, 44, 54, 78, 53, -9, -41, -35, -67, -107, 116, -38, -115, -63, -40, -41]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-81, -21, -97, 49, -107, -54, -119, -106, -39, 7, -99, 99, -45, -28, -63, 43]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-32, -105, 94, 76, -104, 28, -51, -75, -43, 30, 43, 109, 89, 75, 108, -16]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[69, -121, -14, 127, -83, -13, 120, 126, 44, 1, -74, -59, 82, -8, 23, -92, 90, 43, 73, -33, 10, 101, 14, 9, -111, -74, -76, -108, -67, -96, -71, 10, 127, 44, 54, 78, 53, -9, -41, -35, -67, -107, 116, -38, -115, -63, -40, -41]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[44, 103, -103, 10, 116, 78, -21, 76, -45, 63, -87, 57, 103, 49, -84, -8, -12, -103, -10, 103, -21, 47, -70, 72, -23, -122, 58, -86, 4, 25, -24, -111, 127, 44, 54, 78, 53, -9, -41, -35, -67, -107, 116, -38, -115, -63, -40, -41]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey87);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey87);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey87);
        java.lang.Class<?> wildcardClass96 = secretKey87.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[71, 69, 19, 9, 33, -15, -16, 94, 107, 59, -84, -76, -25, -110, 112, 81]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[50, 84, 92, 71, -69, 83, -121, -49, 49, -65, -1, -22, -49, -51, -118, -119]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-112, -20, -33, 24, 44, -16, -83, -96, -92, 96, -44, -1, 70, -53, 23, -74]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-44, -49, -104, 126, 84, 44, -80, 118, -108, 37, -81, 66, 18, 63, 13, -13]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-41, -62, 57, -73, 81, 9, 117, -47, -40, 98, 114, -29, 105, 126, 85, -87]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[46, 30, -46, -111, -50, 8, 112, 14, -88, 9, 66, -75, -67, 116, 47, 92]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[69, -65, -128, 72, 32, -32, -28, -38, 38, 46, 87, 47, 110, 93, 81, -128]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-121, -42, 17, -32, 97, -12, -45, -39, 57, 79, 108, -105, 7, -14, 31, -25]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[70, 53, -84, -43, 78, 40, 34, 3, -51, 82, 71, 49, 80, 1, -110, 87, 10, 3, 57, -105, -49, -50, 44, 13, 48, 77, -100, -108, 119, -32, 104, 92, 69, -65, -128, 72, 32, -32, -28, -38, 38, 46, 87, 47, 110, 93, 81, -128]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[57, 16, 3, 31, 75, 43, 29, 102, 66, -84, -72, -5, 20, 15, 30, 81]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[8, -50, 61, 101, 115, 53, 33, -120, 113, 17, -44, 119, -92, -47, -83, 40]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[8, -19, -109, 125, -34, 121, 35, -34, -45, 45, -38, 23, -53, -115, 63, 65]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[100, -97, -95, 118, -92, -13, -3, 120, 13, -126, -114, -53, -33, -4, 26, -9]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-120, 29, -9, 108, -45, -22, 61, -72, 53, 111, -123, -22, -54, 125, -87, 80]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-15, -86, -26, -33, 99, 22, -116, -19, -18, -16, 63, -30, -109, -66, -86, 10]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-88, -46, 54, -35, 86, -39, 125, -3, 77, 78, -25, 127, 75, 99, -123, -21]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[115, 103, -43, 78, -21, 111, 115, 20, 80, 91, -81, 103, 20, -79, -89, -7]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[43, 10, 80, 82, -55, 52, -104, 52, -60, 84, -110, -27, 117, 25, -11, -30, 93, 40, -92, -97, -102, -107, 94, -14, -90, 3, -106, 55, 127, -13, 120, -63, -88, -46, 54, -35, 86, -39, 125, -3, 77, 78, -25, 127, 75, 99, -123, -21]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.Class<?> wildcardClass11 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[78, 10, 25, -45, 38, -4, -119, -93, -83, 120, 83, 48, -124, -8, 49, -84]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[127, 74, -21, 101, 22, 21, -72, -69, -105, -48, 34, -33, 121, 59, -51, 23]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[127, 74, -21, 101, 22, 21, -72, -69, -105, -48, 34, -33, 121, 59, -51, 23]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-52, 28, 61, -54, -84, 110, 4, -75, -127, -70, 8, -104, 119, 53, 127, -56]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[57, 9, -92, 14, 50, -82, 83, -24, -127, 56, -103, 2, -110, -88, -10, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[22, -7, -85, -39, -23, 31, 13, 24, -44, -59, 30, -88, -64, -128, 42, 71]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-116, 19, 24, -48, -50, 77, 101, -49, -7, -108, 18, 37, 113, -124, -110, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[13, -36, 45, 111, -33, -107, 108, -20, -41, -117, 69, 95, -70, 34, 13, 32, 80, 40, 22, -64, 57, 44, -101, 90, 106, -22, 97, 49, 75, -9, 8, -51, 22, -7, -85, -39, -23, 31, 13, 24, -44, -59, 30, -88, -64, -128, 42, 71]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[22, -7, -85, -39, -23, 31, 13, 24, -44, -59, 30, -88, -64, -128, 42, 71]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-116, 19, 24, -48, -50, 77, 101, -49, -7, -108, 18, 37, 113, -124, -110, 101]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[8, -124, -27, 66, -7, -49, 59, 124, 92, -105, 62, -117, 57, -42, 68, 65, 41, 42, -26, -17, 87, 88, -40, 111, -65, 112, -51, -119, -48, -38, -9, -61, 22, -7, -85, -39, -23, 31, 13, 24, -44, -59, 30, -88, -64, -128, 42, 71]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[50, -65, 16, -56, -44, -67, 18, 21, -53, 53, 16, -8, -119, -105, -9, 125, -4, 47, -86, -16, -110, -114, 50, 27, 67, -54, 13, 106, -62, 50, -124, -37, -82, -17, 113, 1, -34, 124, 108, 0, -100, 110, 3, 103, -11, -42, -51, -2, 84, -55, 78, 58, -46, 55, -73, -74, 0, -50, 1, 11, -30, -125, 57, -1, 15, -89, -10, -60, 113, -44, 1, 66, 36, 82, -41, 23, -51, 46, 64, -30, 56, -108, 89, 58, -111, 24, -74, -24, -89, 1, -107, 97, 111, 80, 6, -101, 22, -7, -85, -39, -23, 31, 13, 24, -44, -59, 30, -88, -64, -128, 42, 71]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "32BF10C8D4BD1215CB3510F88997F77DFC2FAAF0928E321B43CA0D6AC23284DBAEEF7101DE7C6C009C6E0367F5D6CDFE54C94E3AD237B7B600CE010BE28339FF0FA7F6C471D401422452D717CD2E40E23894593A9118B6E8A70195616F50069B16F9ABD9E91F0D18D4C51EA8C0802A47" + "'", str31, "32BF10C8D4BD1215CB3510F88997F77DFC2FAAF0928E321B43CA0D6AC23284DBAEEF7101DE7C6C009C6E0367F5D6CDFE54C94E3AD237B7B600CE010BE28339FF0FA7F6C471D401422452D717CD2E40E23894593A9118B6E8A70195616F50069B16F9ABD9E91F0D18D4C51EA8C0802A47");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[52, 81, -39, 40, 88, 48, -114, -51, -54, -66, 25, -5, -33, 116, 28, 11]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-21, -99, 12, -1, -103, -111, 62, 82, 61, -31, 77, -99, 88, -2, -92, -59]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-8, -22, -75, 70, 86, -3, 103, 116, -94, -70, 103, 113, 14, -122, 48, 37]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-114, 8, 127, 65, 100, -84, -11, -124, -102, -27, -75, -85, 80, 81, 17, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[3, 56, -120, 52, 48, 89, -16, 122, 79, 110, 101, -43, 19, -48, 114, -47, -43, 88, 61, 61, -73, 58, -76, -81, -76, 9, 56, 7, 21, 78, -62, 65, -8, -22, -75, 70, 86, -3, 103, 116, -94, -70, 103, 113, 14, -122, 48, 37]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[68, 113, -4, 99, -118, -56, 39, 83, 53, -117, 37, 63, 8, -98, -38, 66, -115, -1, 88, 10, 127, -24, -8, 127, -42, 94, -118, 88, -125, 83, -56, 90, -98, -110, 47, 44, -114, 111, -50, -109, -65, 52, -2, -119, 54, -66, 44, 115, -14, 109, -42, -106, -20, -10, 9, -46, 91, 92, 65, -95, 15, -32, 24, 90, 67, 69, 10, 4, -22, -97, 1, 20, 4, 62, 86, -38, 1, -105, 18, -59, 109, 96, -122, 35, -90, 119, -1, -22, -116, -90, 110, 93, -62, -7, -74, -43, -8, -22, -75, 70, 86, -3, 103, 116, -94, -70, 103, 113, 14, -122, 48, 37]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-47, 101, -93, -56, -83, -55, -126, -15, 53, -66, -59, -30, -13, 111, -45, 14, 119, -99, -97, 122, 65, -56, -115, 61, 51, -28, -29, 96, -123, 68, -121, -88, -8, -22, -75, 70, 86, -3, 103, 116, -94, -70, 103, 113, 14, -122, 48, 37]");
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.Class<?> wildcardClass30 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-17, -108, -121, -73, -89, 4, -42, 100, -108, -31, -54, -71, -48, 34, -128, -64]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[33, -8, 70, -102, -73, 78, 108, 94, 92, 17, 85, 58, 35, 42, -65, 79]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 2, 68, 94, 48, 82, 74, 52, -7, 124, -52, 115, 120, 102, -66, 70]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[95, -72, 119, -78, -65, 34, 28, -86, 31, -107, 23, -47, 29, 33, 29, -62]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-15, 0, -21, -99, 83, -106, 114, 83, -108, 127, -2, -55, 76, -112, -43, -14, 79, 98, 61, 102, -58, 58, -3, 25, 99, 70, 63, 98, 93, -46, 119, 94, 1, 2, 68, 94, 48, 82, 74, 52, -7, 124, -52, 115, 120, 102, -66, 70]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[126, 35, -14, -106, 75, -113, -120, 56, 85, -44, 66, 1, -29, -45, 92, 7, 89, -55, 67, -69, 110, 60, 95, 123, 47, -100, 57, -29, 0, -44, -26, -58, 1, 2, 68, 94, 48, 82, 74, 52, -7, 124, -52, 115, 120, 102, -66, 70]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-86, -122, 115, 51, 122, -49, -75, 94, -122, 74, 66, -79, 62, 50, -45, 25, -66, 71, 34, -122, 108, 4, -57, 53, -120, -61, -92, -40, -52, -44, 62, 65, 95, -105, 100, 83, -35, -112, 71, -31, -28, 93, 108, 45, 2, -61, 88, -27, -127, -4, -98, 123, 34, -109, 35, -56, 16, -110, -128, 52, 74, 80, 62, -114, 28, 17, 14, 66, -78, -71, -48, 16, -125, -52, 10, -9, 101, 44, 48, 71, 114, 101, 121, -51, 109, -62, 50, -112, 108, -38, 46, 123, -74, -17, 42, 103, 1, 2, 68, 94, 48, 82, 74, 52, -7, 124, -52, 115, 120, 102, -66, 70]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-86, -122, 115, 51, 122, -49, -75, 94, -122, 74, 66, -79, 62, 50, -45, 25, -66, 71, 34, -122, 108, 4, -57, 53, -120, -61, -92, -40, -52, -44, 62, 65, 95, -105, 100, 83, -35, -112, 71, -31, -28, 93, 108, 45, 2, -61, 88, -27, -127, -4, -98, 123, 34, -109, 35, -56, 16, -110, -128, 52, 74, 80, 62, -114, 28, 17, 14, 66, -78, -71, -48, 16, -125, -52, 10, -9, 101, 44, 48, 71, 114, 101, 121, -51, 109, -62, 50, -112, 108, -38, 46, 123, -74, -17, 42, 103, 1, 2, 68, 94, 48, 82, 74, 52, -7, 124, -52, 115, 120, 102, -66, 70]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AA8673337ACFB55E864A42B13E32D319BE4722866C04C73588C3A4D8CCD43E415F976453DD9047E1E45D6C2D02C358E581FC9E7B229323C8109280344A503E8E1C110E42B2B9D01083CC0AF7652C3047726579CD6DC232906CDA2E7BB6EF2A670102445E30524A34F97CCC737866BE46" + "'", str29, "AA8673337ACFB55E864A42B13E32D319BE4722866C04C73588C3A4D8CCD43E415F976453DD9047E1E45D6C2D02C358E581FC9E7B229323C8109280344A503E8E1C110E42B2B9D01083CC0AF7652C3047726579CD6DC232906CDA2E7BB6EF2A670102445E30524A34F97CCC737866BE46");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[2, 0, 12, 25, 33, 114, 111, 101, 23, 80, -38, 58, -113, -94, -109, 64]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[125, 100, 96, 121, -11, -103, -42, 117, 11, 121, -2, 50, 6, -56, 84, -75]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[125, 100, 96, 121, -11, -103, -42, 117, 11, 121, -2, 50, 6, -56, 84, -75]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-115, -2, -77, -33, 88, -105, 10, 103, -100, -115, 16, 85, 1, 110, -10, 47]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[2, 0, 12, 25, 33, 114, 111, 101, 23, 80, -38, 58, -113, -94, -109, 64]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey52);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey52);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey52);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey52);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[52, 85, -103, -69, 40, 28, 21, -117, -53, 110, -50, 92, -102, 58, -38, 47]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-3, -39, 35, 7, 48, -122, 67, -13, 97, 88, 28, 119, -4, -84, -62, 11]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-52, 119, -64, -118, -91, 79, -89, -60, -80, 80, -17, 70, 82, -104, 19, 124]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[38, 102, -12, -89, -86, -82, -9, -6, 22, 121, 25, 104, 37, 56, -118, -123]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-5, 40, -23, 33, 39, 58, 104, -92, -9, -96, -98, 119, -93, 34, -88, -44, -43, 67, 114, -78, -69, 34, -122, 23, -108, -55, -120, -123, 119, -2, -14, 31, -52, 119, -64, -118, -91, 79, -89, -60, -80, 80, -17, 70, 82, -104, 19, 124]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[62, 53, 73, -89, 1, 112, 45, 121, -54, -77, -21, -40, -52, 11, -11, 120, 106, -55, -88, -98, -32, 113, -99, -38, 97, 67, 79, -64, -52, 57, 10, -70, -52, 119, -64, -118, -91, 79, -89, -60, -80, 80, -17, 70, 82, -104, 19, 124]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-66, -33, -10, 110, -28, 50, -121, -17, 118, -17, -36, -60, 21, -37, -110, -71, -10, 120, -90, -71, 109, 94, 21, -106, 10, 37, 125, 12, -125, 99, -70, -82, -78, -117, 93, -41, 112, -109, -120, -9, 89, 119, 34, 19, -52, 58, -32, -84, -38, 26, 95, 67, -49, 41, -88, -91, 105, -19, -19, 68, -23, 102, -103, 74, -77, 8, 39, -75, 69, -120, -75, 114, -73, -53, 12, 8, 73, 7, -19, -8, 34, -10, 77, 8, -97, 30, -48, 2, -44, -13, -30, -71, -120, -87, 74, 64, -52, 119, -64, -118, -91, 79, -89, -60, -80, 80, -17, 70, 82, -104, 19, 124]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "BEDFF66EE43287EF76EFDCC415DB92B9F678A6B96D5E15960A257D0C8363BAAEB28B5DD7709388F759772213CC3AE0ACDA1A5F43CF29A8A569EDED44E966994AB30827B54588B572B7CB0C084907EDF822F64D089F1ED002D4F3E2B988A94A40CC77C08AA54FA7C4B050EF465298137C" + "'", str27, "BEDFF66EE43287EF76EFDCC415DB92B9F678A6B96D5E15960A257D0C8363BAAEB28B5DD7709388F759772213CC3AE0ACDA1A5F43CF29A8A569EDED44E966994AB30827B54588B572B7CB0C084907EDF822F64D089F1ED002D4F3E2B988A94A40CC77C08AA54FA7C4B050EF465298137C");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "BEDFF66EE43287EF76EFDCC415DB92B9F678A6B96D5E15960A257D0C8363BAAEB28B5DD7709388F759772213CC3AE0ACDA1A5F43CF29A8A569EDED44E966994AB30827B54588B572B7CB0C084907EDF822F64D089F1ED002D4F3E2B988A94A40CC77C08AA54FA7C4B050EF465298137C" + "'", str28, "BEDFF66EE43287EF76EFDCC415DB92B9F678A6B96D5E15960A257D0C8363BAAEB28B5DD7709388F759772213CC3AE0ACDA1A5F43CF29A8A569EDED44E966994AB30827B54588B572B7CB0C084907EDF822F64D089F1ED002D4F3E2B988A94A40CC77C08AA54FA7C4B050EF465298137C");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[69, 53, 72, 92, 61, 59, -39, 23, 1, 79, 34, 77, 9, 96, 126, 114]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-101, -26, -21, -2, 18, -39, 5, 113, 37, 37, 14, -15, 114, 105, -18, -100]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-125, -55, 103, -25, 22, -128, 30, 48, -81, 49, -128, 20, -52, -72, 31, 109]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-27, -10, 26, 31, 106, -123, -121, -111, 100, 54, -23, -6, 89, 48, -118, -8]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[54, -95, -5, 0, 2, 123, -128, -3, -123, 73, 59, 6, 95, 93, -25, -35, 28, -71, 85, 49, -22, -122, -117, 80, 106, 100, -4, -65, -115, -68, 100, -88, -125, -55, 103, -25, 22, -128, 30, 48, -81, 49, -128, 20, -52, -72, 31, 109]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-82, -36, -23, -40, 90, 113, 9, -117, -42, -76, 59, -35, -119, -22, -87, 73, -67, 101, 89, -54, 48, -112, 68, 63, -113, -103, -18, -73, 109, -55, -36, -84, -125, -55, 103, -25, 22, -128, 30, 48, -81, 49, -128, 20, -52, -72, 31, 109]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-126, 114, 65, 46, -76, -32, -34, 21, 10, 111, 74, -114, 109, -85, 122, -123, 85, -21, -104, 75, 26, 125, 75, -50, 127, 24, -34, 78, -108, -88, -70, 58, 10, 99, 71, -115, -107, 60, -99, -97, -19, 59, -76, 12, -59, -80, 57, -79, -27, 120, -51, 96, 116, 7, -97, 109, -42, 45, -17, -24, 51, -88, -55, 123, -93, -95, -85, -26, -118, 60, -69, -24, 60, 30, 64, -16, -78, -69, 20, -121, 127, -32, -47, 83, 22, -86, 62, 67, 34, -30, 36, -6, -21, 122, -91, -7, -125, -55, 103, -25, 22, -128, 30, 48, -81, 49, -128, 20, -52, -72, 31, 109]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[90, 24, -97, 34, 115, 4, 107, 61, 8, -39, -75, 65, -36, -29, -77, -52, 44, 24, 51, -33, 39, -87, -125, -80, -76, 58, -73, 64, 107, 100, -84, -61, -125, -55, 103, -25, 22, -128, 30, 48, -81, 49, -128, 20, -52, -72, 31, 109]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[119, -42, 76, 19, -15, -62, 65, -27, 9, -36, 78, 95, 52, -119, -36, -125, -70, 5, -11, 0, 39, 6, 121, -14, -119, -105, -53, -85, -21, -29, -128, 127, -71, 94, -119, 10, -16, 78, 68, 99, -96, -108, -89, -2, -6, 110, -35, 69, -61, 107, 117, -23, 107, 117, -109, 16, -72, -93, 40, 35, -65, 108, -100, 126, -76, -56, -43, 118, 24, -11, 111, -121, 49, -6, 83, 82, 12, -53, -29, 56, 109, -8, 0, -109, -100, -56, 46, -68, 17, -38, -128, 100, 32, 127, 74, -54, -125, -55, 103, -25, 22, -128, 30, 48, -81, 49, -128, 20, -52, -72, 31, 109]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("A856F4BB028ED37E42CCF9A0F314FBC195A260BA04EEEF22D305973260944F431BE4FC79E853B7AF60ECDC1555D9124211637AF288C9EC32916D12A203EB5EFA19BE8DB3AB1518F05C443DD81721AF22E81EED89735A10E4AA3A9B09F8438210CA4375536161AC4CDE469F449ACF1A07", secretKey23);
        java.lang.Class<?> wildcardClass35 = byteArray34.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[25, 70, -28, 19, 123, -25, 123, 100, -68, -124, 64, 96, 41, -104, 11, -40]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-112, -52, 92, -66, -59, -46, 95, -56, -39, -89, 7, 57, 12, -126, -115, -26]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-64, -45, 77, -22, 47, -85, 85, 57, 62, 13, -86, -16, -20, 81, -14, 85]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-97, -24, -112, 31, 15, -21, -46, -69, 63, -81, -111, -91, 29, -27, -16, 100]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[79, -71, -108, 123, -8, 44, 56, -76, -2, 37, 104, 76, 50, 104, -28, 27, -124, 39, -15, -116, 112, -63, 109, -16, 49, -79, 112, -108, -91, 101, -93, -111, -64, -45, 77, -22, 47, -85, 85, 57, 62, 13, -86, -16, -20, 81, -14, 85]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[93, -81, -18, -82, -37, -116, 104, 12, -66, -73, -86, 45, -88, 46, -21, -84, -19, 102, 30, 22, -83, 82, 39, 98, 69, -50, 80, 51, 125, -91, -29, 28, -64, -45, 77, -22, 47, -85, 85, 57, 62, 13, -86, -16, -20, 81, -14, 85]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[61, 116, 85, -86, -77, 92, -24, -67, 100, 31, 42, 8, -56, -34, -95, -63, -50, 66, -114, -100, 81, -47, -58, -54, 99, -84, -3, -114, 17, -13, 39, 71, -104, 123, 83, 10, 2, -69, 62, -95, -103, 6, -29, 121, -82, -11, 34, -82, 58, 20, -126, -123, 62, -19, -17, -60, 32, -60, 15, -1, 84, 69, -98, -46, 50, -77, 54, -4, 22, -9, -81, -48, 47, -110, 122, 2, -88, 35, -35, -62, -29, -102, -24, 125, -21, -25, -18, 58, -54, -3, 2, -121, -113, -43, 11, -28, -64, -45, 77, -22, 47, -85, 85, 57, 62, 13, -86, -16, -20, 81, -14, 85]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-7, -69, 88, 121, 127, 52, -16, 99, 109, -14, 0, -13, 93, -60, -45, 37, 5, 116, 82, -69, -48, 82, -57, -100, -86, -96, 85, 81, 58, -40, -1, 124, -64, -45, 77, -22, 47, -85, 85, 57, 62, 13, -86, -16, -20, 81, -14, 85]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[31, -62, -35, -119, -86, -113, -58, -120, -8, -78, 55, -7, 88, -29, 116, -19, -21, 40, 116, -14, -66, 54, 81, 118, 60, 126, -7, -48, -8, 75, 65, 54, -64, -45, 77, -22, 47, -85, 85, 57, 62, 13, -86, -16, -20, 81, -14, 85]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-102, -50, -74, 106, 79, -117, 112, -48, 110, 68, 11, -20, 44, 54, -99, -73, -67, 82, 69, 109, 81, -31, 34, 13, -50, 79, -45, 126, 78, 52, 44, -62, -61, 7, -114, 108, 113, 36, -72, -107, 43, 18, -108, 1, 19, 72, 91, -125, 23, 44, -107, 45, -104, 117, 81, 59, -44, -1, -111, 21, -27, -44, -123, -9, -50, 109, -59, 32, -106, 76, -88, 107, 26, 101, -90, 92, -78, 89, 78, 123, 99, 48, 70, 7, 98, 85, -30, 47, 110, -73, -52, -104, 100, -76, 19, 58, -64, -45, 77, -22, 47, -85, 85, 57, 62, 13, -86, -16, -20, 81, -14, 85]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-18, 59, 103, -32, -60, 93, -85, -8, -15, 17, -67, 32, -84, 46, 79, 86]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-30, -114, -47, 106, 10, 99, -93, -122, -120, -102, 63, -122, 113, 93, -44, -21]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[114, 25, -14, -44, -91, 63, 52, 98, 115, 87, 65, -40, 23, -71, 5, -52, 6, 17, 21, -65, -12, -95, -84, -111, -63, 77, -65, 43, -58, -13, -127, -117, -54, 107, 82, -87, 93, 109, 86, 8, -94, -115, -112, 91, 6, 9, -26, -3, 55, 0, 28, -39, 126, 81, -61, -105, 28, 117, -66, -123, -72, -20, 124, -32, -39, -107, -106, 100, -39, -107, -107, -109, -75, 8, 117, -40, -9, 74, 10, -79, 48, 68, 83, 21, 18, -79, 114, -23, 68, 67, 119, 87, -42, -54, 28, 121, -18, 59, 103, -32, -60, 93, -85, -8, -15, 17, -67, 32, -84, 46, 79, 86]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-4, -46, 74, -108, -106, -61, -89, 96, 58, 119, 77, 78, 98, -62, -98, 10, -56, -55, 71, 111, -109, 17, -115, -71, 53, 65, 24, 127, -44, -4, 23, -13, -18, 59, 103, -32, -60, 93, -85, -8, -15, 17, -67, 32, -84, 46, 79, 86]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-96, -83, 3, -22, -96, -40, -31, 44, -32, 64, 123, -75, 114, 53, 4, 124, 80, 6, -99, 56, -58, 24, 125, 119, -32, 50, -14, 127, 126, 49, 27, -7, -18, 59, 103, -32, -60, 93, -85, -8, -15, 17, -67, 32, -84, 46, 79, 86]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey25);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[112, -79, 99, -69, -46, -66, -111, -74, 67, -88, 10, -78, 52, -8, 82, 68]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-105, -90, 112, -128, -124, 73, 42, 69, 121, 41, -39, -71, 99, -76, -43, -127]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[5, 21, 17, -118, 75, -3, 101, 107, -120, 28, 126, -51, -65, -33, 101, 60]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[9, -54, 24, -38, 80, -17, -122, 33, 63, 107, 107, 88, 105, 113, 85, -83]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[32, 60, -62, -61, 0, -127, 10, -31, 63, 28, 30, 58, 80, -11, -102, -34]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[126, 16, -78, -14, 68, 123, -97, -4, 119, 110, -18, 43, 33, -106, -98, 21]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[18, 90, -111, -44, -50, -84, -64, -14, -79, -124, 90, 44, 55, 13, -109, 37]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-9, 38, -27, 22, -123, -29, -75, -110, -35, 119, 12, -44, -33, -59, -78, -114, 38, -17, -88, -83, -124, 13, 84, -15, 61, 74, -87, 37, -68, 122, 99, 55, 126, 16, -78, -14, 68, 123, -97, -4, 119, 110, -18, 43, 33, -106, -98, 21]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[126, 16, -78, -14, 68, 123, -97, -4, 119, 110, -18, 43, 33, -106, -98, 21]");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[93, 77, 108, 3, 114, -78, 83, 19, 95, 68, -121, -50, -67, 109, -40, -65]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, -25, -12, 92, 52, -42, -107, -78, -117, 124, -17, 125, -33, 96, -13, -58]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[22, 7, 19, 64, -66, 38, -70, -122, 126, -100, 25, 113, 2, -24, -1, 43]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-118, 115, 127, 47, 36, 34, -82, 9, -81, 85, -42, -89, -2, -30, -33, -101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[18, 112, 71, -74, -87, 66, 108, 81, -65, -5, 80, -33, -13, 23, 17, -75, 12, -114, -24, -109, 43, -47, 53, 102, -2, -54, -39, -74, 118, -26, -50, 23, 22, 7, 19, 64, -66, 38, -70, -122, 126, -100, 25, 113, 2, -24, -1, 43]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[73, 72, -121, -34, -115, -8, -110, -37, 64, 107, -56, 11, -27, 12, -61, 32, -22, -48, 90, 57, 54, -80, 12, -42, -16, 17, 51, -78, 34, -127, 61, 97, 12, -60, -87, -6, -29, -77, 122, -94, -95, 126, -6, 23, 58, 63, 72, -122, 71, -36, 6, -32, -41, 60, -108, -2, 108, -65, -42, -26, 55, 76, 108, -118, -71, 125, 45, 97, -44, -27, -77, -33, 29, -125, -59, -99, -67, 29, 39, 37, 109, -109, -81, 0, 42, -123, -107, 60, 7, 9, 70, -89, -92, 109, 74, -89, 22, 7, 19, 64, -66, 38, -70, -122, 126, -100, 25, 113, 2, -24, -1, 43]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[73, 72, -121, -34, -115, -8, -110, -37, 64, 107, -56, 11, -27, 12, -61, 32, -22, -48, 90, 57, 54, -80, 12, -42, -16, 17, 51, -78, 34, -127, 61, 97, 12, -60, -87, -6, -29, -77, 122, -94, -95, 126, -6, 23, 58, 63, 72, -122, 71, -36, 6, -32, -41, 60, -108, -2, 108, -65, -42, -26, 55, 76, 108, -118, -71, 125, 45, 97, -44, -27, -77, -33, 29, -125, -59, -99, -67, 29, 39, 37, 109, -109, -81, 0, 42, -123, -107, 60, 7, 9, 70, -89, -92, 109, 74, -89, 22, 7, 19, 64, -66, 38, -70, -122, 126, -100, 25, 113, 2, -24, -1, 43]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-60, 48, 33, 62, -25, -119, 62, -25, -36, -60, -16, -53, -120, -31, 99, -60, -96, 51, 52, -116, 82, 122, 77, 27, -31, -34, -115, -42, -94, -44, 68, 100, 22, 7, 19, 64, -66, 38, -70, -122, 126, -100, 25, 113, 2, -24, -1, 43]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray54 = new byte[] {};
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey56);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey60);
        byte[] byteArray64 = new byte[] {};
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray64);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey66);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey70);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey70);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey70);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey70);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey70);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey70);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey70);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[98, -92, -44, 123, -7, 54, -11, -44, -118, 121, 43, 2, -39, 56, -124, 47]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, -93, 27, -5, 76, 69, 5, 99, 42, -28, -117, -106, 72, -42, 64, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-117, -47, 113, 121, 96, 80, 29, -40, -49, 74, -18, 21, -66, -2, -22, -127]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-51, 99, 46, 2, 116, 26, -109, -17, -14, 7, 82, -115, -73, -121, -72, 44]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[16, -121, -32, 64, 111, 65, -91, -66, -2, -82, -82, -88, 105, 40, -73, -80, 69, 101, -85, 31, 96, 127, 29, -98, 72, -75, 23, 6, 106, -84, 115, -75, -117, -47, 113, 121, 96, 80, 29, -40, -49, 74, -18, 21, -66, -2, -22, -127]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[2, -6, -20, -22, 52, -36, -118, -11, -43, -79, 119, 42, 93, -111, 79, 8, 95, 97, 32, -103, 82, -43, -62, 122, -29, 46, -117, 84, -12, 85, -31, -98, 124, -85, -41, 65, 115, -16, -21, -14, 103, 50, 100, -66, -90, 80, -53, 62, 32, -18, 45, -1, 30, -117, -46, 84, 124, 77, -104, 20, -62, 3, -48, -3, -48, 4, 51, 77, -97, 67, 14, 123, -35, -35, 38, -72, 28, 123, 111, 107, 10, 24, 93, -51, -51, 42, -52, 46, 2, -1, 18, 91, 107, 54, 63, 57, -117, -47, 113, 121, 96, 80, 29, -40, -49, 74, -18, 21, -66, -2, -22, -127]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 27, -115, -91, -22, 31, -68, 35, -30, 40, 64, -10, 32, 28, -62, -6, 8, -72, -45, -35, -125, -17, 66, -58, 126, -108, 30, -117, 35, -35, 17, -100, -117, -47, 113, 121, 96, 80, 29, -40, -49, 74, -18, 21, -66, -2, -22, -127]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-117, -47, 113, 121, 96, 80, 29, -40, -49, 74, -18, 21, -66, -2, -22, -127]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-69, 41, -20, -41, 34, -124, -30, 12, -125, -104, -67, 72, -118, 44, -59, -14, -22, 18, 70, -63, -31, -49, -47, -56, 107, -35, 74, -111, -70, 41, -112, -6, -117, -47, 113, 121, 96, 80, 29, -40, -49, 74, -18, 21, -66, -2, -22, -127]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-46, 122, 116, 40, -125, -8, -125, 74, 99, -79, 112, -20, 28, -69, -76, -16]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[63, 48, -94, -119, 1, 35, -31, 3, -83, 93, 4, -83, -91, 112, -103, 57]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-20, 125, -39, -120, -121, -28, -108, -48, 111, 39, -5, -87, 22, -56, -57, -73]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 77, 41, -119, -2, -83, -23, 103, 57, -100, 84, -81, 3, 3, 8, -55]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[18, -125, 37, -114, 46, -117, -29, 109, 83, -41, -24, 37, 96, 0, 4, -3]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[98, 75, -16, 50, 54, 124, -66, -36, 91, 56, 78, 37, -122, 76, -20, -74]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-27, 95, 88, 1, 95, 104, -68, -81, 117, 125, -82, -24, 32, 16, 62, -72]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-2, -28, 121, 122, -16, -71, -20, -20, 15, -102, 21, 5, -32, -40, 63, 48]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[116, -17, -106, -32, -40, -41, 87, 28, -39, 71, 78, -25, 69, 121, -90, -55, -123, -98, 10, -4, 98, 29, -22, 57, 18, 75, 28, 63, 18, -52, 54, -78, -27, 95, 88, 1, 95, 104, -68, -81, 117, 125, -82, -24, 32, 16, 62, -72]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[87, -4, -79, 20, 23, 83, 55, -84, -55, -21, 50, 55, -61, -38, -103, 112, -103, -63, -80, 46, 121, -86, -73, -122, -84, -27, -108, -52, -117, 52, 110, -63, -27, 95, 88, 1, 95, 104, -68, -81, 117, 125, -82, -24, 32, 16, 62, -72]");
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey17);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey41);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey41);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[50, 75, -28, 62, -69, -91, -63, -109, -22, 93, 61, -19, 36, 54, 10, 7]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[87, -126, -6, 34, 12, 107, 72, -29, -50, -3, -1, 70, -11, 35, -84, -76]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-11, -113, 123, 12, 14, -77, 15, -52, 84, -85, -57, -92, 83, 79, -81, -24]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-18, -82, -116, 55, -82, 62, 58, 114, -88, -27, -67, 17, 37, -76, 29, -2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-62, 108, -64, -107, 127, 77, -117, 14, -127, -77, -93, -100, -92, 81, 8, -65, 95, 14, 66, -57, 67, -124, -111, 12, -17, -112, -107, -31, 39, -2, -41, -71, -11, -113, 123, 12, 14, -77, 15, -52, 84, -85, -57, -92, 83, 79, -81, -24]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-28, -126, -40, 40, -56, 80, 45, 38, -72, 11, 11, 80, 81, -126, 123, -39]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[39, -79, -82, 14, 35, -71, 41, -114, -18, -99, -14, -32, -31, -72, -79, -88]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-36, 34, -61, -66, -117, -104, -1, -62, -74, 47, 55, 62, -32, 66, -22, -73]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-69, 94, 76, 100, -69, -72, 25, 46, 127, 115, -21, 39, -27, 100, -91, 74]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[49, 65, 91, 127, 71, 27, 95, -40, 107, 80, -43, 29, 25, -108, 97, -42, 0, 123, 42, 66, -41, 38, 71, -61, -108, -8, -126, -47, -87, -106, 40, -114, -36, 34, -61, -66, -117, -104, -1, -62, -74, 47, 55, 62, -32, 66, -22, -73]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-114, -112, -3, 37, 111, 4, 76, 14, 87, 53, 1, 120, 78, 24, -36, 0, 6, -103, -14, -17, -75, 56, -77, -62, 41, 16, -100, -4, 69, 55, 11, -96, 16, -79, -37, 60, -98, 3, 108, 11, -26, 109, 53, -8, -8, -63, 105, -3, 24, 78, 14, 2, 30, 76, -53, -66, -60, 123, 63, 123, 122, 79, -82, -26, 111, -99, 92, -89, -90, -38, 9, -93, 124, -84, -60, 25, 12, 82, -111, 30, 126, -78, -31, -62, 126, -79, 54, 108, -74, 61, 1, 31, -18, 91, -57, -8, -36, 34, -61, -66, -117, -104, -1, -62, -74, 47, 55, 62, -32, 66, -22, -73]");
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey5);
        javax.crypto.SecretKey secretKey11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey11);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[5, -58, -114, 60, -22, -70, 70, -2, -23, 88, 117, 73, -15, 67, 97, 99]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[2, 121, 40, 124, 100, 107, 64, -3, 67, 85, 92, -33, 32, -31, -41, -125]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-16, 114, 21, 51, -39, -96, 25, 80, -113, -54, 58, 109, -88, 46, -58, -125]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[71, 42, 93, 91, 87, 124, -67, 59, -67, -17, 32, -33, -2, 19, -32, -11, 111, -114, -115, 126, 48, 50, 34, 45, -41, -31, 27, 25, -39, 4, -109, 96, 5, -58, -114, 60, -22, -70, 70, -2, -23, 88, 117, 73, -15, 67, 97, 99]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, -23, -92, -37, -27, 95, 120, -122, -8, 27, -119, -14, -9, 80, -118, -46, -62, -82, -71, 115, 108, -18, 49, 43, 70, -5, 83, -107, 22, -110, -72, -96, 5, -58, -114, 60, -22, -70, 70, -2, -23, 88, 117, 73, -15, 67, 97, 99]");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey21);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[78, -3, 125, 107, 31, 113, -3, 0, 126, -66, -92, 42, 47, 57, -97, 31]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-65, -33, -33, -102, -124, 54, 117, -2, 12, 32, -30, -49, 29, -107, 82, 16]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-97, 91, -62, 104, -42, -79, 35, -72, -54, 113, -80, 17, 25, -52, 39, 118]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-105, 31, -52, 27, -117, 4, -117, 40, -81, 121, 118, 106, -4, -4, -12, -112]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-7, -17, -64, 9, -42, 41, -95, 65, -71, 8, -120, 85, -45, -42, -127, -21, -81, 26, -98, -49, 71, 22, 71, 120, 98, 24, 109, 38, -67, -110, 59, 78, -97, 91, -62, 104, -42, -79, 35, -72, -54, 113, -80, 17, 25, -52, 39, 118]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[94, 112, 68, -99, 100, 33, -54, -21, -111, 103, 60, -106, 41, 43, -21, -53, -101, -37, -73, 57, 77, -55, 46, -49, 0, -96, 43, 63, -111, -93, 40, -75, -97, 91, -62, 104, -42, -79, 35, -72, -54, 113, -80, 17, 25, -52, 39, 118]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776" + "'", str29, "5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776");
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey51);
        java.lang.Class<?> wildcardClass59 = secretKey51.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[25, -114, -33, -44, 3, -70, 127, -19, 38, -86, -116, -86, 13, 110, -53, -104]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[93, -126, 9, 58, 4, -89, -36, 8, -69, 123, 71, 103, 92, -7, 73, -11]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[125, 74, 98, 121, 63, -60, 14, -70, 68, 11, -7, -61, -9, -122, 12, -58]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[80, 61, 63, 8, 60, 53, -66, -127, -16, -39, -47, 53, 24, 91, 8, -90]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[42, 27, 127, 8, -92, -11, -77, 36, 106, -123, 123, 41, -106, 118, -89, -43]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, -70, -112, -24, 121, 82, 109, -92, -68, -76, -86, 115, 38, -56, 17, -58]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-19, 81, -70, 91, -60, -66, -115, -104, 55, 122, 98, 65, -12, 116, 49, -80]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[2, -97, 81, -102, 95, -96, -55, 72, -120, -104, -13, 85, -26, -112, -113, 72]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[51, -69, 24, 14, 117, -30, -37, -46, -87, -91, 7, -40, -50, 84, 27, 4]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-62, -72, -68, 29, 0, -18, 45, 101, 83, -55, 49, -64, 127, 57, -99, 77]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[88, 57, -128, 61, 16, 121, -78, 40, 83, 75, 101, -73, 77, -50, -115, 89]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[51, -69, 24, 14, 117, -30, -37, -46, -87, -91, 7, -40, -50, 84, 27, 4]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[58, 112, 66, -70, 25, 86, 24, -31, 37, 38, -92, -93, 124, 74, 50, -101, -66, 18, -38, -55, 35, -31, -102, -5, 104, -71, 39, -82, 28, 101, 100, -33, 51, -69, 24, 14, 117, -30, -37, -46, -87, -91, 7, -40, -50, 84, 27, 4]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[69, 69, 64, 1, 75, -124, 21, -29, -76, 124, -64, -68, -5, -56, 61, -55]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-19, -65, 53, 99, -19, -99, 61, 109, 120, 46, -121, -103, -56, -123, 32, 37]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-15, 76, 93, -119, -29, -26, 95, 5, 36, -37, 57, -128, 114, 45, 30, -79]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-104, 38, 71, 122, -33, -51, 56, -21, -98, 65, 60, 37, 27, 119, -4, 77]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-52, 115, -110, 23, -9, 74, 15, 67, -88, 110, 46, 67, 83, -88, -104, 72, 118, 67, 17, -106, 108, 19, 29, 78, -89, 11, -108, -86, 61, -97, 43, -76, -103, 54, -116, 13, 6, -121, 111, -17, -69, 108, -10, 97, -3, -87, -51, 32, -46, 11, 79, -110, 1, 0, 10, 59, -116, 73, 25, -6, -85, -119, 6, 82, -23, -117, 76, 101, -1, 115, -9, -59, -17, -91, -62, 13, 92, -44, -12, -96, 119, -110, 25, 93, -40, 35, 11, -42, 53, 81, 80, 105, 58, -46, -61, 32, -15, 76, 93, -119, -29, -26, 95, 5, 36, -37, 57, -128, 114, 45, 30, -79]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1" + "'", str23, "CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1");
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.Class<?> wildcardClass30 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-56, 53, -48, 76, 50, 84, -28, -110, -62, -88, 19, -27, 35, -23, 105, -70]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-46, -29, -25, 96, 118, 116, 66, 117, 90, -29, -121, 25, -31, -84, -17, -25]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-128, 97, 90, 82, -128, 44, 35, -54, 47, 93, -99, 21, -88, -41, 120, -30]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[63, 6, 87, -63, -71, -69, 103, -71, 91, 107, 35, -51, 32, -61, -48, -16]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-109, 33, -78, -55, 113, 79, 36, 35, -17, 112, 26, 22, 66, -24, 81, -63, 77, -87, 117, 123, -23, 71, -101, 75, 35, -9, 48, 92, 117, -77, -104, 84, -128, 97, 90, 82, -128, 44, 35, -54, 47, 93, -99, 21, -88, -41, 120, -30]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-69, -86, -19, -115, -32, -48, -58, 51, 33, -33, 117, -80, -84, 84, -115, 88, 42, 29, -93, -93, 0, -102, -109, 9, -78, 96, -49, -110, 92, 104, 12, -97, -128, 97, 90, 82, -128, 44, 35, -54, 47, 93, -99, 21, -88, -41, 120, -30]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-18, -30, 10, 106, 60, 121, 98, 17, 16, 23, -37, 11, 14, -35, -76, -76, -75, -35, 68, -125, 38, 109, 40, -79, 68, -16, 75, 107, 73, -68, -34, -18, 83, 61, -92, -59, -56, -113, -118, 75, 104, -57, 85, -52, 60, -55, -107, 40, 110, -34, 12, -23, 116, -17, 122, -27, -18, 127, -115, 98, -85, -98, 21, 107, -104, -108, 62, 0, 55, -59, -107, -30, 12, 22, -20, -127, -116, -19, -36, 113, 81, -109, -120, -54, -56, 95, -4, 89, 0, -8, 118, 33, -46, 41, -122, -43, -128, 97, 90, 82, -128, 44, 35, -54, 47, 93, -99, 21, -88, -41, 120, -30]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-69, -86, -19, -115, -32, -48, -58, 51, 33, -33, 117, -80, -84, 84, -115, 88, 42, 29, -93, -93, 0, -102, -109, 9, -78, 96, -49, -110, 92, 104, 12, -97, -128, 97, 90, 82, -128, 44, 35, -54, 47, 93, -99, 21, -88, -41, 120, -30]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2" + "'", str29, "BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey38);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey38);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey38);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-72, 74, 116, 43, -84, -79, -86, 48, -4, -116, -15, 37, 75, 85, -47, 84]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-21, 44, -49, 24, -74, -116, 127, -116, 48, -39, -40, -42, 14, -14, -36, -28]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-11, 60, -16, 17, -97, -33, -79, -50, 25, -90, 44, 127, 8, -42, 28, 44]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[79, -114, 23, -25, 8, -84, -72, 7, -36, 19, -91, 28, 24, -50, -9, -1]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 77, 85, 9, 70, -108, -58, 104, -42, -80, -103, 29, -37, 55, 66, 67, -121, -28, 59, 16, -87, -53, 39, 11, -123, 87, 20, -84, -117, 82, -15, 98, -11, 60, -16, 17, -97, -33, -79, -50, 25, -90, 44, 127, 8, -42, 28, 44]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-87, 75, 13, -19, -102, -47, 37, 56, 58, 5, -63, -112, 29, -121, -127, 9, 89, -82, 44, 19, 50, -49, -26, 54, 66, -53, 59, -2, 8, -61, -97, 35, -11, 60, -16, 17, -97, -33, -79, -50, 25, -90, 44, 127, 8, -42, 28, 44]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[115, -63, -104, 96, -39, 99, 55, -28, -37, -58, 70, 28, 125, -128, 89, 117, 74, 29, 41, 105, -52, 73, -1, -89, 4, 78, -104, -73, 91, 9, -60, -58, 101, -6, -118, 54, 122, 19, 72, -53, 97, 99, -22, 3, -57, -66, 111, -64, -75, 118, -122, -99, 114, -60, -106, -50, -58, -88, -66, -97, 84, -49, 41, -107, -92, -90, -54, 113, -110, 48, 70, -76, 73, -26, -45, 98, 64, -20, 13, 41, 40, -80, 52, 57, -24, 25, -37, -80, 34, 42, 46, 121, -103, -7, -80, -50, -11, 60, -16, 17, -97, -33, -79, -50, 25, -90, 44, 127, 8, -42, 28, 44]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-88, -95, 10, -72, 73, -121, 46, 47, 116, 76, -99, -112, 118, 51, -42, -53, 0, 65, -112, -21, 7, -10, 28, -22, -91, 84, 97, 51, -47, 112, 41, 115, -11, 60, -16, 17, -97, -33, -79, -50, 25, -90, 44, 127, 8, -42, 28, 44]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "A8A10AB849872E2F744C9D907633D6CB004190EB07F61CEAA5546133D1702973F53CF0119FDFB1CE19A62C7F08D61C2C" + "'", str29, "A8A10AB849872E2F744C9D907633D6CB004190EB07F61CEAA5546133D1702973F53CF0119FDFB1CE19A62C7F08D61C2C");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-120, 28, -37, -46, 14, -120, -92, -110, 22, 18, 0, 70, -34, 17, -60, 4]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[118, 64, -87, 121, 5, 104, 45, 109, -111, 9, -19, 114, -33, 25, -50, -83]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[118, 64, -87, 121, 5, 104, 45, 109, -111, 9, -19, 114, -33, 25, -50, -83]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[50, -94, 67, -78, -106, -40, -97, -15, -48, -70, 120, 24, -99, -116, 64, -60]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[118, 64, -87, 121, 5, 104, 45, 109, -111, 9, -19, 114, -33, 25, -50, -83]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-89, -111, -46, 63, 75, -11, -63, 18, -48, 8, 48, -112, -118, 94, 3, 85, 79, -6, -117, 37, -35, 73, 0, 3, 65, 29, -34, 83, 107, 66, 127, 126, -120, 28, -37, -46, 14, -120, -92, -110, 22, 18, 0, 70, -34, 17, -60, 4]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[43, 93, -81, 79, -114, 44, 79, 4, -58, -120, -41, 13, 115, 7, -98, -82, 83, 3, 108, 120, 112, -91, -14, -62, -41, -26, 119, 61, 116, 125, -71, 71, 57, -98, 3, 101, 100, -56, 66, -128, -10, 58, -34, -18, 120, 41, 23, 2, 107, 13, -39, -126, -84, 7, -2, -4, 118, 51, 65, 77, -110, -91, 105, -81, 73, 48, 126, -124, 13, -94, 57, -12, -4, -124, 61, 39, 12, 15, 57, 63, 120, -53, -114, -6, -2, 71, 109, -68, -121, 1, 59, 96, 28, -13, -72, 26, -120, 28, -37, -46, 14, -120, -92, -110, 22, 18, 0, 70, -34, 17, -60, 4]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-60, -10, 9, -14, -14, 82, -24, 68, -106, -54, 116, 40, -20, -26, -68, 4, 82, 117, 81, -13, 73, -87, 96, 83, 114, -69, 40, 121, -29, 77, -116, -125, 23, -100, -22, -64, -36, -87, -103, 31, -26, 30, 51, 44, -8, -17, -42, 59, -84, 42, -45, -104, 96, -22, -88, -50, -12, -63, 118, -108, 107, -34, -57, -93, -124, -128, -13, -30, -102, -56, -85, 30, -19, -83, 9, 117, -15, 13, 106, -13, 21, 109, -96, 73, 33, -25, -24, -14, -1, 44, 111, -17, 49, -25, 48, -120, -120, 28, -37, -46, 14, -120, -92, -110, 22, 18, 0, 70, -34, 17, -60, 4]");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[24, 33, 23, 24, 94, -43, -19, -13, -96, 55, -22, -99, 39, 68, 30, 123]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[78, 14, 120, -117, -100, 115, -23, -124, 114, -36, -19, -11, -98, -10, -108, 18]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-13, 42, -22, -26, 32, -123, 88, 80, -23, 91, -63, -22, 82, 109, -25, -99, -116, -92, 28, -106, 75, 104, -77, -96, -69, 72, -121, -3, 82, -73, -78, -88, 24, 33, 23, 24, 94, -43, -19, -13, -96, 55, -22, -99, 39, 68, 30, 123]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-16, 26, -40, -28, -11, -107, -108, 35, 99, 49, -114, 104, 36, 55, -16, -2, -62, -21, 21, -9, -98, 37, 48, 12, 12, -68, 43, -11, -46, -9, -41, 12, 24, 33, 23, 24, 94, -43, -19, -13, -96, 55, -22, -99, 39, 68, 30, 123]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey30);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey46);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-64, -117, 0, 83, 96, 57, -47, 9, 71, 66, 89, -67, -16, 13, -8, 22]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-112, 20, 68, 94, -71, -57, -103, -11, 120, 56, -56, -37, 117, -90, 53, -92]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-53, 60, -77, 79, -43, 60, -26, -113, 76, -121, -68, 100, 41, 109, -83, -125]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-121, -18, 94, 77, 48, 87, 15, 44, -8, 117, 58, -25, 82, -75, -1, -121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[55, -5, 90, -26, -24, 58, 73, -106, 125, 124, -40, 123, -21, -106, 67, 39]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[61, 30, 106, -95, 67, -22, 55, -42, 99, 65, 60, -7, 82, 42, 124, -103]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-116, 64, -79, -100, -19, -99, 47, -18, 19, 21, 97, -36, -108, 32, -17, 59, 95, -103, -13, 27, -107, -53, -40, 118, -14, -121, -34, 90, 106, -113, 12, -108, 55, -5, 90, -26, -24, 58, 73, -106, 125, 124, -40, 123, -21, -106, 67, 39]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[14, 25, -106, -6, 45, 19, -52, -46, 59, -12, -68, 12, -120, 8, -58, 58, 99, 60, -60, 55, 67, -12, 61, 39, 57, -61, 18, 103, 87, 85, 76, -98, 55, -5, 90, -26, -24, 58, 73, -106, 125, 124, -40, 123, -21, -106, 67, 39]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[58, -104, -106, 9, -23, -126, -74, -49, -19, -25, -15, 115, 66, 89, 17, -33, 42, -95, -118, 9, 40, 52, -84, 114, 118, -11, -57, -58, -79, -90, 52, -24, -20, -43, -50, 116, 62, -73, -61, 38, 120, -64, -56, 78, -42, -23, -89, 103, -35, -68, 47, 112, -71, -120, 119, 64, 105, 69, 16, -73, -33, -45, 119, 124, -2, -114, 108, -46, -74, -116, 73, 93, 122, 53, -117, -122, 64, 10, -73, -27, -78, -91, 120, 53, 20, 125, -14, -89, -99, 49, 102, -62, -23, 48, 98, 35, 55, -5, 90, -26, -24, 58, 73, -106, 125, 124, -40, 123, -21, -106, 67, 39]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-68, 2, 0, -23, -39, -97, 6, 70, -57, 19, 8, 49, 80, -14, 75, 59]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-87, 82, 124, -79, 90, 22, -10, -30, 21, -88, 87, -27, -12, 89, -84, -9]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[30, -16, 71, -119, -5, -35, 92, -35, -114, 27, -96, -18, 89, 111, 17, -103, -2, -84, 28, 118, 2, 53, -35, -124, -28, 50, -81, -128, -115, 115, -36, -39, 82, -73, -66, -121, -103, -10, 94, -88, -122, -118, -28, -28, -69, -14, 70, 88, -3, -116, 117, 61, 8, -89, 50, 0, 110, -94, 34, 85, 3, -120, -119, -82, -99, 89, -106, -95, -33, -41, 10, -84, -93, 116, 99, -21, -68, -49, -19, -98, -19, 57, 104, -77, 15, -19, 113, -53, 66, -69, -108, -6, 26, -39, -43, -27, -68, 2, 0, -23, -39, -97, 6, 70, -57, 19, 8, 49, 80, -14, 75, 59]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[39, 64, -110, -60, -104, -78, 114, 12, 114, -24, 15, -66, 81, -108, -16, 63, -87, 64, 42, 106, -15, -11, -55, -46, 84, -95, 82, 70, -29, 63, 109, -91, -68, 2, 0, -23, -39, -97, 6, 70, -57, 19, 8, 49, 80, -14, 75, 59]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[120, 72, -59, -47, 61, 42, -127, 43, 114, -95, -2, -18, 29, 67, 110, -4, -109, 125, 105, -121, -67, -66, 12, 95, -46, -103, 71, -13, 10, -57, -34, 125, -68, 2, 0, -23, -39, -97, 6, 70, -57, 19, 8, 49, 80, -14, 75, 59]");
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("13D66FE0096DC7013F3EB4E032E54A6475F10E1D9AF7B070C1659ACE164F46DEF42014DBAB5617B00571E3B7971D26F2", secretKey10);
        java.lang.Class<?> wildcardClass18 = byteArray17.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-16, 36, 53, 2, 100, -13, 75, -89, 13, -35, -99, 2, 4, 99, 15, -104]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-98, 104, -33, -2, 33, 40, 111, 113, -43, -4, 126, -14, -5, -80, -30, -21]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-117, -13, -68, 62, 49, -93, -96, 104, 2, -104, 16, -72, -96, -118, 117, 2, 64, 91, 82, 97, -118, 107, -121, 114, -127, -97, -66, 107, 126, 33, -3, 103, -78, -64, -9, -104, -11, -72, 62, -72, -55, 0, 7, -99, -56, -9, 35, 51, 116, -45, -93, -82, 71, -65, 96, 107, 55, 76, 115, 51, -55, -55, -83, -121, 122, -7, -120, 127, 124, -85, -13, 26, 54, -19, -101, -48, 110, 23, 21, 14, -117, -112, 40, 0, 23, 78, 60, -41, -39, -66, -118, 29, -13, -48, 21, -111, -16, 36, 53, 2, 100, -13, 75, -89, 13, -35, -99, 2, 4, 99, 15, -104]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[122, -91, -24, 92, 57, 52, 115, -66, -101, 95, 54, 22, 3, -46, 10, -35]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-53, 55, 117, -72, -9, -41, -20, 102, -115, 42, -67, -87, -22, -59, 21, -109, 96, -60, -58, 31, -25, 28, 112, 5, -60, 89, 80, -26, -127, 65, 12, -1, -74, 40, 14, -92, 90, -105, 81, 29, -59, 42, -37, 95, -81, 80, 100, -126, -111, 6, 104, -34, -96, 121, 53, 15, -55, -125, 38, -115, -112, 61, -50, 80, -64, -54, 12, -50, -122, 93, -118, -98, -113, -81, 57, -18, -14, -117, -28, 44, 26, 73, -128, -32, 0, -13, -13, 113, -25, 41, 96, 50, 27, -78, 122, 120, -16, 36, 53, 2, 100, -13, 75, -89, 13, -35, -99, 2, 4, 99, 15, -104]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[79, 37, 62, 66, 84, -1, 25, 30, -42, 28, -30, 126, 17, -55, -56, 93]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-38, 66, -99, 96, 80, 10, 116, -126, -13, 27, 47, -118, -42, -63, 48, 91]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[116, 85, -123, -86, 76, -67, -46, 92, 36, 73, -15, 8, -91, -43, 89, -41, -35, -20, -101, 107, -9, 50, 115, -126, -24, 30, -125, 34, 62, 121, -15, -90, 54, 56, -23, -45, 5, 69, -50, 113, 24, -112, -95, 84, -114, -42, -66, -27, 32, -51, 63, 71, 4, -17, 51, -86, -117, 121, 116, -77, -44, -78, -64, -118, 96, -112, 71, 111, 73, -54, 30, -108, -105, 30, -103, -81, -86, 41, 34, 29, -35, 20, -11, -25, -17, 119, 112, -66, 112, -78, 18, 19, -118, 116, -44, -113, 79, 37, 62, 66, 84, -1, 25, 30, -42, 28, -30, 126, 17, -55, -56, 93]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-9, -99, -28, -113, -2, -53, -61, 36, 14, -72, 59, -60, -14, 98, -92, 41, -29, 126, -51, -15, 113, 48, 19, 40, -111, 50, -62, -36, -42, -25, 24, 58, 60, -72, 53, -36, 69, 32, -33, 67, -102, 52, -4, -34, 84, 2, -83, -4, 75, -97, 87, -30, -90, 70, 30, -60, 23, -73, -100, 18, 11, 119, -72, 2, -51, -72, -34, -121, 78, -114, 34, 51, -6, -46, -110, 111, 102, -75, -88, -22, -46, -43, -125, -59, 107, 53, -75, 113, -6, -98, 104, -11, -124, -19, -39, 4, 79, 37, 62, 66, 84, -1, 25, 30, -42, 28, -30, 126, 17, -55, -56, 93]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "F79DE48FFECBC3240EB83BC4F262A429E37ECDF1713013289132C2DCD6E7183A3CB835DC4520DF439A34FCDE5402ADFC4B9F57E2A6461EC417B79C120B77B802CDB8DE874E8E2233FAD2926F66B5A8EAD2D583C56B35B571FA9E68F584EDD9044F253E4254FF191ED61CE27E11C9C85D" + "'", str11, "F79DE48FFECBC3240EB83BC4F262A429E37ECDF1713013289132C2DCD6E7183A3CB835DC4520DF439A34FCDE5402ADFC4B9F57E2A6461EC417B79C120B77B802CDB8DE874E8E2233FAD2926F66B5A8EAD2D583C56B35B571FA9E68F584EDD9044F253E4254FF191ED61CE27E11C9C85D");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey32);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey32);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey40);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey45);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[43, 99, 52, -3, 24, -60, -30, -95, 85, 50, -27, 17, -21, 124, -86, 6]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-92, -125, -1, -16, -60, 6, -105, 88, 35, -107, 64, 97, 92, -111, 115, -65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[67, 44, 112, -94, 55, 81, -69, -97, -126, 18, -8, -1, -63, -92, 37, -57]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-80, 41, 81, -82, 36, -35, -21, -92, 62, -8, -11, -30, 43, -14, 81, -94]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[114, -50, -109, -121, -51, 15, 38, -128, -50, -127, 80, 8, -44, -104, 20, -2]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[25, 121, 7, 59, -30, -14, -112, 43, -41, -81, 23, 90, 50, -16, 25, 94]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-16, -40, 89, 41, 28, 92, -74, -99, -45, 117, 76, 111, -123, -126, -51, 9]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[98, 12, -119, -122, -84, 63, 74, 2, -108, -126, -35, -16, 87, 106, 31, 122]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[44, 122, -71, -63, 44, -50, -25, -56, 39, -58, 113, -44, -40, -37, 64, -109]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-16, -40, 89, 41, 28, 92, -74, -99, -45, 117, 76, 111, -123, -126, -51, 9]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-45, 64, -119, 123, 53, -57, 121, 80, -80, -2, -4, 81, -56, -22, -68, -35]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-128, -22, -94, -113, 4, 63, 25, 86, 29, -98, 46, 102, -16, -16, 35, 90, -85, 117, -125, -21, -80, -118, -15, 121, -111, 65, -66, 2, -57, 34, 39, 89, -41, 14, -64, 11, -12, 62, 107, -64, -38, -38, 122, -31, -15, -111, 123, -84]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[31, 127, -8, -58, 119, 8, -20, 104, -99, 7, -105, -15, 108, -40, 106, -57]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey29);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey29);
        java.lang.Class<?> wildcardClass38 = secretKey29.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[91, 63, 94, -53, 30, 14, 107, -31, -35, 88, -116, 99, 11, -21, 126, -99]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[87, -16, -113, 61, 38, -18, 36, -83, 72, -13, 57, -103, 50, -121, 64, 24]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-48, 56, 36, 52, 3, 7, -51, 22, -126, 74, 77, 76, -6, -66, 98, -79]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-88, -103, -47, 32, -16, 72, -106, -56, -5, 87, -63, -110, -111, 52, -37, -88]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-60, 99, -14, 107, -37, -88, -9, 63, 87, 121, -26, 39, 30, -70, 64, 63]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, -116, -36, 42, -112, -115, 114, 76, 102, 94, -50, 2, -20, 116, -105, 120]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[20, -62, -117, -123, 118, 57, 92, 108, 5, -57, 39, -104, 65, 83, 6, 76, 16, -65, -11, 0, 65, -120, 35, -107, -101, 2, 72, -42, -54, -125, 91, 57, -60, 99, -14, 107, -37, -88, -9, 63, 87, 121, -26, 39, 30, -70, 64, 63]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-39, -93, 92, -12, 50, 81, -103, 19, -122, 124, 83, 111, 95, -72, 57, 81, -75, -124, -79, 46, 69, 59, -95, -103, 90, 50, 66, 109, 64, -39, -35, 30, -60, 99, -14, 107, -37, -88, -9, 63, 87, 121, -26, 39, 30, -70, 64, 63]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[78, -47, 82, -23, -101, -31, -16, -52, -116, -93, 10, -97, 87, -60, 86, 26, -124, 71, 4, -124, 25, 126, 79, 66, 5, -81, 17, -59, -121, -123, 53, -2, -21, 80, -24, 36, -33, 110, -48, -83, -79, -107, -76, 31, 108, 29, 0, 9, 115, 90, -53, -57, -109, -48, -84, 3, -104, -95, -117, 0, 51, 41, 99, -87, -90, -126, -68, 118, -119, 119, 17, 103, -53, -47, 98, 40, 22, -89, -85, 59, -13, 10, -31, -105, -1, -92, 67, 123, -67, 22, -30, 113, -51, 112, 24, 55, -60, 99, -14, 107, -37, -88, -9, 63, 87, 121, -26, 39, 30, -70, 64, 63]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-42, -9, 36, -126, -105, -73, 73, -96, 69, -110, -22, 27, 117, -29, 41, 58]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[9, 3, 85, 73, -99, -85, 70, -103, 7, -97, 9, -4, 49, 12, 9, 23]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-97, 91, 23, -14, -46, 114, 108, 0, 20, 13, -115, -44, -61, 40, -28, -125]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-15, 4, 19, 73, -49, 67, 30, 98, -54, -73, 125, 20, 28, 96, -74, 117]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-60, -108, 16, 121, 38, -41, 51, -50, 80, 21, 26, -82, 92, 100, 79, -103, 39, -43, -15, -117, -85, -18, 49, 40, -60, 13, -19, 33, -16, -99, -22, 59, -97, 91, 23, -14, -46, 114, 108, 0, 20, 13, -115, -44, -61, 40, -28, -125]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[59, 119, 124, 23, 92, -97, 112, 4, -19, -123, 126, -13, -54, -82, 62, -128, 102, 94, -107, -12, 80, 69, -86, 127, -92, 16, 70, -112, -73, 115, -100, 52, -97, 91, 23, -14, -46, 114, 108, 0, 20, 13, -115, -44, -61, 40, -28, -125]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[88, -104, 44, -10, 119, 1, -35, 56, -77, 110, -120, -15, 13, -95, -12, -34, -118, -116, 86, 47, 126, -90, 7, 22, 82, 68, 76, 102, 125, -28, -118, 1, 16, -103, 54, 74, -62, 100, 79, -96, 107, -56, -11, 118, 100, 69, -93, 101, -75, 45, -118, 120, -25, -43, -114, 68, 73, -35, 53, -34, -39, -1, 124, -23, 104, -58, 5, -14, -52, -13, -68, -14, -92, -84, -108, 63, -57, -117, -83, 82, -91, -109, -31, 126, -44, 115, 75, -54, -74, 32, 10, 111, -116, -95, -71, -120, -97, 91, 23, -14, -46, 114, 108, 0, 20, 13, -115, -44, -61, 40, -28, -125]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[49, 89, 80, -37, -91, -65, -94, -126, 101, -69, -108, -83, 91, -35, 81, -29, 47, -67, 45, 51, -43, -16, 110, 14, 92, 30, -26, -2, 11, -36, 59, -25, -97, 91, 23, -14, -46, 114, 108, 0, 20, 13, -115, -44, -61, 40, -28, -125]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-97, 91, 23, -14, -46, 114, 108, 0, 20, 13, -115, -44, -61, 40, -28, -125]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey21);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey51);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[121, -127, 17, 116, 72, -127, -64, -112, -26, 10, 78, 18, -127, -127, -120, 112]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[34, -18, -122, -9, -62, -28, -116, -73, -115, 37, -9, 24, 70, 118, 20, 2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-43, 16, -89, 91, -85, -108, -72, 92, 46, 118, -68, 26, -80, -80, 9, 69]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-120, 94, 2, -42, -24, 107, 45, 4, -22, 94, -66, 108, -32, -110, 15, 64]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[102, 25, 103, -55, -69, -74, 99, -50, 50, 17, -61, 80, 85, 57, -117, -128, -38, 20, -66, 115, -122, 89, 91, -8, -58, -18, 33, 16, -28, 41, 79, 54, -43, 16, -89, 91, -85, -108, -72, 92, 46, 118, -68, 26, -80, -80, 9, 69]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-121, -42, 18, -5, 75, 37, 83, -54, 69, -5, -77, -103, -58, 97, 92, -21, -41, -107, -124, 55, 66, -57, 33, -29, 122, -75, 14, -12, 112, -82, 14, -44, -43, 16, -89, 91, -85, -108, -72, 92, 46, 118, -68, 26, -80, -80, 9, 69]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-57, 35, -70, 37, 96, -40, 19, 23, -115, 12, -3, -57, -50, 0, -8, -83, 86, -113, 61, 62, -77, 82, 60, 11, -1, -77, 52, -29, -11, 125, 114, -30, 20, -96, -36, 69, 115, -127, 29, 54, -1, 81, -13, 122, 61, 117, -72, 22, -30, -91, -81, 102, -120, -29, 75, 102, 80, -37, 50, 49, -57, 11, 47, -103, 111, 71, -85, -110, 18, 109, 35, 101, -94, -56, 13, 55, -116, 65, 89, -74, -32, 79, 26, 81, 58, 75, 71, -100, 117, -111, -8, 85, 118, -112, 72, 72, -43, 16, -89, 91, -85, -108, -72, 92, 46, 118, -68, 26, -80, -80, 9, 69]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[52, -125, -7, 41, 37, 15, -51, -85, -43, 105, -106, -10, -107, 71, 35, 96, 6, 23, 11, -46, -1, 54, -81, 99, 1, 111, 64, 104, 59, 126, -66, 82, 71, -14, -127, -27, 102, -76, 98, -64, -50, 79, -25, 95, 124, 88, -59, -75, 81, 60, 28, 32, -8, -28, 31, -112, 78, -109, -20, 36, -62, 12, 106, -53, -9, -109, -17, -33, 18, 59, -70, -68, -121, -88, -19, -79, 89, 89, -108, -125, 14, 32, 10, 86, -85, 47, -93, -65, 125, 76, -18, 83, 108, -124, 18, -78, -43, 16, -89, 91, -85, -108, -72, 92, 46, 118, -68, 26, -80, -80, 9, 69]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[61, -111, -102, 74, -121, 43, 41, -104, 48, -17, 36, 55, 53, -32, -65, 120]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[21, 77, 83, -20, -15, 101, -58, 112, 65, 99, 53, 79, 23, -110, 16, -37]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-70, -31, -28, 112, 57, -79, -103, -6, -125, 40, 42, 15, -114, -15, -51, 17]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-45, 95, 99, 82, 31, -4, 108, -64, 93, 62, -32, 116, 34, -37, 18, -85]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-37, 90, -68, 72, -50, -83, 9, -53, 29, -9, -40, 66, 126, -40, -1, -34, -29, 65, 110, -37, -124, -44, 77, 10, 50, 0, 9, -118, 6, -83, -24, -81, -70, -31, -28, 112, 57, -79, -103, -6, -125, 40, 42, 15, -114, -15, -51, 17]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[76, -86, -93, 71, -84, 21, 12, 88, 58, -112, -22, -47, 53, -63, 64, -42, 18, -106, -63, -120, 49, 90, -97, 87, -78, 99, 97, 58, 4, -61, 8, -83, -70, -31, -28, 112, 57, -79, -103, -6, -125, 40, 42, 15, -114, -15, -51, 17]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-4, 105, -92, 2, 48, -44, -5, 12, -23, -62, -58, -49, 119, 95, 111, 40, 19, -111, 76, -116, 14, -59, -91, 40, 63, 83, 71, 74, 50, -91, -38, -108, -69, -70, 17, -91, 14, -85, 46, 2, -111, -68, -118, 25, -122, 75, -95, -21, 117, 66, 27, 37, -6, -3, 25, -98, -123, 111, 108, 70, 37, 12, -117, 64, 119, 43, -59, 117, 37, -83, -50, 46, 12, 49, -28, 105, 5, -28, -90, -28, -17, -115, 86, 0, -29, -66, -8, -104, 41, 28, -115, 116, 84, -60, -109, -46, -70, -31, -28, 112, 57, -79, -103, -6, -125, 40, 42, 15, -114, -15, -51, 17]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-127, -103, 10, -79, -68, 49, -94, 120, -27, -65, 42, 31, 50, -23, 82, -2, -103, -76, 58, -127, 73, -31, 104, -113, 21, 10, 105, 103, 16, -42, -78, -99, 125, -23, -126, -41, -61, -39, 112, 19, 106, 113, 27, -113, 40, 45, -89, -40, 122, -37, -114, -85, 113, 26, -1, -123, -72, -112, -5, 118, -128, 41, -120, -33, 127, -108, 31, -38, -4, -93, -97, -110, -19, 29, 47, 2, -29, -11, 102, -54, 29, 68, -31, -48, -80, 58, 105, -98, 29, 116, 83, -9, -45, -127, 71, -4, -70, -31, -28, 112, 57, -79, -103, -6, -125, 40, 42, 15, -114, -15, -51, 17]");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey28);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey28);
        java.lang.Class<?> wildcardClass36 = secretKey28.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, -52, -83, 32, 56, -90, 30, 120, 62, -54, -37, 49, 2, -107, -116, 43]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-28, 116, 65, -5, 27, 27, 55, -81, -7, 95, 42, 86, -13, -70, -37, -66]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-92, 125, 82, 103, 94, 127, -39, -115, -74, -67, -52, -64, -41, -124, -44, 101]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[3, -82, 22, -20, -12, -96, -49, -40, -2, -96, 126, -45, 68, 63, -60, 94]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[27, 4, -70, 5, -42, 67, -9, 69, 118, -88, -24, -123, 116, -21, -79, -65]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-19, 72, 28, -27, 16, 112, 82, 73, 75, -35, 11, 48, -99, 48, -44, 60]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[69, -10, -127, 47, -106, -3, 53, -79, -15, -8, -8, -74, -126, 12, -76, 3, 109, 45, -104, 48, 83, -32, -8, -94, -107, -56, 87, 103, 32, 57, 110, -77, 27, 4, -70, 5, -42, 67, -9, 69, 118, -88, -24, -123, 116, -21, -79, -65]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[99, 0, -38, 9, 53, -77, -40, 108, -74, -41, 72, 117, -128, -24, 109, 19, 54, 15, 59, -56, 93, -71, -88, 127, -32, 14, 13, 42, 114, -68, -56, -5, -68, -18, 120, 102, -96, -115, 29, 110, -84, -95, -92, -57, -89, -60, 93, -123, -29, -9, -100, -92, 31, 1, -107, 53, 21, 94, -48, -114, -41, -109, -16, 126, -23, 87, 1, -24, 72, -4, -92, -49, -114, -100, -16, -41, 12, 117, -59, -113, 38, -70, -45, 31, -46, -42, 27, -20, 63, 47, -91, 121, 114, 67, -45, -9, 27, 4, -70, 5, -42, 67, -9, 69, 118, -88, -24, -123, 116, -21, -79, -65]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey3);
        java.lang.Class<?> wildcardClass7 = secretKey3.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-106, -80, -116, -28, -2, 69, -17, -90, -61, 94, -59, -40, -123, -84, -78, -99]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-80, 34, 44, -88, -86, -88, 57, 41, 4, 102, 39, -20, -108, 22, -14, 64]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[44, 6, 58, 56, -124, 10, -102, -99, 14, -15, 57, -60, 80, 34, 63, -76, -20, -61, 78, 16, -75, -54, 92, 84, -81, -128, -30, -111, 6, 111, -102, -77, -106, -80, -116, -28, -2, 69, -17, -90, -61, 94, -59, -40, -123, -84, -78, -99]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-15, 107, 41, -98, 117, -112, 45, -48, -42, -107, 26, 90, 3, -19, 25, -25]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-45, 127, -109, -117, -60, 5, -27, -123, -34, -85, -106, 89, -102, -87, -21, -54]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-48, 106, 36, 43, 30, -101, -79, -126, -42, -50, -59, -53, 66, 68, -17, -33, -48, -10, 70, 38, -64, -105, -49, -96, -89, 19, -29, 109, -3, -53, 40, -13, 89, -10, -119, -69, 55, -68, 38, -28, 56, -89, -37, -52, 104, -86, 92, 110, 101, -37, -10, 46, 55, 0, -5, 18, -101, -64, 59, 98, -11, 79, -108, -50, -33, -59, -76, -62, 124, 27, 61, 21, -110, -67, -91, -30, -88, -79, -67, 11, -88, 87, 50, 107, 119, -34, 27, 47, 112, 35, -80, 58, 88, 66, 121, -44, -15, 107, 41, -98, 117, -112, 45, -48, -42, -107, 26, 90, 3, -19, 25, -25]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[39, -111, 26, -47, -37, 63, 88, 31, 8, 42, -128, -94, -78, -90, -57, -61, -69, 107, 53, 102, -115, -123, 100, 125, 104, -33, -128, -46, 42, 92, 57, -71, -15, 107, 41, -98, 117, -112, 45, -48, -42, -107, 26, 90, 3, -19, 25, -25]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[69, 4, -29, 125, -30, -114, 124, -18, 23, 53, -61, 99, 24, 87, -61, 66, -69, 37, 17, 91, 76, -115, 71, -107, 6, 77, 45, -81, -128, 69, 94, 60, -17, -61, -39, 57, -45, 15, -38, 97, 23, 12, -68, 69, 14, -83, -43, 84, -40, 88, 73, -14, 115, 29, 103, 4, -36, 34, 31, 98, -52, -78, 98, 48, -30, 80, 28, -54, -6, -122, 35, -120, 119, 77, -75, 112, 107, -62, -123, 105, 95, 49, -101, 113, 103, 62, 109, -2, 104, 64, -90, 5, -17, -39, 15, 116, -15, 107, 41, -98, 117, -112, 45, -48, -42, -107, 26, 90, 3, -19, 25, -25]");
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey28);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey28);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey42);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey42);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[63, -122, 112, -126, 13, 101, -9, 109, 26, -51, 93, -39, 16, 112, 36, 44]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[23, -33, -39, -31, -43, -91, -114, 64, -3, 67, -93, -2, -14, -57, -47, 110]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-47, -65, 115, 16, -43, 1, 120, 114, 69, 54, 5, -62, -79, -89, -42, -117]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-99, -90, 110, -74, 72, 0, 101, 66, -96, -16, -73, 34, -109, 85, 58, 42]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[80, -119, -86, 77, -127, 107, -85, 126, 104, -60, -74, 62, 13, 117, -116, -119]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-82, 115, 110, -67, 113, -55, -74, -93, 125, -54, -11, 18, 62, 66, -17, 39]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[124, 34, -53, 2, 69, 29, 69, -125, -38, 92, 43, -14, 90, 20, 43, 101, -116, -88, 37, 114, 43, 122, -15, -119, 126, -96, -70, -35, 46, -77, 2, -44, 80, -119, -86, 77, -127, 107, -85, 126, 104, -60, -74, 62, 13, 117, -116, -119]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 43, -42, -9, 77, 85, 16, -87, -63, 35, 51, 114, -16, 6, 124, 43, 47, -84, 126, 21, -116, -99, 105, 15, 13, -36, 38, 99, -64, -57, -16, 0, 62, 7, 51, 20, 13, -33, 53, 79, -71, 40, -80, 48, -84, 0, -63, 56, -98, 20, -114, -51, -5, -76, 63, -74, 76, 23, 83, 26, 118, -48, 7, 96, 15, -28, -56, -28, -10, -6, 99, -68, -59, 61, 63, 46, -94, -125, -105, -118, -103, -65, 7, -94, 69, -4, -84, -63, -8, 28, 126, 66, 81, 0, -105, -33, 80, -119, -86, 77, -127, 107, -85, 126, 104, -60, -74, 62, 13, 117, -116, -119]");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[8, 102, -76, -70, -71, -107, 13, -48, 117, -32, -82, 25, 2, 44, 96, -108]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[8, 49, -52, -33, -85, 63, -81, -104, -44, -110, 17, 32, -73, -93, 32, -53]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[8, 49, -52, -33, -85, 63, -81, -104, -44, -110, 17, 32, -73, -93, 32, -53]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-42, -113, 26, 11, -113, 78, 8, -8, 71, -67, -101, 81, 31, 25, 32, 90]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[8, 49, -52, -33, -85, 63, -81, -104, -44, -110, 17, 32, -73, -93, 32, -53]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[39, -110, 82, 79, -48, -33, -95, 122, -18, 113, -14, -64, 38, -104, -64, -89, -54, 104, 78, -119, 56, 125, 32, 84, 8, -114, 24, 67, 64, 1, 4, 66, 8, 102, -76, -70, -71, -107, 13, -48, 117, -32, -82, 25, 2, 44, 96, -108]");
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-57, -120, 24, 56, 115, -73, -49, 110, 13, 40, -49, 39, 113, 89, -23, 58]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[55, 26, -99, 97, 15, 45, 106, -74, 25, -58, -120, 57, -14, 8, 103, -105]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[12, 7, 1, -69, 106, 26, 10, -16, 110, -1, -93, 8, -80, 37, 34, -48]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-101, 100, -112, 13, -91, -107, -2, -61, 57, -94, 5, 0, -112, 111, -46, 49]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-113, 76, 39, 48, -88, 27, -76, -56, 16, 40, 1, 6, 89, 6, -36, 104, 66, -2, 12, 43, -111, -56, 0, -37, 12, 118, -7, 66, 125, -29, -49, -97, 12, 7, 1, -69, 106, 26, 10, -16, 110, -1, -93, 8, -80, 37, 34, -48]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-78, -48, -67, 12, -30, 33, -99, 81, 120, -12, 28, -122, -22, -29, 21, -5, 52, 15, -87, -10, 124, -49, -8, 101, 48, -78, 94, 43, 115, -58, 95, -90, 12, 7, 1, -69, 106, 26, 10, -16, 110, -1, -93, 8, -80, 37, 34, -48]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[109, -51, 117, 45, 35, -77, -28, -68, -108, 117, -72, -60, 118, 104, 8, -76, -125, -88, -93, 102, 6, -119, 9, 91, 62, -82, 25, 76, -64, 117, 111, -78, 115, 110, -22, -48, -31, -65, 29, -41, -124, 23, -60, 117, -33, -11, -81, 52, 33, -107, -123, -2, 34, 29, -40, -108, -95, 75, -53, 17, 112, 16, -27, -49, -86, 69, -81, -7, -4, 29, 62, -6, -12, 11, 107, -35, 48, -35, -128, -45, -81, -23, -67, 59, -122, 99, 63, -19, -86, 3, 20, -22, -53, 20, -60, -60, 12, 7, 1, -69, 106, 26, 10, -16, 110, -1, -93, 8, -80, 37, 34, -48]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-78, -48, -67, 12, -30, 33, -99, 81, 120, -12, 28, -122, -22, -29, 21, -5, 52, 15, -87, -10, 124, -49, -8, 101, 48, -78, 94, 43, 115, -58, 95, -90, 12, 7, 1, -69, 106, 26, 10, -16, 110, -1, -93, 8, -80, 37, 34, -48]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "B2D0BD0CE2219D5178F41C86EAE315FB340FA9F67CCFF86530B25E2B73C65FA60C0701BB6A1A0AF06EFFA308B02522D0" + "'", str29, "B2D0BD0CE2219D5178F41C86EAE315FB340FA9F67CCFF86530B25E2B73C65FA60C0701BB6A1A0AF06EFFA308B02522D0");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "B2D0BD0CE2219D5178F41C86EAE315FB340FA9F67CCFF86530B25E2B73C65FA60C0701BB6A1A0AF06EFFA308B02522D0" + "'", str30, "B2D0BD0CE2219D5178F41C86EAE315FB340FA9F67CCFF86530B25E2B73C65FA60C0701BB6A1A0AF06EFFA308B02522D0");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[101, -46, 125, -81, -121, 127, 75, -79, -126, 100, 4, -57, -109, 25, 55, -62]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-47, 106, -62, -21, -56, -29, 81, -109, -106, 119, 61, -25, -110, 55, -63, -115]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-47, 106, -62, -21, -56, -29, 81, -109, -106, 119, 61, -25, -110, 55, -63, -115]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[15, -1, -14, 34, 49, 96, 107, 8, 65, 103, 8, -43, 38, -75, -102, 113, 113, -17, -50, 76, -57, 14, 117, -14, 63, 62, 75, 27, -45, -36, -43, 105, -87, -53, 21, -116, -30, 117, 65, 50, -45, 13, -70, 75, 69, -10, 69, 46, 86, -13, -93, 4, -21, -128, 75, 6, 54, 22, -62, -23, -89, 35, -58, -33, 109, 125, -25, -43, -97, -63, -97, -1, -22, -70, 22, -45, 77, -66, 9, 102, 112, -91, -111, 69, -65, 110, 76, -112, -90, 60, -89, 35, -29, 64, -128, -7, 101, -46, 125, -81, -121, 127, 75, -79, -126, 100, 4, -57, -109, 25, 55, -62]");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        javax.crypto.SecretKey secretKey31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey31);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[68, -93, 59, 88, -125, -18, 56, 61, -20, -37, 106, 3, -93, 97, 45, -61]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-46, 42, -9, 62, 18, 107, 18, 52, 8, 106, -39, -8, 52, 4, 44, -117]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-77, 116, -34, -103, -83, 67, 79, 9, -8, -42, -97, -103, -63, -52, -43, -100]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-110, 11, 114, -93, 72, -86, 123, 89, 22, -63, 83, -113, -23, -113, 87, 86]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[63, 73, 118, 107, -74, 114, -88, -42, -4, -127, 92, -30, -3, 70, -128, -36, -83, -57, -10, -97, -51, 46, -37, 59, 84, -60, 23, -66, 51, 42, -22, -27, -77, 116, -34, -103, -83, 67, 79, 9, -8, -42, -97, -103, -63, -52, -43, -100]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-125, 18, 45, 51, 58, -100, -15, 113, -94, 92, -75, 54, -40, -46, -75, -45, -64, 105, -115, 30, 4, 15, 87, -20, -116, -54, -117, -100, 122, -106, 93, -33, -77, 116, -34, -103, -83, 67, 79, 9, -8, -42, -97, -103, -63, -52, -43, -100]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[41, 72, 79, -59, 52, -53, 127, 6, 75, -99, 50, 32, -113, -82, -85, -123, -37, -5, 97, 112, -11, -33, 21, 18, -27, 44, 42, 11, 103, -82, 37, -10, 15, -21, -32, -3, 112, -123, 38, -114, -27, -3, -54, -124, 38, 93, -93, 61, -80, -49, -51, 6, 53, -120, 110, 126, 31, -106, 75, 0, 26, 125, -102, 4, 106, -15, 114, -35, 113, -43, 29, -77, -63, 12, 67, 28, -56, 82, -97, 80, 34, 37, 61, -111, 55, -91, -40, -56, -79, 56, 22, -68, 89, -25, 25, 0, -77, 116, -34, -103, -83, 67, 79, 9, -8, -42, -97, -103, -63, -52, -43, -100]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[38, -38, -55, -87, -49, -98, -56, 123, -11, -28, -27, -66, -121, 7, 114, 49, 97, 57, 61, -83, -43, -50, -4, -120, -8, 19, 51, -41, -4, -14, -44, -75, -77, 116, -34, -103, -83, 67, 79, 9, -8, -42, -97, -103, -63, -52, -43, -100]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-33, -47, -69, 87, 49, 95, 90, 105, -59, -66, 27, 28, -60, -128, -39, -71, -122, -62, 80, -68, -47, -49, -75, 68, -67, 29, 121, 70, 4, -31, 91, -68, 82, 92, -104, -53, 99, 32, 116, 55, -100, -26, -95, 40, 25, 47, 16, -78, 27, 87, 19, 73, -96, 45, 56, 127, -82, 29, 50, -90, -52, -54, -10, 54, 16, 86, 113, -120, -124, 6, -19, -7, 120, -93, -68, -15, -94, -31, -26, -59, 22, -95, -87, -107, 31, -32, 115, -79, 97, 66, -112, 60, 75, -66, -112, 90, -77, 116, -34, -103, -83, 67, 79, 9, -8, -42, -97, -103, -63, -52, -43, -100]");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-40, 92, 71, 29, 94, -92, -15, -34, 93, -57, 61, -67, 47, 71, 74, -128]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[32, 17, 106, 49, -67, 116, 110, 78, 81, 112, -41, 108, -77, -78, 98, 45]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-109, -101, -119, 68, -67, 51, -21, -107, 99, -61, -21, -108, -73, 98, 116, -103]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[76, -72, -79, 16, -118, 76, -108, 18, 88, -17, -99, 125, -50, 108, 14, 39]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-20, -81, -37, 102, 66, 61, -38, 45, 19, 29, 47, 26, -16, 72, -127, -18, -98, 48, -90, 21, 101, 24, 107, -116, 94, -33, -11, 96, -70, 7, -86, -115, -109, -101, -119, 68, -67, 51, -21, -107, 99, -61, -21, -108, -73, 98, 116, -103]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[2, -83, -107, 79, 38, 61, 5, -10, -89, -76, -12, 45, -75, -113, 65, -78, -94, 60, 102, -15, -62, 107, 67, 92, -23, -9, -78, -88, 17, -3, 100, -55, -109, -101, -119, 68, -67, 51, -21, -107, 99, -61, -21, -108, -73, 98, 116, -103]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[118, -40, 127, 88, 79, -57, 108, -89, 5, 83, 55, 15, -11, 64, -52, -101, 15, -123, 95, 17, -36, 31, 38, 59, 81, 126, -7, 48, -61, 112, 104, -85, -40, 22, 117, -40, 17, -34, 9, -86, 92, 45, 39, 96, -51, -56, -43, 99, 38, 18, -4, 47, 93, 32, -33, -23, 84, 50, -113, 25, 71, 122, 37, 106, 108, -110, 90, 51, 23, 13, -101, 53, -69, 60, 107, -24, 46, -95, -74, 73, -9, -66, 13, 64, -82, -87, -95, -41, 56, 65, 85, 41, 40, 13, -20, -27, -109, -101, -119, 68, -67, 51, -21, -107, 99, -61, -21, -108, -73, 98, 116, -103]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-50, 114, 38, -55, -18, 103, 49, -108, -124, -83, 77, -9, -25, -29, -30, 120, -95, -14, -89, -29, 97, -128, -127, 84, 52, 62, -114, -69, 15, -13, -118, 32, -71, 71, -121, -1, 95, -98, 80, -13, -5, -71, -85, 18, -34, -11, 37, 27, -61, 114, 104, 2, -32, 99, 42, 51, 61, -95, 108, 117, -63, -112, -104, -76, -128, 122, 63, -89, 46, -84, 66, -3, 61, -41, -67, -10, -36, 101, 37, 8, 17, -75, -74, 116, -80, -64, -28, -92, -105, 119, 93, 43, 96, -99, -105, -8, -109, -101, -119, 68, -67, 51, -21, -107, 99, -61, -21, -108, -73, 98, 116, -103]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[21, 16, 29, -43, -93, -112, 84, -13, 104, -121, 75, 109, 45, -8, 58, 125, 14, 63, 55, 73, 88, 1, -123, -7, -42, -23, -59, 32, 91, -106, -2, 61, -109, -101, -119, 68, -67, 51, -21, -107, 99, -61, -21, -108, -73, 98, 116, -103]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey17);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[39, -67, 94, 31, -20, 118, 43, 125, -77, -6, -127, -97, -47, -35, -116, -111]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-3, -1, -36, -93, -43, -58, -96, 56, 4, 39, -12, -21, 74, -74, 10, -42]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-126, -82, 50, 108, -97, -96, 110, -1, 38, 29, 60, 67, 81, 58, 104, -125, -61, -31, 35, -41, 32, 22, -35, -76, -81, -2, 28, 102, -9, -112, -28, 90, -125, 78, -79, 40, 75, -35, -20, 98, 107, -116, 68, 28, -66, 6, -57, -62, -110, 17, -114, -9, -67, 14, -6, 34, 11, -126, 114, 126, -4, 105, 61, 27, -17, 65, 113, -100, -83, -21, -11, 32, -70, 112, -105, -5, -3, 70, 77, 110, 111, 54, 69, -15, -86, 105, 17, 25, -83, -70, 10, -66, -100, -104, -121, 92, 39, -67, 94, 31, -20, 118, 43, 125, -77, -6, -127, -97, -47, -35, -116, -111]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-113, -78, 84, -6, -62, 111, 13, 72, -64, -101, -125, -69, -79, -27, -31, -59]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "8FB254FAC26F0D48C09B83BBB1E5E1C5" + "'", str14, "8FB254FAC26F0D48C09B83BBB1E5E1C5");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[20, -105, -128, 59, -46, -18, 13, -100, 115, 83, -127, 97, 74, -97, -114, -118]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[106, -20, 19, -44, -85, 29, 5, 77, -63, -3, -37, 13, 2, 16, -27, -60, 71, -55, -102, 59, -19, 62, 104, 14, -96, 5, 44, 21, 90, 107, -105, -103, 1, 18, 83, 121, 40, 1, 84, -17, -1, 32, 52, -45, -93, -99, -39, -105]");
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-23, -84, -127, -9, 28, -118, -56, 43, -110, -49, 74, 106, -16, 86, -10, 106]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[61, -105, 102, -19, -12, -71, -9, 94, 70, 9, 124, -59, -46, 116, 89, -128]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-127, 25, 57, 110, -87, 16, 39, -24, -31, -29, -28, 41, 65, 11, 94, 4]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-23, -84, -127, -9, 28, -118, -56, 43, -110, -49, 74, 106, -16, 86, -10, 106]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-38, -120, -78, -18, -27, -34, -119, 66, -41, 121, -110, 1, -75, -121, -104, -24, -118, 59, -16, 43, -111, -71, -71, -8, 2, -127, -110, -37, 85, 116, -128, 8, -23, -84, -127, -9, 28, -118, -56, 43, -110, -49, 74, 106, -16, 86, -10, 106]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[67, -123, -38, -115, 24, -99, 72, -87, -105, 96, 53, 64, 66, 19, 12, -75, 51, -29, -60, 40, -14, -58, -83, 63, 8, 99, 98, 108, -120, -109, -28, -47, -23, -84, -127, -9, 28, -118, -56, 43, -110, -49, 74, 106, -16, 86, -10, 106]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[22, 114, -47, 58, 68, 92, 16, 79, 37, 119, -71, -51, 60, 84, 97, 91]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-48, -45, 114, 5, 25, 45, -85, -94, 85, -48, 97, 111, -128, 54, -38, -124]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-48, -45, 114, 5, 25, 45, -85, -94, 85, -48, 97, 111, -128, 54, -38, -124]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[32, -2, 59, 17, -24, -122, 61, -70, -65, -50, -66, -78, 65, 26, -18, 32]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[22, 114, -47, 58, 68, 92, 16, 79, 37, 119, -71, -51, 60, 84, 97, 91]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-23, 11, -74, 123, 104, 60, -12, 36, -55, -70, 93, -75, -115, 38, 76, -114, 93, -91, -116, -88, -29, 44, 112, 68, -126, 43, 127, -31, -1, -4, -58, 120, 61, 52, -12, -55, 8, -3, -50, -8, 15, 41, -47, 48, 101, 23, -4, -7, -75, 2, -63, 109, 28, -90, -33, 74, 111, 3, -8, -66, -83, -108, -29, -29, 41, 99, 112, -54, 127, -121, 47, 34, -127, 123, 15, 22, 66, -9, -24, -18, -112, 79, -37, 100, -74, 76, -58, -77, 94, -75, 79, 54, -23, -10, 54, 123, 22, 114, -47, 58, 68, 92, 16, 79, 37, 119, -71, -51, 60, 84, 97, 91]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey30);
        java.lang.Class<?> wildcardClass38 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[69, -60, 38, -14, -103, -93, 75, 60, -121, 108, -107, 9, 14, -13, 12, -74]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[91, 1, 121, -101, 88, 55, 48, 29, -7, 41, -13, -7, -105, 126, -3, -60]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-116, -49, 91, 77, 105, -84, 108, 16, 121, 118, 117, -76, -43, 104, 82, 117]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[81, 43, 77, 27, 86, -59, 31, 114, 113, 36, -22, 13, -3, 56, -58, 107]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-64, -120, 76, 23, -36, -101, -128, 79, -93, 55, -43, -84, -43, -92, 104, 101]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-88, 105, -52, 47, 12, -6, 32, 32, 99, -118, 112, 42, -4, 112, -32, 125]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-88, 105, -52, 47, 12, -6, 32, 32, 99, -118, 112, 42, -4, 112, -32, 125]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[71, -16, 94, 84, -61, -84, -79, -78, 46, 10, -18, 14, -121, 1, 28, -71, 7, -64, 58, 67, 9, 85, 115, -61, -23, 98, -68, -46, 101, -20, 110, 125, -64, -120, 76, 23, -36, -101, -128, 79, -93, 55, -43, -84, -43, -92, 104, 101]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey20);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey36);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey36);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("6EA4E116455BC7AF3FB5BF064D6F874CB5F555408DB9AD9F9733DFD99DAC4D7FEEE704EFF20D5601E11B02E83309E581", secretKey36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey36);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[93, 116, 63, 14, -109, 31, -43, 22, 111, -113, 13, 87, -6, 111, 87, -119]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[88, 10, -92, 75, -70, 56, 35, 79, 119, 7, -117, 29, 14, -8, 114, -25]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-123, -86, 35, 108, 51, -96, -10, -5, 79, -115, 33, 116, 21, -113, 67, -116]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[123, 10, 98, 37, 28, -12, 53, -118, -14, 117, -112, -101, 61, 121, -105, -106]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-81, -88, 109, -34, -123, -109, 34, 42, -95, 24, -81, -6, -84, -46, -3, -5, 118, -113, -22, -117, -81, -71, -44, -97, 118, 46, 97, -9, -126, 46, -115, 0, -123, -86, 35, 108, 51, -96, -10, -5, 79, -115, 33, 116, 21, -113, 67, -116]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-123, -86, 35, 108, 51, -96, -10, -5, 79, -115, 33, 116, 21, -113, 67, -116]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[123, 10, 98, 37, 28, -12, 53, -118, -14, 117, -112, -101, 61, 121, -105, -106]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-55, -57, -74, -68, 34, -109, 84, -68, 13, 28, 127, 107, -16, -49, -20, -56, 125, -15, -12, -27, -116, -113, -34, 101, 21, -96, 89, -19, -30, -100, 28, 46, -123, -86, 35, 108, 51, -96, -10, -5, 79, -115, 33, 116, 21, -113, 67, -116]");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-38, 8, 6, 121, -72, 116, 77, 59, -82, 73, 34, 104, 32, -55, 122, 124]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[14, 55, -50, 81, -103, 108, 61, -66, 108, -61, 23, 11, 59, -13, 108, -100]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[60, -36, -66, -3, 79, 81, 106, 70, 3, 52, -64, -116, 46, 8, 111, -12]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-38, 8, 6, 121, -72, 116, 77, 59, -82, 73, 34, 104, 32, -55, 122, 124]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[90, 3, -79, 101, -36, -121, 53, -83, -19, -44, -67, 26, 20, 102, -49, 69, -12, 0, 95, 55, 34, -39, -83, -7, 52, 64, 107, 51, 48, 2, -72, 121, -124, -1, -39, 92, -33, -96, 35, 109, 20, -96, 61, -16, -127, 94, -60, 38, -35, -20, 124, -45, -126, 90, 0, 113, 106, -1, -123, 104, -67, 14, -41, 96, 100, 113, 124, 24, 117, -80, 39, 23, 29, 36, 62, -8, -52, -116, -126, -21, 90, -49, -94, -55, -14, -35, -106, 81, -34, 42, 28, -48, -71, -29, 118, -111, -38, 8, 6, 121, -72, 116, 77, 59, -82, 73, 34, 104, 32, -55, 122, 124]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-57, 61, -117, 22, -84, 106, -56, 57, 19, -72, -118, -109, -64, 78, -24, -107, 39, -70, -92, 72, 107, -54, 99, 28, 104, -74, 7, -46, -122, 66, 48, 76, -38, 8, 6, 121, -72, 116, 77, 59, -82, 73, 34, 104, 32, -55, 122, 124]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[43, 9, -34, 37, -5, 75, 18, -105, 91, 76, -39, -10, -125, -84, 65, 109, 82, 77, -38, -122, 45, -39, -4, -64, -15, -48, 94, -103, 94, 82, -49, 26, -64, -119, -72, 74, -50, -43, -88, -27, -19, -69, 122, 33, -81, 62, -90, -82, 105, 44, 0, 76, 36, -52, 15, -12, 124, -37, 34, 49, -73, 112, 65, 22, -19, -5, 100, 52, 42, 112, 106, -28, -3, 117, -45, 20, -126, 42, -49, -79, 47, -63, 37, 126, -31, 117, 116, 12, -55, -23, -60, -104, 61, 36, -22, 12, -38, 8, 6, 121, -72, 116, 77, 59, -82, 73, 34, 104, 32, -55, 122, 124]");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey28);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey36);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey41);
        java.lang.Class<?> wildcardClass45 = secretKey41.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[28, 66, 86, 96, -35, -50, -78, 66, -17, -110, 67, 57, 96, -126, 48, -89]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[34, -45, 92, 39, -122, 9, -102, -20, -112, -99, 126, -28, -6, -74, 7, 3]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-61, -1, 110, -77, -65, -128, -25, 42, -56, 112, -3, -82, 58, -28, -128, -123]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[14, 42, -51, -4, -82, -56, -21, 92, -88, 25, -93, -18, 51, -87, -89, -75]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[43, 100, 64, 114, 70, 85, -38, -124, -70, 35, 17, -105, -44, 74, 104, -104]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-66, 99, -50, -89, -98, -113, -4, 112, -44, 0, 117, -112, 3, -87, -90, -15]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-96, -128, -14, -1, -81, 93, 82, -79, -87, 94, 61, -73, -1, 35, -35, -85]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[43, 100, 64, 114, 70, 85, -38, -124, -70, 35, 17, -105, -44, 74, 104, -104]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-42, 122, 125, -99, -15, -10, 119, 104, -14, 48, -76, 65, 74, 66, -21, 98]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[87, 52, 34, 50, -72, -67, -118, -73, -10, -19, 42, 75, -18, 67, 22, 2, 83, 27, -35, 45, 2, -75, -69, 8, 18, 102, 104, 61, -100, 37, -65, 121, 104, 14, -68, 7, -33, -121, -101, 56, -86, -3, 13, -33, 23, -94, -92, -87]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-2, 44, 24, 10, -12, -20, 85, -6, -43, 64, -97, 30, 20, -53, -126, 35]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("AA8673337ACFB55E864A42B13E32D319BE4722866C04C73588C3A4D8CCD43E415F976453DD9047E1E45D6C2D02C358E581FC9E7B229323C8109280344A503E8E1C110E42B2B9D01083CC0AF7652C3047726579CD6DC232906CDA2E7BB6EF2A670102445E30524A34F97CCC737866BE46", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey5);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey16);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[113, 113, 118, 55, 6, -23, 103, -102, 78, 107, -46, 54, -69, -39, -97, 69]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[99, 92, -75, -93, 61, -107, -12, -128, -87, 60, -89, 50, 42, -55, 23, -106]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -22, -57, -72, -108, -63, -118, 12, 5, 3, -18, -108, -56, 84, 111, -110]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[113, 113, 118, 55, 6, -23, 103, -102, 78, 107, -46, 54, -69, -39, -97, 69]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[37, 51, 124, -46, -75, -9, -71, -81, -126, 30, -2, -105, -86, 1, 96, 2, 88, 101, -128, -76, -89, -71, 17, -104, 125, 3, 14, 1, 50, 9, 66, 62, 127, -51, -66, 97, 31, 109, -53, -119, -98, 109, 95, 49, 70, 47, -97, -89, -79, -93, 120, 0, 8, -70, 11, -122, -113, -124, 94, 34, 99, 69, 88, -44, -67, -26, -93, 3, -57, 53, 13, 4, -93, 7, -123, 115, -8, 23, -82, 38, 39, 69, 41, -78, 109, 40, -110, -99, 79, 125, -71, -82, 12, 48, 17, 110, 113, 113, 118, 55, 6, -23, 103, -102, 78, 107, -46, 54, -69, -39, -97, 69]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[30, 108, 67, 42, 48, 124, 112, 126, -64, 84, -58, -11, 6, 113, -23, 84]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[44, -108, -55, -102, -9, 94, 76, -71, 52, -69, -122, -90, 87, 62, -58, -104, -113, -7, -64, 11, -97, -50, 104, 76, -82, 82, -61, 112, 21, -97, -112, 116, 59, -123, -8, 20, -28, -75, 57, 78, 14, -31, 65, -74, -73, -68, -62, 44]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-71, 53, 66, -67, -125, 124, -68, -40, -5, 29, 61, 40, 55, 40, -100, 50, 62, -94, 85, 107, -22, -60, 11, 16, -39, -26, -24, 120, -113, -71, 78, 110, 59, -123, -8, 20, -28, -75, 57, 78, 14, -31, 65, -74, -73, -68, -62, 44]");
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[104, 126, -11, 31, -126, 54, -87, 31, -36, 63, 29, -2, 120, 107, 69, 63]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-113, -110, 51, -38, 117, 29, 87, -74, -69, 86, -21, 58, -97, -88, -15, -126]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-95, 92, -43, -104, 63, -74, 45, -11, -71, 27, 47, 26, -122, 63, 99, 38]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[89, -56, -99, -23, -8, -123, -55, -107, 34, 66, -27, -50, -6, -17, 91, 90]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[91, -2, 77, 28, 65, -99, 56, 117, 66, 96, -63, -53, -32, 89, -32, 6, 61, 89, -86, -8, 64, -86, -122, -110, 25, -96, 56, -108, -17, 18, -4, 116, -95, 92, -43, -104, 63, -74, 45, -11, -71, 27, 47, 26, -122, 63, 99, 38]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-95, 92, -43, -104, 63, -74, 45, -11, -71, 27, 47, 26, -122, 63, 99, 38]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, -56, -99, -23, -8, -123, -55, -107, 34, 66, -27, -50, -6, -17, 91, 90]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[93, -63, -72, 10, -118, -76, 31, 127, 26, 50, 76, 18, 78, -46, 110, -68, 123, -126, -35, 67, -85, -61, 27, -1, 85, 101, 118, -115, -90, 42, -101, 52, -95, 92, -43, -104, 63, -74, 45, -11, -71, 27, 47, 26, -122, 63, 99, 38]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey22);
        java.lang.Class<?> wildcardClass33 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[15, -67, -104, 21, 28, 71, 94, 6, -125, 34, 48, -18, 16, -84, -121, -18]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[20, 70, 17, 70, 109, -119, -43, -13, 116, -82, 90, 73, 5, 72, 0, -57]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-86, 102, -77, -58, 107, -28, -126, -80, -124, -20, -52, -42, 78, 3, -23, -108]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[43, -115, 24, 26, 43, -79, 77, -80, -64, 110, -16, 76, -34, 96, 83, 31]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[25, 93, -2, 90, -117, -89, -14, 6, 97, 25, 41, 94, 66, 17, -58, -125, 107, -64, 38, -124, 4, 2, -29, -80, -102, 60, 117, 89, 5, 96, 37, 122, -86, 102, -77, -58, 107, -28, -126, -80, -124, -20, -52, -42, 78, 3, -23, -108]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-13, -5, 22, -2, 37, -85, -78, 43, -83, -44, -35, -89, -64, -45, -60, -51, 111, -53, -33, 68, -36, -6, 86, 12, 78, -30, 27, 99, 77, 35, -123, 28, -86, 102, -77, -58, 107, -28, -126, -80, -124, -20, -52, -42, 78, 3, -23, -108]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[42, 1, -19, -31, 6, 1, 77, -54, 67, -86, -6, -94, 125, 124, 68, 38, 55, -47, 120, -3, 15, 36, -76, -93, 37, 64, -49, 81, -3, -71, -35, -43, -67, 100, -13, 13, -6, 92, -5, -124, -29, -52, 39, 117, 120, -26, 1, 32, -85, 56, -86, 30, -100, -68, 34, -105, -112, -6, 66, -33, -32, 18, -31, -85, -85, 64, -112, 68, 88, 51, -46, -103, 28, -20, -46, -17, 1, 91, -88, -89, 73, 23, -47, -114, -23, -14, -8, -18, -128, 64, -7, 59, -93, 82, -11, -61, -86, 102, -77, -58, 107, -28, -126, -80, -124, -20, -52, -42, 78, 3, -23, -108]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-30, 53, -96, -74, -61, 1, 4, -121, 52, 87, 92, 104, 71, 46, 54, 25, -4, -1, 79, 108, -99, 97, 56, 103, -87, -19, 103, 70, 124, 56, 55, 46, 76, -70, -108, 73, -1, -121, 105, 94, -74, -15, -119, -66, 92, -78, 54, -102, -6, 68, 14, 47, -24, -127, 53, 124, 120, 29, 57, -125, 94, 30, 67, -109, 103, 125, 109, 106, 69, -19, 11, 78, -94, -63, -10, 4, -53, 3, 92, 44, -38, 70, 45, -63, -115, 109, -59, 5, 86, 124, -107, -79, -35, 46, -86, -22, -86, 102, -77, -58, 107, -28, -126, -80, -124, -20, -52, -42, 78, 3, -23, -108]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-86, 102, -77, -58, 107, -28, -126, -80, -124, -20, -52, -42, 78, 3, -23, -108]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-60, 39, -99, -74, 84, -119, -103, 29, 107, -39, 44, 99, 53, -107, 46, 78, -62, -116, -61, 43, -90, 39, 84, -94, -41, -34, 108, -14, -102, -17, -79, -4, -86, 102, -77, -58, 107, -28, -126, -80, -124, -20, -52, -42, 78, 3, -23, -108]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey30);
        java.lang.Class<?> wildcardClass40 = secretKey30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-117, -37, -104, -90, 29, 112, 23, 111, 93, 15, -20, -44, 119, 104, 41, 22]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-111, 89, -104, -9, -45, -88, -49, 22, 0, -65, -75, 1, 83, 41, 85, -22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[110, 88, 105, 40, 36, 38, -83, 25, 124, -11, -3, -35, -52, -38, -29, -63]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, 109, -33, 1, -81, -50, 52, -30, 56, -33, -32, 45, 118, -51, -48, -22]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-7, 119, 105, -58, -52, -117, -59, -2, -107, -60, -96, -78, 8, -40, 45, -55]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[5, 91, 107, -57, 30, -33, -14, 96, 47, -40, 73, 7, 54, -106, -61, -114]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[5, 91, 107, -57, 30, -33, -14, 96, 47, -40, 73, 7, 54, -106, -61, -114]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[125, -113, 125, -32, 115, 30, 101, -99, -106, 31, -15, -107, 26, 56, -83, 16, -1, -83, 46, -38, 104, 46, 31, 14, 48, 119, 68, -69, -112, -21, -113, 62, -7, 119, 105, -58, -52, -117, -59, -2, -107, -60, -96, -78, 8, -40, 45, -55]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-47, 101, 7, 43, 19, -95, -16, 71, 24, 56, 127, 71, -112, -13, 39, -112, 21, -127, -29, 35, 21, 15, 78, -62, -55, -11, 0, -12, 45, 2, -104, 119, -7, 119, 105, -58, -52, -117, -59, -2, -107, -60, -96, -78, 8, -40, 45, -55]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-116, -76, -31, -128, -37, -101, 52, 116, 66, 39, 83, 64, -116, -9, -21, 2, -5, -110, -41, -33, 76, 55, -94, -87, -48, 20, -125, -72, -16, 116, -84, -91, -7, 119, 105, -58, -52, -117, -59, -2, -107, -60, -96, -78, 8, -40, 45, -55]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[97, 54, -118, 103, -125, 83, -23, 41, 45, 24, 15, -46, -40, -109, -122, -123, 0, -78, -28, 67, 103, -4, 40, -54, -127, -74, -47, 33, 56, 2, 84, 37, 30, -52, -42, 59, 39, -79, -91, -79, -122, -68, 38, -31, -25, -60, -103, 14, -62, 94, -74, 88, -6, 1, -25, 94, -55, 100, 54, -115, -128, 48, -3, -92, -37, 100, 99, 127, -109, 71, 92, 30, -100, 93, -25, -74, -53, -25, 72, 23, -40, 116, -67, -57, 75, -78, 104, 79, 49, 104, -79, 96, 20, 44, -87, 75, -7, 119, 105, -58, -52, -117, -59, -2, -107, -60, -96, -78, 8, -40, 45, -55]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E07B4BC03CA77CE3B6B1690E9A4B53D1B86B5C5D0EA675A64737A8CF5E3739F7E134859685CD93A14D0ECC62208C220", secretKey3);
        javax.crypto.SecretKey secretKey7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey7);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[28, -63, -35, 81, 7, 50, -105, 54, -52, 35, 45, -126, -35, -2, 113, 75]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-15, -50, -47, 54, 74, 77, 88, 46, 51, -42, 28, -2, 48, -81, 61, -56]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-29, -83, 43, 5, 65, -25, 40, 37, -65, -9, 24, -44, 49, -77, 41, 21, -9, 113, 97, 31, 43, -93, 83, -1, -55, 62, -8, -98, 10, -38, -54, -113, -20, -101, 50, -8, -39, -5, -65, 70, 35, -12, -92, -87, -1, 34, -63, -1, 49, 6, -66, 75, -46, -29, 83, -72, 56, 98, 58, -99, -75, 2, 119, -5, -78, -98, -22, -74, 1, -57, -6, -92, 61, -106, 31, 42, -15, -126, 20, -76, 3, -69, 77, 3, 36, -126, 114, 2, -63, 49, 24, 27, 43, 126, -60, -89, 28, -63, -35, 81, 7, 50, -105, 54, -52, 35, 45, -126, -35, -2, 113, 75]");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey41);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey60);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey60);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey60);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey60);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey60);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[125, 47, -105, -40, 90, 61, -46, -50, 39, 1, 15, 9, 72, -75, -16, 5]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-33, -44, 126, -61, 12, -69, 23, 60, -38, -86, -44, -31, -6, -13, 61, -106]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-69, -109, -83, -52, -70, -42, 123, -98, 21, -28, 37, -30, -43, 104, -101, 53]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-9, -29, 10, -14, 106, 33, 3, 37, -112, 70, 111, 7, 79, 99, -36, -123]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[46, 12, -60, 125, -72, -42, 94, 94, 118, 43, -5, 78, -84, 46, -32, -8]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 111, -26, 123, -108, 33, 97, 104, -10, -24, 70, -127, -33, 23, 30, 15]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-105, 78, -95, 91, 12, 4, 52, 4, -112, 79, -36, -101, 73, -43, 73, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-24, -13, -26, -104, 117, -65, -70, -92, -79, 100, -20, 89, 81, 14, -115, -45]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[73, -23, 110, 98, 103, -107, -13, 10, 71, -4, 31, -39, -59, -63, 5, -97, 52, -79, -97, -93, 6, 41, -38, -5, -84, 107, -37, 38, 12, -45, 18, -104, -105, 78, -95, 91, 12, 4, 52, 4, -112, 79, -36, -101, 73, -43, 73, 100]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-78, -75, 125, 19, -62, -65, 41, -71, 37, -128, -20, -78, -21, -105, -72, 104, 45, -23, 26, -56, -5, -42, -33, 98, -98, -57, 20, -106, 23, 88, 5, 44, -105, 78, -95, 91, 12, 4, 52, 4, -112, 79, -36, -101, 73, -43, 73, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-64, -28, -119, 50, 51, -35, 4, 37, -42, 100, -47, -68, 69, -126, 94, 44, -13, 113, -115, -40, -52, -25, 8, -88, 103, -128, 75, -41, 29, 107, 59, 58, 101, 106, -15, 75, 94, -31, -90, -68, 71, -41, -105, -11, -46, -55, 80, -115, 44, -53, -11, -88, -77, -116, 95, 29, 76, -55, 106, 8, -110, 14, 80, -106, 96, -6, -112, 17, 23, -105, -113, 15, -9, 59, 90, -73, 65, -114, -59, 7, 5, -27, -82, 115, 64, 37, 95, 45, 11, 11, -33, -39, -126, 5, -11, -75, -105, 78, -95, 91, 12, 4, 52, 4, -112, 79, -36, -101, 73, -43, 73, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[97, -38, -47, 80, 22, 93, -95, 87, -121, -58, -117, -3, -49, -118, -111, 29, -59, 109, -101, 51, -37, 69, 126, -117, 72, 41, 66, 68, -119, -74, -36, 116, -105, 78, -95, 91, 12, 4, 52, 4, -112, 79, -36, -101, 73, -43, 73, 100]");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-22, 31, 80, -87, 64, 99, 10, 54, 40, 67, 12, -116, 9, -122, 32, 2]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[35, -107, -35, -77, 21, -80, 100, -68, 1, 27, -71, -40, -4, -12, 9, -121]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[35, -107, -35, -77, 21, -80, 100, -68, 1, 27, -71, -40, -4, -12, 9, -121]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-60, -9, -10, 126, -14, -38, -90, -24, 113, -4, -36, 51, 82, -68, 11, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[35, -107, -35, -77, 21, -80, 100, -68, 1, 27, -71, -40, -4, -12, 9, -121]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-8, 106, -104, -75, 56, 125, -12, 92, -115, 66, -14, -1, 79, 120, -126, 102, 34, -3, 2, -41, 62, -59, 5, -118, -3, 111, -90, -43, -31, -13, -25, -33, -22, 31, 80, -87, 64, 99, 10, 54, 40, 67, 12, -116, 9, -122, 32, 2]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-125, 80, 115, 54, 124, -60, 124, 49, -42, -62, -21, -65, -69, -11, -116, 46, -43, -107, -22, 107, -24, -51, -50, -119, -11, 55, -75, -48, -6, -11, 110, -18, 0, 118, 115, 108, 98, -52, -19, -74, 52, 15, -106, -8, -11, 69, 5, -51, -84, -7, -9, -84, 96, -33, -44, -21, 53, 116, -22, 7, -32, 27, -109, -77, -13, 125, -36, -43, -25, 69, 98, 43, 22, 44, 19, -104, 113, 77, 71, -25, -85, 58, 102, -117, -48, -65, -24, -95, 109, 21, -107, -114, 19, -87, 73, 10, -22, 31, 80, -87, 64, 99, 10, 54, 40, 67, 12, -116, 9, -122, 32, 2]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[127, 118, 7, -75, 65, -80, 49, 12, 35, 50, 99, 86, 35, 78, -10, 88, 72, 11, -122, 86, 90, 118, -31, 5, -123, 38, -31, 123, -85, -91, 91, -95, -81, 17, 58, 46, 92, 110, -74, 102, 86, -36, 89, -101, -21, -89, 5, -109, -103, 73, 88, -8, 27, 94, -22, -65, 84, -29, 114, -84, 56, 81, 45, -64, -122, 20, 83, 59, -87, -73, -91, -109, -41, -16, 123, 117, -33, 31, -11, 11, 75, 14, 66, 110, -126, 109, 33, 36, 109, 88, -25, -66, 53, -85, -112, 72, -22, 31, 80, -87, 64, 99, 10, 54, 40, 67, 12, -116, 9, -122, 32, 2]");
        org.junit.Assert.assertNotNull(byteArray69);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-67, -128, -48, -123, 92, 77, 41, 50, 75, -37, -67, -123, 51, -14, 117, 60]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[67, -33, 47, 22, -78, -6, 66, 103, 119, -11, -125, -124, -101, 21, 114, 91]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[4, -61, 47, 15, -62, -90, 45, -51, 77, 118, -113, 117, -60, -118, -75, 97, 47, -61, 26, -74, 97, -34, -22, 70, 106, -75, -76, -65, 18, -3, -34, -25, -67, -128, -48, -123, 92, 77, 41, 50, 75, -37, -67, -123, 51, -14, 117, 60]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[28, 90, 97, -110, 13, -85, 1, -53, 81, -30, -67, 13, 107, 19, 39, 95, 37, 12, -52, -93, 99, -127, 11, -9, -124, -68, -114, -21, -16, -59, 26, 71, -67, -128, -48, -123, 92, 77, 41, 50, 75, -37, -67, -123, 51, -14, 117, 60]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[57, -121, 42, 18, -22, 3, 42, 119, -25, -60, -85, 98, -79, 63, 110, 83, 54, -13, 94, 3, -56, -18, -20, 103, 111, 5, -46, -28, -123, -123, -22, -25, -67, -128, -48, -123, 92, 77, 41, 50, 75, -37, -67, -123, 51, -14, 117, 60]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey43);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-60, 127, -125, 31, 1, -24, 70, 106, -20, 45, -67, 89, 117, 92, 117, -84]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[73, 109, -91, 94, -71, -41, 38, -107, -67, 58, -96, 9, -105, -121, 63, 52]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-112, -31, 91, 51, 73, 62, 87, 82, 116, 90, 125, 116, -86, 81, -83, 2]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[32, 19, -57, 54, 39, 42, 98, 2, 65, -119, -96, 66, -87, -26, -36, 69]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-21, 82, 111, 35, 23, 4, 124, -102, 70, -106, -126, -88, -40, -78, -85, 108, -1, -56, 49, -88, 5, -94, 122, -39, 117, 91, 59, -83, 64, 87, -8, 25, -112, -31, 91, 51, 73, 62, 87, 82, 116, 90, 125, 116, -86, 81, -83, 2]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-112, -31, 91, 51, 73, 62, 87, 82, 116, 90, 125, 116, -86, 81, -83, 2]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "90E15B33493E5752745A7D74AA51AD02" + "'", str25, "90E15B33493E5752745A7D74AA51AD02");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-101, -103, 36, 120, -84, -8, 64, 58, 109, 71, -107, -7, -57, 61, 74, 62]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-94, 106, -94, -105, 104, -124, 23, -53, 91, 112, 87, 38, -99, -29, 86, 28]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-44, 16, -19, 99, 28, 22, -8, -22, -41, -97, 100, -31, -49, -62, -16, 32]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-105, 85, -79, 5, 78, -118, -107, 16, -58, -120, -83, 18, 55, 46, 109, 19]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-117, -51, -96, -6, -4, -36, 27, -9, -79, -22, 77, -111, -90, -105, 79, 67]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[89, 120, 45, 38, -108, 33, 95, 21, 101, -117, 70, -78, 77, -93, 15, 87]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[89, 120, 45, 38, -108, 33, 95, 21, 101, -117, 70, -78, 77, -93, 15, 87]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[95, 66, 5, -6, 25, -7, -119, 108, 0, -91, -19, -8, 99, 70, -110, 24]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 120, 45, 38, -108, 33, 95, 21, 101, -117, 70, -78, 77, -93, 15, 87]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[25, 100, -118, 75, 42, -126, 96, 76, -118, 40, 18, -75, 58, 78, -35, -23, 7, 4, -57, -119, 44, -35, -8, -120, -6, -105, -50, -75, 112, -108, -46, 36, 100, -82, -13, -69, 30, -80, 41, 96, 30, -76, 119, 91, 47, -6, -100, -82, 86, 10, 105, 27, -33, -83, 55, 22, -20, 95, 112, 29, 59, 85, 123, -118, -11, -51, -103, -65, -87, -76, 37, 80, 0, 35, 120, -37, 36, 13, 2, -96, -96, 7, 84, -104, 85, -108, -76, -103, -42, 21, -92, -106, 46, 99, 106, -2, -117, -51, -96, -6, -4, -36, 27, -9, -79, -22, 77, -111, -90, -105, 79, 67]");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey21);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        byte[] byteArray55 = new byte[] {};
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray55);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey57);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey61);
        byte[] byteArray65 = new byte[] {};
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray65);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray65, secretKey67);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey71);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey71);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray65, secretKey71);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey71);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray55);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray55);
        javax.crypto.SecretKey secretKey82 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey82);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey82);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey82);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey82);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey82);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey82);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey82);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[28, 114, -52, 105, -61, -96, 27, 96, -121, 114, -79, -69, -120, 31, 58, 98]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[44, 79, -116, -16, -25, 79, -107, 51, -127, -119, -38, 82, -46, 73, -100, 29]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[88, 68, -32, 72, -110, -14, -87, 102, 17, 26, -30, -44, -107, 75, 10, -81]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-85, 20, 59, -96, 8, 29, -114, -100, 41, -20, -6, 106, 65, -105, -121, 105]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[84, -82, 28, 65, -85, -59, -104, -37, 1, -63, -125, 1, -125, 79, -51, -91, 99, 125, 69, 50, 64, -31, 65, -102, 74, -61, 58, -91, 65, 120, -32, -98, 88, 68, -32, 72, -110, -14, -87, 102, 17, 26, -30, -44, -107, 75, 10, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-46, -109, -1, -19, -102, 108, -73, -107, 4, -107, -88, 34, -30, 5, 41, -99, 16, 105, 104, 4, 123, -87, -79, 46, 92, -18, 53, 42, 82, -28, -72, 9, 88, 68, -32, 72, -110, -14, -87, 102, 17, 26, -30, -44, -107, 75, 10, -81]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-33, -3, -41, -100, -48, -64, -74, 66, -122, -32, 58, 7, 116, -80, 56, -104, 30, 87, -30, 85, 104, 111, 16, -123, 101, 91, 93, -25, -124, -45, -91, 42, 9, -87, 78, 22, -13, 93, -2, -5, -75, 104, 22, 3, 82, -102, 80, -17, 105, 77, -13, 3, -3, 79, 109, 6, -127, 51, 83, -56, -36, 121, 111, -25, -72, -26, 71, 8, 57, 47, 45, -117, 116, -11, -85, -40, 120, 124, 45, 109, -46, -124, 14, -32, -118, 102, -102, 64, 12, 110, -49, 18, -110, -59, 24, 13, 88, 68, -32, 72, -110, -14, -87, 102, 17, 26, -30, -44, -107, 75, 10, -81]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-86, 124, 85, -121, -118, -70, -91, 52, 38, -86, 91, 69, 119, -30, -1, 16, 4, 89, -98, 83, 42, 44, -45, 34, 118, 31, -20, 27, -108, -68, -67, -77, 47, -83, -115, -83, -75, 106, -42, 57, 69, -15, 47, 106, 8, 39, 35, -38, 76, 30, -5, -84, 117, 126, 52, -118, -41, -106, -45, -83, -107, 61, 86, -2, 56, -104, -2, 116, -128, 70, -43, -111, 13, -6, -1, -77, -27, -21, 83, 125, -23, -122, -125, 81, -12, 115, -122, 99, 23, 56, -23, 5, -50, 55, 125, -104, 88, 68, -32, 72, -110, -14, -87, 102, 17, 26, -30, -44, -107, 75, 10, -81]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-77, 122, -13, 33, -109, -72, 7, 67, 50, -87, -26, -40, 14, 101, -37, 107, 1, -39, -32, -33, -64, -85, 20, 10, -107, 0, -101, 66, 120, -27, 64, 114, 88, 68, -32, 72, -110, -14, -87, 102, 17, 26, -30, -44, -107, 75, 10, -81]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-117, 84, -85, -55, 6, 32, 124, 96, 103, -118, -73, -119, -102, -82, 41, -80]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-53, -24, 20, -68, 94, -1, -29, 86, 104, 10, 93, 121, -72, 50, 118, 16]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-14, 65, 73, -9, 59, -6, 7, 6, -43, 96, 97, 67, -125, -92, 64, -117]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-110, 64, 22, 78, 36, -4, 63, -19, -110, 5, 117, -28, -68, -93, -96, 66]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[102, -36, -96, 118, 0, 106, 4, 95, -107, 116, 60, -38, -114, 106, 26, 76]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-67, -20, 94, -122, 27, -107, 81, 52, -127, -80, 101, -123, -46, 41, 124, 87]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[48, 123, -70, 22, 27, 99, 80, -102, -98, -37, 14, 112, -1, 22, -116, 120]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-113, 65, 34, 107, -87, 79, -57, -121, -22, -23, 27, -30, 111, -104, 63, -41]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(secretKey82);
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[56, -112, -43, 33, -25, 112, 119, -120, 8, -74, 94, -124, 96, 95, -100, -45]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[49, -6, 43, 92, 2, 31, -78, -53, -66, 88, -6, -73, -59, -79, 114, 123]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-34, 115, 58, -28, -39, -36, -17, -7, 106, 0, 18, 0, 37, -67, 40, 48]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[56, -112, -43, 33, -25, 112, 119, -120, 8, -74, 94, -124, 96, 95, -100, -45]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey22);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        byte[] byteArray54 = new byte[] {};
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey56);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey60);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey60);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey60);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey60);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-71, 25, 0, 30, 101, 63, -84, 36, 54, -8, -52, -19, 30, 115, -17, 121]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-64, -29, 122, 58, -31, -93, -3, 117, 108, 50, 63, -31, -60, 75, 64, -26]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[8, 1, 27, -106, -101, 119, 69, 85, -97, -116, -90, -1, 49, -27, -69, -23]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-98, -63, -3, -85, -31, -24, -34, -60, -13, 35, -113, 75, -85, -96, -100, 6]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-91, 90, 17, 127, 37, 124, 73, -98, -78, 55, -124, 104, -52, 102, -42, 4, -17, -120, 63, 59, 110, -106, 77, -108, 114, 88, 10, 102, 17, 58, -2, 58, 8, 1, 27, -106, -101, 119, 69, 85, -97, -116, -90, -1, 49, -27, -69, -23]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[59, 97, -125, -69, 85, -128, 17, -72, -86, 62, -57, 90, -83, 68, -62, 117, -1, 122, -51, 35, -3, 46, 6, 16, -7, 55, -1, -98, -103, -91, -27, -35, 8, 1, 27, -106, -101, 119, 69, 85, -97, -116, -90, -1, 49, -27, -69, -23]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[91, 50, -32, -103, 7, -124, -12, -101, -100, -75, 34, 27, 116, 92, -90, -77, 18, 83, -99, -107, 28, -8, 21, -59, -111, 61, 25, 81, 105, 28, -67, -96, 4, -8, -67, 110, -88, 41, -102, 105, -61, 21, -44, 95, 40, 117, 97, -35, -36, -89, 125, -106, -103, -95, 108, -52, 1, -89, 36, 74, -124, -67, -126, 121, -35, 60, 60, -84, 99, -23, 61, 18, 79, -83, -52, 96, 7, 0, 40, 88, 64, -86, -113, -56, 36, 127, 2, -74, 43, -45, -85, -118, 68, 33, -51, 108, 8, 1, 27, -106, -101, 119, 69, 85, -97, -116, -90, -1, 49, -27, -69, -23]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-128, -95, 44, -53, -103, 47, 110, -127, 95, -122, -64, 26, -82, -99, 90, -67, 122, -71, -87, -32, 35, -51, -93, -2, -21, 0, -82, 113, 127, -88, 58, -25, -94, -78, -22, -15, -111, 8, 100, -32, 84, 87, -50, -120, 125, -83, -89, 0, 71, 0, 104, -38, -14, -99, 1, -115, 6, 99, -8, -88, -49, -77, 76, -21, 90, 32, 88, 70, -26, 81, 77, 86, -44, -81, -72, -7, 11, -18, -45, 106, -56, -35, -84, -63, 121, -29, 107, -45, 45, 52, 77, 94, 75, 44, 82, -95, 8, 1, 27, -106, -101, 119, 69, 85, -97, -116, -90, -1, 49, -27, -69, -23]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-79, -82, 112, -113, 4, -65, 16, 10, -28, -104, -4, 66, 10, -61, -88, -73, 31, 29, -40, -11, -18, 100, 1, 37, 39, -3, 108, 10, 62, 109, -35, 98, 47, 59, -114, -40, 121, -119, 27, -75, 79, -107, 102, -106, 29, 86, 93, -62, 83, -59, 119, 107, -102, -42, 22, -52, -96, -42, 15, -124, -12, 49, 28, 49, -98, 24, -59, 27, 13, -108, -36, -99, -53, 90, 126, -45, 56, -32, -77, -7, -92, -52, 51, -106, 117, 13, 17, -62, -57, 49, -67, -72, -114, -110, 79, 22, 8, 1, 27, -106, -101, 119, 69, 85, -97, -116, -90, -1, 49, -27, -69, -23]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[60, -120, -28, -27, -104, -5, -95, -96, -85, 103, -86, -84, 114, 125, -88, 67]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-43, -116, -122, 11, -70, 50, -125, 24, -35, 7, 29, -80, -93, 124, 34, 60]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-68, -34, 102, 81, 23, -61, -101, 98, -110, 70, -88, -18, 89, 93, -56, -34]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[38, -96, 3, 27, 9, 56, -97, 4, 77, -27, -68, -23, 34, -96, 59, -52]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-57, 95, 102, 83, -70, 103, -21, 40, 43, -122, 11, -48, -43, 105, -23, -41]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-62, -32, 82, -88, 55, -7, -114, -69, -72, 34, 11, -111, 93, 17, 39, 60]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-38, 15, 118, 81, 68, -3, 92, 90, -8, -35, 14, 60, -83, -18, 71, -100, 40, 97, -15, -43, -76, 91, 116, -100, 31, 27, -6, 31, 48, -104, 115, -118, -57, 95, 102, 83, -70, 103, -21, 40, 43, -122, 11, -48, -43, 105, -23, -41]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey18);
        java.lang.Class<?> wildcardClass25 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-24, -70, -121, 88, -107, 55, -19, 122, -111, -11, 114, -107, 49, 60, -91, -81]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-7, 45, -38, 17, -98, -103, 82, 52, -17, -17, -103, -46, -78, -54, -127, -124]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[42, -88, 94, -128, 78, -67, 55, 33, -88, -7, -74, 25, 82, 86, 46, 95]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[25, 62, -109, 113, 74, -118, -80, -74, 14, 55, -81, -115, 58, 15, -45, -72]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-56, 90, 97, 74, 93, 4, -12, -104, 68, 51, -104, -114, 82, 83, -91, -77, 77, -60, 7, -109, 22, -37, -33, 114, -68, 30, 52, -41, 126, -48, -107, -86, 42, -88, 94, -128, 78, -67, 55, 33, -88, -7, -74, 25, 82, 86, 46, 95]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey18);
        java.lang.Class<?> wildcardClass25 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[3, -90, -116, -66, 27, -111, 34, 116, -99, -31, -80, 21, -79, -29, 67, 3]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[127, 117, -18, 31, -62, 67, -110, -68, -126, -122, -69, 34, 85, 50, -69, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-77, 80, 38, -43, -54, -48, -127, -29, -30, 54, 76, -10, 90, 38, 17, 44]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[101, 73, 60, 56, -62, 114, 90, -7, 90, -114, -21, 115, -37, 23, 94, -7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-13, 118, -50, 42, 58, -100, 6, -106, -127, 112, 74, -72, 23, -12, -22, -65, 114, -57, 118, 30, 56, 13, 6, 50, -21, 52, -39, 111, -74, 68, 45, -31, -77, 80, 38, -43, -54, -48, -127, -29, -30, 54, 76, -10, 90, 38, 17, 44]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[69, 60, 37, 51, -57, 100, 90, 23, -90, -113, -53, 76, 82, 50, 7, 47, -123, -95, -9, 68, 126, 15, 89, -36, 17, -21, -96, 60, 88, 11, 22, 63, -77, 80, 38, -43, -54, -48, -127, -29, -30, 54, 76, -10, 90, 38, 17, 44]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey46);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey46);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-113, 10, -78, 2, 28, 13, 63, -7, 91, 99, 16, 32, 49, -15, 7, -4]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[86, -16, -114, 53, -31, 16, 6, 3, 31, -100, 91, 91, 100, -34, 125, -8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-16, -90, 48, -101, 32, -108, -60, 5, 10, 83, 12, -112, -123, -58, 60, 43]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, -30, -19, -103, 70, -24, -8, 61, -34, 86, -56, -105, -112, 19, 63, -87]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[108, 98, 125, -121, -95, -10, 121, -8, -56, 85, -71, -39, 53, 108, 97, -69, 32, -71, 32, -85, 17, 46, 61, -46, -60, 31, 117, -71, -72, 52, 9, 91, -16, -90, 48, -101, 32, -108, -60, 5, 10, 83, 12, -112, -123, -58, 60, 43]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-16, -90, 48, -101, 32, -108, -60, 5, 10, 83, 12, -112, -123, -58, 60, 43]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "F0A6309B2094C4050A530C9085C63C2B" + "'", str25, "F0A6309B2094C4050A530C9085C63C2B");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[84, -53, -100, 49, 60, 87, -20, -43, 87, 36, 17, -124, -108, 8, 68, 120]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-65, 69, 92, 127, 50, 44, -99, 4, 19, 28, 35, 44, 21, 66, -123, -107]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-21, -30, 13, -111, -14, 25, -91, 113, -71, -117, -108, 102, -29, 83, 97, 74]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-31, -55, -19, 70, 99, 120, -14, 124, -28, -126, -28, -83, 57, -117, 72, -38]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-99, 38, 124, -60, 7, -4, -19, 61, 67, 18, -56, -64, -123, 100, -117, 81, 83, -47, -82, 97, 73, 94, 45, 19, 28, 127, 61, -102, -46, -60, 95, -5, -21, -30, 13, -111, -14, 25, -91, 113, -71, -117, -108, 102, -29, 83, 97, 74]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[24, -101, -4, 113, 126, -124, -23, -16, -52, 43, -37, -39, 54, -93, 36, 50, -73, -34, 65, 37, -85, 103, -17, -120, -102, -29, -17, 31, 122, -119, 112, 11, -21, -30, 13, -111, -14, 25, -91, 113, -71, -117, -108, 102, -29, 83, 97, 74]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[39, 65, -26, -26, -13, -126, -122, 51, 105, -62, 122, 15, -25, -72, 84, -50, 49, -49, -125, -101, -34, -66, 99, -67, 66, -89, 42, 111, -107, -51, 90, -94, -76, -87, -79, -110, -63, -109, -75, 62, 2, -55, 77, 68, -63, -26, 108, -94, 17, 91, 68, 30, -9, 59, -37, -85, -73, -119, -27, -18, -6, 103, 126, 117, 117, -51, 7, -14, -35, -102, -43, 49, 86, 31, 1, 22, -44, 15, -1, -44, -66, -95, 94, -83, -61, -89, 90, 81, 60, 43, 39, -122, 83, 61, -121, -59, -21, -30, 13, -111, -14, 25, -91, 113, -71, -117, -108, 102, -29, 83, 97, 74]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-25, -118, -72, -43, 80, 88, 17, -78, 2, 96, 118, 4, -31, 95, -121, 18, 90, -113, -72, -113, 124, -58, -27, -65, -30, 123, 76, 1, -124, 52, -22, -113, -127, 50, 21, -105, 114, -24, 50, -63, -123, -93, 21, 17, -104, 113, -26, -13, 92, 1, 82, 59, 2, 38, 86, -84, 91, -52, -43, 127, 107, -14, -47, -83, 108, -127, -91, -120, 109, -101, 114, 34, 79, -43, 104, -83, 51, -118, -69, 48, -28, 30, -127, 27, -46, 60, -33, 121, -14, -98, 85, 15, -119, -38, -76, -69, -21, -30, 13, -111, -14, 25, -91, 113, -71, -117, -108, 102, -29, 83, 97, 74]");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1DAAFB903B39AC426EE0EBBB5B8EA339FF6DE65AD6895DB32CDB9E9DC9B2A8DE1A0110CDE63EFA1B4628E19E64B932D2F86ADAD3C92E58420AD7019B8C6799C534B6ADC977BF960688E8D2B071F966E620AC291198850B13E49230BCEA6D76BF0DD2E53B33347CA9E25655AA95C48399", secretKey7);
        java.lang.Class<?> wildcardClass14 = byteArray13.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[12, -61, 41, -102, -7, 113, 19, 49, -34, 110, 125, -53, -61, 121, 21, -78]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-42, 23, -95, 118, 20, -1, -68, -115, -83, 83, 111, -13, 36, 67, -117, -29, -35, -84, -45, -7, 74, -101, -94, -77, 70, 26, 62, 86, 113, -31, 82, -25, -42, 94, 97, 83, -37, 118, 21, -30, 11, -60, 60, -27, -108, 10, -16, 86]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, -14, -18, -127, 35, 106, 127, -87, -119, 59, -80, -117, 126, -106, -18, -34, 6, -64, 127, 37, 91, 102, 30, 5, -4, -73, 104, -87, 29, 98, -34, 45, -42, 94, 97, 83, -37, 118, 21, -30, 11, -60, 60, -27, -108, 10, -16, 86]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, -14, -18, -127, 35, 106, 127, -87, -119, 59, -80, -117, 126, -106, -18, -34, 6, -64, 127, 37, 91, 102, 30, 5, -4, -73, 104, -87, 29, 98, -34, 45, -42, 94, 97, 83, -37, 118, 21, -30, 11, -60, 60, -27, -108, 10, -16, 86]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[90, -69, 109, 13, -7, -104, -65, 108, 50, -100, 1, -90, 110, -50, -127, 81]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[42, -56, 101, 123, 88, 115, 42, 24, 39, 43, 8, -34, -2, 36, -67, 68]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-33, -72, 35, 58, -58, 121, 46, 22, -101, 20, -68, -84, 123, -105, 70, -51, -112, -62, -77, -66, 55, 116, 54, 57, -84, -69, 26, 96, 34, -97, 111, -77, -22, -105, -99, 62, -75, -29, 87, -28, 109, 45, -102, -57, 54, 0, -63, -60, -107, 7, -78, -99, -26, -100, 36, 73, 6, -125, -35, 92, 86, -57, 91, -84, -15, -106, -22, 15, -126, -84, -102, 19, -76, -8, 4, 25, 4, -81, 110, 60, -29, 95, 29, 73, -107, -71, -85, 25, 45, 44, -54, -122, -65, 118, 32, -102, 90, -69, 109, 13, -7, -104, -65, 108, 50, -100, 1, -90, 110, -50, -127, 81]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[27, -19, -30, 50, -89, -34, 24, 115, -53, -120, 2, 95, 79, -77, 116, 8, 93, 23, -17, 106, 53, -26, 123, 43, 65, -19, 64, -116, -107, 24, 40, 108, 90, -69, 109, 13, -7, -104, -65, 108, 50, -100, 1, -90, 110, -50, -127, 81]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-112, 79, 63, -16, -14, 4, -9, 65, -106, -22, 45, 24, 23, 100, -1, -44, 43, 76, 76, 31, 3, 97, 97, -29, -55, -49, 35, -56, 26, 80, -88, 92, -4, 64, 78, 28, -11, -114, -81, 67, -13, 121, 3, -74, -33, -89, -102, -48, -59, 21, 99, 77, -103, 77, 60, -91, 10, 121, 116, -24, 109, 108, 31, -6, 30, 50, 70, 105, 0, 18, -110, -16, 91, 102, -54, -110, 110, -1, 86, -23, -79, 87, -36, -40, -101, 42, 56, 101, -66, -35, 88, -111, -84, 63, 24, -1, 90, -69, 109, 13, -7, -104, -65, 108, 50, -100, 1, -90, 110, -50, -127, 81]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-102, -23, -36, -61, 125, -17, 55, -110, -93, 41, -88, -114, 80, 41, 92, 77]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-38, 18, 9, -35, 63, -48, -50, -60, -39, 73, -29, 32, 82, -86, -75, -16]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[98, -17, -100, -104, 92, 103, 24, -65, 52, 7, 101, 122, -40, -73, 95, 4]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-102, -23, -36, -61, 125, -17, 55, -110, -93, 41, -88, -114, 80, 41, 92, 77]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9AE9DCC37DEF3792A329A88E50295C4D" + "'", str9, "9AE9DCC37DEF3792A329A88E50295C4D");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "9AE9DCC37DEF3792A329A88E50295C4D" + "'", str10, "9AE9DCC37DEF3792A329A88E50295C4D");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-101, 29, 60, 4, 46, 63, 46, 121, 87, -124, -44, -108, -102, 84, 112, -71]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[41, 27, -63, 57, 46, -127, 67, 15, -88, -114, -124, -74, -36, -11, -100, 19]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[67, -104, 16, -100, -44, 13, 7, 37, 59, 32, -114, -3, 118, 34, -50, -96]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-35, 89, -50, -34, -93, 80, 85, -75, 1, 124, -110, -57, 116, -42, -11, 83]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[62, -9, -27, 25, 124, -122, -27, -70, -85, -127, -72, -83, 92, 109, -27, 45, 97, -46, 83, -94, -20, 8, -29, 127, 5, 28, 101, -53, -40, -40, 122, 120, 67, -104, 16, -100, -44, 13, 7, 37, 59, 32, -114, -3, 118, 34, -50, -96]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[36, -112, -74, 78, -38, -58, 42, -88, -47, -89, -23, -29, -66, -48, 84, -67, 76, 75, -34, 47, -107, -5, 77, -51, 66, 107, -48, -104, -32, -29, 62, 32, 67, -104, 16, -100, -44, 13, 7, 37, 59, 32, -114, -3, 118, 34, -50, -96]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[24, -28, 98, -40, 108, 3, -75, -53, 77, -81, -119, 95, 33, -45, -57, 88, 0, 103, 105, -60, 67, 113, -23, -6, 62, -17, -87, 110, 119, 46, -63, -91, -97, 46, -121, 3, -79, -50, 60, -102, 74, -28, -59, 22, 76, 48, 100, 111, -90, 67, 111, -120, -46, 84, 74, 77, 49, 31, 26, 85, -9, 26, 87, -110, -95, 106, -73, 93, -12, 82, -70, -107, 4, 14, 31, 102, 53, 91, 100, -44, 14, -28, 7, 34, -7, -48, 5, 52, -52, 114, -59, -120, -87, 110, -117, 49, 67, -104, 16, -100, -44, 13, 7, 37, 59, 32, -114, -3, 118, 34, -50, -96]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-41, 3, 51, 73, -40, 112, 114, -115, 70, 99, 32, 13, 9, 58, 57, -61, 116, 87, -74, 117, -23, 42, 3, -117, 1, -24, 70, -31, -47, 125, -111, 63, 67, -104, 16, -100, -44, 13, 7, 37, 59, 32, -114, -3, 118, 34, -50, -96]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[73, 83, -77, -104, 123, 16, -57, 73, 68, -128, -114, -61, -83, -20, 45, -59, 83, 29, -80, -55, -122, 17, -113, 18, 112, 123, 19, 45, -84, 4, -104, -14, 67, -104, 16, -100, -44, 13, 7, 37, 59, 32, -114, -3, 118, 34, -50, -96]");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey53);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey53);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey53);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey53);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[54, 2, -84, 106, -96, 100, 74, -22, 54, 93, 64, 75, 98, 101, -22, -47]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-34, -110, -70, -75, 2, 89, -125, -3, -97, -36, 8, -69, -102, 117, 21, 44]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[55, 18, -71, -79, 19, -127, 62, 48, -57, -46, -11, 35, 60, -62, 22, -81]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-79, 66, -28, 14, -41, 33, -94, -29, -39, 104, 23, 48, -26, 56, 95, -61]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-106, 90, -43, 6, 98, 126, 53, -115, 45, -61, 64, 107, -103, 22, 103, 110, 112, 108, 26, -66, -113, 107, 109, -2, 61, -54, 45, -80, -97, -18, 3, -75, 55, 18, -71, -79, 19, -127, 62, 48, -57, -46, -11, 35, 60, -62, 22, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[17, -93, -58, -3, -8, 120, -39, -49, -82, -20, -12, -5, -35, 80, -11, -16, -51, 18, 100, 119, -117, 115, 98, -70, 26, 85, -50, 106, -9, 97, -68, 81, 55, 18, -71, -79, 19, -127, 62, 48, -57, -46, -11, 35, 60, -62, 22, -81]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[83, -117, 50, -6, 37, 86, -19, 99, 51, -79, -122, -70, -32, -25, 42, -58, -63, -101, -71, -35, -113, 79, -7, -58, 105, -82, 122, 125, 96, 19, -4, 54, -22, -33, 0, -128, 49, -107, 12, -36, -22, 81, -2, 107, -57, -55, -88, -11, 99, -92, 74, 125, 119, 96, -70, -73, -22, 117, 43, 48, 22, 83, 111, 6, 42, 5, -21, -36, 71, -92, 108, 22, 1, -19, -3, 48, -119, 62, 126, 49, 34, -92, 72, 7, 67, 117, -48, 121, 63, 71, -119, -94, 65, -126, -3, -115, 55, 18, -71, -79, 19, -127, 62, 48, -57, -46, -11, 35, 60, -62, 22, -81]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-34, -96, -24, -62, 119, 48, -101, -31, -45, -63, 14, -72, -39, 27, -101, -128, 84, 73, 47, -61, 44, -112, 100, 58, 121, 34, -68, 78, 96, 122, -115, 63, 38, -63, 96, -66, -127, -99, 103, -69, -1, -89, -31, -50, -119, 79, 32, 115, -85, 84, 127, -41, -35, 123, 54, -51, -27, -110, -84, 69, 53, -75, -69, -84, 28, 79, -111, 1, -64, 122, -44, 70, -38, 49, -80, 87, -46, 20, -117, -67, -59, 25, 124, 37, 106, 32, -51, 72, 101, 88, 75, -116, 3, -56, -125, -47, 55, 18, -71, -79, 19, -127, 62, 48, -57, -46, -11, 35, 60, -62, 22, -81]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[55, 18, -71, -79, 19, -127, 62, 48, -57, -46, -11, 35, 60, -62, 22, -81]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[68, 22, 29, 56, 33, 0, -45, -18, -111, 58, 5, -80, 0, -115, -77, -26]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[127, -79, 118, -46, 20, -108, 64, -60, -83, -108, 20, 46, 100, -124, -88, -88]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[52, -98, 14, 1, 101, -102, -76, -127, 37, 32, -10, 91, -70, 107, -71, 34]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[30, -49, 5, 77, 33, 109, 15, 68, -58, -9, -13, -63, 53, -70, -52, -24]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-96, 48, 61, -77, -126, -24, 55, -51, -32, 26, -66, 79, -100, -80, -100, -127, -56, -119, 108, 26, -55, 81, 73, -128, 104, 110, 108, 103, -26, 112, -22, 68, 52, -98, 14, 1, 101, -102, -76, -127, 37, 32, -10, 91, -70, 107, -71, 34]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-6, 34, -75, 71, 18, -101, 119, 84, 13, -90, -79, -23, -53, 63, -22, -26, 19, 67, -92, -128, -64, -108, 12, -109, -92, -18, -43, -79, -40, 37, -82, 36, 52, -98, 14, 1, 101, -102, -76, -127, 37, 32, -10, 91, -70, 107, -71, 34]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[64, 61, 42, 22, 18, 13, 27, 55, 43, -31, 90, 81, 91, -9, -62, -31, -2, 126, 45, 61, 27, 109, 109, 67, 56, 26, -121, -56, -59, 114, 82, -42, 127, 2, 126, 111, -64, 26, -66, 2, 41, 1, -107, 77, 92, 104, 82, 92, -89, 90, 74, 30, -47, -90, -19, 80, 59, -62, -79, 42, 107, 72, 70, 1, -88, -75, 114, -85, -118, 119, 126, -113, 8, -36, -103, 92, 111, -27, 29, -85, -93, 15, -94, 7, 91, 122, -118, -23, -74, -93, 25, 54, 12, 75, -46, 93, 52, -98, 14, 1, 101, -102, -76, -127, 37, 32, -10, 91, -70, 107, -71, 34]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[77, 109, 22, -102, 114, -124, -23, -69, 63, -82, 84, -36, 108, -110, 44, -100, -48, -77, -66, 68, -66, -96, -15, 91, -18, 87, 23, 104, 114, 41, -107, -44, 52, -98, 14, 1, 101, -102, -76, -127, 37, 32, -10, 91, -70, 107, -71, 34]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[95, -78, 79, -94, 30, -34, 20, -17, 24, 103, -37, -126, -109, -24, 71, -25, -12, 54, 78, -105, -53, 105, -24, -67, 105, -51, -100, -60, 39, 88, 103, -14, -118, 30, -13, 55, -90, 14, -81, -40, 14, -7, 79, 42, -29, 42, 76, -79, -18, 27, -63, -13, 3, -40, 97, 54, -126, 112, -111, -110, 59, 110, -96, -72, 5, -111, 105, 85, 83, 75, -2, 85, 90, -49, -78, -87, -90, -108, 79, 117, 19, 14, 55, -69, 54, -120, 22, -100, -74, -19, -122, -11, 17, -117, 109, -48, 52, -98, 14, 1, 101, -102, -76, -127, 37, 32, -10, 91, -70, 107, -71, 34]");
        org.junit.Assert.assertNotNull(byteArray63);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey40);
        java.lang.Class<?> wildcardClass44 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-104, 118, -13, 117, -12, -98, 13, 36, 35, -93, -15, 18, -120, 28, 16, 48]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[11, 28, 82, -81, 112, -84, -39, 5, -42, -100, -31, 102, -60, 32, -54, -65]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-85, 32, 7, -104, -52, -39, -5, -83, -105, -98, 35, -97, -34, 126, 79, 73]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-18, 71, -15, -128, 17, 24, -94, -84, -126, -58, 75, 22, -63, 94, 76, -49]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-114, -71, -36, 24, 93, 26, 4, -95, -109, 11, -39, 100, 89, -10, -24, -121]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[109, -53, 65, -76, 81, -11, 59, -99, -96, 10, -35, -128, 29, 87, -55, -28, 48, 46, -58, -14, 47, 69, 104, -25, -78, 65, 57, -36, 50, -64, 106, -123, -18, 71, -15, -128, 17, 24, -94, -84, -126, -58, 75, 22, -63, 94, 76, -49]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-97, -95, -30, 127, 86, -4, -29, 32, 17, -112, 6, 5, 25, -53, 112, 24]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-16, -120, 29, 50, 104, -118, -124, -58, 47, -80, 65, -58, 109, 48, 123, 87]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        java.lang.Class<?> wildcardClass61 = secretKey52.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-42, 77, 111, -6, 5, 127, -32, 63, 109, -71, 0, 81, 67, -30, -14, 14]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 92, 31, 22, -94, -48, 96, 97, -2, -24, -117, -53, -60, 47, 11, -56]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[77, 25, 31, -17, -107, -50, 41, 120, 21, 111, 105, 41, 41, -74, 3, 64]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-76, -60, 33, 61, -48, -100, -7, 82, 79, 49, -99, -77, 69, -114, -80, 15]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-82, 66, 101, 120, -88, -96, -117, 64, -120, 16, -66, -120, 7, 3, -83, -71]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-40, 4, -45, -56, 15, -119, 11, -2, 97, 107, 123, 37, -73, -82, 4, -126]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-87, -46, -81, 50, -115, 57, -84, 126, 95, 17, -48, 121, 89, -23, 126, -116]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[111, 101, -79, 63, 45, 11, -119, 19, -29, 4, -125, 99, 34, 24, -76, 18]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[105, 24, -19, -77, -117, 17, -117, -75, 16, -32, 106, 89, 100, 40, 85, -66]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[61, 111, 93, 19, -91, -6, -55, 119, -55, -78, 90, -108, 116, 60, 32, -10]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[94, -65, 74, -24, 93, -29, -65, 82, -39, -75, 104, -96, 55, -64, 100, -114]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[105, 24, -19, -77, -117, 17, -117, -75, 16, -32, 106, 89, 100, 40, 85, -66]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[69, 66, 60, -87, 74, -35, -117, -119, 0, -125, 31, -24, 0, -1, 31, -70, -103, -122, -91, 37, -8, -76, -5, -73, 115, 108, -96, -42, -76, 21, 90, 67, 105, 24, -19, -77, -117, 17, -117, -75, 16, -32, 106, 89, 100, 40, 85, -66]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[29, -55, 25, -38, -31, -67, -123, 81, -79, -58, -88, -41, 9, 126, -24, 18, 94, -113, 62, -94, -38, -55, 72, 1, 101, 68, 47, 93, -117, 94, 18, -111, 105, 24, -19, -77, -117, 17, -117, -75, 16, -32, 106, 89, 100, 40, 85, -66]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass23 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-70, 1, -73, 22, -53, -14, 9, 103, 114, 32, 25, -24, 69, 112, 102, -112]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[96, 37, 106, 53, -38, -52, 81, 68, 57, -100, -59, -69, -5, 17, -50, 111]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-29, 63, 15, -21, -41, -57, -101, 91, 111, 107, 116, -8, -62, -15, -124, -114]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[58, 27, -44, -8, -124, -123, -39, 118, 19, -105, 12, 74, -28, -57, -74, 117]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey21);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey37);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey37);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-95, -94, -115, 103, 58, 26, -36, 16, -75, 68, -128, -38, 7, -8, 40, 47]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[84, -92, -105, 3, 106, 59, 82, 104, 93, 117, 25, -12, 24, 9, 52, -63]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[19, -9, -71, -107, 36, -104, -102, -87, 84, 54, -61, -16, 87, -28, -62, 30]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-47, 38, -96, 81, 125, -122, 84, 26, 8, -61, 3, 59, -111, -21, 30, -46]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-91, -14, -55, 79, -30, 12, -84, -80, -125, -18, -85, -23, 115, 17, 70, -40, 57, 116, -109, 118, 71, -91, -4, -3, -81, 123, -18, -33, -25, 76, -73, -47, 19, -9, -71, -107, 36, -104, -102, -87, 84, 54, -61, -16, 87, -28, -62, 30]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-37, 82, 9, 112, -43, -37, 41, -45, -89, 62, 80, 0, 107, -105, 108, 11, -16, -109, 109, 35, 90, 106, -41, 70, 126, -122, -26, -29, -91, -38, 40, -45, 39, -14, 67, -126, 45, -19, -85, -89, -19, -112, 45, -96, 88, -7, -46, 93, 5, -21, 25, -16, -99, -122, 44, 33, -20, -90, 90, 39, 90, -6, 103, 35, -44, 119, -107, 95, 96, 64, -72, 67, 58, -103, 87, 98, 98, 110, -76, 12, -8, 75, -121, 2, -42, 21, -86, -95, -70, -71, 23, 87, -74, -72, 50, -21, 19, -9, -71, -107, 36, -104, -102, -87, 84, 54, -61, -16, 87, -28, -62, 30]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-37, 82, 9, 112, -43, -37, 41, -45, -89, 62, 80, 0, 107, -105, 108, 11, -16, -109, 109, 35, 90, 106, -41, 70, 126, -122, -26, -29, -91, -38, 40, -45, 39, -14, 67, -126, 45, -19, -85, -89, -19, -112, 45, -96, 88, -7, -46, 93, 5, -21, 25, -16, -99, -122, 44, 33, -20, -90, 90, 39, 90, -6, 103, 35, -44, 119, -107, 95, 96, 64, -72, 67, 58, -103, 87, 98, 98, 110, -76, 12, -8, 75, -121, 2, -42, 21, -86, -95, -70, -71, 23, 87, -74, -72, 50, -21, 19, -9, -71, -107, 36, -104, -102, -87, 84, 54, -61, -16, 87, -28, -62, 30]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-29, -89, -111, 46, -4, 113, 32, -56, -50, -111, -22, 117, 19, -78, -59, 86, 85, 90, -78, 29, -60, 70, 126, 33, 103, -94, 99, -114, 26, 58, 94, -73, 19, -9, -71, -107, 36, -104, -102, -87, 84, 54, -61, -16, 87, -28, -62, 30]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[105, 18, -3, 4, -49, -61, 15, -56, 39, -58, -35, -3, -114, 68, -92, 26, -1, -120, -62, 59, -121, 74, 75, 110, 59, 61, -6, 66, 12, -82, 30, 5, 19, -9, -71, -107, 36, -104, -102, -87, 84, 54, -61, -16, 87, -28, -62, 30]");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-5, -115, 38, -87, 77, 97, 77, 111, -104, 0, -5, 58, -42, 100, 19, 114]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[22, 48, -30, -82, -67, 117, 94, -114, 8, -89, -89, -7, -72, -120, -90, 1]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[61, -127, 76, -59, -93, -80, 97, -27, 68, 20, 7, 110, 76, 23, 69, 112]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-5, -115, 38, -87, 77, 97, 77, 111, -104, 0, -5, 58, -42, 100, 19, 114]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[30, 115, 13, -126, -30, 98, 34, -79, 5, 36, 17, 73, -76, 117, 56, -3, -96, 114, 110, 82, -45, 40, -50, -120, -17, -46, 24, 36, 16, -17, 77, 97, -5, -115, 38, -87, 77, 97, 77, 111, -104, 0, -5, 58, -42, 100, 19, 114]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[3, 38, -108, 14, -1, 78, 47, -104, -40, 105, 78, 120, 126, -43, -60, -92, -34, 3, -61, -99, 17, -92, -102, 84, 96, 25, 31, -49, -86, 12, 115, 105, -5, -115, 38, -87, 77, 97, 77, 111, -104, 0, -5, 58, -42, 100, 19, 114]");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey27);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        java.lang.Class<?> wildcardClass34 = secretKey27.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[29, 69, -21, 38, 59, -62, 62, -110, -107, -88, -6, -54, -120, 19, 19, -48]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-115, 37, 71, -113, -47, 49, 63, -42, -17, 96, -94, -123, -16, -48, -20, 77]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[124, -113, 116, 108, -35, 66, -98, -94, 77, 53, 33, -95, -65, -117, -128, 63]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-91, -16, -60, -68, 100, -42, 105, -60, 27, -109, 125, -44, 78, -102, 103, 62]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-33, -46, 31, -74, -46, -37, 9, 122, -94, -19, -53, -48, 93, 76, -37, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[3, -110, 23, 14, -28, -51, 101, 112, 114, -10, -49, 92, 55, 44, 104, 33]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[98, -26, 13, -24, -64, 121, 100, -15, -23, -69, -13, -80, -51, -35, -83, -14, 88, 75, -124, 42, -89, 119, -110, 59, 87, 27, 103, -36, -70, 3, -114, 31, -33, -46, 31, -74, -46, -37, 9, 122, -94, -19, -53, -48, 93, 76, -37, 75]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey17);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey30);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-28, 23, -127, 106, -47, -47, 27, -19, -74, 24, -92, 15, 105, -29, -12, 16]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[62, -11, 114, -74, -2, 2, 106, 61, 103, 112, -51, -120, -87, 92, -16, 110]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-124, 41, 12, 109, -7, -115, -38, 117, 6, 118, -110, -60, -25, -105, 83, 58]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-67, -20, -1, 78, 31, -88, 2, 91, -89, 40, 100, 65, 49, -35, 116, 41]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-100, 2, -74, 64, 17, 108, 10, -13, 7, -84, 74, -51, -78, 18, -80, -16, -25, 60, -62, 124, -12, -13, -88, 93, -11, -98, 5, -81, -123, -95, 16, -60, -124, 41, 12, 109, -7, -115, -38, 117, 6, 118, -110, -60, -25, -105, 83, 58]");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[17, -35, -124, -12, -116, 27, -31, 20, 112, 20, -12, 24, 59, 1, 114, 89]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[6, 110, -81, 0, -74, 86, -88, 15, -38, 94, -8, 15, 101, 47, -120, 20]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-117, -112, 118, -108, 115, 91, 64, -89, -8, 117, -46, 108, -46, 114, 1, -54]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[17, -35, -124, -12, -116, 27, -31, 20, 112, 20, -12, 24, 59, 1, 114, 89]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[76, -124, 47, 57, -106, -96, 25, -31, -22, 76, -127, -52, -10, -120, -51, 120, 121, -84, -43, 95, -20, 12, 113, 7, -94, 114, -51, 94, -71, 13, 115, -27, 17, -35, -124, -12, -116, 27, -31, 20, 112, 20, -12, 24, 59, 1, 114, 89]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[36, -117, -43, 78, -96, -27, -5, -9, -43, -25, -12, 62, 37, 51, 17, -73, 89, 124, 43, 74, 49, 25, -56, -61, 115, -73, 33, -46, -52, -32, 94, 50, 17, -35, -124, -12, -116, 27, -31, 20, 112, 20, -12, 24, 59, 1, 114, 89]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-117, -112, 118, -108, 115, 91, 64, -89, -8, 117, -46, 108, -46, 114, 1, -54]");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey51);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey51);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey51);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("F216E19500A2E163BFDB4D468C3AC4C2D82FC555FBD45BC1B385D6A133775C1DE5A763C958D76CA659E0E38F63F9A22B", secretKey51);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("9B81C6E367A0128616E38549659C20803D6F05C62470E98C6ECE221E4A1BB20A2B3C5761AF981D74A9ABC4A1773C7188", secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[102, -48, -79, -7, -47, -26, -43, -48, -19, 25, 83, -108, 104, 61, -54, 52]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[34, 105, -108, 47, 70, -8, -12, -84, -38, -30, 31, 32, -49, 124, 10, 103]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-8, -118, 106, -87, -118, 42, 111, -15, -110, 20, 69, -109, -22, -55, -116, -64]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-72, 19, 35, 91, -82, -93, 127, -70, -37, 6, -5, -4, -50, -88, -121, -105]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-32, -72, -128, 86, -35, -4, -84, -37, -77, 75, 120, 123, 67, -100, -108, 83, -82, 29, 64, 106, -59, -70, 31, -90, -116, -77, -57, 42, -84, 70, 51, 19, -8, -118, 106, -87, -118, 42, 111, -15, -110, 20, 69, -109, -22, -55, -116, -64]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-82, 100, -51, -48, -67, -4, 2, -6, 12, -28, 114, 2, -15, -18, 66, -81, -102, 46, -112, 120, -43, 90, -76, -54, 92, 66, -37, 99, 123, -3, 89, 46, -8, -118, 106, -87, -118, 42, 111, -15, -110, 20, 69, -109, -22, -55, -116, -64]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AE64CDD0BDFC02FA0CE47202F1EE42AF9A2E9078D55AB4CA5C42DB637BFD592EF88A6AA98A2A6FF192144593EAC98CC0" + "'", str25, "AE64CDD0BDFC02FA0CE47202F1EE42AF9A2E9078D55AB4CA5C42DB637BFD592EF88A6AA98A2A6FF192144593EAC98CC0");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AE64CDD0BDFC02FA0CE47202F1EE42AF9A2E9078D55AB4CA5C42DB637BFD592EF88A6AA98A2A6FF192144593EAC98CC0" + "'", str26, "AE64CDD0BDFC02FA0CE47202F1EE42AF9A2E9078D55AB4CA5C42DB637BFD592EF88A6AA98A2A6FF192144593EAC98CC0");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AE64CDD0BDFC02FA0CE47202F1EE42AF9A2E9078D55AB4CA5C42DB637BFD592EF88A6AA98A2A6FF192144593EAC98CC0" + "'", str27, "AE64CDD0BDFC02FA0CE47202F1EE42AF9A2E9078D55AB4CA5C42DB637BFD592EF88A6AA98A2A6FF192144593EAC98CC0");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[17, 15, 23, 45, -16, -91, 64, -40, 70, 61, 47, -35, -21, -79, -8, 65]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[24, -72, -104, 56, 59, 19, -35, 49, -79, 91, -98, -9, -101, -91, -84, 13]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[13, -44, -85, 27, -20, 123, 110, 13, 45, -3, 13, 120, -113, 77, 8, 12]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, -54, 48, 12, 17, -63, -34, -92, 11, -99, 107, 46, -88, -61, -36, -101]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-15, -80, 100, 33, 125, 86, -26, -26, -58, 21, 13, 122, -93, 111, -124, 99, 50, 1, -40, -48, 13, -77, -53, -109, -115, 104, 43, 126, -24, -72, 12, -60, 13, -44, -85, 27, -20, 123, 110, 13, 45, -3, 13, 120, -113, 77, 8, 12]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[112, -12, 51, -78, -37, -80, 66, 60, -88, -119, -13, 15, -18, 81, 57, 38, 71, -113, 117, 33, -5, 63, 31, -19, 56, -80, -70, 22, -120, 49, 106, 99, 13, -44, -85, 27, -20, 123, 110, 13, 45, -3, 13, 120, -113, 77, 8, 12]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[87, -68, 108, 77, 40, -93, -69, -3, 100, 75, 71, 29, -23, 105, 55, -43, 1, -111, 8, 18, 66, 41, 8, -33, 29, -17, 56, -14, 29, -21, -65, -25, 54, -71, -126, 23, 82, 46, 32, 18, -27, 101, 2, 13, -111, 118, -52, -63, -105, -7, -17, 46, -109, -55, -17, 19, 66, 93, -8, -19, 95, -30, 79, 16, 68, -49, 64, -39, -72, -13, -49, -124, -8, -21, -29, 125, 16, -107, -30, -1, 21, 107, -74, 44, -25, 46, -60, -121, 7, 71, -117, -41, -31, -71, 27, -28, 13, -44, -85, 27, -20, 123, 110, 13, 45, -3, 13, 120, -113, 77, 8, 12]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-59, 53, 22, -9, 6, -127, 42, 96, 127, -96, -50, -114, -119, -118, 68, 51, -108, -46, -55, -110, 85, 99, 37, -9, 82, -80, 85, -51, 125, 122, -53, 67, 13, -44, -85, 27, -20, 123, 110, 13, 45, -3, 13, 120, -113, 77, 8, 12]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[106, 105, 102, 120, -31, -58, 81, -68, -41, 78, 43, 111, 127, 71, 103, -25, -112, 84, -79, 83, 92, 104, -79, 25, -66, -64, -29, 71, -41, -107, -111, -120, 38, -30, -103, -6, 108, 122, 28, -38, -91, -31, 122, -7, 11, -9, 28, -51, -49, -88, 111, -102, -12, 25, -105, -11, 64, 15, 48, 18, 13, 8, 0, -3, 81, -6, -6, -3, 52, 9, 30, 107, 121, 119, -49, 67, -128, 52, 4, 52, -74, 17, -94, -112, 34, 45, -27, -59, 29, 100, -2, -55, -65, -1, 74, -21, 13, -44, -85, 27, -20, 123, 110, 13, 45, -3, 13, 120, -113, 77, 8, 12]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[53, 25, 74, 78, 126, 122, 24, -97, -11, 107, -69, -87, -75, 96, -92, -48, 5, -119, -37, 81, 63, 22, 83, -101, -72, 46, -47, 96, 74, -30, 64, 83, 64, 119, 119, -12, -84, -117, -42, -111, 119, -71, 87, -126, 50, -119, -17, 114, 112, 23, -51, -87, -123, 0, 87, 116, 113, -64, -73, -34, -8, -113, 45, -41, -49, 108, -72, 97, 113, -7, -125, 117, 120, 46, -27, 53, 111, -90, 19, 8, -98, -40, 100, 91, -19, -43, -96, 16, 91, -58, -109, -5, 126, -29, 106, 63, 13, -44, -85, 27, -20, 123, 110, 13, 45, -3, 13, 120, -113, 77, 8, 12]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[28, -3, 0, 104, -102, -24, 41, 66, -71, 24, 42, 25, -103, -68, -127, -7, -77, -18, -125, -10, -80, 63, -60, 1, 95, 118, 85, 111, 84, -99, -109, 12, 75, 66, 72, -63, -93, 67, 36, -26, 127, -13, 20, 30, -102, 101, 97, -25, -23, -74, -121, 15, 3, 69, -23, 8, 18, 104, 56, -32, 38, -71, 48, 92, 26, -87, 34, -92, -105, -106, 89, -125, 62, 17, -104, 17, 54, -84, -104, -5, -2, -128, 108, -83, -122, 38, -120, 78, 64, -64, -47, -122, -80, -28, -87, 7, 13, -44, -85, 27, -20, 123, 110, 13, 45, -3, 13, 120, -113, 77, 8, 12]");
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        byte[] byteArray0 = null;
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-46, -78, -40, -93, 19, 44, 84, -77, 96, 123, 31, -7, -95, 25, -19, -19]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[24, -30, -20, 96, -62, -95, -89, -3, 105, -96, -110, 11, -23, -54, -19, 77]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-17, 40, -108, -118, 85, 15, 118, 76, 40, -43, -12, 92, -3, 53, -90, 81]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-44, -12, 96, -97, 36, 100, 57, 40, 61, 26, -74, 96, -117, -70, 67, -92]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-52, -22, -97, -24, 88, 76, 126, 70, 81, 53, -116, 121, 33, -71, 103, 69, -85, -14, 34, -19, 68, 61, 78, 77, -5, 124, 47, 32, -96, 68, -88, 54, -17, 40, -108, -118, 85, 15, 118, 76, 40, -43, -12, 92, -3, 53, -90, 81]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-17, 40, -108, -118, 85, 15, 118, 76, 40, -43, -12, 92, -3, 53, -90, 81]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-44, -12, 96, -97, 36, 100, 57, 40, 61, 26, -74, 96, -117, -70, 67, -92]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-26, -100, -89, 88, 46, 114, 23, 6, 81, 25, -99, -55, 110, 96, -19, -8, 18, 126, -90, 78, -12, 88, 25, 30, 58, -96, -112, 58, 93, 69, 57, -64, -17, 40, -108, -118, 85, 15, 118, 76, 40, -43, -12, 92, -3, 53, -90, 81]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[25, -54, -16, 69, 104, -9, 114, -14, 11, -99, 124, -46, 99, 6, -72, 20, 118, 106, -119, -69, -27, -66, -33, -32, -109, -17, -119, 106, 45, 61, 70, -49, -17, 40, -108, -118, 85, 15, 118, 76, 40, -43, -12, 92, -3, 53, -90, 81]");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[94, -105, -42, 115, 118, -56, -112, -73, -13, 118, 36, 43, -30, -36, 123, 52]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[99, 124, 117, -104, -90, -12, -14, -89, -37, 80, 13, 10, 18, 112, -51, 60]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[99, 124, 117, -104, -90, -12, -14, -89, -37, 80, 13, 10, 18, 112, -51, 60]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-85, -5, -74, -22, 57, -44, 77, 96, 80, -47, -15, 1, -100, 69, 97, 63]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[94, -105, -42, 115, 118, -56, -112, -73, -13, 118, 36, 43, -30, -36, 123, 52]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-88, 17, 55, 48, 74, -102, -105, 0, 68, -1, -107, -31, 25, 77, 126, 17, 90, -82, 105, -63, -27, 16, -25, -99, -74, 99, -89, 113, -110, -127, -119, 85, 36, -115, -50, 121, 108, -49, -4, -71, 90, 127, 72, -7, 16, 32, -37, -52, 19, -72, 124, 12, 35, 8, -104, 66, -12, -29, 6, -51, 47, -66, 119, -77, -106, 67, 15, -25, -89, 123, -81, 63, 59, -46, -109, 111, -48, -119, 67, 42, 48, -28, -75, 80, -111, 114, 124, 105, 20, -33, -110, 123, 18, 110, 36, -37, 94, -105, -42, 115, 118, -56, -112, -73, -13, 118, 36, 43, -30, -36, 123, 52]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[94, -105, -42, 115, 118, -56, -112, -73, -13, 118, 36, 43, -30, -36, 123, 52]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey4);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey62);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey62);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey62);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey62);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey62);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey62);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[109, 82, 78, 18, -58, 40, -19, -45, -80, -8, 76, -52, 16, -54, -113, -116]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-80, -24, -48, -120, -2, -33, 48, 71, -69, -76, -67, -9, -99, -15, 103, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[2, 4, -47, 96, -109, 11, 69, 82, -93, 30, 62, -75, -122, -97, -104, 36, 8, 0, -39, 57, -53, 3, -21, -111, -26, -92, -34, -38, -51, -51, -5, 5, 109, 82, 78, 18, -58, 40, -19, -45, -80, -8, 76, -52, 16, -54, -113, -116]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[107, 61, 11, 84, -31, 20, 12, -111, 127, 33, -23, -20, 111, -106, -3, -53, 90, -70, -16, -98, -60, 64, -53, 55, -63, -102, 52, 126, -48, -127, 125, -67, 109, 82, 78, 18, -58, 40, -19, -45, -80, -8, 76, -52, 16, -54, -113, -116]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[61, -72, -93, -48, -64, 3, -59, 120, -63, 113, -38, 8, -92, 126, -123, 76]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-82, 28, 101, -91, -62, -36, 52, 76, -92, -83, -66, -69, 89, 116, 66, 71]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[87, -71, -39, 100, -104, -3, 16, -87, 69, -60, -95, 8, 73, -119, 70, 52]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-127, 72, 42, 52, 37, -14, 57, -83, -62, -39, -64, -72, 90, -74, -87, 93]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-58, -110, 47, -66, -41, 65, -51, 92, -81, -94, 68, -10, 40, -29, 109, 70]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[34, -120, 125, 117, -108, 93, -49, 89, -19, -128, -12, 106, -36, 104, -37, 23]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[14, 91, 56, -84, 41, 62, 86, -97, -66, -121, -31, -102, 44, 86, -55, 46]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-94, 11, -3, 78, 21, -37, -5, 117, 61, -26, 3, 82, 25, 62, 23, 62]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-104, 43, -83, 43, -16, -14, -28, -73, 77, -10, -54, -72, -59, -40, -103, -11]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[80, -8, 35, 24, 74, 89, 68, -2, -92, 80, -10, -120, 108, -29, -88, 104]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[125, -109, -66, 55, 23, -108, 77, 57, 15, 28, -118, 44, 33, 31, -25, 90]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-104, 43, -83, 43, -16, -14, -28, -73, 77, -10, -54, -72, -59, -40, -103, -11]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-79, -98, -124, 112, 1, 36, 66, 112, -32, -113, 110, 94, -110, -53, -58, 75, 27, -58, -6, 29, 109, 123, 111, 57, -99, 8, 113, 98, 12, 107, 110, -73, -11, 82, 17, 61, 83, -104, -111, 108, 30, 124, -34, -121, 80, 83, 43, -29, 5, -100, 54, 8, -101, -91, -92, -9, 76, 47, 85, -104, -7, -50, 55, 126, 95, -28, -18, -121, 60, -75, 61, 54, -72, 57, -62, -110, -35, -37, -121, 12, -29, -10, 9, -100, -32, 31, -10, -118, -35, 104, -50, 37, -62, -35, 77, -5, -104, 43, -83, 43, -16, -14, -28, -73, 77, -10, -54, -72, -59, -40, -103, -11]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-6, -42, -29, 8, 29, -102, 21, 100, 47, -39, -103, 56, -13, 91, 48, 58, -115, -60, -109, 101, -31, -122, 6, -24, 19, -16, -88, 74, -128, -29, -40, -9, -47, 126, 100, -13, 126, -14, -85, -26, -73, 88, -16, 103, -35, -24, 17, -39, 93, -120, -23, -65, 118, 15, -22, 33, 78, -83, 0, 15, -38, -26, 23, 73, -107, 10, 119, -52, 33, 124, -52, -76, -46, 6, -21, -39, -46, 21, -117, -8, -62, -76, 88, 80, -65, -89, 45, -83, -43, -104, -85, 94, -61, -99, 82, -14, -104, 43, -83, 43, -16, -14, -28, -73, 77, -10, -54, -72, -59, -40, -103, -11]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-85, -23, -40, -128, 24, -54, -49, -27, -27, 111, -20, -119, -93, 67, 49, -43, -23, -122, 57, 127, 77, -73, -62, 27, 108, 57, 95, 107, 94, -90, 89, -83, 64, 94, -63, -18, -122, 67, 125, 74, -32, -116, -57, -52, 36, 7, -71, 84, -72, -54, -65, 125, -5, -97, 89, -86, 60, 55, -89, 30, 17, 1, -72, 84, -35, 43, 86, -91, 68, -99, -74, -65, 10, -94, 101, -128, 13, 27, 119, -75, -76, -23, -49, 65, 120, -67, 108, 25, -64, -60, 100, -65, -31, -103, -41, 19, -104, 43, -83, 43, -16, -14, -28, -73, 77, -10, -54, -72, -59, -40, -103, -11]");
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass9 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey9);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey25);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-97, 32, -120, -2, 65, 3, 34, 93, -109, -8, -55, -75, 33, 85, 74, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[95, -32, -125, 75, 127, -124, 124, -91, -100, 88, -7, 7, 55, 110, 18, -101]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[104, 76, 64, 78, 13, -28, 15, -26, 13, -116, -90, -51, 85, -4, 27, -38, 66, -20, 10, -71, 56, -48, 36, -71, 86, 99, 99, 105, 69, -91, 16, 7, 68, 91, 33, 89, -92, -16, -64, -59, -69, 75, -55, -54, -13, -79, -48, 14, -123, 30, -77, 37, -120, 48, -24, 56, -79, -102, -101, -57, 47, -107, 121, -23, -88, -64, 111, 14, -39, 127, 56, -33, 99, 84, 81, -66, 67, -85, -89, 114, 80, 110, 78, -48, 73, 120, 93, 124, 63, 49, -113, 55, -32, -25, -87, 103, -97, 32, -120, -2, 65, 3, 34, 93, -109, -8, -55, -75, 33, 85, 74, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-82, 9, 85, -121, 125, 54, -31, -105, -17, 103, -53, 93, 94, 49, 101, -93]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[27, -27, 92, 44, 37, 38, 75, 51, 26, 57, -55, -60, -27, 68, -36, -37]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -30, 87, -9, 81, -33, -110, 100, -21, 11, -23, 61, 106, 109, 72, 74]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -30, 87, -9, 81, -33, -110, 100, -21, 11, -23, 61, 106, 109, 72, 74]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[6, 44, -43, -121, 108, -127, -89, 79, -105, -126, -43, -5, -89, -95, 23, 80]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -30, 87, -9, 81, -33, -110, 100, -21, 11, -23, 61, 106, 109, 72, 74]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[5, -104, 127, -95, 118, -118, -84, -48, -38, 1, 57, 68, -56, -84, -128, -23, 83, 89, 47, -68, -102, 37, 24, -107, -5, -20, 112, -62, 45, -123, -24, -30, 27, -27, 92, 44, 37, 38, 75, 51, 26, 57, -55, -60, -27, 68, -36, -37]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[122, -54, 33, 3, 91, -116, 18, 82, -58, 76, -58, 14, -56, 48, -128, 35, -24, 19, 110, 90, -14, 4, 70, -112, 94, 108, -88, -125, -114, 62, -120, -109, 7, 85, 82, -24, -52, 123, 71, -110, 40, 42, -65, 74, 50, -50, 86, 113, 13, 64, 47, 51, 29, -42, -105, -9, -126, 34, 51, -23, 59, 72, -65, -28, -98, -60, 1, 22, 12, 57, -33, -63, -90, -125, -54, -5, -45, 66, 112, 72, 97, 36, 50, -63, 57, -38, 7, 24, -44, 32, 107, 11, -124, 115, 39, 49, 27, -27, 92, 44, 37, 38, 75, 51, 26, 57, -55, -60, -27, 68, -36, -37]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-70, 121, 29, -72, 56, 37, 29, -106, -90, 36, 94, -49, -108, 14, -120, -66, 51, -95, 69, -12, -24, 32, 55, 9, 77, 31, 41, -31, 35, -82, -92, -47, -106, -57, -22, 97, -55, 96, -17, 116, -9, 28, 27, -16, 10, 15, 33, -24, -112, 41, -27, -14, 10, -18, -37, -63, 46, 50, 18, -24, 69, 2, 19, -58, -36, -118, 27, -93, -78, -50, 94, 94, 98, 55, 124, 62, -112, -69, 1, -92, 29, -42, 105, -113, 105, 89, -35, -126, -45, 82, -24, 20, -119, 63, 40, 12, 27, -27, 92, 44, 37, 38, 75, 51, 26, 57, -55, -60, -27, 68, -36, -37]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-15, -119, -34, 65, 83, 55, 63, -32, 60, -17, -91, 111, -52, 95, 25, 96, 121, 28, -15, 118, -14, 40, 88, 25, 83, -74, -76, -18, 70, 77, -94, -48, 27, -27, 92, 44, 37, 38, 75, 51, 26, 57, -55, -60, -27, 68, -36, -37]");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey48);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey48);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey48);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey48);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[103, -56, -17, 61, 31, 47, -80, -96, 49, 54, 100, 25, -85, 88, 60, 96]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[110, 57, -6, -47, -70, -79, -19, -3, 124, 92, -51, 7, 45, -62, 78, 36]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[67, -52, 124, -85, 67, -50, 70, -125, 37, -60, 69, -23, -109, 91, 33, 15]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "43CC7CAB43CE468325C445E9935B210F" + "'", str7, "43CC7CAB43CE468325C445E9935B210F");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-37, -36, 89, 126, -122, -39, -121, 82, -92, -106, 47, -54, 9, 40, 5, 90]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[25, -15, -19, -5, 59, 72, 45, -5, -66, -44, -93, -48, -18, -50, -79, -51]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[107, -43, 46, -10, 98, 113, 18, -106, -72, -14, -6, -82, -103, -50, -4, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[24, -108, 36, -32, -121, -25, -103, 3, 91, 19, -107, 17, -113, 63, -116, -91]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-35, 34, 61, -80, -17, 17, -60, 12, 124, -37, 45, -60, 30, 46, 64, 109]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-10, -100, -14, 33, -83, -63, 99, -46, 53, -18, -75, 64, 3, 21, 27, -106]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-28, -15, -22, 6, -15, 123, 82, -50, -78, -21, 11, -105, -101, -25, 82, 19]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[7, -39, -105, -82, -66, -23, -57, -57, 26, -32, 27, 58, 115, -39, 33, 106]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-28, -73, -126, 127, -77, 9, 104, -49, 124, -41, 72, -96, 11, -42, 78, -11, 18, 13, 68, 78, 55, 44, 51, -12, -45, -48, -101, -12, -75, 30, 108, -37, -28, -15, -22, 6, -15, 123, 82, -50, -78, -21, 11, -105, -101, -25, 82, 19]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[6, -89, 126, -59, -52, 26, 55, 34, -95, 44, 21, -87, 71, -2, -59, 123, 113, 53, -99, 81, 11, 88, -104, 35, 6, -71, -125, -5, 26, -4, -103, 88, -28, -15, -22, 6, -15, 123, 82, -50, -78, -21, 11, -105, -101, -25, 82, 19]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-51, 5, 12, 87, 47, -25, 91, 35, 19, 81, -42, 98, 73, -90, 67, -71, 33, 9, 36, -31, 14, -49, -43, -46, 23, -88, -125, 41, 47, -78, 76, 107, -28, -15, -22, 6, -15, 123, 82, -50, -78, -21, 11, -105, -101, -25, 82, 19]");
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey17);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, -98, 84, -109, 98, 35, -73, -64, -79, 121, -13, 25, 87, 83, -45, 62]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-72, -125, 103, -112, 13, -31, -96, 94, -120, -76, 65, -122, 51, 120, 73, -5]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-57, 88, 116, -68, 32, 0, 8, -6, -43, 65, 38, -39, 106, 74, -96, -51]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-100, -127, -15, 24, -48, 78, -40, -119, -39, -120, -17, 17, -128, 43, -66, 29]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-85, 58, -104, -106, 6, 70, -90, -25, 91, -53, -65, -77, -26, -7, 40, -68, 29, -110, -50, 29, -96, -1, 32, 31, -15, 87, -3, 56, 41, -105, 29, -73, -57, 88, 116, -68, 32, 0, 8, -6, -43, 65, 38, -39, 106, 74, -96, -51]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[87, 50, 68, 78, -57, 55, 38, 104, -72, 65, 27, -55, -7, -62, -80, -66]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[62, 126, 19, -59, -106, 87, 38, -54, 87, -61, 92, 29, 112, -45, 105, -103]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[98, -47, -121, 106, -34, -117, 64, -18, -33, -91, 42, -111, -34, 122, 13, -41, -91, 22, -64, -30, -25, -18, -33, 53, -127, 93, 105, 19, -63, -54, 71, -51, -107, -105, 91, 35, -74, -94, -95, -97, -39, 47, -50, 117, -115, -21, 75, -54, -70, -30, -87, -105, 17, -37, 57, -103, -1, -60, -38, -66, 40, -65, -47, -24, -82, 121, 122, -128, 50, 21, -113, -35, -80, -7, 18, -82, -20, -93, 6, -54, 60, 40, 107, -47, 125, -75, -100, -104, -63, -99, -17, 5, 67, -19, -23, 50, 87, 50, 68, 78, -57, 55, 38, 104, -72, 65, 27, -55, -7, -62, -80, -66]");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 0, (byte) 100, (byte) -1, (byte) 1 };
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey12);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey12);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 0, 100, -1, 1]");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 53, -113, 103, 97, 72, 126, 122, 33, 3, 39, -106, -29, 29, 41, -107]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-66, -86, -9, -114, 71, 58, 101, -7, 37, 81, 125, 91, 92, -70, 118, 5]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[92, 55, -30, 123, -61, 120, 114, 14, 121, 49, -53, -44, -128, -40, -86, 60]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 53, -113, 103, 97, 72, 126, 122, 33, 3, 39, -106, -29, 29, 41, -107]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[89, -108, 124, -112, -77, 120, -88, -83, 52, -81, -8, -46, 23, -34, 116, 75, 3, -118, -102, -2, -7, 10, 48, -4, -70, -106, 91, -128, -16, -83, 63, -36, 47, 53, -113, 103, 97, 72, 126, 122, 33, 3, 39, -106, -29, 29, 41, -107]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-19, -25, 81, 43, -38, 48, -36, 108, 22, 125, -127, 78, 99, -7, -47, -3, -61, -12, -13, -17, 1, -124, 72, 19, -16, 45, -69, -74, 104, 82, 55, 85, 47, 53, -113, 103, 97, 72, 126, 122, 33, 3, 39, -106, -29, 29, 41, -107]");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey8);
        java.lang.Class<?> wildcardClass17 = byteArray16.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-125, -55, -78, 68, 97, -50, 83, 102, 86, -110, 6, 50, 1, 114, 64, 28]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[102, 80, -26, -17, -112, -87, -39, -84, 42, -127, 41, 23, -26, 69, 51, 90]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[102, 80, -26, -17, -112, -87, -39, -84, 42, -127, 41, 23, -26, 69, 51, 90]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[48, 15, 55, 107, 108, -69, 125, 17, -32, 92, -118, 41, -36, -112, 80, -67]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[102, 80, -26, -17, -112, -87, -39, -84, 42, -127, 41, 23, -26, 69, 51, 90]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-98, -125, -20, -111, -84, -100, 80, 117, -123, -5, 26, -31, -32, 89, -45, -118, -97, -44, -23, -29, 99, 35, -85, -88, -4, 127, -55, 84, 7, 26, 68, -19, -125, -55, -78, 68, 97, -50, 83, 102, 86, -110, 6, 50, 1, 114, 64, 28]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-15, -115, 56, -100, 42, -98, -78, 4, 12, -84, -38, 92, 124, -108, 107, 74, 26, 98, -75, 88, 76, -48, -83, 74, 94, -113, 86, 57, 86, -59, 87, 54, 34, 82, -67, -96, -26, -75, -45, -7, -17, 67, 124, -36, -87, 106, 98, 0, -52, -97, 119, 85, 14, -123, -31, 84, -110, -69, -22, -90, 18, 64, 46, 57, 47, -50, -101, -82, 118, -57, 59, 63, -27, -72, -117, 101, 17, -69, -108, -106, 48, -86, 57, 111, -56, -7, -45, -52, -4, 85, 45, 123, 31, -13, 32, -27, -125, -55, -78, 68, 97, -50, 83, 102, 86, -110, 6, 50, 1, 114, 64, 28]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[20, -88, 111, 63, 19, -65, 99, 14, -63, -35, 33, 79, -76, -116, 32, -35, 101, 49, 52, -119, 117, 50, -99, -71, -39, -121, -100, -7, 59, -86, -89, 24, 2, -106, 127, 107, 104, -112, 121, -79, -37, 114, -31, 92, 5, -28, 63, 57, -9, -27, -124, -39, -19, 11, 85, -48, -127, 75, -126, -128, -36, -28, 1, 60, -127, -51, -99, 15, 87, -101, 15, -124, 40, -24, 83, -98, -37, 96, -17, 52, 49, 99, 103, 72, 21, 5, 75, -82, 40, 3, -43, -44, -121, -15, 42, -39, -125, -55, -78, 68, 97, -50, 83, 102, 86, -110, 6, 50, 1, 114, 64, 28]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey36);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[87, 103, 90, 48, -18, 75, 61, -3, 38, 37, -84, 73, 91, 115, -106, 49]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-18, 96, 7, 16, 18, -56, 106, -45, 35, -33, -34, 18, -84, 83, -61, -109]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[25, 115, -73, -71, 24, -21, 27, 24, -101, 35, -11, -44, 91, 126, -29, -100, 64, 91, -118, -125, 101, 96, -83, -15, -106, 115, -123, -94, 28, -18, -11, 10, 87, 103, 90, 48, -18, 75, 61, -3, 38, 37, -84, 73, 91, 115, -106, 49]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1973B7B918EB1B189B23F5D45B7EE39C405B8A836560ADF1967385A21CEEF50A57675A30EE4B3DFD2625AC495B739631" + "'", str7, "1973B7B918EB1B189B23F5D45B7EE39C405B8A836560ADF1967385A21CEEF50A57675A30EE4B3DFD2625AC495B739631");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1973B7B918EB1B189B23F5D45B7EE39C405B8A836560ADF1967385A21CEEF50A57675A30EE4B3DFD2625AC495B739631" + "'", str8, "1973B7B918EB1B189B23F5D45B7EE39C405B8A836560ADF1967385A21CEEF50A57675A30EE4B3DFD2625AC495B739631");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[26, -86, 49, 47, -28, 31, 109, -17, -118, -51, 108, 52, 123, -100, 77, -13]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[91, -94, -117, -88, 39, -56, 12, 54, 93, 39, -9, 88, 70, -87, -50, -85]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[60, 74, 15, 2, -57, -4, 56, -72, -55, 5, -5, 112, 26, -65, 8, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[44, 19, 95, 60, -103, 95, 115, 0, 127, -16, 32, -40, 53, -11, -104, -44]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-25, 44, -93, -94, 31, -42, 100, -88, 81, 26, -30, 18, 54, -44, -90, -76]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[110, -57, 82, 52, 3, -96, 63, -48, 64, 66, 24, -120, -106, -78, 95, 44]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[110, -57, 82, 52, 3, -96, 63, -48, 64, 66, 24, -120, -106, -78, 95, 44]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-100, -109, -122, -126, -24, 127, 90, 108, 72, -23, 32, -111, 101, -45, 37, 26, -117, -34, -22, -118, -123, -109, -86, -105, 33, -33, -43, 68, -37, -51, 15, 62, -25, 44, -93, -94, 31, -42, 100, -88, 81, 26, -30, 18, 54, -44, -90, -76]");
        org.junit.Assert.assertNotNull(byteArray42);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-100, 104, 119, 15, -30, -95, 98, 1, -24, 97, 61, 11, 57, -20, -55, -38]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-118, 120, -28, -21, -82, 95, 24, -17, -50, 37, -25, -126, 121, -106, -75, 7]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-118, 120, -28, -21, -82, 95, 24, -17, -50, 37, -25, -126, 121, -106, -75, 7]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-81, -87, -114, -106, 8, -42, 124, 39, 12, -27, 122, 47, -117, 67, -100, -104]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-118, 120, -28, -21, -82, 95, 24, -17, -50, 37, -25, -126, 121, -106, -75, 7]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-120, 77, -20, -11, 28, 86, 106, 111, 85, -51, -127, 107, -35, 49, 112, -12, 93, 61, 13, 45, -125, 85, -109, 80, 3, -30, -94, -125, 124, -75, 26, 95, -128, 79, -81, -103, -124, -28, -97, -39, -116, 51, -54, -31, 103, 118, 8, -1, -56, -19, 112, 33, 18, 104, 124, -60, 16, -60, -92, 89, -89, 42, -88, 77, -71, -100, -33, -65, 38, 113, -33, 7, 111, 37, 107, -26, -6, -18, 91, -37, 114, 111, -59, 5, 88, 99, -30, -108, -71, 114, 127, 16, 83, -93, -58, -57, -100, 104, 119, 15, -30, -95, 98, 1, -24, 97, 61, 11, 57, -20, -55, -38]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[77, -58, -81, 93, 32, -92, 122, -69, 100, -46, 119, -109, 102, 28, 50, -43, -55, 17, 17, 126, 51, 28, 96, -70, 74, 117, -90, 107, -72, -41, 36, 19, -100, 104, 119, 15, -30, -95, 98, 1, -24, 97, 61, 11, 57, -20, -55, -38]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[77, 50, -39, -71, -51, -71, 62, -54, 93, 66, 45, -86, 32, 14, -97, -14]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[93, -45, 33, -26, 35, -7, 65, 68, -4, -45, -107, -70, 107, 114, 52, -124]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-69, 55, 124, -114, -73, 74, -86, 99, -79, 32, -11, 19, -94, -10, -116, -11, -14, -18, -113, -4, 124, -32, 46, 26, 126, 2, -29, -22, 81, 30, -97, 12, 77, 50, -39, -71, -51, -71, 62, -54, 93, 66, 45, -86, 32, 14, -97, -14]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 67, -105, 119, -38, 107, -69, -42, -3, -2, 8, -38, 53, -34, 55, -2, -122, 1, 21, -7, -47, 93, -15, 58, -101, -72, -110, -74, -86, -9, -27, 2, 77, 50, -39, -71, -51, -71, 62, -54, 93, 66, 45, -86, 32, 14, -97, -14]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey51);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.Class<?> wildcardClass61 = byteArray58.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, -54, -88, 60, 93, 79, -120, 62, -30, 63, 9, 64, -14, -56, 109, -107]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-47, 42, 20, -125, -47, 19, 36, -73, 36, -77, -91, 62, -60, 64, 115, 24]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-18, -12, 30, -14, 89, -38, 4, 8, 7, 61, 7, 14, -8, 85, 94, -118]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-31, -118, 67, 104, 77, 1, 14, 26, 91, -39, 55, -52, 4, -50, -117, 34]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[75, 11, -36, -66, -66, -103, 19, 113, 71, -4, 29, -102, 69, -110, 91, -83]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-73, 83, -91, -71, -128, 65, -51, 30, -39, -77, -59, -80, -45, 120, -29, -15]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[61, -115, 110, -72, 106, 84, 117, -36, 80, 124, 3, 42, 51, -28, 106, -10]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[72, -71, 92, -37, 83, 122, -42, 20, 7, 110, -4, 77, -51, 18, 69, 111]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[4, -4, -96, 93, 46, 123, -10, -56, 114, 74, 75, -99, 105, 33, 74, 106]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-9, 18, -76, -53, -96, 82, 17, -97, -102, -65, 124, -70, 23, 0, -60, 122]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[59, -48, -80, 10, -89, 118, -52, 101, 37, 51, 45, 93, 1, -60, -84, -47]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[4, -4, -96, 93, 46, 123, -10, -56, 114, 74, 75, -99, 105, 33, 74, 106]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-67, 102, -118, 17, 125, 3, 19, -27, -115, 31, -4, 86, 43, 106, -100, -29, 14, 60, 101, 97, -50, -113, 35, 54, 46, 79, 5, 8, 18, -54, -85, 10, -59, 115, -84, -14, -48, 13, -49, -18, 74, -82, -103, -101, 13, -107, 38, -110, 41, -29, -128, -66, -67, 21, -12, 119, 59, 57, 25, 85, -60, 23, 65, 74, 82, -24, 47, -105, -39, -15, 28, -54, -45, -59, 76, 65, 44, 64, 2, -8, -127, -101, 31, -71, -117, -4, -95, 12, -22, -1, 70, 86, -49, -40, 122, -128, 4, -4, -96, 93, 46, 123, -10, -56, 114, 74, 75, -99, 105, 33, 74, 106]");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "BD668A117D0313E58D1FFC562B6A9CE30E3C6561CE8F23362E4F050812CAAB0AC573ACF2D00DCFEE4AAE999B0D95269229E380BEBD15F4773B391955C417414A52E82F97D9F11CCAD3C54C412C4002F8819B1FB98BFCA10CEAFF4656CFD87A8004FCA05D2E7BF6C8724A4B9D69214A6A" + "'", str59, "BD668A117D0313E58D1FFC562B6A9CE30E3C6561CE8F23362E4F050812CAAB0AC573ACF2D00DCFEE4AAE999B0D95269229E380BEBD15F4773B391955C417414A52E82F97D9F11CCAD3C54C412C4002F8819B1FB98BFCA10CEAFF4656CFD87A8004FCA05D2E7BF6C8724A4B9D69214A6A");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "BD668A117D0313E58D1FFC562B6A9CE30E3C6561CE8F23362E4F050812CAAB0AC573ACF2D00DCFEE4AAE999B0D95269229E380BEBD15F4773B391955C417414A52E82F97D9F11CCAD3C54C412C4002F8819B1FB98BFCA10CEAFF4656CFD87A8004FCA05D2E7BF6C8724A4B9D69214A6A" + "'", str60, "BD668A117D0313E58D1FFC562B6A9CE30E3C6561CE8F23362E4F050812CAAB0AC573ACF2D00DCFEE4AAE999B0D95269229E380BEBD15F4773B391955C417414A52E82F97D9F11CCAD3C54C412C4002F8819B1FB98BFCA10CEAFF4656CFD87A8004FCA05D2E7BF6C8724A4B9D69214A6A");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-109, -80, -105, -113, -22, 15, 2, 106, 46, -11, -9, 52, 60, 27, 33, 29]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-36, 74, -52, 79, 80, -54, 0, -99, 39, -2, -119, -38, -45, -96, -28, -125]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[13, -43, -27, -122, -123, 54, -12, 49, -98, -40, 58, -60, -110, 20, -52, -72]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[5, -70, -108, 62, -28, -16, -115, 95, 67, 22, 65, -79, -25, -45, 31, -113]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-104, 111, -43, 30, 54, 17, 48, 60, 56, 25, 14, 87, -36, 43, 33, -21, 76, 82, -43, -124, -117, -9, 19, 29, -35, -38, -71, 2, 15, 8, 28, -127, 13, -43, -27, -122, -123, 54, -12, 49, -98, -40, 58, -60, -110, 20, -52, -72]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[60, 127, -92, 25, -118, 102, -30, -72, -59, -128, -27, -51, 98, 125, 14, -32, -13, -56, 107, 5, 57, 104, 51, 66, -99, -79, 100, -24, 125, -88, 120, -51, 13, -43, -27, -122, -123, 54, -12, 49, -98, -40, 58, -60, -110, 20, -52, -72]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[31, 26, -85, -79, -11, 124, 34, 40, 119, 4, 16, -74, 44, 98, 84, -22, 32, 5, -4, -47, -50, 87, -4, -78, 66, 98, 119, 103, -102, -114, -91, 20, 89, 63, 105, -127, -117, -2, -62, 55, -5, 15, 77, -80, 91, -62, -72, 89, -64, -41, -92, 34, -39, 87, 101, 54, -46, 16, -93, -19, 61, -104, 52, 83, 5, -5, -62, -75, -85, 2, 88, 124, 90, -126, -50, 93, 20, -102, 74, 42, 108, -60, 29, 112, 114, -42, -37, -93, 85, 77, -30, -28, 118, 0, -32, -51, 13, -43, -27, -122, -123, 54, -12, 49, -98, -40, 58, -60, -110, 20, -52, -72]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[115, 94, -7, 109, 44, -59, -32, -66, 12, 44, -45, -12, -51, 2, 123, 80]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-11, -60, 110, 113, -82, -13, -17, -29, -111, -31, -80, 35, 11, -22, -11, 45]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-11, -60, 110, 113, -82, -13, -17, -29, -111, -31, -80, 35, 11, -22, -11, 45]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, 94, -7, 109, 44, -59, -32, -66, 12, 44, -45, -12, -51, 2, 123, 80]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey19);
        java.lang.Class<?> wildcardClass27 = secretKey19.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[61, 4, 46, 90, 51, 116, -69, 22, -84, -61, 64, 75, -57, -118, 50, -3]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-3, -91, 114, 46, 102, -106, 8, -46, 16, -45, -126, 58, -94, -90, -76, 110]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 94, 91, -114, 62, -126, -30, -31, -62, 108, 97, -40, 27, -2, 25, 30]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-3, -55, 54, 29, 70, -26, 78, -26, -52, 6, -76, 93, -34, -106, -91, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[17, -112, 63, 34, -51, -108, 78, 105, -105, 82, 28, 78, 35, -43, -30, 12, -36, 119, -44, -124, -40, 115, 49, -111, -51, -117, -108, -90, 110, -67, -91, -4, 48, 94, 91, -114, 62, -126, -30, -31, -62, 108, 97, -40, 27, -2, 25, 30]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[3, 89, 24, 56, -57, 85, -123, -7, 17, 54, -7, -106, -120, -4, -74, -128, 112, 123, 82, -103, -108, 97, -48, 14, -21, -27, -24, 110, -90, 16, -69, -51, -49, -94, -109, -77, 113, 69, -9, -1, -84, 54, 60, -65, 36, -18, 44, 101, -57, -74, 35, -34, 10, -21, -71, -44, 39, 10, 22, -40, -86, 124, -50, 54, -107, 110, -5, -7, -74, -100, -79, -3, 123, -109, 68, -91, 88, -87, -58, 107, 37, -80, 33, 16, 87, 109, 92, -34, 79, 57, 100, 77, 126, -65, 69, -91, 48, 94, 91, -114, 62, -126, -30, -31, -62, 108, 97, -40, 27, -2, 25, 30]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[3, 89, 24, 56, -57, 85, -123, -7, 17, 54, -7, -106, -120, -4, -74, -128, 112, 123, 82, -103, -108, 97, -48, 14, -21, -27, -24, 110, -90, 16, -69, -51, -49, -94, -109, -77, 113, 69, -9, -1, -84, 54, 60, -65, 36, -18, 44, 101, -57, -74, 35, -34, 10, -21, -71, -44, 39, 10, 22, -40, -86, 124, -50, 54, -107, 110, -5, -7, -74, -100, -79, -3, 123, -109, 68, -91, 88, -87, -58, 107, 37, -80, 33, 16, 87, 109, 92, -34, 79, 57, 100, 77, 126, -65, 69, -91, 48, 94, 91, -114, 62, -126, -30, -31, -62, 108, 97, -40, 27, -2, 25, 30]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey29);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey29);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("631CD88B891BC25FC9995B70DD362D570E52845EC8867317731568B9E7523AE26B6721F6D29768B47B9C91B6E386162460CC156C55E4B5F06B716200308DD85CE13D6F3D3E22F68338846F1ECFF8553CC03153D90EE69321F8C1B48BA8E4C314951651A5FB6EC9F82A78CD2EA69D5F211C5E03848451A725EFF8A94C87AD24E08D7E10050FFE0F980274AFADD6A565F45E6A1D97EC7726764A99B76B42352A3D5055F5FB20717AE9E7D67867BA207468ED40152F4EFE4146AFF8B79DF23D9B149AB8BC11B1126C724FCB230A95EFA90CB54EC5465E9935C4A25D335288A731AECA96234FF3B0E7541672180D80122DBB", secretKey29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey29);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-124, 59, 8, -128, -36, 16, 10, -22, 126, 36, 93, 18, -29, -126, -97, -113]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[20, 44, -56, -12, -42, 56, -109, -68, 36, 32, -99, 105, -58, -45, 29, 64]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[20, 44, -56, -12, -42, 56, -109, -68, 36, 32, -99, 105, -58, -45, 29, 64]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[33, 12, -76, -102, -57, -66, -104, 125, 42, 93, -111, -42, 56, 4, -72, -32]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[9, 17, -120, -40, -10, -126, 17, 68, -64, 5, 24, 118, -29, 21, 123, -121]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[119, 110, 85, 78, -52, 96, -12, 10, -53, -20, -2, -107, -37, 83, 122, -11]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-36, -103, 19, 55, -50, 68, -20, -88, 83, -19, 31, 82, -76, -83, -68, 122]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-56, -95, 88, -70, -92, 61, -121, -124, -122, -117, -76, -90, 93, 28, 60, -10, -33, -34, 42, -126, 4, -86, -55, 104, -95, 124, -2, 2, -91, 66, 113, -121, 119, 110, 85, 78, -52, 96, -12, 10, -53, -20, -2, -107, -37, 83, 122, -11]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[119, 110, 85, 78, -52, 96, -12, 10, -53, -20, -2, -107, -37, 83, 122, -11]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-36, -103, 19, 55, -50, 68, -20, -88, 83, -19, 31, 82, -76, -83, -68, 122]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-101, 20, 87, 60, 14, 89, 97, -72, 40, -65, 21, -117, -11, 103, -118, -41, -119, 54, -32, -41, -30, -57, 24, 119, -65, 38, -86, 55, -117, 25, -80, -51, 119, 110, 85, 78, -52, 96, -12, 10, -53, -20, -2, -107, -37, 83, 122, -11]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-109, 51, -82, 77, -123, -82, 89, 111, -85, 27, -60, -91, 20, -66, -110, -122, 108, 64, -62, 116, 121, 69, 50, 40, 103, 27, -101, 21, 95, -34, -38, -103, 56, 102, 76, -4, 36, 86, 50, 54, -127, -118, 61, 47, 3, -125, -61, 67, -69, -68, -124, -79, -62, -20, -90, 10, 52, 70, -83, 87, 56, 121, -107, 87, -13, 64, 51, -33, 123, 2, -112, -36, 106, -34, 47, 58, -83, -94, 42, -23, -92, 114, 123, 29, -34, -104, 122, -110, 117, -53, -110, -126, -54, -57, -126, -10, 119, 110, 85, 78, -52, 96, -12, 10, -53, -20, -2, -107, -37, 83, 122, -11]");
        org.junit.Assert.assertNotNull(byteArray39);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey20);
        java.lang.Class<?> wildcardClass25 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-51, -115, 13, -124, 104, -71, 87, 17, -43, -2, 35, 37, -52, 86, -3, -75]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-33, -86, 115, 94, -53, 120, 95, -82, -46, -126, -94, -35, 9, 51, 81, 45, 0, -65, -19, 72, 99, 99, -111, 34, -110, 92, -105, -74, 81, -89, -27, 75, -46, -93, -46, 10, -47, 28, 106, 86, 7, -89, 60, 82, -102, -30, -12, -100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey35);
        java.lang.Class<?> wildcardClass39 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-94, -90, 94, -88, -6, -52, -19, 75, 46, 80, -42, 9, -19, 109, 74, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-100, -68, 116, 95, -67, 52, 59, 79, 31, 113, 127, 123, -41, -86, 28, 37]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-93, -60, 91, -3, 62, -124, 94, 43, -63, -26, 127, 113, 18, 81, -79, -54]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-64, -78, 65, 120, -69, -83, 13, -49, -123, 49, -24, 26, 21, -52, -19, 26]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-82, -59, 119, 34, 32, 99, 108, 43, 28, -111, 90, 13, -102, -1, 6, -58]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[86, 92, -122, -106, 44, -112, 64, 53, 84, 7, -29, 14, -81, 24, -83, -124]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-19, 14, -36, -97, 51, 48, 26, -39, 50, -19, -124, -73, -7, -19, 23, 110]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-82, -59, 119, 34, 32, 99, 108, 43, 28, -111, 90, 13, -102, -1, 6, -58]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-109, 101, 63, -15, 57, 75, -38, 100, -42, -15, -37, -98, 19, -65, 92, 35]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[49, 71, -63, 90, -19, 113, 107, 0, -35, -85, 59, 16, -53, -115, -48, -25, 17, -29, 114, -12, -54, 38, -68, -27, 82, -58, -42, -107, -96, -89, 24, 87, 78, 79, -25, 50, 5, -11, -27, 101, 113, -13, 3, -116, 67, -14, -67, -53]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey62);
        byte[] byteArray66 = new byte[] {};
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray66);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey68);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey72);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey72);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey72);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey72);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey72);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey72);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey72);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey72);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey72);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey72);
        java.lang.Class<?> wildcardClass83 = secretKey72.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[55, -81, 119, -68, -16, 110, 92, -31, 10, 12, 16, -107, -48, 17, 30, -75]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-75, -43, -20, -2, -100, -38, -62, 32, 29, -121, 30, -5, 93, 28, -83, -127]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-40, -49, 55, 91, -6, 68, 102, 31, -51, -95, 108, -97, 66, 5, 32, -122]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, 61, -81, -126, -34, 35, 121, 77, -57, 65, -59, -74, -21, 36, 102, 75]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-42, -46, 77, -119, -99, 67, 48, -52, -14, 38, -91, 13, -93, 70, -108, -28]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, -78, 65, -100, -87, 102, -7, -100, 99, 72, -73, -20, 0, -75, -64, 110]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, -78, 65, -100, -87, 102, -7, -100, 99, 72, -73, -20, 0, -75, -64, 110]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-21, -16, 127, -104, 36, -39, -123, 66, 37, 105, -84, -46, 56, 7, 44, 58]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-20, -22, 90, 83, -82, 82, -72, 82, 63, -53, -110, 31, -42, -75, 85, -96]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-73, 90, -96, -92, 29, 72, 83, 79, 7, -74, 13, -36, 112, -57, 27, -54]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[15, 59, -71, 125, 47, 29, -62, -77, -31, -32, -73, 73, -47, -46, -125, -127]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-105, 50, 64, 39, -32, -108, 18, 89, 122, -49, -87, 59, -10, -127, 61, 51]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-97, 122, -49, 49, -100, -97, 98, -69, -28, -79, -69, -8, -92, -25, 83, 116]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-48, 123, -13, -76, -107, -117, 48, -43, -16, -10, -45, -27, -2, -79, -48, -110]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[73, 74, -42, 94, 92, -110, -4, -95, 56, -9, 56, -44, -119, -119, 114, -64]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-117, 49, -86, -63, -38, 123, 82, -95, -115, -40, -97, -118, 37, 33, 70, -52, 110, -20, -72, -4, -23, -51, -77, 52, -6, -113, -74, 11, 120, -105, 2, -113, -48, 123, -13, -76, -107, -117, 48, -43, -16, -10, -45, -27, -2, -79, -48, -110]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[26, -125, -68, 47, -98, 117, -32, 106, -17, 31, -89, -17, 61, 84, 117, -26, 8, -25, -36, 74, 66, 36, -98, -4, -94, 58, -42, 123, -3, 31, 58, -58, -48, 123, -13, -76, -107, -117, 48, -43, -16, -10, -45, -27, -2, -79, -48, -110]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[43, -76, 27, 8, 58, 125, -34, -91, -118, 103, -24, 96, -53, 96, 99, -121, -102, 46, 42, 42, 68, 117, -99, -107, -72, -111, 4, -1, -37, 38, 3, -50, -10, 7, 9, 52, -22, 100, -115, -66, -119, 46, -126, -78, -92, 4, -33, -84, -89, -94, -98, -82, 34, -1, -122, -2, -81, 126, 27, -72, -9, -59, -32, 102, -52, 13, 81, 124, -12, -56, -57, 68, 0, -20, 109, 108, -106, -117, 95, 6, 87, -108, -106, 2, 120, 67, -127, -45, -25, 69, -22, 42, -93, -127, 76, 78, -48, 123, -13, -76, -107, -117, 48, -43, -16, -10, -45, -27, -2, -79, -48, -110]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[85, -15, -88, 23, -80, 56, 18, -23, 90, -91, -69, -122, -27, -18, 96, 108, 57, 125, 124, 113, -66, 91, 15, 8, 117, 12, 115, -87, -14, 38, -123, -90, -48, 123, -13, -76, -107, -117, 48, -43, -16, -10, -45, -27, -2, -79, -48, -110]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey31);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-116, -13, -90, -47, 50, 105, -112, -93, -45, 108, 87, -115, 97, -58, -97, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[121, -55, 0, -15, 91, 92, -84, 111, 9, 51, 105, -6, -128, 96, -110, 2]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-128, -84, 115, -78, -62, -103, 109, -116, -58, 83, -124, 10, -100, -95, -70, -62]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[84, -110, 34, 2, -40, 44, -65, 4, 5, -45, -68, 32, -126, 95, -9, -48]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[6, -69, 122, -104, -116, 119, 6, -121, -48, 48, 65, 85, 122, 90, -98, -54, -15, -48, 83, 18, -67, 48, 116, 41, -22, -105, -101, 97, 19, 82, 77, -67, -128, -84, 115, -78, -62, -103, 109, -116, -58, 83, -124, 10, -100, -95, -70, -62]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "06BB7A988C770687D03041557A5A9ECAF1D05312BD307429EA979B6113524DBD80AC73B2C2996D8CC653840A9CA1BAC2" + "'", str23, "06BB7A988C770687D03041557A5A9ECAF1D05312BD307429EA979B6113524DBD80AC73B2C2996D8CC653840A9CA1BAC2");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "06BB7A988C770687D03041557A5A9ECAF1D05312BD307429EA979B6113524DBD80AC73B2C2996D8CC653840A9CA1BAC2" + "'", str24, "06BB7A988C770687D03041557A5A9ECAF1D05312BD307429EA979B6113524DBD80AC73B2C2996D8CC653840A9CA1BAC2");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-105, 79, 18, -32, -108, -125, 62, 19, -2, 43, 3, 83, 83, -97, -101, 67]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-36, 11, -22, 34, 70, 107, 23, -25, 80, 79, -123, 11, 59, -33, 34, -46]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-50, 67, -74, 1, 63, -43, 87, -28, 2, -88, -84, -10, -86, -115, -86, -83]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-105, 79, 18, -32, -108, -125, 62, 19, -2, 43, 3, 83, 83, -97, -101, 67]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[24, 70, 80, 56, 98, -73, 125, 83, 48, 49, -107, -127, -39, 6, 121, 121, 45, 127, 102, 64, 47, -4, -90, -101, -87, 114, 72, 104, 0, 47, 126, 106, -105, 79, 18, -32, -108, -125, 62, 19, -2, 43, 3, 83, 83, -97, -101, 67]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[40, -8, -13, 53, -110, 108, 90, 31, -94, 10, 41, -100, -97, -10, 60, -99, 40, 123, 97, -120, 62, 78, 30, -39, 125, -64, 27, 48, -1, -37, -56, 65, -105, 79, 18, -32, -108, -125, 62, 19, -2, 43, 3, 83, 83, -97, -101, 67]");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        byte[] byteArray50 = new byte[] {};
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey52);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey56);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey56);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey67);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey67);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey67);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey67);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey67);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, 20, 34, -13, -17, -87, -26, 59, -26, 9, -106, -13, 3, -20, -7, 95]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-60, -118, 89, -37, -39, 77, -94, 92, 51, -22, 41, 86, -16, 91, 98, 86]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[118, -120, 7, 122, 29, -127, 32, -123, 10, -109, -58, 74, -108, 117, -83, 82, 15, -36, -8, 54, -68, -28, 19, -101, 106, -9, -94, -33, -89, -120, -118, -123, -20, 27, -88, 77, 75, 17, -125, -126, 89, 70, -106, -59, 43, 43, 85, 83, -71, -119, -51, 81, 125, 92, 102, 112, -28, 88, 98, 121, -54, 105, -111, -115, 11, 60, 60, 15, 30, 46, -27, 110, 118, 10, 3, 62, -51, 119, -93, -65, 18, 31, -86, 54, 11, -59, -107, 113, -39, 108, 98, 35, -122, -24, 14, -49, -84, 20, 34, -13, -17, -87, -26, 59, -26, 9, -106, -13, 3, -20, -7, 95]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-63, -62, 50, 122, -45, -67, 16, 72, -99, 108, -98, -57, -112, 85, -118, 85]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "C1C2327AD3BD10489D6C9EC790558A55" + "'", str14, "C1C2327AD3BD10489D6C9EC790558A55");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[39, 95, -49, 115, 25, 94, -97, 19, 60, -79, -41, 125, -116, -6, -56, -27]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[49, -36, -105, -127, -59, -95, 6, 54, -5, -59, 29, 110, 117, 57, -29, 54]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-94, 98, 91, -123, 43, 8, 57, 48, -67, 28, 107, 99, 35, 23, -119, -63]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[35, 87, 64, 87, -22, 92, -24, 21, -78, -74, -117, -124, -118, -45, 25, -112]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[40, 94, -37, 60, -3, -116, -31, -77, 30, 6, -127, 51, 6, -65, -27, 25]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-89, 92, -88, 64, 113, 61, -57, 80, 22, 126, -127, 87, -68, 5, -54, -82]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -120, 81, 11, 12, -53, 43, 109, -89, -123, -69, -76, -70, -10, 87, 6]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[108, -124, 57, -21, 57, 95, -50, -125, 62, -71, -79, 99, 127, 97, -114, 88]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[78, -54, 6, -4, -98, -99, -62, -75, 2, 123, -118, 21, 68, -54, 123, 80]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-52, -39, 55, -119, 73, 35, -54, -98, 64, 66, -122, -86, 75, -96, 55, -10]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-63, -126, -40, -2, 107, 1, 94, 90, 14, 3, -100, -24, -46, -41, 107, -102]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[78, -54, 6, -4, -98, -99, -62, -75, 2, 123, -118, 21, 68, -54, 123, 80]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[104, -35, -90, 87, -2, -51, 91, 47, 17, 104, 46, -103, -21, -122, -79, 46, 48, 13, 102, -85, 47, 13, 102, 88, -15, -31, -68, 57, 16, 82, -55, -120, 78, -54, 6, -4, -98, -99, -62, -75, 2, 123, -118, 21, 68, -54, 123, 80]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-52, -39, 55, -119, 73, 35, -54, -98, 64, 66, -122, -86, 75, -96, 55, -10]");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-12, 113, 85, -120, 102, 38, -123, 87, -76, -18, 103, 20, -41, -109, -4, 41]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-23, -112, -72, -4, 44, -101, 90, 66, -45, 38, 112, 102, 55, -100, -53, -73]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-114, -64, -73, -54, 60, 35, -42, -4, 102, 104, -113, 18, -84, -60, -40, -91]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[41, -1, 6, 83, 29, -11, 55, 103, 92, -42, -3, 116, -120, 69, 86, 11]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[82, 47, 95, 49, 21, -71, 49, 12, -107, -127, -2, -92, -96, -5, 50, -51, -95, -127, -95, 17, -33, 105, 88, 34, 103, -34, -81, 116, -5, 30, 27, -64, -114, -64, -73, -54, 60, 35, -42, -4, 102, 104, -113, 18, -84, -60, -40, -91]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-57, 61, 20, 29, -82, 19, -86, -23, -47, 73, -109, -110, 46, -42, -73, 38, -74, -1, 108, 56, -73, -14, -47, -78, 121, 93, -120, 52, 92, 61, -72, 1, -114, -64, -73, -54, 60, 35, -42, -4, 102, 104, -113, 18, -84, -60, -40, -91]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-46, 6, -4, 38, -115, 51, 50, 26, 90, -66, 38, 21, 72, -63, -15, -2, 25, 33, 101, -87, -24, 27, -120, 38, 121, 2, -101, 43, 41, 80, 70, 107, -32, -20, -54, -73, -122, -47, 16, -115, 116, 93, -39, -116, -39, -43, -29, 19, 110, 83, 44, -106, -59, -89, 105, 78, -69, -20, 42, 10, 47, 102, 113, 15, 3, 35, 42, -96, -53, 8, 29, -95, 62, 30, -47, -43, -84, -121, -86, -61, 110, 75, 121, -49, -59, -71, 73, 53, 64, -58, 95, -107, -116, 85, -69, -26, -114, -64, -73, -54, 60, 35, -42, -4, 102, 104, -113, 18, -84, -60, -40, -91]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-125, -32, -7, 106, -2, -29, 79, -81, -5, -52, 111, -84, -27, -3, -24, -39, 95, -109, 75, 82, 116, -32, -8, -104, 74, 26, -109, -79, 11, 104, 33, -114, -35, 72, -106, -66, -79, 22, 83, 73, 76, 12, -107, -113, -16, -106, -7, 125, -56, 88, 80, -123, -88, -127, 20, 91, 112, -33, -123, -95, 7, 98, -76, -91, 67, -18, -76, -59, 113, -94, 51, 59, 16, 10, 81, -36, -6, 117, -44, 31, -75, 89, 103, -68, -65, 59, 102, 49, 70, 29, 44, -97, 113, 95, -22, -89, -114, -64, -73, -54, 60, 35, -42, -4, 102, 104, -113, 18, -84, -60, -40, -91]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[113, -103, -123, 30, 76, 0, -122, 87, -101, 104, -65, -93, 12, -60, -71, -13, -68, -40, -25, -74, 14, -9, 4, -26, -76, 74, 113, 112, -2, -4, 77, -29, -114, -64, -73, -54, 60, 35, -42, -4, 102, 104, -113, 18, -84, -60, -40, -91]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey40);
        java.lang.Class<?> wildcardClass49 = byteArray48.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[29, -13, 111, -86, 126, 4, -35, 31, 3, -54, -43, -103, 14, -102, -74, -76]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-84, -12, -11, -64, -18, -59, 44, -48, 112, -96, -76, 55, -10, 10, 109, -92]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[127, -10, 42, 112, -21, 15, -98, 29, -80, -57, -1, -38, -30, 36, -14, -82]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-30, 84, -42, -99, 71, 91, 67, 101, -76, 23, -28, 67, -97, -85, -77, -28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[85, -12, -15, -17, 114, -125, 46, -114, -18, 119, -124, -19, -58, 92, -111, 5]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-121, 57, 86, 91, 44, -47, -126, -9, -45, -39, 29, -29, -33, -86, 21, -52]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[54, -103, -22, 90, -23, -69, -116, 127, 81, -97, -28, -77, -82, 83, 95, -69]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, -51, 24, 51, 110, -77, 62, 61, -26, 47, 83, -21, 40, -100, 86, 123]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-83, 62, -118, 85, -57, 95, 41, 110, 16, 55, 12, -30, 116, 43, -41, -6, 0, 15, -95, -23, 114, -87, 98, -45, -97, 102, -84, -24, -87, -39, -46, 18, 54, -103, -22, 90, -23, -69, -116, 127, 81, -97, -28, -77, -82, 83, 95, -69]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[106, -78, 81, 15, 47, 14, -58, 113, 101, -86, -87, 78, -112, 124, 13, -58, 24, -94, -18, 91, 9, -51, 71, -13, 63, -97, 107, 66, -43, -39, -9, -114, 54, -103, -22, 90, -23, -69, -116, 127, 81, -97, -28, -77, -82, 83, 95, -69]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[76, 102, -74, 100, 17, -100, 89, -88, -61, 23, 34, -69, 26, 74, -20, 84, -3, -92, 17, -38, -40, 88, -97, 125, -21, -106, -118, 56, -17, -94, 105, 90, 67, 21, -81, -103, 32, -95, -55, -42, -1, 67, -18, -110, -105, -48, 43, -47, 4, 104, -5, -113, 93, -70, 0, 103, -11, 0, -83, 64, 0, -100, -113, -93, 86, 21, 103, -126, -116, 109, 50, -128, -82, 87, -121, 74, 29, -28, -126, -120, -114, -110, -103, -4, -23, 90, 31, 110, -25, 65, 105, 118, -56, 125, -5, -75, 54, -103, -22, 90, -23, -69, -116, 127, 81, -97, -28, -77, -82, 83, 95, -69]");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey17);
        java.lang.Class<?> wildcardClass23 = secretKey17.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[13, -59, 43, 70, -18, -101, 56, 83, 82, 76, 61, -59, -67, -126, -69, -37]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[117, -38, 0, 7, 27, -32, 127, -6, 126, -22, 36, -52, -21, -28, -13, 67]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[24, -52, -7, -43, 113, -60, -60, 100, -20, -3, -116, 120, 7, -3, 57, -29]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-42, 57, -3, -106, 88, -92, -69, 86, -6, 53, -20, 23, -102, 104, 12, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-55, -84, 78, -42, 67, -64, -59, -27, 90, 18, -106, -89, 65, 35, 48, 108, -110, 119, 35, 121, -11, -7, 119, 78, 84, -7, -126, -118, -84, -107, 73, -72, 81, -99, 19, -51, 46, 62, -4, 118, -91, -101, 12, 122, -56, 111, 39, 83, -126, -43, 87, 91, -59, 17, -29, -31, 103, 21, -63, 125, -5, -37, 67, 12, 49, 62, -99, -6, -88, 26, 102, 87, -22, 50, -80, 33, 78, 121, 48, 40, 118, -75, -24, -120, 6, -35, -7, 65, -30, 127, -41, 0, -71, -122, 59, 66, 24, -52, -7, -43, 113, -60, -60, 100, -20, -3, -116, 120, 7, -3, 57, -29]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey5);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey15);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey15);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[85, -90, -36, -26, 97, 74, 88, -53, 100, -90, -16, -104, 40, -25, 64, 121]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[18, -17, 104, 100, 4, 66, 48, -58, 96, 54, -43, 42, 59, -86, -107, -46]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[18, -17, 104, 100, 4, 66, 48, -58, 96, 54, -43, 42, 59, -86, -107, -46]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-80, -55, -10, -25, -115, 94, -43, -53, -2, 101, -107, -5, 52, 57, -117, -109, -27, -17, -23, 68, 8, -5, -58, 57, 95, -123, -99, 56, 33, 106, -26, 23, 85, -90, -36, -26, 97, 74, 88, -53, 100, -90, -16, -104, 40, -25, 64, 121]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[2, 56, 3, 73, 96, -27, 23, 112, -126, 1, -105, 110, 72, -84, 111, 80, -10, 22, 0, 124, -109, -52, -6, 57, 119, -87, -1, -74, 96, 19, -3, 14, 85, -90, -36, -26, 97, 74, 88, -53, 100, -90, -16, -104, 40, -25, 64, 121]");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-87, -122, -20, 67, -69, 45, 98, 48, 49, -31, -121, 79, 98, 44, 23, -81]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-34, 22, 77, 87, 6, -2, 61, -6, -70, -11, -123, -60, -54, -52, 60, 29]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-80, -47, 85, -121, -58, 90, -87, 38, -40, 109, -96, -104, -127, 88, -114, -99]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-87, -122, -20, 67, -69, 45, 98, 48, 49, -31, -121, 79, 98, 44, 23, -81]");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey46);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[51, -25, 109, -42, 40, -102, -56, -120, 118, 91, -14, 43, -112, 87, 31, 67]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[29, 0, -56, -50, 83, 103, 44, 102, 104, 102, -76, -108, -104, -118, -86, 68]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[38, 0, 113, 78, -97, -128, -75, -12, 23, 113, -34, -64, 47, 76, -12, 98]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-107, -25, -48, 40, -42, -110, -107, -110, -69, -89, -4, 110, 33, -34, 47, -48]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[45, -17, 124, -109, -39, -116, -38, 71, 116, 108, 39, -15, 51, -69, -14, 73, 40, 28, 60, 28, -2, 32, 121, 41, -111, 31, -26, 53, -53, -94, -41, 123, 38, 0, 113, 78, -97, -128, -75, -12, 23, 113, -34, -64, 47, 76, -12, 98]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[45, -17, 124, -109, -39, -116, -38, 71, 116, 108, 39, -15, 51, -69, -14, 73, 40, 28, 60, 28, -2, 32, 121, 41, -111, 31, -26, 53, -53, -94, -41, 123, 38, 0, 113, 78, -97, -128, -75, -12, 23, 113, -34, -64, 47, 76, -12, 98]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[38, 0, 113, 78, -97, -128, -75, -12, 23, 113, -34, -64, 47, 76, -12, 98]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[69, -87, -43, 87, 98, -50, 63, -44, -19, 67, 52, 124, -84, 117, -65, -17]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[92, -28, 62, 1, 29, 10, -77, -12, -38, -87, -57, -83, -102, -53, 114, -20]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[60, -95, 41, 13, 110, 2, 61, -86, 67, -104, -21, 81, -8, 107, 12, -88]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-10, -58, -126, -3, -73, 85, -55, 18, 61, 64, 27, 116, 73, -93, -96, 71]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[21, -115, 112, -114, -10, 5, 106, 101, -90, 103, 44, 98, -63, -79, -79, 47, 54, -48, -18, -66, 43, 90, -127, -69, 91, 91, 65, -67, -75, 55, 109, -66, 60, -95, 41, 13, 110, 2, 61, -86, 67, -104, -21, 81, -8, 107, 12, -88]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-74, 89, -6, -10, -69, 49, 9, -101, 102, -101, -14, -99, -78, 103, 44, -117, 47, -123, 24, 47, 4, 9, 94, 122, 62, 46, 39, 21, -128, 78, 6, -14, 60, -95, 41, 13, 110, 2, 61, -86, 67, -104, -21, 81, -8, 107, 12, -88]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-19, -7, 43, 10, -54, 63, 8, -14, -123, 116, 110, 1, -37, -108, 4, -127, 54, -64, -105, 78, 107, -114, 60, -99, 120, 18, -42, -77, 17, -37, 61, 25, -101, 102, 78, -102, 45, 89, 85, 80, 21, 58, -108, -110, -112, 71, -92, 3, -91, -111, 112, 20, -126, -85, 53, -87, 86, -34, 38, 28, -15, -18, -75, -16, 96, 21, -16, -112, -44, 108, 65, 117, 57, -69, 60, -34, 83, 122, -2, -122, -15, 96, 33, -18, 27, -44, 99, 67, -98, 34, 60, -57, 6, 90, 37, 63, 60, -95, 41, 13, 110, 2, 61, -86, 67, -104, -21, 81, -8, 107, 12, -88]");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey19);
        java.lang.Class<?> wildcardClass23 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[2, -73, -90, 19, -99, 120, -101, 60, 25, -28, 126, 113, -106, -77, -118, 26]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-28, -55, -47, -1, -41, -62, -5, -5, 98, -120, -113, 38, 100, 113, -70, -98, -71, -101, -57, 103, -19, -39, -13, 0, 88, 16, -128, 32, 121, 81, 75, -92, 77, -107, -121, 42, 7, -74, 51, 72, 38, -79, 78, -58, 118, 72, 2, 99]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey6);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey34);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey34);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey34);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey34);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[20, 91, 127, 85, 55, -65, -62, 103, 19, -74, -118, -91, -87, -79, -67, 39]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[46, 91, 28, -81, -117, -104, 52, 125, -125, -119, -66, 104, 37, -106, -2, 44]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[46, 91, 28, -81, -117, -104, 52, 125, -125, -119, -66, 104, 37, -106, -2, 44]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-65, 5, -47, -34, -3, 9, 8, -83, 119, -41, -28, -87, -90, -126, 16, -44]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[20, 91, 127, 85, 55, -65, -62, 103, 19, -74, -118, -91, -87, -79, -67, 39]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-113, 27, 117, 11, 23, 45, -45, 25, -94, 25, 31, -55, -40, -25, 24, 15]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-58, 44, 71, 85, 52, -88, 43, -46, 89, 108, -25, 98, 89, 59, -115, 41]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[73, 32, -104, 68, 74, 76, 118, -38, 99, 33, -83, 60, 37, -86, -67, 26]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-22, -18, -24, 126, 10, 23, 65, -39, -116, 19, -1, 10, -23, -53, 105, -98]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-68, 5, -67, 116, -101, -103, -92, 99, 90, -68, 75, -60, -22, -34, -75, -1, 117, -44, 1, -66, 13, 101, 82, -102, -60, -120, -96, -49, 7, 95, -119, -101, 73, 32, -104, 68, 74, 76, 118, -38, 99, 33, -83, 60, 37, -86, -67, 26]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-72, 82, 47, -12, 93, 105, 86, -35, -84, 10, 3, 113, -104, 48, 97, 61, 115, 5, 44, -51, -11, 11, -67, -25, 63, -95, -49, -8, -57, -85, 65, 110, 73, 32, -104, 68, 74, 76, 118, -38, 99, 33, -83, 60, 37, -86, -67, 26]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[61, -94, 60, 23, -65, 122, 94, -56, 96, -10, -70, -110, 21, -112, 24, -87, 58, 91, 3, 83, -106, -27, 54, -68, -80, 124, -116, -70, -32, 66, -22, 85, 117, 14, 26, -118, -76, -30, -106, 37, -64, 111, -79, -55, -37, 54, 122, 18, -48, 105, -103, -70, -27, 46, 122, -31, 113, 0, -97, -83, -28, -42, -126, -12, 80, 8, 105, 9, -122, 25, 69, 51, -99, 45, -84, 92, 43, 27, -111, 2, -118, -93, -73, -36, -33, -40, 52, -96, -64, 52, 88, -73, 54, -12, 10, 23, 73, 32, -104, 68, 74, 76, 118, -38, 99, 33, -83, 60, 37, -86, -67, 26]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-125, 65, -12, 108, -88, -96, -31, 117, 80, -36, 70, 116, -67, 108, -18, 63, -87, -91, 7, 33, 13, 99, -30, -111, 91, -102, 59, 113, -113, 52, 99, -105, 73, 32, -104, 68, 74, 76, 118, -38, 99, 33, -83, 60, 37, -86, -67, 26]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-20, -113, 107, 50, -90, -49, -118, -77, -22, 86, 67, -16, -18, 11, -67, 111, 100, -125, -89, -124, 16, 10, -43, -10, 112, 60, -116, 115, 27, -74, 46, -55, 73, 32, -104, 68, 74, 76, 118, -38, 99, 33, -83, 60, 37, -86, -67, 26]");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-7, 4, 19, 11, 12, 105, -71, -121, -67, 4, 46, 76, 109, -118, 17, -58]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[40, -18, 127, -69, 74, -61, -36, 32, 45, -9, 43, -117, 106, 90, -53, -76]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[51, -70, 55, -42, 98, 24, 94, -60, 51, -51, 109, -110, 115, -55, 60, -51]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[37, -117, 106, -46, 0, 74, 38, -82, 9, -2, -23, -19, 123, -95, -93, 8]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[91, -90, -124, 20, 4, 82, -29, 23, -77, 81, -29, -10, -100, 72, -45, 15, 57, -58, 117, -18, 31, -36, 48, 77, -63, 8, -77, -113, 107, -126, 98, 53, 51, -70, 55, -42, 98, 24, 94, -60, 51, -51, 109, -110, 115, -55, 60, -51]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-63, 123, 46, 89, 19, 17, -39, -62, 40, 117, -4, -55, 28, 28, -52, 97, -99, -60, -92, -61, -39, -39, 85, -113, -113, 61, 76, -78, -6, -78, -110, 27, 51, -70, 55, -42, 98, 24, 94, -60, 51, -51, 109, -110, 115, -55, 60, -51]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[72, 43, 32, 120, 34, 19, -53, -31, -11, -124, -74, 69, 50, 66, 75, -57, 115, 47, 105, -93, -11, 72, -52, 67, -102, -32, 76, 113, -74, 91, 67, 8, -89, 94, 32, -99, -69, -110, 6, -46, 92, -120, -2, 3, -50, -47, 4, -15, -57, 15, 105, -51, 39, 127, 49, -83, -70, -67, 112, -85, 27, -107, 101, 56, 32, -120, 29, 75, 124, 94, 113, 31, -109, -113, 81, -30, 27, 33, 102, 110, -20, -103, 54, -37, -107, 107, 86, -2, -110, 23, -124, 116, 48, -127, -24, -79, 51, -70, 55, -42, 98, 24, 94, -60, 51, -51, 109, -110, 115, -55, 60, -51]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-60, -66, -127, -54, 65, -112, -108, -75, -111, -101, 0, -45, -13, -60, 60, -73, 100, 63, -76, 108, -23, -10, 118, -3, -127, -105, -113, 34, 39, 50, -43, 97, 51, -70, 55, -42, 98, 24, 94, -60, 51, -51, 109, -110, 115, -55, 60, -51]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "C4BE81CA419094B5919B00D3F3C43CB7643FB46CE9F676FD81978F222732D56133BA37D662185EC433CD6D9273C93CCD" + "'", str29, "C4BE81CA419094B5919B00D3F3C43CB7643FB46CE9F676FD81978F222732D56133BA37D662185EC433CD6D9273C93CCD");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey37);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey37);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 32, -74, -25, -120, -78, -10, 83, 8, -19, 79, -97, -80, -77, -107, 101]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-65, -21, -86, 3, -77, -15, -10, -11, -40, -5, 85, -113, -94, -53, -97, -110]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-65, -21, -86, 3, -77, -15, -10, -11, -40, -5, 85, -113, -94, -53, -97, -110]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-16, -60, 49, -99, -37, 107, 98, -87, 109, 24, 113, 11, 27, 32, -93, -102]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-65, -21, -86, 3, -77, -15, -10, -11, -40, -5, 85, -113, -94, -53, -97, -110]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[23, 98, 31, -57, -79, -17, -55, -74, 37, 0, 63, -92, 75, -58, -80, -79, -110, 76, -42, -56, -56, 28, 49, 91, 87, 12, 48, 89, -128, 114, 55, 19, -1, 32, -74, -25, -120, -78, -10, 83, 8, -19, 79, -97, -80, -77, -107, 101]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-27, 89, 119, 120, -99, -122, -61, 74, 62, 29, -42, 60, 126, 66, -80, 21, 70, -117, -51, 90, -83, -90, -97, -106, -63, -67, 114, -50, -38, 27, 6, 43, 85, -70, 37, -116, -73, -75, 79, -27, 81, -87, -49, -20, -116, -31, 11, 39, 82, -91, -55, 75, -47, -106, -21, -99, 112, -115, -72, 105, -9, -101, -123, 68, 45, 119, 120, 14, -89, -90, 84, 12, -108, 22, 78, -22, -77, -22, -86, 67, -57, -52, 21, 127, -112, 82, 38, -40, 57, -49, 50, -57, 70, -5, 48, 0, -1, 32, -74, -25, -120, -78, -10, 83, 8, -19, 79, -97, -80, -77, -107, 101]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "E55977789D86C34A3E1DD63C7E42B015468BCD5AADA69F96C1BD72CEDA1B062B55BA258CB7B54FE551A9CFEC8CE10B2752A5C94BD196EB9D708DB869F79B85442D77780EA7A6540C94164EEAB3EAAA43C7CC157F905226D839CF32C746FB3000FF20B6E788B2F65308ED4F9FB0B39565" + "'", str15, "E55977789D86C34A3E1DD63C7E42B015468BCD5AADA69F96C1BD72CEDA1B062B55BA258CB7B54FE551A9CFEC8CE10B2752A5C94BD196EB9D708DB869F79B85442D77780EA7A6540C94164EEAB3EAAA43C7CC157F905226D839CF32C746FB3000FF20B6E788B2F65308ED4F9FB0B39565");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[122, -126, -21, 1, 125, -47, -65, 48, 106, 85, 27, -92, -120, -122, 38, 118]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[53, 67, 95, 14, 57, -31, 62, 16, -60, -18, -65, -113, 14, 110, 15, 32]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[87, -109, 125, -90, -88, 127, -20, 31, 80, 124, -100, 46, -124, 6, 51, -87]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-107, 61, -108, 83, -67, -82, -18, 125, 7, -58, 93, 3, 73, 107, 65, -12]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-104, -20, 102, 112, 60, -34, 69, 107, 95, 25, -116, -103, -107, -77, 78, -6, 5, -124, 100, 82, -52, -122, 46, 57, -32, 39, 18, 54, 32, -106, 56, 83, 87, -109, 125, -90, -88, 127, -20, 31, 80, 124, -100, 46, -124, 6, 51, -87]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-16, -103, -4, -17, -77, 62, -72, 22, 117, 12, 24, -80, 70, -44, 41, -96, -35, 8, 62, 66, -44, 22, -118, -80, -41, 38, -75, 87, -93, -78, -54, 4, 87, -109, 125, -90, -88, 127, -20, 31, 80, 124, -100, 46, -124, 6, 51, -87]");
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-104, -43, -50, 80, 6, 15, 47, -44, -27, 79, -115, -117, 59, 116, 19, 58]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[39, -51, -19, -101, 71, 100, 39, -95, 36, 72, 1, 19, 16, 42, -21, 28]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-40, 42, 90, 20, 98, -78, -27, 19, -111, 19, 80, 70, 1, 16, 70, 6]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[74, 91, -56, -61, 30, 71, 1, -30, 9, -123, 12, -45, 24, -39, 25, -122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-61, -86, 23, -51, -101, -33, 107, -52, 20, 27, -33, -41, -14, -110, -128, -80, -49, -12, -7, -23, -57, 118, 93, 89, 79, 109, 113, -83, 82, -26, 1, -74, -40, 42, 90, 20, 98, -78, -27, 19, -111, 19, 80, 70, 1, 16, 70, 6]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[26, -114, 98, 72, 64, -111, -73, -33, -60, -85, -123, 21, 117, -97, -38, 76, 50, -86, -89, 116, 43, -87, 112, -69, 36, 46, 69, -67, 112, 113, -94, -37, -40, 42, 90, 20, 98, -78, -27, 19, -111, 19, 80, 70, 1, 16, 70, 6]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-85, -124, -45, -106, 93, -14, -8, -12, -18, -121, 6, 24, 78, -49, 70, 39, -124, -127, 67, 119, 3, 50, 46, -124, -20, 65, 110, 120, -41, -98, 71, -3, -32, 17, -33, 102, 86, 9, -86, 20, 100, -107, 32, 8, 104, 107, 96, 23, 11, 71, 0, -67, 47, -111, 34, 31, 46, 95, 0, -77, -20, 104, -83, 116, 56, 85, -54, -43, -127, -113, -29, -29, -44, 121, 62, -102, 107, 117, -26, 28, 107, -13, 40, 109, 54, 37, 42, -52, -35, 23, -26, -76, -4, -6, 71, 59, -40, 42, 90, 20, 98, -78, -27, 19, -111, 19, 80, 70, 1, 16, 70, 6]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[87, 10, -42, -33, -49, 121, 29, -53, -99, 91, 46, 95, 82, -114, -2, 43]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[96, 119, 108, 73, -83, 93, -10, -121, -80, -61, 28, -101, 63, 106, 26, -70]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "60776C49AD5DF687B0C31C9B3F6A1ABA" + "'", str5, "60776C49AD5DF687B0C31C9B3F6A1ABA");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-67, 22, -91, 6, 15, 109, -119, 86, -21, 124, -41, -75, -94, 33, 102, 9]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[5, 67, -34, 42, -107, -112, 70, 43, -67, -25, -98, -30, 117, -37, -3, 44]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-47, -124, -118, 126, -50, -56, -57, -95, 126, -92, -28, -52, -45, 37, -57, 102]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-67, 22, -91, 6, 15, 109, -119, 86, -21, 124, -41, -75, -94, 33, 102, 9]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 89, -71, 102, -34, 36, -24, 108, 17, -5, 92, 52, -71, -27, -125, -70, -105, -89, 34, 124, 72, 82, -13, 22, -65, 90, 13, 82, 30, 96, -20, -45, -67, 22, -91, 6, 15, 109, -119, 86, -21, 124, -41, -75, -94, 33, 102, 9]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-103, 30, -19, 26, -107, 72, -45, -89, -51, 98, 92, -13, 62, 21, -35, 9, 115, -118, -92, 39, 2, 34, 103, -100, 59, -118, 55, 55, -7, 51, 118, -9, -67, 22, -91, 6, 15, 109, -119, 86, -21, 124, -41, -75, -94, 33, 102, 9]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-47, -124, -118, 126, -50, -56, -57, -95, 126, -92, -28, -52, -45, 37, -57, 102]");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[110, -14, -76, -125, 119, 123, 27, -18, -40, 95, 64, 51, 66, -25, 66, -109]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-93, -12, -24, -83, 26, -62, 27, 18, -58, 117, 47, 88, -44, -17, -36, 40]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-93, -12, -24, -83, 26, -62, 27, 18, -58, 117, 47, 88, -44, -17, -36, 40]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[110, -14, -76, -125, 119, 123, 27, -18, -40, 95, 64, 51, 66, -25, 66, -109]");
        org.junit.Assert.assertNotNull(byteArray25);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey24);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey24);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey24);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey24);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey24);
        java.lang.Class<?> wildcardClass36 = secretKey24.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[95, -73, 106, 92, 62, -51, -13, 109, 52, -110, 107, 54, -33, 34, -57, 29]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[31, -100, 111, 43, -93, -23, 109, 30, 116, 40, 25, -97, -83, 113, -124, -36]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-100, 33, -128, -58, 120, -94, 9, 124, -30, 50, 65, 9, -112, -10, -97, 93]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-52, 58, 52, -126, -104, -122, 38, -85, -42, 109, -4, 35, -67, 16, 8, 48]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[94, -4, -47, -112, -54, -107, 24, -25, -117, 29, -13, 103, -57, 13, 28, 103, 127, -11, 120, -58, -63, -48, 31, -20, -12, 71, 103, -80, 52, 30, 23, 32, -100, 33, -128, -58, 120, -94, 9, 124, -30, 50, 65, 9, -112, -10, -97, 93]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-84, 76, 49, 82, -51, 16, -6, 3, -92, -119, 53, -48, 67, -52, -9, -97, 89, -52, 31, -104, -67, 89, -90, -77, -19, -84, -62, 25, -79, -25, 106, 39, -100, 33, -128, -58, 120, -94, 9, 124, -30, 50, 65, 9, -112, -10, -97, 93]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, -13, -112, 87, -84, -61, 54, 47, 39, -117, 66, -41, 111, -5, -23, 26, -46, 42, 35, 121, -62, 22, -68, 3, -64, 84, -56, 49, 112, 84, 25, -18, -39, -105, -18, -62, -119, 8, -20, 76, -14, 28, -59, -64, -52, -77, -74, 98, -109, -46, 83, 52, 83, -27, -96, -103, -81, -95, -32, 71, 102, 122, 52, -110, 120, 28, -3, -53, 127, 22, -82, -79, -118, 64, 7, -76, -8, -86, 9, -7, 51, -61, -41, 82, 40, -115, -116, -28, -94, -36, 107, -62, 107, 113, 12, -117, -100, 33, -128, -58, 120, -94, 9, 124, -30, 50, 65, 9, -112, -10, -97, 93]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[8, -75, 33, -94, -63, 78, 95, -44, 118, -32, -31, -113, 66, 62, -2, -87, 40, -69, 58, -1, -75, -103, 49, -19, -68, -93, 109, -54, 124, 102, 116, -37, -100, 33, -128, -58, 120, -94, 9, 124, -30, 50, 65, 9, -112, -10, -97, 93]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, -81, -103, 24, -26, -90, -85, -122, 106, 62, 118, -16, 107, -91, -127, 22, -93, -127, -99, -28, -26, 33, 125, 108, 64, 1, 125, 50, -117, -79, -114, -60, 114, 12, 49, -101, 119, 112, -82, 23, -85, 119, 27, 88, -100, -62, 82, -69, -128, 41, 91, 89, -85, 48, 94, -46, 16, -15, -125, 52, -92, 18, 60, 20, 82, -102, -34, 117, 127, -13, 7, 125, -101, -91, -84, -94, 124, -3, 19, 94, 60, -45, -90, 88, -128, -72, -69, -54, -9, -8, -106, -2, -109, 53, -14, 6, -100, 33, -128, -58, 120, -94, 9, 124, -30, 50, 65, 9, -112, -10, -97, 93]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey6);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-17, -116, 57, 64, -118, 41, -71, 29, -77, 118, -109, 53, -80, -110, -55, 92]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[61, -49, 6, 2, -17, -97, -57, 98, 68, -55, 17, -127, -96, -15, -30, 110]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[61, -49, 6, 2, -17, -97, -57, 98, 68, -55, 17, -127, -96, -15, -30, 110]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-79, -105, 109, 7, 19, -101, 98, 84, 56, -77, -6, 23, 80, 28, -118, 109]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-120, -50, 85, -27, 61, 35, 22, 105, 97, 39, -74, -94, -128, 106, -101, -108, 51, 112, 55, -36, -4, -95, -124, 18, -86, 4, -48, 32, -121, 75, 25, -26, -17, -116, 57, 64, -118, 41, -71, 29, -77, 118, -109, 53, -80, -110, -55, 92]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[28, -49, -70, 32, -34, 60, -22, -19, 101, -124, -21, 19, -76, -58, -46, 0, -95, -116, 79, 4, -120, -17, 6, -87, -43, 71, 49, 36, 108, 105, -85, -19, -105, -58, -111, -91, -82, -5, -16, -99, -49, -110, 53, -115, 15, -35, 71, -8, -20, 15, 101, 22, 80, 10, -39, 98, 121, 56, 64, -23, -121, 51, 60, 73, 66, 101, -39, -3, 45, -124, 107, -66, -48, 66, 98, -4, 60, 97, -27, -12, 29, 77, 123, -107, -17, 115, 97, 4, -31, 42, -102, 34, 39, -21, -22, 1, -17, -116, 57, 64, -118, 41, -71, 29, -77, 118, -109, 53, -80, -110, -55, 92]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-116, 74, 69, -80, -115, 98, -68, -81, 84, 21, -42, -74, -2, -119, 120, -112]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[84, 96, -123, -84, 10, -73, 33, -119, -86, -64, 6, 56, 69, -112, 28, 55]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-116, -48, 23, 72, -118, -76, 114, -110, -18, -61, 78, -54, 72, 103, -42, 105]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-26, -57, 71, 48, -6, 50, -78, 31, 39, 103, 105, -65, -39, 127, -42, -36]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-12, -72, 39, 52, -38, -94, -85, -30, -32, -1, -75, -78, -8, -110, -112, 17, -70, -39, -115, -119, 15, -58, 69, -22, -8, 0, 87, -74, 13, 52, 26, -16, -116, -48, 23, 72, -118, -76, 114, -110, -18, -61, 78, -54, 72, 103, -42, 105]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[110, 115, -57, 18, 54, 97, 38, -83, 121, 25, 100, 7, 91, 12, -37, -32, -128, -67, -85, 90, -67, 100, 60, 7, 83, 117, -76, -32, 44, -7, -118, -20, -116, -48, 23, 72, -118, -76, 114, -110, -18, -61, 78, -54, 72, 103, -42, 105]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[23, 8, -126, 96, -89, -105, 118, -58, 48, 58, -42, -109, 111, 21, 91, 101, 0, 19, -36, -120, -68, -19, -86, -122, -37, 90, 58, 67, -25, 26, 70, -90, -60, -85, -17, -113, -44, -43, 60, 64, -66, 3, 61, -104, -114, -125, -41, 21, -28, 19, -118, -40, -51, 40, 30, -109, -55, 112, -43, -83, 26, 119, -89, 5, 17, 116, -89, 18, 126, -121, 2, -122, 16, 42, 102, -74, -94, -72, -10, -14, 87, -29, 6, 92, -80, -128, -83, -89, 116, 39, -99, -12, -77, 47, -31, -7, -116, -48, 23, 72, -118, -76, 114, -110, -18, -61, 78, -54, 72, 103, -42, 105]");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[76, 100, -104, -1, 36, -100, 121, 107, 100, -37, 126, -7, -63, 29, -75, 58]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-10, 39, 99, -85, 112, -118, -58, 44, 79, -57, 13, -29, -12, 87, -51, -125]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-88, 6, 49, 76, 44, -71, -95, 55, 47, -52, -17, -3, 83, 114, 69, -70, -55, -77, -62, 99, 37, -54, -111, 121, 80, 39, 114, 123, -48, 115, -47, -47, 76, 100, -104, -1, 36, -100, 121, 107, 100, -37, 126, -7, -63, 29, -75, 58]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "A806314C2CB9A1372FCCEFFD537245BAC9B3C26325CA91795027727BD073D1D14C6498FF249C796B64DB7EF9C11DB53A" + "'", str7, "A806314C2CB9A1372FCCEFFD537245BAC9B3C26325CA91795027727BD073D1D14C6498FF249C796B64DB7EF9C11DB53A");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "A806314C2CB9A1372FCCEFFD537245BAC9B3C26325CA91795027727BD073D1D14C6498FF249C796B64DB7EF9C11DB53A" + "'", str8, "A806314C2CB9A1372FCCEFFD537245BAC9B3C26325CA91795027727BD073D1D14C6498FF249C796B64DB7EF9C11DB53A");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-63, 21, -78, 36, 71, -74, 94, -82, -98, -113, 59, -98, -78, 12, -117, 77]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[46, -49, 117, -71, -13, 32, -31, 73, 117, 3, 57, -91, -47, -79, -30, -86]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[46, -49, 117, -71, -13, 32, -31, 73, 117, 3, 57, -91, -47, -79, -30, -86]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122, 88, 23, 16, 10, -51, -51, 65, 104, -122, 119, 60, 93, -98, 40, 82]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[46, -49, 117, -71, -13, 32, -31, 73, 117, 3, 57, -91, -47, -79, -30, -86]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[37, 24, -97, -19, 5, -100, -87, -95, -70, 37, 125, -84, -83, -6, 26, -80, 76, -10, -39, 122, 115, -68, -13, -37, 113, -85, 108, -68, 23, -64, 102, 47, 18, -101, 102, 111, -73, 2, 62, 63, -97, -33, 52, -121, 36, 5, -69, 85, 62, -112, 40, -127, -100, -72, 1, -48, 108, 97, -61, -77, -111, -96, 38, 26, 40, 116, -114, 85, -3, -24, -99, -70, -84, -60, -111, -21, -24, 86, 37, -95, 14, -10, -23, -94, 102, 14, -26, -42, 91, -12, 34, 97, -61, -69, 90, -76, -63, 21, -78, 36, 71, -74, 94, -82, -98, -113, 59, -98, -78, 12, -117, 77]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey30);
        java.lang.Class<?> wildcardClass40 = secretKey30.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[101, -5, 24, 47, -2, -117, -60, -29, -90, 49, -50, -78, -85, -97, -126, -58]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-26, -4, -95, -27, 121, -97, 43, 24, -98, -45, -36, -59, 30, 43, -113, -127]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-126, 75, -46, -66, -126, 27, -4, 12, 99, -28, 49, -37, 18, 37, 30, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[41, -77, -78, -92, 61, -24, 81, -56, -103, 37, 28, -111, 80, 30, 66, -66]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-117, -53, -102, -83, -126, 70, 71, -13, 112, -112, -39, 22, -65, -12, 117, 114]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[82, -101, -119, -77, 31, 90, -3, -45, -12, -61, -104, -94, -20, 87, 58, -64]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-23, -75, 92, -121, 44, -113, -37, 61, 112, -73, 70, -122, -40, 53, 6, 94, 84, 88, 115, 17, -95, 32, -123, 3, 92, -109, -10, 93, 56, -17, -6, -35, -117, -53, -102, -83, -126, 70, 71, -13, 112, -112, -39, 22, -65, -12, 117, 114]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, -12, -38, -102, 2, -3, -35, 53, 103, 57, 11, -109, -37, -103, 117, -61, 45, -45, -107, 15, 45, -89, 50, -123, 57, -33, -94, -120, 67, -21, -63, -32, -117, -53, -102, -83, -126, 70, 71, -13, 112, -112, -39, 22, -65, -12, 117, 114]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-73, 114, 107, 95, -118, -86, -119, -70, 37, -101, -74, 91, -57, 0, -41, -24, 59, 87, 31, -79, -102, -80, -95, 50, -109, -77, -95, 81, -19, 25, 67, -106, 49, -84, -127, -122, 47, -69, 123, 101, -120, -63, 26, -10, 24, -111, -79, -52, 71, 39, 113, 49, 4, -78, -6, 127, -48, -114, -2, -29, 120, -107, -112, 11, -102, -16, -17, 17, -91, 123, -101, 109, -124, -77, 36, 61, -96, -37, 68, -63, 61, 97, 109, 45, 49, -45, -1, -24, -68, -6, 112, 43, 98, 11, -56, 15, -117, -53, -102, -83, -126, 70, 71, -13, 112, -112, -39, 22, -65, -12, 117, 114]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey19);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey44);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey67);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey78 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey78);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey78);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey78);
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey78);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey78);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-21, -36, -53, 126, 16, 113, -102, -4, 47, 60, 82, -26, -69, 90, 90, 88]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-21, -8, -42, 55, -117, 25, 64, -112, -10, 24, 1, 56, -37, 68, 7, -97]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-122, -25, -65, 49, -39, 2, -127, -57, -67, 26, 45, -102, 60, 74, 93, -103]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[38, 91, 122, -84, 59, 114, 38, 45, 112, -6, -110, 91, -86, 30, 107, 127]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[120, 109, -119, -90, -17, -16, 102, -108, -6, -82, 13, -46, 48, 27, -4, -60, 58, 89, 95, 119, -20, -112, 38, -115, 83, 21, 17, 86, -12, 69, -94, 43, -122, -25, -65, 49, -39, 2, -127, -57, -67, 26, 45, -102, 60, 74, 93, -103]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-26, -105, -40, -24, 53, 58, -104, -32, 27, 124, 33, -111, 94, 36, 127, 7, 125, -23, -18, -81, 99, 84, 50, 44, 63, -25, -14, -38, 1, 35, 54, 78, -122, -25, -65, 49, -39, 2, -127, -57, -67, 26, 45, -102, 60, 74, 93, -103]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[114, -30, 28, -127, 96, -7, 10, 32, 89, 42, 28, -44, 56, -68, -30, -15, 10, -54, -76, -59, -33, 101, -124, 69, -123, 32, -20, -4, -71, -1, 92, -73, 83, 7, -90, -118, -43, -127, -59, -125, -110, -79, -122, -66, 62, 10, 37, 65, 41, 62, -80, 58, 9, 112, -7, 97, 105, 70, -38, -62, -92, 109, 5, -1, 9, -27, 24, -70, 89, 20, 106, -80, 98, -30, -115, 107, 106, 41, -13, -64, 36, 104, 20, -40, -32, -87, 75, 122, -97, -109, -123, 18, -24, -25, 91, 26, -122, -25, -65, 49, -39, 2, -127, -57, -67, 26, 45, -102, 60, 74, 93, -103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-36, 10, 74, -82, 51, -25, -38, 28, 73, 60, 23, -23, -17, 107, -59, 63]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-18, 55, 59, -120, 31, -70, 46, -17, 48, 16, 99, 70, 21, -102, -17, 115]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[113, -84, -51, -57, 71, 28, -82, 11, -97, -102, 64, 27, 100, -116, -71, 105]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[49, -103, -53, 3, -16, 108, 57, -102, -25, -113, -119, 1, -6, -49, 115, 30]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[121, -46, -47, -84, 26, 52, 28, 93, 23, 123, -106, 110, -4, 62, 7, 124]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[122, 76, 85, 46, -97, 26, 41, 52, 121, 95, 118, 67, -96, -80, -10, 11]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[38, -46, 83, -35, -100, -93, 57, -28, -8, -76, -33, -17, 19, 125, 85, -36]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[126, -122, 34, -116, -45, -79, -99, -68, 72, -91, -52, -70, -34, -63, 40, -117]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey78);
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[112, 44, 92, -46, -4, 16, 115, 122, 11, -127, 51, -104, 115, 104, -44, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[15, 48, -110, -26, 86, -85, 95, -41, 102, -44, -102, -92, 78, 12, -32, -115]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-19, -56, -56, 75, 56, 85, 123, 82, 74, 72, -109, -97, 118, -63, -48, 111]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[112, 44, 92, -46, -4, 16, 115, 122, 11, -127, 51, -104, 115, 104, -44, -1]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-19, -56, -56, 75, 56, 85, 123, 82, 74, 72, -109, -97, 118, -63, -48, 111]");
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("76B6C9460E19133E83C714B4E6062601", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("C718B4A2C36E882A21FF0D9AFADE2A77", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-97, -119, -91, -110, 3, 51, -2, -41, -19, 77, -38, -97, 126, 91, -57, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-88, -34, -5, -36, 124, -101, 5, -69, -78, 75, -50, -102, -28, -120, -89, 8]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[48, -32, -11, 79, 33, -49, 5, -37, 93, 22, -85, -2, 97, 90, -111, 107]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[23, 38, -21, 13, -5, 116, -69, 18, 4, 90, 36, 82, 80, 111, 126, 126]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-35, -81, 72, -31, 84, -39, -100, -91, 75, 42, -115, 91, -23, -117, -86, 110, -72, -118, -44, 58, -56, 111, 94, 107, 34, -34, -81, -9, -73, -113, -34, -110, 48, -32, -11, 79, 33, -49, 5, -37, 93, 22, -85, -2, 97, 90, -111, 107]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, 83, -92, 47, -45, 94, -111, -108, 110, -8, 124, 90, 47, 110, -6, -91, 0, 106, -118, -99, -13, 101, 9, -58, -69, -25, -54, 76, 94, -37, -47, 84, 48, -32, -11, 79, 33, -49, 5, -37, 93, 22, -85, -2, 97, 90, -111, 107]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-86, -24, 79, 53, -21, -22, 31, -81, -18, 53, -115, 117, 71, 25, -96, 95, 37, -17, -55, -100, -80, 26, 17, 13, -102, -36, 40, -105, 70, 14, 24, 24, -85, -32, 122, -70, 114, 49, 43, 64, -2, -117, 63, 93, -10, 98, -60, 98, 64, 40, -113, 12, -128, -62, 59, 42, 18, 32, -89, 19, -44, 27, -39, 89, 26, -106, 3, -110, 66, -116, 125, 15, -90, 36, 111, 22, 114, -85, 49, 79, -71, -37, 103, -93, -30, -114, 55, -26, 30, 67, -17, 55, 89, 21, 19, -119, 48, -32, -11, 79, 33, -49, 5, -37, 93, 22, -85, -2, 97, 90, -111, 107]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-9, -108, -58, -81, 1, -99, 52, 29, -27, 79, -80, -61, -76, 23, -80, -70, 72, -50, 67, 70, -33, -28, 10, -7, 94, 86, 95, 42, 124, 8, 80, -36, -100, 124, 21, 114, 64, -23, -56, 48, 97, -117, -46, -12, 21, 29, -120, 45, -84, 87, -13, 7, -86, 49, 36, -97, -122, -12, 119, -109, 0, -11, 16, -111, -29, -56, -110, -116, 117, -82, -95, 110, 105, -3, 114, -89, 120, 92, 93, -33, 116, 15, -10, -59, -77, 34, -76, 98, 105, 32, 107, -89, 82, 113, -125, -127, 48, -32, -11, 79, 33, -49, 5, -37, 93, 22, -85, -2, 97, 90, -111, 107]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[110, 124, 109, -39, 92, 117, 9, -2, 119, 48, -64, -30, -23, -101, -76, 9, -39, -53, 22, 78, -105, 102, 58, 28, 80, -58, -108, 113, 72, 15, 99, 54, 48, -32, -11, 79, 33, -49, 5, -37, 93, 22, -85, -2, 97, 90, -111, 107]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey25);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        java.lang.Class<?> wildcardClass36 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[36, 76, -53, -40, 87, 12, -3, -11, 117, 0, 95, 126, -56, 110, 42, -74]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[105, -102, -52, 123, 12, 76, 82, 77, -45, 18, -87, 52, 111, 98, 67, 68]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[126, -56, 4, 76, 5, 36, -1, 107, 30, 67, -94, -13, -104, -53, -24, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-114, -35, 9, -30, -73, 29, -26, -36, 65, -58, 123, 122, -91, 75, 109, -118]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-128, -61, 66, 70, 29, -2, -73, 2, 39, -27, -73, 103, 100, 39, -21, 109, 27, -110, 116, -42, 20, -125, 56, -45, -73, 51, -125, -87, 125, 108, -31, -58, 126, -56, 4, 76, 5, 36, -1, 107, 30, 67, -94, -13, -104, -53, -24, 61]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[107, 47, -45, -100, 58, 118, 80, -15, -58, 1, -93, -66, -115, -65, -103, 125, -49, -12, 18, -24, -122, -16, -54, -87, 25, -60, -46, -51, -126, -21, -122, 43, 126, -56, 4, 76, 5, 36, -1, 107, 30, 67, -94, -13, -104, -53, -24, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[96, -40, -83, 1, -78, 94, 53, -120, 36, -13, -84, 7, -32, 93, 40, 1, -47, -13, 16, 105, 67, -66, -118, -23, 121, 61, -39, -59, 116, 72, 79, 33, -51, 41, 58, -90, 108, 57, 108, 24, 30, -100, 4, -35, 29, -74, 70, 41, 12, -42, -8, 6, -45, 103, -100, 68, 80, 23, 86, 86, -72, 10, -87, 64, 34, 7, -36, -48, -24, -35, -80, -117, -58, 3, -27, 126, 19, 14, -99, -85, 49, 1, 3, 9, -101, -111, -33, 75, 21, -63, 22, 43, 106, -81, -101, -6, 126, -56, 4, 76, 5, 36, -1, 107, 30, 67, -94, -13, -104, -53, -24, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-82, 6, -65, 96, -21, -75, -68, 26, 104, 120, 44, -46, 69, -4, 52, 115, 13, -51, -109, -119, -84, -40, 101, 53, 123, 19, -69, -126, 104, -116, 92, 24, 126, -56, 4, 76, 5, 36, -1, 107, 30, 67, -94, -13, -104, -53, -24, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-24, -64, 38, -16, 52, -12, 27, 74, 34, 70, -59, -110, 24, 38, -127, 120, -39, -17, -94, 37, -117, 123, -42, 58, 32, -73, 116, 57, 75, 58, -82, -81, -10, 86, -38, -29, 116, 97, -19, 59, -128, 37, 0, -127, 64, -121, -77, -101, -60, 37, -125, -86, 56, 120, 73, 19, 56, 44, -61, -100, -46, 56, 50, -34, 31, 81, -119, -60, -24, 1, -78, -12, -7, 94, -53, 40, 33, 104, -127, -105, -64, -84, 96, -91, -65, 93, -64, -57, -91, 83, 121, 101, 102, 66, 10, 126, 126, -56, 4, 76, 5, 36, -1, 107, 30, 67, -94, -13, -104, -53, -24, 61]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey47);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey57);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey68);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey68);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey68);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey68);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey68);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey68);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-74, 99, 12, 57, 24, 50, -110, -50, 55, 25, -111, 124, -29, 17, -20, 91]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[80, -92, 59, 27, 93, -97, 53, 62, -105, 119, -25, -126, -32, -9, -88, 39]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[80, -92, 59, 27, 93, -97, 53, 62, -105, 119, -25, -126, -32, -9, -88, 39]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[51, 52, 86, 59, 125, -95, -125, -122, -57, -1, -111, -87, 82, 87, 45, -117]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[80, -92, 59, 27, 93, -97, 53, 62, -105, 119, -25, -126, -32, -9, -88, 39]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-121, -9, -64, -63, -95, -58, 99, -121, 108, -21, -25, -43, 14, -60, 92, -39, -35, -10, 28, -23, 78, 33, 53, 89, 73, -115, -24, -122, -40, 75, -65, 97, -30, 125, 29, 59, -96, -80, 71, 82, -37, -5, -80, -90, 63, -48, 14, -51, -43, -78, -114, -54, 29, -89, 110, 83, -3, 84, -57, -52, 39, -65, -2, 39, 125, 17, 126, 112, 107, 14, 13, -34, 31, -93, 36, -11, 18, -5, 93, -23, 6, -96, 115, -50, 23, -54, -97, -3, -77, 96, -104, -55, 62, -111, 62, -124, -74, 99, 12, 57, 24, 50, -110, -50, 55, 25, -111, 124, -29, 17, -20, 91]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "87F7C0C1A1C663876CEBE7D50EC45CD9DDF61CE94E213559498DE886D84BBF61E27D1D3BA0B04752DBFBB0A63FD00ECDD5B28ECA1DA76E53FD54C7CC27BFFE277D117E706B0E0DDE1FA324F512FB5DE906A073CE17CA9FFDB36098C93E913E84B6630C39183292CE3719917CE311EC5B" + "'", str13, "87F7C0C1A1C663876CEBE7D50EC45CD9DDF61CE94E213559498DE886D84BBF61E27D1D3BA0B04752DBFBB0A63FD00ECDD5B28ECA1DA76E53FD54C7CC27BFFE277D117E706B0E0DDE1FA324F512FB5DE906A073CE17CA9FFDB36098C93E913E84B6630C39183292CE3719917CE311EC5B");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "87F7C0C1A1C663876CEBE7D50EC45CD9DDF61CE94E213559498DE886D84BBF61E27D1D3BA0B04752DBFBB0A63FD00ECDD5B28ECA1DA76E53FD54C7CC27BFFE277D117E706B0E0DDE1FA324F512FB5DE906A073CE17CA9FFDB36098C93E913E84B6630C39183292CE3719917CE311EC5B" + "'", str14, "87F7C0C1A1C663876CEBE7D50EC45CD9DDF61CE94E213559498DE886D84BBF61E27D1D3BA0B04752DBFBB0A63FD00ECDD5B28ECA1DA76E53FD54C7CC27BFFE277D117E706B0E0DDE1FA324F512FB5DE906A073CE17CA9FFDB36098C93E913E84B6630C39183292CE3719917CE311EC5B");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-37, 28, 64, 95, -56, 69, 45, 111, -36, 6, -60, -105, 44, -74, -100, -17]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-104, -125, -60, 78, -74, -31, 115, -27, -17, 122, 126, 122, -29, 20, 58, 99]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[82, -128, 17, -125, -40, -111, 52, 15, -125, -94, -72, 96, 48, -10, -22, -40]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[60, 79, -6, 85, -102, 84, 11, -20, 2, 121, 13, -48, -61, 21, -51, 21]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-83, -2, 84, -51, -105, -79, -97, 79, -103, -33, -24, 74, -38, -121, 3, -103]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-28, 89, 121, 2, -121, 124, -59, 86, 4, -3, 43, -56, -35, -59, -47, -87]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-27, -88, 24, 46, -33, 48, -45, 86, -79, -15, 81, 59, -84, -109, 90, -116]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[70, -14, 77, -31, -37, 98, 45, -117, 17, 124, -16, 114, -30, 11, 49, -98]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-64, -5, 116, -102, 107, -27, -104, -97, 126, 45, -101, 14, 46, -75, -85, -103]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-104, -122, 22, -15, -15, -40, -52, 21, 63, -44, -1, -8, -17, 110, -26, -66]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-85, -118, -104, 29, 10, -38, -104, -80, -99, 5, 17, 44, 5, -57, -44, -22]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-64, -5, 116, -102, 107, -27, -104, -97, 126, 45, -101, 14, 46, -75, -85, -103]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[37, 15, 51, -55, 41, 0, 103, 5, 111, -127, -51, 85, -59, -108, -65, 78, -42, -88, 89, -123, 57, 30, 98, -25, -53, 118, 16, -28, 94, -27, -82, 96, 11, -52, -48, -115, 98, 50, -89, -84, 58, 106, -59, -81, -60, 22, 62, -48, -94, 121, -124, -115, -43, 72, -28, -30, -118, -83, -34, 61, -122, -26, 94, -112, -15, 52, -99, 1, -121, 76, 16, -96, -54, -4, -5, 78, -106, -43, -92, 96, 26, -22, -49, 85, 33, -64, 127, -23, -100, 13, -61, -40, -109, -111, 57, -20, -64, -5, 116, -102, 107, -27, -104, -97, 126, 45, -101, 14, 46, -75, -85, -103]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-60, 90, 58, 71, -37, 100, 41, 40, 82, 62, -110, -88, -42, -14, 125, -128, 29, -91, -111, 45, -61, -124, -5, -125, 117, -108, 13, 110, 25, 72, -72, -27, -12, 3, -66, -84, -45, 44, 93, 42, 84, 27, -66, 66, 91, -109, 93, 31, -63, -54, 117, -74, 74, -27, -6, -38, 65, -114, 21, -73, -23, -48, 96, -52, 72, -12, -90, 16, -81, -65, 110, 2, 37, 38, 113, 32, -72, -63, -97, -121, 34, -53, 39, -19, 61, 80, 123, -61, 70, 38, -65, -36, -13, 114, -13, -82, -64, -5, 116, -102, 107, -27, -104, -97, 126, 45, -101, 14, 46, -75, -85, -103]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[124, -123, -126, -74, -10, -71, -93, 31, -5, 20, 36, 26, -22, -40, 68, 96, 94, -108, 38, -52, -13, 6, -64, -61, -106, -48, 105, 87, 1, -60, -61, -55, 116, -15, -64, 13, 77, -45, -50, 41, -88, -124, -124, 0, 43, 54, -70, -26, 19, 66, 7, -106, -127, 97, -58, 55, 31, 72, 40, -125, 52, 78, 9, 17, -117, -10, -14, 24, 104, 14, -91, -36, 108, -22, 115, -76, -16, -68, -55, 103, 27, -79, 33, 61, -57, -116, 88, 80, 16, -80, -125, 18, 8, -84, 21, -34, -64, -5, 116, -102, 107, -27, -104, -97, 126, 45, -101, 14, 46, -75, -85, -103]");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-97, -37, 84, -13, 17, 98, -99, -6, -30, 9, -102, -128, -58, 106, -48, -69]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, -88, 84, 49, 14, 32, 66, -89, -74, 24, -45, -114, 125, 89, -33, 30]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[88, 110, -12, -21, -53, -87, 114, -76, 115, -5, -74, -57, 30, -70, -75, -5]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-97, -37, 84, -13, 17, 98, -99, -6, -30, 9, -102, -128, -58, 106, -48, -69]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-107, -10, 118, -14, -22, -33, 105, -53, -5, 49, -44, -128, 105, -41, -72, 116, 47, -101, 39, -42, 59, -53, -120, -20, -59, 5, -111, 102, -8, 100, -38, -42, -97, -37, 84, -13, 17, 98, -99, -6, -30, 9, -102, -128, -58, 106, -48, -69]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -100, -62, -92, 6, 67, 64, -35, 106, 85, -48, -51, -127, 37, 58, -128]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[106, 114, -99, -27, -9, 86, 37, 127, -106, -101, 82, -53, 119, -2, 33, -109]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 97, 4, -100, 47, 73, 47, 22, -39, 4, -62, -25, -109, -49, 16, -117]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-12, -24, -61, 127, -87, -14, -75, 7, -7, 23, 22, 80, 120, 45, -102, -59]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-11, 121, 36, 28, -43, -127, 97, -46, 6, 21, 28, 85, -19, 11, 7, 16, -47, -33, -78, 15, -27, 21, -16, -111, 33, 48, -52, 95, -39, -115, 92, -89, 47, 97, 4, -100, 47, 73, 47, 22, -39, 4, -62, -25, -109, -49, 16, -117]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[63, -82, 2, 26, -94, 99, -39, -27, 8, 10, 81, 26, -107, -9, 1, -122, 102, -113, -108, -35, 24, 50, 99, 42, 65, -40, 95, 47, -118, -82, -87, 25, 43, 111, 14, 20, 76, 4, -50, 91, 93, 111, -91, -70, 57, 78, -81, -97, -19, -58, 93, 112, 124, -90, 6, 36, 111, 96, 1, -73, -99, -66, -102, 2, -108, 45, -88, 97, -41, 49, -19, -97, 73, 54, 89, 120, -116, -109, -90, 92, -92, 86, -68, -119, 45, -82, -47, 98, -123, -8, 39, 19, 13, 72, -64, -106, 47, 97, 4, -100, 47, 73, 47, 22, -39, 4, -62, -25, -109, -49, 16, -117]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[63, -82, 2, 26, -94, 99, -39, -27, 8, 10, 81, 26, -107, -9, 1, -122, 102, -113, -108, -35, 24, 50, 99, 42, 65, -40, 95, 47, -118, -82, -87, 25, 43, 111, 14, 20, 76, 4, -50, 91, 93, 111, -91, -70, 57, 78, -81, -97, -19, -58, 93, 112, 124, -90, 6, 36, 111, 96, 1, -73, -99, -66, -102, 2, -108, 45, -88, 97, -41, 49, -19, -97, 73, 54, 89, 120, -116, -109, -90, 92, -92, 86, -68, -119, 45, -82, -47, 98, -123, -8, 39, 19, 13, 72, -64, -106, 47, 97, 4, -100, 47, 73, 47, 22, -39, 4, -62, -25, -109, -49, 16, -117]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-99, -22, -52, -2, 89, 5, -46, 110, 119, 25, 17, 58, -5, 78, -111, -96, -33, 23, 14, -38, -107, 29, 33, -45, -62, -46, 9, 42, 4, 12, -56, -128, 47, 97, 4, -100, 47, 73, 47, 22, -39, 4, -62, -25, -109, -49, 16, -117]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[37, -90, -90, -21, 35, -80, 16, -95, -30, -41, -41, -3, -11, 121, -100, 95, 105, -116, -69, -17, -94, 22, -38, -88, -53, 110, 37, 66, 54, -28, 51, -90, 47, 97, 4, -100, 47, 73, 47, 22, -39, 4, -62, -25, -109, -49, 16, -117]");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass46 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[61, -65, -95, 111, -54, 66, 23, 20, 58, -43, 93, -80, -51, -115, -87, 24]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, -2, -73, -53, -14, -40, 22, -8, -63, 102, -29, 19, -40, 72, -104, -66]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122, 22, 89, 111, -125, 123, -84, 110, -114, -104, -77, -36, -60, 53, -100, -12]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-81, 18, 52, -43, 21, -101, 110, -25, -81, 2, -108, 21, 96, 24, 54, 84]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-64, -18, 47, 86, 35, 94, 54, -28, 56, -21, 34, -125, -61, 48, -53, -65]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[81, 87, -52, -31, -110, -52, 14, 6, 72, 107, -7, 111, 110, 51, 11, -10, 86, 125, -53, 97, -30, -103, 92, -38, 72, -20, -43, -117, -1, 41, 46, -34, -81, 18, 52, -43, 21, -101, 110, -25, -81, 2, -108, 21, 96, 24, 54, 84]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[82, 62, -124, 61, 124, -88, 107, 39, -25, -41, 49, 107, -123, -73, 7, -121]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-96, 0, 54, -78, 9, 113, 73, 20, 114, -4, 52, 127, 55, 82, -27, 28]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        byte[] byteArray0 = null;
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[9, -37, -51, 40, 93, -93, -35, 85, -64, -4, -25, 124, -33, 27, -7, -54]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-26, 46, 112, 52, -54, -111, 121, 80, -87, 10, -56, 125, 95, 121, 15, -39]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-123, 65, -124, 48, -36, 41, -82, -100, -85, -95, -106, -42, -75, -93, -49, -15]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[91, 65, -68, -104, -84, 10, -15, -101, -122, -76, -14, -16, -55, -49, -13, -87]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-8, 69, -35, -85, -12, -107, -62, 35, 74, -57, -8, 110, 109, -60, 54, -69, 76, 29, 58, 48, -83, -22, 7, 125, 14, -49, 87, 107, -88, 77, -128, -95, -123, 65, -124, 48, -36, 41, -82, -100, -85, -95, -106, -42, -75, -93, -49, -15]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-123, 65, -124, 48, -36, 41, -82, -100, -85, -95, -106, -42, -75, -93, -49, -15]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[126, -1, -48, -98, -67, 15, -48, -90, 103, -33, 91, 72, 34, 108, -34, -53, 14, 88, 89, 6, 122, -82, 100, 98, 76, -23, -126, -60, 11, -56, 16, 75, 123, 69, -76, -47, 64, -30, 9, 113, 28, 77, 96, 126, 60, 84, -98, 112, -9, -31, 74, -1, -4, 19, -95, 17, 16, -84, -4, -85, -10, 54, -12, -3, -102, -90, -26, -16, -119, 111, 4, 70, -25, -10, -31, -2, -46, 69, 68, 30, -107, 46, -93, -65, -22, 6, 33, -125, -101, -21, 126, 35, -110, 28, -115, -28, -123, 65, -124, 48, -36, 41, -82, -100, -85, -95, -106, -42, -75, -93, -49, -15]");
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey22);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[13, 59, 44, 115, -27, -64, 53, -7, 111, 118, -57, -102, 44, 29, 111, -30]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-19, 111, -93, 60, 36, -58, 32, 95, 31, -69, 43, 99, -111, 12, 52, -29]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-19, 111, -93, 60, 36, -58, 32, 95, 31, -69, 43, 99, -111, 12, 52, -29]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[113, 111, 10, 53, 51, 92, -88, -12, 40, -81, 98, 60, -55, -49, 50, -35]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 59, 44, 115, -27, -64, 53, -7, 111, 118, -57, -102, 44, 29, 111, -30]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 36, -96, -58, 108, 53, -82, 58, 106, -122, -4, 74, -112, -6, -20, -78, -44, 22, 75, 113, 9, -25, -45, -82, 55, 7, -34, 106, 34, -120, -51, 36, -14, 125, -65, -15, -56, 36, 55, 99, 67, -12, 84, -11, 60, -35, 111, 18, -35, 49, 78, -46, 94, -90, -107, 39, -83, -59, 99, 91, 26, -76, 113, 18, 120, 102, -91, 82, -124, -43, -16, 104, -18, -104, -117, -100, -35, 118, -47, -6, -74, -52, 28, -46, 18, 25, -11, -38, -59, -78, -25, -63, 96, -60, -37, 31, 13, 59, 44, 115, -27, -64, 53, -7, 111, 118, -57, -102, 44, 29, 111, -30]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, 59, 44, 115, -27, -64, 53, -7, 111, 118, -57, -102, 44, 29, 111, -30]");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-19, -62, -22, -34, -53, -117, -92, -1, 89, -50, 78, -106, -49, 56, -81, -124]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-78, -72, 82, -101, 90, -10, 110, -93, -63, 3, -46, 110, 59, 92, 76, 117]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-78, -72, 82, -101, 90, -10, 110, -93, -63, 3, -46, 110, 59, 92, 76, 117]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-71, 85, 83, -47, -117, 68, -75, -104, -122, -49, -33, -86, 48, -31, 33, -76]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-19, -62, -22, -34, -53, -117, -92, -1, 89, -50, 78, -106, -49, 56, -81, -124]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[21, 13, 14, 119, 57, 47, -33, 121, -59, 85, -75, 59, -39, -59, -22, 89, 0, -111, -9, -76, 66, -2, 22, -73, -56, -59, -93, -73, -38, 125, -96, 65, -81, 96, -65, -33, 11, -43, 19, -30, -38, -28, -122, 64, -112, -28, -69, -95, 22, 77, -61, -17, -10, 8, -50, 111, 12, 64, -115, 108, 58, 12, 103, 21, 81, -127, 45, 126, 107, -49, -51, 69, -102, -105, -27, 29, -54, 6, 90, 106, 75, -76, -48, -118, -89, 79, 26, 91, -7, -30, -66, -88, 16, 111, 55, -11, -19, -62, -22, -34, -53, -117, -92, -1, 89, -50, 78, -106, -49, 56, -81, -124]");
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey29);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey29);
        java.lang.Class<?> wildcardClass38 = byteArray37.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-23, 20, 99, 41, -103, -24, -21, -106, 63, 35, -104, -42, -67, -65, -12, 124]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-124, -8, 59, 94, -83, -80, 12, 115, 12, 21, -114, 7, 65, -71, -28, -3]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[66, -61, 7, 50, 9, 107, 57, -56, 99, -29, 74, -55, 106, 71, -79, 34]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-118, 108, -128, -87, 16, -17, -67, 2, 1, -11, 106, -19, -2, -101, -124, -77]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[120, 91, -35, -71, -34, 51, 49, 73, 4, -32, -19, -88, 81, 104, 85, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-26, -6, 44, 126, -5, 48, -121, 18, -15, -75, -54, -65, 116, 34, -57, -7]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[63, 56, -102, 46, 84, -3, 13, -47, 91, -66, 110, 92, -94, -19, 46, 93, 23, 27, -4, 109, -88, 56, 94, 119, -30, -26, -100, 65, 86, -95, 58, -115, 120, 91, -35, -71, -34, 51, 49, 73, 4, -32, -19, -88, 81, 104, 85, 48]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[39, 89, -90, -26, -61, -72, -127, -9, -45, -37, -33, 53, -31, 98, 94, 82, 38, -45, -94, 83, 20, -14, -13, 109, 77, 82, -73, 64, -118, 52, 124, -125, 120, 91, -35, -71, -34, 51, 49, 73, 4, -32, -19, -88, 81, 104, 85, 48]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-110, 92, -90, 16, -62, -97, 5, 40, 68, -26, -28, -57, -68, 14, 59, 22, 49, 58, -14, 25, -13, -68, -116, -73, 82, -72, -63, -45, 67, -49, -71, 71, 120, 91, -35, -71, -34, 51, 49, 73, 4, -32, -19, -88, 81, 104, 85, 48]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.Class<?> wildcardClass33 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[105, -97, -84, -42, -39, 87, -110, -121, 95, -15, -119, -93, -4, -128, 57, -127]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-49, -76, -70, 72, -15, 44, 71, -45, 45, -127, 92, -56, 125, 105, -67, -71]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 107, -93, 71, -3, 113, 31, 38, -103, -118, 14, 78, 102, 122, 74, -94]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[65, -54, 50, 68, -102, -30, 55, 114, -95, -52, -82, -58, -97, 106, -128, 94]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[18, 33, 114, -89, -64, -24, -7, 106, 36, -71, -54, 29, -56, -33, -2, 109, -124, -25, -113, 103, 65, -22, -99, -94, -93, 13, -111, -106, -41, -98, -57, -67, 97, 107, -93, 71, -3, 113, 31, 38, -103, -118, 14, 78, 102, 122, 74, -94]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-93, 98, 27, -120, -44, 68, -25, 79, 65, 73, -1, 112, 122, 21, -47, -61, 26, 113, 26, -72, 83, 66, 50, 68, -123, -6, 63, 54, -29, 44, 103, -27, 97, 107, -93, 71, -3, 113, 31, 38, -103, -118, 14, 78, 102, 122, 74, -94]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[97, -105, -74, 4, -91, -20, 75, -1, -54, 59, -57, -53, -65, -110, -41, 107, -82, 99, 27, -77, -50, 67, 54, -99, -45, 0, -66, -63, 47, -64, -53, 89, 113, 63, -88, -8, 69, 42, 18, -12, -107, 19, -112, -114, 81, 45, -3, -79, -83, 82, -41, 36, 72, 97, 100, -119, -7, 27, 62, 119, 42, 73, 109, -113, -47, 58, -100, 29, 67, 87, 1, -36, 5, -54, -124, -102, -46, 27, -29, 54, -14, -32, 22, 106, 97, -32, -122, 54, -125, -44, -112, -96, -66, -53, -10, -90, 97, 107, -93, 71, -3, 113, 31, 38, -103, -118, 14, 78, 102, 122, 74, -94]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-92, 69, -13, -109, -2, 45, 38, 49, 82, 42, 25, 61, 0, 34, 62, 2, 15, 50, -23, 43, 55, 17, 126, 42, -58, -113, -46, 106, 127, 103, -101, 10, 97, 107, -93, 71, -3, 113, 31, 38, -103, -118, 14, 78, 102, 122, 74, -94]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[61, -65, 54, -2, 46, 31, -38, 127, -68, 86, 64, 116, 83, -42, -69, 126, 70, 23, 98, 26, 46, 15, -23, -81, -98, -22, -26, -79, 20, 54, 77, 78, 124, 61, 33, 87, 89, 14, -42, 111, -62, -67, -48, 127, -21, -53, -52, -54, 58, -112, 121, 101, 93, -100, 56, -64, 13, -67, 64, -85, -11, 8, -6, 19, -57, 70, -38, -35, 90, -26, -63, -14, 5, 47, 24, 84, -67, -119, 103, 77, 78, -10, -105, -100, 5, -38, 10, 104, 55, 12, 116, -116, 29, 75, 18, 4, 97, 107, -93, 71, -3, 113, 31, 38, -103, -118, 14, 78, 102, 122, 74, -94]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, -54, 50, 68, -102, -30, 55, 114, -95, -52, -82, -58, -97, 106, -128, 94]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey31);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey31);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey68);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey68);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey68);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey68);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey68);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[61, 38, -52, 4, 18, 111, -40, -123, 66, -32, -81, 119, 65, -30, 2, -121]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[87, 37, 31, -127, -19, 20, 82, 16, -83, -93, -33, 52, 34, 104, -16, 48]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-68, -28, -87, -30, 53, 32, 73, 90, 38, -29, -55, -86, 66, 52, 2, 25]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-89, -88, -125, 119, -76, 61, 78, -127, 41, 106, -107, 52, 75, -5, -65, 92]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-84, -112, -35, 45, -102, 95, -73, 122, 56, 33, -79, -119, 107, -26, 21, -9]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, 78, -22, 63, -83, 68, -19, 2, -114, -46, 33, 103, 61, 95, 41, -57]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[9, -33, 96, -107, -32, 103, 94, -21, 34, -58, 96, 20, 96, 109, 115, -119, -98, 28, -89, 127, -44, -21, -58, 20, -29, -61, 39, -109, 36, 98, 125, 60, -84, -112, -35, 45, -102, 95, -73, 122, 56, 33, -79, -119, 107, -26, 21, -9]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[4, 86, 94, 71, 42, -98, -96, 1, 34, 86, 8, -115, -112, -1, 5, 122, -123, 44, 108, 2, -58, -102, 11, 44, 55, 100, -18, -19, 61, -54, -12, 120, -84, -112, -35, 45, -102, 95, -73, 122, 56, 33, -79, -119, 107, -26, 21, -9]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-58, 6, 72, 36, 0, 35, 91, 24, -32, 71, -64, -46, -47, -123, -29, -121, 126, 105, 65, -78, -10, -75, 6, 107, 15, 121, 51, 108, -30, 39, -14, -114, -21, -26, -65, 55, 21, 127, 69, -28, -92, 7, 93, 44, -87, 56, -107, 30, -3, 35, -4, -128, -43, -95, -105, 72, -58, -111, 121, 117, 55, 40, -59, 112, 84, -49, -118, 100, 68, -29, -32, -40, -113, 103, 23, 4, -83, -90, 38, -20, 89, -43, 99, 69, -71, 100, -107, 47, 31, 93, -85, -107, -65, 24, 68, 10, -84, -112, -35, 45, -102, 95, -73, 122, 56, 33, -79, -119, 107, -26, 21, -9]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-86, 48, -77, 24, -72, 18, -110, -100, -116, -83, -120, 22, 109, 50, -43, 6, -41, 98, -92, 79, -93, -10, 56, 122, 14, -36, 90, 77, -30, -46, 4, 39, -44, 55, -89, -104, -69, 50, 77, -45, -111, 14, 69, 116, -3, -18, -21, 123, 56, -100, -61, 113, 79, 122, 1, 40, -94, -114, -27, 68, 94, -44, 47, -56, -61, -37, 22, 81, 40, -101, -87, 57, -28, -126, -65, 61, 26, 15, -23, 48, 94, 28, -77, 18, 81, -121, -106, 103, -41, 99, 57, -19, 92, -115, -35, 92, -84, -112, -35, 45, -102, 95, -73, 122, 56, 33, -79, -119, 107, -26, 21, -9]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-124, 113, -101, -11, -33, -57, -74, 87, 100, -48, 94, 6, -74, 95, 42, -81]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[89, 74, -38, -56, -87, 7, -79, -111, -88, -43, -75, -8, -51, 68, -105, 105]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[89, 74, -38, -56, -87, 7, -79, -111, -88, -43, -75, -8, -51, 68, -105, 105]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-36, 6, -41, -80, 5, 52, 43, 119, -74, 23, -128, 72, 107, -104, -63, 12]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[89, 74, -38, -56, -87, 7, -79, -111, -88, -43, -75, -8, -51, 68, -105, 105]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[8, 11, -85, -43, -33, 79, 101, -22, -56, 60, 44, -45, -47, 83, 92, 101, 29, -128, -110, 98, 43, -127, 15, 24, -47, 93, 72, -12, -52, -32, -106, 63, -124, 113, -101, -11, -33, -57, -74, 87, 100, -48, 94, 6, -74, 95, 42, -81]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-18, -1, 69, -37, 8, -57, 44, -3, -61, 112, -104, -27, -12, 7, -7, -36, 91, 11, 102, -116, -1, -10, -78, -9, 53, 122, -79, 12, 93, 72, -107, 44, -113, -6, 29, -50, 83, -103, -45, -48, -71, 84, -43, 119, -125, -52, 15, 66, 9, 87, 84, -54, -63, -90, 46, 36, -24, -124, -98, 71, 99, -86, -101, -37, 44, -47, 92, -61, -94, 61, -58, -43, -84, 48, 118, -80, -96, -107, 90, 98, 115, 33, 81, -4, -108, -26, 11, -85, -18, -95, 108, -28, -64, -11, 62, 46, -124, 113, -101, -11, -33, -57, -74, 87, 100, -48, 94, 6, -74, 95, 42, -81]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        byte[] byteArray0 = null;
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[51, 25, 6, 101, -92, 63, -60, 103, 113, 115, 50, 119, -18, -115, 71, 67]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[123, 61, -89, 58, 76, 116, -126, -106, 38, -12, 102, -99, -27, 50, -10, 123]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[120, 95, -96, -9, -9, -18, -49, 112, -37, 40, 35, -39, -83, -53, -60, -60]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-8, 5, -127, 46, 114, -95, -77, 119, 109, 85, -90, 5, 114, 118, -88, 33]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-70, 74, -61, 35, 82, -48, -97, -32, 91, 77, 14, 94, -60, 46, 112, 119, 5, 66, 125, 32, 65, 68, 57, -105, -13, 30, 7, -114, -48, 101, -39, 67, 120, 95, -96, -9, -9, -18, -49, 112, -37, 40, 35, -39, -83, -53, -60, -60]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[91, -128, 6, -91, -13, 40, -120, 98, -55, 79, -22, 81, 58, 11, -27, -7, -39, 113, 86, 103, -2, 21, -39, -18, 15, 60, 25, -8, 114, 49, -15, 32, 120, 95, -96, -9, -9, -18, -49, 112, -37, 40, 35, -39, -83, -53, -60, -60]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-41, -87, 91, 20, 50, -50, 50, 67, -105, -52, -43, -98, -72, 89, 67, 94, 34, -6, -29, -81, -50, -119, 60, 25, 95, -86, 9, -87, -90, 39, -73, 62, -53, 18, -91, -87, -85, -19, -28, 27, 13, -28, 60, 127, 101, -123, -89, -128, 91, -86, 107, 74, 26, 66, -104, 73, -16, 56, -30, 48, -24, -124, 72, 89, 57, -111, -38, -43, 48, 120, -19, -86, 118, -97, -78, -81, -38, -35, 85, 64, 57, -6, -99, -1, 113, 91, -21, 32, -22, 91, -81, 81, 50, -112, 73, 13, 120, 95, -96, -9, -9, -18, -49, 112, -37, 40, 35, -39, -83, -53, -60, -60]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[108, -19, 44, 104, -116, 25, 84, 126, 11, -5, -123, 32, -50, -10, 13, -7, -1, -86, -96, 52, 24, 85, -56, 36, -111, 97, 116, -33, 118, 93, 99, 43, 120, 95, -96, -9, -9, -18, -49, 112, -37, 40, 35, -39, -83, -53, -60, -60]");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-21, 31, -16, -31, 66, -21, 92, 90, -56, -44, -97, -51, -43, 84, 17, -6]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-58, 67, -51, 30, 42, -96, -3, -13, -59, -84, 58, 14, 63, 45, -76, 84]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-102, 104, -122, 41, -29, -78, 57, 103, 86, -43, 124, 25, -124, 87, -123, -25, -71, 67, 69, -128, 60, -127, 18, -39, 58, 107, 103, -44, -18, -113, 127, 107, 104, -83, 8, -94, 88, 101, -50, -47, -75, -104, 116, -121, -74, -97, -9, 33, -98, -33, -83, 122, -90, 39, 50, 97, 65, 53, -34, 79, -79, 59, 5, -12, -50, -53, 73, 98, -99, -11, -74, 18, 102, -93, 42, -53, -30, 71, 88, -108, 23, -122, -38, -65, -74, -81, 45, -13, 103, -37, -38, -13, -115, 39, 44, 51, -21, 31, -16, -31, 66, -21, 92, 90, -56, -44, -97, -51, -43, 84, 17, -6]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-102, -3, -72, -52, 75, -44, 39, 14, -24, 111, 29, -128, -87, -76, 5, 104, 20, -70, 26, 18, -72, 46, 97, -68, -7, -101, 34, 63, 81, 16, 14, -49, -21, 31, -16, -31, 66, -21, 92, 90, -56, -44, -97, -51, -43, 84, 17, -6]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey58);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey58);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey58);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey58);
        java.lang.Class<?> wildcardClass66 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[89, 5, -41, 64, -125, -113, 90, -9, -30, 31, -66, -35, -8, 29, 9, 38]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-118, 117, -15, -125, 62, 33, -1, -60, -114, -19, 121, 32, -36, -119, 49, -31]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-7, -115, -104, 103, -31, 43, 63, -18, -30, -112, -109, 127, 112, 1, 26, -113]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, 52, -10, 58, 122, -18, -14, -108, 69, -122, 41, -15, -111, -7, -72, 69]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-71, 108, 56, -114, -99, 51, -21, -33, -37, 97, -13, 26, -70, 48, -35, 39]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[57, 51, -117, 9, -4, 30, 108, -120, 83, -52, -1, 4, -75, 89, 73, -108]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-117, -93, 112, -94, 86, 15, -76, -15, 120, -22, 66, -27, 32, 56, -59, -102]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-55, -47, -32, 33, -103, -23, 71, 120, -26, 74, -71, -14, 20, -30, -103, -68]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[88, 50, -73, -47, 88, -92, 23, 30, -46, 95, 96, 93, -67, 101, 51, 114]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, -20, -31, 2, 73, 118, -46, 103, 20, -60, -5, 27, -37, 8, -8, 94]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 119, 71, 80, -124, -68, 15, -85, 6, 61, -35, 79, -52, 97, 61, 56]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[79, -92, -59, 14, 74, 53, 28, 102, -25, -80, -38, 75, -45, -56, -71, -42]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[79, -92, -59, 14, 74, 53, 28, 102, -25, -80, -38, 75, -45, -56, -71, -42]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-92, 4, 28, 96, -108, -39, -128, 98, 107, -120, 2, -16, 122, -1, -44, -86, 102, -116, -109, -110, 14, 125, 117, 84, 34, 40, 114, -85, -105, 76, -113, -127, 1, 119, 71, 80, -124, -68, 15, -85, 6, 61, -35, 79, -52, 97, 61, 56]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.Class<?> wildcardClass33 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[126, 89, 65, 83, 70, -92, 40, -93, 44, 125, -10, -24, 58, 6, 26, -97]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-43, 27, -114, -80, -50, 73, -26, -6, 47, 5, 69, 76, 110, 63, 65, 89]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[41, -67, -20, -121, 8, -5, -82, 18, 15, 98, -120, -67, -114, 32, 16, -125]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[98, 13, 82, 46, 6, 38, -39, -5, 120, -66, 70, -114, -119, 24, 46, 117]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-33, -102, 12, 36, -94, 23, 37, 114, -120, -3, -77, 82, 39, 42, -26, -90, 111, 28, 4, -11, 33, -113, 68, 81, -63, -125, -27, -70, -37, 33, 121, -82, 41, -67, -20, -121, 8, -5, -82, 18, 15, 98, -120, -67, -114, 32, 16, -125]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-34, -76, -102, 105, -110, -4, -96, -51, -89, -36, -42, -68, -26, -39, -52, -67, -15, 8, 45, 105, -39, 11, -61, -128, 90, 2, -86, -60, -103, -38, -75, -6, 41, -67, -20, -121, 8, -5, -82, 18, 15, 98, -120, -67, -114, 32, 16, -125]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[82, 73, 82, -71, -121, 104, 85, -117, 77, -67, -18, 49, 106, 21, 47, 51, 50, 54, 121, 60, 81, -97, -15, -66, -50, 66, -80, 1, 51, 42, -95, -96, 116, -18, 112, 63, 62, 80, -43, 25, 61, 122, 43, 106, 104, 67, 95, 92, -92, -124, -3, 125, 127, -34, 83, -123, 90, -66, -86, 104, 102, 108, 10, -27, -20, 69, -118, 71, 33, -23, -92, 104, -19, -35, 24, -105, -15, 41, 26, 100, 127, -43, -32, 76, 64, 72, 89, 36, -113, -47, 20, -48, 43, -61, 93, -64, 41, -67, -20, -121, 8, -5, -82, 18, 15, 98, -120, -67, -114, 32, 16, -125]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-53, -10, 38, 71, -71, 48, 111, 19, 73, -120, -38, 27, 66, -5, -67, 16, 114, -45, -84, 48, 9, -44, 10, 109, 121, -55, 122, 76, 8, -116, 119, 24, 41, -67, -20, -121, 8, -5, -82, 18, 15, 98, -120, -67, -114, 32, 16, -125]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-36, -20, 98, -111, -61, -79, -46, 79, 106, -70, -35, 0, -58, -62, 100, 121, 81, 39, -96, -1, -95, -121, 36, 7, -62, 28, -26, 18, 4, -1, 126, -113, -88, -48, 14, 33, 115, 57, 1, -120, 100, 8, 111, -57, 28, 10, 28, -112, 65, 91, -28, 56, 1, -52, -11, 57, 87, 14, -102, -82, -8, -46, 94, 76, -105, -76, -36, 100, 11, -53, 125, 85, 79, -57, -27, 5, 99, -20, -116, 33, -126, -109, -11, -29, -7, -43, 101, -45, -97, 93, 14, 120, -115, 104, -77, -57, 41, -67, -20, -121, 8, -5, -82, 18, 15, 98, -120, -67, -114, 32, 16, -125]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[98, 13, 82, 46, 6, 38, -39, -5, 120, -66, 70, -114, -119, 24, 46, 117]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("508380463B279F88BA991D8C01E9AB5E82EA2F47BCDFDF38340DE16537E50CBBBE3C63E0ECF3A695148E403FF490F4BA58670B485C598323585595245B8C6C35D8AFBAB401419C791C4E639E987610A73A69713278CA83CD63054A23B242ACA507B8E14566EB5B8F765839A1B49AAE54", secretKey7);
        java.lang.Class<?> wildcardClass15 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[38, 75, 59, -18, 77, -64, -79, -94, 87, -52, 48, -43, -48, -92, 87, 27]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-110, 89, -30, 30, 122, 33, 49, -9, 105, -42, 40, -38, 63, -47, -115, 123]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-110, 89, -30, 30, 122, 33, 49, -9, 105, -42, 40, -38, 63, -47, -115, 123]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-104, 67, -61, 76, -57, 16, -85, -88, -58, -70, -37, -51, 61, -21, -72, -5]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[38, 75, 59, -18, 77, -64, -79, -94, 87, -52, 48, -43, -48, -92, 87, 27]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, -69, 9, -1, 10, -55, 94, -109, -75, -13, 85, 9, -83, 63, 23, -55]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-63, 22, -45, 116, 14, -115, 89, 83, -20, -22, 123, 0, 91, -105, -84, 87]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[84, -94, -41, 72, 123, -43, 95, 36, -103, 18, 36, 102, 81, 10, 115, -28]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 13, -19, 51, 4, -95, 98, 103, 90, -42, -116, 34, -77, -77, 48, 125]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-31, -110, 11, -23, 73, -24, -16, 25, 21, -44, -114, 105, 105, 106, 73, -115, -82, 107, 46, 92, -4, -93, -52, -117, 10, -91, -38, -42, -62, 9, -89, -19, 84, -94, -41, 72, 123, -43, 95, 36, -103, 18, 36, 102, 81, 10, 115, -28]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-104, 5, -125, 63, 28, -74, 34, 105, 22, -4, -62, 102, -126, -68, 31, 2, 95, 6, 102, 51, 126, 58, 104, -56, 65, 48, -113, 99, 43, 90, 122, 33, -26, 76, 38, 15, 119, -97, 61, -81, 38, -69, 70, -67, 127, -110, 71, -81, -90, -29, -26, 55, -17, -38, -21, 81, 81, -65, -15, -100, 115, 21, -126, 116, -30, 106, -25, -83, -123, -128, -46, -114, 18, -7, -69, 117, -120, 47, 10, 61, -42, 58, 59, 42, 20, 103, -27, -89, -97, -51, -45, 32, -1, 90, -117, -44, 84, -94, -41, 72, 123, -43, 95, 36, -103, 18, 36, 102, 81, 10, 115, -28]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-27, 34, 52, 74, -56, 97, 20, -108, -25, -98, -55, -99, -76, -8, 61, -11, -107, -86, 27, 50, -117, 51, 21, -120, -62, 11, -89, 90, 28, 105, -43, 29, 84, -94, -41, 72, 123, -43, 95, 36, -103, 18, 36, 102, 81, 10, 115, -28]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[84, -94, -41, 72, 123, -43, 95, 36, -103, 18, 36, 102, 81, 10, 115, -28]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-49, 24, 42, 6, -49, -46, -1, -92, -81, 13, -70, -40, -40, 65, -16, -70, -74, 17, 55, 18, 15, 60, 117, 95, -62, 104, -81, 63, -44, 73, -59, -97, 84, -94, -41, 72, 123, -43, 95, 36, -103, 18, 36, 102, 81, 10, 115, -28]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.Class<?> wildcardClass28 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[92, -105, -8, 56, 16, -128, -45, -80, 111, 26, 105, 30, 35, -8, 60, -67]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[81, 119, 5, 70, 67, 107, -16, -66, -75, 63, -2, -74, -52, -127, 33, 122]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[35, -101, 121, -62, -105, 104, 102, -64, -35, 3, 25, 0, -18, -98, 93, -26]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-58, -70, -112, 12, -114, 96, 111, -98, 30, -99, -75, 50, 5, 88, -30, 93]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[60, 59, 55, 41, -25, 6, 10, -13, 68, 106, -54, -31, 11, -72, 69, 64, -91, -16, 39, -106, 91, -12, -72, 56, -84, 46, -60, -67, -50, -55, 112, -52, 35, -101, 121, -62, -105, 104, 102, -64, -35, 3, 25, 0, -18, -98, 93, -26]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-108, 113, 91, 2, 18, -50, 39, 45, 20, 113, -51, -66, -68, -57, 39, 106, -60, -119, -37, 92, 21, 32, -19, 43, 123, -93, 19, -115, 126, -45, 95, -91, 35, -101, 121, -62, -105, 104, 102, -64, -35, 3, 25, 0, -18, -98, 93, -26]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-52, 38, 4, -94, -54, -119, -82, -72, 45, -57, -106, -15, 91, -8, 5, 33, -11, 114, -25, -35, -67, -119, 90, 7, -2, 77, -68, 22, 85, -80, -44, 13, -69, -81, -20, -39, 22, 113, -78, -4, 31, -60, -117, -34, -109, -112, 65, 106, -13, 16, -77, 50, 22, -94, -110, -22, -71, 35, 52, 45, 86, 114, 31, 112, 59, -75, 17, -46, -56, 104, -91, 65, -6, -97, 45, -115, 9, -14, 106, 56, -124, 112, 116, 36, -53, 45, -128, 29, 75, 73, 43, -54, -7, -123, -21, -23, 35, -101, 121, -62, -105, 104, 102, -64, -35, 3, 25, 0, -18, -98, 93, -26]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CC2604A2CA89AEB82DC796F15BF80521F572E7DDBD895A07FE4DBC1655B0D40DBBAFECD91671B2FC1FC48BDE9390416AF310B33216A292EAB923342D56721F703BB511D2C868A541FA9F2D8D09F26A3884707424CB2D801D4B492BCAF985EBE9239B79C2976866C0DD031900EE9E5DE6" + "'", str27, "CC2604A2CA89AEB82DC796F15BF80521F572E7DDBD895A07FE4DBC1655B0D40DBBAFECD91671B2FC1FC48BDE9390416AF310B33216A292EAB923342D56721F703BB511D2C868A541FA9F2D8D09F26A3884707424CB2D801D4B492BCAF985EBE9239B79C2976866C0DD031900EE9E5DE6");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey52);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        byte[] byteArray68 = new byte[] {};
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray68);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey70);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey74);
        byte[] byteArray78 = new byte[] {};
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray78);
        javax.crypto.SecretKey secretKey80 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray78, secretKey80);
        javax.crypto.SecretKey secretKey84 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey84);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey84);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray78, secretKey84);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey84);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey84);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey84);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey84);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey84);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey84);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey84);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-100, -85, 59, -82, 22, 91, 60, 17, 36, 83, 86, 36, -119, -84, -94, 95]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[101, 3, -37, 60, 119, -29, -103, 99, 20, 51, -40, 27, 89, 75, -54, -28]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[24, -79, -65, -63, -67, -25, -102, -121, -2, -41, -14, -125, -38, -5, 127, 26]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[5, 8, -66, -56, -90, -14, -59, -41, 1, 127, 74, 112, -9, 65, -19, -106]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-105, -116, -8, -70, 114, -38, -113, 125, 89, 64, -55, -91, 59, 101, 68, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[72, 114, 119, -38, -75, 126, 102, -34, -101, 38, -56, 97, 78, -62, -75, 93]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-42, 65, 64, 119, 57, -55, 86, -62, -90, 103, 117, 96, 33, -8, -93, 11]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[92, 33, -117, -102, -45, 58, 23, 16, 120, -4, 20, -62, -128, -127, 65, -116]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[18, -6, 31, -3, -109, 125, -57, -40, 113, -80, 98, -3, -95, -10, 22, 22]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-8, -77, -83, 109, 25, -73, -126, 110, 16, -8, -121, -38, -50, 86, 8, -111]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-2, -4, -57, 106, -91, -2, -62, 103, -54, -64, -34, 39, 109, 45, -42, 20]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[18, -6, 31, -3, -109, 125, -57, -40, 113, -80, 98, -3, -95, -10, 22, 22]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 27, -94, 11, 121, 71, -5, -33, -71, -41, -69, 22, 78, -55, -94, 37, 11, 65, 106, -24, 124, -40, -6, -16, -10, 7, 111, -39, -63, 73, 80, 77, -53, -28, -76, -29, 46, -71, 86, 115, -15, 125, 117, -120, 94, -38, 58, -99, -70, 79, 48, 78, -42, 121, -11, -115, 110, -8, 84, -127, -59, -76, -92, -45, -96, 13, 82, -105, 68, -111, 12, -3, -128, -25, 23, -84, 73, -17, 118, 96, 78, -47, -100, 127, -107, 93, -70, -21, -104, 25, 101, 3, 3, -59, -97, 19, 18, -6, 31, -3, -109, 125, -57, -40, 113, -80, 98, -3, -95, -10, 22, 22]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-95, 26, 124, 120, 66, 7, 4, -83, 78, -3, 125, -84, -108, -95, 28, 42, 103, 26, -115, 2, -76, 123, -99, 40, 15, -108, 78, 4, -40, -112, -60, 36, -21, -20, -113, 8, -62, 69, -101, 97, -37, 35, 88, 42, -29, -80, 44, 17, -41, 6, -34, -48, -11, 112, -103, 11, 77, -122, 79, 108, -58, -48, 18, -127, -70, -111, 117, -32, -35, 94, 2, 105, 21, 95, -1, -127, -73, -9, 114, -59, 48, 103, 5, 102, -58, -36, 61, 98, 38, -49, -119, 86, 123, 73, 49, -68, 18, -6, 31, -3, -109, 125, -57, -40, 113, -80, 98, -3, -95, -10, 22, 22]");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "A11A7C78420704AD4EFD7DAC94A11C2A671A8D02B47B9D280F944E04D890C424EBEC8F08C2459B61DB23582AE3B02C11D706DED0F570990B4D864F6CC6D01281BA9175E0DD5E0269155FFF81B7F772C530670566C6DC3D6226CF89567B4931BC12FA1FFD937DC7D871B062FDA1F61616" + "'", str61, "A11A7C78420704AD4EFD7DAC94A11C2A671A8D02B47B9D280F944E04D890C424EBEC8F08C2459B61DB23582AE3B02C11D706DED0F570990B4D864F6CC6D01281BA9175E0DD5E0269155FFF81B7F772C530670566C6DC3D6226CF89567B4931BC12FA1FFD937DC7D871B062FDA1F61616");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-128, -72, -55, -127, 16, 62, -6, 36, 14, 43, 14, 23, -94, 104, -104, -56]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-113, -12, -14, 96, 30, 121, 100, 18, 15, 31, -104, -87, 76, 55, -87, -96]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(secretKey80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey84);
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-71, -69, -36, 46, -39, 125, 40, -37, 89, 92, 109, 53, 67, 41, 30, -58]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-83, -128, 6, -121, -29, 89, 53, 120, 1, -63, -123, 37, -109, -62, 126, -35]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[55, -58, -79, 59, 11, 53, -76, -88, 83, 112, 2, -116, -25, 58, 37, -123, 36, -116, -17, 68, -8, -125, 88, -15, 76, 36, -23, -46, 111, 5, 37, 67, -71, -69, -36, 46, -39, 125, 40, -37, 89, 92, 109, 53, 67, 41, 30, -58]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[102, -51, 24, -90, 81, 103, 39, -14, 119, -4, 59, -108, -108, 118, -52, 39, 117, -79, -87, -22, -53, 24, 49, -107, -53, 57, -63, -35, 97, 33, -124, -44, -71, -69, -36, 46, -39, 125, 40, -37, 89, 92, 109, 53, 67, 41, 30, -58]");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-128, 34, 24, 44, 2, 106, 105, -61, 90, -104, 116, 45, -13, 102, -27, -18, 59, -111, 102, -50, 16, -27, 33, 50, -107, 116, -11, -70, 66, -121, 40, -41, -117, 85, 24, -37, -119, -128, 69, -79, -12, 33, 76, 7, -9, 105, 67, 117, -48, -89, -102, 47, -7, -48, 101, -88, -106, -47, 41, -37, 100, 58, -114, -15, 84, 30, 126, 69, -112, -122, 6, -43, 124, -45, 125, 29, 30, -115, 75, -81, -3, -20, -90, -73, -17, 56, -24, -9, 108, -31, -89, -66, -96, -92, -24, 75, -71, -69, -36, 46, -39, 125, 40, -37, 89, 92, 109, 53, 67, 41, 30, -58]");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-56, -68, -20, -4, 107, -40, 119, 64, 33, -1, 86, 7, -109, -63, 19, 118, 39, 8, 4, -35, -16, -19, -43, 51, -119, 117, -83, 52, 103, -7, -100, -84, -71, -69, -36, 46, -39, 125, 40, -37, 89, 92, 109, 53, 67, 41, 30, -58]");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-44, -22, -1, 127, 95, -116, -109, -97, 118, 39, -100, 110, -65, -100, 107, -19, -111, 76, -74, 19, 92, -6, -38, 47, -96, -14, 52, 106, 56, 68, 6, -88, -71, -69, -36, 46, -39, 125, 40, -37, 89, 92, 109, 53, 67, 41, 30, -58]");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-51, 81, -123, 117, 67, -50, -81, 51, -39, 103, -62, -8, 4, -126, 27, -73, 42, 97, -78, -25, -81, 97, 124, 5, 37, 87, -2, 10, -112, 29, -18, 29, 69, -53, 67, 111, 125, 38, -98, 70, -28, -97, 102, 20, 7, 50, 4, 104, 53, -101, -87, 24, 91, -18, 51, 48, 113, 9, 121, 15, -62, 8, -94, -13, 48, -123, 87, 36, 45, 122, 13, -39, 77, 127, -110, 41, 70, -15, -23, 66, 20, -77, 56, -123, -110, 56, -111, 65, -37, -121, -66, -2, -55, -120, 36, -15, -71, -69, -36, 46, -39, 125, 40, -37, 89, 92, 109, 53, 67, 41, 30, -58]");
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-11, -36, -89, 52, -93, -38, 50, 0, -126, -96, 62, 57, 113, -127, 103, -23]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-76, 115, -50, 25, -46, -96, -19, -96, 81, -27, 60, -112, -38, -75, -19, -47]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[113, 123, -32, 114, -86, -109, 56, 34, 62, -50, 112, -106, -84, 80, 8, -119]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-87, 6, 94, 13, -18, 20, -121, -113, 122, 44, -103, 7, 53, -2, -45, -77]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-37, -127, -23, 11, 72, -63, -89, -45, -125, -9, 124, -33, 81, -27, -84, -28, -23, -99, 105, -50, -40, -117, 108, -72, -78, -118, 25, 81, -91, 12, -45, 121, 113, 123, -32, 114, -86, -109, 56, 34, 62, -50, 112, -106, -84, 80, 8, -119]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 97, 82, -14, 58, 54, -43, -22, 102, -53, -122, 15, 11, -83, -57, -102, -53, -71, -58, -21, -46, 74, -92, 101, -64, 66, 83, -47, -101, 30, -7, 100, 4, -18, 5, -85, -85, -60, -22, 36, -2, 110, 125, -64, -15, 87, 124, -58, 108, 64, -54, -24, 100, -95, 33, -34, 77, 13, 57, 17, -41, 55, -115, -49, -86, -127, -122, -72, -124, -119, 35, -11, -122, -7, 115, -89, 74, 109, -48, -123, -87, -24, 57, -2, -41, 46, -95, -92, -74, 103, 37, -60, 107, -110, 35, 12, 113, 123, -32, 114, -86, -109, 56, 34, 62, -50, 112, -106, -84, 80, 8, -119]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[22, -76, -103, -70, -106, -106, 47, 53, 9, 46, 85, -25, -5, 121, -42, 54, -127, 45, -48, -13, -24, -82, 11, 56, 46, 51, -47, -45, -75, 117, 69, 65, 113, 123, -32, 114, -86, -109, 56, 34, 62, -50, 112, -106, -84, 80, 8, -119]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey4);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey47);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey47);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey58);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey58);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-15, -106, 76, -109, -63, -84, 107, -115, 82, -25, 21, 55, 65, 48, -111, 87]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-43, 1, 83, 83, 12, 49, 13, 29, -102, 11, 66, 77, 70, 51, 112, -84]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[4, 94, 17, 79, -23, 30, 78, 47, -92, -80, -30, 60, 67, 23, 22, -10, -123, 91, 12, 10, -75, -78, 66, 95, 27, 124, 58, -14, 62, -56, 67, -101, -15, -106, 76, -109, -63, -84, 107, -115, 82, -25, 21, 55, 65, 48, -111, 87]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-22, -107, -16, -1, 65, -80, -4, 43, 106, 39, -112, -82, -4, 87, -99, -24, -52, 38, -44, -96, -116, -94, 14, 29, 70, -93, -17, 119, -81, 16, -93, 49, -15, -106, 76, -109, -63, -84, 107, -115, 82, -25, 21, 55, 65, 48, -111, 87]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[66, 119, -117, 88, -81, 118, -64, -6, -46, 60, 20, 95, -92, -10, -39, -56]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-72, 57, 108, 95, 60, -31, 54, -79, -49, -72, -102, -126, -31, 65, 126, -71]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-22, -92, -54, 21, 104, 2, -32, -73, -18, -17, -70, 23, -101, -30, -62, 63]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[77, 106, -27, 11, 125, 13, 51, -126, -34, 65, -59, -58, -101, -46, -103, 93]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-19, -28, -15, 64, -110, -87, 109, -97, -73, 101, -1, 92, -116, 112, -3, 116]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[2, -106, -57, 103, -112, 93, -105, 17, 49, 72, 69, 112, -19, -9, 38, -96]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-68, 115, -41, -30, 10, 42, -126, 61, -65, -35, 122, 4, -40, 121, -32, -22]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[53, 31, 83, 38, -73, 42, 102, 40, -97, -112, 108, 46, -45, -118, 52, -46]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[93, -102, 102, 112, -124, -98, -72, 28, 73, -37, 21, -3, -112, -40, -94, -5, 67, -104, 59, -23, 15, 16, -64, 40, 15, -4, -38, -1, 0, 52, -41, -15, -68, 115, -41, -30, 10, 42, -126, 61, -65, -35, 122, 4, -40, 121, -32, -22]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[29, 93, 58, 69, 72, -121, -127, 119, 91, -105, 66, 75, 39, -85, 76, 70]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[25, 47, -119, -63, -36, -12, -47, -114, -105, -101, -65, -119, 75, -6, -17, -99, -35, -64, 77, -31, -48, -41, 10, 11, 60, -35, 111, -67, 53, -111, 66, -87, -110, -54, 62, -25, 97, 44, -78, 29, -78, -20, 91, -50, -51, 121, -90, -13]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey20);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey38);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey38);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey38);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey38);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[14, 49, 23, -91, 27, 117, 109, -101, -18, -6, -50, -36, 24, 10, 78, -33]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-113, 83, -126, 20, -31, -104, 94, 1, -76, -110, -97, -63, 98, -91, -40, 61]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-35, 25, 119, 95, -126, -1, 92, 125, 16, -87, -98, 49, 7, -25, -1, -99]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[71, 62, -40, 29, -110, -69, 34, -60, -74, 2, 79, -125, -20, -97, 108, 123]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[80, 121, -75, 62, 64, -66, -63, -71, 112, 107, -56, -13, 43, 74, 26, -96, -27, 29, 60, -53, 115, -60, -3, 100, 59, 9, -94, -107, 102, -91, -85, -108, -35, 25, 119, 95, -126, -1, 92, 125, 16, -87, -98, 49, 7, -25, -1, -99]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-80, -38, -104, -21, -61, 117, 93, 33, -15, -8, 71, -111, 51, -46, 95, -86, -51, -102, -33, 35, 41, -68, -57, 64, 16, -108, -113, -32, 71, 46, -60, 115, -117, -19, 123, -42, 95, 40, 20, -1, 106, -38, 104, -5, -97, 48, 64, -13, -57, 29, 126, 76, -25, 23, 30, -85, -111, 21, -102, 2, -113, 5, -92, 27, -37, 59, -128, 16, -119, -75, 34, 60, 96, 15, -45, -20, 90, 53, -9, -78, 57, 24, 81, -75, -121, -23, 27, -116, -108, 100, 68, 81, 30, 56, 45, -47, -35, 25, 119, 95, -126, -1, 92, 125, 16, -87, -98, 49, 7, -25, -1, -99]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-80, -38, -104, -21, -61, 117, 93, 33, -15, -8, 71, -111, 51, -46, 95, -86, -51, -102, -33, 35, 41, -68, -57, 64, 16, -108, -113, -32, 71, 46, -60, 115, -117, -19, 123, -42, 95, 40, 20, -1, 106, -38, 104, -5, -97, 48, 64, -13, -57, 29, 126, 76, -25, 23, 30, -85, -111, 21, -102, 2, -113, 5, -92, 27, -37, 59, -128, 16, -119, -75, 34, 60, 96, 15, -45, -20, 90, 53, -9, -78, 57, 24, 81, -75, -121, -23, 27, -116, -108, 100, 68, 81, 30, 56, 45, -47, -35, 25, 119, 95, -126, -1, 92, 125, 16, -87, -98, 49, 7, -25, -1, -99]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-73, -91, -21, -65, 10, 21, -109, 35, -65, -101, -50, -4, 25, -88, 46, -57, -93, 64, -93, -48, 40, -101, 98, 13, 79, 27, -63, 59, 91, 77, 42, 79, -35, 25, 119, 95, -126, -1, 92, 125, 16, -87, -98, 49, 7, -25, -1, -99]");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[57, -104, 75, -90, -1, -25, -120, 30, -26, -94, -32, -31, -76, -92, 38, -39]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-110, -31, -34, 75, -12, 114, -75, -89, -52, 71, 96, -120, 3, 116, -47, -126]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-110, -31, -34, 75, -12, 114, -75, -89, -52, 71, 96, -120, 3, 116, -47, -126]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[25, -57, -63, -26, 40, -99, -91, 56, -70, -101, -56, 0, 40, 64, -118, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-110, -31, -34, 75, -12, 114, -75, -89, -52, 71, 96, -120, 3, 116, -47, -126]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-83, -98, -81, -117, -70, 66, 43, -107, -92, -78, 25, -39, 28, 0, 69, -119, 77, -85, -125, -116, -72, 14, 31, -31, -70, -123, -106, 96, 120, -67, -13, -83, 57, -104, 75, -90, -1, -25, -120, 30, -26, -94, -32, -31, -76, -92, 38, -39]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[30, -91, 48, 54, -78, -56, -75, -25, 15, -40, 62, 14, -5, -48, -98, 49, 5, 40, 25, -95, -113, 81, 69, -97, 29, -104, -8, 57, 55, 112, -126, 73, 107, -49, 69, -36, -116, -35, -95, -83, -102, 95, -91, -115, -111, 77, 30, 78, -106, -107, -45, 120, -5, 56, -83, 38, 87, 118, 73, -124, 95, -65, -74, 57, -32, 44, 111, 102, -50, 27, 5, -117, -12, 37, -57, 96, 67, 122, 66, 58, -24, 56, 96, 9, 120, -126, -125, -87, 100, 113, 74, 29, -39, -29, -27, 65, 57, -104, 75, -90, -1, -25, -120, 30, -26, -94, -32, -31, -76, -92, 38, -39]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-97, -51, -60, 96, 113, -14, -32, -123, -28, 82, 16, 4, -25, -51, 108, 12, 56, 113, 100, 69, 61, 32, 37, -30, 123, 103, -94, 79, 0, -19, 79, -45, 86, 72, 125, -120, 43, 8, -126, 120, 116, -77, -90, 126, -51, -91, -41, 78, -64, 58, 93, -63, -23, -23, -108, -112, -118, -1, 103, -41, -49, 108, 28, 24, -123, -23, -34, 46, 94, 106, -56, -14, 9, -61, 11, 46, -112, 90, -47, -44, 21, 63, -20, -122, 96, 25, -51, -22, -57, -64, 52, -72, -105, -119, 47, 122, 57, -104, 75, -90, -1, -25, -120, 30, -26, -94, -32, -31, -76, -92, 38, -39]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-26, -11, 17, 68, 122, -85, 82, 49, 97, 62, 102, 30, -114, -115, 16, 75, -37, -78, 105, 105, 65, 48, 69, 47, -15, -98, -101, -121, 79, 12, -81, 124, 57, -104, 75, -90, -1, -25, -120, 30, -26, -94, -32, -31, -76, -92, 38, -39]");
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey18);
        java.lang.Class<?> wildcardClass21 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 71, -126, 107, 52, -45, 105, -72, 21, 48, -113, -36, -124, 66, -125, -41]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey7);
        java.lang.Class<?> wildcardClass13 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-81, -12, 59, -44, -108, 61, -103, 106, -33, -98, 74, -121, 122, 111, 113, -120]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-30, 126, -17, 72, 118, 25, -25, -64, 86, 32, -35, 122, -85, 68, -61, -11]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-30, 126, -17, 72, 118, 25, -25, -64, 86, 32, -35, 122, -85, 68, -61, -11]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-115, -62, -12, -89, 32, 1, 60, -10, 48, -43, 26, 95, 42, 118, -120, -109, 81, -54, -5, -16, 5, -61, 100, 99, 86, 121, -126, -76, -33, -31, 91, -126, -81, -12, 59, -44, -108, 61, -103, 106, -33, -98, 74, -121, 122, 111, 113, -120]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey3);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey25);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[28, -72, -64, 50, -37, -29, 81, -37, 43, -87, -110, 13, 9, -17, -108, 17]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[92, 49, 122, 77, -102, -6, 111, -47, -61, 83, 103, -128, 7, 94, 38, -20]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-41, -107, -26, 61, -32, 69, -57, -49, 84, 51, 119, -25, 10, 55, 83, -66, 6, 31, -96, -108, -103, -97, 121, 30, -79, 86, -27, -82, -70, 76, -88, -26, 28, -72, -64, 50, -37, -29, 81, -37, 43, -87, -110, 13, 9, -17, -108, 17]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 22, 117, 81, 47, 79, 74, 102, 50, -124, 115, -25, 84, 110, 111, 84]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-10, 26, -60, 50, 64, 7, 84, -113, 42, 69, 109, -21, 46, 16, 24, -71]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[15, -35, 108, 123, -91, -116, 23, 102, -36, 90, 83, 71, -57, -35, 25, -65]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-37, -110, 102, 90, -89, -71, -25, 82, 41, 96, 92, -99, -14, 101, -18, 120]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-98, 44, 27, 49, -86, 110, -105, -24, -94, -33, -6, 113, 65, -20, 101, -98, -50, -28, -117, -69, 100, -33, -102, -93, -83, 93, 16, -31, -121, 50, -96, -14, 15, -35, 108, 123, -91, -116, 23, 102, -36, 90, 83, 71, -57, -35, 25, -65]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-126, -128, 125, -33, 10, 69, 72, 59, 13, -22, 17, -75, -8, 32, 119, 54, -71, 122, -80, 127, -108, 116, -34, 99, 60, 87, 93, 19, -40, 18, 86, -8, -124, -16, -73, 94, 91, 65, -95, 21, 92, -70, 9, 73, 103, -98, 120, 8, 48, 120, 124, -93, 80, 126, -42, 91, -114, 76, -1, 70, 22, 124, 44, -115, -107, -113, 42, -107, 25, -25, 80, 43, 109, 88, -11, -57, -33, -91, -79, -54, 12, 27, 20, -106, 101, -92, 3, -43, -35, -75, 22, 90, 73, -100, 127, -69, 15, -35, 108, 123, -91, -116, 23, 102, -36, 90, 83, 71, -57, -35, 25, -65]");
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey30);
        java.lang.Class<?> wildcardClass40 = secretKey30.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[59, -114, -84, -68, -70, 124, -75, -1, -65, -82, 63, 12, 44, -36, 122, -61]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[51, 51, 99, 15, 83, -103, -128, -67, 44, 63, 102, 127, 92, -2, 73, -28]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, 116, 21, -52, -126, -9, -114, 23, -10, 124, -40, -60, 43, 124, -17, -49]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-84, 18, 94, -13, -61, 87, 29, -114, -30, 118, 96, -45, 24, -68, 55, -104]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-22, -114, 67, -76, -24, -28, 101, -100, -45, 55, -63, -116, -92, 113, 16, -115]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-90, -126, 92, 66, 17, -14, 31, -17, -91, -109, 124, 109, -79, 71, 102, 77]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[2, -42, -84, 57, -90, 117, 17, 5, 18, -112, 103, 58, -31, 29, 20, -3, 59, 73, -102, 56, 33, -20, 100, 63, 49, 87, 36, 16, 16, -120, 7, -100, -22, -114, 67, -76, -24, -28, 101, -100, -45, 55, -63, -116, -92, 113, 16, -115]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-23, -107, 42, 115, -75, 58, -108, -34, -30, 32, -39, -117, -2, -35, -127, -64, 79, 86, 89, 29, -112, -84, -58, 39, -117, -3, -71, 88, -25, 44, 1, 54, -22, -114, 67, -76, -24, -28, 101, -100, -45, 55, -63, -116, -92, 113, 16, -115]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-42, 11, -6, -9, 73, 75, 61, -17, -84, -15, 52, -37, 89, 18, 15, 7, -95, 2, 73, 125, 21, 100, -77, 72, -28, -79, -58, 40, -121, -30, 72, -1, 14, -8, -98, 25, -122, 24, -86, -71, -35, 21, 45, -5, 68, 36, 4, 46, 112, -56, -40, -71, -23, 121, -46, -14, -124, -60, -114, -49, 39, -31, 62, -38, -60, 63, -71, -78, 102, -96, -34, 14, 34, -1, 87, 110, -86, 105, 10, 18, 56, 70, 77, 110, -79, -87, -12, -110, -31, -33, -57, 82, 41, 94, 22, 31, -22, -114, 67, -76, -24, -28, 101, -100, -45, 55, -63, -116, -92, 113, 16, -115]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6EA4E116455BC7AF3FB5BF064D6F874CB5F555408DB9AD9F9733DFD99DAC4D7FEEE704EFF20D5601E11B02E83309E581", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[112, 120, 97, -51, -42, -49, 83, 47, -60, -59, 24, 68, -109, 65, -67, 86]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-2, 14, 7, -57, 53, 45, 110, -18, -27, -24, -82, -1, 98, 88, 17, -107]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[79, 91, -83, 127, -11, 103, 70, -14, -120, 123, -62, 34, 44, 123, -118, -102]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[112, 120, 97, -51, -42, -49, 83, 47, -60, -59, 24, 68, -109, 65, -67, 86]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[37, 87, -49, -4, -73, 116, -96, -28, -7, -40, 126, -11, 100, 5, 58, 100, 27, -4, 73, -87, -72, 26, -10, 122, 54, -49, 46, 42, 91, 44, 3, 77, 32, -30, 53, -1, 40, -84, -5, -78, -32, -101, 8, -7, -86, -94, 53, -26, 9, 126, 97, -24, 114, -26, -16, -84, 74, 88, -93, 7, 3, -77, -119, -38, 33, -67, 46, 59, 53, 11, -95, 26, -63, 2, -11, -116, 105, -55, 108, -83, -53, 50, 35, -44, -115, 86, 7, 42, -52, 115, 93, -79, -43, -115, -107, 126, 112, 120, 97, -51, -42, -49, 83, 47, -60, -59, 24, 68, -109, 65, -67, 86]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[96, 98, 59, -101, -61, -64, 36, 25, -110, -93, 25, 111, -54, 56, 55, -96, -121, 62, -89, -17, -100, -73, -8, -41, -103, -111, -65, 84, -128, -115, -9, 40, 112, 120, 97, -51, -42, -49, 83, 47, -60, -59, 24, 68, -109, 65, -67, 86]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[60, -123, -102, 51, -23, -30, -117, 0, 62, -100, -87, -114, 102, 69, -14, 66, 93, -107, 41, 63, 37, 42, 37, 48, 28, -51, 87, 79, 89, -9, -89, -9, 57, 28, 36, 34, 69, -106, -47, -74, -103, -47, -59, 8, 99, -55, -57, -3, 11, 95, -103, 53, -72, 50, -115, 105, -97, -100, 48, 2, 29, 103, -57, 97, 30, 44, 85, 11, -68, -37, -123, 27, 3, -53, 108, 7, -100, 9, -117, -116, -38, 12, -12, 16, -26, 19, -63, -35, -67, -55, -69, -24, 12, 91, -52, -111, 112, 120, 97, -51, -42, -49, 83, 47, -60, -59, 24, 68, -109, 65, -67, 86]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey33);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey58);
        byte[] byteArray64 = new byte[] {};
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray64);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey66);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey70);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey70);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey70);
        byte[] byteArray74 = new byte[] {};
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray74);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey76);
        javax.crypto.SecretKey secretKey80 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey80);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey80);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey80);
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey80);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey80);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey80);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey80);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey80);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey80);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey80);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-53, -37, 109, 83, 29, -5, -63, -98, 50, 33, -94, 102, -20, -109, 76, -106]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-93, 48, 82, 77, -84, 30, 13, -18, -77, -74, -10, 19, -13, -53, 45, 113, 83, -40, -71, 112, -52, 107, 28, -56, 37, 3, -114, 117, -66, 61, 33, -21, 77, -120, -82, 33, -58, -12, -89, 35, -73, -5, -13, -58, -62, -74, -21, -86, -78, 118, -88, -91, -52, -123, -45, -100, -59, -52, -107, 57, -70, 31, 109, -6, -2, -84, -125, -113, -53, 77, -105, -2, -19, -30, 42, 42, 15, 111, -46, 125, 56, 11, -107, -99, -15, 104, 22, -71, -83, 13, -110, -123, 3, -13, 74, -114, -53, -37, 109, 83, 29, -5, -63, -98, 50, 33, -94, 102, -20, -109, 76, -106]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[125, 24, 94, -73, -120, 5, 104, 44, -96, 14, 79, 107, -49, 6, -8, -45, 51, 76, 3, -40, 10, 101, 34, 79, 55, 50, -4, 44, 42, 110, -20, 24, 60, 118, -87, -12, 56, 110, 21, -75, 110, 111, 74, -70, 123, -82, 67, -60, -48, 106, -72, 57, -60, 48, 29, -1, -127, 70, -54, 63, -57, 85, 28, -61, -95, 121, 33, 43, -117, 16, 7, -32, 39, 23, -24, -43, -78, 79, -44, 28, -57, 24, 75, 45, -9, -75, 102, -5, -5, -75, 119, 123, 71, -94, 87, 37, -53, -37, 109, 83, 29, -5, -63, -98, 50, 33, -94, 102, -20, -109, 76, -106]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7D185EB78805682CA00E4F6BCF06F8D3334C03D80A65224F3732FC2C2A6EEC183C76A9F4386E15B56E6F4ABA7BAE43C4D06AB839C4301DFF8146CA3FC7551CC3A179212B8B1007E02717E8D5B24FD41CC7184B2DF7B566FBFBB5777B47A25725CBDB6D531DFBC19E3221A266EC934C96" + "'", str7, "7D185EB78805682CA00E4F6BCF06F8D3334C03D80A65224F3732FC2C2A6EEC183C76A9F4386E15B56E6F4ABA7BAE43C4D06AB839C4301DFF8146CA3FC7551CC3A179212B8B1007E02717E8D5B24FD41CC7184B2DF7B566FBFBB5777B47A25725CBDB6D531DFBC19E3221A266EC934C96");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[119, 6, 94, 19, -76, -53, -66, 95, 118, 36, -118, 104, -50, 15, 103, 45]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[97, 42, 119, -111, 21, 18, -99, 78, -3, 96, -116, 90, -89, 68, 2, 103]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[48, 18, -22, -72, 80, -126, 55, -109, 82, -102, -109, -11, -37, 44, 27, 37]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-95, -19, -99, 49, 80, 102, 39, 106, -68, 28, 86, -13, 46, 106, -116, -44]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[71, 127, 77, 60, -27, -66, -126, 21, -15, -10, 67, -119, 9, 42, 22, -79]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-46, 16, -37, 27, 111, 93, 36, -45, 1, 91, 29, -69, -81, -30, -117, -120]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-46, 16, -37, 27, 111, 93, 36, -45, 1, 91, 29, -69, -81, -30, -117, -120]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 57, 21, -46, -127, 20, 86, 39, 82, -105, -43, 31, -23, -102, 63, -90]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-64, 60, 91, 8, 38, 98, -57, -120, -120, -119, 32, 37, -110, 42, -24, -89]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[123, 114, 125, -34, -55, -118, -62, 17, 17, -104, -40, -104, 75, -92, 90, 53]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-125, -103, 47, -119, 107, -124, 75, 86, -69, 72, 96, 122, -81, -118, -74, -83]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122, 121, 5, -28, 13, -51, 34, -114, 23, -98, 112, -16, -46, 3, -36, -21]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[125, 17, 91, 81, -123, -91, 96, -105, 3, 105, -8, -82, 1, -70, -55, -83]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(secretKey80);
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-84, 42, -111, -13, 18, -32, 117, 43, 12, 53, 127, 48, 73, 111, -111, 2]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[61, -53, 80, 11, -69, -50, 52, 5, -12, 78, -5, 120, -59, 116, 2, 6]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-20, 52, -113, 58, 33, -40, -5, -109, -106, 3, -74, 92, -47, -52, 49, -34, 47, -49, 57, 42, 85, 55, -18, -49, 95, -46, 43, -34, 18, 110, 17, -120, -84, 42, -111, -13, 18, -32, 117, 43, 12, 53, 127, 48, 73, 111, -111, 2]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-125, -122, 60, -86, -108, -85, -9, 26, 23, -69, -35, -93, 67, 104, -92, 80, 94, 32, -8, 64, 86, -93, 115, 100, 106, -41, 15, -47, 89, -56, 68, -55, -84, 42, -111, -13, 18, -32, 117, 43, 12, 53, 127, 48, 73, 111, -111, 2]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[7, 71, 15, 124, -61, -41, -74, 27, 105, 118, 39, 23, -10, -103, 99, 100, -114, -112, 35, 60, 41, -23, 20, -49, 112, -96, -60, -85, -29, -36, -94, 114, -123, -24, 18, 100, -14, -23, 123, -92, -105, 100, 105, -3, 8, -37, 96, -50, 110, 100, -117, -15, -100, 24, 10, -48, 54, 79, -91, -16, 43, 74, 111, 52, -67, -62, 44, 54, 49, 38, -104, 58, 11, 10, -112, 65, -16, -57, -84, -34, -4, -14, 41, 120, -57, 4, 100, 52, 22, -80, 102, -86, 116, 117, 98, -2, -84, 42, -111, -13, 18, -32, 117, 43, 12, 53, 127, 48, 73, 111, -111, 2]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-50, -27, -94, -24, 95, -55, 107, -24, -6, 105, 86, -76, -53, 82, 93, -38, 99, 34, -86, 40, 27, -77, 6, -118, -86, -97, -94, -5, -31, -89, 39, 74, -84, 42, -111, -13, 18, -32, 117, 43, 12, 53, 127, 48, 73, 111, -111, 2]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey20);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey53);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey53);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey53);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey53);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey53);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-100, 82, -120, 127, 99, 15, 66, 121, 28, 94, -86, 49, 0, 100, 56, -68]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-56, -109, 57, 51, -74, 18, -16, -60, 20, 34, 20, -33, -113, 89, 107, 91]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-102, 75, -97, -43, -104, 71, -63, -99, 16, -69, 122, 41, -10, 84, 5, -91]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-33, 12, 9, -86, -126, 126, 33, 56, 122, 27, 94, -65, 50, 117, 25, -66]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-14, 114, -80, -117, -88, 51, 126, 32, 115, -15, -95, 96, -5, -70, -79, 27, -17, 122, -70, -21, 85, 83, 3, 83, -83, 106, 21, 105, 69, -40, 21, -59, -102, 75, -97, -43, -104, 71, -63, -99, 16, -69, 122, 41, -10, 84, 5, -91]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-97, -79, -46, -55, -25, -72, -29, 103, 54, -17, 69, 46, -83, 70, -51, -29, -110, 66, 63, 116, -114, 76, -9, 39, 104, 22, -117, -39, -90, 52, -92, -76, -102, 75, -97, -43, -104, 71, -63, -99, 16, -69, 122, 41, -10, 84, 5, -91]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[59, -2, 16, 59, 84, -11, 70, 91, 18, 98, -11, 43, -1, -41, -73, -104, 112, 10, -70, -83, -99, 67, -46, 43, 69, 3, -107, -128, 105, -91, 80, -23, -78, -32, 5, -63, 35, -44, 93, -16, 105, -59, -54, -107, 109, 80, 117, -112, -81, 125, -116, -33, -128, -74, -40, -17, 64, 102, 57, 100, -31, 110, -57, -112, 103, 2, 40, -37, -97, -6, 10, 123, -80, -108, 121, 74, -61, -30, 124, 94, -57, -6, -83, -123, 72, -82, -68, -27, -95, 76, -57, -39, 77, -124, 95, -27, -102, 75, -97, -43, -104, 71, -63, -99, 16, -69, 122, 41, -10, 84, 5, -91]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[61, 82, 15, 56, 125, 73, 58, -102, -41, -18, 78, -30, 25, 15, -59, -63, -2, 63, 103, 102, -87, 67, 19, 121, 118, 28, -98, -99, -115, -58, 98, -113, 43, -117, 77, 9, 110, 46, 8, -4, 101, -54, 71, 21, -55, -72, 4, 53, -79, 42, -73, -15, -76, -42, -76, -40, 82, 38, -5, 119, -36, -28, 24, -110, 48, -108, -124, 66, 53, -36, -120, -126, 79, -68, 49, -33, -30, 53, -103, -89, -121, -86, -106, 99, -102, -108, -32, -128, -13, -103, -72, -66, 52, 16, 46, 32, -102, 75, -97, -43, -104, 71, -63, -99, 16, -69, 122, 41, -10, 84, 5, -91]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[22, -56, 49, -37, -69, -127, -31, -12, 26, 54, -119, 80, -21, -104, -116, 6]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[120, 92, 61, -10, 18, -70, 50, 79, -122, -92, -49, -105, -97, -113, 57, 31]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-10, 88, -10, -75, 76, 8, -22, -65, 118, -121, -44, -111, 11, 2, -16, -24]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[30, -103, 4, 72, 71, 91, 1, 90, -4, 64, -103, 91, -91, -85, -1, 36]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[99, 65, 73, 28, -37, -111, 3, 82, -31, -4, 93, -124, 55, 66, -80, -113, -35, -79, -70, 69, -41, -79, -127, -73, -19, 32, 52, 19, -81, -121, 109, -58, -10, 88, -10, -75, 76, 8, -22, -65, 118, -121, -44, -111, 11, 2, -16, -24]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[16, -6, 32, -126, 28, 105, -55, -47, 108, 28, -63, 36, -53, -67, -125, -108, 25, 7, -60, 51, 99, -77, 122, 52, -105, -117, 17, -9, 108, 42, 98, -76, -10, 88, -10, -75, 76, 8, -22, -65, 118, -121, -44, -111, 11, 2, -16, -24]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[90, 117, 81, 56, -35, -18, -69, -106, 90, 45, -93, 31, -35, -89, 4, 21, -120, 113, -113, 1, 60, -94, 52, 55, -65, 38, 103, 9, -21, 34, -126, -85, -111, 83, 94, -65, -67, 106, -11, -102, 73, -112, -124, -6, -88, -43, -72, 79, 33, -25, -115, 20, -106, -25, 91, -80, -12, 28, -9, -87, -116, -4, -54, -6, 8, -63, -90, -47, -115, 50, -68, 38, 28, -37, 87, 98, 101, 42, 123, 71, 9, 92, -17, 23, -65, -63, 92, -30, -21, 14, 107, 58, 13, 100, 63, -10, -10, 88, -10, -75, 76, 8, -22, -65, 118, -121, -44, -111, 11, 2, -16, -24]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[109, 0, 126, 85, 62, -51, 53, -12, 47, -107, 82, 18, -68, 4, 0, 102, -18, -55, 121, -67, 41, 64, -77, 15, -43, -83, 95, 114, 19, -4, -36, 81, -10, 88, -10, -75, 76, 8, -22, -65, 118, -121, -44, -111, 11, 2, -16, -24]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-36, -89, 108, -54, 111, -37, 63, -106, -106, 91, 34, 71, 46, -16, -128, -110, 45, -88, 33, 117, 19, 43, 100, 73, -28, -9, -21, 89, 126, -10, -10, -18, -77, -30, 62, 57, 39, 77, -32, -6, -101, -7, -61, -1, 41, 16, -7, -40, 3, -25, -112, -119, 19, -16, 60, 15, -30, -81, 38, 81, -13, 119, 65, -12, -23, -86, -16, -67, 35, -23, 69, -123, 126, -66, 80, -108, 86, -42, 56, 105, -88, 30, 122, 83, -94, 37, -95, -19, -19, -59, -93, 114, 101, -89, -80, 120, -10, 88, -10, -75, 76, 8, -22, -65, 118, -121, -44, -111, 11, 2, -16, -24]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[8, -61, -38, 121, 100, 66, 100, 37, 48, -115, 4, -127, -8, -21, -23, -84]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-95, -105, -126, 70, 45, 55, 29, 115, 117, -54, 127, -16, -106, 125, 35, -73]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-84, -87, 116, 78, -78, -69, 103, 28, -80, -54, -60, -101, 81, 114, -32, -90]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[35, 17, -40, -110, -103, -61, -15, -14, -26, -58, 91, 95, 108, 32, 112, -42]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-56, 42, -116, -46, 82, -122, -70, -8, 127, 8, -108, 69, 73, -49, 100, 60, -124, 76, -55, -17, 68, 42, 114, 67, -17, 57, 120, 18, 24, 83, -93, -52, -84, -87, 116, 78, -78, -69, 103, 28, -80, -54, -60, -101, 81, 114, -32, -90]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[37, -84, 107, 32, 88, 66, -45, 42, 62, 18, -39, 117, 79, 22, 0, -108, -30, -37, 104, 33, 12, -106, 9, -81, -69, -99, -33, -38, 126, -37, 10, 21, -84, -87, 116, 78, -78, -69, 103, 28, -80, -54, -60, -101, 81, 114, -32, -90]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-53, 95, -127, -51, 8, -62, -24, 109, -35, 116, -124, -21, -96, -30, -66, 64, 40, -1, 2, -47, -119, 78, 2, 99, -86, -9, 120, 57, 39, -92, -42, 36, 3, -76, -80, 0, 42, 29, 82, 44, -78, 31, 16, 15, 70, 79, 97, 105, 6, 86, 43, -107, -19, 18, 70, 2, 68, -96, 106, 52, 120, 77, 126, 58, -21, 46, 71, 102, 88, 33, -90, 17, 43, -52, -19, -79, 57, -90, 80, 71, 39, 91, -103, 121, -11, -70, 77, 82, 28, -67, 33, -30, -78, 12, 37, -22, -84, -87, 116, 78, -78, -69, 103, 28, -80, -54, -60, -101, 81, 114, -32, -90]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[76, 106, 99, -43, 38, -59, -61, 110, -13, -42, 58, -107, 20, 112, 61, -39, -124, 94, 107, -11, 93, -9, 45, 70, 51, -111, -17, 91, 22, -39, -2, 68, -84, -87, 116, 78, -78, -69, 103, 28, -80, -54, -60, -101, 81, 114, -32, -90]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("A856F4BB028ED37E42CCF9A0F314FBC195A260BA04EEEF22D305973260944F431BE4FC79E853B7AF60ECDC1555D9124211637AF288C9EC32916D12A203EB5EFA19BE8DB3AB1518F05C443DD81721AF22E81EED89735A10E4AA3A9B09F8438210CA4375536161AC4CDE469F449ACF1A07", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[107, 97, 9, -47, 74, 109, 85, -119, -77, -91, -114, 56, -90, 63, -2, -66]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[27, -100, 38, 34, -63, -115, 103, 18, 28, 80, -82, -68, 27, -7, -117, 101]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-120, 23, -61, -103, 119, 12, 10, -89, 84, 81, 15, 109, 53, 42, 29, 80]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[107, 97, 9, -47, 74, 109, 85, -119, -77, -91, -114, 56, -90, 63, -2, -66]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[109, -128, 52, 82, 58, -57, 10, -76, 0, -18, 102, -29, -48, 41, -12, 21, 123, 70, -72, -35, -2, -25, 119, 114, 28, 121, 92, -81, -79, -1, 6, -46, 53, 76, -27, -88, -19, -82, 36, 95, -82, 17, 81, -126, -16, -18, -76, -29, 112, -104, 69, -71, 21, 82, 22, -68, 40, -11, -94, -14, -55, 24, 62, -26, 67, 53, -77, -34, -99, 54, -100, 79, 78, 72, -25, -102, 10, 87, -21, 88, 21, -65, 49, 120, -120, 25, -65, -10, -16, 109, 105, 75, -73, 13, 11, 21, 107, 97, 9, -47, 74, 109, 85, -119, -77, -91, -114, 56, -90, 63, -2, -66]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[53, -70, 36, 11, 57, -119, 89, -35, -73, -26, 79, -1, -83, 65, 3, 119, 58, 78, 27, -86, -111, 125, -88, -55, 12, -93, 67, 52, -70, -47, 84, 26, 107, 97, 9, -47, 74, 109, 85, -119, -77, -91, -114, 56, -90, 63, -2, -66]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[46, -15, -5, 52, -105, -55, 8, 41, -122, -122, -103, -95, -44, -76, 97, 42]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-43, -55, 48, -124, 43, 64, -87, 79, -45, 30, -23, -14, 64, -33, 36, -100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[85, 2, -24, 100, 69, -52, 121, -65, 110, 35, -59, 105, -99, -15, -43, 65]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-72, 70, -1, -3, 22, -20, -57, 61, -26, -9, -8, 30, 4, -103, -115, -32]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[107, 89, -14, -5, 54, 83, -119, 91, -91, -20, -124, 120, 9, -35, 92, 4, -35, -6, 19, -91, 84, -61, 109, 26, -5, -31, 0, 69, 19, -75, -3, -50, 85, 2, -24, 100, 69, -52, 121, -65, 110, 35, -59, 105, -99, -15, -43, 65]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-78, 0, 37, -115, 68, 35, -29, 56, 100, -24, -41, -25, 110, -52, 20, 52, -74, 14, 57, -88, 94, -55, 18, 76, -118, 55, -24, -68, 43, -77, 57, -88, -99, 19, 88, 90, 24, -108, 44, 41, -117, -107, -42, 74, 43, -32, 2, 36, -83, 46, 9, 62, -39, -104, -96, -116, 10, 59, -39, -111, 118, -40, 106, 48, 22, -9, 64, -40, 46, -126, -110, -127, 49, 53, -48, -42, -74, 45, 0, 4, 81, -85, -58, 51, -87, 50, 104, 101, -27, -93, -100, 20, -80, 10, 82, 127, 85, 2, -24, 100, 69, -52, 121, -65, 110, 35, -59, 105, -99, -15, -43, 65]");
        org.junit.Assert.assertNotNull(byteArray39);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey51);
        java.lang.Class<?> wildcardClass59 = byteArray58.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-102, 93, 90, -33, 13, 89, -48, 94, -80, 39, 69, -95, 115, 123, 49, -14]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[79, -83, 57, -114, -27, -122, -74, 123, -81, 49, 81, -81, 44, -71, 73, 95]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-56, -49, -52, 83, -87, 28, 101, 51, -106, 21, 82, -3, 101, -69, -65, -46]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-106, -21, 103, 91, 109, -13, 110, -19, -52, -29, 33, 101, -67, 18, -29, 36]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[73, 69, -16, 29, 13, 71, 10, 82, 106, -71, 74, -30, 83, 40, -123, -56]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-118, -62, -83, 106, -85, -37, 116, 46, 7, -7, 2, -94, -11, -15, -115, 19]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[20, -79, 29, 16, -112, 34, -8, -62, 15, -126, -3, -25, 56, 115, 117, -22]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-91, -22, -87, -69, -113, -77, -82, 65, 107, 23, 3, -62, -36, 74, -1, 85]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-74, 114, -119, -40, 21, 61, -45, -100, 53, -24, 15, -63, -35, -83, -114, -70]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-123, 48, -81, 20, 73, 12, -23, 103, -119, 58, -120, 20, 83, 53, -54, 90]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[89, 9, -85, 34, -4, -47, 111, -59, 102, 104, 109, -68, 106, -94, -104, -113]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-74, 114, -119, -40, 21, 61, -45, -100, 53, -24, 15, -63, -35, -83, -114, -70]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-5, 44, 98, 120, 15, 31, -29, -127, 103, -125, -114, -58, 39, -82, 23, -16, -46, 13, -60, -98, -68, 74, -57, 109, 21, 86, -25, -54, 53, 41, 82, 42, -74, 114, -119, -40, 21, 61, -45, -100, 53, -24, 15, -63, -35, -83, -114, -70]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey68);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey79);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey79);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey79);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey79);
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey79);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey79);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey79);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey79);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[98, 60, -82, -1, -95, -18, 87, 52, -68, -99, 28, 116, 67, 35, 78, 12]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-30, 8, -48, 6, -9, -42, 12, 8, 98, 66, 90, -66, -71, -115, -78, 70]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-105, 32, -74, 100, -55, 68, 27, -24, -45, 18, -109, 106, -128, -21, -127, 125]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-58, 23, -4, -59, 26, -22, 95, 55, -101, -117, 113, -108, -114, 118, -36, 33]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-108, 60, 110, 85, 18, 6, 102, 91, 33, 75, -123, 112, 111, -31, -76, -2, -20, 62, 58, 105, 24, -91, -105, 57, 91, -58, -74, 108, 7, 12, -65, -1, -105, 32, -74, 100, -55, 68, 27, -24, -45, 18, -109, 106, -128, -21, -127, 125]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-105, 32, -74, 100, -55, 68, 27, -24, -45, 18, -109, 106, -128, -21, -127, 125]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "9720B664C9441BE8D312936A80EB817D" + "'", str25, "9720B664C9441BE8D312936A80EB817D");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9720B664C9441BE8D312936A80EB817D" + "'", str26, "9720B664C9441BE8D312936A80EB817D");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[115, 100, 10, 108, -31, 3, 0, 29, -83, 82, -18, -95, -2, 63, 109, 119]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[4, 109, -15, -85, -71, -40, 120, 91, -8, -79, -89, 27, 57, -30, -100, -7]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[112, -1, 48, -100, 82, 35, 120, 87, 59, -55, -115, 57, -121, -56, -14, 40]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[39, 20, 47, -26, -14, -62, 31, -2, -24, -9, 4, 51, -111, -68, -24, 32]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-58, 13, 55, -128, 27, -85, 106, 57, -109, 51, -99, 22, -37, 35, 116, 81]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-53, 101, 29, -112, -127, -127, -19, -28, 98, -115, -16, -28, -83, 27, 101, 74]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[110, 119, -19, 57, 99, -5, 29, -11, -65, -121, 41, 125, -120, -69, -41, 104]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-56, 123, 14, 37, -91, -101, -115, 119, 90, 8, -10, 17, -45, 27, -89, -89]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[49, -80, 105, 2, -1, 22, 91, -19, 89, -103, 117, 90, 40, 101, -96, 107]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[83, 85, 60, 15, -45, 14, 24, -93, 17, -20, 23, 59, 50, 52, 107, -57]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-102, 84, -21, -33, -107, 43, -16, 75, 9, 67, 39, -78, -122, -6, 73, 98]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[49, -80, 105, 2, -1, 22, 91, -19, 89, -103, 117, 90, 40, 101, -96, 107]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-88, 59, -27, -107, 64, 94, -76, 65, -50, 24, 63, 86, 82, 35, -31, -8, -65, 80, 9, 51, 87, -21, -25, 97, 66, -113, 31, -66, -15, -28, 0, 27, 49, -80, 105, 2, -1, 22, 91, -19, 89, -103, 117, 90, 40, 101, -96, 107]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[113, -52, 74, 59, -4, 53, -14, 111, -109, 67, -31, 19, 10, -9, -105, 0, -59, 29, -68, 79, 88, -20, 44, 76, 70, -55, -88, 3, -121, -31, -24, 67, 49, -80, 105, 2, -1, 22, 91, -19, 89, -103, 117, 90, 40, 101, -96, 107]");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        javax.crypto.SecretKey secretKey10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-29, 68, 21, -74, -102, 107, 123, 37, -117, 32, 24, -24, -80, 17, -70, 87]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-36, 70, 38, 68, -52, -88, -45, 47, -119, 10, -96, 46, -94, 49, 123, 23]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey7);
        java.lang.Class<?> wildcardClass15 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-57, 84, -99, -33, 115, -73, 28, -97, -23, -28, 117, 1, 29, -78, -55, 121]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-118, -45, -19, -120, -13, 14, 102, 21, -128, -85, 55, -105, -119, -68, -92, 13]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 104, -5, 113, -68, -51, -33, -38, -105, -63, 39, 102, 84, -99, -12, 96]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-57, 84, -99, -33, 115, -73, 28, -97, -23, -28, 117, 1, 29, -78, -55, 121]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[33, -13, 96, 93, -46, 85, -125, 12, 17, -72, -111, -17, -109, 35, 121, 112, 45, 8, -38, 13, 0, 90, -73, -90, 108, 91, -105, -95, 40, -52, -21, -73, -57, 84, -99, -33, 115, -73, 28, -97, -23, -28, 117, 1, 29, -78, -55, 121]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[14, -5, -2, 39, 52, -27, 85, 34, -61, -12, 116, 80, -19, -5, 77, 67, -26, 122, -103, 84, 116, 28, -109, -71, 124, -101, -63, 21, -22, 77, 90, 9, -57, 84, -99, -33, 115, -73, 28, -97, -23, -28, 117, 1, 29, -78, -55, 121]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray54 = new byte[] {};
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey56);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey60);
        byte[] byteArray64 = new byte[] {};
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray64);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey66);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey70);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey70);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey70);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey70);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey70);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey70);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey70);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey70);
        java.lang.String str79 = null; // flaky: com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey70);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[6, 12, 30, 85, -128, 64, 62, 85, -73, 14, -28, 24, -128, 50, -61, -73]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, -19, 47, 79, 42, 61, -65, -75, 94, -54, -15, 85, -115, 76, 84, 17]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[66, -36, 19, -13, 6, -88, -95, 118, -16, 85, 8, -22, -84, -76, -90, -116]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-123, 67, -109, 16, -46, 125, 13, -9, 27, 45, 115, 54, 1, 31, 72, 121]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[49, -68, -51, -7, -45, 63, 23, -34, -102, 72, 118, -80, 57, -7, 27, -65, -23, 74, 19, -81, 85, 98, 56, -85, 49, 40, -46, 41, -64, 115, 50, -64, 66, -36, 19, -13, 6, -88, -95, 118, -16, 85, 8, -22, -84, -76, -90, -116]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-126, -75, 20, 99, 78, -33, 98, 52, 58, 34, 61, -72, 38, -74, 53, -43, 40, -108, -117, -12, -62, -23, 41, 59, 46, 88, -25, -69, -65, -7, -121, 80, 114, 43, -32, -64, -37, -18, -70, -81, 66, 60, 123, 23, 45, -42, 0, -14, -30, -122, -66, -83, -59, -93, 78, -36, 45, -28, 18, -7, 120, -91, -108, 74, 86, 82, -13, -83, -66, -37, -100, -45, 31, 126, -29, 14, 85, -70, 100, -86, 123, 65, 102, -37, 37, 47, 109, -6, 97, 21, 10, -9, 89, -62, 124, -39, 66, -36, 19, -13, 6, -88, -95, 118, -16, 85, 8, -22, -84, -76, -90, -116]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-126, -75, 20, 99, 78, -33, 98, 52, 58, 34, 61, -72, 38, -74, 53, -43, 40, -108, -117, -12, -62, -23, 41, 59, 46, 88, -25, -69, -65, -7, -121, 80, 114, 43, -32, -64, -37, -18, -70, -81, 66, 60, 123, 23, 45, -42, 0, -14, -30, -122, -66, -83, -59, -93, 78, -36, 45, -28, 18, -7, 120, -91, -108, 74, 86, 82, -13, -83, -66, -37, -100, -45, 31, 126, -29, 14, 85, -70, 100, -86, 123, 65, 102, -37, 37, 47, 109, -6, 97, 21, 10, -9, 89, -62, 124, -39, 66, -36, 19, -13, 6, -88, -95, 118, -16, 85, 8, -22, -84, -76, -90, -116]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[58, -74, 91, -107, 21, 115, -86, -86, 71, 29, 62, -54, -81, -24, 36, -58, 26, -14, -7, 49, -68, 125, 120, 26, 10, -127, -107, -40, -105, -108, 102, 69, 66, -36, 19, -13, 6, -88, -95, 118, -16, 85, 8, -22, -84, -76, -90, -116]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3AB65B951573AAAA471D3ECAAFE824C61AF2F931BC7D781A0A8195D89794664542DC13F306A8A176F05508EAACB4A68C" + "'", str29, "3AB65B951573AAAA471D3ECAAFE824C61AF2F931BC7D781A0A8195D89794664542DC13F306A8A176F05508EAACB4A68C");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-14, -92, 78, -52, 51, -86, -105, 28, -94, -50, 125, 122, -63, 105, -58, 65]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[30, 55, -35, -5, -124, -123, -90, -107, -48, -112, -50, 81, -32, 123, -67, 112]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[81, 1, 96, -21, 8, 48, 58, 99, 15, 1, 118, -51, -12, 74, 108, -7]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[41, -122, 80, 45, 104, 99, -115, 65, -96, -93, -28, 33, -38, 122, 88, -78]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[62, 121, -15, -4, -10, -40, 102, 56, -109, -32, 46, -64, 4, -48, -107, 125]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[44, -48, 87, 124, -52, 53, -80, 33, -75, 94, 79, 30, -26, -117, -22, -90]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-28, 3, 40, -118, -3, -90, 53, 10, -17, 111, 92, -118, 43, 120, -49, -119]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-75, -82, 8, 11, 123, 9, -70, 104, 113, -96, -11, -97, -59, 125, -68, 104]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-97, 44, -50, -121, 24, -33, 38, 49, -93, -104, -20, -27, -72, 99, 87, -105, 35, 127, -47, -77, -104, 17, 110, 75, -79, 97, 105, -105, -109, -43, 107, -14, -28, 3, 40, -118, -3, -90, 53, 10, -17, 111, 92, -118, 43, 120, -49, -119]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-107, -101, 42, 126, 20, -27, -128, -24, 8, -19, -28, 65, 13, -65, 108, -120, -66, 24, 57, -118, 20, 111, -37, -115, 75, 45, 31, -96, -125, -78, -18, 18, -28, 3, 40, -118, -3, -90, 53, 10, -17, 111, 92, -118, 43, 120, -49, -119]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-31, 95, 22, -67, -109, -47, -98, -56, -67, -21, -128, 109, 98, -121, -46, 109, -16, 98, -19, 111, 120, 82, -118, -102, -9, 2, -84, -1, -63, -59, -70, -65, 99, -72, 13, -59, -84, 63, -66, 72, 67, 35, 11, 23, 94, -96, 24, -110, 31, -4, -42, 89, 104, 79, 11, -110, 18, 116, 83, 55, -17, 24, 29, 43, 19, -32, 123, -36, -20, 49, -22, -40, 104, -13, -120, -16, 83, 6, 6, 38, -23, -45, 88, 81, 94, 79, -67, 65, 33, 113, 108, 1, 112, 107, 92, 85, -28, 3, 40, -118, -3, -90, 53, 10, -17, 111, 92, -118, 43, 120, -49, -119]");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c" + "'", str79, "\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("785D85238EF6058BD3CBAAA7366D7F415A8722502FC5E50082C9918733F9B3B0C8F7350F7CB66869038D210C0114B59BDA9757FAD4C615A36FB13B100BBE29A286D4D18998E6A4BE07D276C9D4699B9281A29F98AE8D4D678FADD8931E0FE4D12898879AC63D43C168E02747B342775F", secretKey29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey29);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[117, 40, -39, -70, 42, -34, -117, 72, -78, -82, 55, 100, -35, 119, -15, -105]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-21, 89, -74, -109, -59, 91, -54, -11, 67, -1, 57, 87, 62, -104, -123, 112, -40, -88, -40, 86, 93, -27, 16, 42, 10, 113, 86, -99, 81, 77, -79, 55, -98, -4, 22, -94, -127, -116, 98, -54, -38, -63, -52, 111, -43, 75, 110, 43, 59, 79, 126, 117, 112, 59, 110, 54, 86, -52, 55, 68, 14, 100, -119, 108, -117, -36, 76, 124, 78, 93, 7, 87, 52, -118, -18, -36, 11, 95, -7, 105, 16, 104, -13, -30, 48, 10, 68, -119, -116, 87, -69, -24, 45, -55, 40, 18, 117, 40, -39, -70, 42, -34, -117, 72, -78, -82, 55, 100, -35, 119, -15, -105]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[114, 76, 5, 8, -27, -127, -5, 37, -75, 43, 94, -31, -48, 27, -17, 122, 7, -73, -2, -68, -83, 52, 0, 107, -23, -26, 77, 65, 26, -15, -8, 12, -38, -30, -69, 16, -37, -38, -83, 61, -94, -54, -10, -103, -126, 1, 113, -85, -37, 27, -125, -36, -50, 121, -87, -4, -25, -9, -1, 40, 91, -30, 50, -95, -32, 124, -112, -104, 124, -58, 42, 114, -7, 95, 35, 58, -28, 110, -62, 19, 115, -33, -9, -77, 107, 95, 50, -16, -111, 64, 56, -17, 12, 56, 41, 77, 117, 40, -39, -70, 42, -34, -117, 72, -78, -82, 55, 100, -35, 119, -15, -105]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "724C0508E581FB25B52B5EE1D01BEF7A07B7FEBCAD34006BE9E64D411AF1F80CDAE2BB10DBDAAD3DA2CAF699820171ABDB1B83DCCE79A9FCE7F7FF285BE232A1E07C90987CC62A72F95F233AE46EC21373DFF7B36B5F32F0914038EF0C38294D7528D9BA2ADE8B48B2AE3764DD77F197" + "'", str7, "724C0508E581FB25B52B5EE1D01BEF7A07B7FEBCAD34006BE9E64D411AF1F80CDAE2BB10DBDAAD3DA2CAF699820171ABDB1B83DCCE79A9FCE7F7FF285BE232A1E07C90987CC62A72F95F233AE46EC21373DFF7B36B5F32F0914038EF0C38294D7528D9BA2ADE8B48B2AE3764DD77F197");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "724C0508E581FB25B52B5EE1D01BEF7A07B7FEBCAD34006BE9E64D411AF1F80CDAE2BB10DBDAAD3DA2CAF699820171ABDB1B83DCCE79A9FCE7F7FF285BE232A1E07C90987CC62A72F95F233AE46EC21373DFF7B36B5F32F0914038EF0C38294D7528D9BA2ADE8B48B2AE3764DD77F197" + "'", str8, "724C0508E581FB25B52B5EE1D01BEF7A07B7FEBCAD34006BE9E64D411AF1F80CDAE2BB10DBDAAD3DA2CAF699820171ABDB1B83DCCE79A9FCE7F7FF285BE232A1E07C90987CC62A72F95F233AE46EC21373DFF7B36B5F32F0914038EF0C38294D7528D9BA2ADE8B48B2AE3764DD77F197");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[52, -82, 114, 60, -93, -111, 81, -125, 17, 21, 83, 60, -73, -25, -93, 52]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-63, -121, 70, 98, -82, 43, -104, -92, -105, -105, -91, 13, 86, 50, -66, 46]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[113, 36, -108, 76, 52, 85, 19, 36, -77, 45, -18, -1, -15, -11, -47, -113]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-37, -24, -51, -55, 60, -13, -62, -116, -10, 119, -85, 16, -11, -55, 56, 65]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[97, -123, -108, 15, -32, 124, -96, -118, 12, 119, -99, -14, 23, -23, -27, 34, -115, 74, -9, 67, 83, -61, 108, -66, -108, -121, 63, -27, 19, -92, 44, 102, 113, 36, -108, 76, 52, 85, 19, 36, -77, 45, -18, -1, -15, -11, -47, -113]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-51, -52, -73, 87, -67, -93, 9, -15, 106, 103, 27, 19, 74, 34, 57, 95, -76, 100, -98, -34, 80, -50, 97, 115, -40, 46, -24, -93, 16, 52, -26, -119, 3, 76, -73, 94, -61, 107, -3, -59, 20, 122, -96, -107, -106, -59, 52, -22, -113, 112, -22, -70, 119, -104, 49, -28, 36, -45, 115, 102, 7, -26, -21, -115, 113, -101, -6, 67, -5, -89, -109, -28, -60, -101, 112, 50, 28, -72, -60, -122, -126, -109, -39, 14, -111, 67, 124, -115, 103, -54, -40, 54, -69, 22, -92, 10, 113, 36, -108, 76, 52, 85, 19, 36, -77, 45, -18, -1, -15, -11, -47, -113]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[64, 89, -60, -128, -23, 25, 27, 105, -97, 118, 59, -52, 45, -102, -4, -33, -72, 38, -111, -60, -101, -75, -108, 73, -93, -83, -50, 38, 60, 38, -67, 33, 113, 36, -108, 76, 52, 85, 19, 36, -77, 45, -18, -1, -15, -11, -47, -113]");
        org.junit.Assert.assertNotNull(byteArray37);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[101, 19, 11, 96, 104, 81, 41, 108, 102, -118, 109, -23, 5, -79, -78, -57]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[95, -64, -12, -116, 65, -97, -64, -56, 64, -49, -25, 34, 18, 5, 62, -122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-43, -80, 11, -123, 5, -46, 48, 37, -90, -22, -19, -16, -5, -88, -98, 16]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[14, 98, 0, 97, 65, 23, 95, 71, 64, 101, -13, 20, -107, 103, -72, -60]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-18, 58, 77, 108, -15, -25, -23, -49, -112, 67, 125, -19, 86, -96, 25, 33, 69, 0, 7, 115, -121, -17, -40, 13, -87, -57, 123, -20, -103, -82, 17, -54, -43, -80, 11, -123, 5, -46, 48, 37, -90, -22, -19, -16, -5, -88, -98, 16]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[64, -106, -82, -47, 113, -69, 10, 51, -52, -13, 10, -123, -46, 43, 76, -9, -116, 24, -32, -97, 33, -57, -36, -25, -86, -21, 78, -88, -29, 10, 60, -110, -43, -80, 11, -123, 5, -46, 48, 37, -90, -22, -19, -16, -5, -88, -98, 16]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-43, -94, -77, 94, 99, -52, 30, -71, 92, 78, -110, 127, -109, -108, -26, -74, 100, 10, 110, -18, -20, 27, 17, -87, 44, 104, 63, 32, 26, 108, 90, -96, -11, -5, 6, 42, -89, -78, -87, 125, 2, -14, -90, 104, -98, 48, -76, 59, -83, -76, 26, 37, -61, 57, -26, -9, -35, 5, 108, 68, -3, -14, -119, 49, -118, 25, -68, -80, 29, 67, 28, 87, 15, 88, 77, 57, 43, -9, 104, 89, 126, -21, -59, -23, -83, -11, 90, -19, -88, 20, -76, -45, -30, 53, -86, 96, -43, -80, 11, -123, 5, -46, 48, 37, -90, -22, -19, -16, -5, -88, -98, 16]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[86, -49, 14, 11, -42, -19, -125, 120, -64, -53, -10, -39, -107, 15, -88, 102, 57, -48, 88, -89, 122, -25, -61, -24, -64, -47, -122, 34, -81, 67, 30, -48, 0, -75, 75, 70, 97, 9, -118, 17, 60, -105, -48, -117, -118, 113, -46, -59, -120, 37, 127, -90, 75, -19, 117, -30, -37, 110, 31, 10, 101, -18, -51, -89, -84, 122, -42, 59, 98, -48, -79, 58, 49, 127, 109, 14, -54, 22, -2, 27, -127, -39, 108, -109, 67, -47, 55, -84, 5, 75, 27, 117, -19, -97, -23, 99, -43, -80, 11, -123, 5, -46, 48, 37, -90, -22, -19, -16, -5, -88, -98, 16]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        javax.crypto.SecretKey secretKey13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey13);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-110, 24, 22, -104, 76, -64, -21, -30, -5, -29, 3, 33, -41, 3, 113, -70]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-118, -95, -104, 21, 87, -70, -105, 99, -107, 70, 41, -72, -99, 87, -42, 77]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-118, -95, -104, 21, 87, -70, -105, 99, -107, 70, 41, -72, -99, 87, -42, 77]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-110, 24, 22, -104, 76, -64, -21, -30, -5, -29, 3, 33, -41, 3, 113, -70]");
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("AA8673337ACFB55E864A42B13E32D319BE4722866C04C73588C3A4D8CCD43E415F976453DD9047E1E45D6C2D02C358E581FC9E7B229323C8109280344A503E8E1C110E42B2B9D01083CC0AF7652C3047726579CD6DC232906CDA2E7BB6EF2A670102445E30524A34F97CCC737866BE46", secretKey3);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[86, -43, -70, 88, -87, 106, 99, 64, 64, 29, -59, 75, 31, -91, 104, -62]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-42, 36, 70, 58, -70, 82, 32, 12, 31, -23, -6, -98, -63, 84, 105, -84]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[14, 82, -58, -36, -39, -10, -106, 102, -42, -9, -65, 115, -117, -99, 16, -4]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-43, 66, 19, 71, 126, -114, 7, 103, 104, 29, -112, -100, -114, 12, 123, -116]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-43, 66, 19, 71, 126, -114, 7, 103, 104, 29, -112, -100, -114, 12, 123, -116]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-14, 40, 93, -9, -7, -89, -35, 51, -121, -6, 21, 26, -89, -67, 13, 70]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[14, 82, -58, -36, -39, -10, -106, 102, -42, -9, -65, 115, -117, -99, 16, -4]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[98, -1, -53, -57, 49, 0, 71, -11, -52, 96, -68, 89, 10, -116, 104, -39, -2, -43, 56, 68, 74, -58, -38, 51, -13, -109, 52, -79, 11, -28, -86, -84, 42, -49, 112, 22, -81, -103, 64, -25, -58, 65, 50, -95, 64, -41, -110, -120, 40, -105, 42, 0, 98, 106, -85, 111, -126, -97, -67, -80, 71, 8, 9, -123, -17, 49, -76, 66, 18, -95, 76, -105, 1, -99, -67, 124, 1, -119, -69, -48, -78, 124, -58, 81, -36, -48, 60, -28, -126, 93, 82, 43, -82, 49, -21, -48, 14, 82, -58, -36, -39, -10, -106, 102, -42, -9, -65, 115, -117, -99, 16, -4]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey39);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey54);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey54);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[45, -43, -104, 127, 4, 78, -66, 63, -91, -96, -13, 38, 81, -23, -72, 106]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-105, -57, -20, -37, -50, 1, 55, 110, -82, 125, 36, -72, 33, -39, -84, 74]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[39, -17, 40, 2, 83, 121, -91, 37, 118, 60, -21, -76, -91, -87, 77, 123]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-14, -95, 31, -98, 89, -114, 26, 13, -5, -102, -91, 31, 71, -99, 68, -127]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-73, -36, -20, -89, -37, -77, -69, -128, -98, 62, 2, -117, 99, -24, -123, -68]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-40, 16, 55, -20, 49, -46, -55, 117, -39, -44, 58, -69, 39, 60, 71, -126]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[68, -32, 8, 24, 78, -106, -120, -91, 30, 77, -46, 44, -90, 24, -88, -15]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[15, -94, 76, 76, -37, -78, -11, 38, -111, -92, -62, 37, -125, -1, -123, -25]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-42, -70, 82, 40, 95, -34, -86, 58, 105, -90, -44, 70, -104, -101, -110, 22, 120, -52, -122, -34, -43, -95, 62, -109, -37, 116, -77, -108, -78, -71, -120, 116, 68, -32, 8, 24, 78, -106, -120, -91, 30, 77, -46, 44, -90, 24, -88, -15]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[74, 119, -110, -37, 121, -10, -68, -5, -20, 48, 104, -42, 17, 50, -69, 32, 108, -11, 54, -16, -86, -84, -99, -85, 69, -128, -62, 87, -35, 83, -52, -109, 68, -32, 8, 24, 78, -106, -120, -91, 30, 77, -46, 44, -90, 24, -88, -15]");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-52, -112, -40, -109, -15, 55, -9, -52, 104, -11, -6, -3, 105, 116, 59, 83]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-108, 53, 6, -40, 98, -40, 20, 84, -38, -70, -80, -102, -76, 114, -20, -116]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-108, 53, 6, -40, 98, -40, 20, 84, -38, -70, -80, -102, -76, 114, -20, -116]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[78, 32, 120, 110, 64, -58, -109, 18, 121, -96, 105, -82, 100, -86, -54, -62]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-108, 53, 6, -40, 98, -40, 20, 84, -38, -70, -80, -102, -76, 114, -20, -116]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[27, -91, 85, 23, -124, -109, 103, 36, 42, 94, 58, 44, 38, 34, 74, -21, -41, -116, -87, -37, -75, 9, 57, 1, 26, -77, 104, 97, -43, -12, 73, -96, -52, -112, -40, -109, -15, 55, -9, -52, 104, -11, -6, -3, 105, 116, 59, 83]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-20, 110, 0, -9, -75, -110, 87, 45, -118, 61, -48, -125, 40, 54, 17, -86, 71, 41, 5, -72, -1, -39, -67, -18, -56, 116, -86, -57, -16, 121, 100, -28, -11, 112, 42, -115, -96, -97, -34, 59, 60, 50, -91, 85, 110, -95, -75, 80, -42, -29, 89, -100, 24, -19, -73, 27, 12, 67, -120, 111, -59, -54, 103, -70, -81, 39, 5, -121, 19, -98, -79, -63, 79, -50, 0, 76, -69, -101, -24, 77, 5, 64, -2, -72, 50, -21, 8, 48, 101, -17, 79, -69, -17, 3, 44, -87, -52, -112, -40, -109, -15, 55, -9, -52, 104, -11, -6, -3, 105, 116, 59, 83]");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey29);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-12, 21, -49, -101, -122, -1, 122, -5, -117, 119, -87, -36, -12, 29, 115, 112]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[118, 118, 68, -71, -44, -109, -114, -91, 59, -106, 20, -46, -45, 61, 59, -38]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-60, 99, -51, 118, -1, 48, 41, 28, 53, -122, 106, 127, 14, -2, 111, 3]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "C463CD76FF30291C35866A7F0EFE6F03" + "'", str7, "C463CD76FF30291C35866A7F0EFE6F03");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "C463CD76FF30291C35866A7F0EFE6F03" + "'", str8, "C463CD76FF30291C35866A7F0EFE6F03");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-7, -45, -28, -67, 106, -52, -46, -67, 17, 56, -65, -54, 5, 83, 24, 104]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 77, -106, 5, 80, -64, -54, -13, 125, -32, 27, 102, -62, 120, -108, 39]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-25, -28, 85, 54, -63, -99, 73, 42, 19, 58, 56, 83, -107, -5, -123, -30]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, -86, 122, -36, -56, -80, -17, 91, 69, -107, -24, -83, 87, 111, 55, -5]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-31, -72, 43, -98, -32, -94, 86, -126, 66, 74, 50, 13, -67, 56, 1, -117, 9, -121, 38, -6, 41, 103, -119, -59, 23, 25, 61, 11, 125, -82, 25, 98, -25, -28, 85, 54, -63, -99, 73, 42, 19, 58, 56, 83, -107, -5, -123, -30]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-120, 34, 125, 57, 38, 43, 50, -115, 86, -97, 78, 19, -49, -52, 64, -126, -59, -16, -44, -8, 124, -12, -114, 14, -27, 30, 8, -118, 42, -33, -110, 59, -25, -28, 85, 54, -63, -99, 73, 42, 19, 58, 56, 83, -107, -5, -123, -30]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[75, 21, 3, -51, -82, -72, 27, -98, -123, 97, -13, 23, 88, -49, -122, -33, 85, 48, 74, 81, -20, 81, -67, -17, -73, -81, -95, 58, -75, -90, 57, -11, 55, -128, -83, 24, 104, 107, 28, 85, -37, -60, -71, -29, -107, -28, 64, -84, -112, -113, -74, 36, -68, 94, -74, 65, 106, -77, 119, 121, -58, -37, 64, -69, -22, 6, -110, 50, 97, -106, 124, -24, 36, -105, -40, -18, -112, -122, -55, 83, -8, 94, 30, -121, -19, 108, 64, -5, -6, -98, -66, 94, -65, -81, 67, -124, -25, -28, 85, 54, -63, -99, 73, 42, 19, 58, 56, 83, -107, -5, -123, -30]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-45, -71, 121, -92, 18, -111, 27, -128, -86, -99, -45, -37, 117, -66, -57, 88, -67, 15, -20, 71, 59, -73, 119, -60, -40, 83, -50, -94, -38, 25, 26, 110, 78, 47, -97, -124, -50, -7, 76, 87, -32, 8, 41, -53, -53, 80, 13, 27, 74, 59, -55, -38, 15, 73, 33, -66, 114, 82, 6, 102, -102, -26, -57, -4, 46, 9, -108, -26, -3, -9, -109, 1, 23, -96, 63, 109, -83, 90, -50, -39, -3, 113, 11, -19, 7, -113, 20, -13, -1, -76, -50, 11, -31, 63, -56, -90, -25, -28, 85, 54, -63, -99, 73, 42, 19, 58, 56, 83, -107, -5, -123, -30]");
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey51);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        byte[] byteArray72 = new byte[] {};
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray72);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey74);
        javax.crypto.SecretKey secretKey78 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey78);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey78);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey78);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey78);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey78);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey78);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[14, 116, -91, -37, 0, 115, -128, 64, -23, -71, -20, -94, -101, 79, -48, -119]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-7, 126, -5, 110, 28, -81, 69, -11, -94, -87, 43, 61, -69, -94, 89, 57]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-79, -93, -22, 89, 87, -72, 6, 17, 54, -88, -45, 60, -70, 84, 11, -47]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[49, 60, -64, -8, 44, 115, -56, 87, 52, 10, 46, -43, -120, 90, 14, 2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[111, 98, -81, -20, -109, -36, 47, -53, 107, -94, 2, 103, 96, 103, -86, -18]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[117, 86, 73, -103, -17, 66, 109, 42, -3, -56, -109, -110, -97, 33, -88, 64]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-22, -1, -80, 7, -81, -70, 7, -61, 36, -11, 61, 22, 14, 18, 44, 13]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[78, 26, 71, 45, 35, 115, 113, -63, -8, 127, -7, -73, -95, -117, 23, -65]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-36, 38, -49, -18, 58, -86, 62, -18, 93, -50, -58, -33, 10, -16, 8, 8]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[114, 54, -50, 32, 127, -126, -3, 21, 29, 79, 33, 123, 90, -27, -36, -53]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[61, 47, 111, 23, 108, 114, -91, -108, -99, -59, -24, 110, -62, 95, 106, 81]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-36, 38, -49, -18, 58, -86, 62, -18, 93, -50, -58, -33, 10, -16, 8, 8]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-46, -12, 34, -24, -114, 40, 94, 56, -24, 73, -34, -18, 55, 24, 11, -121]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-126, 27, -3, -99, -15, 121, -19, -32, -53, -62, -9, -16, -67, 26, -34, -107]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey78);
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-41, 74, 34, 36, 124, 31, 85, 95, 0, 37, -28, -50, -40, 87, -62, 4]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-99, -18, -72, 96, -66, -121, -80, 54, -97, 120, -7, -125, 13, 49, 93, 121]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[84, 19, -27, 51, 127, 126, 101, -19, -14, 123, 10, 35, 31, 80, -5, -5, -14, 99, -16, -2, -119, 57, 73, -26, 91, 10, -53, 86, 36, 17, 18, -23, -41, 74, 34, 36, 124, 31, 85, 95, 0, 37, -28, -50, -40, 87, -62, 4]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-25, 11, 98, -85, 31, -71, -86, 113, -18, 98, 16, -68, -15, 58, -2, -26, 115, -73, 15, 39, -96, 13, -64, -116, 19, 73, -122, -88, 95, -122, -92, 55, -8, 57, 100, 88, 83, 20, -30, 24, -88, 79, 79, -84, -68, 88, 58, 5, 83, -82, 20, -125, 75, 61, -120, 15, 59, -11, 5, 3, -119, -123, 1, -49, -125, -106, 82, 112, -111, 40, 41, 110, 55, 28, -15, 45, -38, -7, -119, 74, 106, -99, -8, 6, -46, -46, -23, 102, 40, -101, 39, 8, -62, 57, -97, 25, -41, 74, 34, 36, 124, 31, 85, 95, 0, 37, -28, -50, -40, 87, -62, 4]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-25, 11, 98, -85, 31, -71, -86, 113, -18, 98, 16, -68, -15, 58, -2, -26, 115, -73, 15, 39, -96, 13, -64, -116, 19, 73, -122, -88, 95, -122, -92, 55, -8, 57, 100, 88, 83, 20, -30, 24, -88, 79, 79, -84, -68, 88, 58, 5, 83, -82, 20, -125, 75, 61, -120, 15, 59, -11, 5, 3, -119, -123, 1, -49, -125, -106, 82, 112, -111, 40, 41, 110, 55, 28, -15, 45, -38, -7, -119, 74, 106, -99, -8, 6, -46, -46, -23, 102, 40, -101, 39, 8, -62, 57, -97, 25, -41, 74, 34, 36, 124, 31, 85, 95, 0, 37, -28, -50, -40, 87, -62, 4]");
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[39, -62, 122, -49, 32, 98, -62, 123, -122, -91, 16, -27, -4, 127, 37, -74]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[113, -46, 37, 80, -76, -8, -118, 40, -85, 37, -79, -47, 27, 12, 53, 79]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[78, 94, 41, 113, 79, 53, -54, 116, 103, -53, 108, -80, 62, 118, 63, -23]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[108, 3, 37, -32, -108, -111, 62, -127, -115, -15, 84, 61, -42, -24, 64, 85]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[109, 105, -27, -36, 30, -78, -94, 85, 84, -8, -69, 65, 20, -80, -76, -44, 69, 8, 2, -56, -32, 49, 19, 2, -14, -112, 33, 120, 4, -34, -2, 4, 78, 94, 41, 113, 79, 53, -54, 116, 103, -53, 108, -80, 62, 118, 63, -23]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[108, 47, 105, -57, 111, 51, 22, 65, 30, -36, 92, -38, -40, -62, -10, -116, 95, -49, 79, -34, -31, -44, 27, -40, -37, -110, -97, 22, -35, 7, 119, -105, 78, 94, 41, 113, 79, 53, -54, 116, 103, -53, 108, -80, 62, 118, 63, -23]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-56, -47, -40, 45, -34, -110, 94, 24, 36, -61, -68, 74, 6, 79, 124, -121, 84, -62, -44, 108, -9, -82, -37, -12, 112, -90, 11, -112, -62, 18, -49, -35, -22, 86, 80, 73, -10, 80, -61, 8, -115, 43, 13, 39, 89, 37, 117, 49, -96, -29, -52, 41, 126, -69, -19, -62, 55, -61, -110, -93, -20, 115, -37, -2, 26, 95, 61, -126, -85, -84, -56, 117, 29, 19, -87, -89, 103, 14, -27, 4, 98, -102, 105, 71, -26, 59, 75, 91, 57, 7, 59, -127, -77, 47, -52, 102, 78, 94, 41, 113, 79, 53, -54, 116, 103, -53, 108, -80, 62, 118, 63, -23]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[26, -22, 8, -118, 59, 39, 70, -18, -29, -62, -92, -20, -52, -70, -6, 36, 79, 24, -114, 111, -30, -34, -88, 16, -40, 61, 74, -14, 61, -2, -39, 95, 78, 94, 41, 113, 79, 53, -54, 116, 103, -53, 108, -80, 62, 118, 63, -23]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-120, 89, -105, -121, -121, 43, -11, -14, 79, -32, 28, 46, 75, 81, 67, -74, -6, 33, -128, 5, 95, -79, -79, 58, 37, -48, 43, -88, -35, -14, 75, 10, 78, 94, 41, 113, 79, 53, -54, 116, 103, -53, 108, -80, 62, 118, 63, -23]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-128, -25, -73, -111, -117, 14, -4, -101, 89, -87, 49, -84, 110, -123, 76, 2]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[83, -30, 31, -77, 105, -34, -23, -33, -95, 58, -125, 39, 38, -98, -91, 6]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-17, 14, 121, -61, 109, 23, -29, 101, -5, 124, 48, 33, 16, -94, -110, 118]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-20, -38, -92, 20, 82, -1, 104, -49, -11, -17, 117, -115, -46, 80, -36, -12]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[7, 54, 10, -48, -35, -45, -94, 41, 67, -121, 97, 23, -9, 85, 83, 70, -114, 38, 73, -80, 41, 50, -40, -38, -55, -122, -50, 73, 31, -85, 51, 74, -17, 14, 121, -61, 109, 23, -29, 101, -5, 124, 48, 33, 16, -94, -110, 118]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[16, -29, -31, -45, 53, -55, 50, 117, 16, 105, -25, 83, 108, -98, -100, 2, -11, -89, 61, 115, 53, -51, 101, 67, -59, -102, -74, -74, -31, 126, 57, 69, -17, 14, 121, -61, 109, 23, -29, 101, -5, 124, 48, 33, 16, -94, -110, 118]");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[18, -126, 79, 101, -16, 51, -118, -34, 5, -26, 103, -65, 46, -14, -11, -126]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[127, -82, -102, -53, 118, 34, 67, -46, 104, 102, -98, -18, -102, 127, -12, -32]");
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey18);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey30);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-68, -54, 48, -4, 34, -77, -64, -118, 38, -78, -124, -96, 105, -81, 113, -100]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[112, -85, -18, 93, 18, 111, -90, -72, 37, 119, -71, 37, -105, -56, -61, 46]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-23, -117, 85, 12, 13, 72, 98, 126, 65, -76, 83, 100, 73, 58, -97, 110]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[112, -50, 58, -122, 112, -38, -112, 68, -105, 13, 64, 110, 11, -49, 118, -101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[110, 103, 59, -95, 59, -68, 65, 86, 54, 116, -81, -82, -48, -15, 101, -90, -16, -96, 98, -19, 71, 20, -87, -87, 88, 46, 93, -4, 36, -87, -52, -107, -23, -117, 85, 12, 13, 72, 98, 126, 65, -76, 83, 100, 73, 58, -97, 110]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-81, -30, 47, -114, 62, -54, -46, 116, 110, -7, 20, -126, -123, 62, 110, 81, 59, 9, -82, -51, 100, -79, 26, -125, -21, -8, -56, 94, 113, 76, -105, -76, 12, -17, 50, -121, 32, 38, 40, 76, -16, 39, -46, 48, 24, 33, -85, 37, -3, 87, 94, -46, -35, 99, 2, -7, -40, -57, -83, -15, 117, 70, 61, -16, 38, -52, -28, -42, -88, -91, -123, -74, 73, 45, 64, -40, -117, -44, -39, -108, -19, -67, 107, -41, 97, -45, -7, -121, -102, -44, 4, -4, -29, 56, 4, -55, -23, -117, 85, 12, 13, 72, 98, 126, 65, -76, 83, 100, 73, 58, -97, 110]");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-36, -103, -16, -44, 118, 119, -78, -42, -60, -97, 56, -114, 106, -89, 0, 96]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-5, -20, 4, -36, -122, -106, 1, 119, -55, 104, 67, -48, -38, -123, 63, 77]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-3, 103, 45, 0, -29, -52, 19, -61, 47, 22, 21, -87, 3, -31, -92, -122, -61, 58, 121, -114, 26, -76, -93, 83, 62, 89, -112, -8, 67, 115, 9, 69, -71, -34, -88, -88, -32, 55, -49, 3, 45, 4, 38, -15, -94, -73, -110, 32, -100, -4, -25, 79, 84, 97, -122, 103, 119, -114, 110, -37, 66, 23, 102, 125, 91, -105, -56, -117, 70, 73, -101, 66, 97, 34, 120, -27, -68, -45, -112, -113, -65, -36, -116, -26, 58, -35, 124, -17, -98, -27, -10, -100, 120, 62, 21, -6, -36, -103, -16, -44, 118, 119, -78, -42, -60, -97, 56, -114, 106, -89, 0, 96]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-78, -42, -18, -52, 60, -55, -86, 96, 52, -40, -99, -70, -67, -70, -107, 76, 32, -124, 102, 80, -19, -28, -33, -107, 102, -28, -62, -84, 107, 11, 51, -128, -36, -103, -16, -44, 118, 119, -78, -42, -60, -97, 56, -114, 106, -89, 0, 96]");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey32);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey32);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey41);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey47);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey47);
        java.lang.Class<?> wildcardClass52 = byteArray51.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[36, -8, -10, -29, 74, -97, 98, 36, 34, -65, -9, 52, -71, 71, 90, -51]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-81, -69, 34, 90, 71, 45, 42, -73, -63, 109, 58, -16, -54, 49, 26, 3]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[65, 61, 126, -83, 52, -108, -94, 70, -16, 37, 90, -9, 9, -95, 46, -103]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-88, 31, 77, -24, 37, 84, 115, -38, 20, -35, -55, -83, 58, -3, -82, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-59, -86, -57, -77, -115, 118, -77, 108, -60, 111, -42, 99, 13, 123, -55, 23]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[40, 60, -100, -71, -81, 83, -6, -2, 36, -14, 10, 52, 37, -75, -10, -127, -17, 86, -105, 19, -86, -96, 68, -39, 19, 117, -102, -37, -85, 68, 49, 34, -88, 31, 77, -24, 37, 84, 115, -38, 20, -35, -55, -83, 58, -3, -82, 10]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-57, 84, -37, -89, -24, 37, 75, 9, 84, 17, 54, 95, 78, -88, -21, -43]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[72, -62, 82, -26, -34, 42, -67, 101, 103, 53, 50, 94, -27, -31, -127, -94]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-52, -17, 68, 18, -119, 87, 15, -71, -10, 126, -29, -116, 113, -79, -47, 42]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, -77, 121, 109, -57, -57, 122, -108, 101, 7, 125, -64, -46, 63, -70, 65]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[124, -44, 35, -121, -1, -119, 88, -127, 12, -24, 90, 78, 44, -6, -17, -14]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-19, 44, 68, -15, -85, -23, 59, 37, 23, -32, -92, -73, -60, 12, -32, 24]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-86, -68, -71, 89, 39, -9, -15, 93, 95, 97, 38, 102, 52, -55, -6, -61]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[35, 47, 63, -17, 107, 64, -50, -64, -6, 68, 79, 76, -38, 36, 37, -62]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-48, 34, -100, -111, 34, -55, 105, 12, 62, -124, 76, -91, 78, 56, 24, 20, -55, -82, -103, -55, -97, -61, -22, 60, 91, -7, -109, -17, -83, -30, -80, -10, -86, -68, -71, 89, 39, -9, -15, 93, 95, 97, 38, 102, 52, -55, -6, -61]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[28, 74, -9, -75, -56, 93, 14, 1, 123, 70, -7, 108, -45, -35, 44, -126, 55, 87, 5, 49, 6, -91, 95, -23, -104, -9, -119, 81, 69, -56, -85, 49, -86, -68, -71, 89, 39, -9, -15, 93, 95, 97, 38, 102, 52, -55, -6, -61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.Class<?> wildcardClass13 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[116, -122, 123, 68, -127, -35, 17, 46, -71, -13, 113, -53, 76, 77, -123, -45]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[108, -86, 49, -69, -4, -16, 6, -87, 77, -60, 120, 14, -104, 9, 62, -103]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[108, -86, 49, -69, -4, -16, 6, -87, 77, -60, 120, 14, -104, 9, 62, -103]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-40, 2, -84, -55, 0, -26, -97, 86, 62, 113, -125, 19, -123, -69, 82, 71]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "D802ACC900E69F563E71831385BB5247" + "'", str9, "D802ACC900E69F563E71831385BB5247");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "D802ACC900E69F563E71831385BB5247" + "'", str10, "D802ACC900E69F563E71831385BB5247");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "D802ACC900E69F563E71831385BB5247" + "'", str11, "D802ACC900E69F563E71831385BB5247");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "D802ACC900E69F563E71831385BB5247" + "'", str12, "D802ACC900E69F563E71831385BB5247");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-59, -99, 63, 101, -57, -38, -52, 18, -108, 29, -53, 53, 26, 43, -91, -29]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[121, 4, 95, -19, 69, -48, 29, -49, -7, -54, 11, -34, -35, -47, 72, 40]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[121, 4, 95, -19, 69, -48, 29, -49, -7, -54, 11, -34, -35, -47, 72, 40]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[54, -54, -84, -104, 88, 24, 15, -28, 4, -113, -25, -87, -67, 49, -19, -64]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-23, -31, -11, 100, 13, 89, 27, 71, 57, -39, 43, -84, 85, -67, 19, 17, 110, -64, 64, 26, 4, 9, -49, -84, 28, 69, -105, -1, 108, 41, -76, 1, -122, 66, 53, 86, 35, 73, -40, 44, 80, -57, 61, 59, -111, 39, 56, 105, 32, -60, -118, 32, -113, -98, 117, -85, 42, 55, -47, -2, 110, -35, -45, -74, -7, -110, -123, -9, -13, 19, 96, 15, 64, 50, -110, 49, 63, -19, 14, -117, -7, 25, 4, 24, 78, 5, 38, -67, 17, -105, -27, 0, -16, 46, 35, -78, -59, -99, 63, 101, -57, -38, -52, 18, -108, 29, -53, 53, 26, 43, -91, -29]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey51);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey68);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey68);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey68);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey68);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey68);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[99, -78, -52, -119, 116, -110, -114, 113, 34, -114, -121, -61, -60, 111, 116, -119]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[24, -125, 110, 106, -46, 124, -50, 88, -101, 44, 35, 18, 95, -95, 32, 110]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-86, -78, -14, 49, -28, -125, -61, -120, 126, 102, -78, 94, 96, 2, 106, 118]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[29, 33, -122, 29, -46, 40, 86, -67, -53, 7, 0, -41, 119, -110, -119, 88]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[70, 106, 72, -95, -105, 109, 100, -37, 100, 32, 50, 61, -18, -38, -22, -120]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-38, -73, -33, -4, 22, -37, -97, 33, 125, 4, 1, -27, 100, -90, 5, 124]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[106, -11, 95, -107, 92, -21, 16, -16, -73, -37, -42, 73, 92, 32, 49, 41]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[15, 12, 31, -42, 44, -114, 24, 46, 60, -2, -32, 88, 86, -36, 121, 96]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-128, -60, 99, -93, 36, 67, 9, 26, -108, -66, -121, -48, -80, 96, -45, -79]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-87, 17, 76, 109, -123, -97, -49, -77, 105, -17, -116, -9, 0, -95, 71, -89]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[80, -52, -30, 102, -110, -12, -99, 80, -41, 43, 87, 44, -24, -28, 28, -109]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-128, -60, 99, -93, 36, 67, 9, 26, -108, -66, -121, -48, -80, 96, -45, -79]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-3, -22, -102, 17, -112, -66, 98, 28, 92, 33, 123, 96, -89, -98, 35, 99, -98, -13, -4, -30, -85, 52, 30, 1, 34, -49, 110, -37, -42, 64, 117, 54, 74, 16, 68, -93, -48, -14, 78, 102, 60, 12, 47, -127, 125, -30, -108, 94, 83, 121, 62, -79, 107, -93, -85, -105, -39, -20, 65, 116, -55, 116, -42, 85, -70, 96, 58, 50, -12, -21, 97, -59, -11, 15, -93, -17, -91, -67, -84, 72, -45, 15, -107, 10, 56, -120, -1, -98, -112, 75, -60, 89, 106, 104, 88, -30, -128, -60, 99, -93, 36, 67, 9, 26, -108, -66, -121, -48, -80, 96, -45, -79]");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "FDEA9A1190BE621C5C217B60A79E23639EF3FCE2AB341E0122CF6EDBD64075364A1044A3D0F24E663C0C2F817DE2945E53793EB16BA3AB97D9EC4174C974D655BA603A32F4EB61C5F50FA3EFA5BDAC48D30F950A3888FF9E904BC4596A6858E280C463A32443091A94BE87D0B060D3B1" + "'", str59, "FDEA9A1190BE621C5C217B60A79E23639EF3FCE2AB341E0122CF6EDBD64075364A1044A3D0F24E663C0C2F817DE2945E53793EB16BA3AB97D9EC4174C974D655BA603A32F4EB61C5F50FA3EFA5BDAC48D30F950A3888FF9E904BC4596A6858E280C463A32443091A94BE87D0B060D3B1");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[57, 64, -83, 31, 82, -65, -8, 16, 22, 127, -119, -25, -57, -70, -77, -85]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-90, 70, 40, -57, 12, -11, -86, -49, -70, -83, -62, 69, 75, 103, 124, -19]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-87, -27, 127, 71, -18, -56, 101, 32, -128, -12, -109, -73, 80, -25, 23, -56]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[57, 64, -83, 31, 82, -65, -8, 16, 22, 127, -119, -25, -57, -70, -77, -85]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[74, 4, 13, -21, -87, 102, 63, 46, -77, -117, -74, -95, 54, -83, -72, -43, -27, -99, -82, -93, 23, 14, -25, -10, -19, 114, 8, 124, -32, 61, 33, -110, 95, -105, -95, -3, -76, 25, 93, -57, -128, -21, 120, 4, -101, -79, 41, 66, -79, -52, -52, 56, -25, 51, 104, -98, 112, -121, -100, -78, 69, 61, -110, 59, 33, 5, -115, 30, -54, 49, -89, 64, 18, 69, 83, -10, -32, 30, -42, 13, 80, -83, -114, -60, 27, -39, -21, 111, 26, 30, -104, -44, -8, 77, -69, -76, 57, 64, -83, 31, 82, -65, -8, 16, 22, 127, -119, -25, -57, -70, -77, -85]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-123, -76, 24, -3, 10, -40, 38, -66, -48, -59, -32, -19, -8, 97, 116, 111, 29, 113, -71, -35, -6, 108, 28, 87, 64, -11, 78, 36, -122, 18, -117, 3, 57, 64, -83, 31, 82, -65, -8, 16, 22, 127, -119, -25, -57, -70, -77, -85]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, 44, 47, 85, -70, 36, -106, -60, 109, -9, 15, -108, -128, 89, 85, -111, -40, -123, -37, -125, 9, 82, -50, 50, -6, 119, -62, -70, -9, 48, -123, 11, 57, 64, -83, 31, 82, -65, -8, 16, 22, 127, -119, -25, -57, -70, -77, -85]");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey4);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[75, -72, -111, 26, 68, 11, 102, 96, -117, 5, 41, -34, -22, 6, -32, -78]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[71, 20, -32, 119, -12, -44, -94, 117, 109, 24, 66, 10, -49, 68, -109, 14]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-65, 34, 103, -34, 109, 29, -113, 57, -37, 122, -79, -126, -64, -61, -4, -64, 59, 46, -71, 77, 92, -4, 55, 35, 49, 86, -13, 114, -78, 86, -79, 84, 107, -12, 67, 29, -100, -4, -50, -117, 36, -117, 2, -12, -67, -77, -79, -33, 82, -124, 24, -48, -123, 42, -43, -72, -108, 31, -66, -67, -99, 40, 38, 25, 7, 27, 103, -37, -110, 69, 125, 14, 41, 122, -67, -64, -61, -4, -109, 112, 56, 112, 28, -44, -79, 65, -8, -62, 103, 19, 49, 119, 81, 15, 54, -97, 75, -72, -111, 26, 68, 11, 102, 96, -117, 5, 41, -34, -22, 6, -32, -78]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-12, -85, -23, 79, 56, 95, 79, 99, -52, 5, 29, -117, -52, 9, 97, 103]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[101, 63, 108, 76, -86, -102, 51, 87, -35, -17, -113, -55, 38, 37, -102, -116]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[101, 63, 108, 76, -86, -102, 51, 87, -35, -17, -113, -55, 38, 37, -102, -116]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-12, -85, -23, 79, 56, 95, 79, 99, -52, 5, 29, -117, -52, 9, 97, 103]");
        org.junit.Assert.assertNotNull(byteArray19);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-127, 15, -23, -74, 109, -118, 82, -117, -84, 99, 125, 18, -2, 23, 103, 111]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-33, 56, 99, 51, 85, -116, 96, -14, 101, -92, 61, -41, 70, 85, -4, -33]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[13, 90, 121, 114, -108, -127, 17, -122, 52, -8, -106, -117, 92, 120, 21, 91, -93, -7, -73, 13, -24, 45, 77, -128, -63, -4, -91, -88, 20, -1, 20, 118, 100, 74, 3, 36, 109, -127, 52, 75, -65, -127, 111, -75, 14, 73, -48, 116, -79, -99, -72, -116, 30, 85, 107, 96, -90, -15, 62, 18, 0, 64, -125, -118, 102, -63, -113, 35, 26, 124, 125, -112, -72, 93, 82, -20, -70, 79, 27, -104, 83, 68, 48, 80, 100, 104, 107, 77, 67, 118, 90, -32, -121, -93, -31, -95, -127, 15, -23, -74, 109, -118, 82, -117, -84, 99, 125, 18, -2, 23, 103, 111]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-101, 10, 103, 116, -98, 51, 41, 20, -28, -102, -122, -119, 75, 101, -80, 51, 95, -49, 25, -53, 34, 64, 43, -91, -38, 93, 85, -35, 55, -13, -35, -51, -127, 15, -23, -74, 109, -118, 82, -117, -84, 99, 125, 18, -2, 23, 103, 111]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-89, -29, -93, 127, -65, 39, -78, -70, 58, -89, -77, 3, -83, -64, -64, -49, -61, -125, -77, -123, 27, 67, -107, -81, -122, 99, 106, -110, -84, -125, -21, -102, -87, -36, 120, 6, -111, 31, -95, 2, 117, -44, -76, -75, -34, 119, -1, -82, 7, -73, -30, -90, -54, -15, -71, 46, 100, -110, -79, -53, -74, -61, 42, 105, -92, 49, 80, -51, -20, 14, -1, -64, -13, 11, -94, -87, 78, -24, -56, -93, 56, 42, 85, -35, -112, 100, 2, 75, 109, -7, -67, -90, -4, 84, 72, -71, -127, 15, -23, -74, 109, -118, 82, -117, -84, 99, 125, 18, -2, 23, 103, 111]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey4);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey30);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("785D85238EF6058BD3CBAAA7366D7F415A8722502FC5E50082C9918733F9B3B0C8F7350F7CB66869038D210C0114B59BDA9757FAD4C615A36FB13B100BBE29A286D4D18998E6A4BE07D276C9D4699B9281A29F98AE8D4D678FADD8931E0FE4D12898879AC63D43C168E02747B342775F", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-26, 91, 31, -86, 17, -91, -29, -82, 47, -119, 33, 19, 15, 38, 29, -67]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-34, 65, -113, 78, 38, 47, 6, 31, -32, 13, -128, 76, 66, 78, 107, 114]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-34, 65, -113, 78, 38, 47, 6, 31, -32, 13, -128, 76, 66, 78, 107, 114]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-71, 4, -84, 39, -94, 63, 21, -2, -9, 111, 116, 74, 11, -56, -85, -127, -89, 32, 71, -9, 45, 29, -23, -61, 113, 67, -21, 111, -30, 126, 50, 68, -26, 91, 31, -86, 17, -91, -29, -82, 47, -119, 33, 19, 15, 38, 29, -67]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[15, -39, 29, -114, 37, 108, 46, -56, 103, 80, 28, 103, 19, -100, -125, 111]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-44, 100, -95, -113, 84, -39, 34, -80, 123, 40, -51, 85, -91, 31, -68, -21]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-127, -43, 48, 91, 113, 81, 52, 30, 92, 109, -76, -114, 126, -13, -128, -62]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-43, -75, 91, 2, 95, -36, -20, -19, -59, -26, -81, 122, -92, 30, 84, 95]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, -124, 60, -83, 85, 17, 116, 76, 35, -15, 114, 56, -101, -48, 41, 79, -64, -1, 44, -32, -93, -115, -45, 5, 127, 67, 0, 98, 102, 67, 81, -87, -127, -43, 48, 91, 113, 81, 52, 30, 92, 109, -76, -114, 126, -13, -128, -62]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey28);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey58);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey67);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey67);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey67);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey67);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey67);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey67);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-103, -84, -54, 121, 21, 88, 87, -123, 3, -113, -119, -83, 81, -123, -47, 30]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 108, 124, 37, 34, 35, 50, 85, 64, -31, 125, -48, -7, -110, -55, -49]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[42, 67, 61, 72, 63, -114, -19, 105, -79, 104, 90, -8, 6, 78, -53, -68]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-70, -81, -85, -3, 89, 79, 49, 0, -48, 112, 91, 57, -15, -77, 47, -16]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[19, -51, 107, -29, -70, 122, 8, -69, 125, 87, 56, 9, -34, -82, -86, -42]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[30, 20, 107, -20, 98, -83, 98, 107, 39, 3, -101, 32, 5, -5, 86, 36]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[30, 20, 107, -20, 98, -83, 98, 107, 39, 3, -101, 32, 5, -5, 86, 36]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[54, -76, 43, -117, -96, 64, -54, 110, -48, 107, -128, -38, -49, 23, 63, -70, -85, -110, -17, 16, -42, 72, 14, 107, 40, -75, -85, 70, 88, -56, 34, 97, 19, -51, 107, -29, -70, 122, 8, -69, 125, 87, 56, 9, -34, -82, -86, -42]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[76, -48, 50, 63, 53, -127, 108, 57, 24, -61, -103, 30, -97, -32, 22, -70, 35, 80, -105, 38, 6, 55, 24, -69, -60, 37, 28, 46, 111, -50, -111, -105, 19, -51, 107, -29, -70, 122, 8, -69, 125, 87, 56, 9, -34, -82, -86, -42]");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "4CD0323F35816C3918C3991E9FE016BA23509726063718BBC4251C2E6FCE919713CD6BE3BA7A08BB7D573809DEAEAAD6" + "'", str36, "4CD0323F35816C3918C3991E9FE016BA23509726063718BBC4251C2E6FCE919713CD6BE3BA7A08BB7D573809DEAEAAD6");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[61, -109, 103, 27, 28, -77, 71, -39, -91, 123, -121, 92, -95, 123, 117, 8]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[66, 7, 44, 46, 15, -98, 49, -94, 90, 3, -85, 122, 45, 67, 98, 78]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[61, 8, -10, 50, 108, 69, -121, 104, -47, 50, -59, -49, -66, -97, 10, 59]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-61, -83, -33, -51, -46, -101, 57, -100, -107, -48, 120, 24, 56, -103, 106, -88]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[120, -55, 102, 107, 31, -57, 88, 65, 73, 114, 81, 46, -19, 121, -77, -45]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[3, -37, 95, -86, -58, -28, -57, -54, 45, 115, 55, -15, -72, 61, 117, 123]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[3, -37, 95, -86, -58, -28, -57, -54, 45, 115, 55, -15, -72, 61, 117, 123]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-88, -125, -9, -5, 1, -52, -46, -126, -61, 115, -49, -38, -117, 66, -112, 99, 34, -43, 70, -122, -115, -8, -44, 14, -13, -124, 121, -122, -54, 7, -98, -83, 120, -55, 102, 107, 31, -57, 88, 65, 73, 114, 81, 46, -19, 121, -77, -45]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[50, -42, 85, 9, 74, -111, -57, -86, -78, -73, 73, -128, -93, -7, 99, -6, 3, -64, -99, -40, -92, -112, 71, -4, -9, -49, -23, -61, -76, 118, 12, 110, 120, -55, 102, 107, 31, -57, 88, 65, 73, 114, 81, 46, -19, 121, -77, -45]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray76);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey40);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        java.lang.Class<?> wildcardClass50 = byteArray48.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-41, 23, -29, -79, -18, -116, -46, -7, 80, 59, 5, -28, 79, 38, 112, -78]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-50, -113, -116, 72, 21, 45, 56, 121, -65, 105, 22, 100, -71, -86, -2, 42]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-14, 30, 9, 99, 91, 63, -17, -107, 40, -70, 76, 74, 74, -2, -81, -60]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-19, 112, 105, 124, -1, -95, -52, -47, 74, -111, -118, 0, 117, -92, -82, -93]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-11, 75, 83, -16, -54, -24, 32, 1, -81, 115, -81, -31, -111, 59, 14, 70]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[64, -28, -119, -44, 124, -91, 125, 3, 109, -46, 120, -64, 81, 84, 125, -38]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-2, -56, -41, 16, 105, 24, 107, 98, -54, -43, 22, -111, -27, -112, 47, 36]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[74, -79, -99, 61, 13, -37, 124, -120, -64, -52, -18, -88, -80, 117, 48, -8]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[122, 124, -42, -108, 91, 78, -12, -98, 111, 15, -6, -121, 31, 31, -25, 7, -30, -94, -51, 27, 61, -65, 43, -67, 44, 63, 22, -31, 105, -45, 127, -45, -2, -56, -41, 16, 105, 24, 107, 98, -54, -43, 22, -111, -27, -112, 47, 36]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[110, -124, 101, -39, 120, 124, 5, -79, 113, -32, 73, -119, -4, 5, 95, 87, 108, -7, -93, -46, 66, 105, 112, -86, 106, 108, -63, -51, 110, -111, -92, 112, -2, -56, -41, 16, 105, 24, 107, 98, -54, -43, 22, -111, -27, -112, 47, 36]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24" + "'", str49, "52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6EA4E116455BC7AF3FB5BF064D6F874CB5F555408DB9AD9F9733DFD99DAC4D7FEEE704EFF20D5601E11B02E83309E581", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.Class<?> wildcardClass16 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, -117, 115, -103, 67, -58, -3, 50, 86, 95, -79, -97, -66, -118, 59, -71]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-95, 43, 37, 61, 100, -33, -66, -65, 103, -120, 111, -103, -127, 54, 26, -124]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[62, 78, 125, 72, 91, -104, 65, 18, -49, -109, -35, -92, -93, 98, 42, -15]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[70, -117, 115, -103, 67, -58, -3, 50, 86, 95, -79, -97, -66, -118, 59, -71]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-18, 107, -9, 64, -118, 82, -99, 52, 79, -29, 122, 118, 66, -35, 32, -127, -125, -109, 77, 52, -75, -66, -79, -53, 2, 91, -25, -107, 2, 50, 16, -64, 81, 81, 62, -34, -16, 54, -11, 99, -79, -107, 49, -102, 98, -21, 38, -28, -90, 87, 0, -71, 77, -86, 18, 28, 29, 63, 112, -58, -53, 111, -28, 119, 86, -37, 47, 37, 107, 47, 40, 70, 104, 2, 97, -73, 115, -42, 45, -36, 35, -5, -102, 69, -71, 73, 49, 118, 88, -76, 119, 22, -68, 12, -60, 93, 70, -117, 115, -103, 67, -58, -3, 50, 86, 95, -79, -97, -66, -118, 59, -71]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[86, -39, -95, -2, -10, -59, 1, -73, 96, 39, -90, -75, -45, -62, 103, 111, -17, 25, 1, 23, -106, -86, -3, 90, 50, 102, -82, -116, -37, -103, 76, -47, 70, -117, 115, -103, 67, -58, -3, 50, 86, 95, -79, -97, -66, -118, 59, -71]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-88, 94, -21, -68, -41, -121, -45, -17, -2, -110, 104, 123, -103, -47, 102, -20, -83, 14, -77, 107, -29, -40, 54, 81, 48, 88, -45, -32, -37, -107, -65, -3, 76, -21, -37, -9, 37, -96, 36, 24, 46, -87, -7, 66, -26, -33, -2, 5, -33, 22, 87, -26, -14, 9, -71, 29, -45, -122, 6, -45, 27, -61, -3, 6, 113, 89, 47, 57, -84, -89, -33, 17, -36, -15, 61, 26, 7, 72, -125, 36, -18, -34, 74, -11, 14, -61, -31, 15, 49, 55, 22, -100, 95, 51, 67, 85, 70, -117, 115, -103, 67, -58, -3, 50, 86, 95, -79, -97, -66, -118, 59, -71]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "A85EEBBCD787D3EFFE92687B99D166ECAD0EB36BE3D836513058D3E0DB95BFFD4CEBDBF725A024182EA9F942E6DFFE05DF1657E6F209B91DD38606D31BC3FD0671592F39ACA7DF11DCF13D1A07488324EEDE4AF50EC3E10F3137169C5F334355468B739943C6FD32565FB19FBE8A3BB9" + "'", str15, "A85EEBBCD787D3EFFE92687B99D166ECAD0EB36BE3D836513058D3E0DB95BFFD4CEBDBF725A024182EA9F942E6DFFE05DF1657E6F209B91DD38606D31BC3FD0671592F39ACA7DF11DCF13D1A07488324EEDE4AF50EC3E10F3137169C5F334355468B739943C6FD32565FB19FBE8A3BB9");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey40);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey56);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey56);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey56);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey56);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey56);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[37, 18, 103, -83, 44, 80, -118, 127, 21, -62, 12, -46, -68, -115, 45, 41]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-80, -105, -70, -114, 24, 0, 14, 74, -16, -16, 65, -114, -61, 54, 72, -118]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-9, 99, 65, 102, 82, -87, 82, 38, -107, 126, 57, -20, -78, -124, -110, 84]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[81, 70, -4, -29, 85, 58, -91, -18, 80, 38, -122, 61, -105, 39, 10, -101]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-79, 73, 73, -53, -76, -61, -98, 32, 102, 30, 84, 101, -12, -82, -80, -91]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[54, -32, 113, -84, 21, -125, 70, -44, -115, -116, 78, -25, 10, 49, 117, -14]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, -93, 14, 43, 58, -57, -7, 97, -92, 50, 98, 25, -116, -54, -57, 9]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[84, -74, -35, 84, -36, 91, 84, 42, 119, -122, -105, 5, -102, 43, -69, -50]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-85, -35, 93, 91, 42, 70, 108, -105, -110, 75, -8, -30, -121, 7, -21, 70, 61, -79, 102, 109, 70, 97, -87, -67, -61, 13, 119, 2, -47, -18, -48, 46, -1, -93, 14, 43, 58, -57, -7, 97, -92, 50, 98, 25, -116, -54, -57, 9]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[28, 11, -33, -40, 26, 5, 20, -12, -61, 87, -113, -97, 91, 104, -43, -45, 25, -18, -34, -49, 123, 118, -85, 109, 63, -20, -63, 44, 68, -82, 63, -126, -1, -93, 14, 43, 58, -57, -7, 97, -92, 50, 98, 25, -116, -54, -57, 9]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[69, -64, 22, 112, -27, 9, 58, 81, 44, -122, -6, 93, -37, -36, -34, -93, -78, -10, 93, -91, 19, 54, 61, 73, 25, -19, -52, 107, 61, -127, 1, -112, 63, 17, -3, 48, 57, 60, 117, 57, -47, 109, 84, -34, -86, 97, 8, 34, 33, -19, 84, -74, 80, 36, -123, -12, 38, 42, -49, -7, 19, 3, -75, -10, 78, 109, -117, -79, 107, 114, -121, -4, -51, 126, -25, 119, -12, -9, 125, 112, -69, -128, 40, -23, 25, 120, -63, -37, 59, -47, -48, -118, -45, -22, 88, -38, -1, -93, 14, 43, 58, -57, -7, 97, -92, 50, 98, 25, -116, -54, -57, 9]");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-122, -56, -71, -53, -47, -64, -84, -22, 51, 72, 81, -124, -18, -21, 65, -56]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-77, -100, 88, -112, 90, 60, -87, -71, 20, -72, 90, -50, -13, 32, 72, 106]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-124, 32, 24, 77, -94, -36, -116, 57, -30, 14, 83, -105, 82, -119, -89, -113, -125, 108, -7, 47, -35, -22, -106, -24, 86, -124, -22, 13, 114, -83, -59, 103, 9, 101, 88, -23, -18, 63, -81, -4, -72, 35, -2, 122, 92, -118, 113, -44, 69, 126, 31, 82, 50, -79, -34, -120, 121, 35, 10, 44, 98, 65, 120, 93, 11, -24, -53, 98, 81, 12, 93, 3, -16, 87, 108, 82, -101, -17, 104, 68, -125, 60, -94, -101, 42, -14, -108, -10, 24, 91, 24, -55, 51, -82, 81, 56, -122, -56, -71, -53, -47, -64, -84, -22, 51, 72, 81, -124, -18, -21, 65, -56]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-79, 116, 112, 44, 66, -90, 100, -75, 123, -56, -64, -25, 27, 20, 38, -43, -25, 92, -79, -67, -35, -128, -102, -54, -79, 28, 22, 50, -18, 83, 24, -90, -122, -56, -71, -53, -47, -64, -84, -22, 51, 72, 81, -124, -18, -21, 65, -56]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[103, -114, 70, 95, 117, -61, 32, 13, -112, 123, -60, -26, -49, 79, -95, -25, 44, 65, 30, 43, -115, 111, -53, 18, -15, -59, -114, 64, -3, -114, 3, -119, 5, -32, -3, -116, 23, -64, -90, 1, -51, 72, -47, -82, 62, -35, 65, -98, -65, 26, -27, 35, 99, -38, 71, 61, 108, 14, 62, -15, -120, -111, -20, 43, 44, -88, 76, -110, -42, -41, -88, 88, 19, -66, 18, 29, 50, 118, 114, 73, 23, -99, -1, -40, 112, 83, 57, -4, -4, 0, 78, 105, 109, 107, -15, 87, -122, -56, -71, -53, -47, -64, -84, -22, 51, 72, 81, -124, -18, -21, 65, -56]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-55, -108, 46, 33, -10, 85, -9, -111, 86, -56, 34, -97, -85, 6, 123, 59, -52, 29, 8, 34, -28, 106, 57, 38, -15, -29, -127, 15, -100, -83, 78, 35, -122, -56, -71, -53, -47, -64, -84, -22, 51, 72, 81, -124, -18, -21, 65, -56]");
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[75, 68, -99, 111, 30, 25, -23, 9, 90, 79, 29, -128, 30, -83, -87, -21]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[95, 31, -41, 76, -51, 51, 33, 4, -1, -122, -10, 72, 16, -116, 90, 110]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-14, -31, 44, -105, 38, -47, -73, 38, -121, -67, -30, -100, 78, 10, 11, -7]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-7, 55, 89, 4, 30, -66, 120, -19, 40, 51, 7, 60, -90, 121, -3, 113]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[85, -111, -101, -114, -113, -42, 99, -40, -49, -124, -126, -125, -66, 27, -117, 3, 102, -21, 45, -75, 51, -93, -19, -28, 125, 38, 95, -70, -9, 103, 62, -5, -14, -31, 44, -105, 38, -47, -73, 38, -121, -67, -30, -100, 78, 10, 11, -7]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[78, -41, -110, -60, 124, 5, -128, 100, -100, 30, 86, -54, 70, 82, 4, -1, 18, -106, 84, -111, 60, -23, 110, -102, 56, -2, -110, -84, -14, -32, 59, -8, -14, -31, 44, -105, 38, -47, -73, 38, -121, -67, -30, -100, 78, 10, 11, -7]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-90, 67, 118, 36, 53, 89, 124, 48, -78, -73, -16, -99, -77, -37, 48, 92, -113, 69, -120, 46, 123, -113, 84, 99, 88, 119, 60, 14, 66, -31, -68, 125, 118, -31, -81, -104, -59, 77, -80, 55, 13, 72, -109, 98, 102, -93, 119, 49, -24, -126, -112, -10, -40, 2, -36, -106, 65, -33, -126, -42, 3, 57, 100, 4, -46, 109, 88, -101, -62, -114, 16, 86, 120, -127, -99, -107, -110, 90, 13, 18, -19, -86, -59, 46, 63, -20, 102, -16, -69, -24, 73, -32, -125, 43, 107, -60, -14, -31, 44, -105, 38, -47, -73, 38, -121, -67, -30, -100, 78, 10, 11, -7]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[115, -74, 119, 59, -57, -54, -101, 114, 55, -123, -120, 38, -80, -70, 33, 57, -55, 36, 43, -55, 90, -96, 44, 87, -25, 0, -4, 28, 87, 111, -80, 3, -57, -63, 64, 33, -5, -97, -82, 66, -27, 78, -15, -75, -77, -101, -75, 119, -45, 24, -29, -50, -116, -75, -38, 3, -112, 59, 5, 32, -86, 62, -73, 16, 51, 94, 98, 54, -28, 57, -17, -70, -23, -5, 57, -52, -128, 115, -52, 90, -100, 120, -102, 28, 103, -72, -33, -38, -91, 64, -61, 77, -71, -99, 127, -58, -14, -31, 44, -105, 38, -47, -73, 38, -121, -67, -30, -100, 78, 10, 11, -7]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[105, 45, 22, -56, 72, 19, 12, 34, 124, 78, -50, -102, -75, -24, -92, -31, 61, 74, 116, 110, 89, -78, 75, 39, -2, -84, -68, -92, 36, -10, -21, -17, -14, -31, 44, -105, 38, -47, -73, 38, -121, -67, -30, -100, 78, 10, 11, -7]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "692D16C848130C227C4ECE9AB5E8A4E13D4A746E59B24B27FEACBCA424F6EBEFF2E12C9726D1B72687BDE29C4E0A0BF9" + "'", str31, "692D16C848130C227C4ECE9AB5E8A4E13D4A746E59B24B27FEACBCA424F6EBEFF2E12C9726D1B72687BDE29C4E0A0BF9");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[70, -34, -119, 7, 19, 103, -92, 69, 14, -83, -57, 67, 87, 5, -102, 126]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[81, 94, -3, 63, -5, -91, -23, 6, 78, -58, 7, 80, -123, 108, 62, 31]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-86, 32, -54, -75, 38, 15, 111, 33, -109, -84, -17, -80, 59, -72, -81, -69]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[20, 5, 51, 99, 29, 18, -81, -98, 95, 57, 96, -84, 114, -125, -28, 53]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-33, 24, 23, -34, 6, 29, 72, 43, -104, 38, -99, -91, 69, 4, 38, 45, -94, 121, 15, -52, -79, 5, -76, 10, 55, 101, 31, 79, 38, -92, 29, -127, -86, 32, -54, -75, 38, 15, 111, 33, -109, -84, -17, -80, 59, -72, -81, -69]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[8, -43, 24, -26, 95, 91, -28, -127, 28, 65, 59, -44, -63, -102, -58, 48, -79, -25, 124, 51, -32, 16, 50, -85, -42, -59, 95, -96, -13, -113, 74, -41, -86, 32, -54, -75, 38, 15, 111, 33, -109, -84, -17, -80, 59, -72, -81, -69]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-57, 63, 124, -18, 56, 75, -44, 112, -56, -98, 41, 49, 1, 32, -120, 60, -105, 127, 127, -36, 74, -55, -31, -38, -9, 103, -51, 16, 94, -62, -43, 88, -47, 11, 63, -17, 41, -21, 36, 45, 94, 103, -87, -109, -82, 40, 98, 44, -38, -92, 73, 112, 48, -88, -86, -83, -120, -82, -47, 98, -10, 123, 32, -90, -112, 26, -54, 31, 114, -127, -3, -110, -99, 112, 102, 86, -110, -111, 51, -13, -64, -81, 107, 62, 0, -67, -39, 24, -61, -26, 4, -6, -122, 117, -46, 31, -86, 32, -54, -75, 38, 15, 111, 33, -109, -84, -17, -80, 59, -72, -81, -69]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-120, -115, 80, 98, 49, -8, 28, -97, 73, -84, 80, -24, 41, -50, -98, 32, 84, -127, -43, 31, -101, 22, -122, 63, 126, 60, -11, 77, -34, 106, 127, 79, -86, 32, -54, -75, 38, 15, 111, 33, -109, -84, -17, -80, 59, -72, -81, -69]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-52, -101, 32, 72, -109, 73, 16, -1, -67, 95, 94, 108, 76, -2, -125, -89, 83, -59, 86, -119, -87, 14, -17, 81, -15, -43, 88, -52, 111, -68, 116, 126, 44, 107, 78, 68, 17, -65, 118, -119, -57, -48, -90, 39, -31, -107, 36, 81, 98, -62, 86, -101, 75, -114, -58, -39, -113, -4, 37, 62, 86, 85, 98, 31, 44, 89, -39, -91, -98, -43, 118, 38, -77, -118, -32, 107, -110, 96, 13, -118, -17, -42, -125, 121, 2, 98, -106, -85, -117, -27, 36, 103, 115, -110, 40, 64, -86, 32, -54, -75, 38, 15, 111, 33, -109, -84, -17, -80, 59, -72, -81, -69]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("3AB65B951573AAAA471D3ECAAFE824C61AF2F931BC7D781A0A8195D89794664542DC13F306A8A176F05508EAACB4A68C", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.Class<?> wildcardClass30 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-114, -21, -110, -105, -122, 127, -17, 94, -59, -48, 16, -4, -101, -47, -18, -8]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-55, -23, -124, -15, 111, 30, 26, -101, -66, -66, -37, 81, -34, 2, -38, -84]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[21, 12, -17, -22, 22, 8, -41, 105, 84, -79, -96, 34, -82, 65, -51, -63]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-105, -16, -76, -85, 113, -45, -33, -89, -13, -113, -55, 23, 76, -15, -13, 96]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -9, -12, 81, -36, -121, -124, 56, -32, -73, -11, -11, 51, 123, 124, 19, 15, 86, 44, -56, -88, -72, 12, -38, -45, -72, 62, -57, -83, -30, 111, -34, 21, 12, -17, -22, 22, 8, -41, 105, 84, -79, -96, 34, -82, 65, -51, -63]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[5, -42, 100, -109, 93, -66, 33, -103, 50, -66, 84, -3, 2, 103, 46, -53, -118, 73, 113, -45, 99, 67, -49, -15, -91, 22, -46, -92, -6, -108, -78, -91, 21, 12, -17, -22, 22, 8, -41, 105, 84, -79, -96, 34, -82, 65, -51, -63]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-14, 22, -31, 22, -69, -31, 18, -123, 90, 104, -109, 24, 63, 71, 94, 3, -69, 64, 0, -11, 94, -88, 1, -59, -19, 102, 118, 35, -91, -109, 23, 14, 41, -64, -60, -33, 122, -112, -74, 121, 66, 97, 59, -108, -127, -47, 118, -26, 110, 115, -1, 82, 101, 34, 87, -10, 102, -52, -13, -97, 18, 54, -89, 48, 7, 5, 116, 85, -57, -52, -64, 107, 115, 83, -102, 125, 105, 91, -64, 104, 70, -72, 77, 25, -108, -78, 123, 6, -120, 99, -9, 105, -10, 8, 52, -35, 21, 12, -17, -22, 22, 8, -41, 105, 84, -79, -96, 34, -82, 65, -51, -63]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[19, -25, -29, -122, 90, 110, 108, 44, -99, -71, -6, 87, 127, -20, 72, -28, -45, -99, 98, 84, -87, -92, 91, -116, 61, 34, 6, 62, 61, 58, 110, 15, 21, 12, -17, -22, 22, 8, -41, 105, 84, -79, -96, 34, -82, 65, -51, -63]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "13E7E3865A6E6C2C9DB9FA577FEC48E4D39D6254A9A45B8C3D22063E3D3A6E0F150CEFEA1608D76954B1A022AE41CDC1" + "'", str29, "13E7E3865A6E6C2C9DB9FA577FEC48E4D39D6254A9A45B8C3D22063E3D3A6E0F150CEFEA1608D76954B1A022AE41CDC1");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, 111, 91, -90, 14, 80, 49, 81, -9, -54, -92, -82, 29, -125, -102, -123]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[51, -86, -87, 25, -99, 88, -30, 6, 120, -53, 45, 34, -122, 34, 42, -14]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-94, 30, -59, -112, -18, 80, -35, 47, 45, -105, 75, -87, -42, 80, 51, -35]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "A21EC590EE50DD2F2D974BA9D65033DD" + "'", str7, "A21EC590EE50DD2F2D974BA9D65033DD");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "A21EC590EE50DD2F2D974BA9D65033DD" + "'", str8, "A21EC590EE50DD2F2D974BA9D65033DD");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey5);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey15);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey15);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey15);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-124, -76, 17, 121, -113, -2, -20, -65, -17, 63, 9, -41, -81, 95, 124, -107]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-110, 5, 92, -105, 54, 92, 66, 93, 120, 55, 115, -5, -75, 118, -1, -54]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-110, 5, 92, -105, 54, 92, 66, 93, 120, 55, 115, -5, -75, 118, -1, -54]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[125, 12, 40, 6, -84, -25, 57, -63, -37, -82, -97, 124, 89, -10, -18, -93]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-119, 27, 57, -116, 89, -80, -20, -35, -47, 14, 127, 10, -58, 28, 93, -9, 76, -125, -8, 74, 48, 42, -25, -36, 19, 33, -2, 46, -49, 14, 127, 46, 108, 67, 122, 71, 111, -29, -14, -50, 38, -61, 123, 112, -28, -82, -88, 60, 47, 118, 12, 112, 77, -47, -43, 58, -93, -46, -81, -42, -102, 71, 34, 80, 52, -103, -45, -84, 68, 13, -32, 10, -9, -8, 48, -38, 46, 47, 70, -69, -61, -120, -59, 97, 52, 3, 69, 10, -41, -4, 76, -98, 86, 48, -87, 95, -124, -76, 17, 121, -113, -2, -20, -65, -17, 63, 9, -41, -81, 95, 124, -107]");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-102, -56, 18, 72, 8, -56, -82, -25, -71, 70, 110, -7, -46, 7, 6, 67]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-84, -67, 5, 6, 49, 123, 114, 51, -119, 41, -10, -39, 33, -101, -85, 110]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-77, -103, -76, -52, 71, 82, 55, -10, 66, 0, 43, 104, -71, 46, -67, 98, 2, 71, -40, -108, -37, 2, -76, 94, 64, 34, -110, -18, -2, -113, -87, 74, -102, -56, 18, 72, 8, -56, -82, -25, -71, 70, 110, -7, -46, 7, 6, 67]");
        org.junit.Assert.assertNotNull(byteArray19);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey8);
        java.lang.Class<?> wildcardClass17 = byteArray16.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[26, -6, 1, -51, 44, 5, 92, 53, -68, 126, -42, -29, -22, 103, -41, -61]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[115, 101, -38, -31, 73, 40, 78, 111, -107, 80, -25, 79, 104, 1, -35, -14]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, 101, -38, -31, 73, 40, 78, 111, -107, 80, -25, 79, 104, 1, -35, -14]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[70, -8, 110, 21, 70, -91, 83, -93, 65, 119, -53, -57, -21, -9, 55, -46]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[26, -6, 1, -51, 44, 5, 92, 53, -68, 126, -42, -29, -22, 103, -41, -61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, -118, -74, 36, -38, -49, -73, 68, -113, 49, -111, -101, 19, -87, 107, 8, -19, 84, 113, -82, 27, 120, 57, 85, 122, -34, -121, -110, -28, -27, -10, 119, -27, -35, 4, 97, -102, -118, 87, -119, -116, -106, 10, 85, -51, -48, -61, -59, -29, 70, -11, -74, 122, -44, 66, 77, -85, 32, 96, 44, 6, -105, 73, 30, 85, 117, 33, -102, 70, 58, -110, 21, -111, -19, -72, 127, -24, -71, -94, -91, -91, 5, 5, -110, 56, -31, -87, 79, -116, 77, -2, 98, -120, 1, 57, 32, 26, -6, 1, -51, 44, 5, 92, 53, -68, 126, -42, -29, -22, 103, -41, -61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-114, -125, -99, -107, 4, -74, -34, 91, -74, 53, 115, 11, 37, 116, -57, -63]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, 8, -54, -52, -15, -8, -97, -116, -99, -8, -3, -47, -94, -38, -118, -56]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-46, -105, -104, 117, 91, 74, 35, -77, -91, 93, 58, 125, -50, -31, -103, -101, -116, 117, 78, 43, -6, 84, -81, 1, 33, 71, -96, -72, 12, -100, 53, -67, 107, 75, -12, -111, 33, -10, 104, -106, 110, 52, -102, 105, 110, 80, 18, 122, -20, -30, -113, -16, 97, -29, -14, -9, 60, 90, 127, 40, -127, 18, 63, 101, 19, -82, 22, -99, 100, 38, -119, 16, -7, -80, 101, -65, 67, -118, 46, 78, -21, -28, -106, -61, 73, -116, -126, 110, 92, -65, -87, -22, 30, -114, 59, 121, -114, -125, -99, -107, 4, -74, -34, 91, -74, 53, 115, 11, 37, 116, -57, -63]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[119, -72, -125, 84, 47, 92, -71, 81, -2, 104, 15, 51, -28, 115, -21, 59, 86, 23, 10, -71, 74, 2, -117, -34, -98, -28, 19, -66, -52, 51, 113, 7, -114, -125, -99, -107, 4, -74, -34, 91, -74, 53, 115, 11, 37, 116, -57, -63]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-100, 6, 49, -6, -87, -70, -106, 76, 58, 37, 18, 90, -43, 83, -58, 32, -92, 58, -60, 56, 72, -12, 45, 53, 4, 18, -110, -114, 12, -20, -41, -37, -114, -125, -99, -107, 4, -74, -34, 91, -74, 53, 115, 11, 37, 116, -57, -63]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[31, 29, 32, -80, -111, -86, 96, 19, -121, -70, -115, 21, 9, -37, -38, -91]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-58, 107, -80, -21, 104, 51, -53, 90, 72, -103, -101, -87, 70, 125, -64, -66]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-118, -70, 24, -30, -50, 77, 86, 29, -94, 31, -125, -13, -117, -62, 111, -34]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-124, 90, -67, 60, -113, -66, -46, 73, -117, -21, -1, 75, 68, 25, -3, -4, -29, -28, -27, 12, 15, 85, 48, 68, 36, 110, 34, -14, 119, 85, 101, 86, 31, 29, 32, -80, -111, -86, 96, 19, -121, -70, -115, 21, 9, -37, -38, -91]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[9, 16, -72, -94, -106, 88, -105, 117, -83, -18, -116, -35, -122, -25, 95, -77, -20, 12, -103, 35, -91, 74, -26, -7, 36, -70, 69, 120, 102, 28, 126, -68, 31, 29, 32, -80, -111, -86, 96, 19, -121, -70, -115, 21, 9, -37, -38, -91]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[121, -11, 63, 87, -74, 72, 60, -121, -85, -37, -51, 108, -76, 24, -31, 118, 38, -25, 28, -3, -97, -84, 64, -3, 2, 1, 122, 35, -8, 29, 98, -11, 31, 29, 32, -80, -111, -86, 96, 19, -121, -70, -115, 21, 9, -37, -38, -91]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "79F53F57B6483C87ABDBCD6CB418E17626E71CFD9FAC40FD02017A23F81D62F51F1D20B091AA601387BA8D1509DBDAA5" + "'", str13, "79F53F57B6483C87ABDBCD6CB418E17626E71CFD9FAC40FD02017A23F81D62F51F1D20B091AA601387BA8D1509DBDAA5");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[22, -56, -122, 31, 39, 4, -11, 26, -126, 65, -26, -103, -118, -42, -100, 74]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-95, -74, -100, -47, -12, 45, -74, -79, -38, -110, 73, 83, -66, 66, 67, 109, -107, 18, -103, -72, 11, -35, 79, -7, 32, -68, -17, 63, -45, 54, -44, -46, -75, -5, 94, 80, -15, -6, 121, 66, -127, 89, 30, 119, -116, -28, 102, -73, 94, 7, -48, 15, -39, 88, -31, -103, 84, 77, 37, -127, 84, 115, 82, 6, -70, 11, -78, -47, -70, 68, -72, -86, 58, -37, 39, -114, -56, 63, -60, 69, 69, -117, 51, -105, -122, 38, -2, 21, 87, 30, -30, -57, -125, 7, -104, 79, 22, -56, -122, 31, 39, 4, -11, 26, -126, 65, -26, -103, -118, -42, -100, 74]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-77, -59, -28, -22, 91, 58, -116, 86, -106, -68, -39, 102, 73, -28, 108, 120, 26, 1, 40, -81, 121, 58, -74, -105, -115, -43, 70, -125, 25, -120, -78, -69, 64, 126, -92, 30, 62, -62, -12, 41, 117, 44, 115, -110, -108, -62, 79, -25, 76, -119, 94, -22, -121, -120, 96, -116, 32, -2, -46, 26, -63, 42, -50, 49, 74, -111, -78, 1, -111, 50, 48, 95, -87, 49, -51, -36, -48, -114, 108, 2, -57, -71, 19, -55, 4, -12, 70, 59, -94, 9, -13, -59, -24, 93, 111, 23, 22, -56, -122, 31, 39, 4, -11, 26, -126, 65, -26, -103, -118, -42, -100, 74]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "B3C5E4EA5B3A8C5696BCD96649E46C781A0128AF793AB6978DD546831988B2BB407EA41E3EC2F429752C739294C24FE74C895EEA8788608C20FED21AC12ACE314A91B2019132305FA931CDDCD08E6C02C7B913C904F4463BA209F3C5E85D6F1716C8861F2704F51A8241E6998AD69C4A" + "'", str7, "B3C5E4EA5B3A8C5696BCD96649E46C781A0128AF793AB6978DD546831988B2BB407EA41E3EC2F429752C739294C24FE74C895EEA8788608C20FED21AC12ACE314A91B2019132305FA931CDDCD08E6C02C7B913C904F4463BA209F3C5E85D6F1716C8861F2704F51A8241E6998AD69C4A");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey8);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey23);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey23);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[15, -85, 6, -96, -51, -77, -72, 68, -34, -118, -98, 67, 35, -76, 57, -64]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-71, -123, -62, -58, 108, 86, 47, -40, -81, -46, 87, -75, 69, 0, -63, -44]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-97, 9, 91, 58, 24, -30, 15, -38, 25, 122, 50, -52, 126, 104, -24, 47]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[15, -85, 6, -96, -51, -77, -72, 68, -34, -118, -98, 67, 35, -76, 57, -64]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-33, 73, -46, 60, -40, -108, 110, -45, 84, -22, -56, 114, 74, 23, -76, 64, -126, -88, 81, 59, 61, -24, -125, 34, -86, 7, -77, 85, -108, -58, 126, -124, 15, -85, 6, -96, -51, -77, -72, 68, -34, -118, -98, 67, 35, -76, 57, -64]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 66, 122, -62, -32, -81, -32, -46, 75, -61, 63, 59, -43, -81, -57, -108, -46, -38, 101, -123, 60, 77, 56, -43, 53, -82, 124, 81, -7, 116, 30, -22, 15, -85, 6, -96, -51, -77, -72, 68, -34, -118, -98, 67, 35, -76, 57, -64]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-97, 9, 91, 58, 24, -30, 15, -38, 25, 122, 50, -52, 126, 104, -24, 47]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-112, 31, 93, 65, -23, 97, -21, -68, -37, -1, -53, -114, -122, -111, -33, -111]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[36, 46, 113, -21, 60, 20, -81, -117, 120, 6, -40, 43, -96, -34, -125, -59]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-45, -51, -96, -25, 56, -119, -102, 26, 38, 49, 93, 78, -120, 52, 108, 6, -103, -23, 16, 113, 28, -14, -81, -65, 7, 37, 5, 63, 118, -122, -107, -101, -65, 85, -40, -106, -34, -79, -1, -107, 29, 117, -123, 94, -111, 71, -88, -101, -4, -5, -113, 27, -61, 13, 124, 19, -44, -59, 113, 79, -96, -7, 11, -80, 92, 64, 90, -124, 25, -71, -20, 79, 126, -109, 125, -18, 67, -80, 47, 103, -34, 51, 66, -114, -117, -23, -57, 107, 35, 106, -46, 74, -20, -81, -70, 42, -112, 31, 93, 65, -23, 97, -21, -68, -37, -1, -53, -114, -122, -111, -33, -111]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-24, -124, -109, -27, 75, 4, 44, -7, -91, 123, 61, 31, 93, 63, 127, -74, 121, -35, -46, 1, 0, -103, -87, 36, -100, 87, -128, -27, -25, -128, -120, -37, -112, 31, 93, 65, -23, 97, -21, -68, -37, -1, -53, -114, -122, -111, -33, -111]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-44, -122, -19, -82, 120, -53, 91, -80, 118, 31, 48, 114, -117, 18, 93, 43, -127, -40, 120, -23, 113, 123, -128, -36, -68, 11, -86, -59, 40, 113, 18, 64, -15, -4, -24, -102, -102, 91, 81, 91, -2, -117, -16, -7, -125, 82, 16, -46, -86, -110, 5, 115, -69, 127, -63, 35, -67, -98, -77, 104, 105, 79, -118, 21, -63, 104, -56, 59, -61, -4, 45, -92, 39, 49, -126, -36, -104, -79, 94, -128, 25, 19, 78, 60, -32, 23, -42, -39, 115, 109, 47, -40, -69, 71, -104, -122, -112, 31, 93, 65, -23, 97, -21, -68, -37, -1, -53, -114, -122, -111, -33, -111]");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey15);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey15);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey15);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-93, -71, 7, -26, 35, -125, -69, 114, -93, -101, 34, 87, -71, -115, 105, -56]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[64, -21, 105, 13, 6, -80, 63, -105, 41, 36, 99, 46, 105, -72, -120, -97]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-34, 110, 29, -21, 120, 32, 44, -55, -111, -123, -4, -96, -71, -102, 77, 25]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DE6E1DEB78202CC99185FCA0B99A4D19" + "'", str7, "DE6E1DEB78202CC99185FCA0B99A4D19");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DE6E1DEB78202CC99185FCA0B99A4D19" + "'", str8, "DE6E1DEB78202CC99185FCA0B99A4D19");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-76, -97, -72, -5, 75, -31, -2, 23, -16, 126, -32, 53, -23, -15, 75, -123]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[12, -97, -41, 86, -102, 76, 1, 92, 46, 40, -20, -105, 4, -89, -9, 123]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-49, -80, 27, 33, -36, -9, 99, -127, -39, -24, 24, -33, -104, 0, 38, 108]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-76, -97, -72, -5, 75, -31, -2, 23, -16, 126, -32, 53, -23, -15, 75, -123]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-96, -64, -123, -88, 48, 37, -24, -89, 58, 116, -66, 37, -2, 32, -19, -123, -58, -32, -119, -33, -110, -48, -118, -60, 52, 103, -53, -58, 124, 122, 122, -3, -76, -97, -72, -5, 75, -31, -2, 23, -16, 126, -32, 53, -23, -15, 75, -123]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-119, 52, -78, -3, -59, -124, 50, 93, 105, 98, 33, -30, -40, 90, 100, -72, -105, 34, -31, -102, 20, -20, 48, 93, -115, -89, 63, -19, -14, -19, -87, -85, -76, -97, -72, -5, 75, -31, -2, 23, -16, 126, -32, 53, -23, -15, 75, -123]");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("E252EC95F03F1DCA2D5FB38537A9B130015DC57FC84328A4F6D686305CD72D31929A0B8D747F8A382D1719EE563F8F5D7BC62453E1091D0F23B4F140704CAA48BD24197C59C7E84F2317DB1F84A58500CF0CC4FCCA453C43B38915D03E636A0232EAE4CAD668EA5731855F254DCC2A13", secretKey8);
        javax.crypto.SecretKey secretKey17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey17);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-104, -121, -26, -2, -18, -69, 114, 4, -112, -47, 41, 63, -86, 26, 25, -90]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-16, -95, 66, -32, -118, -64, 19, 85, -98, -48, -8, 126, 71, -46, 46, -39]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-89, 87, 73, 116, -8, -68, -98, -98, 118, -36, 17, -84, -21, -62, 37, 127]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-104, -121, -26, -2, -18, -69, 114, 4, -112, -47, 41, 63, -86, 26, 25, -90]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-104, -79, 82, 32, 43, 91, 58, 122, 12, -99, -34, -125, -121, 21, 103, 57, -73, -75, 81, 65, 65, 113, -59, 68, 102, -119, 27, 0, 126, 107, -77, 12, -104, -121, -26, -2, -18, -69, 114, 4, -112, -47, 41, 63, -86, 26, 25, -90]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-112, 36, -123, 36, 76, 90, -38, 77, 94, 85, -38, 12, 65, 16, -17, 52, -61, -36, -40, 14, 90, -1, -14, -61, 31, -60, -24, 39, 123, 66, 25, -38, -104, -121, -26, -2, -18, -69, 114, 4, -112, -47, 41, 63, -86, 26, 25, -90]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey23);
        java.lang.Class<?> wildcardClass35 = byteArray34.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-77, -29, 19, -120, 111, 121, -32, 114, 60, 6, -111, -90, -14, -102, -71, 87]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[58, -81, 58, -29, 120, 46, -51, 52, 105, 3, 32, -87, -30, 63, -71, -70]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-7, -47, 35, 30, 91, 20, -82, -27, -12, -95, 12, -97, -93, -1, 68, -95]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-6, 126, 34, 79, 66, 61, -106, 54, -35, -80, 39, -51, 6, -59, -47, -115]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[59, 4, -64, -47, -79, 61, -103, -53, 105, -126, 55, 44, 50, 78, 12, 27, -7, -108, 109, 8, 4, 76, 44, -126, 31, 45, 69, 85, 114, -74, -88, 93, -7, -47, 35, 30, 91, 20, -82, -27, -12, -95, 12, -97, -93, -1, 68, -95]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[33, 19, 100, -52, 107, -55, -100, -65, 109, 114, -13, 0, 85, 47, 65, 33, -97, 70, -22, -29, -128, -83, 32, 77, -75, -95, 22, -58, -118, 25, 43, -112, -7, -47, 35, 30, 91, 20, -82, -27, -12, -95, 12, -97, -93, -1, 68, -95]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-73, 107, 118, -29, 89, -105, 52, 76, -61, 9, 97, 104, 8, -42, 54, -64, -14, -24, -111, 101, -2, 88, 22, -37, -54, 105, 35, 126, 100, 48, 127, 84, -74, 120, -86, 28, -104, -95, -102, -80, -73, -80, -108, 21, 18, 36, -120, 27, 86, 41, -49, -22, 13, -26, 111, 82, 94, 8, 31, -89, 127, 106, 71, -108, -92, 49, -17, -122, -58, 87, -71, 59, -93, 2, -63, 94, -65, -42, -112, -40, -84, 40, -120, 69, -40, 27, -93, -94, 112, -120, 35, 40, 88, 115, -74, 8, -7, -47, 35, 30, 91, 20, -82, -27, -12, -95, 12, -97, -93, -1, 68, -95]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-26, 29, -6, 44, 0, -15, 114, 71, -44, -88, 31, 38, 111, -94, 22, 32, 43, 105, -21, -60, 79, 21, 121, -80, 107, 125, 40, -8, -11, 60, 102, 9, 107, 50, 18, 70, -118, 75, 84, -59, 119, 79, -7, 67, -78, 27, 52, -76, 106, 25, 34, 36, -116, -45, -95, -34, 106, 68, 15, -42, -81, -123, 47, 25, -43, 37, -12, 113, 36, -1, 1, 120, 111, 65, 20, 47, 24, -125, -43, -55, 81, -58, 75, -30, -21, -121, 7, -79, 9, 46, -39, 74, -21, 106, -98, 17, -7, -47, 35, 30, 91, 20, -82, -27, -12, -95, 12, -97, -93, -1, 68, -95]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-7, -47, 35, 30, 91, 20, -82, -27, -12, -95, 12, -97, -93, -1, 68, -95]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-28, -76, -67, 85, 55, 92, 21, -103, -53, 68, -80, 53, -34, -37, 98, -78, 64, 110, 82, 108, 46, 1, 78, -51, -36, 112, -118, 5, -25, 18, 88, -39, -7, -47, 35, 30, 91, 20, -82, -27, -12, -95, 12, -97, -93, -1, 68, -95]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-124, -73, 24, 86, -32, 101, 114, -47, -66, -107, 101, 21, 5, 51, -8, -110, 13, -33, 98, 97, 44, -45, -72, 94, -56, -64, 50, 53, 99, 101, 15, 24, 63, 98, 88, 127, -79, -32, 110, -6, 77, 27, 24, -92, -32, 9, 33, 89, -3, -5, 32, 121, 75, 112, 68, -104, -39, -125, -38, 90, -103, -97, 113, 45, 4, -2, -23, -59, -78, 92, -80, -93, -50, -40, 85, 16, -91, 5, 37, 20, -96, -115, -112, -60, -94, -125, 32, 38, 6, -117, -67, 69, -75, 41, 53, -120, -7, -47, 35, 30, 91, 20, -82, -27, -12, -95, 12, -97, -93, -1, 68, -95]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey52);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey52);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey52);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-31, 127, 11, -59, -46, -90, -36, -72, -112, -79, -100, -18, 103, -37, 4, 45]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-99, 107, 22, 29, 111, 127, 19, 82, -100, -81, -80, 96, 113, 12, -15, -10]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[92, -20, 106, 10, -124, -82, -104, -63, 51, 1, 95, 59, 123, -126, -60, 120]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, -49, -118, 37, 43, -39, 69, -97, 40, 125, -101, 30, 8, -57, -73, 115]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[58, -109, -68, -5, 53, -26, -103, 42, -89, 24, -116, 65, 54, 49, 49, -34, -24, -59, -66, 40, 105, 125, 36, 59, -87, 98, 75, 21, -83, -25, -9, -101, 92, -20, 106, 10, -124, -82, -104, -63, 51, 1, 95, 59, 123, -126, -60, 120]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[6, -97, -39, 113, 46, 83, 83, 2, -96, -124, 76, 76, -114, 75, 64, -84, 82, -31, 60, -103, 84, 0, 61, 2, -26, -29, 66, -25, -6, 25, 98, -20, 92, -20, 106, 10, -124, -82, -104, -63, 51, 1, 95, 59, 123, -126, -60, 120]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[36, -18, 75, 110, 95, 2, -117, 110, 115, -79, -67, -23, -13, -18, -112, -48, -104, -3, 68, 10, 29, -20, -104, -10, -61, -39, 65, -97, -127, -50, 18, -2, 16, 0, 83, -34, 110, -59, 56, -73, -64, 87, -122, 90, 98, 108, 94, -18, -57, -73, -124, 25, -92, 103, -11, 76, -76, 112, -122, -94, -29, -23, 125, 115, 13, -85, -7, -39, -60, 108, 80, -85, -71, 92, 123, -16, 71, -117, 28, -101, 73, -109, 21, -32, 34, 37, -102, -18, 62, -96, 125, 21, -91, -35, -16, -53, 92, -20, 106, 10, -124, -82, -104, -63, 51, 1, 95, 59, 123, -126, -60, 120]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[31, -4, -32, 124, -83, 70, 68, -108, -95, 1, -101, 61, 7, -4, -111, -122, -110, 48, 123, 58, -29, -78, 102, 61, -117, -37, -12, -4, 84, -74, 40, -32, 92, -20, 106, 10, -124, -82, -104, -63, 51, 1, 95, 59, 123, -126, -60, 120]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[36, -18, 75, 110, 95, 2, -117, 110, 115, -79, -67, -23, -13, -18, -112, -48, -104, -3, 68, 10, 29, -20, -104, -10, -61, -39, 65, -97, -127, -50, 18, -2, 16, 0, 83, -34, 110, -59, 56, -73, -64, 87, -122, 90, 98, 108, 94, -18, -57, -73, -124, 25, -92, 103, -11, 76, -76, 112, -122, -94, -29, -23, 125, 115, 13, -85, -7, -39, -60, 108, 80, -85, -71, 92, 123, -16, 71, -117, 28, -101, 73, -109, 21, -32, 34, 37, -102, -18, 62, -96, 125, 21, -91, -35, -16, -53, 92, -20, 106, 10, -124, -82, -104, -63, 51, 1, 95, 59, 123, -126, -60, 120]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-25, 105, -49, 21, -6, -59, -124, -58, -92, 13, 80, 109, -69, -89, -76, 35]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[6, -106, 67, -31, 47, 110, -47, -41, 124, -11, 10, -22, 34, -113, 46, -107]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[111, 112, 31, -70, -120, 36, -115, 100, -33, -113, 67, -82, 77, 18, 30, -66]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-74, 47, 112, 44, -61, -7, 97, 50, 34, 27, 107, -37, -42, 108, 93, 24]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[17, -69, -17, -81, -115, 71, -126, 81, -108, 96, 54, -24, 44, -1, 122, -111, 21, 9, -123, -97, -51, -67, 86, 70, -101, -118, -18, -110, -84, 13, 114, -106, 111, 112, 31, -70, -120, 36, -115, 100, -33, -113, 67, -82, 77, 18, 30, -66]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[60, 36, -91, 87, -45, -66, 62, 92, -10, 98, -91, -15, -56, -62, -77, 85, 83, -83, 52, 66, 57, 16, -30, 49, 42, 68, -46, 82, 41, 50, 74, -27, 111, 112, 31, -70, -120, 36, -115, 100, -33, -113, 67, -82, 77, 18, 30, -66]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[61, 98, 111, 61, -109, -8, 9, -3, -51, 19, 28, -50, 84, 25, -55, 108, 35, -96, 14, -68, -82, -61, -47, -122, -113, -70, -30, 69, 112, -125, 53, 2, 87, -32, 98, 94, -83, -90, 106, 1, 18, -103, -88, -105, 120, 105, 71, 32, -38, 77, 4, -66, -74, -80, -72, -19, -73, -100, -118, -125, -67, 54, -121, 29, 51, 126, -71, 88, -62, 66, -63, -128, -57, 48, -77, -96, -97, -68, 120, -28, 83, -98, 83, 103, 7, -4, -3, -120, 98, 39, -11, -112, -64, -14, 36, -41, 111, 112, 31, -70, -120, 36, -115, 100, -33, -113, 67, -82, 77, 18, 30, -66]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-93, 66, -88, -63, 78, 52, 17, -38, 4, 122, -4, -41, -14, -52, 18, -87, 70, -122, -121, 103, 54, 99, 6, 47, -42, 59, -121, 122, -19, -54, 107, 27, 111, 112, 31, -70, -120, 36, -115, 100, -33, -113, 67, -82, 77, 18, 30, -66]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[95, -9, 120, -4, -64, 65, 99, 13, 63, 17, -104, 58, -89, 34, 54, -86, -94, 89, -7, -23, 45, 76, 34, 60, 79, 99, -113, -38, 1, -48, 83, 51, -99, 51, -118, 80, 115, 89, -21, -62, 2, 108, -106, 122, 10, -117, -52, -7, 41, -122, 123, 11, 120, -88, 89, 108, -82, -116, 98, 57, 7, 40, 7, 45, -29, -6, 44, -83, -105, 42, -85, -119, 19, -99, -54, 78, 121, -35, -127, 123, 91, 19, -86, 120, -12, 80, 120, 28, -111, -56, -44, -111, 17, -102, 102, -71, 111, 112, 31, -70, -120, 36, -115, 100, -33, -113, 67, -82, 77, 18, 30, -66]");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.Class<?> wildcardClass14 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[18, 124, -109, -74, 95, -41, 86, 43, 44, -70, 3, 57, 32, 50, 76, 50]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[81, -90, -8, -104, 106, 47, 91, -112, 43, -7, -15, 118, -40, 31, -80, -4]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, -90, -8, -104, 106, 47, 91, -112, 43, -7, -15, 118, -40, 31, -80, -4]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[35, 37, -78, 48, -111, -56, -117, 103, -114, -34, 55, -126, 32, 69, -36, 17]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[81, -90, -8, -104, 106, 47, 91, -112, 43, -7, -15, 118, -40, 31, -80, -4]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-41, 100, 79, -32, 45, 63, -33, 97, -55, 64, 63, 94, -95, 47, 51, -30, 87, 123, -31, 115, 84, 44, 56, 76, -76, 104, -53, -21, -38, -114, -43, -106, 99, 31, -107, -54, 91, -11, 94, -95, -114, 53, -45, 56, 52, -76, 52, -58, 46, 37, -60, 5, 84, 66, -59, -64, 14, -43, -3, -87, 47, -49, -29, -57, -127, -15, -107, -110, 77, -72, 31, 75, 112, -15, -84, 64, 105, -103, 127, 9, -101, -100, 80, -82, 106, -58, -4, -83, -47, -76, 64, -122, 102, -82, -59, 116, 18, 124, -109, -74, 95, -41, 86, 43, 44, -70, 3, 57, 32, 50, 76, 50]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D7644FE02D3FDF61C9403F5EA12F33E2577BE173542C384CB468CBEBDA8ED596631F95CA5BF55EA18E35D33834B434C62E25C4055442C5C00ED5FDA92FCFE3C781F195924DB81F4B70F1AC4069997F099B9C50AE6AC6FCADD1B4408666AEC574127C93B65FD7562B2CBA033920324C32" + "'", str13, "D7644FE02D3FDF61C9403F5EA12F33E2577BE173542C384CB468CBEBDA8ED596631F95CA5BF55EA18E35D33834B434C62E25C4055442C5C00ED5FDA92FCFE3C781F195924DB81F4B70F1AC4069997F099B9C50AE6AC6FCADD1B4408666AEC574127C93B65FD7562B2CBA033920324C32");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey24);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-87, -50, 10, 125, 67, 22, 74, -73, 80, 52, 50, -58, 31, 120, 21, -6]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[125, 7, 53, 71, -48, -91, -97, 101, -106, 12, -31, 51, 103, -79, -83, -96]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[95, 93, 5, 22, 59, 25, -75, -98, 11, -61, 55, -35, -95, 44, -28, -93, 71, 40, -118, -97, 68, -12, 42, -35, -34, -88, -116, -13, -105, -29, 29, -63, -87, -50, 10, 125, 67, 22, 74, -73, 80, 52, 50, -58, 31, 120, 21, -6]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "5F5D05163B19B59E0BC337DDA12CE4A347288A9F44F42ADDDEA88CF397E31DC1A9CE0A7D43164AB7503432C61F7815FA" + "'", str7, "5F5D05163B19B59E0BC337DDA12CE4A347288A9F44F42ADDDEA88CF397E31DC1A9CE0A7D43164AB7503432C61F7815FA");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[67, -113, 113, 82, 123, -65, 23, 35, -101, -76, 11, -89, 12, 23, -27, 22]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-53, 66, -9, 32, 36, -120, -16, -15, 18, 65, -79, -77, -44, 10, 89, -13]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-53, 66, -9, 32, 36, -120, -16, -15, 18, 65, -79, -77, -44, 10, 89, -13]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey53);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey53);
        byte[] byteArray67 = new byte[] {};
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray67);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey69);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey73);
        byte[] byteArray77 = new byte[] {};
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray77);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray77, secretKey79);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey83);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey83);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray77, secretKey83);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey83);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey83);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey83);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey83);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey83);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-109, -62, 41, -102, 122, 101, 30, 65, 125, -19, 107, -19, 82, 4, 2, 73]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-50, 39, 44, -106, -75, 9, -67, 49, -84, 82, 61, 80, -109, 74, 44, -3]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-48, 100, 83, 45, -95, 105, 86, -64, 82, 85, 117, -66, 69, 29, -94, 13]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-88, 126, -108, 118, 70, 15, 61, -113, -3, -11, 0, 33, 86, -29, 112, -60]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[85, -85, 72, 89, 102, 113, -27, -87, 45, -56, 22, -125, -83, -12, -119, -106]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-14, 112, 36, 48, 74, -9, 48, 115, -17, -118, 114, 50, -51, 82, 3, -119]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-64, 24, -92, -113, 67, -21, -5, -109, -65, 120, 95, -55, 28, 126, 27, -90]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[95, 81, -101, -7, -68, -116, 27, 62, 27, -91, 19, -105, 9, 82, 24, -4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[42, -50, 18, 52, -114, 33, 110, -123, 53, 6, -106, -116, 86, 24, -71, -67]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-127, 1, 56, -64, -81, -73, 49, 62, 21, 101, -44, 17, 8, 112, 91, -33]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[23, 127, 24, -16, 107, -28, -70, 123, 48, -60, -124, -33, 53, -111, -30, 31]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[42, -50, 18, 52, -114, 33, 110, -123, 53, 6, -106, -116, 86, 24, -71, -67]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, -21, 15, 51, -29, -74, 0, -90, 92, 63, 125, -116, -111, 72, 124, -74, -59, 41, 108, -43, 21, -47, 12, -26, 13, -91, 88, 127, 101, 50, -128, -85, 82, 17, 41, -44, -98, 83, 119, -125, -70, -90, 19, -71, -113, 77, 60, -93, -98, 40, 82, -46, -99, -127, 86, -94, -52, 79, 115, 107, -27, 103, 1, 115, 121, -47, 76, 90, 84, -7, 57, 73, 63, -24, -127, 38, -94, 126, 118, 13, -123, -14, -105, -50, -13, 80, -21, -97, 24, 33, -76, -105, -64, 1, 7, -81, 42, -50, 18, 52, -114, 33, 110, -123, 53, 6, -106, -116, 86, 24, -71, -67]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-50, -11, -113, 122, 39, 28, -83, 15, -29, 58, 61, -81, -94, -110, -119, 84, 83, -41, 97, -109, 121, -116, -66, 92, -31, 65, 126, -36, 23, -7, -18, -28, 43, 8, 18, -19, 118, -63, 67, -11, -30, -112, 13, 100, 64, 70, 57, 66, -49, 104, 18, 124, 70, -17, 17, 99, 53, -125, -124, 40, 77, -48, 31, 36, 76, -33, 9, 43, 62, -126, 107, -95, -27, -114, 87, -111, 102, -34, -37, -113, 47, -85, -128, -15, -41, -73, -62, -67, -124, -33, 47, -62, -68, -80, -50, -102, 42, -50, 18, 52, -114, 33, 110, -123, 53, 6, -106, -116, 86, 24, -71, -67]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[16, 40, -77, -27, -38, -64, 17, -97, 99, -119, 110, 73, -66, 70, 69, 84, -74, -85, -96, 99, 70, -51, -51, 45, 61, 32, -85, -126, -51, -109, -83, 120, -118, -117, -71, 85, 0, -3, -102, -15, -35, -45, 18, -52, 124, 121, 81, 42, -23, 39, 30, 33, 0, 39, -100, -100, 121, 17, 111, -60, -93, 21, -4, 110, 109, -97, -32, -87, 74, -110, -60, -122, 67, -48, 29, -20, -83, 105, -4, 17, -88, 106, 78, -108, -41, 113, -97, -61, 89, 55, -12, -76, 77, 89, 82, -83, 42, -50, 18, 52, -114, 33, 110, -123, 53, 6, -106, -116, 86, 24, -71, -67]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-77, -12, -85, 1, -2, 50, -100, 109, -43, -86, 36, 106, 67, -13, 6, -81]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-69, -39, -106, 124, 103, 45, -35, 10, -65, 1, -70, -124, -120, -114, 125, 124]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[14, 63, -113, -56, -9, -55, -19, -25, -106, 74, -59, -6, 78, -18, 102, 58]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[112, 67, 122, 13, -42, 32, -71, 111, -127, 12, 104, 115, -71, 15, -63, -109]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[6, 65, -61, -126, 40, -79, -119, 26, 80, 63, 31, 111, 62, 102, 48, 25, -81, -124, 119, -30, -111, 76, -112, -37, 24, -66, -92, -119, -103, 27, 10, 80, 14, 63, -113, -56, -9, -55, -19, -25, -106, 74, -59, -6, 78, -18, 102, 58]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[89, -60, -76, -68, -29, -72, -85, -88, -27, -9, -91, 72, -4, -52, 125, 111, -114, 4, 114, -115, 114, 66, -97, -12, 63, -118, -81, -84, 44, 30, 43, -12, 14, 63, -113, -56, -9, -55, -19, -25, -106, 74, -59, -6, 78, -18, 102, 58]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-72, 90, 87, 55, -68, -27, -105, 32, -53, -74, 3, 3, 127, 4, -28, -36, -111, 86, 58, 46, 83, 109, -25, -2, -35, -72, 99, -33, -30, -75, -121, -48, 121, 123, 62, -73, -54, -117, -13, 99, 94, 46, 125, 68, -6, -72, -9, -39, -99, -58, 111, 3, -58, -22, 62, -9, 73, 117, 75, -44, -109, -96, 28, -49, -46, -100, -76, 89, 89, -109, 73, 69, -72, 14, 105, -128, 107, -97, -80, 61, 75, 39, 97, 116, -72, -73, 71, 37, 6, -48, -92, 13, 85, 108, 33, -104, 14, 63, -113, -56, -9, -55, -19, -25, -106, 74, -59, -6, 78, -18, 102, 58]");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[73, 11, -43, 85, 62, -103, -34, -76, -103, -71, 96, -34, -109, -1, 106, -42, -108, 56, -112, 51, -13, -1, 116, 58, 106, -34, 40, 107, -105, 124, 116, 95, 38, 67, -37, -84, 0, 17, -2, 110, -18, -46, -110, -94, -102, -49, -25, 97, 69, 91, 95, -15, -34, 125, 33, 19, -2, -24, 120, 64, -73, -28, -107, 37, 83, -5, -63, -119, -114, -79, -106, -94, -53, 104, -83, 121, -1, 8, -126, -5, 125, -92, 22, -104, 120, -41, 26, 45, 98, 47, 119, 126, -84, -119, 54, -22, 14, 63, -113, -56, -9, -55, -19, -25, -106, 74, -59, -6, 78, -18, 102, 58]");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey41);
        java.lang.Class<?> wildcardClass51 = byteArray50.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[61, -106, -72, 78, 114, -68, -34, 110, 65, 89, 80, 39, -118, -57, -118, 81]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[127, -12, -12, -56, 62, -110, -51, -40, -118, 74, 71, -94, -5, -63, -34, 96]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-41, -12, -86, 112, 97, -88, 39, 86, -31, 119, 69, 105, -49, 66, 71, -66]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[38, -17, -61, -82, -14, 6, -71, 86, -112, 2, 65, -113, 7, 29, 92, 93]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-113, -80, -70, 64, 121, -29, 49, -60, -114, 90, 113, -29, 83, 77, -126, -33]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-67, 55, 39, 117, 113, 98, -97, 28, -89, 54, 11, 64, -51, 72, 53, -88]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[8, -64, 127, -69, -18, 93, 54, 110, 76, 1, -120, -108, -69, -6, -115, 126]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[5, 123, -6, 109, 68, 33, -105, 32, 39, 108, 52, 46, -10, 38, 11, 26]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-69, 38, -34, 43, -95, -36, -21, -28, -91, 81, 53, 59, -11, -49, 96, 74, -86, 75, 66, 92, 84, -124, 101, -85, -74, 39, 57, 81, 3, -39, -76, -44, 8, -64, 127, -69, -18, 93, 54, 110, 76, 1, -120, -108, -69, -6, -115, 126]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[97, -84, 13, 57, 13, 27, 11, 46, -41, -116, 12, 36, 9, 59, -63, 121, 64, -33, -58, 21, 99, -9, -7, -66, -82, -67, 68, -106, -58, 45, 9, 96, 8, -64, 127, -69, -18, 93, 54, 110, 76, 1, -120, -108, -69, -6, -115, 126]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[107, 120, -113, -102, -43, -49, -58, -107, 45, -57, -77, -123, -112, 52, 27, 84, -39, -6, 115, -51, -114, -74, -116, 43, 109, 81, 125, -17, 99, -125, 8, -93, 114, -27, 16, 114, 11, -107, -26, 24, 2, 5, -88, 95, 112, -110, -13, -8, 54, -23, -56, 42, -63, 88, -115, 37, -102, -44, 62, 16, -128, 126, 60, -67, 102, -98, 101, 74, 33, -103, 61, 46, -93, -119, -16, 23, -75, -118, 49, -11, -73, -25, 15, -64, 48, 102, -86, 48, 92, 42, 55, 25, 26, 16, 99, 35, 8, -64, 127, -69, -18, 93, 54, 110, 76, 1, -120, -108, -69, -6, -115, 126]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[46, 5, 75, -62, 100, 90, 17, 111, 20, -79, -14, -51, -41, 105, -112, -90, 7, 119, 33, -58, 15, -83, 114, -105, 69, -28, 59, -106, -45, -73, -24, -89, 8, -64, 127, -69, -18, 93, 54, 110, 76, 1, -120, -108, -69, -6, -115, 126]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey87);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey87);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey87);
        byte[] byteArray97 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey87);
        java.lang.Class<?> wildcardClass98 = byteArray97.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-57, 73, 21, 9, 21, 60, 84, 97, -7, -1, 121, 95, -65, -125, -100, 31]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[117, -25, -2, 22, 85, -53, -112, 29, -110, -12, -41, 1, -108, -70, -56, -4]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 51, -64, -24, 17, 93, 41, -34, 87, 80, 8, 127, -128, 124, -86, -71]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-103, 92, 111, 60, -77, 43, 24, -3, 7, 13, -39, 4, 66, 82, 105, -98]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-31, 11, -62, -28, -23, -18, 2, -49, 91, 59, 120, -63, 46, 9, -107, -105]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-22, -98, -20, 23, 25, 14, 24, 75, -72, -81, 109, 73, -56, -120, 19, -121]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[120, 48, 59, -29, 61, 44, -90, 34, 63, 37, -77, 116, -65, 84, -28, -127]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[117, -45, -113, 64, -58, -96, 70, 112, 85, -121, 101, -47, -119, 49, -59, -11]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-116, -112, 75, -27, -31, -64, -101, 103, 20, -40, -77, 7, -43, -85, 43, 99, 17, -23, -75, 99, 32, -41, -36, 93, -117, -62, -32, -44, 20, 12, -69, -35, 120, 48, 59, -29, 61, 44, -90, 34, 63, 37, -77, 116, -65, 84, -28, -127]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[36, 80, -27, -62, -43, -99, 100, 126, -31, -9, -113, 86, -104, -37, -115, 79]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-47, 74, -19, -123, -90, -69, -26, 65, 39, -35, -115, 63, -49, -66, 98, -115]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-9, -45, 62, 23, 81, 27, 60, 93, -53, -116, -71, 80, -45, -84, -43, -3]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[49, -43, 103, -80, 109, 5, 122, -117, 70, -17, -88, -2, 12, -28, 111, 29]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[14, 28, 96, 15, -17, 107, -92, 120, -102, 47, -23, -34, 52, -18, -24, -5]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-27, 56, -29, -127, -123, 8, -26, -86, -1, -106, 116, -115, 101, -117, -103, -122]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[45, 6, -9, -75, -50, 71, 4, 32, -6, 4, 38, -81, 69, 3, -27, -44]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-29, 24, 20, -110, 101, -53, 51, 3, -82, -113, -68, -124, -75, -61, 51, -96]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-92, 40, 68, 40, 12, -106, -119, 113, -99, -9, 91, 42, -34, -104, -13, -43, 71, -14, -25, 124, 59, 4, -49, 116, 96, -92, 62, -8, -80, -105, 27, -106, 45, 6, -9, -75, -50, 71, 4, 32, -6, 4, 38, -81, 69, 3, -27, -44]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-29, 24, 20, -110, 101, -53, 51, 3, -82, -113, -68, -124, -75, -61, 51, -96]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertNotNull(byteArray97);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[11, -46, -44, 103, 122, 111, -79, 62, 101, -60, -101, -10, -4, -121, -108, -6, 81, -62, -126, -116, -86, -92, 62, 98, 125, -116, 25, -103, 32, -71, -53, -5, -95, -70, 103, -39, 35, -32, -90, 44, 77, 80, -64, -21, -63, -66, 65, 17, -71, -43, 62, -64, 29, -116, 41, -26, 21, -72, -12, 88, 68, 14, -58, -2, 11, -4, 44, -22, -101, -69, 37, -53, 48, -76, -49, -37, -12, -33, -14, -88, 5, 69, 84, 55, 111, 70, -56, -62, -45, 103, 16, -106, 86, -81, -52, -112, 45, 6, -9, -75, -50, 71, 4, 32, -6, 4, 38, -81, 69, 3, -27, -44]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-31, -100, -76, -119, 73, -76, 122, -95, -45, 96, -75, -1, 89, 5, 82, -120]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-65, -96, -46, 81, -61, 89, 88, 81, -42, 114, 88, -84, -7, 104, 56, -26]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[11, -23, -35, 61, 66, 55, 44, 87, 80, -47, -82, 80, 118, -96, -27, -23]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-31, -100, -76, -119, 73, -76, 122, -95, -45, 96, -75, -1, 89, 5, 82, -120]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-86, -17, 88, -4, 12, 118, 101, -91, 72, 28, -68, 66, -104, 37, 108, 79, 91, 122, 115, -1, 103, -21, -21, 127, 74, -42, 21, 49, -104, -109, 34, -88, -31, -100, -76, -119, 73, -76, 122, -95, -45, 96, -75, -1, 89, 5, 82, -120]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-31, -100, -76, -119, 73, -76, 122, -95, -45, 96, -75, -1, 89, 5, 82, -120]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        byte[] byteArray54 = new byte[] {};
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey56);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey60);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey60);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey69);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey69);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey69);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey69);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey69);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[37, 125, 112, 1, 25, -55, -107, -29, -108, -85, -75, 26, -56, 99, 90, 66]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-78, 49, -115, -94, 43, 124, 97, 92, -29, -55, -42, 111, 121, 51, 81, 34]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-78, 49, -115, -94, 43, 124, 97, 92, -29, -55, -42, 111, 121, 51, 81, 34]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-102, 28, 125, 60, -101, 105, 1, 94, 104, 93, 7, 78, -45, 61, 29, -86]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[37, 125, 112, 1, 25, -55, -107, -29, -108, -85, -75, 26, -56, 99, 90, 66]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[57, -123, 7, 45, 86, -50, 110, -101, 87, -3, -17, -61, -80, 77, 5, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[118, -28, -116, -11, 112, 4, -42, 1, -62, -18, -106, 98, -27, -77, -75, -94]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-59, 3, 103, -15, -83, 52, -36, 122, -116, -44, 50, -57, 81, 63, -112, 53]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-81, 91, -119, 46, -67, -13, 43, -37, 25, 8, 14, -91, 127, -42, 72, -20]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[76, 85, -10, -124, -111, -36, -41, -29, -89, -54, -5, 66, 102, 61, -123, -98]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[73, -52, 89, -101, 1, 4, -48, -29, 127, -22, -128, -84, 101, -116, 12, -58]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[84, 17, -39, 82, 51, 80, -19, -102, 50, 115, 118, 108, 120, 82, 55, 54]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[8, 92, 31, 52, 79, 96, -16, -64, 22, -59, -28, 22, -123, 30, -85, -117]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[15, 31, 7, -25, 121, -58, -82, -95, 108, -34, -55, -121, -46, 43, 67, 115]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-45, -33, 93, 52, 117, -68, -47, 119, -77, -125, 122, 95, 35, -23, -11, -24]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-126, -2, -77, -47, -74, 13, -43, -1, -9, -112, 38, 97, 111, -32, 113, -124]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-46, -31, 28, 120, 91, -102, -85, 54, 56, -91, 104, -23, -27, -113, 69, 17]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-46, -31, 28, 120, 91, -102, -85, 54, 56, -91, 104, -23, -27, -113, 69, 17]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-19, 14, -83, 37, 92, 79, -14, -63, -117, 1, 55, -1, -4, 121, -109, -104, 21, 61, -19, -70, -117, 28, 79, 13, -55, 109, -107, 68, -1, 0, -7, -36, -126, -2, -77, -47, -74, 13, -43, -1, -9, -112, 38, 97, 111, -32, 113, -124]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey47);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey47);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey47);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey47);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass57 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-51, 93, -74, 77, 113, 48, 25, -112, -77, -89, -101, -34, 58, 57, -56, 58]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[91, -34, 29, -113, -9, 81, 45, 110, 15, -70, 81, 41, 111, 102, -109, 84]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[126, -50, -70, -11, 27, 104, -50, -77, -15, -16, 90, -102, -94, 66, 53, -69]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-120, -17, 26, 82, 86, 36, 120, -106, 12, -93, 22, 58, -91, -12, -70, -120]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[5, 65, 68, 51, -40, -101, -46, 84, -56, -102, 5, 77, 19, -66, 75, -68]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[114, 88, -110, -3, 83, 10, -31, -89, -91, 122, 109, -32, -74, -46, -48, -83]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[91, 112, -23, -31, -15, 34, 8, 81, 83, -101, 15, 32, -74, 6, 29, -36]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-24, 21, 113, 110, 27, 22, 75, -88, -70, 58, 84, -116, 97, 28, -64, 81]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-120, -52, -15, 46, 0, 58, -77, -98, -53, -102, -89, 9, -92, -90, 127, 106, 39, -105, 35, 120, -106, -9, -93, 6, -20, 18, 25, 116, -26, -43, -7, 119, 91, 112, -23, -31, -15, 34, 8, 81, 83, -101, 15, 32, -74, 6, 29, -36]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[93, -43, -60, 87, -14, 93, 11, 92, -10, 4, 73, 18, 105, 62, 72, -99, -97, 119, -31, 31, 118, -86, -25, 15, 93, 127, 92, -24, -59, 93, -119, -43, 91, 112, -23, -31, -15, 34, 8, 81, 83, -101, 15, 32, -74, 6, 29, -36]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey20);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey48);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey48);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[21, -14, 34, 62, -122, 113, -97, 69, -55, 59, 83, 41, 16, -126, -55, 98]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[95, 35, 85, 80, -48, -72, 74, -27, 28, -127, -16, 85, -82, -83, -99, -51]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[83, -111, -69, -125, 113, 21, 57, -118, 55, -14, 2, 102, 80, 84, -47, 99]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[39, 121, 83, -93, 72, -102, -19, 108, 44, -31, 84, -62, 19, -102, -29, -113]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[37, -70, -74, -2, -55, -65, -109, 9, -94, 27, -93, 63, -36, -69, -46, -37, 55, -77, -25, -71, -19, 46, 43, -46, -121, -12, 65, 61, -74, 21, -61, -51, 83, -111, -69, -125, 113, 21, 57, -118, 55, -14, 2, 102, 80, 84, -47, 99]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-106, -99, -110, 66, 30, -108, -88, -14, 13, -9, 47, -41, -91, -104, -96, 126, -5, 46, 28, 90, -28, 112, -14, 62, -106, -54, 44, -73, 91, 13, -13, -92, 83, -111, -69, -125, 113, 21, 57, -118, 55, -14, 2, 102, 80, 84, -47, 99]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[40, -67, -117, 114, -36, 116, 114, -119, -45, 44, 48, -31, 25, 10, 99, -53, -75, 0, -38, -106, -33, 88, -54, 77, 89, -64, 124, 37, -26, 115, 9, 76, -89, -4, 13, -128, -13, -3, 123, -63, -120, 75, -25, -127, -4, -2, 57, 32, 54, 37, 94, -9, 11, -32, -85, -53, -103, 17, -8, 5, 112, -47, 68, -41, 95, -20, -57, 87, -2, 10, -55, -42, -125, 26, 113, 21, 105, 84, 37, -32, -107, 43, -101, 9, 105, -90, 4, 87, -67, 28, -52, 124, -41, 52, -86, -35, 83, -111, -69, -125, 113, 21, 57, -118, 55, -14, 2, 102, 80, 84, -47, 99]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-71, -30, 61, -63, 15, -3, -47, 33, 71, 95, 58, 76, -103, -67, -127, -75, -52, 85, 13, 127, -3, 85, -50, 18, -15, -77, -115, 119, -34, -114, 109, 97, -76, 30, 71, 99, 107, -69, 118, 99, -103, -110, -13, 116, 104, -29, -112, 75, 84, -106, -100, -59, 13, -93, -72, 31, 47, 31, 74, 35, -109, 36, 92, 55, 4, 127, 41, 54, -58, 69, -24, 1, -109, -123, 43, -84, 16, -124, -44, 8, 16, 11, -105, -112, 81, -11, 102, 48, 34, -97, -75, -8, 88, -15, -46, -70, 83, -111, -69, -125, 113, 21, 57, -118, 55, -14, 2, 102, 80, 84, -47, 99]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[43, 35, 99, -14, -75, -22, 102, 36, 54, 65, -62, -98, 77, -108, 75, 125]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-43, -30, 28, 8, 80, 91, -41, 69, -30, 54, -29, 108, -63, -40, 124, 40]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-70, 4, 89, 76, 45, -119, -39, -96, -61, -114, -20, 0, -116, 119, 106, -125]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[72, -84, 106, 6, 62, -92, 34, 81, 22, 92, -128, 111, 93, -121, 28, -41]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[46, 46, -90, -14, -55, -71, 100, 42, 94, -6, -125, -26, 90, -125, -45, 109, 24, -118, 54, -85, 33, 64, -48, -22, -76, 55, -68, 54, 62, -14, -113, 34, -70, 4, 89, 76, 45, -119, -39, -96, -61, -114, -20, 0, -116, 119, 106, -125]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-70, 4, 89, 76, 45, -119, -39, -96, -61, -114, -20, 0, -116, 119, 106, -125]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[94, -66, 122, 30, 2, -63, -58, -51, -72, 30, -89, 111, -40, 100, -26, 106, 7, -126, -65, 22, -29, -100, 84, -103, -67, -30, 55, 41, -33, 113, -113, 16, -25, -14, -122, 68, 118, -58, 35, -76, -28, -123, 81, 81, 66, -55, 91, -32, -120, -116, -113, 108, 107, 76, 25, 41, 123, -77, -16, -122, 106, -48, 56, 54, 86, 55, -82, 1, 67, 46, 82, -13, 78, 19, 5, 0, 84, 38, 33, 15, -64, 54, 124, 3, -27, -64, -14, -100, 52, 76, -52, 117, -34, 52, 91, 32, -70, 4, 89, 76, 45, -119, -39, -96, -61, -114, -20, 0, -116, 119, 106, -125]");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey50);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey50);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey50);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass58 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-19, -100, 101, -98, -91, -113, 92, -42, -97, -19, -91, -95, 25, 87, -75, 48]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-80, 53, -61, 12, -123, 18, 26, -69, -105, -51, -120, -96, 122, -28, -34, 54]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-12, 110, 18, -6, -2, -78, -7, 27, 93, 121, 23, 115, -102, 14, -66, -28]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -87, -82, 8, 105, 10, 125, -95, 38, 122, 103, -82, -107, 17, 40, 111]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[51, 91, -69, 48, -48, 45, 119, 49, -121, -104, -55, 81, -32, 48, 70, 25]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-102, 15, -61, 88, -7, 11, -112, 50, -55, -21, -11, -29, -116, -82, -69, 113]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[26, 91, -100, -50, 84, 6, 61, 95, -68, 39, 79, -119, -14, -52, -8, 93]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[82, 53, -69, -61, 121, 59, 85, -59, -15, 109, 70, -51, -115, 125, 72, 58]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-40, -89, 67, -120, 18, 106, -75, 57, 26, -77, 63, -26, 107, 56, -41, 116]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[73, -126, 69, -93, 104, 71, -70, -113, -5, 48, 93, -60, 25, 41, -67, 125]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-128, -39, 28, 62, 119, -111, -44, 37, 112, -41, -77, 98, 113, -91, 6, 76]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-40, -89, 67, -120, 18, 106, -75, 57, 26, -77, 63, -26, 107, 56, -41, 116]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey53);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey53);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("45AC629B1599BBF8D6F5594B877D8B4BBCC89E2C3891435E151277E3E4290D327B77DE9F3AAF37E4922662EB2FEB94DF", secretKey53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey53);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-60, 54, 89, 45, -9, 11, 122, -16, -76, -104, 81, 70, 29, -112, -98, 108]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-113, 88, -45, -43, 74, 67, 43, -89, -87, -92, 77, -96, -6, -73, 21, -121]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-65, -79, -63, -116, 91, -116, 106, 77, -87, -70, 13, -92, 52, 64, 125, 49]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[39, 112, 38, -108, 127, -105, 6, 77, 42, 89, 61, 111, -83, 116, 37, 98]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[82, 86, 53, 15, -93, 20, -70, 39, -81, 92, 64, -32, 12, 80, -53, 16, 60, 77, 46, 103, 90, 66, -68, -114, 70, -96, 3, 37, -33, -101, -49, 100, -65, -79, -63, -116, 91, -116, 106, 77, -87, -70, 13, -92, 52, 64, 125, 49]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-65, -79, -63, -116, 91, -116, 106, 77, -87, -70, 13, -92, 52, 64, 125, 49]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[39, 112, 38, -108, 127, -105, 6, 77, 42, 89, 61, 111, -83, 116, 37, 98]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[23, -57, -89, 62, 1, -65, -101, -74, -61, 64, -8, 64, 15, -81, -34, -9, 100, -67, -69, -104, -20, 96, 31, -123, -73, -79, 69, 96, 26, -83, -33, -75, -65, -79, -63, -116, 91, -116, 106, 77, -87, -70, 13, -92, 52, 64, 125, 49]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[92, 116, -12, -25, -123, 100, -103, -62, -50, -13, -97, 44, -46, 86, 92, -126, -126, -15, 20, -88, 102, -57, -15, -48, -38, 54, -97, 90, -52, -106, -111, 33, 91, -33, 3, 74, 123, 33, 36, 78, -20, -120, 0, -40, 97, 76, 9, 81, 68, -51, 16, -121, -122, -61, -63, 120, 90, 14, 117, 80, 79, -63, -83, -65, 69, 88, -95, 107, -50, -15, -76, 3, -92, 20, 39, 29, 29, 6, -86, 51, 7, 7, -89, 84, -28, 64, 39, -53, 49, -51, 18, 116, 39, -14, -62, 102, -65, -79, -63, -116, 91, -116, 106, 77, -87, -70, 13, -92, 52, 64, 125, 49]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "5C74F4E7856499C2CEF39F2CD2565C8282F114A866C7F1D0DA369F5ACC9691215BDF034A7B21244EEC8800D8614C095144CD108786C3C1785A0E75504FC1ADBF4558A16BCEF1B403A414271D1D06AA330707A754E44027CB31CD127427F2C266BFB1C18C5B8C6A4DA9BA0DA434407D31" + "'", str31, "5C74F4E7856499C2CEF39F2CD2565C8282F114A866C7F1D0DA369F5ACC9691215BDF034A7B21244EEC8800D8614C095144CD108786C3C1785A0E75504FC1ADBF4558A16BCEF1B403A414271D1D06AA330707A754E44027CB31CD127427F2C266BFB1C18C5B8C6A4DA9BA0DA434407D31");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "5C74F4E7856499C2CEF39F2CD2565C8282F114A866C7F1D0DA369F5ACC9691215BDF034A7B21244EEC8800D8614C095144CD108786C3C1785A0E75504FC1ADBF4558A16BCEF1B403A414271D1D06AA330707A754E44027CB31CD127427F2C266BFB1C18C5B8C6A4DA9BA0DA434407D31" + "'", str32, "5C74F4E7856499C2CEF39F2CD2565C8282F114A866C7F1D0DA369F5ACC9691215BDF034A7B21244EEC8800D8614C095144CD108786C3C1785A0E75504FC1ADBF4558A16BCEF1B403A414271D1D06AA330707A754E44027CB31CD127427F2C266BFB1C18C5B8C6A4DA9BA0DA434407D31");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-87, -104, -21, -128, -127, -60, 76, -80, -19, -96, 90, 74, 43, 4, -96, -49]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[56, 62, 96, -60, -112, 82, -98, -31, 95, -67, -35, -119, 99, -98, -15, 47]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[124, 64, 36, -101, 95, 107, 14, -94, -62, 92, -64, -87, 18, 45, 57, 97]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-102, -14, 90, 95, -107, -44, 109, -67, 30, 10, 106, 105, 44, -99, -25, -4]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-124, -103, -116, 109, -127, 53, 111, -41, 114, 110, -68, 40, -128, 34, -44, 63, -32, 101, 23, 99, 54, -122, 96, -114, -125, 81, 13, -81, -113, 96, -40, 47, 124, 64, 36, -101, 95, 107, 14, -94, -62, 92, -64, -87, 18, 45, 57, 97]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-86, 75, -106, -96, -33, -20, -85, 69, -33, -124, -124, 61, -40, 76, 108, -9, -14, 35, -114, -33, 85, -102, 7, -115, -30, 116, -3, 1, -95, 67, -37, 91, 124, 64, 36, -101, 95, 107, 14, -94, -62, 92, -64, -87, 18, 45, 57, 97]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[88, 30, 9, 4, 88, -15, -87, -64, -40, -119, -68, -42, -100, 74, 30, 50, 28, -69, -102, 75, 35, 20, 37, -121, -33, 5, -124, 43, -43, 117, 102, -29, 4, 7, 5, 108, -95, -29, 20, -13, 46, 0, 55, 12, -5, -34, -44, -23, -77, -117, 58, 27, -60, 103, -16, 73, -57, -15, 17, 105, -23, -94, -9, -49, -104, -36, 64, 51, 38, 86, -23, 74, -23, -76, -9, -35, -38, -86, 96, -42, -76, -62, 70, 38, -115, 26, -126, 92, -11, -43, 22, -106, 8, 14, -13, 16, 124, 64, 36, -101, 95, 107, 14, -94, -62, 92, -64, -87, 18, 45, 57, 97]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[95, -18, -81, -109, -114, 31, 38, -59, 29, -96, -87, 29, -8, 114, 49, -121, 90, -63, -119, -40, -113, -105, 70, -92, -36, 42, -80, -123, 84, -91, -93, 51, 31, 16, 71, 98, -74, -40, -68, 110, -61, 21, 5, -10, 118, 37, -102, -109, -2, -43, -13, 45, 2, 72, -64, 4, -41, -112, 91, 88, 0, -9, -44, 67, 85, -54, -23, -122, -63, 105, 57, -27, -120, 83, -43, 19, -124, 12, -6, 52, -24, -97, 80, 97, -121, 123, -27, -14, -17, -14, -93, 62, -118, -70, 116, -119, 124, 64, 36, -101, 95, 107, 14, -94, -62, 92, -64, -87, 18, 45, 57, 97]");
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey31);
        java.lang.Class<?> wildcardClass42 = secretKey31.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[22, -5, -16, -12, -57, -35, -127, 18, -94, -31, 20, -74, 92, 56, -57, 56]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-65, 3, -15, 69, -120, -35, 23, 104, -113, -86, -55, -45, 11, 53, -27, 112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[45, -38, 19, 110, -75, -74, -23, -8, 65, -33, -74, -89, 4, -90, -52, -36]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[20, -108, 45, -111, -9, -120, -71, 86, -108, 31, -77, -95, 80, -5, 89, 91]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[63, 16, -98, -50, -122, 63, -106, 8, -71, 68, -37, 127, -23, 56, -92, -125]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-23, -66, 13, -65, -126, -72, 53, 74, -1, 35, 16, -96, -108, -44, 96, 66]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-23, -66, 13, -65, -126, -72, 53, 74, -1, 35, 16, -96, -108, -44, 96, 66]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[69, -58, 33, 58, 15, -92, -74, -72, 63, 32, 29, 57, 69, 49, -9, -88, 68, -9, 113, -4, -16, -53, -87, -74, 83, 56, -14, 36, -95, 45, -12, 5, 63, 16, -98, -50, -122, 63, -106, 8, -71, 68, -37, 127, -23, 56, -92, -125]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-39, 63, -14, 71, -88, 84, -94, -83, 113, -93, 107, 103, -105, 52, -51, -94, -90, 6, 72, 124, -80, 35, 14, -90, -83, -50, -119, 112, -84, 95, 25, -126, 63, 16, -98, -50, -122, 63, -106, 8, -71, 68, -37, 127, -23, 56, -92, -125]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[79, -62, 113, -12, 14, 64, -108, -116, 68, -123, 82, 77, -115, 19, -48, 23, 96, -33, 8, 11, 46, 51, -116, -34, -81, -119, -49, -88, -105, -116, -3, 56, 63, 16, -98, -50, -122, 63, -106, 8, -71, 68, -37, 127, -23, 56, -92, -125]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-34, -39, 46, 111, -88, -101, 3, -56, -68, -124, -18, -115, 25, 34, 121, -67, 48, -36, -82, -24, -33, 52, 18, -66, 97, -12, 46, -58, 27, 66, -79, 31, -61, -42, 95, 54, 97, 8, 12, 125, 1, 102, 56, 66, -16, -27, -99, -32, 114, -82, 74, 42, -33, 17, 79, 41, 85, -50, -88, 0, -70, 29, 46, 61, 58, 79, 65, 61, 114, -117, -29, -18, 2, 122, -39, 82, 84, -46, 61, -17, -29, 85, -72, 57, 53, 71, -28, 83, -22, 89, -42, 12, 55, -79, 11, -45, 63, 16, -98, -50, -122, 63, -106, 8, -71, 68, -37, 127, -23, 56, -92, -125]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey22);
        java.lang.Class<?> wildcardClass33 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[77, -119, -11, 116, -54, 127, 77, -50, 120, 110, 90, 102, -1, -95, -107, -105]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[22, 51, 121, -33, -89, 7, -43, 81, -108, -126, 0, 44, -86, 85, 97, -100]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[42, 69, 72, -34, -99, -72, 77, 70, -101, 43, -16, 81, 121, -109, 33, -89]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[54, 29, 120, -12, 62, 121, 35, 114, -122, 96, 5, -108, -36, 31, -78, 65]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[17, 15, -128, -46, 20, 37, -19, -51, 47, -125, 26, 115, 102, -107, 109, -34, 26, 77, 50, 33, -121, 4, 29, 124, 55, 5, 6, 56, -76, 57, 62, -99, 42, 69, 72, -34, -99, -72, 77, 70, -101, 43, -16, 81, 121, -109, 33, -89]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[51, 115, -9, -42, 47, -114, 39, 21, -110, -94, -80, -75, 126, 60, -126, -100, -55, 116, -104, 27, -119, 23, -109, -60, 18, 37, -55, 47, -39, -106, 111, 104, 42, 69, 72, -34, -99, -72, 77, 70, -101, 43, -16, 81, 121, -109, 33, -89]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[33, 107, -119, -58, 48, 58, -92, -25, -95, 110, 126, -66, -115, 81, -10, 108, -103, 19, 6, 117, 57, -73, -128, -26, -79, 51, -119, -128, 40, 110, -88, 111, -97, -106, -92, 99, -20, 20, 61, 20, -26, 103, -3, 108, 76, -3, 39, 55, 35, -8, -23, -43, -24, -92, 116, -77, 82, 25, -55, 78, 21, -18, -110, -41, -68, 50, 30, 54, 68, -115, 116, -106, -128, -44, 88, 84, -124, -105, 6, -115, 40, -58, -92, 115, -50, 111, -94, 79, -116, 51, 49, 3, 55, 101, -120, 45, 42, 69, 72, -34, -99, -72, 77, 70, -101, 43, -16, 81, 121, -109, 33, -89]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-64, 79, 88, -82, 105, 0, -98, -105, -11, -37, 75, -85, -98, 7, -94, -91, 59, 66, 82, 96, 84, 17, 35, 49, -126, 67, -24, 69, -128, -3, -50, -95, 121, -5, -78, -72, 111, 50, -35, -39, 62, 8, 105, -56, -57, 43, 85, 47, -74, 45, -62, 103, 99, 44, 57, -24, -43, -76, 77, -75, 71, -47, -127, 105, -126, -120, -58, -81, -104, -13, 102, 78, 64, -104, 17, -29, -119, -66, -93, 49, -24, -107, -35, 70, -90, -125, 38, -105, 34, 102, 89, 17, -77, -73, -22, -97, 42, 69, 72, -34, -99, -72, 77, 70, -101, 43, -16, 81, 121, -109, 33, -89]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[25, -61, -9, -12, 42, -83, -56, 58, 57, 16, 100, 98, -5, -39, -127, 55, -8, 92, -58, -59, 16, 31, 7, 43, -109, -52, 60, 46, -32, 29, -13, 59, -64, 74, -125, 121, -33, 20, 98, -102, 60, 76, 46, 72, -113, -71, 122, 82, 115, 20, 98, -70, 34, -101, 106, -31, -56, 4, 104, 23, -94, -14, -10, -62, -59, 60, 22, 78, 108, 79, -124, -125, 118, -72, -23, 12, 35, -51, -4, -115, 23, 92, 34, 33, 27, -108, 68, 61, 14, -21, -106, -109, 21, -5, -94, -125, 42, 69, 72, -34, -99, -72, 77, 70, -101, 43, -16, 81, 121, -109, 33, -89]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-29, -124, -30, -65, -99, -1, -127, -44, -125, 65, 75, 93, -74, -80, 120, 63]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-76, -85, 68, -38, -124, 2, 17, 18, 77, -118, 99, -64, 103, -66, -73, -42]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-39, -123, 39, 123, 107, -106, -100, 99, 103, 28, -111, 48, -13, -9, 102, 46]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-29, -124, -30, -65, -99, -1, -127, -44, -125, 65, 75, 93, -74, -80, 120, 63]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[58, -1, -97, -105, -97, -43, 50, -80, -20, 58, 8, -46, -79, -31, 52, -23, 118, -67, -66, -122, -61, 88, -85, 53, -111, -82, 24, 16, -94, 27, 73, -115, -29, -124, -30, -65, -99, -1, -127, -44, -125, 65, 75, 93, -74, -80, 120, 63]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey5);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey31);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-103, 81, 90, 27, 2, -11, -105, -6, 40, 125, 24, 80, 125, 89, 121, 35]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[24, -54, 32, 98, -127, -38, 85, 82, 119, -84, -88, 111, -8, 76, -67, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[76, 8, 6, 75, 81, -62, 25, 60, -110, 5, 37, -111, -41, -41, -32, -108]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-103, 81, 90, 27, 2, -11, -105, -6, 40, 125, 24, 80, 125, 89, 121, 35]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-43, 63, 115, -114, -67, -116, 42, 58, -9, -112, -124, -97, 67, 98, -116, 67, -89, 92, 20, -127, 71, -99, -50, -33, -84, -108, 97, -96, 82, 84, -68, 10, -79, 46, -89, 46, 45, 34, 54, -101, 121, -122, -90, -22, 3, 84, 18, -50, 16, -6, -123, 7, 46, 74, 116, 14, -97, 3, -22, -73, -23, 122, -88, 59, -122, -108, 59, 31, 101, -112, 26, -29, 77, 70, 5, 81, 84, 51, -42, 18, -96, -26, -23, -57, 0, -115, -93, -125, -111, -81, 123, -66, 48, -51, 15, -82, -103, 81, 90, 27, 2, -11, -105, -6, 40, 125, 24, 80, 125, 89, 121, 35]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-4, 96, 114, 64, 98, 26, -127, 13, -25, -106, 95, -114, -62, -113, -121, 76]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[78, -37, 90, -88, 89, -72, -2, 100, 23, -109, 66, -25, 52, 81, 12, 66]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[22, 62, -101, -110, 85, 57, 37, -50, -99, -102, -43, 0, -113, 64, -44, -119]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-113, 121, 15, -68, -54, 63, -25, 39, -8, -88, 84, -124, 89, 127, 38, -112]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-12, 126, -59, -27, -3, -16, 92, -54, 99, 67, 56, 71, 46, -106, 43, -107, 4, -95, 93, -9, -58, -9, -69, -127, -19, 127, 11, -74, -88, -89, -16, -43, 22, 62, -101, -110, 85, 57, 37, -50, -99, -102, -43, 0, -113, 64, -44, -119]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[113, 34, -63, -108, 83, -49, 75, -93, -28, 0, -2, -21, 109, 10, 8, -15, -61, 21, -111, -98, -46, -84, -115, -95, -7, -99, -46, -41, -11, -125, 52, 91, 3, -115, -88, 5, 114, -52, 19, -7, 59, -128, -76, -53, 61, 12, 90, -16, -42, 38, -32, -54, -14, 85, -52, 15, -98, 69, 8, -61, 51, 71, 46, 117, 70, -85, 54, 57, -61, 16, 111, 49, 84, 26, -42, 101, 88, -32, 91, -88, -57, -85, 69, 28, -66, 59, 88, 9, -95, -88, 108, 10, 107, -13, -49, -95, 22, 62, -101, -110, 85, 57, 37, -50, -99, -102, -43, 0, -113, 64, -44, -119]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[113, 34, -63, -108, 83, -49, 75, -93, -28, 0, -2, -21, 109, 10, 8, -15, -61, 21, -111, -98, -46, -84, -115, -95, -7, -99, -46, -41, -11, -125, 52, 91, 3, -115, -88, 5, 114, -52, 19, -7, 59, -128, -76, -53, 61, 12, 90, -16, -42, 38, -32, -54, -14, 85, -52, 15, -98, 69, 8, -61, 51, 71, 46, 117, 70, -85, 54, 57, -61, 16, 111, 49, 84, 26, -42, 101, 88, -32, 91, -88, -57, -85, 69, 28, -66, 59, 88, 9, -95, -88, 108, 10, 107, -13, -49, -95, 22, 62, -101, -110, 85, 57, 37, -50, -99, -102, -43, 0, -113, 64, -44, -119]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[78, 59, -60, -126, -87, -63, -110, 20, -1, -64, 5, 90, 107, -108, -62, -71, -52, -7, -23, -97, -102, 100, -128, 96, 100, -113, -113, -7, 76, 106, 88, -22, -23, -70, 48, -106, -57, -89, -73, -48, 90, 64, -93, -118, 100, 53, -38, -11, 101, 124, -101, 58, -107, 0, 8, 9, 109, 56, -14, 126, -102, -112, -24, 21, 41, 39, 64, -77, 67, 96, 37, -31, -116, 96, -4, -107, -4, -15, -39, -10, -16, -94, 53, 48, -124, 89, 34, -124, 26, 38, -21, -101, -42, -60, 82, 87, 22, 62, -101, -110, 85, 57, 37, -50, -99, -102, -43, 0, -113, 64, -44, -119]");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.Class<?> wildcardClass29 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-39, 43, 76, 73, -112, -113, 30, -109, -124, -67, -86, -11, -68, -65, -47, 111]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-64, -103, 59, 49, -93, -26, -92, 17, 2, -41, 26, 88, 74, -125, -26, -44]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[102, -22, -109, 39, 22, 34, 93, -76, 16, 102, -1, -22, 52, 27, -47, 116]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-117, 14, -70, -29, -71, 51, -105, 38, 46, 75, -49, 105, 44, -55, 6, 4]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[119, -87, -87, 17, 59, -113, 98, 0, 61, 54, 117, 17, -122, -99, 75, -89, 97, 113, 56, -127, 86, -95, -31, -92, 29, 110, -65, -49, 121, -32, 15, 33, 102, -22, -109, 39, 22, 34, 93, -76, 16, 102, -1, -22, 52, 27, -47, 116]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-45, 68, -13, -69, -118, 12, 57, -123, -127, 50, 28, 96, 80, -23, 44, -117, -37, 5, -8, 112, -100, -118, -30, -73, -108, 34, -45, 3, 123, 47, -76, -67, 102, -22, -109, 39, 22, 34, 93, -76, 16, 102, -1, -22, 52, 27, -47, 116]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[57, 112, -121, 39, 46, 25, 121, -32, 5, 101, -68, 54, 25, 22, -78, -112, 70, 72, 28, -4, 123, 9, 109, -12, -112, 122, -78, 18, -121, -90, 59, -125, -105, -39, -91, 45, 28, -62, -111, 4, 101, 45, 47, -71, 5, 83, -52, 39, 47, 119, 125, -90, 21, 36, -110, -118, -42, -5, -47, -45, 123, 81, -20, -112, -71, -23, 124, 91, -83, -97, 35, 26, 85, -5, -49, 21, -66, -3, -35, -113, 2, 46, 53, -63, -71, -72, -40, 25, -114, -53, 91, 57, -97, 17, 9, -97, 102, -22, -109, 39, 22, 34, 93, -76, 16, 102, -1, -22, 52, 27, -47, 116]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "397087272E1979E00565BC361916B29046481CFC7B096DF4907AB21287A63B8397D9A52D1CC29104652D2FB90553CC272F777DA61524928AD6FBD1D37B51EC90B9E97C5BAD9F231A55FBCF15BEFDDD8F022E35C1B9B8D8198ECB5B399F11099F66EA932716225DB41066FFEA341BD174" + "'", str27, "397087272E1979E00565BC361916B29046481CFC7B096DF4907AB21287A63B8397D9A52D1CC29104652D2FB90553CC272F777DA61524928AD6FBD1D37B51EC90B9E97C5BAD9F231A55FBCF15BEFDDD8F022E35C1B9B8D8198ECB5B399F11099F66EA932716225DB41066FFEA341BD174");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "397087272E1979E00565BC361916B29046481CFC7B096DF4907AB21287A63B8397D9A52D1CC29104652D2FB90553CC272F777DA61524928AD6FBD1D37B51EC90B9E97C5BAD9F231A55FBCF15BEFDDD8F022E35C1B9B8D8198ECB5B399F11099F66EA932716225DB41066FFEA341BD174" + "'", str28, "397087272E1979E00565BC361916B29046481CFC7B096DF4907AB21287A63B8397D9A52D1CC29104652D2FB90553CC272F777DA61524928AD6FBD1D37B51EC90B9E97C5BAD9F231A55FBCF15BEFDDD8F022E35C1B9B8D8198ECB5B399F11099F66EA932716225DB41066FFEA341BD174");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-87, -97, 99, 120, -108, 101, 98, 56, -4, -24, 104, 92, -120, 34, 104, -26]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[99, 98, 34, 90, 103, -34, 102, -38, -101, -23, 84, -45, -51, 121, -64, 22]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[62, 89, 101, -41, 10, -122, 25, 63, 109, 33, 75, -73, 37, 16, -79, -15]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[73, 63, 39, -119, -40, 8, -35, -110, 13, -126, -42, -30, 108, 26, -22, 41]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122, -35, -50, -73, -41, 57, 35, -28, 115, 54, 0, 104, 37, -121, 32, 100, 1, -67, 60, 28, 22, -1, 60, -45, 18, 87, -70, 28, -108, 106, 85, 49, 62, 89, 101, -41, 10, -122, 25, 63, 109, 33, 75, -73, 37, 16, -79, -15]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[107, -32, -22, -53, -42, -22, -69, -51, 112, 120, -24, -74, 82, 29, 56, 120, -119, -5, -25, -58, -19, -125, -18, -67, -42, 9, 37, -83, 66, -79, -117, -108, -124, 74, -80, -120, -88, -2, -70, -69, 49, -18, 19, 67, 18, -126, -45, 43, 17, 15, 99, 89, 111, 19, 7, -92, -102, 95, -89, 10, 41, -101, -101, -100, -58, 96, 33, 86, -84, -24, 11, 105, -33, -44, -62, -85, -48, -12, 92, 45, 43, -111, -29, -33, -6, 25, -79, 126, -104, 65, -47, -27, -18, 1, -66, 48, 62, 89, 101, -41, 10, -122, 25, 63, 109, 33, 75, -73, 37, 16, -79, -15]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[107, -32, -22, -53, -42, -22, -69, -51, 112, 120, -24, -74, 82, 29, 56, 120, -119, -5, -25, -58, -19, -125, -18, -67, -42, 9, 37, -83, 66, -79, -117, -108, -124, 74, -80, -120, -88, -2, -70, -69, 49, -18, 19, 67, 18, -126, -45, 43, 17, 15, 99, 89, 111, 19, 7, -92, -102, 95, -89, 10, 41, -101, -101, -100, -58, 96, 33, 86, -84, -24, 11, 105, -33, -44, -62, -85, -48, -12, 92, 45, 43, -111, -29, -33, -6, 25, -79, 126, -104, 65, -47, -27, -18, 1, -66, 48, 62, 89, 101, -41, 10, -122, 25, 63, 109, 33, 75, -73, 37, 16, -79, -15]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-105, 20, -104, 65, -94, 62, 123, -83, -40, -55, -17, -31, 47, 49, 31, 125, 33, 85, 3, -73, 54, 20, 71, 33, -116, 88, 15, 4, -50, -57, -118, -47, 62, 89, 101, -41, 10, -122, 25, 63, 109, 33, 75, -73, 37, 16, -79, -15]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-29, 117, 81, -59, -85, -108, -87, 100, -124, 21, 109, 98, 115, -39, 44, -33, -22, -107, 83, 100, 37, 118, 6, -60, -96, -46, 50, -52, 89, 123, -26, 40, 62, 89, 101, -41, 10, -122, 25, 63, 109, 33, 75, -73, 37, 16, -79, -15]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey4);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey16);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-10, 112, 18, 59, 76, 74, -125, 75, -46, -1, -96, 14, 61, 104, 25, -63]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[50, 28, -68, 3, -119, 106, -64, -93, 50, 68, -108, 51, -32, -72, -101, 37]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[50, 28, -68, 3, -119, 106, -64, -93, 50, 68, -108, 51, -32, -72, -101, 37]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-128, 90, -21, 107, -37, -116, 58, 115, -91, 70, -92, -17, -25, 0, 123, -5, -92, 10, -79, 37, -49, 61, 16, 28, 101, 36, -125, 20, 116, -22, -115, -2, -10, 112, 18, 59, 76, 74, -125, 75, -46, -1, -96, 14, 61, 104, 25, -63]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-52, -85, -86, 110, -118, 50, -67, -71, 90, -56, -41, -101, 123, -47, 91, 31]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, -75, -69, -108, 3, 6, 60, -36, 94, -87, 43, 109, 58, 86, -50, -57]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, -75, -69, -108, 3, 6, 60, -36, 94, -87, 43, 109, 58, 86, -50, -57]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-52, -85, -86, 110, -118, 50, -67, -71, 90, -56, -41, -101, 123, -47, 91, 31]");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-21, -109, 45, -117, -72, -121, -16, -58, -36, 13, 85, 100, -25, -98, 101, -24]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[102, 74, 96, -22, -2, 68, -49, 101, 41, 89, 44, 116, 118, -54, 77, -61]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-28, -23, 33, 125, -41, 118, -118, 114, 58, 11, -105, 127, -98, -21, 52, -54]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[64, -117, -27, 69, -41, -19, -92, 74, -125, 94, -122, -46, 109, 110, 106, 79]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-82, 6, -19, -11, -110, -106, -78, -108, 71, -34, -27, -75, -94, 20, -101, -70, -42, -23, 4, -15, -51, -123, -24, 49, 26, 120, 46, -87, 118, -11, 118, 33, -28, -23, 33, 125, -41, 118, -118, 114, 58, 11, -105, 127, -98, -21, 52, -54]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-49, 122, 16, -45, 23, -112, 113, 108, -26, -15, 91, -34, 11, 99, -69, -90, 69, -89, -8, 9, 121, -96, 58, 93, -96, -115, 111, -56, -88, 101, 26, 13, -28, -23, 33, 125, -41, 118, -118, 114, 58, 11, -105, 127, -98, -21, 52, -54]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-75, -84, -86, 102, 60, -56, 114, 45, 87, -99, 88, -44, 88, 125, -2, 88, 79, 101, -114, 104, 46, -70, 14, -66, 22, 25, 113, -127, 27, 67, -118, -63, 58, 80, 32, 62, 38, 82, 21, 100, 37, 98, -127, 103, 94, 89, 65, -63, 78, -75, -21, -23, -6, 20, -126, -122, -59, 71, 18, 2, -112, 89, -31, -81, 113, 35, -112, 49, -55, -6, -58, 66, 75, -22, -127, -18, 22, 33, -76, 7, -93, -52, 6, -93, -5, -39, 110, -51, -12, -122, 39, -40, 33, 17, -6, 89, -28, -23, 33, 125, -41, 118, -118, 114, 58, 11, -105, 127, -98, -21, 52, -54]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-16, 121, -127, 2, 58, 127, -103, -12, 45, 123, 48, 75, -58, 125, 56, 27, 62, -72, 107, 66, 117, 34, 19, -57, 104, -93, -63, 127, -26, -59, -80, 99, -42, -73, -98, -76, -15, 78, 52, -27, 126, 36, -31, 29, 121, 6, -115, 28, 42, -97, 3, -90, 46, -67, -112, 106, -118, 25, -92, 1, 48, 10, 21, -11, 118, 33, 41, -125, 71, -21, -123, -54, 72, 67, 40, 78, 7, -59, 97, -91, -111, 50, -11, 77, 123, -24, 125, -1, 49, 46, -77, -29, -44, -111, -20, -20, -28, -23, 33, 125, -41, 118, -118, 114, 58, 11, -105, 127, -98, -21, 52, -54]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-92, 112, 22, -48, 101, 80, -69, 74, 22, -67, -116, 113, 29, -40, 3, 18, -74, 79, -4, -41, -119, 21, 109, 44, 74, 95, 70, 109, 27, 2, -124, 99, 125, 32, 115, 98, -52, -99, -121, -19, 40, -33, 17, -105, 107, -126, -117, -25, 51, 116, -43, 39, 88, -65, -72, 32, 84, 109, 103, -127, 77, 7, 17, -106, 38, 109, 23, 87, -46, -107, 65, -17, 66, -71, -11, -46, 107, 102, 76, 111, 94, -7, -99, 3, -53, -54, 64, -87, 81, 81, -104, 127, -9, -57, -48, 0, -28, -23, 33, 125, -41, 118, -118, 114, 58, 11, -105, 127, -98, -21, 52, -54]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-36, -11, -109, 1, 48, -1, 11, 9, 35, -41, 116, -8, -10, -115, 39, -128]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-121, -65, 13, -12, 10, -112, 39, 70, -109, 48, 22, 64, 75, -68, -104, 95]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, -3, -2, 124, 31, 81, -39, 39, 107, -78, -53, -89, -99, -17, -11, 80, 67, -29, -116, 40, -103, 66, 73, 49, -40, 12, 91, -82, 56, 65, 20, -114, -36, -11, -109, 1, 48, -1, 11, 9, 35, -41, 116, -8, -10, -115, 39, -128]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-53, -38, -97, -27, -15, 63, -108, -19, 4, -99, -53, 103, 1, -91, -55, -10, -35, 23, -94, 109, -53, 56, 6, -63, 16, 78, 123, -72, 10, -101, -38, -25, -36, -11, -109, 1, 48, -1, 11, 9, 35, -41, 116, -8, -10, -115, 39, -128]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("F6441EF035CB44DF482D4076E2A2584A09FB6932E41E1A73AACC011A11D436CF6153ACC0BB45F9E81CD68A0E5BDE70C5E98B731602E244B9470D386A4098F20E0DA871E1E1E68188363224699C5B251F769207B9D3E7B513FBF246B3AB276CDE6EDB9EC603A754A6FDFF48C1723737A5", secretKey6);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey53);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey64);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey64);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey64);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey64);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[62, 13, -32, 57, 52, 70, -121, -21, 76, 36, -26, 48, -95, -115, -40, 3]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-12, 84, 88, -47, 41, 100, 21, -121, 13, 82, 15, -5, -121, -6, -71, 107]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[75, 23, -117, -5, 90, -21, -54, 7, 38, -91, 44, 50, 18, 50, 73, -76, -54, 33, -31, -112, -53, 120, -89, 30, 53, -108, -107, -7, 22, 87, -86, 84, 62, 13, -32, 57, 52, 70, -121, -21, 76, 36, -26, 48, -95, -115, -40, 3]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-119, -96, 3, 22, 87, -95, 74, -108, -94, -23, -13, -90, -56, 50, -42, 68, -100, 27, -86, 83, 47, -42, 40, -16, -110, -114, -56, 111, 102, -73, 21, 112, 62, 13, -32, 57, 52, 70, -121, -21, 76, 36, -26, 48, -95, -115, -40, 3]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-112, 109, 120, 115, -28, 45, 74, 48, -38, -118, 99, 32, 11, -77, 75, -100, -68, 1, 67, 96, 5, -16, 31, -47, -106, 32, -28, -31, -122, -122, 18, -41, 62, 13, -32, 57, 52, 70, -121, -21, 76, 36, -26, 48, -95, -115, -40, 3]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-99, 74, 93, -71, -6, -110, 108, -67, 108, -46, -42, -85, 123, -87, -50, 66]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[45, 66, -92, -23, -22, -86, 11, 87, 81, 19, 21, 114, -78, -3, 34, -85]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-38, -8, 120, 56, -92, 22, 110, -107, 108, -70, 89, -6, -31, 112, -112, -49]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-98, -46, 93, 111, 122, 97, 15, 98, 67, -52, -87, 10, -49, 9, 16, -86]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[11, 7, 42, -115, -7, 44, 77, -94, -9, 53, 30, -14, -7, 82, 20, -101]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[63, -25, -33, -6, -99, 59, -92, -93, 112, -58, -53, 32, 100, 92, 23, -86]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-14, -52, -96, 23, -115, 36, 3, -12, 22, -75, 18, -78, -3, -39, 10, -14]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-67, 89, 77, 0, -127, 104, -85, 12, -69, -21, -3, -34, 114, 66, 5, 17]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[20, 68, 103, 56, 53, 101, 113, -120, 119, -15, -4, 54, 63, 5, 9, -28]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, -61, 104, 97, -99, -88, -69, 42, -48, 61, -28, 124, -22, 85, 98, 68]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-7, -67, -73, -62, 13, 54, 45, 54, 30, -7, -13, 4, 51, 58, 4, 117]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[20, 68, 103, 56, 53, 101, 113, -120, 119, -15, -4, 54, 63, 5, 9, -28]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-76, -7, -110, 7, 78, 6, 44, -17, -72, -82, -50, 122, 125, 111, -68, 31, 29, 88, -94, 44, 126, -43, -10, 77, -127, 19, 45, 98, -52, 80, 45, 118, 20, 68, 103, 56, 53, 101, 113, -120, 119, -15, -4, 54, 63, 5, 9, -28]");
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey38);
        java.lang.Class<?> wildcardClass45 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[53, -93, -126, -73, 2, -26, 89, -14, 57, 72, -19, 68, -105, -98, -45, 121]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-87, 21, 88, 63, 59, 33, -25, 19, -75, 91, 8, 4, 10, -4, -98, -45]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[69, 100, -58, 14, -23, 21, 36, 82, -28, 55, 40, 62, -127, 74, -107, -21]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[45, -40, 13, 89, -31, 83, 28, 91, 61, 102, 25, 81, 30, -34, -102, 118]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-30, 48, 42, -97, 46, -100, 111, -52, -66, -12, 53, -110, 40, -102, -118, -69]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[23, 91, 23, -41, -117, -103, -24, 22, 31, -78, 98, 58, -96, -62, -29, -14]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[56, 64, 39, 16, 109, -117, 90, 27, -35, 111, 20, -121, -106, 3, 48, 68]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-125, -78, -44, 13, 60, 22, 116, 4, 98, 91, -72, 8, -111, 102, 29, 111]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-84, -46, -98, 89, -70, 89, -126, -125, 67, -89, -62, 36, -119, 109, -14, -73, -56, -73, -77, 114, -63, -87, -85, -4, 121, -105, -18, 125, 1, -42, -36, -32, 56, 64, 39, 16, 109, -117, 90, 27, -35, 111, 20, -121, -106, 3, 48, 68]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey27);
        java.lang.Class<?> wildcardClass34 = secretKey27.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[123, 56, -38, 125, 107, 47, -107, -114, -127, 67, 60, -64, -121, 88, -98, 120]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[120, -12, 96, 91, -53, 109, -41, 48, 110, -119, 70, -37, 74, 29, 118, 111]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-35, 47, -112, 6, -102, -104, -116, 116, -87, -3, -41, 96, -120, -8, 54, -55]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-96, 73, -61, 62, -62, -25, 67, 40, 47, -59, 64, -86, 8, -52, 111, -20]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[16, 58, 13, 127, 105, 20, -119, 121, -34, -86, -12, 64, -12, 68, 11, -116]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-39, 43, -46, -87, -80, -68, 91, -63, -10, -117, -32, 10, -10, -65, -16, 30]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-39, 43, -46, -87, -80, -68, 91, -63, -10, -117, -32, 10, -10, -65, -16, 30]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, -94, 95, -95, -115, -18, 112, 61, 38, 98, 30, -96, 8, 121, 110, 104, -87, 111, 118, -78, 25, -25, 14, 95, 24, -114, 64, -88, -69, 120, -105, 61, 16, 58, 13, 127, 105, 20, -119, 121, -34, -86, -12, 64, -12, 68, 11, -116]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey6);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-59, -74, 66, 124, 115, 18, 36, -55, 18, 41, 66, -114, -97, -121, 35, 4]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-124, 96, -109, -74, 14, -107, 117, 80, -41, 106, -81, -81, 89, -40, -109, -74]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-124, 96, -109, -74, 14, -107, 117, 80, -41, 106, -81, -81, 89, -40, -109, -74]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-46, 53, 75, 59, -73, 88, 24, 5, -53, 103, -75, 39, -85, 3, -24, -78, -46, 28, 95, -56, -42, 27, -49, -43, -118, 124, -74, 96, 99, 17, -71, -122, -59, -74, 66, 124, 115, 18, 36, -55, 18, 41, 66, -114, -97, -121, 35, 4]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[107, -56, 80, 79, -93, -120, -71, 54, 54, 11, 61, -81, 90, 95, 101, -14, -93, -113, -87, -60, -46, -54, -64, -98, -80, -76, 81, -95, 94, -117, -43, -88, -59, -74, 66, 124, 115, 18, 36, -55, 18, 41, 66, -114, -97, -121, 35, 4]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[16, 0, -34, -77, -31, -65, -95, 72, 25, 103, -2, 56, 67, -52, -6, -34, 126, -7, -32, 19, -126, -81, 71, -124, 39, 56, 2, 72, -37, 85, 92, -33, -59, -74, 66, 124, 115, 18, 36, -55, 18, 41, 66, -114, -97, -121, 35, 4]");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[77, 96, -12, -57, -66, -63, 30, -94, 119, -36, -59, 104, 60, 92, -89, -13]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[79, -37, 119, 4, 66, -87, 124, -12, -35, -30, -85, 96, -54, 99, -59, -63]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[86, -33, 114, 109, 80, -18, 62, 27, 113, 82, -76, -83, -8, -66, 106, -32]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[77, 96, -12, -57, -66, -63, 30, -94, 119, -36, -59, 104, 60, 92, -89, -13]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-64, 114, -122, -69, 55, 40, -46, 59, 36, 27, -15, -88, 71, 120, 7, -128, 11, -10, 83, 53, 22, 13, 84, -12, -24, 81, 42, 98, 3, -100, 123, 101, 77, 96, -12, -57, -66, -63, 30, -94, 119, -36, -59, 104, 60, 92, -89, -13]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[13, -31, -86, -11, 116, -84, -87, 125, 26, -85, 16, -118, 87, -73, 118, 127, 96, -7, 1, 117, 113, 76, 75, 5, -26, -28, -31, -28, -85, -98, -15, 113, 77, 96, -12, -57, -66, -63, 30, -94, 119, -36, -59, 104, 60, 92, -89, -13]");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey22);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey52);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey52);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[19, 12, -5, -19, 17, 90, 58, -23, -28, 76, -20, 111, -8, -29, 68, -86]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-113, 11, -127, -24, 109, 56, 112, 71, -21, -125, 26, -115, -52, -111, 9, -52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-3, 13, 39, -38, 93, 33, -78, 3, 72, -15, -9, 94, 9, 35, 126, 63]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-108, -117, 71, 46, 78, 44, -16, -16, -81, 118, 92, -87, -51, 90, -67, -96]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-113, 35, -66, -105, 47, -107, 44, -88, 13, 72, -12, -76, -102, 31, 35, -68, -13, -54, -69, 62, -21, 44, 109, -64, -18, 94, -9, 15, 122, -106, -47, 127, -3, 13, 39, -38, 93, 33, -78, 3, 72, -15, -9, 94, 9, 35, 126, 63]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, -63, 127, 87, 49, -7, 62, -73, -117, -61, -13, 48, 84, 7, 100, -32, 105, 44, 109, 74, 95, -93, -42, 76, -9, -23, -61, -46, -104, 39, 87, -35, -3, 13, 39, -38, 93, 33, -78, 3, 72, -15, -9, 94, 9, 35, 126, 63]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[121, -42, 40, 54, 12, -119, -44, 104, -105, -32, 100, 122, 112, -69, -13, 109, 57, -112, -44, 65, 26, 29, 75, -86, 65, -113, 76, 9, 34, 69, 59, 61, 17, 100, -121, -44, 25, -92, 21, -88, 4, -29, 34, -98, -127, -83, 48, -38, -120, -59, 22, 26, -88, 91, -84, -68, -95, 107, -8, 53, 46, -33, 32, -105, 121, -70, -82, 19, -12, 85, 0, -41, 78, 77, 8, 108, -5, 27, 111, 98, -71, 40, -125, -57, 80, -45, 22, 27, 28, -42, 25, 87, 106, -103, -70, -21, -3, 13, 39, -38, 93, 33, -78, 3, 72, -15, -9, 94, 9, 35, 126, 63]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[112, -77, 78, 84, 98, -14, -100, -89, -25, -3, -62, 15, 69, -124, 44, 19, 124, -125, 1, 117, -61, 60, -57, 44, 70, 77, -22, -62, 57, -2, -69, -21, 19, 40, -47, 83, 71, -60, -102, 39, -116, 81, -54, 14, -41, -48, 7, 7, 33, 126, -24, 121, 76, -9, -86, -116, -99, 25, -22, 53, 78, 26, -98, -2, 79, -32, -94, 64, -17, -18, 36, 120, 66, 117, -22, 97, -112, 58, 16, -73, 126, -74, -111, 92, -16, -53, 63, -109, -36, 37, -13, 37, -126, -47, -12, 3, -3, 13, 39, -38, 93, 33, -78, 3, 72, -15, -9, 94, 9, 35, 126, 63]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[119, -123, 113, 72, 64, 82, 81, 125, -114, -19, -112, -73, 30, -14, -39, -74, -126, 47, 94, 54, -55, 4, 43, 109, -1, 25, 19, 1, 47, 12, -51, 95, 65, 7, -101, -81, -12, 57, -56, -5, 24, 48, -39, -89, 124, -100, -62, -69, 53, 10, 5, -14, -22, 99, 127, 29, 98, -107, -127, 27, -33, -127, -4, -79, 26, 68, 75, 12, 55, 66, -107, -66, 40, -64, 118, -26, -127, -41, -13, -75, 64, -51, -46, 118, -11, 64, 30, 81, 22, 7, 77, 126, 127, -72, 104, 46, -3, 13, 39, -38, 93, 33, -78, 3, 72, -15, -9, 94, 9, 35, 126, 63]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[61, -27, 108, 28, -6, 66, -57, -2, -19, 10, -66, -10, -55, -70, 50, 25]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[91, -38, -95, 42, -49, -10, -45, -41, -127, 84, 86, -26, -82, -102, -39, -9]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-65, -96, 26, 81, -19, -38, -31, 7, -108, -108, 87, -84, 121, -86, -37, -26]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[86, 80, 2, -15, -110, -12, 108, -83, 74, 84, -121, 117, 45, 112, 53, 19]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-59, -2, 106, -121, -52, -55, 67, -37, -61, -30, -8, 4, 2, -65, -125, -100, -105, -44, -62, 77, 46, 73, 78, -97, -31, 25, -4, -52, 63, 6, -77, -121, -65, -96, 26, 81, -19, -38, -31, 7, -108, -108, 87, -84, 121, -86, -37, -26]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-65, -96, 26, 81, -19, -38, -31, 7, -108, -108, 87, -84, 121, -86, -37, -26]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[86, 80, 2, -15, -110, -12, 108, -83, 74, 84, -121, 117, 45, 112, 53, 19]");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey35);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-67, -107, -46, -70, 100, -52, 89, 23, -36, 21, -89, -3, 76, -20, 127, 118]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[121, -9, 115, -86, -3, -120, -110, 94, 46, 117, 105, 53, 16, -3, 74, -68]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[78, -35, 28, -106, 72, -26, 52, -62, 106, 127, -56, 100, -20, -56, -63, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-37, -5, -35, -25, 79, 84, 5, 22, 84, 93, 97, 124, -77, -90, -109, 114]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-92, 53, -12, 50, 67, 45, 26, -56, -110, -80, -86, 45, 24, 50, -90, 5, 41, 124, 42, 53, -61, -33, -63, -61, 124, -44, 113, 60, -58, -56, 29, 111, 78, -35, 28, -106, 72, -26, 52, -62, 106, 127, -56, 100, -20, -56, -63, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-77, -32, -8, -91, -99, -92, 45, 59, 80, 127, -61, -115, 125, -91, -125, 48, -1, 72, -3, 31, -111, -117, 88, -115, 52, -110, 71, 72, 75, -52, 34, 35, 78, -35, 28, -106, 72, -26, 52, -62, 106, 127, -56, 100, -20, -56, -63, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[72, -2, -97, 90, -99, 105, -41, 120, -96, -118, -86, -22, -71, 115, -32, 77, -113, 104, -80, 48, -28, 99, 10, -43, 111, 47, 86, 79, -28, 57, 119, -105, -110, 45, 91, -89, -14, 90, 127, -36, -49, -35, 93, -116, -3, 94, 73, 81, -110, 24, -31, 56, 16, -83, 76, 63, -43, -36, 126, -34, 125, -56, 46, -116, 7, 4, -16, -17, 19, 56, 60, 80, -109, 7, -83, -35, -110, 28, -37, -95, -52, -66, -82, 119, -104, 70, 94, 100, -63, 37, -59, 62, 34, 65, -18, 16, 78, -35, 28, -106, 72, -26, 52, -62, 106, 127, -56, 100, -20, -56, -63, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-92, -62, -1, 114, 117, 85, 40, 72, 40, 121, 12, 110, 31, 69, -94, -99, -92, 72, 104, -24, -113, -113, 79, -71, -50, 55, 92, 34, -121, -1, 59, 91, 78, -35, 28, -106, 72, -26, 52, -62, 106, 127, -56, 100, -20, -56, -63, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[51, -75, 103, 57, -120, -62, -71, -2, -36, 125, 125, -127, -112, 23, -70, 23, 106, -113, 90, -60, 98, -112, 24, 97, 28, -106, -22, -7, -29, -95, -23, -22, 126, -59, 114, 72, -37, -61, -14, -107, -19, 8, -29, -70, -103, 38, 91, -40, -107, 51, 58, -8, -112, 126, 30, 111, -117, 73, 70, 96, -61, -97, -66, -120, 112, -66, -66, 69, 5, -106, 17, 21, 75, 50, -16, -25, -59, -34, -128, -124, 62, -56, 91, 45, -53, 92, 33, 96, -46, 81, 37, -57, 127, -22, -15, -25, 78, -35, 28, -106, 72, -26, 52, -62, 106, 127, -56, 100, -20, -56, -63, -1]");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-112, -116, -47, 103, -98, 22, -38, -48, -61, 20, 45, -54, -22, 39, 69, -113]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-2, 103, 39, 108, -98, 37, -29, 28, -82, -35, 76, -37, -78, 109, -103, 62]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-16, -14, -69, -74, -14, -66, 31, 27, 13, 54, -65, -82, -94, -42, 115, -49, -21, 35, 51, -24, -41, -38, 53, 7, 89, -42, 61, -42, -109, 118, 92, -1, -112, -116, -47, 103, -98, 22, -38, -48, -61, 20, 45, -54, -22, 39, 69, -113]");
        org.junit.Assert.assertNotNull(byteArray39);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-14, -51, 10, 63, 67, 120, 21, 89, -51, -87, 55, -127, -29, -7, 97, -65]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-30, 56, 52, 68, -86, -63, 110, -110, 0, 85, -58, -19, 127, 109, 17, 99]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-37, -106, 85, 40, -17, -30, -60, 114, -19, -18, 76, -91, 108, -8, -87, -45, -79, 65, 28, -75, -26, 43, -113, -70, 93, -48, -2, -17, 44, 40, 28, -24, -14, -51, 10, 63, 67, 120, 21, 89, -51, -87, 55, -127, -29, -7, 97, -65]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey39);
        java.lang.Class<?> wildcardClass47 = secretKey39.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-39, -86, -11, 36, -121, -122, -60, -77, 52, 15, -6, -88, 30, 124, -126, 22]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[23, -91, 118, -93, -32, -9, -81, -116, -19, 61, 54, 31, 108, -31, -117, -11]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-126, 70, -8, -2, -101, 71, 35, -103, 16, -106, -23, -62, 122, 61, 73, -13]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-58, -93, 9, 2, 112, 14, -42, -90, -41, -80, 7, -6, 45, 74, -101, 26]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-39, -91, 102, -67, -108, -89, -123, -69, 44, -59, -44, -118, 83, 123, 37, -23]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-112, -33, 21, -90, 107, 120, 64, 122, 77, 95, -109, 61, -126, 91, 20, 74]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[38, 36, 125, 118, 58, -89, 38, 31, 6, -46, 28, 110, -43, 115, -44, -19]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-111, -17, 49, 55, -96, 122, -23, 111, -91, 65, -21, -69, 0, 59, 122, 35]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[97, -23, 52, 79, 1, 116, 5, -34, -33, 99, -20, -127, 123, 59, -53, 42, -12, 28, 26, -110, -97, -31, -82, -92, -1, -29, 55, -68, 96, -126, 114, -12, 38, 36, 125, 118, 58, -89, 38, 31, 6, -46, 28, 110, -43, 115, -44, -19]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[91, 44, 66, -48, 45, 82, 59, 31, -25, -71, -42, -127, -43, 26, 21, 102, -65, 79, 22, 13, -93, -63, -23, -12, 84, -89, -126, 48, -67, -83, 67, 47, 38, 36, 125, 118, 58, -89, 38, 31, 6, -46, 28, 110, -43, 115, -44, -19]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey39);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey64);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[11, 104, 110, 93, -20, -72, -127, -56, 51, -24, 57, -2, 12, -9, -20, -109]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[75, 50, -117, 20, 0, -74, -15, 22, -31, 26, 54, 30, 30, -7, -56, 117]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[91, 33, -22, 21, -94, -38, 110, 38, -71, -32, 96, 117, -48, -13, -48, -103]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-47, 19, 100, -33, 9, -45, -2, 6, -58, -33, 38, -36, 63, 25, 67, 114]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[109, -60, -8, 105, -98, 52, -121, -120, 94, 72, -50, 13, -69, 80, 18, -6]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[91, 42, -104, -1, 98, -72, 33, 6, 33, 66, -30, 41, 38, 44, 52, -110]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, -108, 92, -20, 37, 41, 62, -87, 8, 70, -11, -27, -84, -102, -29, -7]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-39, -49, 32, 55, -91, 33, 0, 36, -74, 75, 57, -78, 71, -33, 125, -112]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-15, -39, 55, 28, -28, 41, 96, -67, -38, -60, -106, -40, -84, 18, -108, -75, -36, 3, 82, -114, 62, -14, -128, -60, -47, -42, 7, 13, -19, -47, 4, -117, -1, -108, 92, -20, 37, 41, 62, -87, 8, 70, -11, -27, -84, -102, -29, -7]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[87, 99, -78, -24, 4, -5, -106, 127, 125, -63, -121, 12, -127, -40, -4, -82, -19, 89, -75, -97, -12, -55, -69, -121, 58, 67, -54, 122, -112, 89, -25, -107, -1, -108, 92, -20, 37, 41, 62, -87, 8, 70, -11, -27, -84, -102, -29, -7]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-83, 30, -90, -81, -11, 13, -10, -83, 15, 34, -94, 20, -111, -73, 95, 104]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-70, -44, 62, -22, 28, -86, 46, -44, -67, 114, -101, 108, -98, -16, -27, -23]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[101, 71, -29, 37, 118, -98, 65, 50, 75, 80, -128, 93, 23, -83, -113, -24]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, -97, -94, -75, 96, 33, 23, -72, -92, 60, -60, 15, 26, 76, -59, 11]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-96, 97, 92, -45, -26, -24, 101, 28, -16, -10, -90, 86, 80, -92, -123, -30, 100, -74, 115, 9, 2, -90, -22, -120, -66, 8, -45, -86, 37, -79, -116, -123, 101, 71, -29, 37, 118, -98, 65, 50, 75, 80, -128, 93, 23, -83, -113, -24]");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey31);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-116, 109, 61, -127, -105, -112, -90, 25, 83, 0, 39, -112, -32, 54, -21, 17]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[99, 1, 24, 49, 117, -19, 46, -15, 29, 14, 23, -76, 7, 18, -56, 95]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[112, 13, 110, -119, 126, 124, -87, -8, 59, 33, -72, -9, 35, 20, 28, -66]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-116, 109, 61, -127, -105, -112, -90, 25, 83, 0, 39, -112, -32, 54, -21, 17]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[7, -28, 53, 93, -46, 89, -66, 30, -68, 33, 116, 21, -45, -117, -56, 53, -16, 45, 55, -116, -37, -88, 26, -17, -119, -103, 46, -54, 47, 12, -105, -85, -16, 36, -35, -122, -3, 61, 39, -116, 36, 3, 71, 25, -96, 3, -41, 23, -61, 127, -84, 59, -53, -108, -116, -103, -56, 48, -25, -18, -112, -72, -75, -17, -77, 96, 11, 15, -102, 39, -100, 63, -53, 18, -15, -60, -79, -40, 53, 85, 80, -68, -78, 56, -98, 51, -84, -86, -60, -80, -31, 17, 45, -72, 75, -128, -116, 109, 61, -127, -105, -112, -90, 25, 83, 0, 39, -112, -32, 54, -21, 17]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-14, -36, -47, 26, 81, 78, -80, 2, 108, -122, 77, 34, -91, -94, 21, -59, -78, -92, 91, 48, 89, 15, 68, 123, -31, 119, 30, -118, 102, -107, 5, 63, -116, 109, 61, -127, -105, -112, -90, 25, 83, 0, 39, -112, -32, 54, -21, 17]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[46, 125, 29, -19, -65, 74, -52, -34, -84, -84, 104, -2, -20, -32, -87, -13]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-64, 109, 103, 74, -38, -104, 1, -71, 22, 74, -66, -113, -59, -87, -114, -79]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[51, 6, -76, 103, -98, -47, -105, -106, 50, -1, 78, -63, -71, 115, 123, -61]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[125, 79, -79, 102, -94, 59, 9, -58, 1, 110, -42, 10, -107, -97, -89, -3]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-35, 85, -100, 111, 86, 71, -38, 53, -104, -98, 14, 30, -38, -29, -24, 124, -64, -56, 102, -75, -78, -117, 16, -118, 67, -116, -104, 118, 46, 60, -126, -68, 51, 6, -76, 103, -98, -47, -105, -106, 50, -1, 78, -63, -71, 115, 123, -61]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-35, -38, -84, -36, -14, -25, 8, 4, -19, -103, -96, 97, -14, -91, 77, 65, 1, 127, -32, -3, 71, 55, -30, -117, 41, -49, -3, 98, 55, -76, 78, -17, -66, -12, -90, 100, 107, -11, 69, 123, 58, -34, -79, 35, 0, 49, -90, -56, -84, -91, -66, 120, 60, 59, -52, -34, -18, 103, 35, 90, -117, -52, -89, -98, 35, -92, -30, -69, -75, -108, 45, -106, 105, -108, 94, -46, -3, 118, -12, 36, 47, 47, -109, 88, 61, -78, -61, -118, 124, 67, 125, -41, 99, -52, -85, 27, 51, 6, -76, 103, -98, -47, -105, -106, 50, -1, 78, -63, -71, 115, 123, -61]");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey20);
        java.lang.Class<?> wildcardClass25 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-9, -16, -9, -22, 94, 93, -74, 2, -59, -45, 29, -106, 50, -74, 30, -74]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-12, 9, -68, -35, -97, 17, -57, -41, 34, 119, 21, 113, -18, -34, 43, -48, -41, 86, 121, 28, 7, -103, 16, 83, 117, -31, -123, 3, 83, -101, -82, 54, -12, 42, -57, -123, 11, -67, 29, 32, 113, 5, -126, -109, 107, -65, 76, 54]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey4);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey28);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[85, 65, -1, -23, -50, -101, 45, 27, 10, 127, 60, -47, -108, -1, 22, -118]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[29, 5, -99, 106, -23, 28, 101, 73, -61, -106, -23, 102, 37, 64, -84, 103, -123, -100, 42, 72, 110, 0, -30, 127, -62, 34, -47, 75, -28, -91, 55, -15, 76, -61, 31, 32, -13, 1, 94, -61, 31, 34, 112, 110, 126, 125, 55, 14, -103, 83, -10, -52, -95, -32, 51, -18, 104, -6, -124, 27, 39, -59, -14, 3, -121, 92, -114, -55, 104, 28, 13, -36, -28, 92, -62, -28, 101, -66, 10, -65, 103, -87, -58, 6, -46, 100, 37, 116, 34, 45, 45, -125, 98, -67, -78, 83, 85, 65, -1, -23, -50, -101, 45, 27, 10, 127, 60, -47, -108, -1, 22, -118]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-97, -32, 98, -1, -109, -55, 42, -114, -23, 55, 126, -5, -109, 47, -91, 72, 102, 122, -47, 49, 101, 32, -105, 34, 10, -103, 60, -111, -59, -54, -59, 111, -112, -119, 111, 94, 49, 30, 120, -67, -119, 110, -83, -86, -118, -37, -118, 8, -4, 119, -94, -5, -76, 95, 101, 92, -105, -29, -105, -60, 60, -110, 93, -86, 94, -81, 0, 31, -72, 106, 90, 10, 127, 41, -115, -85, -14, 47, 31, 97, -87, -67, -11, -43, -72, -29, 54, 43, 120, 78, -53, -109, 124, 73, -64, 71, 85, 65, -1, -23, -50, -101, 45, 27, 10, 127, 60, -47, -108, -1, 22, -118]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-29, -76, -77, -38, -49, 5, -29, -78, -128, 43, -87, -109, 6, 11, 123, 61]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[58, -47, 103, 38, 16, 40, -3, 59, -124, 70, 125, 47, -68, 16, -30, -103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[85, 100, 28, 74, -66, -43, 122, 7, 113, -61, 19, -54, 111, 52, -100, 3]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[80, -85, -44, 104, -104, 14, -19, -38, -103, 74, 119, 9, 57, -27, 46, 40]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-94, -86, 67, -102, 90, 8, 63, 25, 64, 11, -77, -20, -111, -12, 124, -65, 15, -44, 36, 21, -68, 32, 54, -100, -126, -31, 54, 24, 21, 45, 67, 65, 85, 100, 28, 74, -66, -43, 122, 7, 113, -61, 19, -54, 111, 52, -100, 3]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-112, -94, -27, -7, -93, -44, -75, -79, -43, 120, -2, 108, -22, 115, 121, 0, -51, -109, -79, -33, -86, -106, -81, -39, 112, 30, -1, 44, -95, 104, 116, 80, 85, 100, 28, 74, -66, -43, 122, 7, 113, -61, 19, -54, 111, 52, -100, 3]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-37, -81, -13, 65, 14, -4, -21, -33, 26, 109, -100, 102, 102, 75, -116, 47, -75, -114, 1, -58, -107, -127, -68, -24, 29, -74, -47, 69, -19, -72, 111, 41, 76, 42, -75, -72, 53, -112, 95, 26, -51, -19, -83, 84, -69, 82, -86, -82, 96, 55, 103, 62, 66, -89, 108, -22, -84, 107, 35, -95, -17, -2, -24, -55, 9, 19, 97, 109, 92, -8, -25, -66, 92, -1, -111, -91, 106, -102, -58, -10, -11, -122, -25, 32, 62, -62, -57, 71, -86, 76, -105, 32, 62, 59, -106, -114, 85, 100, 28, 74, -66, -43, 122, 7, 113, -61, 19, -54, 111, 52, -100, 3]");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey31);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[7, 79, -48, 107, -45, -98, -101, -36, 68, 12, 25, 56, 57, 60, -42, -17]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[91, -68, 125, -10, -106, 85, 46, -2, -92, -85, 52, -94, 48, -69, 56, 64]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-88, 90, -12, -58, -53, -91, 87, 122, -57, 114, 23, 12, -77, 69, 76, -9]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[7, 79, -48, 107, -45, -98, -101, -36, 68, 12, 25, 56, 57, 60, -42, -17]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "074FD06BD39E9BDC440C1938393CD6EF" + "'", str9, "074FD06BD39E9BDC440C1938393CD6EF");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "074FD06BD39E9BDC440C1938393CD6EF" + "'", str10, "074FD06BD39E9BDC440C1938393CD6EF");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[91, -16, -123, -68, -26, 17, 75, -26, -54, 126, -46, 38, -20, -30, 24, -93]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-7, 59, -20, -41, -67, -82, -99, 21, -81, 39, -27, 87, -67, -42, 122, 111]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[81, -75, -89, -96, -25, -106, 93, -70, -98, -62, 36, 108, -92, 121, 40, -119]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[84, -90, 26, -45, 79, -65, -8, 67, -58, 1, -105, 86, -109, -20, 36, -121]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-10, -124, -17, -104, 13, -25, -45, -8, 101, 58, -100, -20, 31, 31, 59, -128, 105, -106, -18, 101, -50, 8, -32, 99, 94, -128, -64, -55, -12, -18, 7, 41, 81, -75, -89, -96, -25, -106, 93, -70, -98, -62, 36, 108, -92, 121, 40, -119]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-14, 47, 44, 28, 20, 22, 120, 50, -14, 80, -29, -40, -83, -115, 40, 116, -118, -3, 119, 107, -88, 110, -92, -104, 44, 72, -79, -69, -23, -49, 97, -21, 51, -29, -82, -84, -84, -119, -101, 99, -76, -104, 28, 64, -27, 59, 20, -91, 53, -73, -21, 49, 80, -17, 97, -3, 122, 2, -62, -26, 125, 76, 56, 98, 79, -128, -91, -23, -124, -4, 17, 27, 18, 125, 28, 9, -61, -101, -51, 79, -49, 52, 31, 9, -95, -93, -97, -6, -41, -34, 126, 123, -127, 103, 56, 92, 81, -75, -89, -96, -25, -106, 93, -70, -98, -62, 36, 108, -92, 121, 40, -119]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[75, 110, 66, -55, 59, 14, -80, -6, -58, -23, -37, 41, 53, 13, 21, 84, 126, 28, 96, 38, 32, 95, -54, -117, 127, -38, 95, 77, 125, -124, 121, -56, 81, -75, -89, -96, -25, -106, 93, -70, -98, -62, 36, 108, -92, 121, 40, -119]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, -75, -89, -96, -25, -106, 93, -70, -98, -62, 36, 108, -92, 121, 40, -119]");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey7);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey46);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey46);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey46);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey46);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[44, -28, -128, -39, 16, -41, 21, -63, -59, 85, 5, 62, -3, -88, 46, 90]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[89, 64, -62, 11, 95, -112, 37, -88, -2, 71, -54, 127, -12, 85, -52, -96]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[89, 64, -62, 11, 95, -112, 37, -88, -2, 71, -54, 127, -12, 85, -52, -96]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[79, 50, 126, -11, -26, -43, -56, -44, 67, 33, 12, 118, 90, -41, 81, -125]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 64, -62, 11, 95, -112, 37, -88, -2, 71, -54, 127, -12, 85, -52, -96]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[71, -57, 49, -5, 32, 74, 17, -53, -35, -122, -117, -118, -105, -109, -116, -85, 125, 0, 52, 117, -62, 55, -118, -47, 66, -50, 122, 40, 16, 0, -22, -26, -26, 18, 120, 95, -99, -116, 89, 85, -127, 58, -124, -126, -46, -76, 59, -69, 4, 86, 46, 88, -59, 97, -23, -98, 106, 89, 74, 46, 49, 10, -73, 4, -57, -43, 100, 109, 64, 27, -13, 80, 1, -97, 21, 45, 125, -51, 48, 67, -64, 78, 4, 1, -106, 41, -23, 51, -103, -52, -91, -96, 124, 67, 51, -69, 44, -28, -128, -39, 16, -41, 21, -63, -59, 85, 5, 62, -3, -88, 46, 90]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-12, 93, -98, 19, -3, 107, -81, -82, -7, 10, 43, -49, 52, 34, -16, -110, 101, 0, 81, -113, 46, -90, -101, -13, 50, 97, 77, 106, -120, 118, -112, -58, -99, -126, 86, -109, -16, 68, 107, 31, 104, 83, 85, -20, -90, -38, 5, 66, 69, 17, -1, -75, -110, 10, -124, 24, -114, 113, -113, 54, 75, -50, -13, -22, -121, 20, 95, -72, -123, -45, 62, 74, -41, 45, 5, 56, -113, -33, -9, -35, -98, -8, -89, 57, 104, 55, -114, -88, 117, -127, 27, -48, -74, 38, 76, -82, 44, -28, -128, -39, 16, -41, 21, -63, -59, 85, 5, 62, -3, -88, 46, 90]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[13, -15, -25, -78, 126, -66, -65, 124, 3, -121, 58, 125, 124, 90, 94, -122]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[109, 69, 64, 120, -18, -31, 113, -42, 11, -26, -85, -1, -110, -9, 117, 80]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-10, -9, -19, 45, 82, 53, -98, -128, -51, -113, -98, -99, -105, 79, -41, 107]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[35, 35, 116, 28, -83, 4, -71, -17, -13, -11, 25, -104, -125, -96, -5, -55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-35, -83, -110, 76, -26, 72, -54, 86, -26, 113, -4, 81, -17, 7, 69, 109]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-109, 117, -76, -32, -116, -31, -122, -124, -106, -75, 8, 36, 67, 80, -91, -17]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[68, -58, 53, -101, -46, -95, 23, -39, -16, 118, -126, -117, -51, 30, 38, -85, -62, 104, -50, -73, -122, -18, -4, -75, 87, -116, 87, 1, -114, 16, -28, -36, -35, -83, -110, 76, -26, 72, -54, 86, -26, 113, -4, 81, -17, 7, 69, 109]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[66, 84, 31, 119, -70, 100, -68, -73, 103, -128, -47, -3, 119, -42, -95, -70, -51, 86, 64, 73, 72, -83, 54, 55, 102, 90, 123, 1, -20, -3, 98, -32, -35, -83, -110, 76, -26, 72, -54, 86, -26, 113, -4, 81, -17, 7, 69, 109]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 91, -74, 98, -52, 95, -16, 71, 71, 13, 38, -69, -69, -104, 45, -57, 50, -54, 41, -7, -40, 68, 33, 9, 16, 17, -82, -17, 114, -25, -121, -69, -97, -14, 77, 90, -60, 53, 44, 96, 99, -2, 41, 44, 8, 121, 84, 88, -22, 80, 75, 62, 77, -54, 73, -107, 108, -71, 15, -128, 31, -20, 46, 107, 30, -48, 62, -32, -86, -85, 66, -11, 66, 102, 66, -12, 60, 87, 50, 12, 39, 10, -100, -29, 95, 88, 108, -82, 111, -124, -44, 87, -112, -77, 16, 11, -35, -83, -110, 76, -26, 72, -54, 86, -26, 113, -4, 81, -17, 7, 69, 109]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-110, -54, 99, -93, 55, 69, -93, -98, -24, 127, -34, -72, 102, 77, 73, 56, 67, -17, -35, 10, -47, -97, -53, -78, -124, -47, 65, -99, -21, 42, -18, 29, -8, -96, 64, -72, 69, 100, 55, -26, -120, -42, 82, 91, -18, -112, 34, -123, 95, -110, -100, 2, 8, 110, 20, -91, -3, 44, 97, -63, 34, 86, 39, 117, 11, -101, 77, -109, 45, 47, -8, -33, 63, -99, -81, 71, 106, 35, 69, 4, -40, -20, -53, 64, -121, -5, -53, -128, 112, 108, -64, -22, 60, -104, 126, -50, -35, -83, -110, 76, -26, 72, -54, 86, -26, 113, -4, 81, -17, 7, 69, 109]");
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[70, -28, -48, -83, 58, 66, -127, 104, -46, 22, 114, -21, 67, 43, 118, -88]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-99, 53, 111, -112, -59, -68, -12, -44, -76, -103, 11, 43, -124, 13, -118, 73]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[124, 120, -120, 119, -118, -124, -85, -21, -58, -15, -49, 121, -29, 125, 107, -46]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-55, -80, 22, 124, 97, -25, 108, 44, -15, -5, 7, 3, 125, 112, -75, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-71, -21, -64, 117, 78, -98, 61, 120, -75, 78, 122, 75, -47, -99, -63, 5, -51, 112, -94, -2, 79, 2, 38, 91, -79, 78, -46, 47, -26, -31, -42, 52, 124, 120, -120, 119, -118, -124, -85, -21, -58, -15, -49, 121, -29, 125, 107, -46]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, -94, -61, -73, 21, -44, -46, -57, 0, -114, 83, -30, 93, 54, 126, -63, 80, 25, 114, -16, 57, 68, 100, -121, 100, -2, -31, -115, 93, -84, 17, 9, 124, 120, -120, 119, -118, -124, -85, -21, -58, -15, -49, 121, -29, 125, 107, -46]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-87, -30, 74, 60, -113, -118, 30, 72, -30, -13, 41, 74, -65, -101, -73, 38, -89, 25, -100, 114, -99, 4, 105, 80, -112, -36, 68, -20, 126, 70, 118, 9, 119, -30, -107, 87, 34, 46, 106, -83, 88, 27, -24, 11, -37, 10, 35, 52, 10, 11, -12, -64, -15, 20, 39, 0, 39, 110, 121, 4, 65, 75, 64, -2, 9, -18, 121, -70, -26, 120, 42, -128, 68, -10, -67, 98, 83, -8, -73, 122, 17, -82, 12, -103, -112, 8, 62, 68, 120, 92, 37, 54, -1, 106, 101, 48, 124, 120, -120, 119, -118, -124, -85, -21, -58, -15, -49, 121, -29, 125, 107, -46]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-12, 125, -3, 33, -50, 59, 104, -57, 67, -64, -38, 70, -102, 18, 122, 2, 103, -43, 101, 123, 71, 36, -110, -16, -100, -36, -93, -92, -95, -79, -80, -97, 124, 120, -120, 119, -118, -124, -85, -21, -58, -15, -49, 121, -29, 125, 107, -46]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-70, -69, -22, 76, -7, 101, 121, 100, -53, -95, -6, -67, 74, -95, 74, -20, -92, 97, 119, -44, 107, 36, -109, -79, -49, 23, -68, 107, -61, 88, -115, 82, -115, 104, -112, 63, 109, -126, -60, 35, 44, 126, -124, 124, 12, -30, -82, -69, -123, -5, -122, -25, -48, -54, -16, 1, 20, 42, 78, -21, 57, 92, 8, -27, 64, 61, -100, 81, -76, -76, -117, -3, 68, 119, -123, 21, 12, 120, -107, 98, -63, 46, 99, 57, -89, -63, 48, -78, -30, -10, -100, -75, 7, 5, 15, 55, 124, 120, -120, 119, -118, -124, -85, -21, -58, -15, -49, 121, -29, 125, 107, -46]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey30);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey50);
        byte[] byteArray55 = new byte[] {};
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray55);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey57);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey61);
        byte[] byteArray65 = new byte[] {};
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray65);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray65, secretKey67);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey71);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey71);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray65, secretKey71);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey71);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey71);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey71);
        javax.crypto.SecretKey secretKey80 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey80);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey80);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey80);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey86);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey86);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-77, 25, 9, -11, -112, -117, -62, -18, 68, 54, 78, -55, -84, -43, -67, 66]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[91, 78, 104, 52, -84, 88, 41, -55, 101, -93, -18, -26, -107, -79, 107, -45]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[59, 11, -57, -29, 71, 26, -90, 60, 54, 44, -72, 23, -84, 107, -32, 69]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[8, 91, -44, -85, 88, -54, -21, -97, -14, -123, 25, 73, -22, 52, 63, 97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[5, 95, -125, 127, -30, 16, 75, -111, 15, 108, 88, -19, -78, -86, 55, -104]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-51, 24, -50, 26, -84, 9, -117, 3, 88, 83, 37, 6, -122, -29, 45, -127]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-51, 24, -50, 26, -84, 9, -117, 3, 88, 83, 37, 6, -122, -29, 45, -127]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-71, 15, 91, -128, -28, -43, -120, 39, -94, -75, 17, -89, 67, 23, -89, 31, -24, -125, 71, -48, 0, -13, -4, -53, 16, -84, -5, -88, 31, 30, 98, -81, 5, 95, -125, 127, -30, 16, 75, -111, 15, 108, 88, -19, -78, -86, 55, -104]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-101, 97, -84, -49, -80, 11, -60, 57, -17, 54, -3, 62, 126, -86, -37, -5, -88, 88, -28, 70, 36, 47, 46, -99, -12, -66, -62, 37, -40, -78, -81, -8, 5, 95, -125, 127, -30, 16, 75, -111, 15, 108, 88, -19, -78, -86, 55, -104]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[79, 8, -80, -64, -3, 75, 81, 44, 28, -28, -125, 20, -64, 42, 44, 105, 10, -70, 72, -113, -24, 82, -102, -20, -54, -108, 113, 8, 88, 17, -80, 62, 5, 95, -125, 127, -30, 16, 75, -111, 15, 108, 88, -19, -78, -86, 55, -104]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[41, 49, 20, -119, 44, 24, -39, 36, -39, -13, 17, 34, -104, 63, 107, 18, 17, 110, 122, -109, 24, -29, -91, -90, 51, -81, 99, -36, 31, -91, -21, -8, 54, 53, -50, -109, -85, -5, 75, 11, -70, -109, 76, -118, -127, 68, 18, -29, -19, 106, -80, 88, 121, 4, -106, -27, -53, 99, -47, 45, 5, 67, -20, 47, 1, -76, 127, 64, -75, 49, -1, 105, 100, 25, -27, -85, 26, -16, -69, -27, -40, -119, -28, -63, -24, 90, 20, -18, -32, 85, -114, 87, 126, 33, -12, -42, 5, 95, -125, 127, -30, 16, 75, -111, 15, 108, 88, -19, -78, -86, 55, -104]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-108, 119, 102, -111, -50, 17, -58, 37, -3, -15, -53, -13, 44, -38, 0, -11]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[63, 107, 80, -118, -96, 36, 31, -54, -42, -62, -40, -109, 94, 27, -66, -5]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-21, -101, 72, -89, 40, -4, 120, -76, -120, 20, -106, -31, 77, 57, 45, 54]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-65, -125, -25, -47, 24, -73, -114, -61, -120, -21, -23, 115, 71, 24, 111, 61]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[11, -72, -50, 94, 27, -52, 10, 54, -117, -11, 2, 60, 1, 118, -107, 85]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[2, 106, -45, 122, -101, -10, -121, -18, 97, -120, -128, -34, 50, -46, -69, -8, -13, -41, 55, -107, 104, -20, -12, 64, -115, -121, -33, 121, -41, 72, -31, 2, -65, -125, -25, -47, 24, -73, -114, -61, -120, -21, -23, 115, 71, 24, 111, 61]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(secretKey80);
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-121, -63, -128, 99, 127, 78, 50, -19, -107, 61, -10, 45, -21, 59, 72, 55]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-34, 113, 88, -62, 103, -25, -127, 58, 100, 45, -48, 26, -95, 33, -29, 22]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-28, 89, 87, 49, 55, 96, 125, 36, -78, 74, -30, 11, -49, 66, -84, 124]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-87, 92, 93, 18, -17, -23, 66, -111, -72, -92, 99, -84, 97, 104, -12, 116]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey18);
        java.lang.Class<?> wildcardClass25 = secretKey18.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-56, -57, 91, -127, 127, 90, 91, -33, 47, -53, 76, 17, -41, -93, 24, 83]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-55, 89, 119, -37, -59, 84, 102, 54, 106, -97, 118, 69, 54, -44, -83, -119]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[96, 54, 4, -124, -32, -106, 76, -77, 71, -46, 79, 71, 25, 54, -113, -68]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, -57, 29, 13, -84, -53, 1, 5, 78, -30, 28, 25, -33, -105, -100, 81]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-8, -76, -65, -104, 16, 0, 2, 91, 105, -37, 120, 114, -105, 58, -79, -69, 60, -34, 89, -54, 92, -109, 55, 84, 25, -21, -110, -15, 2, -1, 23, -27, 96, 54, 4, -124, -32, -106, 76, -77, 71, -46, 79, 71, 25, 54, -113, -68]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey31);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("C718B4A2C36E882A21FF0D9AFADE2A77", secretKey31);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("B881F13A961670B198DC6CA3BB3D560BABA2B7CB718B496F3F1A0E617C15E7C8608322AE7D3EAC88B33D3CF50758BE0D7D64B126FBE6B32A7E20C6D37D78C3E2D70FD810BC544F2EE74BD41E0F5E008535E34AA1C301C96B96E3D7D73880E4FC41AD6A807184069FD259AE7100E08C68", secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-103, 81, -87, 82, 14, -103, -78, -25, -8, -41, 42, 83, -49, -86, -82, 101]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-66, -105, -128, 41, -29, 107, -117, -44, 40, -117, 124, 20, -116, -56, 28, -92]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-25, 32, -32, 37, 127, 30, -25, 62, 56, -61, -63, 102, -120, -125, 41, 9]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-111, -12, -89, -1, 109, -64, -32, 86, -92, 86, -92, 57, 30, 109, -32, -87]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-57, 33, 59, -43, 117, -12, 69, -124, -58, -86, 105, -76, 82, -1, -13, 80]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, 19, -39, -87, 9, 0, -120, 60, -15, -44, -85, 102, 48, 33, 13, 118]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-2, 75, 86, 4, -22, -109, 104, 60, 77, 20, -124, 100, 119, 43, 121, 41, -51, -115, -19, 111, 80, 51, -97, 119, 27, 52, -86, 48, 79, 118, 81, 37, -57, 33, 59, -43, 117, -12, 69, -124, -58, -86, 105, -76, 82, -1, -13, 80]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-24, -27, 2, 119, -12, 48, 17, -99, -7, 111, 41, -66, -22, 94, 64, -87, -116, 51, 31, 71, -32, -37, -88, 48, -31, 48, 111, -104, 113, -125, -66, 30, -57, 33, 59, -43, 117, -12, 69, -124, -58, -86, 105, -76, 82, -1, -13, 80]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-33, 17, -43, -118, -90, -74, 44, 124, 18, 37, 28, 81, 109, -28, 33, -34, 7, 98, 42, -82, 126, -54, 98, 114, 117, 88, -93, -91, 51, -97, 53, 103, -81, 85, -115, -64, -35, -125, -114, -93, 73, -110, 117, 114, -38, 60, 43, -63, -76, -5, 49, -82, -103, -79, -62, -44, -124, 0, -86, -34, 78, -17, 111, 82, 28, 64, 101, 39, -62, 43, 6, 116, -45, 47, 71, -114, 59, -128, -54, 27, -2, 118, -40, 13, 37, 28, -105, -22, -32, -21, -41, 57, 18, 78, 109, 23, -57, 33, 59, -43, 117, -12, 69, -124, -58, -86, 105, -76, 82, -1, -13, 80]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-35, -111, 28, 124, -28, 67, -62, 19, 87, 74, -84, 52, -101, 79, 55, 9, 116, 4, -14, -27, -25, 70, 57, 54, 69, -23, -46, 122, 18, 122, -124, -21, -57, 33, 59, -43, 117, -12, 69, -124, -58, -86, 105, -76, 82, -1, -13, 80]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[84, -16, 42, -36, -63, 99, -30, -61, 112, -107, 104, -108, -90, 1, 78, 25]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[31, -125, -78, -63, -97, -114, -17, -93, 85, 37, 58, -70, 92, 113, 6, 61]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-18, -76, -88, 98, -105, -102, 65, 84, 31, 67, 117, -21, -75, 88, -90, 44, -70, 12, 124, 6, 55, -127, -94, 28, 51, -12, 47, -23, -58, -80, 16, 60, 119, -62, 73, 76, 105, 40, -67, 2, 126, -128, 32, -103, -26, 40, 14, -66, 68, 52, -55, -27, 14, 110, -56, 41, 94, -82, 105, 65, -84, 66, 43, 52, -29, 60, -66, 12, 53, -30, -22, -27, -7, -63, 69, -86, 29, 82, 100, 13, 59, -14, -74, 20, -77, -42, -53, -77, -115, -25, 20, -86, -52, 54, -30, -66, 84, -16, 42, -36, -63, 99, -30, -61, 112, -107, 104, -108, -90, 1, 78, 25]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 81, 127, 114, -67, 124, -18, -64, -69, 38, -102, 120, 95, -68, 32, -65, 65, 35, -116, 79, 89, 88, -39, 1, -82, -115, 43, 48, 109, -12, -7, -28, 84, -16, 42, -36, -63, 99, -30, -61, 112, -107, 104, -108, -90, 1, 78, 25]");
        org.junit.Assert.assertNotNull(byteArray57);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey40);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey40);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[32, -5, -42, 70, 30, 103, 42, 78, -43, 124, 90, -39, 24, -28, 9, -20]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -127, -96, -40, 26, 93, 84, -69, 110, -22, -58, 46, 62, -100, 70, -91]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-6, 61, 89, 100, -106, -76, 120, 82, -6, -100, 81, 113, 105, -104, 6, 98]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-15, -60, 10, 15, 46, 36, 34, -120, 84, -112, -21, 21, 54, -75, -23, -116, 103, 52, 111, 12, -75, 93, -106, 95, -113, -88, 21, 69, -109, -98, -88, 15, 32, -5, -42, 70, 30, 103, 42, 78, -43, 124, 90, -39, 24, -28, 9, -20]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "F1C40A0F2E2422885490EB1536B5E98C67346F0CB55D965F8FA81545939EA80F20FBD6461E672A4ED57C5AD918E409EC" + "'", str9, "F1C40A0F2E2422885490EB1536B5E98C67346F0CB55D965F8FA81545939EA80F20FBD6461E672A4ED57C5AD918E409EC");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F1C40A0F2E2422885490EB1536B5E98C67346F0CB55D965F8FA81545939EA80F20FBD6461E672A4ED57C5AD918E409EC" + "'", str10, "F1C40A0F2E2422885490EB1536B5E98C67346F0CB55D965F8FA81545939EA80F20FBD6461E672A4ED57C5AD918E409EC");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[80, -31, -68, -99, -73, 81, -113, -80, 94, -23, -105, -12, 47, -109, 85, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[111, -86, -121, -49, -53, -113, 91, -96, 15, 30, -79, -17, -81, -17, -115, 99]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-11, -84, -121, -14, 17, -34, 116, -47, -78, -33, 89, 127, 106, -48, -29, -115]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-50, 115, -73, -94, 98, -71, 76, 4, 39, -73, 83, 122, -33, 9, -112, -58]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-30, 32, -101, -100, 4, -58, 103, -83, 42, -74, 74, 23, 97, -94, 88, -113]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-23, -46, -59, -102, -21, -89, 82, 104, -43, -1, -67, -40, 47, -9, 61, -124]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-23, -46, -59, -102, -21, -89, 82, 104, -43, -1, -67, -40, 47, -9, 61, -124]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-88, 87, -115, -118, -112, -101, 48, -4, -59, -35, 54, 98, -123, -121, 117, -20, 20, -75, -28, 115, 26, 11, -109, 4, -19, -111, -21, 42, 7, 47, -101, 7, -30, 32, -101, -100, 4, -58, 103, -83, 42, -74, 74, 23, 97, -94, 88, -113]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[75, 118, 4, -50, -41, 66, 115, -101, 105, 112, 94, 3, -29, 117, -42, -94, -77, 10, -79, -32, 76, -71, 114, 19, -51, -115, -118, -14, -88, 81, -89, -112, -30, 32, -101, -100, 4, -58, 103, -83, 42, -74, 74, 23, 97, -94, 88, -113]");
        org.junit.Assert.assertNotNull(byteArray48);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-71, 37, -108, -29, -114, -58, 76, 15, -102, -120, 88, 119, 71, 27, -48, 96]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-32, 89, -126, 99, -123, 47, 22, -92, -114, 25, 47, -63, 83, -100, -33, -106]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[37, 32, 66, -103, 12, 33, 9, 26, 94, -51, 91, -70, -37, -9, -29, 7]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-82, 25, -70, -128, 67, -40, -103, -41, 36, 36, 32, -108, 20, 21, -126, -13]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[35, -16, 31, 108, 120, -57, -40, -63, 6, -97, -95, -46, 4, 100, -60, -73, -125, 97, 38, -27, 20, -28, 14, 78, 125, -125, -54, 35, -69, -11, -19, -119, 37, 32, 66, -103, 12, 33, 9, 26, 94, -51, 91, -70, -37, -9, -29, 7]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey28);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey28);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey58);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey58);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey58);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey58);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey58);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey58);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey58);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-31, 75, 121, -75, 98, -127, -74, 4, 15, 49, -86, -17, 75, -53, -40, 47]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[117, 98, 103, 112, 45, -93, 65, 6, 85, -36, 75, 94, -36, -26, -91, 45]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-39, -116, 48, 102, 10, 125, 71, 39, -54, -108, 24, -38, -110, -7, 20, -47]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-30, 67, 118, -118, -104, -66, -114, 76, -1, -49, -40, -119, -10, 108, 54, 103]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[110, -106, -106, -36, -108, 93, 37, -29, -105, -118, 117, 117, 17, 65, 84, 72]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[42, -79, -80, 64, -102, -45, -22, -29, 120, 109, -46, -40, 43, 126, -121, -26]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-103, 10, 74, -62, 86, 40, -83, 45, -47, 112, -94, -9, -127, 42, -62, 79, -66, 77, -40, 127, 7, 60, 57, -128, 28, 33, 1, -31, -65, 74, 74, 117, 110, -106, -106, -36, -108, 93, 37, -29, -105, -118, 117, 117, 17, 65, 84, 72]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[90, -125, 25, -18, 84, 75, -108, 12, -75, -28, 99, -67, -49, -61, -4, -82, 0, -3, 48, 53, -112, -18, 55, -126, -9, -108, 28, 30, 118, -6, 11, 41, -13, 75, -63, 105, -108, 8, 32, 98, 66, 3, -96, -122, 41, -102, -96, -105, -75, 92, -47, -53, -120, -128, -53, -50, 119, 98, 41, 107, -66, -93, -49, 57, -65, 57, -78, 68, -117, 117, 64, -58, 14, -44, 39, -93, 19, -2, -94, 60, 82, 111, -12, 12, -71, 51, 29, 56, -11, -99, -31, 2, 24, -98, -106, 85, 110, -106, -106, -36, -108, 93, 37, -29, -105, -118, 117, 117, 17, 65, 84, 72]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[86, 28, 110, -41, 125, 124, 82, -5, 81, -16, 80, 18, 98, 125, -50, -117]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-69, -89, 106, -86, -89, 84, 86, -40, -30, -25, -106, -100, 125, 14, 14, -18]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[52, 126, -90, -5, 34, 94, 7, -30, 101, 116, -45, -25, -65, -14, 127, 66]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[65, 112, 7, 115, -25, 69, 18, -12, 50, -6, 45, 33, 112, 71, -24, -90]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-45, 56, -1, 58, 121, -99, -89, 77, -116, -75, -15, 41, 81, -99, -117, 24, -49, -20, -40, -35, -114, -68, -93, -31, 8, 42, -112, 73, 117, -86, 58, 75, 52, 126, -90, -5, 34, 94, 7, -30, 101, 116, -45, -25, -65, -14, 127, 66]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[65, -3, 41, 96, 19, 52, -30, -110, 40, -21, 47, -93, -87, 0, -30, 102, -96, -64, 23, -34, 51, 116, -24, -74, -108, -33, 43, -14, -98, 61, -43, 72, 52, 126, -90, -5, 34, 94, 7, -30, 101, 116, -45, -25, -65, -14, 127, 66]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[8, -15, -115, 71, 75, -115, -115, 74, -117, 108, 88, -115, 26, -82, 121, 2, -50, -101, -27, 118, -87, 18, -52, 84, -40, -117, 77, -19, -6, -95, -122, 116, 67, -42, -89, 43, -53, -52, 83, -18, 107, -93, 112, -114, 46, -31, -109, 120, 37, 56, 9, 123, 93, -28, -46, 121, -113, -90, -6, -112, 62, -9, -34, -86, 96, 38, 1, -42, -85, -106, -113, -23, -16, -64, 118, -83, 70, -74, -99, 41, 10, -28, 122, -67, -122, 1, -73, 57, -29, -102, -61, 88, 19, 93, -102, -102, 52, 126, -90, -5, 34, 94, 7, -30, 101, 116, -45, -25, -65, -14, 127, 66]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-82, 26, -85, -93, -61, 107, 83, -3, -21, -56, -115, 85, 5, -128, 120, -49, -109, -113, -113, -75, 19, -57, 104, 62, 66, -50, 23, -90, 9, -108, 35, -17, 52, 126, -90, -5, 34, 94, 7, -30, 101, 116, -45, -25, -65, -14, 127, 66]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-59, -78, -12, -7, -118, -92, 91, -90, -104, -84, 56, -98, -8, -25, 0, 19, 2, -96, -68, -11, 85, -87, 54, 62, -15, -79, -45, -52, -87, -113, 1, -39, 52, 126, -90, -5, 34, 94, 7, -30, 101, 116, -45, -25, -65, -14, 127, 66]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-80, -77, 115, -113, 31, -62, -72, 0, 10, 36, 55, 59, -63, 56, -14, 22, -42, 39, 61, 36, -22, 33, -77, -18, 49, 39, -18, 102, -1, 106, 103, -31, 61, 37, 55, -52, 69, -105, 79, -19, -77, -99, -76, -10, -52, -119, 54, 40, 35, 86, -113, -79, -53, -110, -2, 24, -126, 48, -27, -53, 11, 44, 41, -79, -83, 3, -68, -48, -92, -80, -3, -32, -69, -105, -117, 126, 92, -128, 117, -124, -6, -89, -19, -111, 106, -82, 4, 23, 117, -47, -4, 110, -18, -110, -111, -60, 52, 126, -90, -5, 34, 94, 7, -30, 101, 116, -45, -25, -65, -14, 127, 66]");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey38);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey65);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey65);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey65);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey65);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey75);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[103, -110, 114, -85, 84, 79, -116, -28, -75, -29, 59, -29, 44, 94, -36, 85]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-108, -105, -8, -30, -34, -113, -26, 64, -72, 46, 95, 15, -19, -71, -14, 68]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-21, 93, 84, 46, 67, 18, 11, -60, 89, 47, 35, -13, 26, 92, -115, -98]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-124, -122, 113, 103, 49, 83, 107, -120, 60, -59, -85, 26, 66, 101, 10, -108]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[57, 85, -73, 54, 76, 109, 35, 105, -121, -15, -74, -2, 11, -20, -121, -108]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-63, 6, -75, -60, 108, -38, 114, -9, 76, -56, -28, -103, -104, -64, 77, 13]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-79, 66, -114, -4, -46, 32, -124, -10, -65, 110, 92, -119, 21, 95, -34, -89]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[126, -17, -124, -39, -87, 23, -44, -119, 78, 14, 35, 18, 6, 75, -58, -25]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-110, -83, 3, -114, 35, -92, -9, -9, -24, -72, 91, 51, -105, -121, 101, 32, 108, 0, 113, -27, 108, 58, -110, 76, -100, 55, 70, 59, -86, -106, -80, -53, -79, 66, -114, -4, -46, 32, -124, -10, -65, 110, 92, -119, 21, 95, -34, -89]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-103, 8, -29, -88, 39, -7, -123, -43, -12, -11, -103, 3, -49, 52, 54, -127]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[30, -122, -86, -126, -63, 87, -3, 48, 64, -8, -45, 81, -104, -31, 7, -51]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-110, 4, 81, -63, 108, 45, -127, 40, 87, -12, 47, -106, 41, -121, 76, -99]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[28, 79, 76, -22, 29, 17, 61, 19, 74, 96, 74, -62, 46, 70, -122, -46]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[33, 6, 13, -5, 50, -117, 6, -117, 58, -17, 31, 11, -28, 60, 94, -77, -19, 76, -122, 123, 121, 69, -11, -88, -98, -63, 4, -26, -115, -87, -86, 102, -110, 4, 81, -63, 108, 45, -127, 40, 87, -12, 47, -106, 41, -121, 76, -99]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[69, 70, 91, -78, 82, -123, 25, 22, 101, -29, -102, -7, -14, 98, 86, 127, 104, 42, 98, -97, -11, -43, 4, 92, -76, 84, 118, 108, -7, 101, -10, -88, -110, 4, 81, -63, 108, 45, -127, 40, 87, -12, 47, -106, 41, -121, 76, -99]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-42, 96, 13, 3, -96, 26, 51, 125, 123, -120, -33, 99, -63, -116, 24, 49, -54, 106, 19, 29, 89, 15, -32, -14, -14, 121, 90, -82, 123, -126, 119, -50, -121, -78, 82, -13, -87, -89, -70, 52, 26, 28, -3, 41, 15, 66, 25, -11, 57, -60, 13, -94, 68, -67, -68, -106, 11, 25, 2, -89, 105, -29, -71, -72, 83, -124, -57, 2, 95, 30, -90, -89, -62, 89, -126, -16, 80, -72, 14, 43, -90, 50, -99, 36, -20, 119, 112, 79, 71, 16, -41, 101, -12, -79, 115, -126, -110, 4, 81, -63, 108, 45, -127, 40, 87, -12, 47, -106, 41, -121, 76, -99]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        java.lang.Class<?> wildcardClass33 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[86, 59, 109, -48, -47, -125, -89, -125, -100, 52, -101, -28, 54, 33, 50, 72]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-44, 85, -29, -93, -118, 82, 77, 22, 95, 76, -97, 59, 120, 22, 55, -72]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[50, -39, -51, 34, 40, 21, -95, -60, 57, 108, -116, -73, -102, 91, 108, 30]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[29, -20, -119, -19, 76, 41, -98, -128, 52, 72, -34, -116, -122, 98, -28, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-123, 124, 28, 94, -3, 25, -97, -2, 51, -31, 76, -33, -91, -97, 22, 115, -127, 51, 58, 47, 111, -15, 69, -73, -44, 122, -111, 102, -39, 74, -61, -70, 50, -39, -51, 34, 40, 21, -95, -60, 57, 108, -116, -73, -102, 91, 108, 30]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-77, 8, 119, 92, -128, -100, 42, -70, 19, -42, 92, -14, 126, 46, 15, 114, 14, 74, -107, 31, -83, 112, -57, -77, -48, 14, 105, 41, 67, 86, -119, 120, 50, -39, -51, 34, 40, 21, -95, -60, 57, 108, -116, -73, -102, 91, 108, 30]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[76, -34, -41, -100, -2, 104, 52, 115, 74, -92, -47, -61, -43, 5, -120, 104, 114, 96, 92, -76, -56, -41, -51, -2, 107, -97, -1, 2, 61, 15, -25, 58, 23, 121, 51, -118, -116, 87, 48, -29, -45, -92, 49, -57, 86, -98, -82, -93, -109, 10, 27, 85, 124, 90, 31, -111, 69, -42, -64, 6, -10, 106, 44, 15, -65, 31, 54, -26, -14, -125, -1, -100, 94, 81, 44, -62, 103, -33, 72, 92, 103, 7, 85, -32, 126, 107, -56, -94, -36, 102, -16, 77, -99, -18, 40, 40, 50, -39, -51, 34, 40, 21, -95, -60, 57, 108, -116, -73, -102, 91, 108, 30]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[81, 43, 32, 76, 37, -99, -21, -4, -69, -60, -114, 92, -122, 74, 114, 16, -44, -92, -90, 41, -2, -85, 84, 58, -42, 40, -92, 119, -99, -54, -55, -42, -41, -55, -19, 30, -125, 8, 115, -118, -35, 87, -66, 120, 81, 80, 53, 71, -64, -75, -63, -31, -68, 83, -87, -85, 127, 58, -76, 67, 79, -90, -2, -110, 70, -97, -22, 57, -112, -51, -87, -127, 43, -38, -89, 17, 104, -64, -73, 11, 81, -74, -126, -9, 81, 78, 109, -32, 43, 36, -94, -35, 94, 64, -13, 117, 50, -39, -51, 34, 40, 21, -95, -60, 57, 108, -116, -73, -102, 91, 108, 30]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[69, 104, -23, -104, 67, -6, 59, 28, -16, 120, 78, 119, 38, 28, 70, -90, 33, 33, 38, 54, 116, -89, -97, 51, 44, -34, -78, 67, -123, 86, -8, -100, 22, 19, 41, -42, 8, 29, 10, 9, 88, 87, 81, -80, 96, -86, 101, -73, 122, 86, 100, 28, 120, -82, 100, -43, -83, -82, -87, -101, 87, 33, 34, -92, -51, 84, -105, 91, -96, -123, -3, 51, 109, -122, -102, -31, 4, 83, -78, 37, -32, -41, 90, 1, 8, 32, -54, 46, 41, 40, -99, -117, -97, -74, -52, -25, 50, -39, -51, 34, 40, 21, -95, -60, 57, 108, -116, -73, -102, 91, 108, 30]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[50, -39, -51, 34, 40, 21, -95, -60, 57, 108, -116, -73, -102, 91, 108, 30]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey5);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey17);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-19, -127, 3, 94, -56, -126, 46, -15, -84, -113, -55, -78, -76, 96, -13, -18]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-31, 36, 101, 123, 115, 67, 0, 54, 21, 116, -85, -29, 21, 122, 108, 79]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-69, 48, 73, -1, -95, -70, 34, -20, -76, -102, 88, 111, 7, 118, 30, -62]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-19, -127, 3, 94, -56, -126, 46, -15, -84, -113, -55, -78, -76, 96, -13, -18]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[35, 109, 2, -21, -37, -36, -108, 1, 43, -54, 62, -1, -99, -45, 50, -36, 100, 2, -93, -9, -110, -92, -66, -54, -14, 119, -2, -40, 13, -2, 33, -22, -40, -23, -5, 41, 117, 75, -53, -66, -71, -92, -106, -63, 12, -124, 71, -85, -105, 2, -55, -125, 84, -14, 71, 23, -33, -80, -7, 105, 116, -106, -35, -9, 95, -115, 66, 9, -113, 32, -120, 91, -92, 5, -46, -42, -126, -16, -34, -112, -62, 39, -31, 127, -9, 29, -115, 66, -87, 61, 69, -50, 114, 99, -120, 44, -19, -127, 3, 94, -56, -126, 46, -15, -84, -113, -55, -78, -76, 96, -13, -18]");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-22, -51, 123, 83, -117, 97, -68, 125, -67, -67, -77, 58, -55, 27, 50, -60]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[105, -48, 34, 61, 120, -65, 64, -38, -20, 18, -46, 16, -1, -78, -50, 68]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[105, -48, 34, 61, 120, -65, 64, -38, -20, 18, -46, 16, -1, -78, -50, 68]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[77, -46, -61, 5, 2, -123, -5, 4, 48, 89, 51, 71, 93, 67, -7, 99]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[105, -48, 34, 61, 120, -65, 64, -38, -20, 18, -46, 16, -1, -78, -50, 68]");
        org.junit.Assert.assertNotNull(byteArray23);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey13);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[83, 55, 23, -24, -49, 113, 52, 69, -62, -53, 22, 62, 21, -126, 24, -119]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[57, 16, -116, -76, 74, -112, -54, 60, -105, 86, 121, -83, 33, -3, -44, -41, 44, 0, 49, 35, -30, 94, 93, 75, -73, -90, -18, 80, -35, 45, 2, -103, 83, -18, 82, -128, 71, 78, -18, 72, -33, 87, -92, -40, 17, 47, 65, 28]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[83, -18, 82, -128, 71, 78, -18, 72, -33, 87, -92, -40, 17, 47, 65, 28]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey3);
        java.lang.Class<?> wildcardClass6 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey29);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        java.lang.Class<?> wildcardClass39 = byteArray37.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-11, -34, 12, -55, 32, 63, 84, -108, 12, -6, -74, -90, 27, -81, -106, -31]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-85, 81, 57, -36, 100, -77, 19, 123, -76, -83, -50, 14, 5, 44, -53, -92]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[72, -27, 23, 75, 106, -15, 32, -11, 37, -80, -39, -81, 116, 27, -102, -23]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-34, -57, 87, -41, -22, -17, -58, -99, 126, -65, 12, -119, -80, -53, -66, 100]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[24, -8, -33, 61, 59, -9, -50, -22, -73, 49, 80, -103, -64, -64, 20, -105]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-98, -124, 45, -90, 51, -2, -100, 51, 37, -35, 12, 87, 61, 61, 56, -53]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-98, -124, 45, -90, 51, -2, -100, 51, 37, -35, 12, 87, 61, 61, 56, -53]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-36, -8, 24, -113, 2, 67, -78, 48, 84, -16, 73, -128, 120, -48, -56, -78, 78, -28, 19, 50, 3, 18, 100, 41, -94, -16, -21, 94, 62, -75, -21, -81, 24, -8, -33, 61, 59, -9, -50, -22, -73, 49, 80, -103, -64, -64, 20, -105]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-55, -122, 43, 11, -43, -4, 66, -83, -30, 33, 107, 23, -128, 8, -46, -106, -13, 113, 102, -110, 101, -31, 115, 26, 3, 122, -99, -73, 46, 121, -66, 67, 24, -8, -33, 61, 59, -9, -50, -22, -73, 49, 80, -103, -64, -64, 20, -105]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "94FCE3EABDDACEBCC6338634B7A8D869B864CEDAF6C18F9D56C1CC3A58C435D75BB0EEF7A65E9C7981BF523F8805FEC407328E67E53D03CCEB5AD2171AE59B06A216C8FCBCE12537590B8CE627BDB6EA9C0D43CDB135CD8DE53B17F84F353399813D52081EE09BFD708976BD2DB9CA09E66A36EED7319EF2CF673E221301EE5C183714E533B38E8EB6E4E3E040407E75D8C6EA967C9AE0D36B92FE285D2FCD4A1FD20431CC2B65A40A6129537A4678550DF3E2203A77417E25FCEEC7FCCA4CBCE46ABBC9FFE40CECBD67CD15C3947EC19C98F69413CB160D7B6D11CEAC2067BF18F8DF3D3BF7CEEAB7315099C0C01497" + "'", str38, "94FCE3EABDDACEBCC6338634B7A8D869B864CEDAF6C18F9D56C1CC3A58C435D75BB0EEF7A65E9C7981BF523F8805FEC407328E67E53D03CCEB5AD2171AE59B06A216C8FCBCE12537590B8CE627BDB6EA9C0D43CDB135CD8DE53B17F84F353399813D52081EE09BFD708976BD2DB9CA09E66A36EED7319EF2CF673E221301EE5C183714E533B38E8EB6E4E3E040407E75D8C6EA967C9AE0D36B92FE285D2FCD4A1FD20431CC2B65A40A6129537A4678550DF3E2203A77417E25FCEEC7FCCA4CBCE46ABBC9FFE40CECBD67CD15C3947EC19C98F69413CB160D7B6D11CEAC2067BF18F8DF3D3BF7CEEAB7315099C0C01497");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-96, 28, -91, -117, 118, -45, 83, -76, 25, 8, 110, -8, 54, -27, 74, 102]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 93, 87, -121, -62, -15, 81, 13, -120, 6, -35, -8, 82, 49, -48, 98]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[121, -38, -41, 109, 103, 127, -111, -95, 92, 81, -66, 20, 27, -88, -36, 102]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-96, 28, -91, -117, 118, -45, 83, -76, 25, 8, 110, -8, 54, -27, 74, 102]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[78, 61, -114, 77, -22, 97, -13, -63, 60, -85, 125, -64, -84, 49, -7, -27, 52, -29, 52, 96, 123, 16, -58, -17, 96, 59, 52, -81, 5, -10, -59, 102, -59, -69, -81, -55, 0, -28, -35, -13, 127, -63, 118, -117, 101, -117, -94, 111, 48, -105, -112, -104, 88, -69, -79, -23, -102, 88, 112, -96, 68, -121, 51, -52, 19, -111, -118, 26, -50, 104, 68, 44, 95, 125, 28, -47, -112, -44, 83, 119, 49, -116, -11, -104, -78, -69, -53, -117, 14, -63, 100, -23, 113, 49, -45, -2, -96, 28, -91, -117, 118, -45, 83, -76, 25, 8, 110, -8, 54, -27, 74, 102]");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey85);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey85);
        java.lang.Class<?> wildcardClass94 = byteArray93.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-25, -8, -59, 47, -40, 100, -126, 21, -31, 21, -76, 71, -75, -12, 69, -31]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[42, -97, -33, 42, -65, -41, -49, -36, 3, 105, -70, 60, 0, -49, -116, 67]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-41, 7, -4, 120, -2, -4, 18, 75, 31, 114, 90, -53, -95, -90, -85, 70]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[105, 100, -74, 19, 62, 8, 72, 58, 117, 50, 46, -38, 20, -32, 49, 17]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[123, -45, 4, -16, -13, -20, -46, 116, -38, -108, 1, 8, 37, 117, -20, 5]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-72, 97, 108, 19, -1, 41, -52, 55, 78, -48, -31, -89, 51, 45, 122, 57]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[73, 64, -33, 27, -123, -22, -27, 20, 86, -18, 103, -67, 9, 13, -48, 89]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[38, 86, 54, 54, 121, -14, 107, 66, -46, 81, 114, -27, -93, 18, 29, -17]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[78, -10, -66, 124, 30, 18, -84, -48, -100, -93, 73, -116, -94, -44, -25, 85, 99, -52, -20, 120, 101, 41, -36, 46, 44, -74, -11, 60, 30, -40, 46, 21, 73, 64, -33, 27, -123, -22, -27, 20, 86, -18, 103, -67, 9, 13, -48, 89]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-125, 38, 104, -7, -53, -99, 7, -1, -68, 84, 120, 21, 63, -91, 82, 47]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, -99, 87, -60, -61, 90, -18, -92, 44, -77, -111, 17, -3, -13, 79, 11]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[70, 23, -6, -15, 53, 67, -48, 62, -127, 36, 104, 33, -127, 72, -5, 30]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[47, 74, 92, -29, -70, -82, -15, 74, 53, -115, -99, -36, 52, 101, -34, 93]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[30, 2, -48, -53, -90, 4, -78, -63, 26, 111, 26, 26, -45, 40, 95, 82]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-53, -68, -13, 65, 76, 96, -6, 104, 114, -8, 35, -39, -100, -15, 74, 21]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-96, 107, 56, -95, -76, -52, -1, 60, -11, -64, -17, -127, -103, -32, -80, 125]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-107, -127, 61, -62, 117, -7, -76, -54, -35, -32, -53, 121, 16, 16, 15, 33]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[8, 29, 127, -122, 104, 88, -30, -60, 20, -55, 83, 44, 31, -36, 46, -49, 76, 55, -17, 87, 28, 26, -60, -28, -115, 64, -68, 27, -87, 14, -44, 3, -96, 107, 56, -95, -76, -52, -1, 60, -11, -64, -17, -127, -103, -32, -80, 125]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-63, 98, -14, 71, 87, 35, -112, 19, -28, -39, -97, 33, -94, -47, -101, -74, 19, 39, 40, 94, -20, -2, -20, 116, 54, -124, -123, -71, -78, -98, -20, 35, -96, 107, 56, -95, -76, -52, -1, 60, -11, -64, -17, -127, -103, -32, -80, 125]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey29);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey29);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey37);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey42);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey42);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey42);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey53);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey53);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[12, 118, 27, 115, -24, 97, -41, -22, 46, 15, -74, -88, -69, -27, -15, 16]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[85, 109, 77, -25, 109, -33, 114, -76, -100, -23, 41, 3, -81, 101, 17, -99]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-43, -17, 95, 82, -23, 51, -95, -101, 14, -4, -104, 15, -128, -54, -10, 9]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, -64, -73, -26, 26, -22, -2, -119, -1, 55, -77, 73, 72, 119, 104, 27]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-22, -10, -37, 87, 80, 30, 23, -118, 118, -29, 110, -20, -74, 6, -99, -16]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[54, -23, 30, 105, -50, -26, 61, -58, -72, -103, 80, -15, -54, 43, 11, -122]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-82, 69, -18, 106, 20, -111, -84, 41, -63, -103, 98, -47, -102, 57, -82, -17]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-22, -10, -37, 87, 80, 30, 23, -118, 118, -29, 110, -20, -74, 6, -99, -16]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[33, 95, 85, 50, -109, -24, 99, -107, 95, 34, 19, 61, -71, -60, -72, 91]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-31, 46, 108, 44, 82, 29, 78, -24, 54, 80, -124, -5, -11, -72, -87, 13, 59, 19, -75, -17, -125, 73, 63, 17, 18, 36, 39, -32, 84, -9, 63, 98, -50, 73, -112, 114, -75, -33, -66, 40, 113, 89, -122, 44, -110, 92, -119, 55]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[17, 62, -79, -4, 31, 15, -122, -49, 99, -88, 38, -24, 101, 91, 117, 87]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[85, -25, 109, 53, -93, 52, 53, 79, 110, -8, 16, 1, -5, 66, -19, -125, -4, 97, -18, -91, 80, -56, -100, -39, -37, 69, 35, -12, 105, -27, -94, 73, 66, -39, 108, 95, -68, -5, -72, -55, -106, -84, -48, 83, 51, 54, -91, 118, 110, -103, -108, -64, 36, 4, 49, 113, 5, -121, 87, -15, -23, 63, 2, 18, 102, 95, 36, -11, -77, -10, -46, 121, 17, -13, -91, -10, -11, -89, 103, 96, 108, -41, -47, -83, -9, -97, 39, -91, -69, -123, -4, -119, -15, -24, -21, 91, 17, 62, -79, -4, 31, 15, -122, -49, 99, -88, 38, -24, 101, 91, 117, 87]");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[21, -61, -13, -121, -9, -27, -29, 28, -83, -39, -25, 76, -50, -117, 6, 15]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[40, -42, -115, -3, 38, 89, -38, -17, 98, -78, -111, -118, -33, -116, -83, 111]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[40, -42, -115, -3, 38, 89, -38, -17, 98, -78, -111, -118, -33, -116, -83, 111]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[83, -17, -114, 13, -21, -58, -125, 45, 79, -65, 126, 61, -63, -83, 113, 114]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[21, -61, -13, -121, -9, -27, -29, 28, -83, -39, -25, 76, -50, -117, 6, 15]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-124, -109, 40, -67, -97, -95, -11, 97, -12, -45, 45, -33, 24, -115, -64, 22, 39, -32, 0, 64, -69, 7, -93, 95, 52, 13, 16, 71, -16, 55, -9, -103, -127, -37, -40, -64, -88, -89, 119, -8, 5, 48, 127, 0, -32, -48, 50, 10, -45, -43, 59, 57, 29, 114, 27, 39, 124, 123, -89, -105, 55, -75, 9, 97, -94, 81, 114, 84, -44, 51, -120, 103, 17, 111, 54, 86, 97, 70, -89, -80, 36, -4, -74, 53, -113, 121, -76, 86, 60, -29, 44, 2, -24, -44, -119, 108, 21, -61, -13, -121, -9, -27, -29, 28, -83, -39, -25, 76, -50, -117, 6, 15]");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-24, 64, -24, 84, 45, -53, 98, -65, -22, 77, -66, -45, -53, -86, 118, 44]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-23, 38, 50, -16, -109, 100, 106, 39, 90, 120, 34, 101, 117, 109, 7, -8]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-85, 114, 64, 61, 55, 58, 111, 5, 99, 74, 82, -71, -108, 41, -30, 96]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[112, 88, 60, 15, -36, 66, 99, 43, -66, 59, 15, 34, -80, -46, 14, -15]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[14, -107, -108, 100, 113, -24, 35, -93, -70, 83, 69, -40, 95, 41, -27, -112]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[28, -86, -72, 30, 26, -73, -76, 17, -61, -117, 66, 46, 23, 16, -50, 96]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-97, 88, -45, 103, -89, -4, -13, 68, 6, 26, -119, -35, -14, 121, -126, 59]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-26, 102, 41, 117, -108, -109, -38, 48, 5, -88, -47, 65, 101, -90, -14, -98]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-30, 16, 37, 124, -63, -42, 115, 91, 95, 84, -86, -48, 0, -86, 30, 2]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[56, -7, -68, 115, 16, 94, 38, -20, -95, 27, -76, 71, 39, -10, -108, -18]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[64, 82, 107, -125, -70, 52, -26, -122, 118, -116, -90, -66, 59, 117, -16, -39]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-30, 16, 37, 124, -63, -42, 115, 91, 95, 84, -86, -48, 0, -86, 30, 2]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[88, -118, -86, 25, 68, -10, -127, 121, 36, -25, 58, 55, -89, 101, 118, -117, 13, -29, 103, 81, 115, 24, 81, 37, -23, 103, 50, -52, 20, -80, -32, 11, -30, 16, 37, 124, -63, -42, 115, 91, 95, 84, -86, -48, 0, -86, 30, 2]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-102, 80, -23, -106, 95, 116, 110, 50, -28, -75, -105, -60, 82, 81, 64, -55, 107, -104, 123, -60, -107, -84, -18, -28, -113, -58, -14, 122, -70, 113, -76, 115, -30, 16, 37, 124, -63, -42, 115, 91, 95, 84, -86, -48, 0, -86, 30, 2]");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "9A50E9965F746E32E4B597C4525140C96B987BC495ACEEE48FC6F27ABA71B473E210257CC1D6735B5F54AAD000AA1E02" + "'", str61, "9A50E9965F746E32E4B597C4525140C96B987BC495ACEEE48FC6F27ABA71B473E210257CC1D6735B5F54AAD000AA1E02");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[86, -116, -55, -110, 75, 14, 112, -106, 70, -50, -51, 84, 115, -115, 62, -102]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-12, 11, 100, 83, -6, 72, 41, -107, 17, 42, 112, 123, -10, -39, 34, 12]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-12, 11, 100, 83, -6, 72, 41, -107, 17, 42, 112, 123, -10, -39, 34, 12]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -92, 13, -110, -11, 44, 116, 118, -22, 67, -115, 46, 75, -105, 56, -31]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-106, 111, 49, 75, -110, -56, 43, -121, 95, -13, 52, -71, 49, -23, 19, -29, 23, 102, 100, 28, 50, 49, 26, 104, 62, 68, -121, -73, 87, 35, 75, -92, 86, -116, -55, -110, 75, 14, 112, -106, 70, -50, -51, 84, 115, -115, 62, -102]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey35);
        java.lang.Class<?> wildcardClass39 = secretKey35.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-14, -64, -56, 114, 102, -7, -127, 88, -108, -71, -87, 54, -60, -89, 19, -105]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[32, 78, -63, -1, 31, -83, 75, 74, -118, 21, -15, 51, 45, -4, -60, -77]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-88, 116, -37, 64, 88, 82, 65, 94, 117, 69, -11, 106, 86, -55, 114, -10]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 18, 105, -13, 5, -99, 33, 43, -115, 50, -118, 126, -115, 98, -125, -126]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-75, 119, -103, 50, -66, 22, 64, -31, 14, -81, -70, 50, 13, -55, 114, -98]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-25, -87, 110, -35, -56, -12, -101, -21, 122, 68, 101, 4, 36, 115, -72, -67]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[125, 14, -71, -52, -82, -9, 24, -18, -52, 37, 73, 2, 121, -5, -23, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-75, 119, -103, 50, -66, 22, 64, -31, 14, -81, -70, 50, 13, -55, 114, -98]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[107, 96, -115, -111, 11, -62, -54, -41, -20, 45, -80, 92, -109, -8, 38, -53]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[25, 76, -14, -73, -79, -87, -14, 118, -75, -60, 91, -57, 99, 16, -32, 57, -87, 36, -58, 91, 111, 25, 113, 49, -39, -99, -23, 100, -84, -19, 42, -50, -39, -4, -114, -63, 13, 73, 4, -6, -114, -10, 121, -67, 0, -114, 28, -54]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[43, -128, -47, -51, 21, -110, -84, -46, -118, -44, 6, -78, -75, 70, -30, 42]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[50, 7, -21, -86, -84, 25, -77, -59, 95, 52, -108, -15, 120, -121, -7, -115]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[121, -77, -39, 58, 16, 114, 71, 32, 40, -104, -31, -19, 36, -61, -65, 86, 97, 102, -124, 72, 34, -43, -70, 71, 50, 29, -20, 58, 73, 45, 60, -114, 100, 96, -46, 113, -65, 126, 5, -8, -89, 87, 94, 121, -44, 23, 39, 38, 122, 127, 122, -108, 116, -115, -121, 57, -6, -75, 68, 89, -89, 87, 118, -95, -72, 37, 7, -127, -10, 3, -106, 124, 5, 34, -2, -89, -53, -65, -96, 60, -71, 5, 18, -114, -9, 13, -87, 126, -102, 61, 15, 49, -5, -89, -56, 79, 43, -128, -47, -51, 21, -110, -84, -46, -118, -44, 6, -78, -75, 70, -30, 42]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-77, -85, 125, 34, -53, 92, 4, -59, -3, -81, -67, 68, 76, 22, -39, 51, -41, -30, -107, 75, 70, -13, -123, -106, 40, 49, 62, 60, -69, 112, 36, 81, 43, -128, -47, -51, 21, -110, -84, -46, -118, -44, 6, -78, -75, 70, -30, 42]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[3, -31, 68, 113, 28, -36, 96, -10, -78, -77, -45, 44, 77, -103, 94, -76, 0, 111, -72, 111, -36, 18, 104, 73, 105, -101, -113, -114, -2, -30, 53, 59, -85, 72, 86, 95, -1, 122, -83, -107, -98, 25, -27, -22, -107, -102, 86, 93, 87, 123, -57, 110, -47, 46, 88, -62, 89, -38, 29, 71, -39, 101, 76, -127, -2, -118, 6, 39, 37, -73, 2, 62, -12, 10, -49, -112, 59, -68, -8, 13, 68, 75, -94, 114, 122, -63, -69, 33, -113, -57, 7, -57, 65, 21, 120, -28, 43, -128, -47, -51, 21, -110, -84, -46, -118, -44, 6, -78, -75, 70, -30, 42]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey41);
        java.lang.Class<?> wildcardClass51 = secretKey41.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[102, 25, 71, 81, -89, 99, 34, 55, -60, 74, 54, -41, 53, 116, 49, -12]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-17, 43, 64, 114, -104, -109, -95, -57, -29, 21, -119, -102, 88, 74, 81, -70]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-21, -93, 24, 30, 29, -58, -19, 100, 36, -63, -6, -75, -16, 34, -80, -61]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-2, -107, 34, 11, -24, 74, -122, -84, -41, -2, -51, 118, 84, -115, -16, -24]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[61, -102, -127, 73, 0, 90, 69, -39, 120, 101, 83, 7, 113, 123, 4, -124]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-104, -36, 122, -104, -53, 54, -101, -27, -104, 57, 106, -67, 14, -48, -12, -24]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-20, -113, -24, 88, -118, 10, -103, 55, -118, -93, -65, -55, -64, -126, -90, -58]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-46, -76, -127, -66, 31, 4, 29, 39, 63, 104, 86, -50, 14, 7, 19, -93]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[11, 61, -83, -22, -82, -115, 108, 116, -116, 70, -50, -25, 1, -80, -59, 72, -30, -40, 79, -125, -118, -99, 64, -68, -20, -55, -38, -97, -27, 84, -71, 68, -20, -113, -24, 88, -118, 10, -103, 55, -118, -93, -65, -55, -64, -126, -90, -58]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-55, 114, -44, -65, 90, -29, 118, -114, -104, 96, 45, 52, 75, 42, -36, -56, -100, 92, 77, 124, 70, 16, -32, 36, 10, -117, 103, -10, 102, -78, 115, -49, -20, -113, -24, 88, -118, 10, -103, 55, -118, -93, -65, -55, -64, -126, -90, -58]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-24, -27, 33, -99, 10, -79, 65, -121, 121, -84, -85, -67, 41, 118, -81, 6, -84, -18, -14, -110, -39, -67, -5, -39, 5, 76, -20, -93, -74, 2, -38, -16, -112, 78, -5, -48, 61, 108, 19, -121, -94, 42, 21, 19, 91, 120, 96, 95, -51, -15, 25, 23, -2, 127, 93, 75, -123, 73, 64, 16, -34, 34, 44, 83, -127, -107, 45, 104, -41, 49, -82, 26, -47, 57, -44, 16, -27, 70, 66, 60, 0, -112, 112, -12, 3, -83, 12, -107, 99, 20, 38, -104, 111, -86, -78, -68, -20, -113, -24, 88, -118, 10, -103, 55, -118, -93, -65, -55, -64, -126, -90, -58]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-68, -2, 22, 99, 122, 108, 7, -114, -73, 107, -65, -21, -40, 92, -116, 35, -73, 88, -87, -38, -113, -84, -6, -112, -70, 84, 121, -27, -104, -23, -92, 105, -20, -113, -24, 88, -118, 10, -103, 55, -118, -93, -65, -55, -64, -126, -90, -58]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[20, -38, -111, 32, -123, -86, -64, -15, -128, -10, -90, -46, -54, 120, 46, -113]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-119, -98, 117, 43, -27, 32, -68, -79, 83, -65, 67, 90, -116, 78, -106, 63, -7, -59, -82, 14, -87, 50, -58, -6, -86, -5, -83, 1, -18, 5, -4, 5, 27, -24, -10, 123, -106, -62, 63, -46, 5, 115, 72, -98, -61, 104, 18, -115]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[82, -51, 86, -104, -45, 88, 64, 116, -64, 5, -60, -116, 43, 79, -44, -126, -10, 118, 42, -55, 36, -4, 97, -77, -43, -107, -61, 26, 124, -72, -47, 18, -49, -24, 118, -114, -128, -65, 17, 61, -117, -110, 17, 86, -92, 66, -90, 16, -111, -65, -42, 126, -96, -89, -8, 46, 85, -17, -127, -107, -38, -71, 36, 17, -115, -115, 105, 40, -84, 109, -62, -27, -93, 77, -114, 26, -82, 77, 94, 81, -9, -67, -69, -117, -2, 73, -82, 78, 39, -109, 113, -71, -68, -8, -68, 92, 27, -24, -10, 123, -106, -62, 63, -46, 5, 115, 72, -98, -61, 104, 18, -115]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-84, -29, 102, 68, 119, -30, -4, -17, 76, -46, -42, 120, -7, -72, -116, -38, -118, 1, 70, -34, -120, -111, 5, -105, -104, 62, 92, 70, 101, 119, 46, 87, -112, -62, 13, -72, -70, -32, -107, -65, 90, 96, 64, 1, 24, -20, -45, 108, -113, 24, -120, -125, 82, 77, 66, -70, -67, 59, -107, 30, 40, -90, 83, 89, -9, 27, 109, -28, 45, 43, -120, 100, -115, 39, -68, 80, 125, 38, 46, 40, 26, 124, 88, 26, 92, 56, -104, -108, -59, 115, -50, -32, -82, -11, 71, 43, 27, -24, -10, 123, -106, -62, 63, -46, 5, 115, 72, -98, -61, 104, 18, -115]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("01E159A475DFA9837DBCBD266596AF3A00055EC9057BEFAED5881D67FD28C80BFC9DC91F212B8B9EAD31DB3EE1D5792BD28E575A63E40232B48B460D3D2B3E4D06F9BD27D915335F4115E8B7BABA91FDE00A232BD5187E634FF5B525B79BDDDB918AD8DDBAA50B71892094BF44EBE2A094C33FB7CE3559492B8234AD5B9D04F512395AAF7AF084E014E7DE1415ACADCED56F1B4EEFF7F458F8E9A698C7F62C76F1977E07E8B8B304F8975F20AE0DAB2DE88C9A0769ED99B14A8F749F943BB3F8A0D97483DE68484309D614D4B7917AD0910FB59FBD9AE12E2ADFF8B07B20A7400CAD94A090CC1BF068884954E3B21F06", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey18);
        java.lang.Class<?> wildcardClass25 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-57, -113, -10, -66, -111, -10, 97, -9, -102, -15, 18, -40, -57, 30, 4, -73]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-26, -56, 27, 58, -6, 54, 52, -16, 105, 32, -111, 30, 60, 58, -21, -56]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[104, 38, 126, -94, -46, -10, 1, -19, 38, 93, -67, 62, 78, 117, -89, 113]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-24, 48, -109, -125, -88, -72, -56, -63, -41, 82, 73, 81, 64, 55, -87, 68]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[105, -77, -19, -122, -47, 91, 16, -3, 61, 75, 12, 122, -78, -58, 35, 88, 45, 98, 127, 99, 14, -90, -33, -9, -79, 80, 20, -46, -40, -44, -112, -31, 104, 38, 126, -94, -46, -10, 1, -19, 38, 93, -67, 62, 78, 117, -89, 113]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        byte[] byteArray0 = null;
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-110, -22, -89, 54, 77, 20, -80, 43, 0, -124, -106, -30, 52, 32, 51, -44]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-105, -85, -17, 99, 0, -1, -40, 99, 62, 107, 115, 7, -73, -50, -31, -41]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-111, 23, 66, -122, 37, -83, -30, 18, 84, -12, 11, -103, 110, -26, -15, 80]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[93, -85, 115, -60, 33, -122, 84, -27, -38, -13, -123, -14, -66, 49, -123, 60]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-115, 4, -91, -93, 34, 17, -15, -74, 13, 123, 53, -3, -64, 83, 97, -75]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-87, 44, 52, 51, 93, -42, -94, 36, -85, 62, 103, 19, 19, 41, 113, -84]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[46, -77, 83, 61, 35, -9, 4, 27, 119, -43, 92, -3, 70, -84, -39, 23]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[75, -15, -52, 97, -49, 126, 49, -12, -93, -85, 106, 0, -38, -64, 6, -105]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-126, 112, 9, -88, -75, 101, -82, -90, 64, -56, 67, 102, 56, -65, -59, 15]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[67, 123, -114, 78, 94, -29, 127, 124, 29, -95, 34, 103, 119, -16, -82, 25]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-46, -80, 99, 76, 23, 69, -89, 18, -86, -124, 64, -10, 101, 120, -80, 54]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-126, 112, 9, -88, -75, 101, -82, -90, 64, -56, 67, 102, 56, -65, -59, 15]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-89, 20, 117, -17, -40, -52, -34, 12, 99, -81, 84, 50, -96, 100, 109, -121, -122, 111, -114, -88, 31, 105, 4, -69, -32, -67, -100, 85, 93, -9, 67, -120, -126, 112, 9, -88, -75, 101, -82, -90, 64, -56, 67, 102, 56, -65, -59, 15]");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey5);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey32);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-113, 105, 73, -59, 28, -33, -54, -21, 19, -91, -24, 18, -112, -1, -3, 21]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-80, -100, -23, 76, 19, -121, 65, 17, -44, 36, -10, 125, 97, 78, -50, -70]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-88, 11, -115, -84, 75, 113, -114, -49, 20, -26, -74, -1, -91, -51, -58, -82, -90, -115, 39, -112, 94, -4, 40, -62, -78, 24, -6, -32, -42, 5, -57, -124, -125, 69, -10, 49, 70, -64, 21, -43, 27, 98, -99, -116, -10, 73, -8, -94, -33, -103, 35, -52, 37, -43, 68, 123, 23, -90, 6, -124, 84, 62, -30, -113, 104, -100, -48, 39, 47, -60, -126, 16, -100, -11, 41, 27, -61, -30, -118, 59, 83, -119, -97, 81, -113, -97, 41, -3, -8, -67, 90, 103, 54, 14, 115, -109, -113, 105, 73, -59, 28, -33, -54, -21, 19, -91, -24, 18, -112, -1, -3, 21]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[31, 9, -101, -114, 98, -111, -98, -35, 4, -51, 57, -119, 77, -17, -39, -96, 92, 28, -120, -106, 85, -73, 30, -48, -18, -81, 98, 14, -3, -121, 115, -90, -113, 105, 73, -59, 28, -33, -54, -21, 19, -91, -24, 18, -112, -1, -3, 21]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-116, 0, -57, 41, -45, 119, 67, -114, -97, 13, 36, 16, -61, 12, 39, -120, -6, 4, 28, 18, 6, -7, -8, -39, 42, 102, 44, 18, 39, -112, 92, -55, -60, 12, 93, 92, -85, -78, 120, -111, -103, 29, 69, -78, -112, 59, -122, -99, 81, 113, -60, -91, -58, -62, 51, -32, 26, 35, 58, -96, 31, -94, 11, 67, -28, -128, 52, 93, 125, -32, -69, -59, 69, -3, 48, -116, 80, -14, 0, 68, -40, 30, 44, 56, -99, 57, -52, 65, -65, -62, 71, 100, -108, 46, 109, -57, -113, 105, 73, -59, 28, -33, -54, -21, 19, -91, -24, 18, -112, -1, -3, 21]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[4, 64, 90, 71, 119, -7, -7, 67, 14, -40, 46, -75, 83, 82, 32, 22]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-4, -63, -51, -20, 79, -41, -25, 59, 6, -55, -55, 127, 72, 17, -13, -38]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-63, 57, 29, -115, -54, -31, 84, -15, -77, -98, -108, -47, 3, 7, 96, -52]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[108, 50, -83, 32, 92, -111, -28, -66, 52, 123, 57, 42, -113, 23, -114, 60]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-24, 97, -87, -76, -65, -73, -50, 31, -109, 105, 15, 112, 119, -77, 104, 104, 39, -90, -27, -39, 91, 99, -44, 58, -82, 113, 110, 35, -22, 96, -100, -86, -63, 57, 29, -115, -54, -31, 84, -15, -77, -98, -108, -47, 3, 7, 96, -52]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[42, 1, -8, -24, -66, 89, -47, 26, -112, 73, -66, -107, 54, -46, 79, 60, -87, -71, 61, -18, 119, 73, -124, 88, -81, -14, 58, 84, -43, -49, 71, -104, -63, 57, 29, -115, -54, -31, 84, -15, -77, -98, -108, -47, 3, 7, 96, -52]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-66, -70, -84, 80, 65, -23, 70, -8, -25, -3, -11, 2, 75, -14, 42, -49, 70, -111, -121, -6, 14, -31, -79, 46, 103, 56, 87, -62, 34, -45, -38, 114, 102, 120, -74, 83, 79, -71, -21, 114, 81, 58, 24, -1, 33, -16, -51, -28, 122, -16, -106, -126, 96, 48, -45, -40, -74, 27, -85, 35, -111, 56, 127, -121, 68, -62, 33, 22, 71, 121, 97, 34, -19, 95, -96, -65, 126, -83, -12, -15, -71, -49, 76, 62, 104, -11, 50, -43, 104, 30, 15, -65, 29, -82, 76, 105, -63, 57, 29, -115, -54, -31, 84, -15, -77, -98, -108, -47, 3, 7, 96, -52]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[17, 116, 102, 89, -41, -33, 32, 116, 74, 40, 90, -32, 93, -48, 77, -52, 91, -76, -78, 105, -6, 48, -98, -70, -24, 54, 55, -119, 124, -52, -117, 21, -63, 57, 29, -115, -54, -31, 84, -15, -77, -98, -108, -47, 3, 7, 96, -52]");
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey55);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey55);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey55);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey55);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey55);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey55);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("C718B4A2C36E882A21FF0D9AFADE2A77", secretKey55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey55);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[98, 54, 40, -45, -42, 123, -122, -55, -80, -8, 82, 29, 122, 17, 45, -82]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 92, 92, -64, 22, -101, -42, 30, 44, 84, 30, 84, -30, -13, 111, -47]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-88, 91, 64, -95, 69, -75, -58, 9, 25, 101, -22, -44, -114, -6, -3, 111]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[41, 92, 81, -106, -113, 53, 49, 98, 65, -12, -80, 112, 51, -37, 96, -35]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "E19F7FB03D67B38B81B24F9CA6732F9325FB229387A61A273523A4CC9CC95AED055252DD66D4FBB615DC859A3E764E041A103598396D0ED82ACD55881E8B1CF3DF9E321A2D94346EFB903185EBDB7CDA816E4EA8E2AC2423A5F96168EB26D7748CF052D5C2BA464B85E138B4A4D07BF592888451B3579C386F880E159CD9CEF0873DB8BE880B236542CC3C2CB2818D7D2E3B3DA04AABBF6CA33BA36CEB45D6C1A196DBA8EC4E3FD79A373D9ADE778A31F57080D3A5C984AFE07899E2F962A795BD98C6542BEC06BEF1B8299E12A1A2E83CF0E716D703FED24791AFF8A899506CA85B40A145B5C6091965EAD48EFAFD6F" + "'", str23, "E19F7FB03D67B38B81B24F9CA6732F9325FB229387A61A273523A4CC9CC95AED055252DD66D4FBB615DC859A3E764E041A103598396D0ED82ACD55881E8B1CF3DF9E321A2D94346EFB903185EBDB7CDA816E4EA8E2AC2423A5F96168EB26D7748CF052D5C2BA464B85E138B4A4D07BF592888451B3579C386F880E159CD9CEF0873DB8BE880B236542CC3C2CB2818D7D2E3B3DA04AABBF6CA33BA36CEB45D6C1A196DBA8EC4E3FD79A373D9ADE778A31F57080D3A5C984AFE07899E2F962A795BD98C6542BEC06BEF1B8299E12A1A2E83CF0E716D703FED24791AFF8A899506CA85B40A145B5C6091965EAD48EFAFD6F");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-45, 18, -14, -21, 14, -20, 23, 104, 28, -3, 54, 88, 110, -7, 18, -75]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[107, 29, 127, 34, -44, -115, -89, -112, -92, 33, 86, -121, -2, -50, 13, -11]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[105, 59, 61, -78, 106, 123, -8, 9, -89, 70, -117, 30, 103, 87, -18, 20]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-97, 12, -45, 94, -118, -103, 18, -73, 70, 49, 86, -68, -15, -8, -49, 62]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-24, -20, -103, 48, 28, -27, 95, -94, -18, -27, 22, -78, -42, -35, 113, 104]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[108, -56, 51, -31, 126, 32, 112, -21, -41, -44, -7, 1, -77, 23, -68, 79]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-113, 88, -86, 61, -33, 52, -97, 20, -26, 47, 92, -5, 94, -3, 17, 90, -70, -58, 7, 23, -5, 54, -26, 119, -53, -55, 84, 74, -91, -5, 6, 7, -24, -20, -103, 48, 28, -27, 95, -94, -18, -27, 22, -78, -42, -35, 113, 104]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-27, -68, -11, -14, 77, -123, 75, -26, 11, -26, -106, 44, -36, 94, 71, 8, 35, 68, 56, -103, 25, 102, -64, -56, -79, -96, -6, -42, -58, 93, 15, 37, -24, -20, -103, 48, 28, -27, 95, -94, -18, -27, 22, -78, -42, -35, 113, 104]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-84, 119, 115, 67, 98, -5, 33, -125, -64, 3, -95, 66, 45, -2, 102, 92, -27, -18, 17, 126, -33, 93, -54, -5, -26, 60, -46, -68, -94, 43, -8, -83, 24, -108, 28, 70, -18, 110, -4, 120, 22, 29, 64, -128, -48, -24, -36, 116, -57, 18, -12, 113, -118, 32, -45, 100, 36, -72, -100, 18, 118, -62, -64, 18, -8, 0, -73, -9, 10, 17, 48, -72, -16, 59, -61, 58, 80, 119, -56, -68, -43, -110, 118, 107, -20, 28, 32, 96, -124, -61, -26, -65, 98, -84, 115, 17, -24, -20, -103, 48, 28, -27, 95, -94, -18, -27, 22, -78, -42, -35, 113, 104]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[106, 102, -4, -104, -33, 103, 46, -105, -83, -82, 114, -124, -25, 3, 96, 103, 29, 2, 54, 57, 123, 124, 98, 116, -73, 60, -4, -81, 9, 53, -58, 58, -24, -20, -103, 48, 28, -27, 95, -94, -18, -27, 22, -78, -42, -35, 113, 104]");
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-12, 122, -74, -89, -19, 41, 8, 126, 56, 89, 7, 127, 6, 43, 7, 106]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[21, 73, -101, 97, -59, -52, -37, -114, -54, 15, 76, -15, 105, -33, -45, -83]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[94, -116, -52, 36, -12, 7, -38, 46, -41, 76, -123, 61, -91, 34, 81, 99, -105, 119, 56, -108, -93, 101, -19, 56, 48, 25, 71, -90, -26, 3, 91, 43, -29, 99, 103, 37, -79, -49, -124, 16, -8, -57, -86, -17, 0, 50, -114, -18, 118, -58, 92, -30, -6, 28, -71, 103, -107, 6, -25, 78, 60, 70, -18, 100, 87, -12, -62, 77, 22, -53, 27, 111, -45, -122, -23, -6, -15, -56, -123, -1, 70, 80, 30, 101, -55, 9, 71, -123, -114, 7, 106, -42, -68, 53, -8, 115, -12, 122, -74, -89, -19, 41, 8, 126, 56, 89, 7, 127, 6, 43, 7, 106]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-42, 24, -111, 80, 63, 45, -70, -13, 112, -3, 78, -98, 17, -6, 14, -27, -97, 7, 122, -96, 92, 33, 25, 96, 103, 122, -21, -49, 32, 25, 31, 10, -12, 122, -74, -89, -19, 41, 8, 126, 56, 89, 7, 127, 6, 43, 7, 106]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "D61891503F2DBAF370FD4E9E11FA0EE59F077AA05C211960677AEBCF20191F0AF47AB6A7ED29087E3859077F062B076A" + "'", str11, "D61891503F2DBAF370FD4E9E11FA0EE59F077AA05C211960677AEBCF20191F0AF47AB6A7ED29087E3859077F062B076A");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-118, -13, 11, 25, -100, 102, 92, 79, 112, 85, 24, -15, 103, 33, -46, 118]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[72, 42, 61, -31, 54, 36, 70, -105, -42, -1, -86, 59, -17, 69, 94, -67]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[72, 42, 61, -31, 54, 36, 70, -105, -42, -1, -86, 59, -17, 69, 94, -67]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-51, 27, 125, -121, -63, 14, -114, 52, -27, 85, 125, -42, -101, -78, -20, -66]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-118, -13, 11, 25, -100, 102, 92, 79, 112, 85, 24, -15, 103, 33, -46, 118]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-70, 124, 113, -104, -82, -71, -120, -19, 4, 8, 127, 91, -113, -96, -115, -115, 0, -24, 16, -111, -36, 121, 1, -95, 21, -60, -94, 104, -96, -17, -120, -82, 126, -69, 19, -51, -28, 104, 98, 48, 29, -86, -109, 29, 60, -75, -41, 112, 21, 2, -85, -126, -35, -128, -51, 45, 45, -46, -47, 118, -116, 34, 80, 70, -64, -81, -35, -85, 64, -35, 21, 86, 71, 122, -14, 104, 94, 96, 45, 18, 75, -44, -122, 22, 63, -47, -14, -81, -84, -39, -25, 47, -43, -35, -62, 106, -118, -13, 11, 25, -100, 102, 92, 79, 112, 85, 24, -15, 103, 33, -46, 118]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-118, -13, 11, 25, -100, 102, 92, 79, 112, 85, 24, -15, 103, 33, -46, 118]");
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey7);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("B881F13A961670B198DC6CA3BB3D560BABA2B7CB718B496F3F1A0E617C15E7C8608322AE7D3EAC88B33D3CF50758BE0D7D64B126FBE6B32A7E20C6D37D78C3E2D70FD810BC544F2EE74BD41E0F5E008535E34AA1C301C96B96E3D7D73880E4FC41AD6A807184069FD259AE7100E08C68", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey22);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -44, 98, 76, -57, 38, 69, -76, -73, -37, -104, -58, -16, -100, 83, -95]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[73, 127, -43, 75, 39, 123, -107, 69, -4, -28, -94, -127, -39, 37, -35, -36]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[73, 127, -43, 75, 39, 123, -107, 69, -4, -28, -94, -127, -39, 37, -35, -36]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[52, -127, 51, 15, -89, 80, -43, 96, -81, 28, -97, -89, 85, 110, 88, -127, -81, -25, -50, 88, -40, -85, 104, 23, -95, 31, 71, -91, 85, 39, 28, -36, -54, -44, 98, 76, -57, 38, 69, -76, -73, -37, -104, -58, -16, -100, 83, -95]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-120, 125, 102, -74, -47, -84, 57, 117, 108, 80, 85, 63, -42, 7, -54, 24]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[20, -51, -119, 32, -28, 69, 108, 113, -83, 116, 51, 87, -38, 57, -86, -96]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, -40, 96, -105, -12, 34, 89, 88, 33, -26, -41, 35, 91, -14, 106, 46, 101, 71, 111, -20, -126, -23, -18, 9, 39, -80, 33, -79, 74, 3, -13, 20, -98, 13, 100, -43, 21, 115, -123, -88, -46, -40, 63, 44, -89, 57, -69, -21, -65, 123, 80, -93, 20, -43, -76, -101, 116, -13, 95, -44, -69, 15, 49, -121, 3, -76, -82, 111, -24, 123, 63, 116, 56, -45, 45, 20, -113, 103, 53, -110, -40, 119, 110, -89, -46, -82, 35, 95, 97, 31, 17, -105, 85, 86, 30, 88, -120, 125, 102, -74, -47, -84, 57, 117, 108, 80, 85, 63, -42, 7, -54, 24]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[60, -119, -14, -33, -56, 101, 96, 31, 98, -50, -10, 48, 100, 9, -19, 40, 95, -56, -53, 123, 41, 7, -79, -35, 115, 117, -98, -1, 86, -107, -3, -89, -120, 125, 102, -74, -47, -84, 57, 117, 108, 80, 85, 63, -42, 7, -54, 24]");
        org.junit.Assert.assertNotNull(byteArray28);
    }
}

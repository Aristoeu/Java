package AESEncryption;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E61C929459BEA0319BFEC5A69310E05AAADF5D68DECF75148B166E1C2ED35E74418ED6FAF3A6716EB127BFDAC3AD8797B3FD4DE8D1843C7F2C4BD2F9027551E7E0604170DEE57A6F2B29E7098D88D288D348F5F412F12A3B7E5AFF9941FA80E883EA72C7D74EF5F20A84A01C051F665705B30E4A6574023297A0D5E4539C67C4AE1B62BA38EBFE1BB3BE065137A5CFAC7F418C095AE791E1C81435CF9153DC765E4F88E2F9AA4C0817DAEA75ECB7F3302F26FD488C9457B4756A0FBB039BF16875353BC160CC57734C7F3BBF4F6942A935AF8B789A1A967C36E6C906DEFFD3B7CB9FA460F955A3952941BAB9C7B26B92", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("A72C0A0EFA8552D2C186C5C931F38F62EBB1FB0D5CF5A4F98ADF6EEB366761BDD322AD6A72CA8BC8B1A198C8B711D351A669D25E26755840F8E1FCB064840C8520D079951471F950C106863396D5EA4F8FA7030FD350491C6C25B4DFE913A981DD35B31CB37C252B51FF7F7D69B05927253B30B2DBD3D473C433631D96C7C64FFA34E8A70185CB1B0919A33AC238846AB302F5F19A741E4C3B65CDDD3FB4372AEB90437D741A77245851F31C5E4D26529BFD0EDCD451713E98721501754B2D13B74C47F98966F350841EBE8D1076BC08C65A2B81C466343A334BEFFC381DDFAA2DA8D9D5166E721455EF9A4B26BAC117", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-3, 35, 3, -97, -37, 36, 117, 60, 20, 15, -106, -113, -116, 121, 1, 64]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[93, 127, 31, 26, 118, 79, -67, 89, -41, 126, -2, -105, -7, 74, 109, 23]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-7, -107, -26, -35, -28, 126, -113, -127, -37, -126, 39, -110, 27, -10, -127, -126]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[81, -8, -94, -23, -87, 53, 109, 51, -109, 21, 52, -35, 122, -51, -77, 111]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-58, 123, -30, -72, 70, 67, -85, -26, -105, 94, 111, -18, 114, 48, -128, 18, -115, 78, 87, -5, -59, 59, 95, -53, -111, 101, 64, -116, -123, -73, -55, 11, -7, -107, -26, -35, -28, 126, -113, -127, -37, -126, 39, -110, 27, -10, -127, -126]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-7, -107, -26, -35, -28, 126, -113, -127, -37, -126, 39, -110, 27, -10, -127, -126]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey27);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey27);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey27);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey27);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("6000978D729A5EAF02789174FCEF78DC19A6A5353FA2EE08001847BF93F672C57842A660B60BA3E3BAFC4CA493DB93BD616BA839F8FC6BCE8F25A5CFF9986984A5A08FB7FA9398912FBF66BA83D5698C9B89FE34ECEA63E7E13593D7BE10CB607921E0CEEC09BCE538EB3873308F1B39", secretKey27);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("388766310852E93CAE580A5C320E8371", secretKey27);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-28, -79, -24, -109, 60, -29, -108, -121, 50, -79, -105, -56, -103, -99, 101, -72]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 44, -46, 24, -96, 111, 10, -3, 81, 124, 30, 106, 34, -32, 98, 57]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-57, 101, 23, 115, -109, 14, 55, 124, -5, 37, -6, 66, -121, 70, 122, -92]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[61, 91, 21, -95, 94, -57, -97, -25, -56, 115, 25, -65, -97, 119, -4, -121]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-53, -18, 6, 125, 17, -118, -33, -93, 97, 87, -73, 116, 75, -118, 37, -51, 95, 86, -73, 98, 10, 61, 101, -64, 82, -117, 37, 79, 124, 37, 119, -17, -57, 101, 23, 115, -109, 14, 55, 124, -5, 37, -6, 66, -121, 70, 122, -92]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[117, -55, -56, 79, 92, -117, -5, 100, -121, -70, 74, -113, -101, -25, 28, -68, -119, 43, -37, -73, 4, 33, -116, 101, 40, 66, -7, 100, 56, -44, 49, -64, -57, 101, 23, 115, -109, 14, 55, 124, -5, 37, -6, 66, -121, 70, 122, -92]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-87, 5, -110, 123, -83, 118, 117, 127, 81, -60, -72, 7, -72, 33, -71, 45, 58, 93, 59, -81, 12, -103, 62, 94, -48, 79, -106, 24, -19, 64, 83, 108, 121, 21, 99, -60, -123, -23, -122, -53, -13, -89, 15, -10, 99, -86, -16, 78, 88, 30, -92, -107, 45, -43, 117, 62, 26, 13, 91, 17, -83, -84, 36, -35, 104, -95, 14, 7, -116, 77, 36, -6, 100, -8, 50, 22, -108, -128, -9, -24, 54, 18, -16, 68, 1, 26, -95, -41, -5, -47, 37, -70, 97, -96, 31, 36, -57, 101, 23, 115, -109, 14, 55, 124, -5, 37, -6, 66, -121, 70, 122, -92]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-12, 15, -110, 89, 84, 86, 30, 3, 91, 53, -60, 39, -31, -120, 112, -114, 34, 23, -28, -4, 1, -48, 50, -70, 55, -119, 57, -10, 104, 44, -20, -44, -57, 101, 23, 115, -109, 14, 55, 124, -5, 37, -6, 66, -121, 70, 122, -92]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-114, -88, 65, 8, 43, 81, 32, 51, 8, 62, -101, -64, 29, 95, 38, -111, 36, -11, 64, 127, 59, -109, 100, -9, 118, 62, 51, 107, -3, -70, 127, 47, -102, 6, 74, -1, 23, 1, 113, 6, -114, -20, -105, -90, 127, -12, -92, -20, -9, -8, 21, -22, -100, -109, 85, 93, -108, 77, 87, -94, -126, 34, -119, 43, 124, 38, -38, -64, 55, -37, -80, -125, -50, 44, 85, 69, -120, 40, 19, -9, -16, -80, 18, -119, -31, -31, 120, -8, 53, -95, -72, -90, 33, 2, 30, 22, -57, 101, 23, 115, -109, 14, 55, 124, -5, 37, -6, 66, -121, 70, 122, -92]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-84, -96, 115, -105, -124, -8, -43, -30, -85, 98, -60, 52, 59, -6, -42, -60, 91, 22, 53, -53, -97, -36, -2, 57, 15, -51, 25, -120, -40, 124, -38, 69, -57, 101, 23, 115, -109, 14, 55, 124, -5, 37, -6, 66, -121, 70, 122, -92]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ACA0739784F8D5E2AB62C4343BFAD6C45B1635CB9FDCFE390FCD1988D87CDA45C7651773930E377CFB25FA4287467AA4" + "'", str40, "ACA0739784F8D5E2AB62C4343BFAD6C45B1635CB9FDCFE390FCD1988D87CDA45C7651773930E377CFB25FA4287467AA4");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ACA0739784F8D5E2AB62C4343BFAD6C45B1635CB9FDCFE390FCD1988D87CDA45C7651773930E377CFB25FA4287467AA4" + "'", str41, "ACA0739784F8D5E2AB62C4343BFAD6C45B1635CB9FDCFE390FCD1988D87CDA45C7651773930E377CFB25FA4287467AA4");
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-59, -109, -51, 69, -20, 74, 6, 91, -104, -100, 115, -39, -128, 124, 50, -99]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[92, -32, -99, 6, 116, -76, -49, -105, -76, 65, -104, -106, -102, 58, -36, 19]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[16, -25, 45, -3, -15, 80, 71, -19, 113, -91, 84, -40, 56, 85, 119, -58, -84, -95, -119, 82, -52, -85, -77, 100, 13, 77, 64, 74, -29, 79, 33, 95, -59, -109, -51, 69, -20, 74, 6, 91, -104, -100, 115, -39, -128, 124, 50, -99]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E0BBF00213234E7324CB5716CB7455E2", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("A715E74452E7932A1A05F770B18F0810", secretKey20);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D7ED78D3EEC190674D51C0C40347823F954FEA5FD5998AC7970B4B21EC7983DA1A1F9D9180FCFF5D0AA59CE6759116A3B7077D2470863013236B3D511817CEAAEFE25FD24881D524870AEAA6BE11898F33DA6B4D3C6A1AC5D82007573AA3E8B36FA486A7C1C6EEC11FBC54A4B2DC8ECA5F3FFC0FCE452EDEBF473F4833C6428A55DA1AC31AC5B8F1CD7E8ACD49EF0CD3EF76DFA15C085329B717FD0369401D1E3648BE1C64EF5182E6C960F30AB7AB2FC0B1C759990395C3855715B053A29160205BCB76643FECEA381FEA4D5DCA7FB173FCB4F475DFA45AF08690EFD66EEBD9FFC5E64C0F37C88B862203776AC1A378", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey31);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-81, -93, -123, -128, 69, -7, -63, -103, -10, -29, -60, 118, -93, -5, -93, 123]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-36, -102, 73, -1, 48, -23, 22, -120, 44, -58, 118, -68, 114, 61, -8, -54, -59, -80, -46, -3, 83, 23, -113, 101, 63, 11, 32, 122, 63, 11, -68, -97, 117, -95, -53, -7, 45, -54, 107, -78, -68, 32, 54, -59, 35, 38, 118, 7]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-9, 31, -102, -89, 15, 121, 72, -120, 31, -36, 97, 88, -24, -59, 69, -2, 57, -57, 43, -30, -61, 111, 94, 62, 61, -60, -73, -37, 23, -13, -112, -86, 117, -95, -53, -7, 45, -54, 107, -78, -68, 32, 54, -59, 35, 38, 118, 7]");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[124, -109, 60, 69, -113, -76, 66, -97, -80, -57, 101, -126, -118, -70, 52, 29]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[62, -125, 22, 36, -15, 26, 104, 76, -16, -96, -2, 6, -125, -36, 85, 2]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[62, -125, 22, 36, -15, 26, 104, 76, -16, -96, -2, 6, -125, -36, 85, 2]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[107, 50, 68, 55, -32, -126, 87, 44, 104, -21, -83, -92, 17, -16, 3, -60]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-3, -79, 123, 34, -83, 78, 57, 124, 106, -35, 104, 64, -91, 34, 127, -77, -82, -93, -35, -107, -77, -80, -88, -6, 79, -33, 123, -89, -91, 38, 1, 113, 124, -109, 60, 69, -113, -76, 66, -97, -80, -57, 101, -126, -118, -70, 52, 29]");
        org.junit.Assert.assertNotNull(byteArray37);
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey26);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey26);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey26);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey26);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey26);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey26);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey26);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey26);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("066FD0B7551F2668A263D142A470E61DFB2C5A60BF534D592C52BF6F0AE973841FC9DC095841BFCA60603CE7D591D1D3", secretKey26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-48, -124, -63, -35, -60, 45, -78, 69, -26, 89, 23, -31, -100, 76, -4, 112]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -15, 112, -84, 9, 84, -93, 119, -73, 13, -84, -55, 90, -104, 101, 55]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-84, 87, -34, 121, -111, 113, 90, 98, -34, -13, -65, 101, -18, -10, 39, 84]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[103, -120, 26, 18, 33, 75, -33, -78, 44, 77, -17, 25, -121, -120, -6, -16]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-6, 90, -22, -56, -102, -31, -32, -49, 70, -18, 54, 30, -99, -44, -14, -30, -25, -36, -19, -40, 30, 66, -74, 73, -109, 83, -92, 4, 9, -69, -80, 51, -84, 87, -34, 121, -111, 113, 90, 98, -34, -13, -65, 101, -18, -10, 39, 84]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-116, 104, 107, 108, 123, -42, -61, -22, -105, 95, -75, 7, -40, -121, -70, 96, -75, -106, 14, 110, -67, -55, 57, 98, 106, 100, 32, -100, -26, 102, -78, 101, -84, 87, -34, 121, -111, 113, 90, 98, -34, -13, -65, 101, -18, -10, 39, 84]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[73, 75, 76, 36, 54, -118, -28, 122, 14, -33, 7, 85, 95, -115, 92, -70, 111, -40, -71, -29, 14, 42, 51, -90, 83, -43, -50, 75, 104, 84, 59, -67, -89, 16, 114, 25, -6, -36, -63, 29, -58, 100, -85, 1, 34, 63, -90, -65, -91, -86, 116, -102, -78, -38, 30, -73, 93, 36, -32, 103, -62, 35, 25, -22, 26, 25, -123, 115, 94, -81, -49, -93, 55, 40, -95, 56, -64, 3, 83, 36, 81, -35, -123, 4, 126, 126, -109, 14, 52, -105, -36, -108, -62, 27, 23, -1, -84, 87, -34, 121, -111, 113, 90, 98, -34, -13, -65, 101, -18, -10, 39, 84]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[50, -80, 111, 93, 14, 10, -59, -100, 80, 68, -55, 18, 9, 103, -33, -6, 97, -41, -90, -109, 22, 65, 89, -123, -81, -28, -71, -105, -115, 79, -78, 75, -84, 87, -34, 121, -111, 113, 90, 98, -34, -13, -65, 101, -18, -10, 39, 84]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-47, 76, 64, -66, 23, 28, 19, -113, 65, -99, 10, 92, -93, -49, -51, 100, -57, 18, -61, -16, 83, -106, -27, 94, -85, -95, 83, -35, -78, 42, -47, 2, -70, -71, 107, -106, -58, -53, 104, 33, 17, 42, -56, -91, -106, -113, 99, 59, 47, -7, -109, 52, 107, -115, 21, 67, 82, -16, -46, -116, 4, 106, 117, -112, 53, 89, 83, -46, -11, 26, -39, -79, 98, -45, 69, 75, 45, 109, -76, -53, 127, -93, -62, -35, -72, -125, -84, 123, 5, -20, -103, 34, -24, 99, -68, -39, -84, 87, -34, 121, -111, 113, 90, 98, -34, -13, -65, 101, -18, -10, 39, 84]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-10, -52, -63, -33, -82, -85, -41, 121, -7, -43, -27, 115, -111, -7, -78, -20, -104, 41, -44, -106, 103, 123, 13, -26, 113, -48, -62, 103, 117, 40, 49, -105, -27, 54, 35, -90, 127, 71, -116, 58, 3, 82, 9, 68, 16, -68, 55, 12, -117, 88, -41, 112, -79, -32, -95, -79, 116, 122, -49, -45, -94, 126, -16, 118, 67, 108, 102, -82, -76, -47, -41, 119, 107, -15, 6, 77, 2, 120, -87, -34, 116, 125, 3, 120, 4, -88, 84, 32, 56, 36, 56, 96, 39, -63, -117, -8, -84, 87, -34, 121, -111, 113, 90, 98, -34, -13, -65, 101, -18, -10, 39, 84]");
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("432ED3FADDA9ECD4A187C1950632A286", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("CD2DFBF2F19A5CDC5ED507D4E3AFAB45A61929A9932456D4FD29E992358D856933D47E2E26338D2D18E1B854BF1DD653D28E99B718F144EFD7D115D3AC141AD8067343518CEC70F03912A19633E1AB2D79EF278259DF687331526E55348DFC2C771E8C8AB9C21FD8D3B8B354F704AF0F", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("71ED2DB86E843ED77F1F2F9465EA7E384E553F7CBA7D92FE00FB916EA7B971FBFD342B00F553E195DE6266F1F9D33E2A3B5078E040B79A05ACC9C08CFB6F2466DE502095AB7976FC5212BCF59435D5CB8674697E29AD775BC8372966D01E07BEF02496DD65F2B5FF398328AD51D657DF", secretKey6);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[22, -18, -12, -94, 91, 86, -24, 18, -84, -117, 91, 81, -86, 97, 112, 42]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[95, -7, 78, 37, 104, -85, 92, 87, -58, 90, 123, 111, 74, -44, -119, 32, 81, 49, 2, 3, 17, -98, 86, 65, -99, 44, 103, -82, -3, -39, 90, -36, 113, -88, -59, -25, -119, 28, 39, 88, 87, 39, 98, -6, -81, -114, 87, -109]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey36);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey36);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey36);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey36);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey36);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey36);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey36);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey36);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("A575CBDB9DE195E489CB1089E4F4A233", secretKey36);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[36, -87, 49, -84, -42, -43, -4, 100, -54, -87, 94, -109, -118, 125, 35, 111]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-28, 20, 23, 111, 20, 104, 79, -21, 122, 120, 15, -54, -57, 52, -96, 20]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[28, 45, -79, -14, -119, -92, 3, -26, -118, 84, 26, -84, 16, -25, -115, -105]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-69, -70, 70, -32, 48, 116, -91, -14, -57, -4, -21, 116, -17, 76, 70, 83, -49, -52, 49, -116, 85, 20, 59, -83, 50, 121, 91, -116, -125, -83, 8, 31, -59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[31, -31, -35, 2, 9, 1, -125, 101, -2, -67, -118, -44, -83, 43, 73, 122, -53, 9, 93, -117, 4, -23, -69, 118, 36, -54, 24, -73, -43, -13, -127, -16, -59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[29, 5, 85, -44, 14, -101, -116, -91, 88, 13, -51, -119, -53, -91, 35, -108, 50, -10, -56, 93, 8, 45, 59, -33, -33, -97, 115, -70, 8, -67, -20, 7, -31, -16, 68, -117, -124, 52, 18, 36, -7, -79, 76, -18, 118, 126, 60, -54, -65, -35, 55, 93, -62, -37, 49, 102, 78, -34, 46, -68, -86, -111, 101, -113, -78, -125, 75, -111, 14, -77, 4, -26, -103, -74, -51, 106, 16, 45, 72, -50, -122, 70, -22, 76, -95, 77, 10, -37, -124, -73, 89, -70, 68, 34, 4, -55, -59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[64, -62, 124, -104, -24, -83, -91, -37, 109, -4, 103, 1, 52, -54, -113, -89, -90, -87, -79, -36, -45, -13, 13, 68, 14, -104, -20, -51, 16, 89, 11, 65, -49, -53, -54, -124, -30, 99, 47, -68, 20, -101, 67, -31, -26, -127, 39, 29, -69, -51, 89, 63, 51, -17, 34, -109, -33, -70, 49, 3, 63, 3, 38, -40, -91, -16, -38, 100, -52, 81, 68, -68, -17, -71, 31, -83, 94, 79, -114, -120, -123, 60, -62, 77, 0, 7, -74, -46, 91, 81, 3, 22, -56, 114, -126, -118, -59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-105, 126, -36, 97, -115, 118, 61, 2, 99, 103, -78, 73, -69, 72, 113, -66, 112, -121, 16, 54, -87, 35, 50, 101, -29, 53, 45, 50, -118, -92, -2, 74, -59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-91, -99, 83, -63, 77, 78, 30, -39, -35, -16, -81, 101, 40, 67, 2, -124, -28, -41, -54, 113, 79, 65, -110, -90, -53, -99, 32, 23, -110, 31, 20, 120, 112, 47, -15, 85, -12, 35, -50, 87, -59, 95, 55, -107, -81, -55, 96, -93, -119, -75, 121, -35, -95, 54, 91, -31, 83, -82, -5, -84, 17, -101, -106, 99, -3, 82, 97, -89, 69, -113, 35, 24, 7, -79, -57, -124, 112, -41, 37, 103, 10, 92, 21, -61, -49, 75, 122, 102, 117, 99, -20, -45, 29, 99, -125, 69, -59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[101, 99, 38, 92, 21, -56, 46, 3, 63, 106, 57, 82, -67, -85, -126, 12, 69, -57, 28, -127, -115, 56, 97, -113, -96, 46, 65, 46, 63, 4, 124, -21, -59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-96, 49, 55, -115, 18, -88, -3, -59, -18, 68, 53, -14, 112, -55, 72, 57, -1, -124, -83, 70, 94, 127, -78, -123, 48, 85, 67, -17, -34, 29, -77, -3, -59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-120, 71, 68, -6, 76, 22, 87, -85, -9, 15, 56, -119, 89, 112, 0, -16, -5, 68, -60, -102, -77, 52, -54, -74, -111, 4, 108, 19, -71, 113, 80, -116, -59, 67, 27, 46, 38, 63, 89, -56, -30, -39, 8, -76, 92, 24, 102, -70]");
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey28);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey36);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey36);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-35, -46, -42, -42, -67, 24, 104, -40, -7, -99, -7, -36, 22, 57, -114, -117]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[58, 92, 79, 22, 4, 52, -97, -105, 40, -75, -11, -13, 109, -50, -110, -26]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-25, 121, -106, -54, -119, -82, -76, -55, -52, -12, -13, -103, 77, 49, 87, -51]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-9, -71, 64, 0, -23, -101, 73, -42, -20, 87, -60, -68, -50, -45, 3, 38]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[91, -125, 118, 43, 48, -76, 8, -18, -100, 71, -70, 78, 49, -66, -20, 97]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[69, 89, 117, 63, -72, -42, -98, -50, 122, -92, 15, -34, 68, -112, -7, -15]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 28, -11, 26, -76, 115, 49, 30, 58, -28, -34, -121, -32, 111, -85, -106]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[91, -125, 118, 43, 48, -76, 8, -18, -100, 71, -70, 78, 49, -66, -20, 97]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-56, -3, 112, -39, 22, 43, -49, -53, 58, -69, 62, -98, -54, -52, -71, 76]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[4, 24, 15, 9, 32, -36, -45, 73, -15, 28, 114, 104, -75, 19, 120, 10, -92, 86, -8, 73, -73, -43, 115, 104, 51, -113, -47, -54, -65, -61, 36, -104, 99, 101, -13, 78, 91, -128, 75, -97, 108, 112, -49, 43, 29, 126, 5, 52]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-33, 43, -64, -48, -24, -53, -124, -27, 19, -38, -21, 106, -109, -113, 91, -77, -110, 108, -110, 30, -6, 112, -103, -53, 109, -18, 38, -87, 78, 87, -16, 10, 79, 53, 0, 82, 20, 28, -65, -24, -12, 103, -96, 30, -120, 17, -3, -91, -13, -7, 26, -111, -84, 114, -63, 37, 12, -111, -1, 2, -26, -104, 40, -86, 36, 75, 33, -106, -55, -61, -47, 25, -71, -93, 37, 31, 41, 27, 53, -69, -99, -125, -90, 70, -128, 117, 87, 127, 52, -16, 85, 57, 31, -125, 44, 69, 99, 101, -13, 78, 91, -128, 75, -97, 108, 112, -49, 43, 29, 126, 5, 52]");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DF2BC0D0E8CB84E513DAEB6A938F5BB3926C921EFA7099CB6DEE26A94E57F00A4F350052141CBFE8F467A01E8811FDA5F3F91A91AC72C1250C91FF02E69828AA244B2196C9C3D119B9A3251F291B35BB9D83A6468075577F34F055391F832C456365F34E5B804B9F6C70CF2B1D7E0534" + "'", str41, "DF2BC0D0E8CB84E513DAEB6A938F5BB3926C921EFA7099CB6DEE26A94E57F00A4F350052141CBFE8F467A01E8811FDA5F3F91A91AC72C1250C91FF02E69828AA244B2196C9C3D119B9A3251F291B35BB9D83A6468075577F34F055391F832C456365F34E5B804B9F6C70CF2B1D7E0534");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DF2BC0D0E8CB84E513DAEB6A938F5BB3926C921EFA7099CB6DEE26A94E57F00A4F350052141CBFE8F467A01E8811FDA5F3F91A91AC72C1250C91FF02E69828AA244B2196C9C3D119B9A3251F291B35BB9D83A6468075577F34F055391F832C456365F34E5B804B9F6C70CF2B1D7E0534" + "'", str42, "DF2BC0D0E8CB84E513DAEB6A938F5BB3926C921EFA7099CB6DEE26A94E57F00A4F350052141CBFE8F467A01E8811FDA5F3F91A91AC72C1250C91FF02E69828AA244B2196C9C3D119B9A3251F291B35BB9D83A6468075577F34F055391F832C456365F34E5B804B9F6C70CF2B1D7E0534");
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D16BA90A77BB0A588B7F9A1F6159665D0FC6ACFBDE19749C54D06809DA5A1522EE00A81F12431CAB708F97CDB0EB0CB", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("F64285BD7CE11414D53BAE73098E478F3D8A896CDA10348D46D3B02845269EAD04DA1717429A75304A98095FEFA317B9", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B9CBB8D1D76A7101E2CBA5A9F41EEB0882C556B0419C29D62021B3F287B4E279AB3F1E048D5343C5EB32D3C6FC426B8CD3785BCA66E08B2D3B83EE4D3F5C65325F63EA53BAFD2FC5DCF0EFF011EF697E7C6CBD616DEC7FCB10E5B9EBA01E1033B5983D2E8F95D7B4B43B802C4FEA2FE1", secretKey22);
        java.lang.Class<?> wildcardClass33 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-24, -127, -127, -78, -18, -102, -71, 57, 125, 25, -44, 67, 78, -92, -41, -5]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[118, 43, -122, 49, 49, 23, -125, -117, 95, -32, -100, -54, 95, -59, -45, 69]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[41, 58, -33, 58, 103, 72, 84, -41, -124, -68, -50, -28, -47, -108, -85, 31]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-67, -84, 29, 81, 5, -22, 69, -65, -105, -125, -46, -77, 36, 1, -122, -14]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-64, 37, -60, -127, -69, -18, -50, 27, 107, -54, 107, -87, 54, -101, -124, -60, -86, 5, 109, -46, -67, -110, -106, -36, 43, -20, 68, 95, 89, -26, 77, -11, 41, 58, -33, 58, 103, 72, 84, -41, -124, -68, -50, -28, -47, -108, -85, 31]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[49, 98, -80, -102, 13, -55, 95, 58, -41, 28, -116, -123, 0, 101, -17, 48, 28, 121, -89, -97, -128, 85, 60, 51, 62, 56, 32, -4, -8, 122, 37, 27, 66, -58, -115, -104, 79, -28, -80, -17, 36, -76, -46, 22, -119, 4, -29, 64, -85, -27, -73, -24, -95, 24, 25, 9, 30, 118, -34, -18, 60, -56, 0, 116, 41, 14, 9, 106, 117, -116, -3, 91, -53, -121, -63, -68, -75, -100, 108, 101, -60, -118, 29, 64, -126, -13, 34, 5, 126, 122, -90, 110, -88, -40, 43, -25, 41, 58, -33, 58, 103, 72, 84, -41, -124, -68, -50, -28, -47, -108, -85, 31]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-99, -104, 16, -50, 59, 53, 4, 60, -97, -55, -99, 127, -100, -8, -45, -82, -102, 88, 121, -52, -34, -8, -67, 109, -52, -23, 105, -86, 27, -38, 39, -70, 105, -80, -90, 15, -20, 58, 31, -119, -96, 17, 24, 76, -85, -91, 21, -87, 76, -60, 118, 107, 34, 92, 39, -108, 68, 95, 105, -89, -70, 20, -12, 65, 121, -69, 84, 63, -100, -53, -67, 8, 93, -99, 53, 41, 125, 95, 100, -20, -78, 28, -101, 56, -40, 42, -119, -98, 6, -112, 91, 56, -4, -117, 99, -60, 41, 58, -33, 58, 103, 72, 84, -41, -124, -68, -50, -28, -47, -108, -85, 31]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey37);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey37);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey37);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey37);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("02DB6592E93DF772777A7EBE5479502DF11F32EE497B3F8FCE41DC65090791BF7E7F8568F5B3C626DB27BCB1B48CEF83CA2DEC99BFBD8516E0B9A40C2312E1CA1E0EC9898287EFC86ACCAA437BAC7D4B7170EBBED9F3E28376F43FD07CA78AB02B3FA0B22ED77CA843EE983C890BBF30", secretKey37);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey37);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("54FD043E6295EC4180DF7CB7007E349F01E94DA5C44F3E9D300D69CE029CA82342A02BD568FF89C5662A14D62B81303D0FD746F9836C38CF0BA260444E95A3455C6F4C037A5AA1AA827A65D477741013D1803282E8C0F35B0CC0C5542AE9B0A75C66EBADFFE25657A376A3734409A2BA", secretKey37);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[75, -90, 14, 96, 39, -49, -59, 105, -78, 71, -6, 104, 104, 90, -31, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[94, -8, -67, 78, 93, 102, -40, -92, 101, -33, 36, 85, -84, -73, 83, -111]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-29, -46, 63, -117, -122, -52, 43, 39, 39, 62, -119, -81, 88, 121, 86, 33]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-23, 97, -18, -68, 89, -88, 115, -84, -9, -39, -52, -60, 115, -70, -93, -79]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-124, -10, -25, 88, 22, 59, -120, -82, -119, -6, -57, 118, -88, -29, -49, -16]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-83, -91, -24, -95, -87, -39, -29, -29, -56, 43, -34, 51, 76, -11, -109, 88]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-83, -91, -24, -95, -87, -39, -29, -29, -56, 43, -34, 51, 76, -11, -109, 88]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-13, 19, 127, 32, -118, 94, 49, -118, -120, -54, -98, -28, 4, 101, 68, 77, 0, -113, -64, 82, 37, 20, 19, -29, -93, 117, 98, -37, 19, 107, 81, 25, -124, -10, -25, 88, 22, 59, -120, -82, -119, -6, -57, 118, -88, -29, -49, -16]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, 17, 1, -76, 106, 64, 26, -39, -75, -109, -74, 35, 46, 89, -59, -107, -89, 43, -45, -17, 125, -94, 83, -58, -92, -50, -121, -99, 18, -84, 24, -97, -124, -10, -25, 88, 22, 59, -120, -82, -119, -6, -57, 118, -88, -29, -49, -16]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey29);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("60776C49AD5DF687B0C31C9B3F6A1ABA", secretKey29);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey53);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        byte[] byteArray68 = new byte[] {};
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray68);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey70);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey74);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey74);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey74);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey74);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0B3F770D0055D0086E4D5F34677807F643C52681888CF416427DA1BEF08CAF1787327C11DC64B59CF2B3E256003EC1C5DC733E5C890287207AD99467D8686ED5F4F64B8AFC0545EE2C1DCF50C4F4F9FEE0D707DBA4C46C56651B9B2B97612479DE9281D9476441CF2DE866714363BDAED9F5A8E83701A8E0F6B9F3EA7912686D326EBE4F95BB8136F84EF04DB9499A268ECF8C8E1BCAF3F95D8DE36EAB145B0A3DB211EC704215BD747BEBE3650F3A502E0A3FCC48C59869EB6466C1927E84E5A9F4C8CF836DEA5D92E25D34628563E33B6E89C7BDA68B0745F97FA99F971C7A84969C242F20003AB3BC7589946F98B", secretKey74);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("B5B0DD58C762FFAC72A9F66B330C3A870801DA3AE6A04241B3E2D9581B20479A2807AE8605B0259A2232C74F807A4C25", secretKey74);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("DBEEDBC3A21DF9AA7AACEF56D5C88AE3C9CA81F4B02B6C2287576E5508DE3609BEFC4052BBB94B153EB8DAB093C4E01AD59C44945D64E0B8B0A3AFEACCF5682C08BDFFB3781AAB47648E61D0545896E3A947F0D29375FC9E4A71C76C1F2C41A9C2F1F171B09D86DB91E12DEA0AAB1506", secretKey74);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("EAF711381841EE5273638DBF14E2DB1477F07264D20598EE40909DD58E34335A6E31FD9BA65A8DC04F534E54524FDB5586FEEC5F4ACA82F8E4C93678A2FFB622701EF98647013BCC9A707592332902C36AE37C11FAE58B9A3628301F3D31730C2A7A87D36CD9EE4CB94CB33641866712", secretKey74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey74);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-91, 119, -21, 41, 69, -121, -40, -23, -46, 31, 71, -29, -18, -71, 61, -126]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-65, -56, 94, 110, 83, -110, -79, 4, 54, 9, -67, -53, -53, 15, -65, 82]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-40, -116, -26, 56, 66, -21, 117, 64, -77, 96, -27, 115, -50, 77, 84, 7]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[119, -5, -123, -53, 4, 15, -122, -105, -64, 19, 39, -3, 24, 43, 124, -77]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[53, -65, -126, 33, 88, 127, 93, -91, -14, -44, -83, -7, -79, -39, -47, 116]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, -2, -103, -51, -56, 91, 8, -31, -71, 92, 25, 25, -71, 86, 63, 120]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-13, 28, -2, -128, 32, 112, -26, -104, -61, -59, 30, -22, 106, -61, 71, -93, -27, -103, 97, 36, -66, 78, -85, 118, -107, -70, -102, -22, -105, -112, 59, -17, 53, -65, -126, 33, 88, 127, 93, -91, -14, -44, -83, -7, -79, -39, -47, 116]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-66, -75, -86, 55, -61, -102, -34, 53, 103, -109, -6, -114, -120, 97, -84, 42, 96, 1, 37, -69, -10, 4, -90, 11, -111, -98, -32, 53, 78, -29, -35, 58, 53, -65, -126, 33, 88, 127, 93, -91, -14, -44, -83, -7, -79, -39, -47, 116]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-64, -18, -102, -13, 15, 29, 53, -119, -46, 101, 22, -97, -78, -41, 5, -6, 31, -18, -46, 111, 33, -114, -112, -88, 108, -72, -39, 48, -29, 4, 63, -78, 53, -65, -126, 33, 88, 127, 93, -91, -14, -44, -83, -7, -79, -39, -47, 116]");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "C0EE9AF30F1D3589D265169FB2D705FA1FEED26F218E90A86CB8D930E3043FB235BF8221587F5DA5F2D4ADF9B1D9D174" + "'", str38, "C0EE9AF30F1D3589D265169FB2D705FA1FEED26F218E90A86CB8D930E3043FB235BF8221587F5DA5F2D4ADF9B1D9D174");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-32, 26, -73, 5, 12, -4, -128, -52, -8, 28, 47, -26, 95, 77, 54, 90]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[85, -29, 77, -42, 106, -126, 89, 110, 55, 90, 43, -6, -117, 126, -6, -117]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[93, -51, 94, -27, 67, -45, 104, 9, 31, 19, 103, 54, 67, -56, 58, 16]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[12, -26, 56, -52, 31, 40, -57, -120, 70, 86, -57, -53, 47, -117, -75, -60]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-29, 5, 123, -97, 34, 65, 28, 21, -78, -109, 44, 65, 69, -7, -96, 94]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[12, 58, -97, 113, 55, -115, 64, -24, -15, 52, -56, -36, 46, -57, 28, -103, -87, 72, 114, -93, 79, 85, 77, 87, -9, 93, -75, -46, -68, 116, 12, -71, 12, -26, 56, -52, 31, 40, -57, -120, 70, 86, -57, -53, 47, -117, -75, -60]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-122, -120, 68, -97, -62, -102, 85, 16, -8, -124, 104, 21, -74, -22, -67, -116, -101, 102, -124, 127, 122, -6, 2, -34, -10, -121, 29, 83, -92, 1, 58, -35, -18, -4, -128, 31, -89, -121, 60, 82, -46, 69, -26, -53, 99, -87, 6, 20, -79, 58, 1, -3, 1, -21, -12, -128, 22, 70, 83, -72, -53, 103, -38, 69, -72, -128, 93, -15, 96, 29, 23, -97, 61, -38, -84, -117, 127, 15, -37, -79, 41, 24, 78, -119, 69, 127, 93, 127, -60, 71, 115, 29, 3, 59, -28, -78, 12, -26, 56, -52, 31, 40, -57, -120, 70, 86, -57, -53, 47, -117, -75, -60]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey53);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey53);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        java.lang.Class<?> wildcardClass66 = byteArray62.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-79, 43, 68, 12, 74, 43, -9, -127, 36, 11, -124, 124, -68, 76, -68, -37]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[18, 33, 99, 121, -81, -23, 46, 51, 104, -59, 78, 25, 110, 51, -116, 125]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[108, 75, 46, 66, 69, -11, -68, -61, -123, 31, 51, -30, -20, -94, 119, -114]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-35, -51, 24, -53, 12, 85, 91, -107, 48, 81, -92, -98, 39, -17, -3, -30]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-87, -81, -52, 38, -123, 22, 6, -115, 113, -77, 85, -26, 28, -7, -87, 19]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-28, -109, 111, 18, 13, -43, 46, 77, -114, -1, 80, 64, -100, 105, -23, 74]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[20, 57, -51, -75, 16, 85, -38, 112, 58, -78, 71, -15, -93, 28, -94, -118]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[44, 40, 96, 100, 124, -3, 20, 104, -18, 15, 75, 10, 51, 47, 8, 33]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[118, -1, 29, 61, -37, -5, -116, -106, -50, -62, -24, -7, 54, -75, -46, -13]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-31, -91, 110, -56, -45, 0, 35, 43, 103, 28, -51, -28, -6, -13, -60, 58]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[34, 19, 47, -82, -58, -77, 48, -12, 87, 97, -19, 121, 9, -26, 32, 17]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[118, -1, 29, 61, -37, -5, -116, -106, -50, -62, -24, -7, 54, -75, -46, -13]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-100, -117, -62, 23, -35, -117, -22, -119, 42, 40, 88, 109, -120, -88, 15, -29, -104, 12, -97, 26, 61, -94, 9, 21, 7, -50, 58, -113, -20, -83, -109, 116, -98, 103, -64, -97, -75, 81, -93, 114, -3, -109, -79, -83, -109, 13, 21, 81, -91, 57, 36, 21, 40, 57, 24, -66, 41, 87, 117, 9, 102, -42, -47, -38, -66, 3, -64, 40, -126, -101, 62, -74, -78, -27, -127, -66, 93, 28, 60, -109, -104, 105, -116, 84, 19, 23, -49, -105, 56, 49, -10, -110, 104, 5, -79, 104, 118, -1, 29, 61, -37, -5, -116, -106, -50, -62, -24, -7, 54, -75, -46, -13]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-5, -72, -39, -54, 30, -52, 79, -21, -125, 30, -62, -96, 102, -108, -111, -34, 99, -51, -110, 125, -37, -118, -15, 125, -83, 71, 7, 119, -47, -59, 24, -45, 26, -127, -19, 16, -113, 21, -57, -89, 37, -117, -108, -42, -41, -15, -89, -33, 48, 17, -54, -16, 47, 104, 119, 94, 47, -45, 35, -89, -82, 87, 21, 46, -64, -3, -23, 121, -124, 3, -122, -79, 3, 8, 93, -26, -96, 2, 22, -81, -58, -102, 73, -17, -60, -41, 28, -55, 14, 104, -111, -105, 76, 42, -32, 57, 118, -1, 29, 61, -37, -5, -116, -106, -50, -62, -24, -7, 54, -75, -46, -13]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[62, -13, -86, -62, 77, -122, -94, 105, 4, 89, 113, 45, -72, -2, -72, 35, -100, -26, 62, 30, 24, 113, -55, 33, 19, 45, 36, -70, 13, -77, -98, -116, -47, -3, -79, -110, -99, 126, 32, 112, 30, -124, 64, -39, -101, 116, 77, -43, 56, 29, -60, -101, -19, 21, 30, -97, -9, 97, 55, 61, -54, 73, 91, 43, 52, -18, -107, 114, -69, 45, -85, 109, -61, -82, -101, -105, 4, 45, -83, 65, -108, 114, 33, 33, -120, -86, -118, -77, 66, 19, 107, -50, 64, -8, -26, -106, 118, -1, 29, 61, -37, -5, -116, -106, -50, -62, -24, -7, 54, -75, -46, -13]");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "3EF3AAC24D86A2690459712DB8FEB8239CE63E1E1871C921132D24BA0DB39E8CD1FDB1929D7E20701E8440D99B744DD5381DC49BED151E9FF761373DCA495B2B34EE9572BB2DAB6DC3AE9B97042DAD419472212188AA8AB342136BCE40F8E69676FF1D3DDBFB8C96CEC2E8F936B5D2F3" + "'", str63, "3EF3AAC24D86A2690459712DB8FEB8239CE63E1E1871C921132D24BA0DB39E8CD1FDB1929D7E20701E8440D99B744DD5381DC49BED151E9FF761373DCA495B2B34EE9572BB2DAB6DC3AE9B97042DAD419472212188AA8AB342136BCE40F8E69676FF1D3DDBFB8C96CEC2E8F936B5D2F3");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "3EF3AAC24D86A2690459712DB8FEB8239CE63E1E1871C921132D24BA0DB39E8CD1FDB1929D7E20701E8440D99B744DD5381DC49BED151E9FF761373DCA495B2B34EE9572BB2DAB6DC3AE9B97042DAD419472212188AA8AB342136BCE40F8E69676FF1D3DDBFB8C96CEC2E8F936B5D2F3" + "'", str64, "3EF3AAC24D86A2690459712DB8FEB8239CE63E1E1871C921132D24BA0DB39E8CD1FDB1929D7E20701E8440D99B744DD5381DC49BED151E9FF761373DCA495B2B34EE9572BB2DAB6DC3AE9B97042DAD419472212188AA8AB342136BCE40F8E69676FF1D3DDBFB8C96CEC2E8F936B5D2F3");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "3EF3AAC24D86A2690459712DB8FEB8239CE63E1E1871C921132D24BA0DB39E8CD1FDB1929D7E20701E8440D99B744DD5381DC49BED151E9FF761373DCA495B2B34EE9572BB2DAB6DC3AE9B97042DAD419472212188AA8AB342136BCE40F8E69676FF1D3DDBFB8C96CEC2E8F936B5D2F3" + "'", str65, "3EF3AAC24D86A2690459712DB8FEB8239CE63E1E1871C921132D24BA0DB39E8CD1FDB1929D7E20701E8440D99B744DD5381DC49BED151E9FF761373DCA495B2B34EE9572BB2DAB6DC3AE9B97042DAD419472212188AA8AB342136BCE40F8E69676FF1D3DDBFB8C96CEC2E8F936B5D2F3");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("A5F13B40138EDA094E8ABB0ED65EB7A68C7285887D7C9330293A37C0140E6AE2759EF1839ADBB0DFAF27BD4B3721A60D", secretKey23);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[91, 87, 43, -14, 122, -23, -127, 125, -25, -102, -93, 5, 36, -103, -62, -34]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[96, -24, -34, -41, -125, -40, -121, -59, 63, 92, -77, -128, -95, -31, 23, 13]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[126, 80, -111, -103, 68, -8, -89, 66, -58, 9, 93, 43, -34, 33, -93, 19]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-58, 94, 24, -62, 69, 69, 103, -37, -37, -41, -91, 75, 14, 7, -116, 107]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[26, -123, -123, 46, -106, -24, -74, -128, 29, 54, 106, 30, -14, 98, 119, -95, 13, -100, -20, 45, 8, 6, 40, -76, 19, 92, 55, -76, -18, 64, 89, 83, 126, 80, -111, -103, 68, -8, -89, 66, -58, 9, 93, 43, -34, 33, -93, 19]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 106, 31, -122, 94, -106, 38, -108, 111, -63, -45, -55, 51, 37, 115, 31, 78, -10, -115, 7, 117, -29, -83, 121, 105, -106, 10, 26, 104, 69, 127, 63, 126, 80, -111, -103, 68, -8, -89, 66, -58, 9, 93, 43, -34, 33, -93, 19]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-94, -30, 95, 9, -11, 31, 125, -92, 103, -11, 64, -78, 59, 31, 73, -78, 78, -51, 109, -100, -79, 97, -115, 46, 82, 102, 74, -99, 57, 73, -32, 10, -126, -42, -105, 45, -73, 79, 79, 59, -99, -86, 115, 36, -47, -18, 26, 67, -52, -30, -60, -93, 100, 86, -98, -49, 3, 62, -4, 94, -94, 120, -122, 117, 84, -15, 88, 107, 79, 86, 74, 100, 20, 78, 121, 91, 93, -50, 74, -10, -119, 85, -100, 64, 86, 26, -26, 29, -81, 69, -107, 35, -128, 115, -104, -22, 126, 80, -111, -103, 68, -8, -89, 66, -58, 9, 93, 43, -34, 33, -93, 19]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[56, -47, -70, 28, -39, 23, -57, 70, 43, 67, -30, -75, -46, -34, -107, -10, -127, 15, -72, 109, 42, 22, -125, -45, -128, 112, -2, -113, 71, 14, 35, -124, 126, 80, -111, -103, 68, -8, -89, 66, -58, 9, 93, 43, -34, 33, -93, 19]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[49, 5, -114, -75, 51, 19, 81, 73, -47, -125, -109, -99, 63, 109, 25, 24, 7, 91, -5, -39, -66, -71, 125, 94, -1, 82, -20, -22, 44, 98, 1, 102, 94, 110, 37, -57, 126, -8, -31, 121, -75, -118, 46, -127, -101, 72, -4, 12, 101, 69, 39, 48, -11, 123, 86, -26, -63, -125, 30, -53, -14, -112, 105, 51, -117, 38, 28, 27, 34, -102, 14, 70, 72, -114, 116, 11, 39, 109, 44, 115, 70, -49, 26, 93, 123, -93, -80, 123, -68, 91, -78, 103, 82, -3, 64, 70, 126, 80, -111, -103, 68, -8, -89, 66, -58, 9, 93, 43, -34, 33, -93, 19]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-92, 111, -109, -65, 79, 2, 43, -49, 35, 70, 107, -2, -49, -89, 87, -72, 9, -17, -119, -14, 68, 117, 120, -108, -4, 37, 52, -69, 45, 32, -14, 27, 69, -54, 73, -114, 54, 5, -11, 94, 61, 22, -61, 42, 54, -127, -61, 41, -21, -15, 116, 12, -99, 85, -70, -2, -105, 26, -106, -46, 76, 123, 58, -115, -33, -45, 82, -112, -118, 5, 98, -28, 111, 106, -23, 89, -47, -123, 54, -55, 26, -73, 46, -71, -5, -49, -21, -127, -57, 115, -88, -11, 4, 22, -2, -65, 126, 80, -111, -103, 68, -8, -89, 66, -58, 9, 93, 43, -34, 33, -93, 19]");
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey31);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D56A0B399567E6971B96A88159ED8F6010D411EF39CCA5641F8116E6EC48FD151C6FF274AB255887ECEAEAEC7B1ADD555959666BBC4117693E9F8800BC0A75A28A3FC0014331D23C4F5E6724DEAC46F8B5AC8013EC7E5B9E5C6417B9111931F7737161FA4EE2E8F8BED1F1907FE0EE85DDD20948D507C37ABFFE100100C3C1411E295E8CFFACB403E856CC829A70616539F1B1EB1FAD4F15260D234991AD9002B29ECC42EF99EC40E1188CECBD94FA5DE63CD6A194B64545DE3075036ED4CAB7F5D574418FF89F27B6C1F4BBC87D88E554958E2FB629AFB6F988D329A2BD5446C5C095DA9621D59E2E093BEF8E4C0C5", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("83DE43452180FF34CF935244AADF80553D540B27021AA2505D7A3EC09E663BB765AD05C59A49BC7E4F025AE45FFC747B4C242AF12423864EEC14FAAF9CCFE468C4950D6188176C172DCE5CB10B026FC7683093E530DAFC15B371CCFA81E2480E4F77996D4A79AD726CFDB7153A092849D9D19A235685757F256F760D0BD3BBF02543BB33B03040B17CA4A50F3BA5D6E4646BE9B50B2A6A046261365C335C1E1ACB9A86D811D427247C048E38FD1E87529930D219302CB0A84B6AB738F94A29C43EB5F3C1F785471BFCB8E86208BD855203FC9A891A7720D53407AA82DC8E64818E58D115849EE726F51A2EB69777F054", secretKey31);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-119, 75, -50, -9, 71, 72, 65, 48, -109, 70, -82, -72, 37, 102, -106, -125]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-37, -80, -69, -62, -9, 103, 107, -13, -70, -59, -71, 8, -125, 29, -29, -111]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[37, 59, 76, -29, 22, -107, 53, 112, -57, 9, -112, -77, 94, -13, 51, -79]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[45, -78, -15, 43, -128, -56, 15, -115, 66, -115, -42, 34, 83, 71, 46, -27]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-66, -47, 80, 8, -88, 108, 57, 76, 77, -63, -113, 62, 36, 116, 91, -25]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-98, -72, 24, 65, -2, 38, -79, -58, 61, 20, -96, -47, -30, -45, 41, 24]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-48, 17, -17, -109, -28, 52, -95, -92, -72, -64, 115, -7, 46, -98, 41, -21, 48, 13, -65, 83, 89, 13, -124, 2, 102, -15, -43, 126, 95, -57, 91, -32, -66, -47, 80, 8, -88, 108, 57, 76, 77, -63, -113, 62, 36, 116, 91, -25]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-82, -2, 37, 6, -29, 52, -103, 14, 82, 124, 6, -79, -12, 68, 36, 39, 106, -82, 77, -125, 6, 24, -48, 93, 30, -13, 14, -101, 58, -37, -56, -20, -66, -47, 80, 8, -88, 108, 57, 76, 77, -63, -113, 62, 36, 116, 91, -25]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[116, -11, 49, -14, -126, 82, -94, -77, 9, -47, -107, 61, 114, 12, -78, -45, -23, 125, -14, -75, -123, 124, -33, -47, 40, -54, -8, -51, 10, 57, -13, 9, -71, 22, -2, 84, 25, -85, -117, 86, -89, 41, 55, -26, 13, -92, 28, -5, -89, 70, -92, 5, -112, -119, -31, -110, -16, -28, -127, -42, 6, 10, 66, -110, -28, -45, 56, -74, -104, -127, -82, 11, 125, 71, -71, 123, -47, -29, 125, 2, -70, -25, -20, 20, 61, -84, 34, 122, 64, 4, 59, 108, -74, -20, 72, 36, -66, -47, 80, 8, -88, 108, 57, 76, 77, -63, -113, 62, 36, 116, 91, -25]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey26);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey47);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey47);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0B3F770D0055D0086E4D5F34677807F643C52681888CF416427DA1BEF08CAF1787327C11DC64B59CF2B3E256003EC1C5DC733E5C890287207AD99467D8686ED5F4F64B8AFC0545EE2C1DCF50C4F4F9FEE0D707DBA4C46C56651B9B2B97612479DE9281D9476441CF2DE866714363BDAED9F5A8E83701A8E0F6B9F3EA7912686D326EBE4F95BB8136F84EF04DB9499A268ECF8C8E1BCAF3F95D8DE36EAB145B0A3DB211EC704215BD747BEBE3650F3A502E0A3FCC48C59869EB6466C1927E84E5A9F4C8CF836DEA5D92E25D34628563E33B6E89C7BDA68B0745F97FA99F971C7A84969C242F20003AB3BC7589946F98B", secretKey47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey47);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[79, -59, 11, -55, 70, 57, -88, -7, -47, -47, 6, 62, 62, 111, -73, 11]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-47, -64, 55, -31, -69, -123, 72, 73, 59, -96, 82, -16, -8, 109, 63, -44]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-42, 6, -49, -96, 91, 54, -93, -1, -36, -56, -87, 68, 14, 28, -109, -13, 69, 24, 94, -115, -101, -67, -66, -118, -11, -70, 11, 58, -102, -38, 48, -98, -76, 0, -124, -85, -103, -69, -124, -79, -3, -107, -33, -11, 13, 14, -76, -41, -5, -27, 66, -24, -55, 124, 69, -31, -110, -117, 66, 97, -77, 3, -56, 115, -94, -69, -18, 74, 11, -87, -86, -17, -124, -38, 77, -1, 18, -93, -39, -82, -91, -36, -75, 52, -75, 41, 103, -83, 116, 19, 108, -111, -42, -48, 43, 18, 79, -59, 11, -55, 70, 57, -88, -7, -47, -47, 6, 62, 62, 111, -73, 11]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[54, 123, -64, -78, -53, 39, -123, -96, 1, -63, -40, -38, 88, -95, 58, -39, -69, 110, -15, -63, 76, 70, 37, -112, -117, 116, 26, 47, 49, -27, 79, 66, 79, -59, 11, -55, 70, 57, -88, -7, -47, -47, 6, 62, 62, 111, -73, 11]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "367BC0B2CB2785A001C1D8DA58A13AD9BB6EF1C14C4625908B741A2F31E54F424FC50BC94639A8F9D1D1063E3E6FB70B" + "'", str11, "367BC0B2CB2785A001C1D8DA58A13AD9BB6EF1C14C4625908B741A2F31E54F424FC50BC94639A8F9D1D1063E3E6FB70B");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "367BC0B2CB2785A001C1D8DA58A13AD9BB6EF1C14C4625908B741A2F31E54F424FC50BC94639A8F9D1D1063E3E6FB70B" + "'", str12, "367BC0B2CB2785A001C1D8DA58A13AD9BB6EF1C14C4625908B741A2F31E54F424FC50BC94639A8F9D1D1063E3E6FB70B");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "367BC0B2CB2785A001C1D8DA58A13AD9BB6EF1C14C4625908B741A2F31E54F424FC50BC94639A8F9D1D1063E3E6FB70B" + "'", str13, "367BC0B2CB2785A001C1D8DA58A13AD9BB6EF1C14C4625908B741A2F31E54F424FC50BC94639A8F9D1D1063E3E6FB70B");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "367BC0B2CB2785A001C1D8DA58A13AD9BB6EF1C14C4625908B741A2F31E54F424FC50BC94639A8F9D1D1063E3E6FB70B" + "'", str14, "367BC0B2CB2785A001C1D8DA58A13AD9BB6EF1C14C4625908B741A2F31E54F424FC50BC94639A8F9D1D1063E3E6FB70B");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-22, 74, 51, 45, 60, -120, 28, -10, -37, 65, 106, 37, -17, -122, -100, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-36, 83, 105, 125, 43, -51, 59, 100, -107, -128, -127, 71, 33, -110, 117, -54]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-51, -48, 70, 19, -55, -28, 53, -68, -2, -40, 50, 120, 44, -33, -117, -29]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-96, 108, 67, -123, -98, -1, 92, 85, -24, 55, 29, 52, 13, -49, -20, -117]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[30, 89, -86, 41, 109, -105, 48, -94, -78, 107, 30, 11, 45, -112, 35, -8]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[44, 122, 45, -69, 93, -53, 92, 56, -23, 77, 75, -68, 36, -29, -123, 36, -55, 124, -22, 2, -62, -52, -79, 91, 75, -28, -117, 34, -18, 6, -42, -32, -96, 108, 67, -123, -98, -1, 92, 85, -24, 55, 29, 52, 13, -49, -20, -117]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3607647E50ECCCABE8DE03DFAC3EC1AA", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("A21EC590EE50DD2F2D974BA9D65033DD", secretKey19);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey19);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37FE77D6457FE9776E7072C9EEFF76D9E5784F46BFE7846C7457BE09C9CD878F9EA87921A12A994CD07111B42E9DB144F35659F8E7C1FD8E5CF64A4611D680CD47C02A438EAA71CB5776249BDE0286CA52542E5948644117BAD02D284F6098E28C696774D0A66454B841253429E19CE", secretKey19);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("9E4C9CAF9C69C31336F9B028A9643F3D5F595867652E612935B9BE63209296D1F32CBD16FA8FA358FE3E6A20A77EAF6B", secretKey19);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[91, 119, 2, -92, 120, 31, 117, 43, -52, 35, 13, -52, -36, -34, 109, -115]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[19, -117, 20, 63, 25, -54, -16, 122, -100, -87, -125, -115, 1, -45, -13, -58]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[117, -78, 125, -105, -127, -41, 26, -124, -126, -8, -122, 43, -52, -102, -109, -107]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122, -28, -10, -1, -2, 16, 88, 104, 46, -9, 122, 16, 41, -83, -80, -56, -6, -33, 9, 73, -53, -15, -118, -93, -17, 36, 61, 109, -38, -114, 8, -33, -16, 33, 49, -19, 27, 104, -76, -126, 10, -83, -59, 52, 84, 80, -59, 38]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[5, -25, -34, -63, -42, -13, 107, 104, 36, 5, 43, 40, -115, 121, 90, 10, -69, 28, -109, 110, -48, 107, -41, -68, -35, -120, -33, -54, -122, -98, 3, 93, -6, 95, -104, 125, -121, 104, -63, 87, -2, 32, -83, 8, -113, -71, -60, -79, -82, 79, 57, -31, 123, 111, -78, -92, -13, 113, 93, 89, 59, -66, -10, 1, 59, -16, 19, -95, 117, 91, -81, 46, 29, -56, -71, -12, -92, -23, -23, -72, -80, -68, 89, -23, -87, -114, 5, 30, -106, -15, -109, -83, -54, -111, 112, 101, -16, 33, 49, -19, 27, 104, -76, -126, 10, -83, -59, 52, 84, 80, -59, 38]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-120, -14, -100, 57, -2, 108, 112, 49, 50, -62, 25, 58, -2, 64, 113, -70, -4, -68, 102, 8, 111, -118, 85, 35, -101, 16, -49, 100, 111, -55, -46, 4, 107, 116, 74, 17, 3, 54, 57, 39, 71, -98, -104, 50, -18, 10, 121, 100, -17, 117, 10, 69, -68, -1, 67, -25, -63, 27, -44, 54, -25, -98, -40, 21, 39, 11, -70, -95, 110, -19, -81, -47, -52, -85, 110, 121, 114, 34, 63, 24, -38, -10, 126, 96, -40, 41, 37, 70, -26, 18, -83, -102, 24, -105, -23, -68, -16, 33, 49, -19, 27, 104, -76, -126, 10, -83, -59, 52, 84, 80, -59, 38]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-112, 103, 95, -36, 11, 24, 8, -58, -115, -29, 7, -60, 21, -125, 39, -59, -66, -71, 87, 81, -108, 0, 24, -114, -82, -119, -126, -21, -95, 68, -101, -7, -16, 33, 49, -19, 27, 104, -76, -126, 10, -83, -59, 52, 84, 80, -59, 38]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[98, 27, 87, -120, 71, -10, -113, -35, 126, 37, -67, 125, 25, -67, -15, 4, 61, 124, -80, -128, 126, -26, 13, -39, 96, 60, -84, 50, -15, -4, -60, 97, -16, 33, 49, -19, 27, 104, -76, -126, 10, -83, -59, 52, 84, 80, -59, 38]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[102, -89, 82, -80, 103, 0, 120, -109, -97, 87, -57, 32, -11, 67, 15, 85, -51, 69, 100, -14, 125, 93, 59, -58, -14, -41, 69, -76, -63, -11, 92, -66, 61, 78, -91, -108, -127, -61, 58, -29, -110, -110, 37, -1, 52, -34, -69, 100, 73, -89, 111, -16, 111, 57, 27, -111, -121, -7, 11, -67, -80, 127, -38, -22, -75, -83, -37, 82, 53, -78, 64, 50, 3, 7, 27, 62, 101, -89, 78, -52, -88, -109, 117, 89, -116, -47, -107, 5, -116, 108, 85, -38, -94, 24, 44, -113, -16, 33, 49, -19, 27, 104, -76, -126, 10, -83, -59, 52, 84, 80, -59, 38]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "66A752B0670078939F57C720F5430F55CD4564F27D5D3BC6F2D745B4C1F55CBE3D4EA59481C33AE3929225FF34DEBB6449A76FF06F391B9187F90BBDB07FDAEAB5ADDB5235B2403203071B3E65A74ECCA89375598CD195058C6C55DAA2182C8FF02131ED1B68B4820AADC5345450C526" + "'", str29, "66A752B0670078939F57C720F5430F55CD4564F27D5D3BC6F2D745B4C1F55CBE3D4EA59481C33AE3929225FF34DEBB6449A76FF06F391B9187F90BBDB07FDAEAB5ADDB5235B2403203071B3E65A74ECCA89375598CD195058C6C55DAA2182C8FF02131ED1B68B4820AADC5345450C526");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "66A752B0670078939F57C720F5430F55CD4564F27D5D3BC6F2D745B4C1F55CBE3D4EA59481C33AE3929225FF34DEBB6449A76FF06F391B9187F90BBDB07FDAEAB5ADDB5235B2403203071B3E65A74ECCA89375598CD195058C6C55DAA2182C8FF02131ED1B68B4820AADC5345450C526" + "'", str30, "66A752B0670078939F57C720F5430F55CD4564F27D5D3BC6F2D745B4C1F55CBE3D4EA59481C33AE3929225FF34DEBB6449A76FF06F391B9187F90BBDB07FDAEAB5ADDB5235B2403203071B3E65A74ECCA89375598CD195058C6C55DAA2182C8FF02131ED1B68B4820AADC5345450C526");
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("6000978D729A5EAF02789174FCEF78DC19A6A5353FA2EE08001847BF93F672C57842A660B60BA3E3BAFC4CA493DB93BD616BA839F8FC6BCE8F25A5CFF9986984A5A08FB7FA9398912FBF66BA83D5698C9B89FE34ECEA63E7E13593D7BE10CB607921E0CEEC09BCE538EB3873308F1B39", secretKey28);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[106, 9, 71, 110, 77, 14, -1, 62, 52, 63, -42, -65, -32, -103, -128, -116]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-5, 37, 22, 33, 58, 64, 95, 112, 110, -123, -65, 56, -1, 14, 111, -16]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[66, 109, 98, -34, -117, 90, 63, -13, 30, -115, 79, -25, 85, 50, 27, 13]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-42, 119, 104, -38, 23, -7, 95, 86, 12, 44, -8, -85, 49, 45, -78, -49]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-105, -107, 53, -55, 76, -115, 123, -17, -66, -102, 70, -87, 81, 86, 57, 31]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[43, -118, 64, 47, 75, -113, 60, -19, -43, -67, -64, 59, -116, 110, 21, -42]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[43, -118, 64, 47, 75, -113, 60, -19, -43, -67, -64, 59, -116, 110, 21, -42]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-27, 36, 26, -120, 85, -38, -20, 101, -123, -124, -85, -51, -25, -103, -5, -124, 51, 57, -66, -77, -112, -63, -44, -128, -92, 93, -28, 76, 51, 119, -120, -70, -105, -107, 53, -55, 76, -115, 123, -17, -66, -102, 70, -87, 81, 86, 57, 31]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AE305F9327E68C996868180E6D15DB9463C296A94433ADD14844ECB1930014038767E05BE6BEA5F4B73F6239268B865F9A2D4A38FD80E1AC4BAD0D2C838E3E194D32B4CC22AEAA4731A8FA76BE3DFD22E64600BCFC82F8160D57080763305B73F174C2F453080E30385075A41F5DA5DC196B4C2F18AF33EF7B8AC0707B8EBE49829348E72E4AEAC7FF1EBEE3114FF8F48C6645E812C708D8CF8EFEFCF376B72C9CD1EF2A86983892F87727BF0328B8003901C0FE730B81FF80DB17B4F11475EC182C45CE301F5BD41C1165DB471531F8164718769D0801AB36E1538D0C554E31979535C94C8D7BEFBE9A46A95156391F" + "'", str36, "AE305F9327E68C996868180E6D15DB9463C296A94433ADD14844ECB1930014038767E05BE6BEA5F4B73F6239268B865F9A2D4A38FD80E1AC4BAD0D2C838E3E194D32B4CC22AEAA4731A8FA76BE3DFD22E64600BCFC82F8160D57080763305B73F174C2F453080E30385075A41F5DA5DC196B4C2F18AF33EF7B8AC0707B8EBE49829348E72E4AEAC7FF1EBEE3114FF8F48C6645E812C708D8CF8EFEFCF376B72C9CD1EF2A86983892F87727BF0328B8003901C0FE730B81FF80DB17B4F11475EC182C45CE301F5BD41C1165DB471531F8164718769D0801AB36E1538D0C554E31979535C94C8D7BEFBE9A46A95156391F");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AE305F9327E68C996868180E6D15DB9463C296A94433ADD14844ECB1930014038767E05BE6BEA5F4B73F6239268B865F9A2D4A38FD80E1AC4BAD0D2C838E3E194D32B4CC22AEAA4731A8FA76BE3DFD22E64600BCFC82F8160D57080763305B73F174C2F453080E30385075A41F5DA5DC196B4C2F18AF33EF7B8AC0707B8EBE49829348E72E4AEAC7FF1EBEE3114FF8F48C6645E812C708D8CF8EFEFCF376B72C9CD1EF2A86983892F87727BF0328B8003901C0FE730B81FF80DB17B4F11475EC182C45CE301F5BD41C1165DB471531F8164718769D0801AB36E1538D0C554E31979535C94C8D7BEFBE9A46A95156391F" + "'", str37, "AE305F9327E68C996868180E6D15DB9463C296A94433ADD14844ECB1930014038767E05BE6BEA5F4B73F6239268B865F9A2D4A38FD80E1AC4BAD0D2C838E3E194D32B4CC22AEAA4731A8FA76BE3DFD22E64600BCFC82F8160D57080763305B73F174C2F453080E30385075A41F5DA5DC196B4C2F18AF33EF7B8AC0707B8EBE49829348E72E4AEAC7FF1EBEE3114FF8F48C6645E812C708D8CF8EFEFCF376B72C9CD1EF2A86983892F87727BF0328B8003901C0FE730B81FF80DB17B4F11475EC182C45CE301F5BD41C1165DB471531F8164718769D0801AB36E1538D0C554E31979535C94C8D7BEFBE9A46A95156391F");
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey30);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey30);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("BC852F10573BFB3EA459BBCF4C89C3DBD413E1B63A46E3F619320989BEF3CCCC01C9AE48D9635E142E93469B2822DF9576950499ABB9FF7790A445388419C22FE7F5ED261F10A6CE93CE6FCCA72D4E911FCAFD033250E3A80D90E2D68C75C4DD7A44F24529D06692ECE32AD0DAC7E22B", secretKey30);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey30);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("02860AF3B4E4389AC1B4AD622C7E45DC3796BD74D33C5CF7AF566A4E7C4B57E767E2549D04446773F56951430A0F97F5A4A55F4F2EF82326C5B82CC7BD81F5F85F21D734507C9A6E2C811473FF78E82F63A082CFF7354A59E1E64AC42620307BD4080D024FBB602A6D673EA9833A9BD8", secretKey30);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-71, 90, -107, 14, 73, -9, 0, -54, -23, 105, -18, -67, 17, -33, 58, -26]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[53, -110, 91, 53, 125, 113, 39, -52, 2, -56, -2, 0, 2, 83, -109, 92]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[60, 25, -95, -127, 78, -3, -96, -58, -90, -55, 68, 87, 34, 94, 125, 122]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[66, 111, 78, 77, -44, -71, 11, -67, -103, -65, 68, -96, -57, -35, -12, -45]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-124, -94, 90, -107, -37, 46, 1, 96, -122, -121, 111, 48, -47, -7, -80, 65, 71, 43, -98, 41, 62, 63, 88, -78, -112, -70, 21, -76, 28, -72, -101, 107, 60, 25, -95, -127, 78, -3, -96, -58, -90, -55, 68, 87, 34, 94, 125, 122]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 89, -51, -59, 28, 115, 48, 55, -41, 63, -87, 63, 101, 106, 8, -62, -75, 124, -23, 106, -43, -21, -113, -117, -122, 83, 2, -68, 96, -110, 69, 50, 60, 25, -95, -127, 78, -3, -96, -58, -90, -55, 68, 87, 34, 94, 125, 122]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-86, -1, 72, -17, -59, -83, -13, -80, 126, 62, 81, 48, -22, 111, -47, 120, -1, -126, 59, 90, 83, -109, 44, 67, 76, -54, -78, -108, 39, 28, 45, 125, -119, 97, -56, 55, 86, 83, -121, 100, 45, 103, 70, 36, -94, 22, 77, -114, 28, -82, 104, 28, -101, 19, -54, 15, 53, 15, 52, 47, 5, -109, -29, 39, 83, 29, -75, 33, 38, -71, -47, 63, -89, 27, 87, -17, 21, -116, -20, -12, 38, -4, 19, 36, 29, -64, -62, 61, -127, -25, -93, -66, 32, 31, -18, 68, 60, 25, -95, -127, 78, -3, -96, -58, -90, -55, 68, 87, 34, 94, 125, 122]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-86, -1, 72, -17, -59, -83, -13, -80, 126, 62, 81, 48, -22, 111, -47, 120, -1, -126, 59, 90, 83, -109, 44, 67, 76, -54, -78, -108, 39, 28, 45, 125, -119, 97, -56, 55, 86, 83, -121, 100, 45, 103, 70, 36, -94, 22, 77, -114, 28, -82, 104, 28, -101, 19, -54, 15, 53, 15, 52, 47, 5, -109, -29, 39, 83, 29, -75, 33, 38, -71, -47, 63, -89, 27, 87, -17, 21, -116, -20, -12, 38, -4, 19, 36, 29, -64, -62, 61, -127, -25, -93, -66, 32, 31, -18, 68, 60, 25, -95, -127, 78, -3, -96, -58, -90, -55, 68, 87, 34, 94, 125, 122]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-103, -21, 124, 37, -6, 35, 64, 10, 87, -93, -90, -94, 4, -50, -107, 36, 60, -81, -121, -118, -26, -69, 44, -47, 81, 113, -99, -18, 88, 27, -7, 104, -45, 50, -42, 35, -105, -95, 87, -80, -13, -128, 72, -76, -24, -7, -108, 62, 23, 20, -75, -104, -107, 98, 42, -115, -75, -70, -36, 121, 45, -107, -2, 46, 37, -53, -53, -94, -85, -103, 124, -86, -122, 45, 84, 117, 31, 103, 44, -52, 34, -5, -50, 124, -87, -127, -41, -89, -97, -50, 30, -122, -10, -91, 4, 105, 60, 25, -95, -127, 78, -3, -96, -58, -90, -55, 68, 87, 34, 94, 125, 122]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[16, 78, 101, 49, 47, -28, 18, 84, -70, -125, 87, 77, 112, 81, -123, 114, 87, -19, -60, -111, 81, -127, -53, -47, -92, 91, -28, -1, 19, -92, -11, -50, 60, 25, -95, -127, 78, -3, -96, -58, -90, -55, 68, 87, 34, 94, 125, 122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "BD0D8373970B7528C10F87E2CB88EAB549A704D15F8952E16A52A9875E8899DECEC15F51629F03CF85BCED5C9E3BE3B95AD31C1AD12BA0F10A3FB13822A062E58B0F3FE1FF6CAAE1484E0D42C092118054366EDDF70C79D68DD25FDA501D6BA93E6ED1C7A5843055E9D7F410A4EC5710ED3E5F9CB382473F29BFE119ABFBB89A4BF5800FEF30AA5F80DA9ADDB700D1983D247C29BF7B9108341CB82DF7EDF765FA11909BB574EB9722703C73B9BDFCC8560A9ED220667ACAB0F4A9575C41BFD1728FBED94721F85E632DE71202D9A95BAA27B0075663ED0E3C8B4E24EA3E0EFB3C19A1814EFDA0C6A6C94457225E7D7A" + "'", str44, "BD0D8373970B7528C10F87E2CB88EAB549A704D15F8952E16A52A9875E8899DECEC15F51629F03CF85BCED5C9E3BE3B95AD31C1AD12BA0F10A3FB13822A062E58B0F3FE1FF6CAAE1484E0D42C092118054366EDDF70C79D68DD25FDA501D6BA93E6ED1C7A5843055E9D7F410A4EC5710ED3E5F9CB382473F29BFE119ABFBB89A4BF5800FEF30AA5F80DA9ADDB700D1983D247C29BF7B9108341CB82DF7EDF765FA11909BB574EB9722703C73B9BDFCC8560A9ED220667ACAB0F4A9575C41BFD1728FBED94721F85E632DE71202D9A95BAA27B0075663ED0E3C8B4E24EA3E0EFB3C19A1814EFDA0C6A6C94457225E7D7A");
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey16);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey16);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey16);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("989DB5B3759877A2D8435B4F91FC7BFE71A04ACDB394ECA431CF2B370D77F100AF1AA3310C3DD7A47FD51A8C1B80B926", secretKey16);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey16);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[118, 76, 26, -4, 56, -20, 71, -30, 52, -13, 39, 22, -106, -32, 116, 2]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-7, 62, -106, 77, 75, 124, -45, -42, -33, -48, -84, 37, 33, 125, 40, -12]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[88, -63, 81, -88, -103, -2, 44, -75, 118, 17, -68, 4, -23, 126, -86, -71]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "58C151A899FE2CB57611BC04E97EAAB9" + "'", str7, "58C151A899FE2CB57611BC04E97EAAB9");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-25, -72, -5, -37, -26, -3, -55, -7, 56, -109, 88, -100, 123, -72, -120, 58]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-68, 36, 91, -41, 24, -113, 30, -22, -68, 108, 30, -59, 76, 0, 50, 97]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[41, 16, -91, 28, 118, 110, -68, 12, 19, -35, 32, -97, 22, 121, -108, -103]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-25, -72, -5, -37, -26, -3, -55, -7, 56, -109, 88, -100, 123, -72, -120, 58]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[107, -128, 118, 109, -28, 32, -111, 33, -78, 118, -2, 93, -106, -89, 66, -61, -106, 5, 32, 126, -30, -68, 86, 10, -98, 36, 44, 2, 12, -23, 9, -74, -7, -19, 42, -94, -56, 17, -120, -117, -97, -92, -104, -2, -26, 47, 62, 22, -111, -91, -96, -107, -111, 31, -26, 5, 2, 11, 101, 104, 8, -63, 51, -117, -32, 26, 99, -45, -122, -32, 87, -57, -118, 48, 33, -108, -10, 48, -22, 110, 127, 3, 51, 92, 2, -88, -58, 32, -28, 18, -34, 102, 123, 38, 91, 58, -25, -72, -5, -37, -26, -3, -55, -7, 56, -109, 88, -100, 123, -72, -120, 58]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-48, 72, -2, -43, 16, 30, 116, 75, -17, 65, 119, -119, -89, 75, -46, 28, 68, 105, -81, -49, 82, -52, -67, -111, -54, -74, 30, -2, -62, -83, -33, -119, -25, -72, -5, -37, -26, -3, -55, -7, 56, -109, 88, -100, 123, -72, -120, 58]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 60, -25, 21, 74, 123, -7, 19, -117, 37, 85, -71, -53, -55, -84, 62, -54, -111, -53, -55, -77, -10, 61, 124, -98, 16, -56, -10, -40, -40, 113, 72, -117, 80, -71, -51, -77, -25, 106, 67, 28, -110, -79, 2, 38, -64, -18, 77, 42, 49, -79, -38, 34, 4, -101, -51, -113, -96, 117, 121, 51, -68, 49, 46, 69, 46, 67, 10, 96, 59, -89, -22, -37, 11, -42, -12, 88, -30, -53, -60, 44, -66, -117, 28, 114, -9, -79, 117, 48, 118, 113, 13, -107, -94, 12, -14, -25, -72, -5, -37, -26, -3, -55, -7, 56, -109, 88, -100, 123, -72, -120, 58]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[58, 12, 85, -111, 29, -50, 82, -31, -22, 80, 120, -20, -124, -127, 54, -33, 123, 109, 55, -105, 44, 21, 25, 111, 65, -87, -107, 65, 4, 58, 36, 98, -25, -72, -5, -37, -26, -3, -55, -7, 56, -109, 88, -100, 123, -72, -120, 58]");
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey28);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey28);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey28);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("F216E19500A2E163BFDB4D468C3AC4C2D82FC555FBD45BC1B385D6A133775C1DE5A763C958D76CA659E0E38F63F9A22B", secretKey28);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("9B81C6E367A0128616E38549659C20803D6F05C62470E98C6ECE221E4A1BB20A2B3C5761AF981D74A9ABC4A1773C7188", secretKey28);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey28);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("EACA603F6C3702AFF15917978DE510B99ECDD314A868720C166EEE2E28FF0212DDDC91DC8215D49CD6F698CC14FA8FB13DC3D8B7C017EDE31594E62E4584D8306C2F50F992C3C052E995196F8857F28A626B40C0078DA5AD3207258C24C458EC51768B970448F37E6FE4E3F7796DB4C9", secretKey28);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("DA0F153DB80C39834CF154116874F1A29DAD0CF64B641D4921129D8D561901345F32D410EAEF74C837D829550E412CDDCDE8110F65D620E6A7CAB891FF5E67A1223DC28C5E1A9DDF6F14DFAAA1A8D95FFF9344CAEDD36DAA5F6966E6B5C29CC465F05E6DAFE231A5FC5A6D8C003D9C0A", secretKey28);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("8451B9D34F7E48A89DA7014769E365CA3050866EB101F8A4FED4849DA31971198C23EE41C77C1BEEFC26A5894884DCAC69D88CB556762B652C06973BC4531514BD57F3C8FA2E69FAC4E7EC6428CDD442477D63874E0A6A6E09EA6BAEF45D044D29881D9C10AFB66BF6BA54D99C854DDA", secretKey28);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, 3, -127, -11, 42, 100, 24, -95, -8, -63, -54, 90, 70, 42, -21, 69]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[95, 21, 39, 107, -43, -23, -106, 14, -113, 107, -64, -2, 28, 90, 65, 109]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-121, 8, 80, -122, 9, -94, 108, -114, 65, 58, -71, 8, 84, 118, -52, -44]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-36, -41, 97, 3, 104, -57, 120, -35, -45, -99, -84, -87, 35, 15, 52, 93]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-35, -71, -49, -82, -6, -20, -23, -54, -11, -27, 34, 100, -81, -82, 28, -50, 107, -14, 36, 37, -23, 8, 121, -111, -45, 44, 59, 124, -99, 78, 21, 82, -121, 8, 80, -122, 9, -94, 108, -114, 65, 58, -71, 8, 84, 118, -52, -44]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[111, -65, -80, -67, -114, 18, -31, 91, 126, 12, -48, -40, -40, 68, -67, -69, -79, 90, 120, 47, 91, -65, 125, 122, 120, 97, -82, 42, 73, 92, -97, -70, -121, 8, 80, -122, 9, -94, 108, -114, 65, 58, -71, 8, 84, 118, -52, -44]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-45, -44, 62, -11, 124, -50, 24, 35, 53, -90, 99, 21, 92, 72, -12, 40, 68, -85, -1, 6, 119, 76, -118, -68, -119, -21, -53, -38, -22, -121, 105, -71, 67, 20, -109, 117, -57, -60, 82, -42, 37, -65, 91, -44, 96, 83, -51, -14, 98, 93, 85, -90, 81, -26, 76, 91, -105, 75, -116, 113, -102, -46, 46, 124, -54, 71, 59, 100, 77, -53, -98, 106, 127, -71, -94, -91, -17, -127, 68, 96, -52, -117, 11, -20, -43, -101, 80, 66, 53, -19, -66, 1, -41, -5, -50, -26, -121, 8, 80, -122, 9, -94, 108, -114, 65, 58, -71, 8, 84, 118, -52, -44]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[26, 39, -31, -30, -115, 79, -62, 91, 117, -54, -35, -69, 101, -5, 73, 103, 74, -20, -12, -19, -45, 90, 124, -66, -45, 78, 114, -120, 107, 37, 20, -88, -121, 8, 80, -122, 9, -94, 108, -114, 65, 58, -71, 8, 84, 118, -52, -44]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-118, -102, -97, -108, 124, -81, 35, 13, 66, -82, -124, 107, 36, -50, 90, -8, 107, 75, -78, -118, -112, 81, 10, -104, 107, -85, 24, 60, 91, -69, 12, 8, 2, -85, -38, -82, 30, -83, -91, 64, -88, -73, 23, 118, 47, 35, -112, -32, 66, -26, 29, -121, -31, -64, -102, -128, 51, 99, -9, -124, 24, -109, -44, -78, 16, -118, -124, 101, -57, 108, -14, 93, 32, 85, -106, 122, -20, 58, 103, 53, 35, 64, -99, 72, 25, -3, 20, 109, 85, -2, 37, -45, 70, -82, -60, 15, -121, 8, 80, -122, 9, -94, 108, -114, 65, 58, -71, 8, 84, 118, -52, -44]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-118, 66, -99, 36, 87, 6, -75, 63, -85, -81, -14, 20, 17, -27, -126, -39, -124, -76, 102, 121, 56, 54, -94, 40, 66, 13, -30, 122, 40, -60, -44, -7, 22, 125, 104, -18, -19, 34, 117, 25, -70, 33, 50, 68, 56, 126, -105, 10, -6, -116, 124, 77, 82, 122, -44, 25, 57, 13, 107, 14, 83, -107, -60, -96, 21, 62, 119, 19, 28, 32, 116, -98, -102, -75, -94, 116, -37, 97, 59, 37, -5, 44, 34, -94, -44, -25, 39, 90, 83, 34, 72, 28, 31, 24, 89, -108, -121, 8, 80, -122, 9, -94, 108, -114, 65, 58, -71, 8, 84, 118, -52, -44]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-108, 57, 52, 81, 72, 123, 8, -80, -33, -37, -27, 75, -43, 122, -102, 60, -5, -55, 121, 59, 93, 35, 42, -36, 56, 1, -106, 52, -66, -36, 85, 95, -75, 65, -72, 43, -25, -36, 56, 75, 48, 58, 4, 106, 60, 55, 25, 41, 60, -90, 24, -21, 87, 15, 45, -73, -12, 124, 90, 46, -65, 88, -77, 72, 64, -15, -100, 85, 109, 113, -103, 67, -57, -22, 26, 86, 1, -18, 118, 114, 64, 79, -9, -4, 123, 83, -59, -32, 18, 43, 97, 71, -83, 102, 53, -122, -121, 8, 80, -122, 9, -94, 108, -114, 65, 58, -71, 8, 84, 118, -52, -44]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-121, 8, 80, -122, 9, -94, 108, -114, 65, 58, -71, 8, 84, 118, -52, -44]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey5);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey40);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8F3E57224E55B543E47520B4C6623436D9C5BD0F28897D4CD2E6A1F4CD13D3333455E5233CDF70870BBC1E19C9C927ED43E983DA26206794C0D4844964813D8EE6C470E93789C1AE864B85D5E6C8EF7435352DA89B68342B5AE597960CF1A19769D9D1094A18106C90A5C365D494767", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("B128023561FF10EFD9335C46277DEA7FECD89993E2B6572E80F4DF46957DF5A2A0364D0382B6263D705F5B354905D89B108991C98F7A0D51258BBFCF280694B3515459EABBF1895D46B0709A6ACB3E5AC9993430502917E03F6A72F01BDC7982E27A9D8581FB0FD0F82FF7ACF0574A64", secretKey40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey40);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-49, -2, 8, -59, -85, -120, -8, -116, -20, 109, -27, 86, 101, -12, -56, -92]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-80, 67, -123, -10, -34, -37, 66, 114, 96, 26, -107, 78, -101, 116, 19, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-80, 67, -123, -10, -34, -37, 66, 114, 96, 26, -107, 78, -101, 116, 19, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[51, 26, 97, 48, -6, 54, 100, -43, -92, -25, -116, -23, -38, 62, -10, -57]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[48, 25, 112, -84, 37, -112, -49, -100, 19, -95, -21, -37, 71, -91, 89, -53, -15, -59, -47, -71, 17, -82, 123, 127, -23, -89, 114, 21, 65, 47, -126, -4, 83, -108, 15, 24, -69, -53, 44, 78, -57, -118, 41, -44, -126, 30, 82, 34, -128, 26, 56, 61, -117, -117, 117, -5, -16, 47, -57, 72, 89, -44, 115, 4, -24, -12, 81, -13, 32, 10, 5, -87, -76, -16, -51, -45, 96, 127, -12, 92, 37, -62, -3, -9, 14, 118, 31, -118, 30, -51, 24, 79, 66, -39, 42, 38, -49, -2, 8, -59, -85, -120, -8, -116, -20, 109, -27, 86, 101, -12, -56, -92]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[22, 42, 115, -36, 70, 12, 106, 115, 59, 11, -96, 15, 39, -59, 116, -61]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, -113, 108, -102, -108, -95, 50, 101, -119, -34, -66, -94, 13, -125, 92, 85]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[96, -36, 1, 121, -10, -16, 30, 27, -60, 110, 90, -10, 116, 8, -2, 98]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-74, -124, -48, 36, 83, 20, 117, -97, -6, -21, 5, 126, -84, 117, 68, -63]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[31, 73, -100, 24, -47, -110, -100, -16, 91, 4, 46, -86, 125, -75, 89, -89]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[55, 122, 61, 12, -34, 86, -56, -88, -37, -38, 37, 6, 58, 42, 92, -44]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[55, 122, 61, 12, -34, 86, -56, -88, -37, -38, 37, 6, 58, 42, 92, -44]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-128, -98, -1, -107, 89, -109, -12, -23, 22, -46, -19, -116, 24, -88, 73, 66, 88, 86, 111, 99, 93, 61, -90, 25, 7, -38, -86, -76, 1, 37, 61, 38, 31, 73, -100, 24, -47, -110, -100, -16, 91, 4, 46, -86, 125, -75, 89, -89]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray48);
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey28);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("057E49A08C2BD83DFDF50BA39F6EA4CCDD832C7BD47526658F32D8F833666C527FD4FC9238D99CACBCE4A1E3C58D22E935D8069993172A3F5FAB16DF20E79FC534EBD8E377CB81AB95435614A543800E292D0BF763A5F8805C5BCE03FF1A5EF0FC39E3643BB2177BBDE5A33900520AA18CC00623398BD7306F4F09807FC2D4187D33D95F0C588EDFE1C49AE73E6B79046675F55E29CF116C10D8F34BE81A3353DFE794DBC676CA2C55FD966CCCEFFEE8775D815491A13485569D80712356A057115B4C8AFC71939B1AF830ABE9C6C413BA0015967583A03DA8F2167CB83DF3298A054CA1A005025B4C3E26D173CAF28F", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("9174FB5CAC2179929784B277CC2B26B770D3C219D83D6356A1A80FA81DCB5D69C3C764505891E8E12F5827C4946C69493B12212A49334B330DD999ED699AB33F8F4D02D92CED27329C7066A6C637EE43049279660B014650E86F60057D0AE68463BEE58BC826449BBC5EB6B490F6F5EE", secretKey28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0101FF" + "'", str5, "0101FF");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0101FF" + "'", str6, "0101FF");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0101FF" + "'", str7, "0101FF");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[126, -80, -114, -30, 86, -126, 44, 11, 0, -105, 8, -120, 10, 18, 56, 74]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-111, 109, -86, -15, 115, -82, -108, 7, -97, -92, 86, -2, -12, 5, 123, -52]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-111, 109, -86, -15, 115, -82, -108, 7, -97, -92, 86, -2, -12, 5, 123, -52]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[94, 125, 7, 96, -99, -128, -70, -85, 108, -32, -71, 90, 30, -91, 23, -87]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[46, 79, 33, 125, -15, -26, -90, 98, -11, -16, 94, 86, 19, 16, 26, 23]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-102, 122, -104, 107, 125, 102, -99, 85, -5, 22, 77, -29, 46, -23, -76, -25, 79, 52, -69, 74, 77, 6, 122, -18, -63, -34, 47, 56, -100, 20, -20, 18, -1, -23, 92, 65, 17, -20, -74, 12, 99, -94, -119, 41, 64, -56, 24, 8, -74, -118, -28, 64, -116, 56, -89, 113, 28, 108, 60, -37, 48, -115, -44, 22, 91, -67, -96, -13, -1, -30, 82, -42, -10, 126, -38, -51, 34, 2, -113, 0, -90, -7, 94, -125, 96, 40, -120, -126, 41, 126, -64, -14, 25, -38, -64, -84, 94, 125, 7, 96, -99, -128, -70, -85, 108, -32, -71, 90, 30, -91, 23, -87]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-102, 67, -91, 122, 75, 65, -115, -114, 121, 97, 82, 7, -79, -93, 5, -17, -30, 97, 118, -29, 22, -65, -44, -83, 17, -36, -71, 91, -66, 34, -39, -41, 94, 125, 7, 96, -99, -128, -70, -85, 108, -32, -71, 90, 30, -91, 23, -87]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0325B09D413866A7B5E5C265821B2E531360BD73E2C998210FAABB6E4563F234988B3B0DAAEE7CCD84004AB5E804FE15", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("0124E4B4B204E59AE9F131DC5ADABF5C2E4F238E613A218D1818DA6CDC4EA74830E0E283794FEA3D86565E164AC1520C", secretKey23);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[49, -66, -5, -84, -1, -13, -11, -50, -18, 88, -84, -64, -17, -16, 10, -101]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[98, 101, -66, -26, -38, -121, -42, -94, 1, -32, 16, -128, 110, -49, -95, 106]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-125, 97, 30, -104, -57, 110, -91, 92, 94, 57, -97, 78, -5, -83, -45, 32]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[91, 116, 102, -108, 32, -110, -91, -54, 69, 99, -97, -18, -81, -27, -71, 70]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[91, 112, -70, -77, -7, 93, 120, 82, -2, 43, 117, 1, -115, -27, -121, 8, -122, -125, -111, -62, 102, 124, 89, -121, 38, -26, 32, 101, 97, 73, -20, -102, -125, 97, 30, -104, -57, 110, -91, 92, 94, 57, -97, 78, -5, -83, -45, 32]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-46, -107, -54, -105, -74, -59, 81, 56, -4, 62, -72, 10, -48, 75, 73, 57, -79, -50, -8, 1, 89, 12, 97, 33, -66, 91, 118, 61, 95, -64, -31, 68, -125, 97, 30, -104, -57, 110, -91, 92, 94, 57, -97, 78, -5, -83, -45, 32]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-93, 3, -112, -55, 79, 23, -99, -87, -72, 59, 78, 95, 50, 38, 17, 96, 12, -60, -25, 77, 54, -89, 77, -20, -29, -88, -122, -39, 111, -92, 107, 115, 119, 101, -11, 50, -124, -93, -83, -124, 27, -32, -105, 115, 29, 93, 61, -24, -79, -128, -71, -73, 7, -61, 79, 33, -9, -47, -29, 70, 15, -29, -17, 73, -43, 30, 87, 76, 95, -10, -85, -78, 6, 31, -28, 123, -72, 91, -34, 86, -44, -120, 121, 103, 65, 91, 43, 68, -44, 16, 90, 49, -56, -82, 90, -50, -125, 97, 30, -104, -57, 110, -91, 92, 94, 57, -97, 78, -5, -83, -45, 32]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[43, -46, 15, 69, -6, 3, -123, -118, 3, 52, 105, 61, 13, -88, -92, -63, 10, -122, 7, 96, -56, -24, -98, -23, -81, 119, 74, -14, 101, 105, 0, 103, -114, -6, 57, 126, 78, -120, 115, 124, -104, -75, 83, -67, 113, 5, -84, 26, -57, 16, -31, -89, 116, 17, 121, -52, -6, 64, -12, -42, -113, 33, 112, 94, -94, 67, -48, -87, 55, 39, -57, -14, -37, 33, -82, 82, 122, 36, -46, 39, 14, 14, -34, -38, -5, 89, -66, -67, 28, 118, -74, 42, 66, 120, 29, -79, -125, 97, 30, -104, -57, 110, -91, 92, 94, 57, -97, 78, -5, -83, -45, 32]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[23, 116, 85, -59, -22, -117, 74, 112, 23, -46, -94, -97, -2, -81, -27, 125, -4, -7, 86, -34, -47, 6, -61, 54, 75, 44, -89, -5, -115, -121, -98, -17, -126, 31, -110, -23, -100, 7, -10, -66, -91, 41, -77, 55, -62, -67, -44, 95, -3, -86, -33, 115, 29, 76, 22, 10, 102, -117, -108, 36, -73, 89, -101, 115, -28, -92, 126, -123, -67, 20, -80, 66, -60, 21, -94, -52, 118, 21, -22, 65, 52, -44, -28, 117, -49, -126, 127, -52, -59, -115, 84, -114, 11, -72, 67, 47, -125, 97, 30, -104, -57, 110, -91, 92, 94, 57, -97, 78, -5, -83, -45, 32]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-7, -44, -2, -125, 37, -28, -86, -82, 41, -80, -51, 113, -58, 24, -72, -31, 118, -67, 31, 85, -121, -15, 75, 93, -52, -35, 110, 47, 110, 119, -40, 79, 38, 88, 62, 17, -112, 18, 10, -27, -10, 56, -31, 72, 38, 12, 59, -5, 26, -80, -23, -83, -21, -39, -111, 105, -52, 34, 59, 34, 96, 54, 16, 94, -39, -52, -77, -83, 89, 6, 122, -113, -21, -115, 3, 77, 99, 95, -82, 22, 102, -20, -77, 124, -31, -58, -47, 107, 30, -12, -110, -123, -64, 109, 63, 120, -125, 97, 30, -104, -57, 110, -91, 92, 94, 57, -97, 78, -5, -83, -45, 32]");
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey26);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey26);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey26);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey26);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey26);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("6000978D729A5EAF02789174FCEF78DC19A6A5353FA2EE08001847BF93F672C57842A660B60BA3E3BAFC4CA493DB93BD616BA839F8FC6BCE8F25A5CFF9986984A5A08FB7FA9398912FBF66BA83D5698C9B89FE34ECEA63E7E13593D7BE10CB607921E0CEEC09BCE538EB3873308F1B39", secretKey26);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-26, -66, 122, 92, 17, 82, 98, 87, 93, -9, 98, 103, -96, -123, -120, -116]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[37, 118, 56, -23, -87, 53, -106, -103, -116, 5, -17, 109, -75, -75, 123, 13]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[89, 78, -15, 60, -117, -10, -44, 25, -94, 109, 54, -60, -52, -102, 66, -118]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[122, -101, -97, -31, -104, -64, 35, -48, 116, -98, 41, -112, -12, 92, -110, -118]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[3, 63, -78, -83, -116, -89, 94, -118, 20, 0, -96, 3, 62, 13, -86, -86, -34, -92, -70, 19, -58, 25, 113, 72, -96, 5, -81, -70, 101, -69, -27, -79, 89, 78, -15, 60, -117, -10, -44, 25, -94, 109, 54, -60, -52, -102, 66, -118]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-94, -2, -60, -85, 112, -81, -41, -2, -121, -55, 113, 98, -52, -32, -58, -95, 78, -128, -34, 30, -22, 39, -96, -108, 1, 29, 90, 46, -1, 32, -70, 54, 89, 78, -15, 60, -117, -10, -44, 25, -94, 109, 54, -60, -52, -102, 66, -118]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-95, 42, -22, -100, 107, 67, 17, -80, 78, 99, 84, 82, -47, -6, -19, -96, 97, 69, -80, 117, 95, -32, 125, -99, -127, -34, 90, -115, -41, -51, -24, 20, 125, -90, 123, 40, 113, 11, 79, 38, -19, -62, -74, 6, -16, 87, -48, -127, 124, 123, -97, -10, 61, 59, -33, -40, -44, 50, 100, 47, -66, -97, -63, 26, -64, 26, -90, 69, 16, -69, 107, 109, -107, 69, 102, 7, -48, 75, 82, 124, -59, -82, 68, 22, -123, -93, -113, -32, -64, 114, 27, 6, 85, 119, 51, 110, 89, 78, -15, 60, -117, -10, -44, 25, -94, 109, 54, -60, -52, -102, 66, -118]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-83, 82, -62, 119, 46, 0, 110, 64, 35, -95, -43, -52, -2, 105, 45, -1, 71, 44, 121, -94, 85, 84, -106, 109, -28, -29, -122, 14, 60, 69, -31, -43, 89, 78, -15, 60, -117, -10, -44, 25, -94, 109, 54, -60, -52, -102, 66, -118]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-16, -21, -115, 84, -125, 122, -40, 127, -65, -66, -121, -40, 3, -105, 57, 79, 83, -116, 122, -39, 126, -28, -28, -56, 56, 101, -67, 50, -13, 13, 41, -123, 90, -61, 53, -123, -31, 96, -109, -96, 89, 125, 102, -116, -24, 77, -65, 109, -113, 42, 116, 31, 26, 29, -65, -10, 45, -120, 38, 105, 124, 43, 30, -96, 20, 114, -117, -66, 85, -6, -82, -45, 58, 120, 1, -39, 65, -43, 88, -74, -123, 17, 121, 32, 73, 60, -51, -77, 114, -17, 94, -71, 14, 12, 56, -57, 89, 78, -15, 60, -117, -10, -44, 25, -94, 109, 54, -60, -52, -102, 66, -118]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "30C84241D82071652039BA8136F7355BCD763068FF915B7CDF23E1A7026E0D39FA285B701252428CADFF8A8E9E9CC2258593BC5B447EA0AA59D3DAA2906041587C39957A2547A35D1D0196C1BEE4E5E3F60E7336925102FF163DA4E4C82A9844E76550CBC4CA3755D78FA1CDA3AC0ED5831F389F320843AFE4C73C8874AD37A561CD3088974D7E05F4B18F06B86F197C7C12A34166D253F1903D2A4496B82BE89F0B20BC7520C52325CF851B438235DAD78EF65391072BCDC8F15ED2FE5257DF09E65E72C6F6D7EDE98A44ACCAFB32963BC2048F2F45A3D7864A16328329B0B6594EF13C8BF6D419A26D36C4CC9A428A" + "'", str38, "30C84241D82071652039BA8136F7355BCD763068FF915B7CDF23E1A7026E0D39FA285B701252428CADFF8A8E9E9CC2258593BC5B447EA0AA59D3DAA2906041587C39957A2547A35D1D0196C1BEE4E5E3F60E7336925102FF163DA4E4C82A9844E76550CBC4CA3755D78FA1CDA3AC0ED5831F389F320843AFE4C73C8874AD37A561CD3088974D7E05F4B18F06B86F197C7C12A34166D253F1903D2A4496B82BE89F0B20BC7520C52325CF851B438235DAD78EF65391072BCDC8F15ED2FE5257DF09E65E72C6F6D7EDE98A44ACCAFB32963BC2048F2F45A3D7864A16328329B0B6594EF13C8BF6D419A26D36C4CC9A428A");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "30C84241D82071652039BA8136F7355BCD763068FF915B7CDF23E1A7026E0D39FA285B701252428CADFF8A8E9E9CC2258593BC5B447EA0AA59D3DAA2906041587C39957A2547A35D1D0196C1BEE4E5E3F60E7336925102FF163DA4E4C82A9844E76550CBC4CA3755D78FA1CDA3AC0ED5831F389F320843AFE4C73C8874AD37A561CD3088974D7E05F4B18F06B86F197C7C12A34166D253F1903D2A4496B82BE89F0B20BC7520C52325CF851B438235DAD78EF65391072BCDC8F15ED2FE5257DF09E65E72C6F6D7EDE98A44ACCAFB32963BC2048F2F45A3D7864A16328329B0B6594EF13C8BF6D419A26D36C4CC9A428A" + "'", str39, "30C84241D82071652039BA8136F7355BCD763068FF915B7CDF23E1A7026E0D39FA285B701252428CADFF8A8E9E9CC2258593BC5B447EA0AA59D3DAA2906041587C39957A2547A35D1D0196C1BEE4E5E3F60E7336925102FF163DA4E4C82A9844E76550CBC4CA3755D78FA1CDA3AC0ED5831F389F320843AFE4C73C8874AD37A561CD3088974D7E05F4B18F06B86F197C7C12A34166D253F1903D2A4496B82BE89F0B20BC7520C52325CF851B438235DAD78EF65391072BCDC8F15ED2FE5257DF09E65E72C6F6D7EDE98A44ACCAFB32963BC2048F2F45A3D7864A16328329B0B6594EF13C8BF6D419A26D36C4CC9A428A");
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("9E3FA735129C449B99534E5E23A8CD37381E7A83D9BEBA2014B2C5301D9CBF2939A122A8A7ABF168E3D309422D89A40503600C06C72412872F119661B5C91C2BFDDB687C5C90027C4E4E15C34EB35CC5B0D23EEB4FEA44B6705E349738317C8F3FE0B5B4056E29386E3DEF440334A03F", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-26, -118, -9, -49, 109, 115, -54, 10, 53, -9, 91, 80, -47, -6, 81, 57]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-5, -1, 82, 33, -113, 126, 47, 126, -39, 1, 57, 58, -8, 17, 55, -68]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-5, -1, 82, 33, -113, 126, 47, 126, -39, 1, 57, 58, -8, 17, 55, -68]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-17, -128, -25, -67, 75, -127, 43, 83, 31, -23, 97, -2, -115, -104, 5, -34]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-26, -118, -9, -49, 109, 115, -54, 10, 53, -9, 91, 80, -47, -6, 81, 57]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1379E5D46A82C7AEF0CB4DAAF0CCC05920FD983246E329AFE862102E37F61028228AD47FCB4EC98CEB7827328D79757D6B7320E38B83B7963BBDD41430995E31FA4794A1E283A80E2A0FBA2F842EF427607D9B80121D7CEED5B05F8968916FD7C442FA88435006D4B7103FC30B57382E03EA95D8F0BB7C799826BE96CC4BF1A8E72BF4E9A57EBCAC90F825981BA764CF703735808666441F35E6A0C19BDB7C255E8CE3F575BCF9715043A4BACFF0391D7DD9E4C32C7D41597E643A23B87DE79A4A6D11C58AF736C9A0F83BAEBB33EC911A89C3C848198D065E690ADF461F1142E68AF7CF6D73CA0A35F75B50D1FA5139" + "'", str13, "1379E5D46A82C7AEF0CB4DAAF0CCC05920FD983246E329AFE862102E37F61028228AD47FCB4EC98CEB7827328D79757D6B7320E38B83B7963BBDD41430995E31FA4794A1E283A80E2A0FBA2F842EF427607D9B80121D7CEED5B05F8968916FD7C442FA88435006D4B7103FC30B57382E03EA95D8F0BB7C799826BE96CC4BF1A8E72BF4E9A57EBCAC90F825981BA764CF703735808666441F35E6A0C19BDB7C255E8CE3F575BCF9715043A4BACFF0391D7DD9E4C32C7D41597E643A23B87DE79A4A6D11C58AF736C9A0F83BAEBB33EC911A89C3C848198D065E690ADF461F1142E68AF7CF6D73CA0A35F75B50D1FA5139");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1379E5D46A82C7AEF0CB4DAAF0CCC05920FD983246E329AFE862102E37F61028228AD47FCB4EC98CEB7827328D79757D6B7320E38B83B7963BBDD41430995E31FA4794A1E283A80E2A0FBA2F842EF427607D9B80121D7CEED5B05F8968916FD7C442FA88435006D4B7103FC30B57382E03EA95D8F0BB7C799826BE96CC4BF1A8E72BF4E9A57EBCAC90F825981BA764CF703735808666441F35E6A0C19BDB7C255E8CE3F575BCF9715043A4BACFF0391D7DD9E4C32C7D41597E643A23B87DE79A4A6D11C58AF736C9A0F83BAEBB33EC911A89C3C848198D065E690ADF461F1142E68AF7CF6D73CA0A35F75B50D1FA5139" + "'", str14, "1379E5D46A82C7AEF0CB4DAAF0CCC05920FD983246E329AFE862102E37F61028228AD47FCB4EC98CEB7827328D79757D6B7320E38B83B7963BBDD41430995E31FA4794A1E283A80E2A0FBA2F842EF427607D9B80121D7CEED5B05F8968916FD7C442FA88435006D4B7103FC30B57382E03EA95D8F0BB7C799826BE96CC4BF1A8E72BF4E9A57EBCAC90F825981BA764CF703735808666441F35E6A0C19BDB7C255E8CE3F575BCF9715043A4BACFF0391D7DD9E4C32C7D41597E643A23B87DE79A4A6D11C58AF736C9A0F83BAEBB33EC911A89C3C848198D065E690ADF461F1142E68AF7CF6D73CA0A35F75B50D1FA5139");
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("EACA603F6C3702AFF15917978DE510B99ECDD314A868720C166EEE2E28FF0212DDDC91DC8215D49CD6F698CC14FA8FB13DC3D8B7C017EDE31594E62E4584D8306C2F50F992C3C052E995196F8857F28A626B40C0078DA5AD3207258C24C458EC51768B970448F37E6FE4E3F7796DB4C9", secretKey22);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        byte[] byteArray67 = new byte[] {};
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray67);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey69);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey73);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey73);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey73);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey73);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("9E3FA735129C449B99534E5E23A8CD37381E7A83D9BEBA2014B2C5301D9CBF2939A122A8A7ABF168E3D309422D89A40503600C06C72412872F119661B5C91C2BFDDB687C5C90027C4E4E15C34EB35CC5B0D23EEB4FEA44B6705E349738317C8F3FE0B5B4056E29386E3DEF440334A03F", secretKey73);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("D802ACC900E69F563E71831385BB5247", secretKey73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey73);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, -60, -19, -1, 49, -24, -98, -2, -69, -19, -76, 99, 29, -62, -116, 122]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[119, -27, -88, 43, -7, -56, -74, -70, 85, 10, 24, -10, -94, 29, 92, 64]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[73, 16, -120, -67, -6, -24, -34, -21, 115, 4, 82, 48, -4, 23, 96, -114]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[56, -51, 48, -80, -47, -57, -45, -81, -99, -25, 46, 112, -46, 22, 26, 67]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-96, 116, -34, 124, -46, -65, -79, 52, 66, -12, -11, 37, -17, -103, 117, -89, -113, 61, -95, -71, 106, -88, -7, -20, 101, -12, -63, -128, -46, -83, 16, -61, 73, 16, -120, -67, -6, -24, -34, -21, 115, 4, 82, 48, -4, 23, 96, -114]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[73, 16, -120, -67, -6, -24, -34, -21, 115, 4, 82, 48, -4, 23, 96, -114]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[56, -51, 48, -80, -47, -57, -45, -81, -99, -25, 46, 112, -46, 22, 26, 67]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-91, 32, 122, -58, 6, 75, 86, -53, 69, -101, -74, -74, -31, 83, -120, -55, -13, -48, -23, 86, 0, 1, -47, 33, -96, -68, -66, -74, -117, 89, -91, 16, 73, 16, -120, -67, -6, -24, -34, -21, 115, 4, 82, 48, -4, 23, 96, -114]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 5, -128, 65, -80, -111, 105, -56, -77, -125, -75, -112, -42, -96, -50, -107, -52, -90, 60, -73, 77, 122, -56, 46, -32, -36, -83, 68, -11, -94, 95, 50, 73, 16, -120, -67, -6, -24, -34, -21, 115, 4, 82, 48, -4, 23, 96, -114]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, 58, 9, 21, 9, -87, -92, 98, -33, -75, 17, 78, 18, -95, 118, -83]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, -111, 6, -43, -48, -45, -75, -93, 111, -6, 40, -84, -94, -73, -13, 79]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-90, 42, 36, -28, 88, 125, -76, 79, 104, -57, 48, 122, -99, 13, -44, -6]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-38, -127, -125, -1, -72, 118, 105, 25, 27, 115, 2, 78, 2, -105, -50, -77]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-49, -27, -93, -104, 47, 97, 111, -111, -57, -44, 125, -117, -76, -12, -19, -3]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-120, -106, 117, -38, -23, -8, 1, 65, -32, 111, -77, -2, -2, 82, -78, -79]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[95, -16, 123, -76, -78, 48, -19, -87, -98, -112, 117, -49, -72, 0, -40, -65]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[90, -74, 3, 38, -25, -99, -102, -127, -102, -114, -111, 17, 1, -37, 60, -103]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[45, -117, -32, 42, -6, 68, 3, -3, -127, 72, 92, -97, -24, -114, 17, -19, -93, 76, 84, -122, 49, -113, 35, -19, -35, 101, 58, -53, -8, 116, -113, 57, 95, -16, 123, -76, -78, 48, -19, -87, -98, -112, 117, -49, -72, 0, -40, -65]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[28, -54, -128, 126, -56, 95, 41, -87, -3, -104, -57, -86, -121, -65, -32, 45, 73, -61, -83, -117, 71, -98, -112, 69, -50, -113, -34, -111, 91, -104, 10, 43, 95, -16, 123, -76, -78, 48, -19, -87, -98, -112, 117, -49, -72, 0, -40, -65]");
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, 63, -89, 47, -83, -112, -60, -88, -61, 31, 112, 7, -109, 96, -62, 83]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1E3FA72FAD90C4A8C31F70079360C253" + "'", str8, "1E3FA72FAD90C4A8C31F70079360C253");
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey33);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey33);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey51);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey51);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey51);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey51);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("25E5C998F6EDC03BF85CEF0357D3D3B69B2DE2EAD7B214CB41DE7C872E7C9847786722710499ACE2D3F12B0CFBE1CD2AFFDC6886345043B481A47CD71B2A674561B50C0014A0197AB20480744A3B05AF3B8BAE1FFAEF504ACFAE3F36E054E6C05315818223C7B4FC8ECF68F56C649550464F2089317B0EB580FD19D423329CE58000F98C2A3AA8466E13191B5241EF7FF0F08C42108E13F3F4268D5F5D7FBE614435DFC7785EACF732760DE59ADC728CC74D0B2F31A6F0F12AC5BFB6C661634880903DA48F94EAA90726129D42319FC31FF92C3EA079A303D8178375510D863E3665DE206A99C5F0A81A678FD8D1167F", secretKey51);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[84, -6, 104, 40, 126, 27, 120, 25, 101, 47, 24, 115, -80, 12, -52, -46]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[85, 24, -93, 117, 9, 6, 15, 23, -98, -98, -48, -29, -36, 121, -43, -107]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[38, 50, 1, 42, 106, -13, -33, 106, 96, 41, -76, 90, -122, -48, -9, 111]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[79, 103, -79, -16, -31, -71, -85, 81, -81, -27, 75, 106, 123, 53, 99, -5]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-121, -91, 43, -85, -76, 31, 5, 71, 57, -103, -91, 115, -21, -73, -38, 8]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[23, -116, -14, 52, -21, 6, 42, -11, 102, -67, -96, -14, 40, -3, 102, 126]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[23, -116, -14, 52, -21, 6, 42, -11, 102, -67, -96, -14, 40, -3, 102, 126]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-6, 79, -2, -33, 125, -48, -3, -18, -116, 60, 48, -12, 109, 38, -75, -19, 101, 67, -73, 88, 117, -116, 113, 102, -96, -128, -49, -95, -63, 44, 39, -92, -121, -91, 43, -85, -76, 31, 5, 71, 57, -103, -91, 115, -21, -73, -38, 8]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[32, 118, 103, -128, 75, 46, -116, 37, -64, -57, 39, -84, 101, -14, 29, 25]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[106, -19, 19, 21, 104, -71, -13, 48, 29, -119, 12, 89, -91, 81, 63, -120]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-8, 125, -7, -10, -54, -37, -118, -26, -49, -122, -88, -62, -120, 23, -43, -103]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[32, 118, 103, -128, 75, 46, -116, 37, -64, -57, 39, -84, 101, -14, 29, 25]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[76, -98, -63, 17, -88, -40, 82, 1, -48, 61, 19, 117, -35, -26, 89, -110, -101, 95, -2, -99, -50, 88, 119, 8, 73, 30, -91, -121, -39, 39, 2, -15, 32, 118, 103, -128, 75, 46, -116, 37, -64, -57, 39, -84, 101, -14, 29, 25]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[126, 124, -108, 24, 111, 31, -10, -118, 11, 35, -93, 96, -115, -48, -86, 97, 95, 107, -70, -113, -49, 102, 74, 108, 69, -39, -9, 45, 53, 40, 99, -31, 32, 118, 103, -128, 75, 46, -116, 37, -64, -57, 39, -84, 101, -14, 29, 25]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-8, 125, -7, -10, -54, -37, -118, -26, -49, -122, -88, -62, -120, 23, -43, -103]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-80, 66, -46, -16, -39, 66, -113, -121, -76, 25, 19, -115, -77, -12, 38, -92, -4, -67, -63, 119, 65, 86, 99, -1, 75, 100, 88, -39, -100, -80, 7, -67, 32, 118, 103, -128, 75, 46, -116, 37, -64, -57, 39, -84, 101, -14, 29, 25]");
        org.junit.Assert.assertNotNull(byteArray63);
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey24);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey24);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("9B81C6E367A0128616E38549659C20803D6F05C62470E98C6ECE221E4A1BB20A2B3C5761AF981D74A9ABC4A1773C7188", secretKey24);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("153C8B8D395A2C1D1A3853AFDB184572", secretKey24);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("8A63475DC16C9A7832F3B3C0D832D4B0B1F8546F91A670DF5643C79FE1AF35990DE90750B0A86B9D05F661059AF7FFFA", secretKey24);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        byte[] byteArray53 = new byte[] {};
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray53);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey55);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey59);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey59);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey59);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey59);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey59);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey59);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey59);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("482BC6D9BDD296EE583CD291CF07D86E85942568064B0B1C85099F542535565829ACF9D8D8746BF6071B3D3E378A9D86C453C070B2A0BABA4EA785D30089B55A50C87FB07DDC1FD44D7B1D8A2C83F7D9AA5F9EE7D04C41DA84D4D46033866AA87DEC15B6C47EDB65E36C96BCD1FC93AB565619976DE15C696AA168CE716BB720CF288D13616F3444C400D1EE1E1A6730AB0B4821222C121A74CB748D499D24EDB8C1B1CE1911C70A4714CA0B368B326A63C9F6070E08268FAAE43A8F126627CE442C164B3411E8B548B3C0878286D44B2EF405A501AECA5E367FAA1A91B69BC4ECB79EE90FDCD715D9DF8AE7B617F880", secretKey59);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("BA29755BE18647D338204A8AEA8DF9017DAEE4BE9AF9BEE6BF06C37665A0FD64B90BF244711649A4311942749ADA168801CFB8C0462A91A593E193520433178E8A4B057D722C2B8ACC8D06497AB87CD020C918B2218058A25D49A57DC915D0D1D48FB2D3DB27785EB6B36B6B7159C186", secretKey59);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1F7BAE42BA2EB2DD980537CE14C2CD485F33268726851579F4107259A5F018BF47E30D670780B514D5C96B1105C1C8BBA0417FB91372BC0E447027A6B83146844FD076C3963728CA5821DDD567092D361654E24F43325AF0C09AAE9F70C2EEC75169B1F06B537DE42128CBF852780A5CCDCD69CA84A36A0FA4F3621060E3659AB806D754CB5213E2D109BDC4F15EBC9CDE37D8D19C2EBB02655E9FBE7D0CC98763BAB268E0FC3EF92D8143056BF51236887A18B225C3481CA84CD61C8A3457DAC7B8F58DEE1FC6EC3A92769DC358E928605E4BCEF0935A48FE104A6C7AD8D2C8F0B02DC5C995B15A61CE179732A8628", secretKey59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey59);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-97, 70, -35, 53, 104, -88, 120, -104, -4, 50, 41, -94, -83, 74, -102, 88]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-7, -37, -1, -1, -84, -113, 45, -63, -9, -38, -68, 88, -28, 79, 55, -43]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-3, -78, -16, 62, -58, -68, 126, -9, 96, -91, 31, 10, -24, -117, 89, 92]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-71, 120, 84, -17, -122, -27, 22, -90, 104, -83, -43, -16, -13, -26, -47, 17]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-30, -95, 95, -78, -93, -116, 126, -34, -73, 45, 63, 80, 2, -17, 123, -123, 78, 51, 69, 47, 106, -111, 28, -108, -50, 92, 92, 115, 98, 67, 30, 106, -3, -78, -16, 62, -58, -68, 126, -9, 96, -91, 31, 10, -24, -117, 89, 92]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-3, -78, -16, 62, -58, -68, 126, -9, 96, -91, 31, 10, -24, -117, 89, 92]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-71, 120, 84, -17, -122, -27, 22, -90, 104, -83, -43, -16, -13, -26, -47, 17]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[27, -105, 124, -44, -2, -54, 127, 25, 65, -24, -117, -111, -91, -78, -20, 102, 49, 45, -72, -22, -70, -34, -20, 54, 34, -60, -95, 96, 73, -102, 25, -98, -3, -78, -16, 62, -58, -68, 126, -9, 96, -91, 31, 10, -24, -117, 89, 92]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[69, 107, 100, 109, 48, -97, -67, -56, 33, 28, -22, 90, -23, 123, -53, -76, 11, -58, 42, -120, -86, -110, -92, 32, 57, -92, -71, 93, 67, 86, -86, 84, -14, -112, -88, -128, 100, 124, -52, -120, 89, -124, 93, 73, -39, -107, 1, -39, 124, -87, 48, -73, -55, -41, -14, -116, 57, 57, 29, 44, -109, 52, 11, -51, -26, -10, -101, 5, 55, -94, 12, -117, 89, 78, 1, 76, 12, 32, -77, 57, -56, -5, -114, 50, -27, -62, -127, -93, -56, -45, 33, -69, -1, -69, 124, -109, -3, -78, -16, 62, -58, -68, 126, -9, 96, -91, 31, 10, -24, -117, 89, 92]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-17, -124, -38, 118, -115, -122, 54, -64, 31, -93, -9, 8, -73, -12, 48, -95, -26, -118, 110, 50, 127, -54, -84, -122, 7, -77, 65, -85, -4, 74, 48, -84, -3, -78, -16, 62, -58, -68, 126, -9, 96, -91, 31, 10, -24, -117, 89, 92]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[53, -42, 59, 20, 67, -41, -119, -30, 54, -89, 30, -6, 2, -51, -62, -26, 107, 65, -109, -109, -122, -9, -112, 41, -66, 90, -90, 42, 91, 112, 122, -115, -13, 80, 48, -30, 122, -27, 40, -98, -88, -97, 69, 12, 127, 23, -51, -91, 75, -74, -58, 125, -12, -80, 35, 57, 97, -34, -33, 16, 46, -32, -57, 30, -98, 24, 49, 64, 99, -115, 42, 81, 115, 34, 114, -48, 76, 107, 83, -3, -43, 27, 108, 105, -13, 101, 4, -101, 103, 20, -51, -118, -71, 45, -103, 46, -3, -78, -16, 62, -58, -68, 126, -9, 96, -91, 31, 10, -24, -117, 89, 92]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[43, -77, 12, -76, 28, -111, -121, -61, -108, 23, -122, -47, 81, 90, 91, 105]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[105, -47, 51, -108, -109, 127, -66, 79, 31, -39, -87, -60, 38, 60, -43, -55]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-16, -113, 64, 61, 35, 14, 6, -99, -111, -93, -72, 7, 101, -10, -84, 119]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[56, 83, -14, -51, -108, -44, -85, 71, -44, -13, -56, -75, 125, -107, 91, 11]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-117, -19, 27, -68, -108, 17, 67, -73, -44, -25, -63, 2, -113, 99, -104, -115, 80, -75, 71, 35, 65, -19, -65, -58, 52, -54, 105, -95, 19, 52, 126, -38, -16, -113, 64, 61, 35, 14, 6, -99, -111, -93, -72, 7, 101, -10, -84, 119]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[34, -56, 93, -100, -89, 1, -1, -33, -43, 18, -48, -123, 16, 111, -27, -50, 92, 23, -60, 80, 52, 86, 114, -33, 64, -15, -67, 10, -7, 41, 20, 95, -81, -77, 13, -128, -15, -113, 29, 43, 110, -10, -108, -9, 75, 44, -47, 81, 50, 31, -54, 123, -11, 94, -57, -35, -70, -87, 85, 16, -89, -46, -112, 24, -93, -56, -35, 108, -94, -18, 119, 30, 49, -39, 96, -89, 80, 127, -105, -99, -70, -2, -1, 69, 84, -85, -12, -80, -41, -118, -11, 80, 58, -71, 16, -119, -16, -113, 64, 61, 35, 14, 6, -99, -111, -93, -72, 7, 101, -10, -84, 119]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[54, -77, 89, 75, 53, -96, -18, 37, -6, 43, 108, 55, 16, 95, -78, -113, 78, 63, 13, -104, 8, 15, 99, -128, -36, -98, 5, -79, 88, 73, 6, 46, -16, -113, 64, 61, 35, 14, 6, -99, -111, -93, -72, 7, 101, -10, -84, 119]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertNotNull(byteArray69);
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey10);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("EC8EA26633DC04609AE498FE8AC0474D3EA18A86E7F6FA0026F8C9A89A3B73866DB993E4492FED70097622D97501A64A4C7ED826137FDA507962DB468E53D0B4D03A393A40294C080786E80D6274D92AAB2DB57873809F1143E36968F3C4037F320635DF18604CBCE4B94EE2E6451DC9", secretKey10);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("A81AD6210D7B9E5E8D7CD14D27F602DE76A2D78A0CB6F92EE8EBD2A4EDA3B9B90DF3A1C40BE37077C890EA053E5744CED4009962550F58F42A0764C6BDA8BAB99E9E6291DF104146F21A7A2492F18A783794D5F595A527F58109B2AA785B3CCB1A5E813472A32094E96A488DE2296A4196AF137D1FA63740CD0D70FD217720C3FA017FC27137169C164563FCCFADB2BD087989D056216DE643800569540118EC2D428E696B85F983691BFD9D37CF1547FE529A66CB6F6C538F11A7D6E4094F004BFB9F6D3FE66A4658404D5752E0897F005CC7BB176A4E4FCD31C94077CFB2350F7906F62D5FAA3BF6C60494748F126E", secretKey10);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("0704E24094AE8A7697E438FDF1B2491EBC9EB5E61FE74F88E3702EC24DDFB58329691233A5FC812FDF8E34B960AA8B88ADA566E50B18509F3FD35F43F7D0FE3B4F7F4C0A4F5E2073090A98AD2FBF121B80A7BEBB4A32C4C6B5B2C2C43F2788A29E67CE177181E8B334148EEA405B579F", secretKey10);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-59, -28, 45, 11, -108, 69, -72, -115, 126, -68, -4, 43, -117, 67, -119, 73]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, -60, 105, 35, 44, -97, 89, 127, 41, -111, 5, -55, -113, 43, 54, 108]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-72, -60, 105, 35, 44, -97, 89, 127, 41, -111, 5, -55, -113, 43, 54, 108]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-17, -46, -112, 39, -106, 84, 91, -69, -86, -54, 9, -2, 78, 41, -20, -99]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-72, -60, 105, 35, 44, -97, 89, 127, 41, -111, 5, -55, -113, 43, 54, 108]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[71, 11, 106, 100, 24, 67, 68, 31, -20, 7, -121, -120, 19, -84, 16, -121, 71, -7, -61, -34, 124, -90, -53, -24, 90, -96, 23, 54, -107, -2, -102, -22, -59, -28, 45, 11, -108, 69, -72, -115, 126, -68, -4, 43, -117, 67, -119, 73]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-112, 89, -50, -42, -96, 83, -117, -74, 53, -11, -119, -101, 114, -54, 42, 73, 51, -38, -121, 74, 70, 85, -62, -105, 78, 124, 63, 49, 37, -99, -5, 108, 90, 13, 55, -71, 93, -57, 95, -99, 38, 113, -111, -98, 26, 31, -88, 54, -100, 66, 0, 109, -30, 60, -59, 108, -1, -19, -43, -39, 34, -26, 120, -64, 25, 91, -28, -58, -80, -68, 123, 45, 80, -46, -15, -12, 126, 92, -62, -4, 65, 59, 41, -112, -5, 100, -20, 10, -31, 82, -2, 96, 28, 56, 2, -113, -59, -28, 45, 11, -108, 69, -72, -115, 126, -68, -4, 43, -117, 67, -119, 73]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "A4685FDBE8C6CB4C08E5595A6F8A1CF315709CC3ED233BF0D6E5AC18F456EBD4BECE1B2AB6F25DCD730DD7A5B3B8851D1F75B5CF41A69FD49449FCF859F5CA198E681C87B69F2752661D59B4BE2013940DA51CD05D8E7B4A817A58E24CAFAEB8A6A40220828CEB7701E95DB01C99A5BA6F3D61CCB1DEA8E3F38020CB698372E9A76725B395995EE98A2AE115E01AE2FD03419679DA3B851CE4D10CD500D47FE5B689C4F7B11A08AD7B4A8AF80B5860F825AC3DA460350B07F7BB0D37330FB7F1D4B02C835B9E56AD7EC52728062578F5C46CEAFE74F7519B6F810EA87AC867E3C5E42D0B9445B88D7EBCFC2B8B438949" + "'", str21, "A4685FDBE8C6CB4C08E5595A6F8A1CF315709CC3ED233BF0D6E5AC18F456EBD4BECE1B2AB6F25DCD730DD7A5B3B8851D1F75B5CF41A69FD49449FCF859F5CA198E681C87B69F2752661D59B4BE2013940DA51CD05D8E7B4A817A58E24CAFAEB8A6A40220828CEB7701E95DB01C99A5BA6F3D61CCB1DEA8E3F38020CB698372E9A76725B395995EE98A2AE115E01AE2FD03419679DA3B851CE4D10CD500D47FE5B689C4F7B11A08AD7B4A8AF80B5860F825AC3DA460350B07F7BB0D37330FB7F1D4B02C835B9E56AD7EC52728062578F5C46CEAFE74F7519B6F810EA87AC867E3C5E42D0B9445B88D7EBCFC2B8B438949");
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey31);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("85901A7A07774EF1B30A7D77F78D499830E94396D39F6D0A240A6BA509D22CD00BBA7DCDA4CC37D69BA13844D5AF219C", secretKey31);
        java.lang.Class<?> wildcardClass42 = byteArray41.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-107, 47, 52, 0, 37, -79, 15, 34, 26, 117, -105, -51, 114, -11, -44, 82]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[116, -96, 1, 92, -8, -53, 20, 115, -9, -64, 113, 75, -71, 78, -49, -28]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-93, 14, -18, -81, 126, 17, 107, -13, 99, 65, -125, -38, 13, -46, -97, -81]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-44, 76, -63, -86, -50, 80, 77, -18, 118, 81, -128, 14, -6, -69, 18, -96]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-6, -119, -51, 71, 16, -22, -76, 107, 66, -26, -65, 7, 119, 63, -38, -121]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-27, 41, -64, 107, -47, -34, -72, 61, -128, 0, -8, 107, 25, 72, -69, -104]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[35, 79, -72, -112, -35, -100, 113, 89, 94, 116, 21, 21, 19, -11, -8, 16, -125, -81, 109, 118, 45, -54, -63, 42, 112, 88, -98, 0, -28, 54, -20, 29, -6, -119, -51, 71, 16, -22, -76, 107, 66, -26, -65, 7, 119, 63, -38, -121]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-52, -90, -68, -128, -62, 104, -116, 52, 91, -26, -46, -125, 103, -21, 86, -95, -63, 22, -104, 78, 21, 56, 58, 96, 11, 105, -70, -31, -106, -22, 92, 4, -6, -119, -51, 71, 16, -22, -76, 107, 66, -26, -65, 7, 119, 63, -38, -121]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[18, -93, 82, -50, -33, 53, -122, 19, 40, -52, 25, -68, -64, 83, 69, 1, 45, 98, -53, 104, -103, -112, 98, 81, 33, -111, 70, 60, -86, -4, -48, 44, -109, -112, -27, 65, -60, 126, 51, -71, -39, 113, 109, -63, -120, 8, -36, 91, 64, -37, 39, -1, 84, 26, 122, -96, -80, 74, -80, -82, 68, -126, -116, -8, -114, 126, 24, -41, -128, 17, 115, 87, -113, 97, -76, 123, 107, -82, -78, -79, 30, -66, 42, 72, -124, -39, 85, 45, 24, -32, -111, 51, 76, 104, 89, -56, -6, -119, -51, 71, 16, -22, -76, 107, 66, -26, -65, 7, 119, 63, -38, -121]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-28, -61, -33, -24, 116, 109, -123, -105, -21, 51, 124, -103, 1, 50, -61, 56, -92, 15, 121, -75, 86, 39, -67, 8, -15, -123, 69, -42, -3, -110, -87, -87, 33, 95, -119, 117, 23, 18, 33, 101, 116, -113, -47, 36, -112, -75, -128, 61, -108, -91, 104, 12, -51, -113, 55, -40, 23, 82, -117, -26, 46, 14, 23, 40, -80, 51, 89, 41, -88, -53, -92, 110, -58, 43, 102, -8, 57, 43, 95, 43, 99, 121, -76, 59, 108, 122, 80, -59, 13, -128, -113, 62, -33, -44, 92, -42, -6, -119, -51, 71, 16, -22, -76, 107, 66, -26, -65, 7, 119, 63, -38, -121]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1C604D3CCD338D22944C6C4CF4B997A3030197072DC82231F441A1B6CCECC3F353DDF444625888C8C6E87A9597FBF4A8", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A0262A2855CA2EC59576B3E1D93167", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("C569D55BD8A9C98C9866042303E87B99A93AD2FA7F1F2DF06B3BAD59CD3D26F6415BBF14B41453966FEC4230B5541E70", secretKey23);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.Class<?> wildcardClass36 = byteArray34.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[85, 27, -67, 108, -73, 99, 59, -53, -20, -58, -126, 27, 48, 83, 61, -51]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-123, -19, 5, 28, -99, -98, 21, 105, -67, 31, -123, 10, -117, -107, 84, -119]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-97, 124, -18, 5, -47, 13, -55, -118, 40, -31, -40, -29, 6, -44, -116, 44]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-78, -86, -38, -6, -118, -70, -19, 72, -56, 51, -113, -121, 114, -13, -61, 26]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-34, -33, -106, -68, -114, 116, 62, -109, -104, 17, -78, -95, -73, 125, -87, -87, 62, 88, -42, -50, 44, 89, 98, 33, 64, 5, 51, -39, -23, -127, -67, -121, -97, 124, -18, 5, -47, 13, -55, -118, 40, -31, -40, -29, 6, -44, -116, 44]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-75, 23, -82, -75, 51, 87, 28, -67, 21, 26, 86, 101, 48, -6, 62, -119, -118, -12, 88, 102, 31, -102, 52, -110, -18, -91, -17, 43, 57, -108, 43, 78, -97, 124, -18, 5, -47, 13, -55, -118, 40, -31, -40, -29, 6, -44, -116, 44]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-83, 51, -35, -21, -92, 79, 103, 49, -89, -103, 106, 86, -94, -37, 25, -100, -34, -7, 25, 108, -98, -57, 108, -3, -81, 6, -42, -115, -124, -72, -20, 115, 63, -110, 80, 106, -100, 74, -79, 105, 59, -85, -19, 9, -29, 127, -70, -43, 35, -108, -42, -11, -89, 13, 39, -97, -51, 88, -2, 121, 44, 23, 62, 14, 65, 83, 117, 121, 50, -46, -78, 75, 65, -30, -124, 91, 28, -125, 0, 87, 80, -125, 107, 44, 17, -61, 21, -5, 116, -70, 64, 65, -110, 8, 106, -19, -97, 124, -18, 5, -47, 13, -55, -118, 40, -31, -40, -29, 6, -44, -116, 44]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[6, -9, -88, -6, -105, 5, -7, 62, 70, 121, -16, 58, 97, -101, 39, 36, -95, 118, 99, 89, 71, 72, -63, 116, 91, -89, -111, 92, -106, -78, -56, -91, -119, 21, 90, -88, 19, 31, -62, -41, 86, -35, 13, 47, 56, -94, 115, 80, -95, 35, -116, 98, -110, 86, 100, 61, 6, 125, 57, 60, 10, -1, 102, 66, -120, 20, 66, 20, 64, 99, 43, -52, 116, -27, -110, -80, 8, -62, 56, 68, 41, 20, 92, 34, -102, 88, -59, -116, -28, -25, 18, -96, -126, 115, -40, 108, -97, 124, -18, 5, -47, 13, -55, -118, 40, -31, -40, -29, 6, -44, -116, 44]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-62, -85, 49, 11, -97, 10, 86, 13, -54, -40, 121, -64, -28, 110, 72, -53, 94, -89, -52, 72, 49, 55, 98, 94, 4, 4, 66, 1, 7, -39, 52, 73, -22, -82, 21, -64, 58, 71, 22, -84, 66, 120, -128, -123, 15, -43, 76, -89, -32, 19, 115, 22, 112, 70, 14, 14, -3, -113, 49, -65, -29, -86, 19, 90, -86, -49, 9, 123, 35, 0, -2, 57, 108, 114, -66, -53, -128, 54, -87, -50, 107, 28, -34, 62, 2, -112, 98, -94, -38, 37, -86, 97, 13, 93, 22, 26, -97, 124, -18, 5, -47, 13, -55, -118, 40, -31, -40, -29, 6, -44, -116, 44]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-41, -107, -77, 7, -120, 122, -57, -111, -86, 34, -46, 43, -47, -67, -64, -42, -1, -59, -67, -67, -4, 65, -34, -116, -38, -3, -80, -117, 40, -63, -97, -110, -97, 124, -18, 5, -47, 13, -55, -118, 40, -31, -40, -29, 6, -44, -116, 44]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[98, -59, 29, 88, -63, -92, -65, 52, -56, 73, 55, 122, 35, 104, 102, 99, 62, -104, -49, 1, 89, -117, -59, 116, -77, -26, 27, -104, -106, -116, -38, 34, 89, 77, 36, -94, -114, -72, -47, -16, -57, 110, 52, -28, -37, -51, 48, -8, -17, -8, -32, 120, 26, 124, 83, -44, 19, 91, 70, 8, 97, 95, -80, -96, -73, -64, 12, -65, -8, 63, 15, -34, 110, 46, 23, -47, 88, 28, -19, 64, -110, 100, -55, -115, -56, -35, -126, 112, -109, -10, 116, 57, -68, -10, 109, 69, -97, 124, -18, 5, -47, 13, -55, -118, 40, -31, -40, -29, 6, -44, -116, 44]");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "62C51D58C1A4BF34C849377A236866633E98CF01598BC574B3E61B98968CDA22594D24A28EB8D1F0C76E34E4DBCD30F8EFF8E0781A7C53D4135B4608615FB0A0B7C00CBFF83F0FDE6E2E17D1581CED409264C98DC8DD827093F67439BCF66D459F7CEE05D10DC98A28E1D8E306D48C2C" + "'", str35, "62C51D58C1A4BF34C849377A236866633E98CF01598BC574B3E61B98968CDA22594D24A28EB8D1F0C76E34E4DBCD30F8EFF8E0781A7C53D4135B4608615FB0A0B7C00CBFF83F0FDE6E2E17D1581CED409264C98DC8DD827093F67439BCF66D459F7CEE05D10DC98A28E1D8E306D48C2C");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey56);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey56);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey56);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey56);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("EC3B318E00B36EFD396D86698A0C2871A46C76D28AB6029AB7AAD318701A7C382DC50D20A011686B9126738DE623EDA5", secretKey56);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBD74FDAC32596A72A5D74C50623A23C", secretKey56);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("815BE29BF413B9A4F22E40BCD2730B2D9FB4060DFDB0508CE0551EFB108D0DB5DF66CAEBB4655B582572AC4AEDA80469188E1CB653C24682B9C0ABDCC8A4C70C8D820FBC410FAAB9AD24D085DAAE937F931A2FED977082D75D785A694F59F54E1764DA9DDB21F608D11CD0C5EEFA3987", secretKey56);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("1207895BA61254A5982F277211A2D0ED39AB6138490498722E4FF245826D3ED791A07ED5D7B0A46BD94EC127A3DEAA4740493EB6F6A3B2070510AE557E000CEC5B6069F34069D12ADC056AEF26B0F8A317A77F2D1901C22054579FEF305944BE190DA86D3EAE776A92430A7A00BE13AF", secretKey56);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, -89, 61, -4, -49, -82, 114, 64, -39, -31, -37, 63, 112, -18, 99, 127]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-49, -79, -68, 53, 52, 37, -84, -126, 5, -35, 86, 111, -103, -26, 114, 18]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-42, -98, -24, 50, -90, -106, -49, 14, 63, 35, 86, 65, 68, -39, -113, 43]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-103, 12, 6, -95, -11, 13, -123, 59, 73, -124, -110, 42, -45, 47, -24, -41]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-13, -35, 29, -24, 3, 31, -20, 22, 113, -7, -51, -85, -65, -114, -67, -66]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[38, 113, 70, -13, 34, 60, -34, -81, 65, 34, 38, -52, 43, -100, 40, 24]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[101, 13, -120, -55, 44, -84, -32, 87, -106, -102, -39, -82, 25, -54, -48, -14]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-27, -46, -117, -82, -37, 46, -71, 75, 76, -125, 37, -65, 55, -62, 112, 3]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[120, -119, -50, -41, 80, 1, -86, -12, -96, 18, 5, 29, 19, -31, 39, -57]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-41, 2, -55, -102, -20, 112, 19, -82, -26, 96, 0, 62, 111, 5, -32, 34]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[4, -122, 48, 89, 51, 50, -117, -70, 42, -73, -105, -38, -121, -23, -57, 34]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[120, -119, -50, -41, 80, 1, -86, -12, -96, 18, 5, 29, 19, -31, 39, -57]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[111, 74, 8, -70, -86, 73, 123, 87, -83, 33, 73, -7, 32, -99, -74, -104, -105, 41, -124, -71, -110, 76, -71, 126, 36, -107, -57, -41, 15, 90, 26, 60, 120, -119, -50, -41, 80, 1, -86, -12, -96, 18, 5, 29, 19, -31, 39, -57]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[120, -119, -50, -41, 80, 1, -86, -12, -96, 18, 5, 29, 19, -31, 39, -57]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[90, 40, 32, 93, 112, 92, -68, 12, 29, -71, -104, -30, -12, 9, 46, -97, -41, 39, -109, 116, -84, 26, 43, -65, 16, 104, -48, 127, -28, -49, -89, -126, 59, 113, 69, -9, -84, 79, -40, -94, 114, -68, 43, 72, -88, -19, 12, -123, 101, 17, 43, -57, 37, 4, 26, 45, -21, -66, -113, 64, 90, -43, 66, 4, 51, -41, 108, 96, 63, -6, -66, -54, 17, -38, 40, 5, 92, 74, -89, -95, -54, 39, -10, 108, 16, -63, -99, -26, 94, -35, 97, 109, -62, -32, 90, -126, 120, -119, -50, -41, 80, 1, -86, -12, -96, 18, 5, 29, 19, -31, 39, -57]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-62, 35, -25, 103, 59, -86, -79, -8, -23, -114, -17, -1, 3, -45, -27, 92, -81, -66, 66, 111, -114, 40, -43, 44, -59, 41, 87, 69, 14, 101, -33, -4, 120, -119, -50, -41, 80, 1, -86, -12, -96, 18, 5, 29, 19, -31, 39, -57]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray68);
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("F81AFBD14B7ABE16906019E8BCAAE21CE01D7EBACDA22D1723C54375ADEBE9E98C454A12D8BCA27540738D5339F25590", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-92, 64, -110, -49, -29, -87, -9, -46, 39, 92, 64, -123, 47, -5, 80, 71]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[4, 30, 14, 77, 74, 51, 5, 87, -102, -94, -34, -35, 101, -65, 83, -88]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[15, -9, 78, -72, 96, -34, 82, -52, -77, -127, -69, -85, 39, 99, -54, -109]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-44, -83, -23, -81, -33, 10, 99, 125, -55, 74, -13, 72, 109, 83, 49, 10]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-25, 78, 11, 74, -18, 58, 16, 56, -102, 43, -95, -88, -103, -23, -51, 101, -39, 71, 49, -116, -41, 122, 1, 20, 87, -25, -53, -3, -29, 31, 39, -57, 15, -9, 78, -72, 96, -34, 82, -52, -77, -127, -69, -85, 39, 99, -54, -109]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[49, -11, 48, -15, 52, 79, -9, 51, -13, -75, -41, -17, 19, 27, 78, 18, 8, 80, 65, 59, 79, 38, -123, -84, -10, 92, 43, -117, -118, 77, 125, 16, 15, -9, 78, -72, 96, -34, 82, -52, -77, -127, -69, -85, 39, 99, -54, -109]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-110, 125, -79, -75, -90, 74, -119, -79, 5, 49, -124, 18, -18, 112, 96, -66, 110, -52, 121, -57, 121, 50, -95, -98, 10, -90, -1, 41, -10, -87, -67, -73, -51, 104, -103, -92, 67, 117, -62, 123, 93, -20, -102, -27, -73, -112, 27, 24, 31, 76, -118, -46, 55, 11, 59, -48, 96, -99, 16, 8, -54, 115, -21, 59, -68, 58, -107, 20, 77, 57, 4, 84, -89, 39, -120, 20, 81, -11, 48, 7, -71, -2, 3, 123, -100, -110, -123, -113, -10, -65, 76, 58, -16, -68, -93, 10, 15, -9, 78, -72, 96, -34, 82, -52, -77, -127, -69, -85, 39, 99, -54, -109]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "927DB1B5A64A89B105318412EE7060BE6ECC79C77932A19E0AA6FF29F6A9BDB7CD6899A44375C27B5DEC9AE5B7901B181F4C8AD2370B3BD0609D1008CA73EB3BBC3A95144D390454A727881451F53007B9FE037B9C92858FF6BF4C3AF0BCA30A0FF74EB860DE52CCB381BBAB2763CA93" + "'", str29, "927DB1B5A64A89B105318412EE7060BE6ECC79C77932A19E0AA6FF29F6A9BDB7CD6899A44375C27B5DEC9AE5B7901B181F4C8AD2370B3BD0609D1008CA73EB3BBC3A95144D390454A727881451F53007B9FE037B9C92858FF6BF4C3AF0BCA30A0FF74EB860DE52CCB381BBAB2763CA93");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "927DB1B5A64A89B105318412EE7060BE6ECC79C77932A19E0AA6FF29F6A9BDB7CD6899A44375C27B5DEC9AE5B7901B181F4C8AD2370B3BD0609D1008CA73EB3BBC3A95144D390454A727881451F53007B9FE037B9C92858FF6BF4C3AF0BCA30A0FF74EB860DE52CCB381BBAB2763CA93" + "'", str30, "927DB1B5A64A89B105318412EE7060BE6ECC79C77932A19E0AA6FF29F6A9BDB7CD6899A44375C27B5DEC9AE5B7901B181F4C8AD2370B3BD0609D1008CA73EB3BBC3A95144D390454A727881451F53007B9FE037B9C92858FF6BF4C3AF0BCA30A0FF74EB860DE52CCB381BBAB2763CA93");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "927DB1B5A64A89B105318412EE7060BE6ECC79C77932A19E0AA6FF29F6A9BDB7CD6899A44375C27B5DEC9AE5B7901B181F4C8AD2370B3BD0609D1008CA73EB3BBC3A95144D390454A727881451F53007B9FE037B9C92858FF6BF4C3AF0BCA30A0FF74EB860DE52CCB381BBAB2763CA93" + "'", str31, "927DB1B5A64A89B105318412EE7060BE6ECC79C77932A19E0AA6FF29F6A9BDB7CD6899A44375C27B5DEC9AE5B7901B181F4C8AD2370B3BD0609D1008CA73EB3BBC3A95144D390454A727881451F53007B9FE037B9C92858FF6BF4C3AF0BCA30A0FF74EB860DE52CCB381BBAB2763CA93");
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey45);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey45);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey45);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey45);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey45);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey45);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB05108861568B77067864E393C66A651FA7D65C7972104CEC7664A6D568630EFF7F44008DECFABECC47EF00F1E1F507", secretKey45);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("F90EC7F28C8A2580774EED5A37E1DA33568463DC0D96C4C107112C08967522CB398E84EC30D28B5DFE1104BF5ED9F0DBF3AEE164AD1CC63280C89FFDA55BDA976043597EE697C946B15321C8527D71FD7577E7FAD8427C7CFA13457DDA057068C78E2A99A65D871AEA2DF116E6571511", secretKey45);
        java.lang.Class<?> wildcardClass59 = byteArray58.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[99, 92, 88, -28, -102, 23, 29, -3, -69, -49, -65, 68, 22, 97, -55, 2]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-87, 126, -73, -102, -92, -75, 6, -9, 93, 74, 83, -66, 89, 49, -50, 124]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-96, -104, -45, 83, -16, -4, 97, 113, -62, 93, -99, -78, 52, -85, 6, 76]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-32, -40, 93, -26, -89, -116, 60, 122, 109, 14, -105, 96, -51, -14, -17, -92]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-125, -101, 8, 4, 19, 112, -82, 37, -54, 55, 0, 90, -109, 42, 97, -124]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[28, 33, 31, -40, 0, 110, 93, -46, -40, -80, 76, -125, -40, -39, 2, -117]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[93, -79, 27, 31, -101, -128, 15, 114, 77, 116, -16, -106, -74, 90, 14, 89]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-40, 18, 10, 104, 119, -30, 49, 92, 102, -107, -117, -85, -27, -127, 8, 41]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-83, 38, -96, -92, 24, -105, 119, 116, 29, 117, 86, 99, 100, 90, -41, 7, 43, 104, 69, -69, 65, 103, -2, 23, -46, -92, 28, 21, -86, -71, -47, -61, 93, -79, 27, 31, -101, -128, 15, 114, 77, 116, -16, -106, -74, 90, 14, 89]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[25, 53, -94, -3, -98, -89, 87, 18, 54, 112, -89, -93, -104, 114, -126, 81, 89, -32, -66, -28, 97, 62, -31, -76, -123, -50, -120, 42, 64, -90, 55, 69, 93, -79, 27, 31, -101, -128, 15, 114, 77, 116, -16, -106, -74, 90, 14, 89]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[117, -11, 96, 7, -104, 97, -29, 110, -108, 19, -19, 24, -60, 43, -74, 61, -86, 102, -7, -22, -84, -121, -30, 89, 111, 20, -125, 4, 122, -119, 9, -27, -35, 107, -68, 72, -85, -8, 37, 105, -90, 16, 61, 17, 86, 114, -106, -55, -14, 27, -31, 78, 33, -5, 77, -126, 65, 93, 66, -67, -24, 23, 2, 92, 95, 122, 96, -100, 47, -85, 106, 34, -43, -100, -113, -107, -109, -4, -58, -27, 115, -12, -75, -45, 33, 126, -4, 88, -9, -68, -99, 93, 35, 57, 114, -89, 93, -79, 27, 31, -101, -128, 15, 114, 77, 116, -16, -106, -74, 90, 14, 89]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-121, -97, -93, 12, -96, -14, 115, -57, -44, 122, -115, -66, 88, 119, -84, -106, 48, -72, 31, -58, -29, 10, 32, -43, 70, -48, 35, -40, 22, 61, 98, -95, 93, -79, 27, 31, -101, -128, 15, 114, 77, 116, -16, -106, -74, 90, 14, 89]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[77, 121, -49, -51, -78, 59, 85, 43, 45, 102, 85, -28, -95, -39, -64, -47, -54, -43, -29, 39, 8, 15, -107, 98, 20, 1, 64, -47, -105, 18, -56, 57, 62, -81, 22, 1, -109, -53, -13, -92, -68, 20, 119, 30, -126, 98, 34, 120, 20, 60, -113, 36, -1, -71, -25, -104, -104, -51, -39, -104, 15, -63, 53, -62, -71, -65, -68, 124, -32, -83, 113, -78, 50, -63, 76, 110, -20, -91, -66, 119, 58, -8, -88, -111, -69, -107, 38, 109, -116, 115, -73, 92, 9, -28, -10, -78, 93, -79, 27, 31, -101, -128, 15, 114, 77, 116, -16, -106, -74, 90, 14, 89]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-121, -80, -68, -8, 60, -43, 87, -98, -56, 53, 52, 99, -109, -80, 19, 40, -17, -69, -112, -86, -71, -120, -51, -75, 95, -37, -42, -61, -44, -3, -53, 48, 65, 68, -82, -110, -97, 62, 26, -34, 110, 83, -13, 59, 80, -16, -110, -122, -116, -11, 114, -112, -58, 116, 75, -57, 39, -86, -49, 31, -56, 37, -40, -98, 74, 31, 54, -32, -50, -78, -128, 48, 73, -54, 87, -8, -93, 51, 114, -81, -91, -60, 74, 73, 57, 77, 82, 106, 126, -11, 22, -38, -62, -31, -5, 6, 93, -79, 27, 31, -101, -128, 15, 114, 77, 116, -16, -106, -74, 90, 14, 89]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[93, -79, 27, 31, -101, -128, 15, 114, 77, 116, -16, -106, -74, 90, 14, 89]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD016B569A2999509F59EE7F094987DD", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("F6441EF035CB44DF482D4076E2A2584A09FB6932E41E1A73AACC011A11D436CF6153ACC0BB45F9E81CD68A0E5BDE70C5E98B731602E244B9470D386A4098F20E0DA871E1E1E68188363224699C5B251F769207B9D3E7B513FBF246B3AB276CDE6EDB9EC603A754A6FDFF48C1723737A5", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("9C05642F602761962E462CE92CE6ECDACB9DB5A73B65CEC8DBA6F5DAFDCC6512D4828F0AF788FCDA23024D860C346B3A6801F7867EBD7155E31C44B70C64FDB66F9AA0A04F2C8EB79E6BB6236A4C7ECC316F47D455895810C5387C812311907DEE8264D30E65861CCF889E6DD97B6B22", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EE621CE0737A413FDF4A4551CD803CAB0A0EF75E6D83695C7E262BAD345A4DF7ED51556B40C59FEB92AB6C39B2D8279764339DF277D7EC19DB293C954FE1E8D90364598572AF34C7AA244DEEC9EE69590A707FE3215CE5914922685F9F3728E9E8FA0CB89DBB929C9FF6129DD093819", secretKey9);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-40, -76, 104, -12, -68, 90, 52, -2, 32, 13, -109, 21, 75, 117, 120, 23]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-37, -51, 23, 111, 30, -115, 82, 121, -22, -46, 12, 15, 119, -90, -61, 73]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-37, -51, 23, 111, 30, -115, 82, 121, -22, -46, 12, 15, 119, -90, -61, 73]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-36, 19, 79, -11, 62, -107, 46, -77, 32, -70, 15, -121, 73, -117, 123, 12]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-37, -51, 23, 111, 30, -115, 82, 121, -22, -46, 12, 15, 119, -90, -61, 73]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[101, 51, -28, -45, 31, 54, 96, 97, -112, -48, -84, -108, 111, -107, 3, 100, 127, -17, -81, -104, 78, -58, 114, 110, 40, -15, -45, -31, 114, -114, 57, 45, -40, -76, 104, -12, -68, 90, 52, -2, 32, 13, -109, 21, 75, 117, 120, 23]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "A867244EB3C9BD223C0150AAF2FD0592E123BE444F5F481166F80254C6FC3DAFCC84DB69F69A91D4C4382FB67A86A8BB2FFAB8EF242C0A9249C1204C6C32AFD1E94F5A1FA1D394D34650FD08969F1A91CFE697CC01CE4DCBB239B2D6E72B6F311416E58414AA1249A1A42E6F46D2C1F3E7F869A56203D15C9D75D5A90CBF85D8141B69CC4673061FD2A83F970E7D766B8CA4BEC12B967C418B44BDC355A774AB2C4ED07306B2733E2C2D02BD45849D6742B767FE8E15738AE04563FFA7D748EC6B6D2293EE35288DCE394980F9BF272871494C7E826874E4597BAC01AD03EAB2D8B468F4BC5A34FE200D93154B757817" + "'", str19, "A867244EB3C9BD223C0150AAF2FD0592E123BE444F5F481166F80254C6FC3DAFCC84DB69F69A91D4C4382FB67A86A8BB2FFAB8EF242C0A9249C1204C6C32AFD1E94F5A1FA1D394D34650FD08969F1A91CFE697CC01CE4DCBB239B2D6E72B6F311416E58414AA1249A1A42E6F46D2C1F3E7F869A56203D15C9D75D5A90CBF85D8141B69CC4673061FD2A83F970E7D766B8CA4BEC12B967C418B44BDC355A774AB2C4ED07306B2733E2C2D02BD45849D6742B767FE8E15738AE04563FFA7D748EC6B6D2293EE35288DCE394980F9BF272871494C7E826874E4597BAC01AD03EAB2D8B468F4BC5A34FE200D93154B757817");
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey24);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey24);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey24);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("235484DD0CBD33C05BED5DA29E17C2FD832C5AB50648CE5B762E58B492C5A8C755AA14DFD7B688D22906C285C3FB06F864CB39B46FFE336D6464323E2E3F4E23D770D7AC5B0A4C68A215EFE9C45C2E63025EF5CE361167FD588E92EBEAC772412F633E721ABA2CC41B6BDBC200BFC60B50065D80F8C1F175BB8D3506A2FCE41F3EB4A134026B08B1C95EA7586630813B5720A4A0C6C65B894FDF2751CBBB1122CCB6A4D39A0168B5D2F5B2899984948153360CD6E1E29D13BCBAB8D45FE340AAD35D0F14C805441C0057F495F50A773245FF26044EE2646DAC7C848DC3E4F6D3779756FC42005F02F5EB9E1D09B7C46A", secretKey24);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E6F355E8BD763D9328D748D6E65392B7C7DF4265FB6932BCAEC5F6ECA5ABAFF5157E1784BFDAD055F163A8BCF32C5C5F6A3FC8CD5354380D3F61AA7BDD717175ACDCF277E761A3F07819BFFF64E7F613", secretKey24);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-73, 66, -81, -80, -60, 117, 38, -19, 122, 76, -11, 62, -13, -18, -66, 28]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-120, -44, 57, -63, -41, 116, -7, -69, -83, 99, -91, 91, -79, -28, -92, -104]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[74, 49, -31, -28, -86, -93, -54, -108, -14, -120, 90, 92, 41, 91, -37, -120]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[48, -6, -34, -71, 108, -53, -49, -32, -43, -51, -126, -128, -45, -84, 63, -13]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -67, -8, -39, 65, 8, -46, -84, 50, -86, 15, 6, -18, 88, 52, -56, 103, -56, -127, -11, -45, 125, 98, -63, -76, 107, 33, -82, -53, -94, -60, -62, 74, 49, -31, -28, -86, -93, -54, -108, -14, -120, 90, 92, 41, 91, -37, -120]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[124, -75, 75, 1, 72, 109, -22, -75, -104, -85, 97, 17, -76, 11, 19, -121, -112, 41, 56, 81, 6, -107, -125, -82, -27, 10, 16, -24, 57, 107, -41, 87, 74, 49, -31, -28, -86, -93, -54, -108, -14, -120, 90, 92, 41, 91, -37, -120]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-108, 63, 58, -2, 21, 127, 67, 74, 17, 18, 94, -77, 120, -13, 74, 46, -127, 65, -91, -33, -116, -6, -20, -18, -74, -14, -63, -49, -112, -127, -96, -113, -92, 112, 5, -38, 57, -65, 16, -69, -38, 5, -65, -86, 60, -62, 89, -90, -60, -120, 50, 40, -69, -114, -99, -20, -35, 67, -115, 3, -8, -117, 34, 125, 28, 89, 122, 24, 112, 57, 99, 27, 70, 49, 30, -79, 120, -84, -49, -51, -109, -72, -122, 101, -41, -8, 84, -86, 92, 126, 69, -65, -13, 53, -119, 57, 74, 49, -31, -28, -86, -93, -54, -108, -14, -120, 90, 92, 41, 91, -37, -120]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-65, 31, 19, 68, 41, 52, -45, -47, -57, 6, 122, -91, 104, 89, 47, 26, -23, 63, -34, -5, -37, -92, 56, -50, 27, 123, -14, -52, -72, -66, 72, 76, -81, -124, 29, -81, -113, 89, 126, 51, 75, -59, -14, 21, -118, 31, -9, -31, 122, -25, 59, 63, -94, 35, -115, 50, -51, -27, 0, -5, -47, -68, -118, -50, 42, 47, -46, 67, -13, 43, 95, 123, -30, 112, -79, -58, -125, -86, -6, 99, -67, -38, -26, -9, 90, 113, -37, 69, 7, -52, 4, -36, 80, -86, -59, -100, 74, 49, -31, -28, -86, -93, -54, -108, -14, -120, 90, 92, 41, 91, -37, -120]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[74, 49, -31, -28, -86, -93, -54, -108, -14, -120, 90, 92, 41, 91, -37, -120]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-10, 62, -117, -69, 60, 90, -92, -43, 53, 22, -73, 40, 22, -20, -71, 49, -14, 50, -51, 50, -90, -95, 106, 107, 90, -110, -65, -38, 30, 79, 124, 116, -57, 60, 115, -7, 26, -91, -79, 50, 124, 91, 81, 26, 14, 26, -118, 72, -114, -38, 1, 111, -90, -104, 16, -45, -77, 45, -19, 109, -12, 86, -67, -32, -43, -16, 31, -63, 125, 118, -17, -37, 113, -25, -52, 36, -60, 118, -85, 7, 107, 55, 108, -35, -35, 102, -74, 85, 88, 28, 87, 103, 44, 1, 122, -79, -14, -79, 41, 64, 75, -111, 65, 46, 61, -1, 53, -52, -15, 39, 58, -126, 30, -34, -126, -31, -49, 22, 64, -119, -121, 43, -90, -35, -97, 16, -113, 51, 36, -86, 108, 85, 16, 77, -122, 4, -124, 60, -39, 62, 50, -31, 89, -52, 54, 102, -47, -2, -69, 28, 113, -73, 80, -106, 25, 126, 117, 10, 61, -43, 74, 49, -31, -28, -86, -93, -54, -108, -14, -120, 90, 92, 41, 91, -37, -120]");
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("3607647E50ECCCABE8DE03DFAC3EC1AA", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("A21EC590EE50DD2F2D974BA9D65033DD", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("C7F92A795DFD6999CB5659AF6525B3D3E7C0F6BB242703751D56AE83DB3C423CCAE0990232E3674C4C3D82F5BC1A537EDF18E2FFFDFBEE09E9413FD5A5544ED3283B01D7A291A272A5489C6C2844FEBB1BF7A8400BD79CD922379C6E1ADE3FBDD7338F4F07821F1A4F6C9D0E4A4C4986", secretKey10);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("F75616D5832F9021AE1BCE746E3699E110F0EE720F700FCCEE2F36AD47B9D3D8A906EEC89823E81F186427CC5E4FF3D4", secretKey10);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("91F8D2F536FA30E34837C78E97C3499D4C318E5B81BBE86994F26D3A33D410FE941B47CE2E305C06669701C55B923044", secretKey10);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("69FB5F94B49B63B622797FB98BC7A17D99E3DB2D8F45A0D13CD3BFB7F1D5E097D1E4DFC787EDCC088FD17F223651EB88", secretKey10);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey41);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey41);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey68);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey68);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey68);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey68);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("482BC6D9BDD296EE583CD291CF07D86E85942568064B0B1C85099F542535565829ACF9D8D8746BF6071B3D3E378A9D86C453C070B2A0BABA4EA785D30089B55A50C87FB07DDC1FD44D7B1D8A2C83F7D9AA5F9EE7D04C41DA84D4D46033866AA87DEC15B6C47EDB65E36C96BCD1FC93AB565619976DE15C696AA168CE716BB720CF288D13616F3444C400D1EE1E1A6730AB0B4821222C121A74CB748D499D24EDB8C1B1CE1911C70A4714CA0B368B326A63C9F6070E08268FAAE43A8F126627CE442C164B3411E8B548B3C0878286D44B2EF405A501AECA5E367FAA1A91B69BC4ECB79EE90FDCD715D9DF8AE7B617F880", secretKey68);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("BA29755BE18647D338204A8AEA8DF9017DAEE4BE9AF9BEE6BF06C37665A0FD64B90BF244711649A4311942749ADA168801CFB8C0462A91A593E193520433178E8A4B057D722C2B8ACC8D06497AB87CD020C918B2218058A25D49A57DC915D0D1D48FB2D3DB27785EB6B36B6B7159C186", secretKey68);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey68);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("0F8E32C8F777FEC0F4ACB78AD1BBA65D3CD5B6F8356B31C6EF957C7C546A3FD5E5F5ACA3AA39C7D5BC58BEF1A82E5DC47B5C1112E5C39145E084568E86D212172E51343026B6098F243A4E6C22188501390C653E452EACADD8EFB90CA0E2C312E8D006E11147C27ABFCAEED87AC370829AFFBB89226428978B58F9BCA9EE6F90FEF28A3FEAE33CC93AFBE93D88E6FF4D26ACB17216059DC8A9B028690E99410E5253FD3A181162DD7A91E9A3A2D39A49CFBCD6D4C6B39590EDF57F29ABF3F7685405F2715EACFFEECE6B5F98BE51ABFF2442687E30BF6305F384E3BE57DF43F03D8622C63D640835FD8741D0C69FDC24", secretKey68);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0FFCDB4FEC8A42521C89E46D475BE0788D2621C3EF8578D84E2B7F2FF6E571B2456C9B2B5AAB63C5149BA59B32D951E0C39EE70D7A9091EE69154C983B3DF159475E810E8FE0F606C112C099FD3EA2ADDFA0D515A4BE2C1A9EB1CD07A0B08A8F12567300C34E24D806D5B7FF63395A405BC283D9E6EF1B2AACFB90CEB972D3EFD912C38DE2D753AEE05B256B92E5D3CFE462DC9A97820C679B5A9B00BC30AF367BE5E86B065106811C6AAF6B0D058371B4A07BE04B1B0BCF6ABB53F7C1C7B39721AA6ADE9651605076C283CF24ABF37EA65A841DE11FE5F76AD35A11142258BF15CFD86A3DCED1099D014A52D1AFD88", secretKey68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey68);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122, -115, -125, -19, -47, 27, 86, 9, 15, 88, 104, 110, -119, -39, -15, 29]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-21, -24, 92, -94, -51, -99, 83, 68, -5, -13, 67, -34, -93, 8, 29, -56, 26, 51, 70, 31, 40, -35, -51, -57, -117, -92, -99, -9, -80, -56, -102, 97, -1, -2, -53, 99, 64, -23, 47, 58, 67, 39, -94, -11, -50, -1, -83, -121]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[55, 36, 111, -108, -115, 86, -93, -100, 101, -96, -5, 121, -11, 4, 35, -18, 55, 64, 44, 11, -53, 91, 40, -121, 94, -61, -100, -61, 105, -118, 85, 48, 14, 52, -108, -43, -78, -11, 89, 109, -114, 1, 63, -64, -46, 19, 77, -4, -81, -14, 112, 44, -30, -59, -20, 81, -120, -27, 87, -26, 3, -37, 0, 92, 33, 102, 37, 43, 42, 85, 86, -52, -44, -72, -44, -116, 91, -60, 12, 23, -46, -72, 35, -17, 104, 81, 13, 5, -71, -118, -82, 63, 118, -38, -68, -123, -1, -2, -53, 99, 64, -23, 47, 58, 67, 39, -94, -11, -50, -1, -83, -121]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-111, -36, -80, 116, 124, -114, -90, 75, -73, 74, -21, -42, 21, 89, -74, 60, 47, 41, -61, -50, -42, -15, 98, 79, -65, -19, 97, 107, -102, 68, -104, -60, 48, 24, -95, -110, 30, -17, 118, -19, -32, -65, -97, -89, -25, -70, -53, 12, -29, -107, 84, -63, 104, -15, -103, -115, -75, -24, 66, -44, -3, 14, 121, 95, 6, -114, -28, 25, -40, -100, 29, -125, -16, -116, -69, 51, 18, 93, -6, -100, -106, -48, -31, 2, 101, -71, 21, 37, 46, -8, -119, -68, -123, 86, -10, -113, -1, -2, -53, 99, 64, -23, 47, 58, 67, 39, -94, -11, -50, -1, -83, -121]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-126, -103, -21, -55, 17, -58, -83, 64, -48, -14, 126, -48, -77, 26, -15, 84, 67, 73, 16, -37, 13, 10, -75, 69, -97, -108, -50, -31, -74, -97, 13, 68, -1, -2, -53, 99, 64, -23, 47, 58, 67, 39, -94, -11, -50, -1, -83, -121]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[81, 36, -13, -98, 112, 64, -99, 59, 33, 127, 20, -34, -92, -78, -20, 64, -82, 39, -63, 116, -90, 82, -3, -61, 69, 6, 19, -48, -83, -104, 65, -42, -1, -2, -53, 99, 64, -23, 47, 58, 67, 39, -94, -11, -50, -1, -83, -121]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-95, 66, 15, -8, -9, -101, 27, -33, -110, -124, -20, 13, -95, -102, -50, 53, -118, 71, 20, 109, 64, -69, 94, 36, -70, -87, 17, 79, -100, 86, -127, -31, 64, -43, 75, -119, -113, -108, -45, 38, 21, 97, -99, 24, -81, -118, -42, 45, 111, -43, 15, 107, -109, -30, 94, -46, -39, 54, 9, -107, 12, -69, -91, 8, -60, -8, -71, -65, 69, 113, -47, 83, 9, -82, 69, -51, 69, -20, 100, 81, -114, -41, 99, 10, 86, 73, 68, 9, 24, -111, 74, 27, -14, -42, 70, -105, -1, -2, -53, 99, 64, -23, 47, 58, 67, 39, -94, -11, -50, -1, -83, -121]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[125, 100, 15, 66, -79, 18, 121, 95, 26, 49, 79, -35, 89, 116, 56, -24, -15, -51, -83, 29, -128, -36, -86, 69, 56, -53, -118, 7, 36, 27, -16, 98, -16, -75, -53, -84, 100, -65, -71, -117, -105, -28, 66, -95, 69, -115, -33, -20, -28, -26, -40, -8, 23, -90, 118, 26, 19, 29, -92, -126, 49, 78, 23, -102, -126, 24, 62, 37, -119, 3, 123, 87, -28, 12, 45, 52, -63, -79, 11, -52, -54, -104, 53, 122, -103, 120, 13, -59, 106, -127, 13, -94, 39, 68, 101, -92, -1, -2, -53, 99, 64, -23, 47, 58, 67, 39, -94, -11, -50, -1, -83, -121]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-74, -124, -23, -117, -100, 32, -64, 112, 16, -111, -117, -61, 119, -9, -46, -83, -39, -28, -79, -116, 118, -32, -67, 108, -25, -48, -19, -36, 45, -114, 118, -80, 127, -19, 125, 44, -48, 114, 40, 47, 23, 113, -100, 2, 36, -84, -12, 102, 104, 87, 87, -41, 22, -28, 117, -119, -21, -54, -90, 18, 79, 40, -6, 7, -101, -82, -36, -21, 50, -114, -124, 124, -116, -61, 98, 39, -48, 59, -127, -50, -105, -30, -43, 35, -50, -70, 40, 87, -121, 57, 7, -24, -77, 99, -70, 2, -1, -2, -53, 99, 64, -23, 47, 58, 67, 39, -94, -11, -50, -1, -83, -121]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-61, 2, -12, -55, 1, -61, -11, 66, -73, -20, -99, -116, 108, -98, 70, -85]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-43, -46, -85, 123, -73, 68, -48, 73, -74, 53, -102, 29, 76, 73, 116, -119]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-43, -46, -85, 123, -73, 68, -48, 73, -74, 53, -102, 29, 76, 73, 116, -119]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[125, -22, -61, 22, -119, 124, -85, -113, 107, -51, -28, -21, 47, -1, -128, 54]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-59, -15, -62, 89, -48, 102, 105, -96, 44, 62, -48, 12, -59, -49, -49, -2]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-31, -59, 37, 24, 87, -72, -4, 69, 66, -114, -28, -104, -59, 28, -34, -104, -69, -88, 39, 75, 57, -9, -27, -101, 4, 33, -81, 50, -79, 10, 91, -23, -128, -21, 94, 43, -110, 95, 13, -115, 1, 103, -127, -116, 31, -83, 99, 98, 31, 51, -3, -64, -60, 4, -62, 99, -104, -102, 75, -104, 28, 80, -15, 24, 71, -42, -67, -123, 32, 39, 4, -9, 89, -18, -66, -76, -89, -125, 83, 30, -81, -57, -72, -89, -43, 78, 102, -13, 109, -83, 108, -83, 83, 0, 18, 48, 125, -22, -61, 22, -119, 124, -85, -113, 107, -51, -28, -21, 47, -1, -128, 54]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-88, 82, -38, 70, -12, -53, 4, -38, -88, 60, -57, 8, 48, 43, 26, -83, 111, -88, 47, -39, 127, 91, -69, 18, -98, -89, 45, 96, -110, 98, -85, -96, 125, -22, -61, 22, -119, 124, -85, -113, 107, -51, -28, -21, 47, -1, -128, 54]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[87, 81, -119, 118, 116, 91, -124, -62, -127, 117, 127, -72, -101, 34, 66, -45]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[104, -2, -76, 121, 94, -24, -3, 45, 15, 118, 10, 115, -89, -53, -104, -118]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[56, -68, -107, 126, -16, -43, -95, -61, 22, 45, 110, -71, -106, 21, 17, -33]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-81, 41, 56, 22, -62, 2, -106, 11, -7, 59, 13, -114, -59, 28, -68, -123]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[8, 73, 65, 80, -78, 81, -51, -61, -109, 102, -50, 38, 8, 70, -82, -80, 71, -101, -10, -108, 59, 119, 83, -64, 78, -2, -59, 48, -90, 84, -26, -65, 56, -68, -107, 126, -16, -43, -95, -61, 22, 45, 110, -71, -106, 21, 17, -33]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-125, -96, 19, -24, -52, -50, 71, 5, -72, 86, 95, -52, 114, 93, -119, 18, 30, 77, 20, -77, -24, -83, -1, -99, 87, 25, 8, 103, -30, 62, 115, 104, 107, 92, -41, 16, -55, 43, 103, 39, -58, -72, 2, -23, 89, 75, 57, 66, -69, -17, 97, -102, 124, 50, -49, -9, -50, 91, -120, 101, 10, 98, -100, 35, -17, 76, 77, 10, -70, 54, -57, -115, 33, -29, 49, -61, -13, 101, 55, 34, -88, 40, 116, 61, -18, 125, -110, 115, -68, -53, -12, -75, -100, -99, 45, 83, 56, -68, -107, 126, -16, -43, -95, -61, 22, 45, 110, -71, -106, 21, 17, -33]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-99, 67, -49, 1, 4, -26, -104, 42, 58, -110, 104, 9, -79, 43, -24, -95, 17, 60, -95, -71, 40, -12, -96, 8, -104, 127, 57, -103, 48, 125, 27, 22, 56, -68, -107, 126, -16, -43, -95, -61, 22, 45, 110, -71, -106, 21, 17, -33]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey35);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey35);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey35);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey35);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey35);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BEBA20EB6E226639B18D711EB33F4341FB0FF3ABB4F555955A1F4A34DCD07DDE673D60E567E40636D2ED65AB40832F7", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[108, -118, -68, 121, 110, 80, -44, -126, 1, 88, -27, 48, -28, -60, -42, 44]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[73, -115, -113, 33, -23, -71, -120, -59, -114, -116, -126, -99, -66, -38, 120, 107]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[73, -115, -113, 33, -23, -71, -120, -59, -114, -116, -126, -99, -66, -38, 120, 107]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-49, 89, 117, 52, -124, 36, -32, -119, -119, 120, -2, -120, -20, -36, -36, 2]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-62, -60, -114, -114, -20, 121, 24, 96, -114, -5, -68, -45, -89, 4, -126, 106, -30, 86, 53, -42, -7, 25, 0, -36, 17, 11, 5, -108, 113, -80, -21, 30, 108, -118, -68, 121, 110, 80, -44, -126, 1, 88, -27, 48, -28, -60, -42, 44]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C2C48E8EEC7918608EFBBCD3A704826AE25635D6F91900DC110B059471B0EB1E6C8ABC796E50D4820158E530E4C4D62C" + "'", str11, "C2C48E8EEC7918608EFBBCD3A704826AE25635D6F91900DC110B059471B0EB1E6C8ABC796E50D4820158E530E4C4D62C");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "C2C48E8EEC7918608EFBBCD3A704826AE25635D6F91900DC110B059471B0EB1E6C8ABC796E50D4820158E530E4C4D62C" + "'", str12, "C2C48E8EEC7918608EFBBCD3A704826AE25635D6F91900DC110B059471B0EB1E6C8ABC796E50D4820158E530E4C4D62C");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[12, -82, 12, 11, -51, -21, 89, -96, -20, -121, -87, 33, -126, 6, 100, 33]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-105, 46, -124, -88, -78, -97, 97, 97, -11, 99, 18, -19, -73, -53, -105, 17]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[112, -128, -82, -72, -19, -115, 13, -1, -73, -45, -15, 100, 94, 90, 111, 124]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[70, -3, 64, 29, -76, 94, 100, 86, 84, -28, 64, 41, 8, 113, 103, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-23, 84, -128, 37, -90, 10, -3, 49, -71, 1, -62, 28, 96, -60, 103, -14, -24, -22, 68, 75, -90, 62, -42, -72, 17, -79, 23, -39, 88, -55, -117, 67, 112, -128, -82, -72, -19, -115, 13, -1, -73, -45, -15, 100, 94, 90, 111, 124]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-86, -17, 122, 84, -36, -87, -34, -57, 70, 111, 122, 3, 97, 32, -18, 18, -16, -72, 46, 65, 21, 43, 93, 79, 84, -76, -92, -36, 27, -110, 60, 60, 112, -128, -82, -72, -19, -115, 13, -1, -73, -45, -15, 100, 94, 90, 111, 124]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-73, 89, -20, -98, -38, -43, -84, -81, -58, -46, 68, -16, 71, -83, 12, -53, -16, -3, 80, -28, -126, 69, -64, -45, 69, -30, -127, -42, -41, 63, 4, -45, -104, 114, 114, -47, 73, 78, -20, -113, 12, 47, 58, -109, -60, -119, 126, -36, 79, -91, 12, -47, 73, 57, -82, 18, 113, 26, 56, -89, 60, -121, 119, -74, -82, -111, -52, -66, 51, 50, 54, -127, -13, -81, 75, 49, -115, 97, 55, -26, 33, -115, -75, -125, 37, 59, 26, -12, 9, -104, 65, -89, -123, 76, -19, 87, 112, -128, -82, -72, -19, -115, 13, -1, -73, -45, -15, 100, 94, 90, 111, 124]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[61, -29, 33, -52, 109, -6, -99, 76, -77, -83, -115, -42, 99, -33, -88, -92, -61, -50, 21, -49, 60, 19, 5, -127, -99, -121, -41, 39, -42, -80, 89, 13, 112, -128, -82, -72, -19, -115, 13, -1, -73, -45, -15, 100, 94, 90, 111, 124]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[105, 118, 45, 85, 22, 21, -57, -69, 104, -11, 80, -116, -74, 19, 122, -69, 23, 46, -88, 123, 55, -127, -92, -34, -123, 81, 102, -125, 86, 38, 107, -47, -109, -16, 24, -5, -117, 123, -61, -11, -46, 99, 33, -109, 35, 114, 8, -16, -102, -22, -41, -72, -45, -3, -17, 39, 103, 114, 12, -89, 7, 31, 49, -93, -83, -87, -23, -73, -46, 100, -1, -74, 18, -122, -109, 27, -70, -11, -78, -108, -90, 57, 106, -83, -28, -12, 59, 16, 66, 61, -4, 4, 17, 8, -97, -117, 112, -128, -82, -72, -19, -115, 13, -1, -73, -45, -15, 100, 94, 90, 111, 124]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[102, 3, 64, 125, -66, 97, 50, 11, -68, 117, 81, 86, 66, 119, 10, -52, 100, -96, 11, -58, 68, -35, -89, -58, -121, -126, 13, 107, -30, 123, -127, -12, 35, 18, 50, -54, 31, 9, -49, 127, -20, 110, -41, 46, 33, -105, 64, 112, 92, -73, -121, -37, -46, 89, 115, 102, 32, -67, -89, 31, 118, -67, 28, -49, 31, -11, 22, 78, -86, -76, 115, -126, 20, -6, -79, 113, -86, -73, 58, 73, -113, -43, -7, 115, -4, 96, 75, 84, -116, -68, -79, 23, 1, 82, 71, -65, 112, -128, -82, -72, -19, -115, 13, -1, -73, -45, -15, 100, 94, 90, 111, 124]");
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("17E0AC8083E38441C3D1C9CB1EA7D68F", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("785D85238EF6058BD3CBAAA7366D7F415A8722502FC5E50082C9918733F9B3B0C8F7350F7CB66869038D210C0114B59BDA9757FAD4C615A36FB13B100BBE29A286D4D18998E6A4BE07D276C9D4699B9281A29F98AE8D4D678FADD8931E0FE4D12898879AC63D43C168E02747B342775F", secretKey8);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey39);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("785D85238EF6058BD3CBAAA7366D7F415A8722502FC5E50082C9918733F9B3B0C8F7350F7CB66869038D210C0114B59BDA9757FAD4C615A36FB13B100BBE29A286D4D18998E6A4BE07D276C9D4699B9281A29F98AE8D4D678FADD8931E0FE4D12898879AC63D43C168E02747B342775F", secretKey39);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("754266E343523EEADB448EBAE9FAEFB3", secretKey39);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("A85EEBBCD787D3EFFE92687B99D166ECAD0EB36BE3D836513058D3E0DB95BFFD4CEBDBF725A024182EA9F942E6DFFE05DF1657E6F209B91DD38606D31BC3FD0671592F39ACA7DF11DCF13D1A07488324EEDE4AF50EC3E10F3137169C5F334355468B739943C6FD32565FB19FBE8A3BB9", secretKey39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey39);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[116, -41, -123, 65, 125, -21, -82, -56, 9, -64, 61, 87, -98, 65, -100, -123]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-101, -37, -11, -92, -28, 45, 2, 46, -106, -122, -64, -4, 44, 121, 16, -53]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-101, -37, -11, -92, -28, 45, 2, 46, -106, -122, -64, -4, 44, 121, 16, -53]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-57, 40, 28, 36, -55, 39, -55, 20, -24, 64, 47, -41, -115, -96, 118, -88]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-101, -37, -11, -92, -28, 45, 2, 46, -106, -122, -64, -4, 44, 121, 16, -53]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-25, -15, 0, -79, -90, -71, -106, 24, 40, -125, 92, -109, -4, 107, 78, 24, 58, -90, -107, -24, 21, 108, -73, -108, 75, -36, 117, 14, -124, 114, -75, 64, 116, -41, -123, 65, 125, -21, -82, -56, 9, -64, 61, 87, -98, 65, -100, -123]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-84, 101, -53, 0, 8, -38, 93, 7, 35, -21, -54, -124, 86, -88, 67, 52]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[82, 9, -45, 94, 50, 13, -45, -55, 109, 16, 14, 108, 26, -79, 85, -92]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-8, 94, 117, 126, 103, 6, 52, 85, -124, -40, -32, 89, 47, 33, -80, -46]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-81, -42, 93, 59, 9, -115, 39, 13, 126, 53, 61, -74, -119, 2, -35, -116]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-26, 75, -84, -112, 54, -49, -16, 115, -91, 87, -22, 70, 70, 121, 33, -104, -47, 36, 65, 50, 118, -110, -68, -115, 93, 49, -104, 32, 28, 70, 59, 107, -8, 94, 117, 126, 103, 6, 52, 85, -124, -40, -32, 89, 47, 33, -80, -46]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[4, 115, 63, 37, -17, -94, -4, -32, -53, 72, 94, 74, 60, 91, 9, 41, -115, -36, 59, -73, -7, -29, 92, -98, -64, 15, -6, -12, -120, 62, 64, 29, -59, -20, -70, 41, 56, -121, -60, -43, -38, -127, -90, 55, 93, 87, 88, -59, 14, 103, -19, 97, 88, 120, -17, -68, 114, -43, -63, 34, -5, -85, -52, -121, -62, 8, -70, 62, -31, 49, -121, -18, -101, -78, 105, -14, -26, 91, -53, 28, 33, 112, -59, -102, 122, 74, -64, -12, 110, -125, -26, 70, 62, -42, 67, 17, -8, 94, 117, 126, 103, 6, 52, 85, -124, -40, -32, 89, 47, 33, -80, -46]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-30, 43, -63, -106, -53, -4, 50, 101, -115, 41, -112, 74, 2, 56, -51, -102, -127, -26, -82, -123, 1, 96, -64, 12, 85, -92, -27, 79, -9, 50, -110, -37, -8, 94, 117, 126, 103, 6, 52, 85, -124, -40, -32, 89, 47, 33, -80, -46]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-30, -62, 2, 29, 116, -101, -79, 23, 26, 8, -98, -36, -126, 39, 28, -63, -44, -122, -67, 78, 113, -73, 101, 67, -5, 44, 49, -48, 82, -71, 69, 73, -8, 94, 117, 126, 103, 6, 52, 85, -124, -40, -32, 89, 47, 33, -80, -46]");
        org.junit.Assert.assertNotNull(byteArray49);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey43);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey43);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey43);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey43);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey43);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D5B138EBAE2724D405C968AEA189A6B", secretKey43);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("63626A87FD20707093A408ADECBBEF3E095AD0DA2F62A14BF44FF287CF3446B02FF576AEC6B76CB692BB3517AC96DCEA02D5D7E47CBED8FEA9F19206020FF59D975BA5EF25D09F1E6288A54CC1B6D55A67B516A3BD5B885984380C099DBF6B1DB054FC5EBB8CE515B03C3FB45C711B8B14EC10B64A9F25A8C7C0F647255F6DD54DD1AFBDFD7CC684C686722A287E2F08FC21A180F98FE605DCACC1C5284ABCE7A0343561B86DC2250BF787170849B85C962C56C6FD7F0039C83DB57B227277AD92E89D037A19C3F4B6449173EF954EB0ECB3AAB11108E04FF66D8F69CC21A21534166C8DD316300530852BB495A3BBCC", secretKey43);
        java.lang.Class<?> wildcardClass55 = byteArray54.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[45, -91, 3, -117, -49, 0, 29, 62, 15, 77, 17, 96, -16, -35, -82, 103]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-47, -37, -70, 9, -70, 54, -69, -117, 60, -94, 8, -108, 16, 59, 124, -96]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-67, -82, -127, 69, -60, -115, -3, 15, -70, 81, 1, -65, 60, 77, -109, 93]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-46, -76, 100, -108, 5, -101, 49, -94, 18, -75, 103, 55, 34, -45, 81, -75]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[121, 88, -28, -56, -22, -50, 97, 84, -21, 50, -99, 31, -13, 59, -21, -61]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[43, -67, -58, -78, -45, -76, 44, 90, 100, 78, 6, 102, 37, -102, -125, -50]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-53, 114, -107, -100, 92, 118, 73, 86, 1, 76, -30, 64, -97, 74, 62, 26]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-24, 79, 97, 104, -103, -24, 67, -26, 40, -96, 92, 61, -87, -74, -37, -44]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-106, 64, 62, -113, 31, 37, -11, 124, -128, 91, 111, -109, -102, 20, -93, -60, 107, 24, -49, -34, -68, 69, 67, 116, 90, 95, -13, 21, -89, -128, -57, 115, -53, 114, -107, -100, 92, 118, 73, 86, 1, 76, -30, 64, -97, 74, 62, 26]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-37, -71, -103, -103, 25, 100, 27, -99, 32, -87, -96, -54, 52, 100, -15, 55, -115, 92, 11, 14, 112, 117, 18, -15, 46, 71, 29, -78, 32, -45, 52, 63, -53, 114, -107, -100, 92, 118, 73, 86, 1, 76, -30, 64, -97, 74, 62, 26]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-17, 34, 102, -2, -74, -62, 73, 94, -96, -118, -101, 124, -107, -8, 92, -25, 14, 77, 110, 84, -107, 100, 60, 47, 99, -31, -49, -18, 79, -121, -71, -100, -63, 64, -63, -6, -29, -43, 40, 72, 61, 52, -121, 22, -63, -46, 123, -96, 2, 29, 100, -45, 72, -26, -61, 86, 102, 111, -51, 117, -67, 8, 41, -23, -105, -50, -101, 35, 45, -57, 30, 38, -69, -95, 58, 61, 96, -84, -98, -59, -103, -32, 62, 14, 96, -54, 90, 106, 71, 51, -12, 29, 108, -112, 86, 2, -53, 114, -107, -100, 92, 118, 73, 86, 1, 76, -30, 64, -97, 74, 62, 26]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-124, -105, 71, -80, 83, 37, -78, -94, -8, 96, 109, 65, 104, -56, 117, -79, -77, 118, -76, 32, -22, -117, 60, 101, -93, -105, 20, -48, -84, -128, 84, -101, -53, 114, -107, -100, 92, 118, 73, 86, 1, 76, -30, 64, -97, 74, 62, 26]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[35, -79, 62, -34, 107, 127, 33, 8, 64, 103, 70, -113, -26, -40, -125, 19, -13, -89, -49, -41, -50, -75, -123, -111, 63, 38, -18, 3, -37, 96, 51, 78, -53, 114, -107, -100, 92, 118, 73, 86, 1, 76, -30, 64, -97, 74, 62, 26]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("00", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[21, 16, 13, -49, -68, -29, 95, -42, -106, -99, -67, -39, -31, -29, 28, -116]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[53, 97, -52, 67, -65, -40, 82, -57, -9, -87, 95, -26, -121, -127, 88, -39]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[53, 97, -52, 67, -65, -40, 82, -57, -9, -87, 95, -26, -121, -127, 88, -39]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-108, 97, 117, 0, 55, -73, 88, -13, 28, 103, 103, -113, -29, -57, -103, -29, 39, -102, 20, -30, 52, 115, -42, -93, 91, -106, 112, 107, 1, 64, 44, 79, 21, 16, 13, -49, -68, -29, 95, -42, -106, -99, -67, -39, -31, -29, 28, -116]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[121, 5, 67, -117, -122, -32, -45, 69, 4, -50, 97, 67, 32, -113, 105, 105, 55, -13, -1, -110, 48, 88, 106, 95, -34, 80, -68, 37, 69, 93, 9, -87, 21, 16, 13, -49, -68, -29, 95, -42, -106, -99, -67, -39, -31, -29, 28, -116]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[127, 39, -113, 95, -85, 56, 11, 89, 49, 95, 7, -48, -119, -125, 29, 14]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "7F278F5FAB380B59315F07D089831D0E" + "'", str13, "7F278F5FAB380B59315F07D089831D0E");
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D16BA90A77BB0A588B7F9A1F6159665D0FC6ACFBDE19749C54D06809DA5A1522EE00A81F12431CAB708F97CDB0EB0CB", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[62, 1, 32, -36, -19, 48, 24, -95, 72, -17, 49, 78, 125, -112, -35, -94]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-9, 110, -26, 122, -22, 89, -85, -79, 62, -74, 2, 21, 8, 26, -61, -6]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-115, 108, 73, 120, -122, -44, -75, 27, 90, -6, 16, 117, -37, 55, 90, 63]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-46, 99, -64, 86, 113, -2, -36, -15, -118, 109, 39, 95, 107, -11, -44, 96]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-91, -70, 41, -62, 38, -71, -13, -19, 61, -63, 120, 32, -15, 37, -53, 86, 24, 120, -99, -64, 51, 15, 93, -48, 54, 33, 14, -63, -64, 93, 71, 111, -115, 108, 73, 120, -122, -44, -75, 27, 90, -6, 16, 117, -37, 55, 90, 63]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[2, 9, 9, 6, -53, 99, 84, 62, 67, -44, -15, -54, 117, -109, 50, -107, 3, -42, -113, 47, 54, 23, 82, 32, -49, 80, -6, -115, -23, -50, -49, 82, -67, -12, 37, 44, -42, 67, -109, -50, 54, -80, 7, 21, -11, 31, 37, -28, -91, 124, 63, 2, 77, 46, -101, -66, 113, -23, 114, 47, -106, -73, -107, -6, 5, -77, -81, 96, 30, 92, -54, -10, 39, 22, 65, -44, 13, 43, 33, 58, 73, 77, 45, -19, 96, -101, -67, -55, -95, -67, -13, 37, 70, -29, -45, 27, -115, 108, 73, 120, -122, -44, -75, 27, 90, -6, 16, 117, -37, 55, 90, 63]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-115, 108, 73, 120, -122, -44, -75, 27, 90, -6, 16, 117, -37, 55, 90, 63]");
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        java.lang.Class<?> wildcardClass24 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-125, 24, -46, 88, -96, 24, 112, 40, 58, 71, -52, 17, 79, -123, -85, -62]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[71, -76, 19, 5, -121, 21, -105, -109, 118, -17, -56, -113, 79, -113, -2, 99]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[91, -24, -116, -92, 37, 11, 104, -42, 86, 56, 67, -21, 66, -12, -106, 68]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[123, -119, -98, 60, -68, 109, 68, -123, -72, 120, -4, 103, -3, -49, -3, -44]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "F78E82EEE1C65FC927C088432B5A131E7C610EE0D31830AB61C85FC809A38015D7E95A29B4EA08C72A43046072F9DA89B08EDC86593FDEEEFF907837DB662CE7A8075147D2F078714B85A1770B7AAB58A16B1635A8B62A721C2115F21141B197CD0AE6FEEC6F53ADA472119C25F00EA01CB30D7B7733601F406E126366D810AFA3D84553DB958BF4CCCFB2D36F9D9887B7D38B4E731BCB77056392BD2F82AEE53CB953F95D84669DD402820CABA5F5E33CBB6F5D4435FE2662B948A321A4A910186EECE4C87CFE5315264B3E62503CFC0CA8AAE5AC2EC545F2F473C16DDC3F425BE88CA4250B68D6563843EB42F49644" + "'", str23, "F78E82EEE1C65FC927C088432B5A131E7C610EE0D31830AB61C85FC809A38015D7E95A29B4EA08C72A43046072F9DA89B08EDC86593FDEEEFF907837DB662CE7A8075147D2F078714B85A1770B7AAB58A16B1635A8B62A721C2115F21141B197CD0AE6FEEC6F53ADA472119C25F00EA01CB30D7B7733601F406E126366D810AFA3D84553DB958BF4CCCFB2D36F9D9887B7D38B4E731BCB77056392BD2F82AEE53CB953F95D84669DD402820CABA5F5E33CBB6F5D4435FE2662B948A321A4A910186EECE4C87CFE5315264B3E62503CFC0CA8AAE5AC2EC545F2F473C16DDC3F425BE88CA4250B68D6563843EB42F49644");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey33);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey33);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey42);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey48);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey60);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey60);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey60);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c", secretKey60);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey60);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("D7ED78D3EEC190674D51C0C40347823F954FEA5FD5998AC7970B4B21EC7983DA1A1F9D9180FCFF5D0AA59CE6759116A3B7077D2470863013236B3D511817CEAAEFE25FD24881D524870AEAA6BE11898F33DA6B4D3C6A1AC5D82007573AA3E8B36FA486A7C1C6EEC11FBC54A4B2DC8ECA5F3FFC0FCE452EDEBF473F4833C6428A55DA1AC31AC5B8F1CD7E8ACD49EF0CD3EF76DFA15C085329B717FD0369401D1E3648BE1C64EF5182E6C960F30AB7AB2FC0B1C759990395C3855715B053A29160205BCB76643FECEA381FEA4D5DCA7FB173FCB4F475DFA45AF08690EFD66EEBD9FFC5E64C0F37C88B862203776AC1A378", secretKey60);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("9B81C6E367A0128616E38549659C20803D6F05C62470E98C6ECE221E4A1BB20A2B3C5761AF981D74A9ABC4A1773C7188", secretKey60);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-11, -93, 73, -110, -20, 22, 15, -62, 89, 125, 79, 123, -54, 102, -27, -79]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-57, -9, -66, 42, 74, -74, -4, -15, 29, -73, 110, -44, 120, -64, 73, 122]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[60, 56, 109, 118, -5, -42, 56, 44, -37, 120, -30, 114, 26, -59, 119, -25]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[63, -123, 86, -125, 16, -70, -56, -13, 53, -127, -19, -99, -98, -118, 126, -55]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-19, -98, 48, -11, -11, -88, 112, 17, -64, 101, -73, -33, 70, 85, -54, -85]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-92, -4, 93, 73, 124, 24, -81, -9, 25, -81, -3, 48, -49, 84, 32, -18, -116, 55, 96, -39, -80, 18, 88, 123, 96, -6, 13, -116, -123, 80, 31, 29, 63, -123, 86, -125, 16, -70, -56, -13, 53, -127, -19, -99, -98, -118, 126, -55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[75, 110, 122, 107, 73, -83, 69, -99, -64, -34, -117, -24, -115, 15, 50, 69]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-22, -48, 54, 109, -118, 117, -105, -20, 95, 41, 24, 74, 110, -113, -2, -52]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-22, 19, -112, 73, -48, -77, 86, 13, -3, -105, 104, 36, 68, -88, -7, 62]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-95, 83, -14, 10, 110, -80, 37, 25, -30, 12, -49, 102, 93, 28, 37, -46]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-72, -94, 100, -63, -45, 105, 84, 39, 123, 57, 96, 66, 1, -62, -75, 5]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[48, 73, -105, -10, -72, 53, 68, 113, 56, -30, 115, -20, -50, 73, 2, -75]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[48, 73, -105, -10, -72, 53, 68, 113, 56, -30, 115, -20, -50, 73, 2, -75]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[22, -2, -110, -104, 98, -32, 101, 74, 47, -31, -89, -67, -5, -80, -118, 111]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-72, -94, 100, -63, -45, 105, 84, 39, 123, 57, 96, 66, 1, -62, -75, 5]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[64, -34, 99, -103, -76, -95, 6, 3, 33, 16, -74, 110, -38, -54, -21, -120, -60, 63, 81, 37, 101, -42, 59, 4, -51, -87, 110, 25, -87, 123, 20, -61, -69, -93, 118, -9, -43, -18, -20, -126, 71, -64, 87, -108, 35, -45, 73, -126, 79, 51, -29, -73, 12, -11, -77, -65, -123, 2, 10, -34, 22, -123, 124, -94, -62, -54, -10, -110, 78, 41, 41, -70, -89, 25, -86, -20, -88, -37, 20, 120, 66, 41, 4, -55, -8, 73, -51, 41, -22, 33, -104, 91, -68, 92, 45, -94, -72, -94, 100, -63, -45, 105, 84, 39, 123, 57, 96, 66, 1, -62, -75, 5]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-69, -86, 105, -98, -74, -3, -75, -66, 8, 73, -80, -50, 119, 22, 42, 62, -120, 21, -83, -35, 108, 13, 89, -56, -81, 92, 30, 102, 7, -96, -55, -117, -3, -46, -22, 65, -105, -101, 120, -16, 15, 74, 95, -88, -81, 97, 19, 81, -52, 123, 51, -95, -44, -45, -116, -59, -81, 42, 86, -101, -116, -19, 122, 31, 9, 56, -30, -93, -64, -5, 36, 88, -93, -114, 44, 86, 69, 19, 62, -97]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[62, -35, -18, -36, -24, -44, -18, -83, 57, 123, -20, 95, -88, 98, 36, 120, -40, -37, -64, -120, 103, -116, -68, -76, 11, 61, -30, 56, 105, 92, 87, -85, 108, -91, -8, 96, 115, -49, 68, -37, -41, -72, -113, 14, 5, -82, 69, -58, -35, -87, -125, 5, 26, -37, -55, 7, -82, -66, 59, 114, -107, -64, 86, -122, -104, -115, 66, -106, 117, 103, 111, 8, 50, 97, 6, 63, -77, -10, 74, -105, -88, 60, 20, 44, -64, 95, 77, 30, 42, -80, -5, 21, -10, -24, -119, 16, -72, -94, 100, -63, -45, 105, 84, 39, 123, 57, 96, 66, 1, -62, -75, 5]");
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("41723A4F28FB4F7CACD489C998A17CF539C163D3E73CEFEC770FE5A7EAAD7CF5283306F92245F3873D8265AEF9A554DB", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey34);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey34);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey34);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey34);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey34);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey34);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey34);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("E80E4241FE0676EF09F2D514D3B27C11C90DAB62B57AA5E804B3C44F7C346B776030190095C6DBE7F2791CD61EF5123BC198C5A29DBDB9258C6122C36BAB5204AF12EF2541E408BCFE61EA83DE3ABD392FA0DA6C1E233CAC6DCAF953BEAD000F59E9B4C2D1EA61E4B5B2CDA22603325D", secretKey34);
        java.lang.Class<?> wildcardClass48 = byteArray47.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 51, -5, 115, 54, 0, -93, -107, -122, -1, -78, -13, 124, 118, 32, -18]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-28, -102, -29, 123, -12, -13, 123, -53, 63, 29, 20, -35, -48, -12, -28, -50]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-25, 33, -92, -61, -110, -13, -43, 15, 7, -33, 42, 92, -21, 50, 58, -124]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-34, -13, 89, -85, 82, -2, -97, -105, -110, 73, 84, -30, 7, 21, -99, 104]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-90, -46, -4, 106, 93, 113, -64, 39, -50, 12, 109, 0, -8, 126, 103, 75]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-44, -74, 81, 107, -108, -101, 54, -51, -122, 96, 103, 75, -106, 18, 31, 94]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-44, -74, 81, 107, -108, -101, 54, -51, -122, 96, 103, 75, -106, 18, 31, 94]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[17, -89, 107, 19, -70, 41, -58, -95, 97, -100, 109, -70, -124, -121, -90, -12, -119, -9, -8, -62, -25, 122, 84, 6, 64, 126, -21, -53, -19, 116, -31, -25, -90, -46, -4, 106, 93, 113, -64, 39, -50, 12, 109, 0, -8, 126, 103, 75]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[111, -91, 92, 40, 72, -10, 58, 49, -87, -44, 120, -7, 115, -12, 121, 89, -61, 23, -51, -28, 69, -7, 4, 54, 13, 21, -45, -82, 5, -45, 19, 120, -90, -46, -4, 106, 93, 113, -64, 39, -50, 12, 109, 0, -8, 126, 103, 75]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-94, -52, 22, -94, 112, -50, 1, 77, -70, 87, 105, 90, -94, 81, 93, 9, 0, -2, 97, 1, -36, 9, 37, -46, -3, -60, 52, -47, -7, -88, 51, 111, -90, -46, -4, 106, 93, 113, -64, 39, -50, 12, 109, 0, -8, 126, 103, 75]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[34, 74, 12, 111, 58, -97, -120, -109, 93, 55, -46, 70, 17, 31, 46, -10, -65, 77, 66, -125, -59, -72, 99, 65, 46, -25, 97, -13, -104, 91, -81, -119, 81, 11, 114, 48, 18, -60, 7, -76, 122, 38, 6, 62, 30, -110, -102, -96, -26, -27, -59, -8, 120, 120, 90, -70, 89, 51, 118, -35, 56, 80, 112, 50, -11, 103, 40, 54, -100, 123, -83, 93, -92, 91, -83, -71, 50, 64, 59, 6, 40, 36, -24, 0, -16, 29, 121, 91, 42, 45, 69, 118, -19, -48, 116, -88, -90, -46, -4, 106, 93, 113, -64, 39, -50, 12, 109, 0, -8, 126, 103, 75]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[34, 74, 12, 111, 58, -97, -120, -109, 93, 55, -46, 70, 17, 31, 46, -10, -65, 77, 66, -125, -59, -72, 99, 65, 46, -25, 97, -13, -104, 91, -81, -119, 81, 11, 114, 48, 18, -60, 7, -76, 122, 38, 6, 62, 30, -110, -102, -96, -26, -27, -59, -8, 120, 120, 90, -70, 89, 51, 118, -35, 56, 80, 112, 50, -11, 103, 40, 54, -100, 123, -83, 93, -92, 91, -83, -71, 50, 64, 59, 6, 40, 36, -24, 0, -16, 29, 121, 91, 42, 45, 69, 118, -19, -48, 116, -88, -90, -46, -4, 106, 93, 113, -64, 39, -50, 12, 109, 0, -8, 126, 103, 75]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-90, -46, -4, 106, 93, 113, -64, 39, -50, 12, 109, 0, -8, 126, 103, 75]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-76, 127, 67, 19, -48, 56, 70, -57, -62, 118, -29, -105, -85, 82, -7, 93]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[29, 38, -70, 61, -53, 100, 88, 89, -101, -16, 12, 40, -123, -100, -128, 20]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-79, -105, 88, 38, -99, -46, 122, 63, -103, 45, 36, 44, 29, -6, 4, 11]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-61, 81, -3, -80, -38, 54, -33, -47, 89, 69, -103, 88, -116, 84, -7, -113]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[56, 4, 34, -83, 19, 103, -10, -19, 0, 73, 61, 76, 10, -116, 20, 80, -106, -117, -46, -73, -9, -1, -96, -83, 18, -19, 124, -59, 10, 75, -108, -28, -79, -105, 88, 38, -99, -46, 122, 63, -103, 45, 36, 44, 29, -6, 4, 11]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-100, -59, 97, 120, -56, -38, 56, 21, 9, -26, 82, 10, 123, 92, 114, -41, 93, -25, 81, -20, -74, -128, -27, -112, -106, 43, 103, 8, 14, 9, 22, -116, -47, 43, -55, 2, -14, -110, -37, -2, 28, 62, 116, -12, 50, 33, -75, -114, -6, 78, 22, 108, 24, -22, -29, 35, 79, 67, 97, -45, -9, -69, 15, 124, -6, 51, -50, 72, 23, -63, 2, -120, -19, -40, -19, -28, -105, -25, -31, -48, 3, 12, -101, 52, 103, -84, 23, 64, -62, 35, 95, 41, -116, 30, 108, -110, -79, -105, 88, 38, -99, -46, 122, 63, -103, 45, 36, 44, 29, -6, 4, 11]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-100, -59, 97, 120, -56, -38, 56, 21, 9, -26, 82, 10, 123, 92, 114, -41, 93, -25, 81, -20, -74, -128, -27, -112, -106, 43, 103, 8, 14, 9, 22, -116, -47, 43, -55, 2, -14, -110, -37, -2, 28, 62, 116, -12, 50, 33, -75, -114, -6, 78, 22, 108, 24, -22, -29, 35, 79, 67, 97, -45, -9, -69, 15, 124, -6, 51, -50, 72, 23, -63, 2, -120, -19, -40, -19, -28, -105, -25, -31, -48, 3, 12, -101, 52, 103, -84, 23, 64, -62, 35, 95, 41, -116, 30, 108, -110, -79, -105, 88, 38, -99, -46, 122, 63, -103, 45, 36, 44, 29, -6, 4, 11]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[124, 87, 46, -86, -65, 83, -49, 53, 51, 105, -3, -16, 48, -55, 12, -36, -119, -5, -123, -39, 58, 95, -77, 99, 24, -112, 115, -39, 10, -79, -31, -96, 104, -95, 125, -77, 3, -103, 80, 16, -127, 78, 28, -12, 83, -62, 110, -61, 83, 49, 61, -56, 11, 123, 96, -75, -80, -8, 111, -78, -50, -19, -61, -50, -102, -76, -65, 80, -98, 28, 80, -128, -1, -11, -6, -120, 39, 43, -124, 6, -94, -31, -57, -75, -30, -102, -109, -126, 106, 44, -76, 22, 4, 53, -60, 60, -79, -105, 88, 38, -99, -46, 122, 63, -103, 45, 36, 44, 29, -6, 4, 11]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7FA568134806C9105C34D583C29871A41AE5CE04D352F794BBBC55C17CC3D7B2E48B2428828EE039A91A06CFBF22DBA03F23A99544AD69867843E16A8BBCB065F997601695DCE4DA9232998E7CFA9275FD14E9B5BE58653BB989CC8C93C323B9A2602029745C486376259619FE42C1DC969C5F23218132538C69A93E2C46029CAFBCB3A325C55A351897A58F95136EEE2494FA973744222FA873EEAD1E15360A868A656A3C665D51EC62012BA7C41A8A5BF8AD314E65E180BA4087E8D6B89D6623982F2B436A6758077463A37F0FFC47E55DE5DFB67D8B3F67F9F6BD7C9678E01B5950A89DB569E40DEBF8146983CC8", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-65, 84, -1, 61, -73, -1, -102, 122, 13, -102, -36, 105, -102, -33, -36, 109]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-123, -2, 63, 110, -81, 114, 79, 42, 14, 79, -100, -5, 64, 12, 44, 93]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-9, 113, 58, -98, -70, -28, 118, 20, -36, -97, 65, -38, -104, -24, 40, -19]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[71, 29, -57, -13, 69, 112, 13, -50, 74, 88, 43, -106, -64, 105, -98, 23]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-96, -21, -53, 15, -64, -74, 68, 93, -63, -1, 12, -12, 63, -2, 61, -22, 17, 12, 8, -15, -83, 15, 75, 88, -71, 86, 18, 8, -20, 88, -117, 15, -9, 113, 58, -98, -70, -28, 118, 20, -36, -97, 65, -38, -104, -24, 40, -19]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[88, 117, 125, 102, 9, -34, 22, -105, -80, -13, -105, -102, -8, 58, -5, 111, -26, -17, 37, 42, -125, 108, -107, 121, 48, -47, 77, -55, -120, -118, 106, 54, -9, 113, 58, -98, -70, -28, 118, 20, -36, -97, 65, -38, -104, -24, 40, -19]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[104, -116, 51, -7, -52, -67, -18, -7, 8, -123, 48, -107, 108, -75, 66, -90, 119, 5, -47, -122, 51, 30, 104, 25, 51, 78, -112, 77, 97, -33, -64, 41, -117, 88, -5, 122, 57, 111, 48, -118, -16, 32, -65, -56, 34, 50, -74, 91, 48, 37, 79, 33, -12, 117, 93, 36, 121, 86, -111, -69, 100, 40, 45, 32, -37, 98, 72, -72, 9, 105, -35, 107, -93, -23, -62, -117, 46, -70, -87, -24, 113, 31, -7, 93, 5, 104, -90, -125, -45, -120, -77, 123, -43, -59, -109, 24, -9, 113, 58, -98, -70, -28, 118, 20, -36, -97, 65, -38, -104, -24, 40, -19]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, -116, 51, -7, -52, -67, -18, -7, 8, -123, 48, -107, 108, -75, 66, -90, 119, 5, -47, -122, 51, 30, 104, 25, 51, 78, -112, 77, 97, -33, -64, 41, -117, 88, -5, 122, 57, 111, 48, -118, -16, 32, -65, -56, 34, 50, -74, 91, 48, 37, 79, 33, -12, 117, 93, 36, 121, 86, -111, -69, 100, 40, 45, 32, -37, 98, 72, -72, 9, 105, -35, 107, -93, -23, -62, -117, 46, -70, -87, -24, 113, 31, -7, 93, 5, 104, -90, -125, -45, -120, -77, 123, -43, -59, -109, 24, -9, 113, 58, -98, -70, -28, 118, 20, -36, -97, 65, -38, -104, -24, 40, -19]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "66579472A5B01E7EE6467C91FFEE13646FCDDD0003181ABCE17EC2645DAC75642A84911518DEADF2948CA2ED37CDD67B532705BC6EBE39556036A36F45FDC789E6290B594A0C5B01E04F1DE240110865F309861891F66A42B8882288B4DC9D5739DAD35F6CA49E160DB399A863173DF6843B9A0DF5CD446B016017C069FC05A129BCF3DEB453EA7CC8184080FB987DCC0A23BDC1B7799091A55381A0FE1821FDA21ACEFD225443164BDA02705CBFEAC153CD0E32875054B0635774CF0C81389068AE29A43F128D881FBDA82D7314154F2745A178257F6BCF4A61603CAF3B273869EFB737D5FE044FA33273D1939594C784D2DB4A6D17AB38CD60AFD1D71E8200BD84A38CCECA91F772FE13F3D91CAD3BE5E03737D7ADC3A06F8FF5F08229AA58E993C032AACA9C5E92D140F7BBA3E4345201B98AD6BFC2D6E19A7F5B179BE4039EC1D0E213DF510AE567454CA28BEE45BC55E3BAF728418180EA4FE237273B723B14C37D83B977967F99446662FAEE09C4AEA7AD78F605B7B13A55D599423DCECC227CB6262A8CB1A14A6971700D3C1E7B3173031DE8EB877D5DA1237D0DDFEAF4A4BB9DE00FEC43C90C89249E7E00330E7A7CF0F05AB7F3E743E5EB78B74B058D6413646563BB54FDC30F7D454B4A7C15D7AD1EFDFDD791C2F00282FE00D597F7713A9EBAE47614DC9F41DA98E828ED" + "'", str31, "66579472A5B01E7EE6467C91FFEE13646FCDDD0003181ABCE17EC2645DAC75642A84911518DEADF2948CA2ED37CDD67B532705BC6EBE39556036A36F45FDC789E6290B594A0C5B01E04F1DE240110865F309861891F66A42B8882288B4DC9D5739DAD35F6CA49E160DB399A863173DF6843B9A0DF5CD446B016017C069FC05A129BCF3DEB453EA7CC8184080FB987DCC0A23BDC1B7799091A55381A0FE1821FDA21ACEFD225443164BDA02705CBFEAC153CD0E32875054B0635774CF0C81389068AE29A43F128D881FBDA82D7314154F2745A178257F6BCF4A61603CAF3B273869EFB737D5FE044FA33273D1939594C784D2DB4A6D17AB38CD60AFD1D71E8200BD84A38CCECA91F772FE13F3D91CAD3BE5E03737D7ADC3A06F8FF5F08229AA58E993C032AACA9C5E92D140F7BBA3E4345201B98AD6BFC2D6E19A7F5B179BE4039EC1D0E213DF510AE567454CA28BEE45BC55E3BAF728418180EA4FE237273B723B14C37D83B977967F99446662FAEE09C4AEA7AD78F605B7B13A55D599423DCECC227CB6262A8CB1A14A6971700D3C1E7B3173031DE8EB877D5DA1237D0DDFEAF4A4BB9DE00FEC43C90C89249E7E00330E7A7CF0F05AB7F3E743E5EB78B74B058D6413646563BB54FDC30F7D454B4A7C15D7AD1EFDFDD791C2F00282FE00D597F7713A9EBAE47614DC9F41DA98E828ED");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "66579472A5B01E7EE6467C91FFEE13646FCDDD0003181ABCE17EC2645DAC75642A84911518DEADF2948CA2ED37CDD67B532705BC6EBE39556036A36F45FDC789E6290B594A0C5B01E04F1DE240110865F309861891F66A42B8882288B4DC9D5739DAD35F6CA49E160DB399A863173DF6843B9A0DF5CD446B016017C069FC05A129BCF3DEB453EA7CC8184080FB987DCC0A23BDC1B7799091A55381A0FE1821FDA21ACEFD225443164BDA02705CBFEAC153CD0E32875054B0635774CF0C81389068AE29A43F128D881FBDA82D7314154F2745A178257F6BCF4A61603CAF3B273869EFB737D5FE044FA33273D1939594C784D2DB4A6D17AB38CD60AFD1D71E8200BD84A38CCECA91F772FE13F3D91CAD3BE5E03737D7ADC3A06F8FF5F08229AA58E993C032AACA9C5E92D140F7BBA3E4345201B98AD6BFC2D6E19A7F5B179BE4039EC1D0E213DF510AE567454CA28BEE45BC55E3BAF728418180EA4FE237273B723B14C37D83B977967F99446662FAEE09C4AEA7AD78F605B7B13A55D599423DCECC227CB6262A8CB1A14A6971700D3C1E7B3173031DE8EB877D5DA1237D0DDFEAF4A4BB9DE00FEC43C90C89249E7E00330E7A7CF0F05AB7F3E743E5EB78B74B058D6413646563BB54FDC30F7D454B4A7C15D7AD1EFDFDD791C2F00282FE00D597F7713A9EBAE47614DC9F41DA98E828ED" + "'", str32, "66579472A5B01E7EE6467C91FFEE13646FCDDD0003181ABCE17EC2645DAC75642A84911518DEADF2948CA2ED37CDD67B532705BC6EBE39556036A36F45FDC789E6290B594A0C5B01E04F1DE240110865F309861891F66A42B8882288B4DC9D5739DAD35F6CA49E160DB399A863173DF6843B9A0DF5CD446B016017C069FC05A129BCF3DEB453EA7CC8184080FB987DCC0A23BDC1B7799091A55381A0FE1821FDA21ACEFD225443164BDA02705CBFEAC153CD0E32875054B0635774CF0C81389068AE29A43F128D881FBDA82D7314154F2745A178257F6BCF4A61603CAF3B273869EFB737D5FE044FA33273D1939594C784D2DB4A6D17AB38CD60AFD1D71E8200BD84A38CCECA91F772FE13F3D91CAD3BE5E03737D7ADC3A06F8FF5F08229AA58E993C032AACA9C5E92D140F7BBA3E4345201B98AD6BFC2D6E19A7F5B179BE4039EC1D0E213DF510AE567454CA28BEE45BC55E3BAF728418180EA4FE237273B723B14C37D83B977967F99446662FAEE09C4AEA7AD78F605B7B13A55D599423DCECC227CB6262A8CB1A14A6971700D3C1E7B3173031DE8EB877D5DA1237D0DDFEAF4A4BB9DE00FEC43C90C89249E7E00330E7A7CF0F05AB7F3E743E5EB78B74B058D6413646563BB54FDC30F7D454B4A7C15D7AD1EFDFDD791C2F00282FE00D597F7713A9EBAE47614DC9F41DA98E828ED");
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey37);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        byte[] byteArray50 = new byte[] {};
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey56);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey56);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey56);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("DF705BEEB56913FF5873FDFD9AA95E89B9B39BC2F7A9286D5745773D58F30E39CB5429CC2E48A933FA92A3983738776225693D266BCBC299D778E453B27C9068289066AF7EA9C02B184F40A5B6D52A571FDFDCD1494D5A88E075857FBA94ACA9D56490816A81364253EFA80DDC70C2FDD81B9FDAC933F3D91FFEF85D0495943A92860C5E2EDB89AD3172D617E86EAA9A6F6E2451923AD1921C842212751909BC383C70B0DFE0AE075C71539195CCBABA76951DA88FC9BBF9185E2099484EE0872288F48174FF499080AC2F9D3F353C3D426D4EDB16835979B0CCD8F030432D8D72FD34E3215E8251B9886EFA0081F6E8", secretKey56);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("85C04DE2D06B5601CC992C2D435B4F9FFB85498EB2E09905C5DCEB1B33F2DE4136BF80E466268BFF8AD427B1DC8DF208E0716ADC5320286F978C13F26004A49BB7791F0B640B0A44C2F6AF77B8C4787356B9A59EF0E2A37D14D9933C5E93C07E1F8B21069C2BFA438D55F41DADFCBBB388444FEC486F7334822579B996CBD1EFA879CAF2D5CD2C23ACE87C21D07A6179AD0EF531527502AA389CD9BDEF9C200DF21A65B408A31CFFF099B76EC3000048CD435D32D61E0055CD6066AFF634BEC2C97E99087EFF52A724C4ED2ECD0ADE9D4DDF866E60FD8D28DE6E7B53D7A3214FAE93D100A1CDD31E81C165DDAFEC6B93", secretKey56);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey56);
        java.lang.Class<?> wildcardClass67 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-126, -56, -35, 61, 97, -93, -13, -95, 15, -35, -98, 74, 125, 20, -59, 20]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[20, 88, 71, 48, -32, 68, 45, -72, 12, 8, -74, 44, 93, 74, -90, 96]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[20, 88, 71, 48, -32, 68, 45, -72, 12, 8, -74, 44, 93, 74, -90, 96]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-110, -19, -106, 20, -35, -56, 61, 54, 26, -23, -57, -47, 68, -24, -8, -93]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-105, 36, 7, 119, -24, -35, -75, 91, 84, 34, 99, -105, 47, -99, -44, -11]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[103, -52, -122, 86, 119, -70, 124, -110, 119, -115, -124, -70, -38, -115, -65, -12]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[103, -52, -122, 86, 119, -70, 124, -110, 119, -115, -124, -70, -38, -115, -65, -12]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[52, -21, -29, 127, 20, -118, -42, 106, -114, -93, -128, -32, -70, 42, 8, 56, -111, -70, -120, 62, 36, -52, 16, 102, 31, 61, 62, -101, -124, 51, 12, 30, -105, 36, 7, 119, -24, -35, -75, 91, 84, 34, 99, -105, 47, -99, -44, -11]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-105, 36, 7, 119, -24, -35, -75, 91, 84, 34, 99, -105, 47, -99, -44, -11]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey33);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey33);
        java.lang.Class<?> wildcardClass42 = secretKey33.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[95, 47, -102, 31, -108, 26, -51, -64, 18, 118, 102, 21, -28, -64, -92, 108]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-34, 25, 32, -97, -66, -53, -112, 3, 15, -34, 17, 36, -84, 76, 88, -72]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-34, 25, 32, -97, -66, -53, -112, 3, 15, -34, 17, 36, -84, 76, 88, -72]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-27, -68, -99, 16, 38, -34, -36, -55, -113, -97, 33, -86, -5, -96, 127, -126]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[8, -12, 44, -8, -73, 61, -119, -53, 18, -76, 85, 24, 122, -108, 35, -98]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[98, -107, -81, 99, -119, -65, -34, 1, -57, 98, -93, 4, 127, -98, 100, 92, -111, 45, -109, 108, -112, -34, 41, 47, 69, 83, -93, 60, -64, 86, -15, -31, -27, -99, 34, -38, -66, -56, 67, -43, -8, 105, 34, -94, -47, 62, 124, -128, 116, 119, -77, 61, 115, 105, 95, 44, -99, -119, 65, 66, -38, -40, 102, -52, -34, -2, -24, 97, 23, -101, 118, 20, 102, -65, -97, -45, 92, -126, -110, 50, 97, 107, -81, 124, 16, 126, -45, -75, 71, 36, 97, -60, 81, -69, -16, -26, -27, -68, -99, 16, 38, -34, -36, -55, -113, -97, 33, -86, -5, -96, 127, -126]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-37, -87, -40, -22, -39, -21, 46, 13, -118, -5, 28, -99, 90, -15, 23, 59]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-85, -45, -125, 1, 119, 49, -63, -38, 110, -19, 115, 10, 97, -40, 112, -57, -57, 69, 124, -33, 40, -117, 29, 73, -116, 23, 11, 27, -116, 92, -1, 84, -27, -68, -99, 16, 38, -34, -36, -55, -113, -97, 33, -86, -5, -96, 127, -126]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB05108861568B77067864E393C66A651FA7D65C7972104CEC7664A6D568630EFF7F44008DECFABECC47EF00F1E1F507", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("CFC68745A7221D8A740129D431C9A93A", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-18, 47, 91, 10, 25, -74, 33, -125, -83, 4, 127, -2, 85, 108, 57, 6, 124, 26, 97, 72, -34, 127, -104, 25, 8, -13, -112, -50, 57, 52, -113, 72, -28, -28, 19, -9, 78, -49, -21, 112, 96, 1, 54, 36, 49, 3, -85, -62, -55, -64, 98, -97, 50, -21, 121, -1, -32, -123, 112, 108, -44, -76, 96, -26, 74, 73, -51, -30, -73, 85, -81, 80, 36, 81, -117, -44, -26, 73, 7, -80, -20, -106, -98, -109, -48, 51, 85, -122, -28, -71, 46, -17, -117, 28, -110, 76, -25, 108, -107, 102, 7, 107, -128, 34, -29, -105, 25, -103, 94, 112, 42, -38]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-46, -85, -76, -41, -70, 51, 94, -93, -85, 62, -81, -45, 100, 81, 80, -8, -119, 40, -107, -110, -70, -122, 5, 114, -38, -5, -70, -89, 104, 92, -82, -100, -25, 108, -107, 102, 7, 107, -128, 34, -29, -105, 25, -103, 94, 112, 42, -38]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "D2ABB4D7BA335EA3AB3EAFD3645150F889289592BA860572DAFBBAA7685CAE9CE76C9566076B8022E39719995E702ADA" + "'", str5, "D2ABB4D7BA335EA3AB3EAFD3645150F889289592BA860572DAFBBAA7685CAE9CE76C9566076B8022E39719995E702ADA");
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey57);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey57);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey57);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey57);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey57);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("468A186984B6CE8DCF787F1E5A47C6FE", secretKey57);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("7CA49FB87215185DDB50BA3084C558F36D00F53E952403E977CB3632DE840FE960FDBC24442AAAB8B37E391826BC1C1E87980A92D112094033FD24B876593F2EF6182DB6D31A14F6B8E49CEEC74CA7003F717F754356175B555ECF25F8DE63FBA48E91FA121C2BA2CB8028DB8F7D15CD", secretKey57);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("6F7D05636AEE98C69B6B8F619D3F6EC336C40E9643042D7916A7D65A75A9B2A8A7DE37EA752BF948E8DEAC7E2D940AAE", secretKey57);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("E0BF086C8A263E9B7DBA6AF296141ED3DBD431DDDA61E8980CA8EE05399F22BCB5641D13C441149F1ACA4B7A97FFAA3C544D61395159367F9ED3537A8358D158038D687AA275B0791A6A20BE56E5EF75EBEE65BF228CEB97785211C3AE7C0722F4C4B7351706331143E8CE2DC2FF86BAC1DE715E96B939692D60B2872C8E2F26556AC2D2A3BA76EDC7722081F558EBADA42A4135378BC7494C7E8F9B298BD50F08A7E29EE37F82E21798DFB90707E14E8AD7029760F06C68BAD044ADC7099251F4C38482B488CF7FE5585FBA27D0C6D372D5775A83D73A7C39B0159F581EBAB6FA7556129B73CE3E8A4A8057AE82E9FD", secretKey57);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[104, 80, 117, 100, 26, -72, 18, 116, 114, -45, 106, 5, 41, -89, -44, -79]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[50, 25, 14, 0, 107, -13, 36, 14, 65, -35, -106, 96, -90, -66, 104, -90]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[89, 35, 2, 33, 65, -73, 67, 113, -99, 122, 72, -1, -8, 54, -104, -80]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-103, -12, -35, -82, -85, -56, -34, 118, 42, 82, 60, -45, -118, -123, -73, 60]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[30, 62, -114, -20, 64, 123, 78, -117, -66, 38, -124, 38, 87, 117, -25, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[39, -60, -59, -82, 111, 8, 40, 119, -19, 11, 0, -72, -113, -105, -74, 119]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[46, 34, -31, -20, -92, 26, 97, 26, -124, 21, -83, 21, 110, -43, 56, -13]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-52, 99, 30, -41, -71, 75, -111, -96, -15, 56, 110, 52, 73, 85, -40, 54]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-25, 39, 80, 119, -31, -2, -128, -9, -63, 120, 93, 83, -95, 114, -127, 97]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[122, 81, -118, -94, 4, 10, 4, -78, 125, 12, -85, 119, 35, 24, 12, -16]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[64, -67, 98, 34, 36, 122, 7, -20, 77, -56, -31, -112, -127, 43, -57, 116]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-25, 39, 80, 119, -31, -2, -128, -9, -63, 120, 93, 83, -95, 114, -127, 97]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-19, -18, -35, -102, 18, -73, 124, 51, -49, -93, 56, -81, -105, 65, 53, 15, -71, -21, -87, -11, 1, -94, -97, 82, 117, 72, 8, -73, -14, -69, -15, -61, -25, 39, 80, 119, -31, -2, -128, -9, -63, 120, 93, 83, -95, 114, -127, 97]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-25, 39, 80, 119, -31, -2, -128, -9, -63, 120, 93, 83, -95, 114, -127, 97]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, -117, -123, -59, 49, 2, 47, 36, -121, 61, -32, 41, -111, 109, 92, 35, 106, 93, 19, 58, 31, 31, -7, -82, 93, -26, -70, -13, -13, -9, 87, -44, -25, 39, 80, 119, -31, -2, -128, -9, -63, 120, 93, 83, -95, 114, -127, 97]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-60, -68, -16, -126, 109, -22, -128, -11, -124, -100, -48, -105, -25, 28, 31, 97, 19, 47, -37, 72, -80, -96, -80, -43, -124, 36, 97, -113, -96, -52, 25, 15, -106, 79, 33, 61, 36, -45, 0, 43, -102, 101, -34, -9, 87, -55, -31, 72, -11, -42, -29, -85, -68, -24, 115, 34, -94, -94, 91, 3, -13, 102, -55, 44, -37, 94, -81, 37, 44, -73, -55, 64, -110, 124, -66, -111, -19, 80, -98, -123, 37, -108, 117, -94, 48, -122, 105, 39, -20, -98, -84, -112, 115, 93, 88, -41, -25, 39, 80, 119, -31, -2, -128, -9, -63, 120, 93, 83, -95, 114, -127, 97]");
        org.junit.Assert.assertNotNull(byteArray70);
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey26);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey26);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey26);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey26);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey26);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey26);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("BC852F10573BFB3EA459BBCF4C89C3DBD413E1B63A46E3F619320989BEF3CCCC01C9AE48D9635E142E93469B2822DF9576950499ABB9FF7790A445388419C22FE7F5ED261F10A6CE93CE6FCCA72D4E911FCAFD033250E3A80D90E2D68C75C4DD7A44F24529D06692ECE32AD0DAC7E22B", secretKey26);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("0C5E2323881B3C3083B04B90BA044F96", secretKey26);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("8CE30672D5D8447E1E4CBAA8025B8586FC5D95D27787390CB64EC298C8330F7CAF95EDB06732F7415C3EEF8F5690BDF1", secretKey26);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("DA400409218BE567A972F473999A779D4D56BE1A415FEF1BD3C6D90A0F3BACB1136EA723893FB4FD62C4595733714418F15A8AED58D20FD7BEF9B501D8015D98E97B80874DBFB85B8CFC14A1E6F7B827E6818BAA1A1E55E940A4D18269D60DC4D9A25DBC211A26DC32FE0F9BFCFA20A4", secretKey26);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-105, -96, 68, 25, 45, 38, 65, 98, -59, -56, 33, 79, 38, -78, -21, -96]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-42, -57, 101, 127, -71, -41, 118, 111, -8, 12, 49, 103, 73, 26, -52, -89]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-26, -11, -6, -48, -37, -51, 112, -49, -26, 85, -114, 121, 124, 127, -79, 4]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[83, 94, -40, -24, -13, -59, 111, 120, 73, 120, 45, -87, 122, -74, 53, -117]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[86, -3, 96, -26, -128, 123, 78, 30, -97, 81, 62, -63, 70, 59, -60, 64, 38, 107, -52, -19, 5, -35, -87, -13, 26, 61, -85, 23, 56, -92, -72, -59, -26, -11, -6, -48, -37, -51, 112, -49, -26, 85, -114, 121, 124, 127, -79, 4]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[40, 83, 33, 28, -99, -44, 83, -91, 75, 100, -84, -67, -86, -65, 4, 38, -72, 96, -22, 37, 33, -39, -32, 98, 12, -19, -98, 124, 7, 116, -87, -87, -26, -11, -6, -48, -37, -51, 112, -49, -26, 85, -114, 121, 124, 127, -79, 4]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-87, -14, 11, -72, -61, -17, -31, 37, -15, 10, -32, -18, 23, -16, -96, -74, 124, 122, -82, -66, 75, 35, 82, 21, -58, -104, 27, 84, -87, 68, 33, 4, 101, -60, 47, -51, 20, 116, -36, 22, 106, -47, 31, -64, 103, 69, 62, -124, 97, 103, 49, -119, -102, -93, 97, 70, 26, 124, -124, -42, 29, -105, -108, -6, -120, 116, 75, 121, -62, -104, -103, -40, 6, 83, -67, 48, -2, 63, -58, 23, -84, 53, -27, 70, 46, -81, 43, 59, 72, -30, -46, -53, 99, -117, 100, 56, -26, -11, -6, -48, -37, -51, 112, -49, -26, 85, -114, 121, 124, 127, -79, 4]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-87, -14, 11, -72, -61, -17, -31, 37, -15, 10, -32, -18, 23, -16, -96, -74, 124, 122, -82, -66, 75, 35, 82, 21, -58, -104, 27, 84, -87, 68, 33, 4, 101, -60, 47, -51, 20, 116, -36, 22, 106, -47, 31, -64, 103, 69, 62, -124, 97, 103, 49, -119, -102, -93, 97, 70, 26, 124, -124, -42, 29, -105, -108, -6, -120, 116, 75, 121, -62, -104, -103, -40, 6, 83, -67, 48, -2, 63, -58, 23, -84, 53, -27, 70, 46, -81, 43, 59, 72, -30, -46, -53, 99, -117, 100, 56, -26, -11, -6, -48, -37, -51, 112, -49, -26, 85, -114, 121, 124, 127, -79, 4]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[120, 60, -34, 101, -75, 23, -94, -40, 66, 59, 73, 27, -50, -113, 120, -28, 5, 63, 43, 91, -107, -120, 4, 20, -48, 121, 114, -119, -61, -62, 45, 1, 49, 126, -111, 126, -21, 99, -40, 102, -35, 48, 93, -74, 27, 86, 17, -109, 90, -97, 68, 10, -27, 60, -56, -118, 43, 15, 88, 89, 113, 10, 53, 70, 1, 63, -8, -79, 26, -47, -101, 46, -75, -28, 46, 38, 49, 7, 83, -108, 9, -47, -51, 23, -118, 101, 81, 50, -119, -104, -79, -25, -72, 54, 16, 69, -26, -11, -6, -48, -37, -51, 112, -49, -26, 85, -114, 121, 124, 127, -79, 4]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[125, -101, -117, -86, 112, 124, -112, -86, 52, 73, 57, 78, -17, 103, -56, 108, -76, 55, -19, -83, 59, 3, 91, -86, 32, -103, 66, -128, -110, 44, -10, 86, -26, -11, -6, -48, -37, -51, 112, -49, -26, 85, -114, 121, 124, 127, -79, 4]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[73, 59, -23, 45, 114, -115, 116, -38, 53, 29, -56, 27, 106, -127, -21, -4, -70, -41, 73, -82, 49, 99, 8, 94, 12, -14, 83, 102, -63, -80, -11, -75, -26, -11, -6, -48, -37, -51, 112, -49, -26, 85, -114, 121, 124, 127, -79, 4]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-38, 45, -23, 94, -118, -118, -82, -88, 89, -95, -68, -28, 24, -1, 52, 38, 47, 7, -74, 122, -6, 74, -109, 58, 57, -121, -42, -90, -32, -12, -79, -30, 100, 43, -42, -90, 16, -31, 100, 48, -118, 66, -78, -32, -101, -46, 99, -115, -49, 9, 12, -7, 82, -48, 106, -103, 8, -53, -104, 83, 74, 115, -124, -77, -69, 96, 118, -88, 97, -50, -30, 43, 117, 19, -64, -126, -116, -84, -126, 46, -78, 30, 21, 84, -43, 63, 126, -41, 58, -76, 92, -101, -7, 8, 81, 24, -26, -11, -6, -48, -37, -51, 112, -49, -26, 85, -114, 121, 124, 127, -79, 4]");
        org.junit.Assert.assertNotNull(byteArray40);
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey38);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey38);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("9DB241B05DF020FCF4F640C4736F16E0BCE52DB85631A435E6C5E961238DB2339CF5FB057C40246BC45CD06EC29EDF788FC22583EE17ED7882B3BD36D637360B88EDDD8BEFF5B6853DB9FD594F577DA46137B7FA57FEA0E880F6B35CB3920B98A61572EC5BADBB0B351CBA251193D256", secretKey38);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey38);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E40AC1D0FC9DE44A4B01EA3BCD68E6F12051B1B4133ECDB32CC824D1A187AB4BBCCF67A43726440147B2ECBAD4CFE892", secretKey38);
        java.lang.Class<?> wildcardClass47 = byteArray46.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[101, 17, 18, 123, -13, 103, 33, 72, 52, -22, 98, 4, -101, -13, -61, 87]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -94, 72, -90, -89, -90, -8, -98, -112, -58, -117, 28, 110, -88, 103, -50]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[24, -48, -98, 23, 112, 8, 117, 118, 52, 45, -27, 97, 127, 64, -60, 27]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[85, -108, 82, -96, 74, 44, 83, 62, -99, 86, 18, -37, 5, 24, 95, -75]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[85, -124, -85, -15, 121, 100, -74, 33, -101, 39, 24, 99, -97, 124, -74, 83]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-5, 107, -88, 72, -38, -29, 46, 11, 11, 43, -25, -5, -39, 40, -80, 27]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-5, 107, -88, 72, -38, -29, 46, 11, 11, 43, -25, -5, -39, 40, -80, 27]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[124, -92, 108, 23, 48, 8, -88, -83, 120, 57, 74, -86, 110, 122, 28, 78]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-111, -127, 94, -57, 110, -69, -37, 58, -38, -41, 13, -38, -71, -78, -81, 56]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-111, -127, 94, -57, 110, -69, -37, 58, -38, -41, 13, -38, -71, -78, -81, 56]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[34, 38, -72, 119, 50, 31, -4, -62, -93, -9, 79, 121, 8, 61, 91, 109, -72, -77, -107, 121, -35, 99, 107, 29, -83, -32, -92, 126, -92, -45, -92, -115, 124, -92, 108, 23, 48, 8, -88, -83, 120, 57, 74, -86, 110, 122, 28, 78]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-105, -33, 63, 49, -18, -121, 64, -78, -62, 94, 91, 53, 52, 27, -91, 74, -41, 19, -40, 11, 81, -23, -119, 126, 8, 10, 1, -119, -121, -123, -25, 123, 95, 43, 17, -40, -59, -18, 76, 1, -50, 17, -74, 105, 126, 76, -53, 2, 29, 89, -26, -113, -94, 24, -120, -68, -77, -47, 59, -98, -69, 116, 124, 45, 73, 14, 10, 125, 23, 54, -5, -12, 47, 33, 84, 114, -72, -109, 76, 88, 124, -78, 31, -89, -112, 62, -57, -56, 123, 16, -81, -48, 54, -79, 60, 64, 124, -92, 108, 23, 48, 8, -88, -83, 120, 57, 74, -86, 110, 122, 28, 78]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-105, 125, -47, 11, -34, 23, -29, 24, -4, 106, -81, 54, -24, 49, -41, 93, 120, 94, -99, -26, 30, 48, 6, 49, -65, 61, -50, 67, -42, -100, -114, 66, 102, -98, 81, -42, -9, 29, 31, -100, -38, -108, 65, 73, 53, 41, -23, 108, -93, 52, -98, -53, -8, 109, -98, 81, 43, 122, -71, 103, 56, -72, 75, 5, -101, 111, 124, 17, -77, 19, -28, -27, 106, 25, -76, 8, 122, 62, -13, 62, 67, -55, 125, 15, 20, -1, 41, -104, 89, -101, 118, 69, -104, 6, 68, -48, 124, -92, 108, 23, 48, 8, -88, -83, 120, 57, 74, -86, 110, 122, 28, 78]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey14);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey22);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("124E29AE9E2784AED0D288BA33069A241736C281019F61ADC0E82C7450DD9A74C2236DEB11602C7133188D9822131724", secretKey22);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.Class<?> wildcardClass31 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-13, 104, -65, -61, 123, -58, 118, -68, 69, -75, 92, -22, -126, -9, 82, 93]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[38, 87, 119, -41, -79, -82, -89, -12, -29, 105, 105, -117, -29, 54, -83, -6, -25, -78, -14, 51, -127, 51, 20, -10, -53, 60, -54, 42, -20, -53, 65, -29, -56, 31, 1, 45, -54, 38, 37, 3, -40, 5, -1, -75, 84, -125, -103, 92]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-56, 31, 1, 45, -54, 38, 37, 3, -40, 5, -1, -75, 84, -125, -103, 92]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-28, 15, -13, -9, 89, -40, -95, -123, 71, 119, -15, -123, -21, 98, -122, 81, -90, 75, -57, -70, 6, -42, 29, -33, 5, -73, 115, -93, 93, 45, -22, -50, -64, -15, 58, 33, 76, 15, -15, 83, 60, 6, 98, -66, 10, -51, 10, 1, -54, -119, -38, 123, 127, -122, 121, 102, -21, -60, -51, 86, 23, 70, 113, 107, 5, -48, -52, 57, 22, -35, 122, -7, 41, 72, -123, 23, 95, 97, -125, 0, -115, 49, -57, -102, -63, 27, 86, -21, -49, -18, -26, 4, 107, 0, 1, 1, -56, 31, 1, 45, -54, 38, 37, 3, -40, 5, -1, -75, 84, -125, -103, 92]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "E40FF3F759D8A1854777F185EB628651A64BC7BA06D61DDF05B773A35D2DEACEC0F13A214C0FF1533C0662BE0ACD0A01CA89DA7B7F867966EBC4CD561746716B05D0CC3916DD7AF9294885175F6183008D31C79AC11B56EBCFEEE6046B000101C81F012DCA262503D805FFB55483995C" + "'", str29, "E40FF3F759D8A1854777F185EB628651A64BC7BA06D61DDF05B773A35D2DEACEC0F13A214C0FF1533C0662BE0ACD0A01CA89DA7B7F867966EBC4CD561746716B05D0CC3916DD7AF9294885175F6183008D31C79AC11B56EBCFEEE6046B000101C81F012DCA262503D805FFB55483995C");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "E40FF3F759D8A1854777F185EB628651A64BC7BA06D61DDF05B773A35D2DEACEC0F13A214C0FF1533C0662BE0ACD0A01CA89DA7B7F867966EBC4CD561746716B05D0CC3916DD7AF9294885175F6183008D31C79AC11B56EBCFEEE6046B000101C81F012DCA262503D805FFB55483995C" + "'", str30, "E40FF3F759D8A1854777F185EB628651A64BC7BA06D61DDF05B773A35D2DEACEC0F13A214C0FF1533C0662BE0ACD0A01CA89DA7B7F867966EBC4CD561746716B05D0CC3916DD7AF9294885175F6183008D31C79AC11B56EBCFEEE6046B000101C81F012DCA262503D805FFB55483995C");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6EA4E116455BC7AF3FB5BF064D6F874CB5F555408DB9AD9F9733DFD99DAC4D7FEEE704EFF20D5601E11B02E83309E581", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey43);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey43);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey51);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        byte[] byteArray72 = new byte[] {};
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray72);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey74);
        javax.crypto.SecretKey secretKey78 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey78);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey78);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey78);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey78);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey78);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey78);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey78);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey78);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey78);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey78);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-61, 38, 121, -58, -59, -12, -59, -45, -116, 17, -85, -45, 41, -101, -53, -103]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[101, 22, 106, -127, 0, 37, 94, -100, 67, -107, 96, -42, 62, 32, 25, -115]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-15, -1, -65, 114, 70, 112, 33, 65, -99, -109, 44, 83, 113, -80, 53, 73]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-61, 38, 121, -58, -59, -12, -59, -45, -116, 17, -85, -45, 41, -101, -53, -103]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-57, -36, -88, 121, -12, -67, 35, -22, -67, -123, -79, -54, 114, -90, 117, 19, -18, -4, -35, -51, 51, 68, 95, -79, -112, 38, 110, 57, -117, -51, -21, -114, -33, 86, 127, 88, -55, 38, -41, -64, -23, 6, 8, -100, -19, -86, -83, -33, -84, 125, -99, -34, -33, -78, -61, -25, -29, 99, -127, 67, 35, 86, 92, 41, 62, 99, 75, 71, -8, 46, 77, -2, -117, 76, 5, -81, -3, -88, 17, 58, -8, 22, 31, 64, -87, 83, 2, 44, 97, -92, -25, -6, 96, -86, 77, 95, -61, 38, 121, -58, -59, -12, -59, -45, -116, 17, -85, -45, 41, -101, -53, -103]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[7, -57, -123, -117, -39, 88, -73, -121, 15, 26, -112, 26, 53, -37, 78, -43, 68, -71, -81, 55, -102, 81, 18, 12, -53, 68, -11, -46, 66, 123, -15, -85, -61, 38, 121, -58, -59, -12, -59, -45, -116, 17, -85, -45, 41, -101, -53, -103]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-19, -38, -9, -49, -53, -89, 4, -56, -117, -95, 92, -42, -50, -17, 17, -63, 33, -93, 59, -30, 28, 51, -26, 69, 59, 103, -106, -7, 17, 78, -23, 71, -97, 4, -85, -93, 107, -70, 24, -67, -8, -31, 50, -10, 120, 14, -21, -124, 80, 64, -91, -25, -59, 88, -2, -5, -58, 33, -103, -83, 109, -109, -7, 20, -124, 68, -75, -110, -68, -42, 71, 112, -51, -21, -7, -57, -32, -101, -62, -93, 42, -4, -19, -41, -57, 66, 66, 64, -94, 120, -99, 21, 35, -81, -60, 88, -61, 38, 121, -58, -59, -12, -59, -45, -116, 17, -85, -45, 41, -101, -53, -103]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EDDAF7CFCBA704C88BA15CD6CEEF11C121A33BE21C33E6453B6796F9114EE9479F04ABA36BBA18BDF8E132F6780EEB845040A5E7C558FEFBC62199AD6D93F9148444B592BCD64770CDEBF9C7E09BC2A32AFCEDD7C7424240A2789D1523AFC458C32679C6C5F4C5D38C11ABD3299BCB99" + "'", str15, "EDDAF7CFCBA704C88BA15CD6CEEF11C121A33BE21C33E6453B6796F9114EE9479F04ABA36BBA18BDF8E132F6780EEB845040A5E7C558FEFBC62199AD6D93F9148444B592BCD64770CDEBF9C7E09BC2A32AFCEDD7C7424240A2789D1523AFC458C32679C6C5F4C5D38C11ABD3299BCB99");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-10, -14, 102, -65, 16, -22, -120, 50, -82, 92, -121, 23, 45, 66, 96, -127]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-118, -124, 8, -15, -74, -21, -109, 125, 111, 48, -128, -2, -105, 54, 113, -8]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-52, -86, 6, -57, 71, -1, 122, 45, -32, -63, 62, 104, -21, -63, -75, -89]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-53, 104, -70, -60, 62, -36, 108, 87, -85, -7, -126, 105, -40, -62, -47, -44]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-87, -47, 4, -25, -93, -91, -34, 77, 15, -2, 36, -11, 39, 71, -124, -15]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-20, 123, 11, -82, 15, -9, 21, -85, -14, -101, -108, -75, 50, -33, -62, -83]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[102, -55, 112, -61, 1, 43, -127, -85, 16, -101, -10, 86, 47, -36, 73, 40]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-87, -47, 4, -25, -93, -91, -34, 77, 15, -2, 36, -11, 39, 71, -124, -15]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-41, -111, 52, -6, -48, -87, 81, 108, 24, 4, 9, -28, 92, 98, -16, -124]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-60, 92, 105, 9, -43, -60, 41, -83, -69, -118, 25, -110, -75, -2, 60, -41, -127, -56, 121, -48, 36, 28, 98, -113, 75, 124, -86, -117, -34, 5, 106, 22, -51, -127, -36, 29, -89, 34, 79, -39, -75, -47, -10, 105, -77, 121, 119, 87]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[126, 107, -75, -20, -69, -67, -40, -65, -79, -13, -8, 124, 1, -18, 38, -77]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[74, -40, 38, 111, 42, 29, 11, 68, 53, -39, 46, 70, 16, 28, -33, 24]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey78);
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-49, -57, -126, -101, 104, -19, -19, 88, 107, -102, -110, -9, 102, -52, -31, 56]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[91, 33, -122, 88, -48, -100, -44, -13, 106, 78, -41, -8, -34, -11, -81, 85]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-22, 61, 24, -21, -111, -26, -33, 36, -24, -29, -86, -9, 15, 60, -38, -36, 5, -72, 79, 42, -117, 34, 44, -109, 2, -30, -6, 112, 118, 67, -101, 111, -49, -57, -126, -101, 104, -19, -19, 88, 107, -102, -110, -9, 102, -52, -31, 56]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-39, 69, -53, 61, -40, -113, 58, 110, 87, -64, 7, 11, 69, -16, 109, -26, -44, 21, -11, 42, -48, -122, 45, 39, 70, 108, 35, 77, -81, 66, 19, -77, -49, -57, -126, -101, 104, -19, -19, 88, 107, -102, -110, -9, 102, -52, -31, 56]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -53, 60, 120, -78, -96, -18, -23, 44, -43, -34, 82, -72, 125, -90, -23, 35, 106, 20, -27, -121, -28, -97, -113, 12, -57, 57, -2, 17, -96, -25, -71, 76, -74, -50, -25, -77, -86, -52, 79, -24, -125, 127, -40, 53, -47, -126, -119, 50, -110, 10, 54, -85, -71, -85, -33, 64, -1, 71, 23, -59, 62, -121, 56, -118, 31, -92, -53, -5, -5, -86, 32, 30, -118, 1, 3, -64, -126, 77, 121, 31, 77, 60, -121, -58, 29, -35, -41, -85, 5, 0, 113, -62, -37, 36, 45, -49, -57, -126, -101, 104, -19, -19, 88, 107, -102, -110, -9, 102, -52, -31, 56]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-30, 127, 1, -119, -47, -38, -31, -14, -7, 75, -64, 28, -49, 0, -5, -106, 119, 124, -64, -124, 50, 52, -108, -57, -102, 84, -100, 109, -30, -88, 18, -27, 19, 52, -22, -18, -53, -91, -29, -124, -118, -18, 105, 104, 48, 125, -86, 104, 0, 95, -9, -20, 82, 40, 75, 49, -102, 34, -114, 74, -74, 16, 103, -126, 106, 52, -93, 13, -7, 66, 69, -127, -30, -110, -97, -35, -47, -118, 123, -101, -92, 120, -23, 19, 92, -64, 37, 1, -67, 81, -12, 49, -89, -43, 45, 52, -49, -57, -126, -101, 104, -19, -19, 88, 107, -102, -110, -9, 102, -52, -31, 56]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-49, -57, -126, -101, 104, -19, -19, 88, 107, -102, -110, -9, 102, -52, -31, 56]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[49, 56, 54, 57, -94, -122, 24, 44, -25, -91, -87, 85, -59, -44, -120, 113, -91, -31, 70, 110, -22, -58, -73, -105, 28, 5, 93, 38, 35, -59, -103, 114, -49, -57, -126, -101, 104, -19, -19, 88, 107, -102, -110, -9, 102, -52, -31, 56]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[20, -80, -79, 37, -45, 96, -82, 104, 75, 65, -113, 34, 15, 85, 37, 107, -70, 32, -115, 13, -115, -3, 40, 10, 77, -71, 121, -13, 111, -70, 19, 103, -28, -125, -102, 24, -48, -96, -47, -5, -8, 15, -108, 76, -64, -123, 15, 7, -30, 45, 5, -34, 75, 54, 86, 102, -44, -50, -100, -51, -72, -36, 48, -39, -72, -65, 45, -61, -56, -41, -23, -25, -39, 106, -98, 64, -46, 3, 70, 3, 100, -74, 96, -105, 10, 113, 85, 38, -25, -60, 30, 5, -3, 11, -117, 47, -49, -57, -126, -101, 104, -19, -19, 88, 107, -102, -110, -9, 102, -52, -31, 56]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("C31E880F47BEA97D730A13EFA67FCADDFD0737C873958AB30EFEEE1C38DA37DBC98A0471C23F7B57BD2C333A9AF39C7247A7BE6A4D32A0B8DD71F0107A4ED83251F3BD32F109ADE7D9C388617838E7665B49DA1D8C0759A8A88049F764239E3A17541A5445054DD8084098C5BF42405F", secretKey23);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[51, -65, 88, -67, 100, 9, 47, 104, 99, -18, -80, 69, -67, 43, -127, 86]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[51, -20, -76, 18, -80, -58, 29, 16, 115, -60, 84, -18, -121, 0, 9, 31]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[79, -78, 114, -103, 72, 88, 53, 66, -103, -72, -74, -96, 68, 11, 53, 93]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-13, 96, 67, 97, -114, 81, 23, 11, 98, 51, 34, -24, 52, 94, -48, 127]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[43, -83, -43, -39, 89, -112, 79, -10, -74, -20, -20, -119, 89, -17, -68, -77, 15, 48, -9, -125, -46, 12, 5, 109, -127, -76, -99, 78, 9, 39, 36, -8, 79, -78, 114, -103, 72, 88, 53, 66, -103, -72, -74, -96, 68, 11, 53, 93]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[31, 64, 62, -113, -46, 9, -99, -17, -74, 4, -37, 8, -81, 23, -118, -3, -118, -98, -128, 125, 27, -31, 76, 53, -93, -127, 50, 66, 18, -68, 35, -127, 79, -78, 114, -103, 72, 88, 53, 66, -103, -72, -74, -96, 68, 11, 53, 93]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-82, -75, -53, -82, 58, 42, -96, -93, -88, -21, -100, -53, -30, -109, -109, -119, -115, -83, 66, -110, 116, 103, 83, -117, -5, -2, -5, -61, -36, 92, 121, 44, 29, 84, -31, 15, 39, -83, -82, 100, 75, 48, -109, 87, 23, 112, 28, 95, -31, -86, -16, -40, 38, -93, 98, -95, 61, -57, 18, -122, 77, 96, 78, 52, 124, 79, 34, -34, 60, 30, 21, 80, 74, 121, -8, -85, 13, 127, 126, -48, 7, -82, 61, 19, -42, -32, 112, -66, 0, -41, -34, 39, -111, 88, -95, 40, 79, -78, 114, -103, 72, 88, 53, 66, -103, -72, -74, -96, 68, 11, 53, 93]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[42, -124, 89, 120, 100, 33, 8, -66, -115, -35, 16, 43, 24, 123, 61, -64, 51, 123, 36, 35, -18, 71, 68, -34, 85, -56, -10, 90, 48, 86, 74, 56, 79, -78, 114, -103, 72, 88, 53, 66, -103, -72, -74, -96, 68, 11, 53, 93]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-60, 124, -102, 52, -59, 82, -82, -122, -93, 49, -80, 88, 24, 98, 9, 80, 32, 48, -76, -63, -24, -19, 40, -21, 66, -65, -1, 92, -66, -35, -122, 63, 105, 122, 59, -54, 77, -126, 33, -82, 16, -2, -17, 54, 92, 61, 6, 110, 59, 79, 72, 97, -104, -35, -17, 5, -93, 127, 73, 16, -7, 75, 75, 50, -34, -72, 27, -77, -38, -29, -96, 12, 23, -81, -103, -119, 95, -48, 117, 60, -109, -79, -11, -2, 17, -2, 46, 88, -7, 15, -6, 84, 41, -42, -109, 91, 79, -78, 114, -103, 72, 88, 53, 66, -103, -72, -74, -96, 68, 11, 53, 93]");
        org.junit.Assert.assertNotNull(byteArray34);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey31);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("76B6C9460E19133E83C714B4E6062601", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("3C958EAE5BDAA1A3BD060C71944EB0A8534B539AFEFDB79EBDD7ADD12402BF8C30B281A8C4450399314DBDEB5B01CDB0CE81CE5565A8BB5D3EB7E0BBA6E1F4684A32FD476B52A5A71A1A384A30F8D4DC2D074F8AC9F8AEBA957BD34BF36177AFB289109350640BEB720378DCC725B342", secretKey31);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        byte[] byteArray53 = new byte[] {};
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray53);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey63);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("E0BBF00213234E7324CB5716CB7455E2", secretKey63);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("527C1D1D9F2B903634C0E77365CB43228E56A034C689D9E526F6719891815F410CDF0450BC5937FF5BCBF9DA453BC77D", secretKey63);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("975F040C8B243214F6124EE5A77FF43F", secretKey63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey63);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-3, 109, 68, -19, 48, 18, 97, -120, 31, 89, 35, 30, -115, -49, 10, 21]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-33, -110, -5, 56, 108, 113, -118, 15, -69, 40, 66, -108, 44, 116, 105, 101]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[81, -111, 115, -23, 12, -120, -91, -8, -78, -108, 96, 122, 65, -78, -89, -6]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-97, 69, 14, -18, -123, 37, -26, -22, 19, 109, 82, -87, -5, 98, 60, -23]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-23, -90, -34, -18, -77, -90, 121, -125, 97, 66, -45, 93, -46, -122, 4, 55]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-10, -68, 81, -125, 33, -83, 56, -23, 12, -89, -34, -41, -68, -95, -80, 108]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-125, 122, 87, -97, -112, 73, -101, -96, -2, 20, 59, -39, 40, -25, -114, 116, -101, 65, -114, -88, 103, -54, -69, 16, 83, -14, 32, -121, 109, -63, -102, -122, -23, -90, -34, -18, -77, -90, 121, -125, 97, 66, -45, 93, -46, -122, 4, 55]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-60, -80, -56, -31, -105, 20, -22, 55, -94, 85, -62, 37, 19, -28, 118, 73, -27, 29, 19, 8, -127, 102, -115, 91, -114, 10, 33, -78, 12, -9, -8, 43, -23, -90, -34, -18, -77, -90, 121, -125, 97, 66, -45, 93, -46, -122, 4, 55]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[64, -60, -100, 93, 107, 59, 37, -5, 37, -28, 75, 5, 2, -70, 20, 53, 63, -29, -80, -34, -121, -90, 114, -116, -39, 25, -114, -28, 116, 87, 31, -42, 37, 42, -114, 107, 93, 119, -18, 114, -98, -2, -70, 60, 43, 92, 50, -18, 15, 55, -3, 5, 104, 3, 53, -60, 85, 68, -48, 98, -15, 16, -50, 95, 101, 30, 20, 84, -95, -107, 6, 22, 59, -118, -108, 41, -21, 41, 125, -65, -15, 45, 6, -107, 29, 0, -128, 63, 46, 51, -48, -38, -58, -36, 62, 73, -23, -90, -34, -18, -77, -90, 121, -125, 97, 66, -45, 93, -46, -122, 4, 55]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-78, -49, -9, -54, -87, -60, 62, 116, -95, -43, -34, 83, 19, 121, -61, 10, -10, -67, -125, 42, 82, 22, 76, -32, 124, -1, -84, 63, 32, 54, -81, -28, -23, -90, -34, -18, -77, -90, 121, -125, 97, 66, -45, 93, -46, -122, 4, 55]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[2, -5, 55, 95, 78, 105, -52, 39, -117, 40, 8, -18, -67, 126, -79, -47]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[41, 91, -63, -59, 1, -22, -2, -124, -13, -82, -81, 88, 102, 24, 126, 74, 98, 4, 97, 61, -83, -61, -126, -101, -71, 47, 2, -32, 65, 27, 101, -78, 113, 32, 106, 28, -119, -50, -4, 41, -12, 42, 53, 89, 124, 65, 114, -72]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-36, 40, 113, 17, 89, -50, -4, 95, 56, -110, -75, -35, -3, 118, 64, -63, -91, -21, 9, -44, 60, 6, 111, -122, -58, 43, -74, -107, 98, 121, 121, 111, -14, 38, -11, 54, 61, -46, -51, -43, -118, 14, -33, -92, 32, -28, -56, 104, 70, -4, -61, -2, -123, 44, -116, -96, -69, -46, 45, -13, -84, -28, 31, 55, 98, -36, -71, 77, 23, -36, -98, 111, -125, 46, -39, 2, -28, 103, -79, 29, -60, 69, -109, 104, 26, 45, -101, -95, -24, 105, -53, -57, -23, -111, -78, -62, 113, 32, 106, 28, -119, -50, -4, 41, -12, 42, 53, 89, 124, 65, 114, -72]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[23, 37, 24, -107, -121, -5, 65, -83, 26, -9, 125, 5, -63, 5, -88, 9, -99, 106, -71, -89, 44, 19, 93, -72, 75, -76, 106, -44, -14, -94, -52, -40, 113, 32, 106, 28, -119, -50, -4, 41, -12, 42, 53, 89, 124, 65, 114, -72]");
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey24);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey24);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey24);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey24);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c", secretKey24);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        java.lang.Class<?> wildcardClass38 = byteArray36.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-59, 36, -51, -82, 64, -3, 68, -52, -20, 18, 99, 95, 104, -46, -82, -82]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[20, -3, -26, 125, -96, -74, -90, 88, 53, -19, 66, -1, -127, 6, -123, 113]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[3, 33, 82, -23, -127, -116, -102, 39, 44, 94, -52, 125, -46, -54, -54, -7]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[34, 72, 91, -68, 61, 24, -20, -17, -23, -96, 51, -51, 76, 14, 53, 42]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-111, -76, 16, -5, 64, -29, 4, -24, -127, -119, 118, -4, 126, 50, 56, 10, -87, 77, 1, -6, 99, 111, 90, -80, -86, 16, 76, 73, -98, -68, -91, -85, 3, 33, 82, -23, -127, -116, -102, 39, 44, 94, -52, 125, -46, -54, -54, -7]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[34, -103, -63, -61, -64, -53, -113, 78, 118, 119, -47, 70, 91, -35, 12, -120, 13, -58, -128, 23, -98, 118, 33, -96, -88, -25, -103, -108, 100, -36, -35, 56, 3, 33, 82, -23, -127, -116, -102, 39, 44, 94, -52, 125, -46, -54, -54, -7]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-94, 44, -44, -8, 21, -78, -62, -39, 89, -22, -102, -44, -1, 68, -60, 99, -91, 22, 2, 56, -8, 20, 98, 81, -62, -25, -95, -34, -74, -99, -55, -99, -2, -17, -32, 30, -64, -93, -120, -86, -34, 32, -52, -4, -87, 36, 6, 2, 87, 12, 50, -101, -114, -6, 117, -83, 23, -56, -76, -120, 86, -16, 81, -14, -10, 89, 111, -37, -114, 72, 20, -3, 40, 2, -76, -63, 107, 75, -124, 79, -113, -102, -125, -25, 70, 41, 32, 42, -101, -20, -88, 73, -50, -13, -5, -123, 3, 33, 82, -23, -127, -116, -102, 39, 44, 94, -52, 125, -46, -54, -54, -7]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-113, -77, -9, -42, -89, 77, -1, -55, 7, -98, 14, 13, 14, 49, -29, 15, 34, -95, -11, -78, 10, 101, -69, 15, -14, -8, -123, -53, 19, 61, -57, -19, 30, 62, 37, -126, 80, 86, 8, -105, 18, -22, -15, -61, -73, 83, 106, 14, 29, 47, 64, 28, 63, -87, -118, 31, -40, -86, 80, 64, -120, -92, -26, -48, -73, 78, -79, -92, -41, -125, 67, -1, -20, 15, 12, -63, 107, 63, 48, 88, 65, 51, -1, -13, 74, -119, -110, -92, 42, 66, -4, 70, 39, -1, -122, 60, 3, 33, 82, -23, -127, -116, -102, 39, 44, 94, -52, 125, -46, -54, -54, -7]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[3, 33, 82, -23, -127, -116, -102, 39, 44, 94, -52, 125, -46, -54, -54, -7]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[41, 8, -8, -26, -9, -114, -29, 99, -68, -128, 26, -67, -110, 125, 87, -46, 124, 48, -80, 74, 105, -45, -17, -23, -76, 66, -50, -30, -111, 115, 73, -65, 3, 33, 82, -23, -127, -116, -102, 39, 44, 94, -52, 125, -46, -54, -54, -7]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[126, -89, -59, 63, -57, 110, 76, -13, 57, 23, -78, -41, -16, -69, -42, 25, -59, 65, -68, -43, -14, 80, 26, -96, 94, 91, 11, -15, -50, 5, 52, -34, -4, 16, -123, 116, -64, -95, -75, -48, -6, -44, 9, 124, 76, -58, 87, 10, -125, 83, -36, -2, 94, -127, 9, -8, -72, 78, -122, 48, 92, -88, -86, 106, 44, -17, -55, 101, 60, 32, -75, -86, -97, -90, 84, -101, -96, 85, 113, 38, 60, 53, -40, -9, -18, -20, -90, 66, -75, 70, 75, -103, 82, 112, -59, -25, 3, 33, 82, -23, -127, -116, -102, 39, 44, 94, -52, 125, -46, -54, -54, -7]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-111, -88, 1, -27, 46, -59, 22, 12, 39, 1, 65, 46, -16, -102, -101, -100, 121, -104, 71, -96, 79, 70, 126, 50, -19, -65, 62, -8, 60, 27, 80, -123, 97, -18, 115, 32, -70, -101, -101, 114, 106, 89, -45, -34, 46, -17, 117, 7, -88, 78, -5, -79, -34, -56, -79, -5, 9, -117, 91, -43, 61, -100, -44, -32, 113, 29, -26, 94, -20, 120, 95, -115, -43, -86, 85, 55, -26, 81, 52, -57]");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "91A801E52EC5160C2701412EF09A9B9C799847A04F467E32EDBF3EF83C1B508561EE7320BA9B9B726A59D3DE2EEF7507A84EFBB1DEC8B1FB098B5BD53D9CD4E0711DE65EEC785F8DD5AA5537E65134C7" + "'", str37, "91A801E52EC5160C2701412EF09A9B9C799847A04F467E32EDBF3EF83C1B508561EE7320BA9B9B726A59D3DE2EEF7507A84EFBB1DEC8B1FB098B5BD53D9CD4E0711DE65EEC785F8DD5AA5537E65134C7");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey29);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey29);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("6000978D729A5EAF02789174FCEF78DC19A6A5353FA2EE08001847BF93F672C57842A660B60BA3E3BAFC4CA493DB93BD616BA839F8FC6BCE8F25A5CFF9986984A5A08FB7FA9398912FBF66BA83D5698C9B89FE34ECEA63E7E13593D7BE10CB607921E0CEEC09BCE538EB3873308F1B39", secretKey29);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("01E159A475DFA9837DBCBD266596AF3A00055EC9057BEFAED5881D67FD28C80BFC9DC91F212B8B9EAD31DB3EE1D5792BD28E575A63E40232B48B460D3D2B3E4D06F9BD27D915335F4115E8B7BABA91FDE00A232BD5187E634FF5B525B79BDDDB918AD8DDBAA50B71892094BF44EBE2A094C33FB7CE3559492B8234AD5B9D04F512395AAF7AF084E014E7DE1415ACADCED56F1B4EEFF7F458F8E9A698C7F62C76F1977E07E8B8B304F8975F20AE0DAB2DE88C9A0769ED99B14A8F749F943BB3F8A0D97483DE68484309D614D4B7917AD0910FB59FBD9AE12E2ADFF8B07B20A7400CAD94A090CC1BF068884954E3B21F06", secretKey29);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("E0D3E7782C39C28CCCE06A3D0A8080211EB40E714FFF129D52AF72C39F11F7A754D1FADA0D110C085BF0A50E9FEB6059", secretKey29);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E6A5294A0BCBF4D2632FE897D3674AFE7864D578332AA38FFEE99B5A67A98E2B459A45AF1881E370311532D846678A113EF5FF6E2E67D24A4470658040918D01EDFA74FBA1C73696C890FB89F183DC24A30A91159D5850A36E1D2815EF9FBDF229D0C6F21C8DB952DA477A68A61BFDE30B47F67718C2D029A1D7E46AE7D49BACE364A29DC4D63C52713DEBECDFC117A73974425515A2F1BA6FD9B1342E7B759A89A60292F02A684F15160BF10721DA402EFAACACD5FEEAEDC647193AED2798538CB76B5F258F146C360571DE0656CB29D49F958AB0E8D9A5468ECA0ED9F36D9051D73EE03D0996D6BE68591F915D867", secretKey29);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 30, -51, 26, -95, 54, 6, 30, 101, -70, 71, -24, -84, 98, 36, -37]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-31, -121, -79, -89, -114, -46, -119, 46, 127, 101, 23, -40, 83, -98, 37, -99]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-91, -85, -86, -104, 8, 103, 44, 110, -114, -86, 116, 110, 26, 18, 94, 52]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[31, 67, -74, 123, -113, -82, 88, -91, -47, 24, 45, 31, -95, -112, -103, 3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[27, -88, -27, -113, -54, -49, 125, -108, 69, -80, 18, -115, -110, -99, 116, 0, 97, 73, 23, -52, 48, 11, -8, 114, -100, 126, -50, -44, 83, 50, 54, -85, -91, -85, -86, -104, 8, 103, 44, 110, -114, -86, 116, 110, 26, 18, 94, 52]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-46, -36, -26, 110, 91, -113, -125, 53, -125, 73, 0, 29, -72, -32, -10, -111, 117, 35, -72, 83, 56, -47, -121, -51, -109, 89, 53, 6, -1, 84, -3, 121, -91, -85, -86, -104, 8, 103, 44, 110, -114, -86, 116, 110, 26, 18, 94, 52]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[123, -117, 27, -21, 13, 86, 83, -33, -43, 51, -98, 13, -29, 70, 34, -18, -8, -46, 55, -36, 76, -82, 102, 45, 81, -11, -104, 100, 77, 114, -66, 125, 34, 126, -79, -119, 24, -74, 117, 83, -13, -45, 76, -16, -81, -77, 23, -96, 115, 8, 83, 126, -59, -40, 122, 124, 91, 91, 106, 24, -111, 26, -2, -26, -77, -17, -5, 77, -81, -23, 115, 90, -114, -81, 104, 31, -51, -57, 74, -27, 78, -86, 20, -61, 19, 4, 94, 15, -99, 65, 8, 113, -49, -29, -104, -62, -91, -85, -86, -104, 8, 103, 44, 110, -114, -86, 116, 110, 26, 18, 94, 52]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[99, -78, 116, 18, 25, -22, 102, -19, -124, -95, 75, -21, -86, 95, 56, -114, -62, 60, 38, -32, -112, 44, -64, 89, 19, -33, 74, -34, 47, 9, -27, -114, -91, -85, -86, -104, 8, 103, 44, 110, -114, -86, 116, 110, 26, 18, 94, 52]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-34, -81, -45, 15, -43, 100, 87, -30, 70, -115, -100, -98, -113, -52, 25, 95, -82, 89, -90, -36, -74, -89, -73, 100, 127, -53, 87, -82, 62, -107, 60, -30, -43, 29, 72, -124, 108, 109, -52, -78, -61, 117, 45, 0, -33, 88, 4, 80, 63, -39, -57, -12, -1, 12, 18, 63, 1, 125, -127, 100, -75, 21, -38, -89, 24, 118, -16, -15, -25, 68, -93, 16, 30, 75, 64, 73, -4, 34, -91, -45, -92, -71, -126, 98, 6, -72, 69, -74, 119, 40, 111, -54, 51, 37, -59, -118, -91, -85, -86, -104, 8, 103, 44, 110, -114, -86, 116, 110, 26, 18, 94, 52]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[57, 45, -21, 126, 48, 122, 82, 101, -67, 102, 90, -50, -57, 124, 94, 39, -110, -7, 6, -29, 86, 13, 25, -106, 7, -67, -58, -91, -96, -48, -97, 10, -10, -58, 55, 1, -15, -128, -7, 61, 39, 9, -45, 88, -8, 123, -23, -94, 90, -45, 37, -32, -66, -37, -50, -17, 5, -109, -118, 84, 10, -105, -55, 114, 126, 118, 114, -27, -13, 106, -58, 47, 38, 58, -122, 56, -58, -86, -120, 109, -12, -7, -40, 39, 76, -18, 42, 119, -64, 121, 90, 22, -118, 109, 96, -37, -91, -85, -86, -104, 8, 103, 44, 110, -114, -86, 116, 110, 26, 18, 94, 52]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "8BB3793C6D9F0D59E4F2338A27422E5E69E7C58E19408802AFB3BB7F0EA4CA7D53DEB8E5A3BFFA96AC1DCD3894847091F47D67D90733885068184A6F0B229DDD503A132C3EC77135BEB791E2041CA946DF844BAA0201A763D7119800CAC15AF3368AE864419C17B0452939CC811146D01EE84B0272B46024546595C1001CBA97F0B863C94328F5EFF67C1FC08B0E6C2F314FE14FB502EFF073E474401ED90F26178BA36B5126F8FD32D0E513CF20F7828FB2E590C9BDB6E73EE1C5F4579C4AD264E9246E40012A05CE0B39E78A9F0E84A63DE73ECC69725DFADE3CAD35E77B6D2D740ECE126DF2A226BDC10E8D3247FEE2C2FE54A9EFFF7186D84D83436EDA997DEC35AC883400E5A0E22C0C7BFBBC355135A59636A8977B1BBFA0909C558B98DEEE6CF1726374B739EC6538819642A39DDFA1C0AF2EF788F9F1595FD2C13D4DEF8F8A37F819A58E2C3C64A7EEF02E5932E149DC3E4E0F8BA9BA707EB0B9382D7E2455AA3A18CD8D2B9CC03294DE5B765AD5EFA55FC3F5D8AF4557FABBFA048954C98238AD5114D56A4662C2DB5A1EFC2A3E0676ECBC2F3996F19FB20AE5B298A7DFF0E2BF96C30F01423D90AB877C5C99129F07194CF83259137F2463B1656EDB94DC0F9068A046AE2DB499F3B84BD9BDBD8BCFEBF42A3FFB121E384E3C174AA5ABAA9808672C6E8EAA746E1A125E34" + "'", str44, "8BB3793C6D9F0D59E4F2338A27422E5E69E7C58E19408802AFB3BB7F0EA4CA7D53DEB8E5A3BFFA96AC1DCD3894847091F47D67D90733885068184A6F0B229DDD503A132C3EC77135BEB791E2041CA946DF844BAA0201A763D7119800CAC15AF3368AE864419C17B0452939CC811146D01EE84B0272B46024546595C1001CBA97F0B863C94328F5EFF67C1FC08B0E6C2F314FE14FB502EFF073E474401ED90F26178BA36B5126F8FD32D0E513CF20F7828FB2E590C9BDB6E73EE1C5F4579C4AD264E9246E40012A05CE0B39E78A9F0E84A63DE73ECC69725DFADE3CAD35E77B6D2D740ECE126DF2A226BDC10E8D3247FEE2C2FE54A9EFFF7186D84D83436EDA997DEC35AC883400E5A0E22C0C7BFBBC355135A59636A8977B1BBFA0909C558B98DEEE6CF1726374B739EC6538819642A39DDFA1C0AF2EF788F9F1595FD2C13D4DEF8F8A37F819A58E2C3C64A7EEF02E5932E149DC3E4E0F8BA9BA707EB0B9382D7E2455AA3A18CD8D2B9CC03294DE5B765AD5EFA55FC3F5D8AF4557FABBFA048954C98238AD5114D56A4662C2DB5A1EFC2A3E0676ECBC2F3996F19FB20AE5B298A7DFF0E2BF96C30F01423D90AB877C5C99129F07194CF83259137F2463B1656EDB94DC0F9068A046AE2DB499F3B84BD9BDBD8BCFEBF42A3FFB121E384E3C174AA5ABAA9808672C6E8EAA746E1A125E34");
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey39);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey39);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("D25960629C27D7AA56BE1015FD504226CB8745A574E5A5678C1B9647778C2883D33EE46927408FF590FD79CA988856A3", secretKey47);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[22, 79, 12, -35, -42, 111, 41, 24, -41, -46, -108, -121, -122, 59, -60, 66]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-86, -6, -36, 56, -119, 54, -90, 39, -14, -128, -5, -47, -65, -45, 33, -126]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-86, -6, -36, 56, -119, 54, -90, 39, -14, -128, -5, -47, -65, -45, 33, -126]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-30, -119, -32, -92, -12, 21, 76, 32, -16, -34, 52, -119, -23, -2, 54, 25]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[17, -45, -39, -19, -113, 58, 8, 63, -89, -96, 90, 79, -7, -59, -128, 42]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-101, -92, -126, -80, -37, 63, 65, 61, 57, 20, -55, -73, -6, 54, 13, 65]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[102, -53, 62, 99, -4, -10, 95, -2, -125, -127, -109, 109, 103, -52, 10, -126]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[98, -100, 51, 45, -126, 112, 99, 11, -79, 80, -13, -35, 36, -3, 7, -67]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[69, -19, -87, -77, -117, 64, 21, -83, 96, 123, 127, 67, 18, -118, -13, 25]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[81, 59, -45, 10, 34, -27, 67, -81, 109, -95, 2, 28, -121, 48, -52, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[98, -100, 51, 45, -126, 112, 99, 11, -79, 80, -13, -35, 36, -3, 7, -67]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-51, 62, -88, 71, 26, -8, -71, -69, -100, 88, -28, -96, -76, -84, -11, -40]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-70, -69, -75, -108, -77, -28, 13, -26, -11, 96, -108, 86, 125, -28, 13, -56, -57, -15, -76, -57, -53, 108, -4, -13, 117, 75, 76, -103, -90, 93, -120, -30, -98, -77, 50, 62, -88, 80, 16, 30, 117, -22, 90, -38, 120, -10, 34, -13]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-77, 104, -21, -15, -109, 10, 117, 3, -56, -21, 125, -96, 42, 22, -112, 121, 76, -57, -61, 94, 27, -94, 31, -36, -19, 86, 29, -76, -111, 110, -117, 18, 86, -115, -10, -32, 60, -8, -99, 66, 12, -76, 17, 76, 35, -1, -73, 126, 24, 13, 23, -49, -39, 56, -33, -30, 95, 71, 17, 109, 38, -22, -70, 63, -99, 75, 96, -125, -102, 13, 57, -50, 123, -76, -14, 105, 107, -45, -38, 99, -74, 66, 18, -126, 2, -82, 64, -112, -31, 10, 125, -118, -37, -5, -1, 71, -98, -77, 50, 62, -88, 80, 16, 30, 117, -22, 90, -38, 120, -10, 34, -13]");
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("AB3501159AB7C84C8B6FAA79AF0BAE36", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("25218F49BA4B3D98562C7390C78B4FA539133578F754EB8CA2A227AED7C2146DDB8F1F360A6ABC56570B246AC1148C77354D87ACA544CD75792EC05D4A1B86445AC4E3A4D6F6A7AE855DF2DDC54302D3EC78FEE367AE8075BD2B7FB59B2C1462CE67B55257FEAF7B73CF403109DD7401", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[123, -107, -95, 3, 41, -35, -106, 6, -83, 103, -27, 30, -118, -5, -120, 35]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-106, -100, 57, -46, 91, -55, 1, 116, -33, 81, -45, 92, 57, 83, 21, -15, -82, 43, 77, 67, -18, -84, -80, 31, 71, 85, -107, 40, 121, 73, 16, -102, -5, -67, -26, 87, 84, -113, -105, 99, 64, 104, -38, 118, -26, -30, -69, 113]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[93, 34, 26, 107, -55, -66, 98, 75, -112, -64, 93, 23, 103, -109, -117, -57, 121, 57, 108, -121, -26, -56, -101, -8, -115, -50, -23, -88, -125, -77, -86, 110, 9, 35, 79, -39, 29, -20, 78, -15, 77, 116, 17, -12, -40, 2, 68, 95, 48, -64, -84, -43, 111, 31, -8, -56, 107, 105, -127, 9, 20, 86, 56, -26, -31, 10, -31, 67, 92, 52, 118, 45, 86, -37, -6, 87, -96, 21, 4, 107, -58, 53, -79, -52, 126, -71, 107, -126, -31, 28, -7, 116, 58, 63, 12, 39, -5, -67, -26, 87, 84, -113, -105, 99, 64, 104, -38, 118, -26, -30, -69, 113]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "D6E04E2ADDA34A7816BC599BE1439320BE559F6F3A54873D35C5E34584C2DCE8DE3027EF7B5F91EE5F3D1F4AC1E2F2B377977ED97B5D2CF96EF06C68A47BB4DFF0736F10586B021B9E8DC132FEBEBB4926F9F3333EFBD301C678CC739B6D0BD3858269C50612FA3371C9AAACB57A3328A17BA21E553E4846313CAB4EFE960EA022E9D65E51DD2AB2B20BE290342AC23B849263D40ADFB6D865686B229ABBD1F42A1177C430FA2832C0117A9A4767C12936C164C5CA6C3B9F32F3E1C26101B05FDD173727D7313065B2FE6A8138FAA960833983E85BAB2FF1F643191358947822FBBDE657548F97634068DA76E6E2BB71" + "'", str9, "D6E04E2ADDA34A7816BC599BE1439320BE559F6F3A54873D35C5E34584C2DCE8DE3027EF7B5F91EE5F3D1F4AC1E2F2B377977ED97B5D2CF96EF06C68A47BB4DFF0736F10586B021B9E8DC132FEBEBB4926F9F3333EFBD301C678CC739B6D0BD3858269C50612FA3371C9AAACB57A3328A17BA21E553E4846313CAB4EFE960EA022E9D65E51DD2AB2B20BE290342AC23B849263D40ADFB6D865686B229ABBD1F42A1177C430FA2832C0117A9A4767C12936C164C5CA6C3B9F32F3E1C26101B05FDD173727D7313065B2FE6A8138FAA960833983E85BAB2FF1F643191358947822FBBDE657548F97634068DA76E6E2BB71");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "D6E04E2ADDA34A7816BC599BE1439320BE559F6F3A54873D35C5E34584C2DCE8DE3027EF7B5F91EE5F3D1F4AC1E2F2B377977ED97B5D2CF96EF06C68A47BB4DFF0736F10586B021B9E8DC132FEBEBB4926F9F3333EFBD301C678CC739B6D0BD3858269C50612FA3371C9AAACB57A3328A17BA21E553E4846313CAB4EFE960EA022E9D65E51DD2AB2B20BE290342AC23B849263D40ADFB6D865686B229ABBD1F42A1177C430FA2832C0117A9A4767C12936C164C5CA6C3B9F32F3E1C26101B05FDD173727D7313065B2FE6A8138FAA960833983E85BAB2FF1F643191358947822FBBDE657548F97634068DA76E6E2BB71" + "'", str10, "D6E04E2ADDA34A7816BC599BE1439320BE559F6F3A54873D35C5E34584C2DCE8DE3027EF7B5F91EE5F3D1F4AC1E2F2B377977ED97B5D2CF96EF06C68A47BB4DFF0736F10586B021B9E8DC132FEBEBB4926F9F3333EFBD301C678CC739B6D0BD3858269C50612FA3371C9AAACB57A3328A17BA21E553E4846313CAB4EFE960EA022E9D65E51DD2AB2B20BE290342AC23B849263D40ADFB6D865686B229ABBD1F42A1177C430FA2832C0117A9A4767C12936C164C5CA6C3B9F32F3E1C26101B05FDD173727D7313065B2FE6A8138FAA960833983E85BAB2FF1F643191358947822FBBDE657548F97634068DA76E6E2BB71");
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("D240F7F4DA05EDD42602F59D6EFB5E1A", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        java.lang.Class<?> wildcardClass17 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[9, -101, -60, 50, -92, -44, -111, -102, -75, 15, -93, -86, 115, 4, -119, 118]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-7, 33, -79, -110, -110, 123, 93, -104, -65, 115, 58, -128, -72, 90, 49, -122]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-7, 33, -79, -110, -110, 123, 93, -104, -65, 115, 58, -128, -72, 90, 49, -122]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[29, -72, 83, 14, 107, -127, 108, -121, -79, -74, -125, 92, -82, 95, -110, -41, 11, 6, -82, -114, 61, -22, -64, 54, 117, -4, 23, 3, 7, -19, -67, 0, 9, -101, -60, 50, -92, -44, -111, -102, -75, 15, -93, -86, 115, 4, -119, 118]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[67, 42, 61, 14, -64, 12, -109, -69, -10, -64, -36, 124, -69, 2, 5, -46, -22, 106, -56, 1, -126, 9, -10, 2, 86, 35, 52, 93, -120, -68, 107, -35, 9, -101, -60, 50, -92, -44, -111, -102, -75, 15, -93, -86, 115, 4, -119, 118]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-88, -109, -36, -40, 103, -85, -106, -23, 126, 28, -80, 99, -20, -105, 85, -74, 46, -66, 127, -75, 64, 55, -123, 80, 5, 89, 86, -25, -96, -61, 104, -124, 9, -101, -60, 50, -92, -44, -111, -102, -75, 15, -93, -86, 115, 4, -119, 118]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[11, -87, -54, 48, 38, -89, -56, 75, 72, -62, -82, -59, 27, -128, -128, 36, 110, -65, 115, -64, -72, -101, -27, 8, -96, 3, -121, -54, 85, 30, 5, 73, 9, -101, -60, 50, -92, -44, -111, -102, -75, 15, -93, -86, 115, 4, -119, 118]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[9, -101, -60, 50, -92, -44, -111, -102, -75, 15, -93, -86, 115, 4, -119, 118]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BEBA20EB6E226639B18D711EB33F4341FB0FF3ABB4F555955A1F4A34DCD07DDE673D60E567E40636D2ED65AB40832F7", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0325B09D413866A7B5E5C265821B2E531360BD73E2C998210FAABB6E4563F234988B3B0DAAEE7CCD84004AB5E804FE15", secretKey8);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-78, 43, 36, -34, 121, -29, -48, 64, -37, 50, 45, 9, 10, 29, 102, -40]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-121, -94, 117, 21, 65, 29, -109, -119, -35, -34, 127, 98, 9, -21, 70, 34]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-123, -9, 64, -44, 109, -40, 2, 97, 104, -75, -35, 45, 28, -79, 27, 39, -110, -77, -57, -107, 76, 29, -55, -8, -39, 17, -61, 20, -50, -6, -33, -72, 13, -58, 40, 32, 86, 28, 8, -83, 28, -108, -5, -114, 51, 34, 76, -38, 5, 111, 72, 40, -36, -80, 18, -11, 58, 33, 72, -6, -80, -98, -85, 0, 126, 71, 81, -60, 87, -2, -121, -103, 109, 72, 19, -96, 63, -7, 3, -54, 26, 95, 60, -106, 65, -19, 114, 70, 60, 98, 28, 113, 98, -118, 51, 40, -78, 43, 36, -34, 121, -29, -48, 64, -37, 50, 45, 9, 10, 29, 102, -40]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-67, 73, 15, 52, 15, -103, -93, 94, -88, -94, -91, 86, -27, -10, 67, 66, 59, -82, -37, 8, -84, 79, 86, -46, -81, 39, -9, 42, 118, 65, 29, -30, 99, -26, 100, -124, -90, 99, -21, -110, 23, -56, -12, 70, -18, 78, 62, 52, 94, -80, 124, 82, -41, 27, 9, 90, -71, -24, 23, 33, -32, 125, 51, 12, -69, -34, -41, 12, 42, -74, -72, 62, -7, -39, -93, -35, -98, 15, -73, -47, 67, 79, -94, -115, -74, 21, -127, 87, 124, -65, -41, 46, 107, 70, -3, 123, -78, 43, 36, -34, 121, -29, -48, 64, -37, 50, 45, 9, 10, 29, 102, -40]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "BD490F340F99A35EA8A2A556E5F643423BAEDB08AC4F56D2AF27F72A76411DE263E66484A663EB9217C8F446EE4E3E345EB07C52D71B095AB9E81721E07D330CBBDED70C2AB6B83EF9D9A3DD9E0FB7D1434FA28DB61581577CBFD72E6B46FD7BB22B24DE79E3D040DB322D090A1D66D8" + "'", str14, "BD490F340F99A35EA8A2A556E5F643423BAEDB08AC4F56D2AF27F72A76411DE263E66484A663EB9217C8F446EE4E3E345EB07C52D71B095AB9E81721E07D330CBBDED70C2AB6B83EF9D9A3DD9E0FB7D1434FA28DB61581577CBFD72E6B46FD7BB22B24DE79E3D040DB322D090A1D66D8");
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey25);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey25);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("A21EC590EE50DD2F2D974BA9D65033DD", secretKey25);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("A21EC590EE50DD2F2D974BA9D65033DD", secretKey25);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey65);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey65);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey65);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey65);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey65);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey65);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("A21EC590EE50DD2F2D974BA9D65033DD", secretKey65);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey65);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-87, -28, 113, 54, -43, -119, 42, 25, 48, 101, -74, -105, -38, -29, -125, -67]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-66, -88, -25, -94, 41, 65, 94, 45, 33, -11, 68, 15, -113, -5, 48, -19]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-43, 22, 10, -123, 44, 92, 16, 25, -82, -19, -94, 88, -60, 15, -27, 74]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[93, -77, 117, -106, 52, -83, 85, 108, -40, -55, 86, 29, -96, 20, -94, 67, 101, -9, -51, 68, -124, -90, -90, 51, 86, -123, -5, -101, 19, -110, 101, -128, 28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[109, -33, -14, -82, -71, -71, -33, -60, 34, -25, 29, -5, 79, 22, -116, -73, 46, 100, -107, -53, -54, 111, -119, -116, 76, -24, -70, 56, -42, 60, 60, 69, 28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[69, -83, -125, -14, -94, 40, -84, -29, 18, 45, -1, 79, -44, -41, 122, -24, 22, -8, 58, -12, -41, 112, 79, -114, 69, 72, 92, 85, 69, -111, 125, -107, -100, 14, -53, -22, 98, -114, -45, 10, 109, -74, 43, -28, -47, 34, 7, -81, 56, 94, -7, -45, 122, 105, -78, 35, -27, 95, 115, 125, -4, 114, -83, 50, 67, -76, 25, -47, -96, -75, 16, -93, -49, 14, 24, 80, -95, -90, -77, 94, 42, 24, 4, -46, -32, 18, -30, 73, -123, -92, 55, 12, -15, 49, -93, 11, 28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[48, 57, 104, 110, 108, -72, -113, 5, 127, -66, 78, -103, 37, -21, -85, -108, 67, 124, 66, -85, 43, 101, 107, 52, 46, 23, 49, -32, 91, 51, -15, -45, 40, 83, 19, -88, -72, 94, -44, 31, 110, -116, 72, -1, -70, 59, 22, 120, -118, 6, -86, -24, -23, -9, 115, -9, -123, 107, 83, 124, 78, -45, -55, -103, 3, -83, -90, 57, 72, -57, 16, 74, -65, 106, 112, -11, 1, 53, 1, -61, -7, 123, 32, -111, 113, 83, 101, -106, 106, -60, -47, 114, -88, 100, 16, 33, 28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[85, 62, 61, 121, 0, 60, 52, -84, -73, 112, 35, -51, 25, 43, 18, 37, -115, -123, 69, 60, -10, -92, 88, -119, 62, -101, 8, 23, 50, 45, -93, -41, 28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-51, 118, 87, -70, -49, -20, 28, -115, -50, 51, 78, -57, 93, 71, 7, -107, 31, -25, 81, -84, -112, -49, 55, -110, -127, 51, -11, -119, 113, -65, 66, 96, 4, -57, -24, -120, -116, 77, -26, 17, -75, -99, -119, -68, 63, -86, -45, 23, -92, 119, -89, -58, -88, 9, 120, 87, -21, 109, -17, -58, 68, -105, -6, -82, -63, -15, 127, 23, 119, -71, -8, -116, -31, -42, -55, 92, 25, -119, 100, 123, -127, 54, 13, 73, 11, -47, -117, -81, -99, 44, -20, 35, 77, -78, 58, 116, 28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-98, -4, 105, -91, -16, -105, 87, -39, -3, -42, 38, -28, -75, 29, -14, -122, -68, -76, 121, -114, 6, 50, 123, 52, 59, -108, -79, 100, -94, -58, 36, 97, 28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-98, -4, 105, -91, -16, -105, 87, -39, -3, -42, 38, -28, -75, 29, -14, -122, -68, -76, 121, -114, 6, 50, 123, 52, 59, -108, -79, 100, -94, -58, 36, 97, 28, 101, -97, -9, -71, 81, -103, 49, 118, -95, -115, 62, 98, 106, -46, 49]");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "9EFC69A5F09757D9FDD626E4B51DF286BCB4798E06327B343B94B164A2C624611C659FF7B951993176A18D3E626AD231" + "'", str39, "9EFC69A5F09757D9FDD626E4B51DF286BCB4798E06327B343B94B164A2C624611C659FF7B951993176A18D3E626AD231");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-3, -15, -96, -8, 41, -59, 59, 101, -93, -73, 59, 122, -44, -36, 116, 13]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-88, -7, -125, -10, -103, -15, -38, 108, 39, -21, 97, 73, 124, -91, -99, -51]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[31, -65, -51, 20, -79, -5, -103, 3, -10, -113, 25, -77, 38, -64, -111, 47]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[13, -88, -10, 62, 17, -50, -35, -118, 18, 77, -119, -99, 116, -68, 56, -70, 23, -97, -81, 121, 53, 64, 62, 29, -125, 121, -100, 96, 48, 56, -48, 103, 30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[12, -40, -77, -114, -69, -50, 73, 89, -75, -96, -65, -85, -20, -21, 85, 27, 68, -7, -43, -89, -37, 78, 114, -32, 126, 42, 39, -44, -2, 16, 39, 19, 30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-104, 109, 29, 52, 122, 112, 58, -116, -35, 39, -48, 95, 96, -30, 10, -109, 99, 83, -88, -72, 36, 86, 4, -87, -21, 46, -63, 77, 86, -80, -36, -20, 34, 10, -71, 123, 101, -48, 104, -19, 58, -78, 19, -97, -44, 7, 94, 23, 39, 53, 122, -84, -45, -85, -20, 84, -24, -92, -89, -17, -44, 8, 114, -94, -93, 28, -84, -36, 23, -48, 91, 98, 118, -64, -26, 31, -81, -69, -40, 113, 29, -40, 114, 52, -17, -116, -26, -51, -104, -115, -29, 120, 107, -102, 99, -64, 30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-85, 15, 43, -41, -77, 68, 66, 73, -40, -38, -100, -1, -40, 38, -14, 68, 26, 86, -35, -53, 3, 56, -121, -54, -122, 119, 107, -96, -56, -37, 27, -8, 121, -117, 97, 36, 93, -26, -58, -27, 33, -106, -34, 41, 70, 92, 87, 112, 13, -51, -77, 70, -74, 33, -107, -67, 29, -114, 87, 104, 107, -23, -24, -36, 124, 106, 44, 40, 82, -71, -119, 4, 44, 106, -26, 5, -20, -64, 101, -78, -29, 8, 37, 4, 38, 57, 101, -13, 82, 11, 45, 107, -27, 119, -124, -24, 30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-46, 122, -47, -114, 109, -101, -116, 96, 96, 126, 0, 92, -13, -74, 124, 3, -53, -39, 75, 7, -61, -63, -1, -52, 124, 38, -43, 34, 58, 103, -32, -21, 30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-122, 33, -119, -33, -109, 81, -89, 18, 90, 85, -68, -9, -51, 48, 48, 69, -26, -109, -76, 48, -109, -95, -87, -41, -44, 70, -118, 121, -13, -105, 5, 95, 104, 107, 94, -128, 67, 0, 102, -34, 0, -70, -29, -43, 77, -54, -75, 71, 52, 92, -87, 107, 27, 99, 0, -98, -108, -23, -122, 73, -22, -56, 102, -106, 52, -60, 100, -16, 125, 78, -18, 126, -42, -77, -115, -33, -36, -8, 108, 88, -16, 35, -73, 64, -127, -120, 28, 46, -51, 9, -57, -109, -40, 19, 54, -15, 30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[23, -97, 60, -47, 11, 58, -87, 98, 87, -44, 0, -62, 37, -97, 82, -19, 12, 82, 3, 5, -66, 76, -22, -94, 14, 52, -76, 15, -43, -14, 2, -66, 30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[30, -80, -93, -27, 39, -80, 103, 9, -113, 39, -115, -50, -16, -118, 22, 2]");
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey31);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey39);
        byte[] byteArray50 = new byte[] {};
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey52);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey56);
        byte[] byteArray60 = new byte[] {};
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey62);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey66);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey66);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey66);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey66);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey66);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey66);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey66);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey66);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("C7228355F98EF4384BDCC3B618AD277AF9965B6AD0827F2D8ADBF61938A467E584065F91162D3F7680CDBEBBA69BAFE3", secretKey66);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("E5755FF192A1AF26A274D31740D89F4724A02730C4AF75CD09A10CC6F16113F1F3A89F5911D013C5B5228CCC991E427C", secretKey66);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("1414B855F694C5B96CF66BE69BC3344B6DAC4DC7EA6BE2E3C8FF116E92C9929C4796FB56650C7C63BEB4D579DAFEA2F654887DA0AFD68426D5DA285914082D09CBB796F106E3A9A349E774DFA800D4FF0E8AD99B51D9C1C78A35CA5687DB85D58931F38B8AEC2CEACA6E90E56CD97A07", secretKey66);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("56B22D286B725D5A226552131703DF33EA72B54BEC9751542CCDECCE2B6BE5D6143BCC5A0072B2269D8CCB062BD4F372AE21B9C9C319D98558F7FAA9397A89C9853726A1044EDA8EB8FB7B1CF3EBD02161D0E091BE9D4FD3F2800ABFC67DBCADA42AB06146E205CB8093C91E0F0F2099", secretKey66);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-65, 15, 48, 34, -54, 126, -97, -38, 17, -23, -34, 1, 59, -70, -44, 16]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-37, 36, 127, 121, 111, 83, 36, 122, 28, -126, 122, -53, -109, 78, 67, -128]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-85, 97, 126, -120, 104, 20, -116, -118, 95, -13, 94, 66, -9, 27, 4, 13]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-115, -91, 59, -98, 61, 48, -50, 103, -127, 52, -36, -8, -35, -52, 81, -101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[63, 40, 80, 41, 126, 115, 59, 30, 14, -88, -53, 35, -8, -39, -66, 51]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-47, 23, 31, 101, 31, -111, -30, 86, 64, -19, -48, 72, 62, -58, -64, -76]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-114, -124, 98, -37, 89, -126, -1, -45, 81, 30, 45, 85, -12, -58, 75, -48]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[63, 40, 80, 41, 126, 115, 59, 30, 14, -88, -53, 35, -8, -39, -66, 51]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[98, 47, 65, 97, 22, -30, 89, -68, 36, -17, 7, 5, 15, -86, 96, -13]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[127, -53, 95, -14, 5, 5, 57, -104, -115, 18, 94, -105, 114, -8, -114, -115, -113, 65, 40, 94, 18, -13, -29, -69, -81, -111, -4, 21, 104, -14, 91, -108, -101, -7, -44, -85, -46, -108, -102, -29, -42, -54, 67, -16, -34, 94, 88, 111]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-61, 121, 126, -115, -98, -23, -75, -28, -43, 124, -26, -77, 6, 37, -29, 103]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[22, -16, -81, 108, 14, 90, -78, -66, -84, -44, 102, -57, 12, 61, 7, 19]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-103, 22, 105, -10, -41, -52, 126, -13, 23, 35, -121, -64, 49, 94, -74, 61]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[27, -59, -59, 100, -30, 2, 24, 58, 22, 85, 77, -92, 24, 100, -28, 85, -19, 38, -63, 33, -67, -115, -24, 96, -19, -119, 78, 47, -86, 114, 12, 85, -23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[66, 67, -55, -29, 32, -25, 102, -38, -46, 95, 94, 6, 112, 93, 116, 77, 70, -10, 14, 108, 11, -81, 71, 13, 109, -93, 60, 50, 106, 86, -126, -32, -23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-101, 43, -11, -74, -122, 11, 44, 96, 105, -33, -60, 7, -56, 84, -61, -116, -51, 123, 39, 30, 58, -125, 98, 99, 22, 101, 15, -123, 123, -52, -23, -76, -16, 5, -90, 86, 26, -88, -34, -62, -121, -103, -37, 96, 8, 27, 20, -36, -30, 18, 33, -60, 115, -32, 122, 90, 31, -35, -66, 96, 57, -113, -125, 73, -96, -77, 26, -105, -49, -22, -26, 118, -128, -19, 117, 48, -117, -2, 114, 125, 105, 45, -33, -49, 21, 47, 11, -36, -119, 33, 108, 60, -91, 114, 11, -63, -23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[107, -3, 83, 97, -122, 124, -25, 74, 47, -20, -108, -72, 87, 81, -96, 23, -108, 108, -125, 76, -50, 42, -10, -98, 121, -105, 93, 113, -68, -38, -81, 15, 39, -16, 107, 10, 45, -26, -27, -6, -125, -64, -2, 102, 37, 113, -25, 78, 11, -19, -63, -55, -55, 43, -1, 61, -2, 97, 98, -101, 47, -101, -105, 0, -124, 92, 99, 4, -68, 113, -24, -58, -115, 76, -39, 79, -107, -65, -82, 110, -45, 43, -11, -2, -107, -25, -126, -113, 6, 118, 80, 123, -59, 20, -68, 116, -23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[24, -10, 86, -39, -17, -82, -9, -101, -128, -102, 49, -19, -45, -56, 62, 105, -42, -68, 55, -58, -94, -95, 54, -27, -26, -124, -123, 10, 115, -61, -121, -14, -23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[95, 44, -74, 108, 114, 90, -94, -19, 88, -15, 48, -15, -47, -92, -57, -7, -81, -119, 30, -128, 119, -55, -13, 45, 7, 10, 110, 40, 43, 10, 27, 96, -34, 115, 76, -60, -122, -100, 103, -111, -112, 94, 68, -12, -69, 3, -106, 19, -32, 66, 92, -42, 72, 118, 35, 35, 60, -112, -111, -83, 64, 2, -79, -5, -16, 57, 15, -58, -89, -13, 117, -3, -38, -28, 14, 72, 81, 68, -87, -61, 54, 123, -59, 102, 99, -122, 15, 56, -107, 65, -15, -100, -27, 22, 1, -5, -23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[12, 63, -40, 107, 122, -58, -51, 39, -76, -97, 49, 36, -47, -53, 75, 99, 2, -37, 26, -125, 73, -111, 27, 117, -125, -62, 68, 31, 41, 12, 126, -28, -118, -57, 101, -77, 82, 19, -99, -87, -40, -6, -91, 86, -108, 102, -36, 89, -48, 106, 26, 63, -16, -5, 45, 16, 70, -115, -3, 117, -74, 34, -105, 123, 114, 69, 115, -16, -8, -7, 38, 102, -114, 58, -24, 37, -88, -126, 25, 23, -109, 101, -112, 119, 39, 90, -64, -102, -109, -25, -49, -58, -117, -71, -2, -64, -23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[39, -6, -3, 81, 15, -34, -83, -81, -127, -19, 104, -17, -29, -61, -57, -103, -82, 8, -53, -57, 15, -84, 116, -116, -36, -71, -19, 25, 54, -12, -86, 111, -65, 20, 83, 13, 11, -59, 116, 22, -15, -47, 126, 87, -123, 99, -38, -94, -68, 45, 75, 106, 80, -26, -72, -32, 66, -53, 28, -50, -11, 13, 85, -92, -43, 107, -36, 3, -87, -97, 40, -120, 117, -56, 94, 17, -6, 15, -75, 48, 57, 122, -114, -12, -98, -69, -115, 40, 123, 57, -59, -89, 77, 78, -45, 34, -23, -26, 103, 29, -125, 17, -46, -11, -33, -53, -84, 93, -74, 29, 38, -114]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertNotNull(byteArray82);
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("AB6F9769CD580D60DC2B3BADA2104E774E9D4CB168344D0A5000959230DC4F3A977926ACE07D8EED7F0B2E319022E0A523013DCECAAB99DC2A400EBB0561A5309D13B4F17AF33E2D667F77B987F37BDD3D83CB9E904D76426E7E7CCB4E059D4DD91EFB9EC625E82DC75643ACA24E8661", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[117, -43, 122, 82, 21, 29, 86, -75, 39, 12, 48, -63, -49, 43, -90, -123]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-115, 122, -107, -5, 2, -38, -1, -101, 15, -62, -51, -72, 2, 53, -75, -59]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-20, 65, -21, 72, 14, -25, -122, -49, 54, -14, -77, -59, -52, 80, -50, 30]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-33, -61, 74, -46, -66, 40, 47, -106, 88, -28, 16, -10, 120, -105, -84, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[26, 36, 122, -18, 15, 28, 110, -128, 38, -128, 116, 26, 63, 100, -33, -36, -16, -67, 16, 2, -28, 24, 58, -112, 34, 116, -53, -123, 33, 70, -108, 90, -20, 65, -21, 72, 14, -25, -122, -49, 54, -14, -77, -59, -52, 80, -50, 30]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-20, 65, -21, 72, 14, -25, -122, -49, 54, -14, -77, -59, -52, 80, -50, 30]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-33, -61, 74, -46, -66, 40, 47, -106, 88, -28, 16, -10, 120, -105, -84, 2]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[26, 36, 122, -18, 15, 28, 110, -128, 38, -128, 116, 26, 63, 100, -33, -36, -16, -67, 16, 2, -28, 24, 58, -112, 34, 116, -53, -123, 33, 70, -108, 90, -20, 65, -21, 72, 14, -25, -122, -49, 54, -14, -77, -59, -52, 80, -50, 30]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey41);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey41);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2418692E4FBD8F1D35772318367F1BD9C58739EE073A3B02061D92D9F4EFADAAEC7B76E8EC07AA75E9865713BE95BCCFC39C67047AF3D5D8CBB3D6382AFCD8C923CB1F490F9903A7756058540A7D10E28150529ACC6D9958B293B9FD92E18A4B29AE6983BF992539EEACD807E8A2846824E2478E8560D8C935341FE4AA5978C5365366FEAF7ABE644B732CE733B3C1BAA0094574FEE09B53FCF67AF31017C2D81B937EAB1246A61BBC800892C4FA9C89AD6BDC1D42E3063DAEB97D24CD23321C49D9FFAA2467CE2E889BF180E15A97135933FF54F7F4CB30E58265CF44036D377815CCE54EA0641BACD067D1C343641", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("C287E7EE992A4117E57242770C5BA07C3054660FAC41CAAB4F3F28BAC347A5CFD469530FDABFB6E1FE7273EE79D2DE5BC740DCC5A3C37C30DA3F8E1304F2988252E71F546D65604C28CBD294BC41A75A7C224B1D316D45910EB0EA879901AE47C5F04255A261D69CA26A41331DA4FA6B", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("153C8B8D395A2C1D1A3853AFDB184572", secretKey49);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[60, 68, 81, -27, -117, -102, 124, 36, -38, 53, 83, 113, 28, -8, -12, 58]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[67, 98, 42, -42, 0, 125, -97, -60, 44, 3, 9, -76, -54, -103, 78, -101]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[67, 98, 42, -42, 0, 125, -97, -60, 44, 3, 9, -76, -54, -103, 78, -101]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-42, -87, -37, -102, -72, -4, 31, -98, 96, -85, -44, -3, 78, -37, 49, 71]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-114, -59, -47, -117, -2, 53, 99, -53, 16, -43, -99, 124, -98, -90, 28, 114]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, -48, -39, 57, 45, 89, 13, -28, -120, -78, 21, 65, -99, 15, -6, -6]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-79, -34, 5, 116, -78, -77, 125, -53, 22, -104, -75, 38, 30, -94, -85, 48]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[88, -69, 7, -94, -28, 7, -112, 49, 66, -97, 78, 20, 96, -53, 1, -57]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 26, -36, -111, -71, -64, -84, -47, 69, -89, -50, -115, 106, -50, -79, -112]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[53, -76, 3, 124, 109, -30, -72, 0, 0, 1, -39, -10, 40, 119, -122, -67]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[88, -69, 7, -94, -28, 7, -112, 49, 66, -97, 78, 20, 96, -53, 1, -57]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-37, -20, 119, 86, 17, 99, 84, -91, -41, 112, 32, -17, 66, -87, -60, -107]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[109, -3, 119, 66, 105, 95, -121, 30, -66, -76, 10, -81, 25, 20, 109, 73, -91, -8, 106, -62, 31, 33, 123, 7, 85, -81, 26, 63, -126, 88, -1, -48, -13, 107, 19, 51, -105, -44, 121, 29, -73, 122, -111, -29, -60, -104, 21, -12]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-84, 8, -90, 69, -89, -33, -7, -7, 57, 84, -106, 25, 1, 37, -98, 92, 106, 44, -56, -81, -76, -38, 5, -57, 67, 44, -61, 93, 59, 36, -75, -18, -13, 107, 19, 51, -105, -44, 121, 29, -73, 122, -111, -29, -60, -104, 21, -12]");
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey54);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey54);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey54);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("EC3B318E00B36EFD396D86698A0C2871A46C76D28AB6029AB7AAD318701A7C382DC50D20A011686B9126738DE623EDA5", secretKey54);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBD74FDAC32596A72A5D74C50623A23C", secretKey54);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray64);
        java.lang.Class<?> wildcardClass66 = byteArray64.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[108, -92, -28, -30, 75, -56, 45, -22, -127, -69, -50, 45, -9, -105, 127, 36]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[29, -67, -77, -15, -1, 8, -29, 21, -40, -103, -126, 93, -33, 29, 99, -114]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-71, -32, 16, -21, 53, -58, -17, -101, -127, -18, -42, -60, 23, 84, -35, 47]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-37, 25, 32, -127, 38, 66, -109, -4, 115, 113, -86, -74, 9, -52, -125, 81]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, -49, -42, -122, -10, 113, -120, -82, -108, -97, -30, 82, -9, -96, 16, -20]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[62, 107, -39, -90, -104, 11, 38, 78, 52, -53, -78, -41, -108, -125, -85, 50]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[49, -67, 34, -113, 17, 12, 57, 108, -97, 117, -98, -27, -113, 14, 90, 89]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[74, 61, -104, -92, 5, -21, 41, -29, -68, 42, 88, -24, 14, -11, 76, 34]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[13, -118, -116, 33, 18, 45, -56, 30, 126, 58, 43, -44, -73, 27, -99, -21]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[124, 93, 49, 5, -27, 80, 95, -44, 14, -83, -120, -65, -35, 92, 35, 30]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-125, -35, 12, -104, -67, -40, 48, -70, 13, 3, -127, 125, -95, 110, 119, 23]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[13, -118, -116, 33, 18, 45, -56, 30, 126, 58, 43, -44, -73, 27, -99, -21]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-11, -75, -47, 7, -71, -53, -30, -118, 122, -17, 56, 102, -96, -112, -57, -109, 70, 19, 39, -69, 43, 120, 66, -40, -83, -84, 14, 121, -100, 3, -57, 108, 13, -118, -116, 33, 18, 45, -56, 30, 126, 58, 43, -44, -73, 27, -99, -21]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[13, -118, -116, 33, 18, 45, -56, 30, 126, 58, 43, -44, -73, 27, -99, -21]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[74, 29, 72, -53, -47, 20, 102, -88, -63, -60, -12, 114, -66, 72, 26, 68, 63, -77, 43, 26, -55, 74, -122, 36, -50, 29, -60, -109, 103, -103, 42, -83, -118, -66, 114, 120, -118, -92, 52, -116, 90, 70, -82, 96, 52, 72, -122, -100, 73, -66, 60, -23, -26, -73, -62, 106, -47, -80, -49, 115, -125, 102, -59, -92, 15, -84, -33, 100, -99, -50, -48, -49, 92, 107, 108, -70, -57, -75, -41, 74, 77, 84, 98, -47, -29, 82, 29, -65, 40, 94, -36, -12, 42, -77, 91, 80, 13, -118, -116, 33, 18, 45, -56, 30, 126, 58, 43, -44, -73, 27, -99, -21]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[89, -77, 64, -107, -39, -89, 53, -55, 41, 64, 65, -28, -106, -16, -79, 13, 37, 24, -64, -28, 53, -71, -66, -111, 24, -123, 74, 121, -37, 42, 123, 3, 13, -118, -116, 33, 18, 45, -56, 30, 126, 58, 43, -44, -73, 27, -99, -21]");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "59B34095D9A735C9294041E496F0B10D2518C0E435B9BE9118854A79DB2A7B030D8A8C21122DC81E7E3A2BD4B71B9DEB" + "'", str65, "59B34095D9A735C9294041E496F0B10D2518C0E435B9BE9118854A79DB2A7B030D8A8C21122DC81E7E3A2BD4B71B9DEB");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey39);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey39);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2418692E4FBD8F1D35772318367F1BD9C58739EE073A3B02061D92D9F4EFADAAEC7B76E8EC07AA75E9865713BE95BCCFC39C67047AF3D5D8CBB3D6382AFCD8C923CB1F490F9903A7756058540A7D10E28150529ACC6D9958B293B9FD92E18A4B29AE6983BF992539EEACD807E8A2846824E2478E8560D8C935341FE4AA5978C5365366FEAF7ABE644B732CE733B3C1BAA0094574FEE09B53FCF67AF31017C2D81B937EAB1246A61BBC800892C4FA9C89AD6BDC1D42E3063DAEB97D24CD23321C49D9FFAA2467CE2E889BF180E15A97135933FF54F7F4CB30E58265CF44036D377815CCE54EA0641BACD067D1C343641", secretKey47);
        java.lang.Class<?> wildcardClass53 = secretKey47.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[92, -67, -28, 95, -20, 60, 46, 42, 15, -66, -56, 83, -77, 50, -104, -64]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-43, -28, 48, 120, -44, -32, -75, 58, 65, -32, 4, 87, -51, -38, 89, -83]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-43, -28, 48, 120, -44, -32, -75, 58, 65, -32, 4, 87, -51, -38, 89, -83]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-49, 121, -31, -71, -45, -89, 43, -117, 105, -22, 98, -24, -111, 14, -128, 44]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[98, -92, -124, -51, 44, -1, 78, 100, 30, -82, 121, -29, -15, 93, -8, -97]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[83, 94, 73, -109, -88, -74, -41, 61, -123, 117, 38, 103, 53, 45, 38, -122]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[49, -29, 55, -6, 127, 115, -32, -103, 31, 6, -123, 44, 46, -119, 34, 87]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-116, 66, 86, -66, -51, -94, 19, -128, 89, 110, -36, -96, 87, -94, -33, -56]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[49, 51, 65, -127, -90, 10, 16, 22, -23, 74, 44, 55, -102, -58, 55, 12]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[17, -57, 90, -2, -100, 92, 114, -13, 63, 125, -68, -24, 7, 22, 84, 81]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-116, 66, 86, -66, -51, -94, 19, -128, 89, 110, -36, -96, 87, -94, -33, -56]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[89, 114, 117, 119, 98, -86, 10, -118, -5, -74, -110, -110, -115, 122, -8, -86]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-23, -90, -15, -1, 127, -3, -121, 9, 114, 29, 64, -98, -77, -44, -7, 21, -41, -84, -100, -41, 124, -106, 55, 111, 23, -120, -126, 44, 104, -76, -73, 7, 117, -11, -91, -67, 103, 84, -53, 39, 52, -84, 55, 5, -31, 37, -114, 19]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1372A85E83BC68F6AF0CF69E633F2490BB2459DD105EB9FE2170FB2AF533300FC168FE5B44AE6760C95F7E6ECB3601F9999A3BA3E3729EEED136B4352E7CBE7B1BC98B3D318B89BC5883BD60E72CA12D3179371B22E60811E833E0DD5CBCF1131218B19E5EE2E9C3F237F820F99AB59D107149F605832245FD64BAE3BBFD6CBDB69E703A3AEB00A64EB7D2853686E6021294C84D76E473015702EAD3F9CD7A2E55417F62469C16994FD323E50125F261B503A41D206BC6C97FDD179F59375F2CF92FEDA2B33C8A378393E9B2828FCB94BB29E8B65811D0056EB89B5F19F32806DA4381E4053E91697B9C1BE5A518792A", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[116, 98, 29, -56, -24, -38, 17, -24, -43, -97, 20, -108, -107, -54, 24, 93]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[124, 22, 23, -118, 122, 42, 7, -46, 51, 6, 13, 100, 28, 88, 123, -20]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[124, 22, 23, -118, 122, 42, 7, -46, 51, 6, 13, 100, 28, 88, 123, -20]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-25, -14, -71, 21, 2, -94, -47, 107, 51, 57, 49, 56, 6, -114, 85, -16, -76, -115, -112, -15, -82, -75, -59, 33, 112, -10, 102, -82, 107, 87, -75, 27, 116, 98, 29, -56, -24, -38, 17, -24, -43, -97, 20, -108, -107, -54, 24, 93]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "37CED2615E61C2B637EA13C0E065710172F0E352196EB1B8EB318422A9EBCF987CE0719A96345F5B4D3E28653098EED891F0FC72183DB2CF51157B7C2BE6FE3776AC25542CFBCAD46733244C8F70FBA829D6B44BBE2BC8803CC52C11657250A34A3F186C072DBD1783BBBE453EBEB5489E59FBA09B06000420D7DDDF37B78F619A100857507884F4CBFA8CEEC2AA443C97F40055454D066F55A78552E36401C5F9BA65C2A1B7C17D68C80BFD7CBF54CEB803C2FFCD5F6C6E83925DCB8DBB0D06B0E73F05F803EB0CBDEAD9E740FCB7C9760617D988EF4C88C579592CBD16674863790E26BE7EA53F4F1D56988909A87243A1ACA64EF403A9AD4365C38715D70EA5367519BFEBED8935995CA53D75719A310E9B2B0A7BA7D5EF57CF6AE8B13777B99F45F53F850E1085E245076C640EF53F591024F3C334DBAB1E72D31AAE45CABE3FB3E476E07A401CD05B1F134CD6CA572E86C95DFB36B1AB2947035E5FC9907348158BA24850A5902213AC123D2256CD3E3E6A625A3915473023DC3F37779D7A446F7F33F27B08D8B214FFAE7602D736A64F8380322344664A85481ED16CBB2023C868E386EA0A6862D30CD107DD22437F01B22292625F84CA6EBFD573CBF2E4C6F425A1D306D8B835280891C9A5A47D817F17D7E02E53D3847D1EF5CF6D3E74621DC8E8DA11E8D59F149495CA185D" + "'", str
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("56CB4A0BCDE09327B5C52D006F9E9F63EC0380EFF1FC44454F157BF18AB2204AB314624B0D4A402B86EECB0E36AC36557F4BDA764B46080BF10E3EAB6B438E7C03E0EC46868133632B06BFACE10D0128799DA6F1EB038301FDA8D088F5EAFBABC3F5F582B07D0FE862767A8AF41C8949AEE211FA4DAAD4C3DC8A13FF2FBF1103240C2CEA4C508D625800A7A9D32CAA045D14A8084A49EC983DACC58474E057F86AEFFB0F66F0E23D0E1FF85E20878AB158EE377489EF43BE607B72D9C6A1F48C7902B82DA8CB82FE33B0BF7376EA4F9601FC739E5708442B3CCBCD0D5119F598316A0864E7FD895A3292F06F0954AEF2", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-88, 48, 64, -87, 77, 51, -51, 79, 125, 111, 50, 43, -100, -55, -110, 30]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[31, -94, 92, -106, 108, -80, 90, 86, -18, 15, 0, -24, -40, 54, -70, -101]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 27, 20, -109, -10, 80, 29, 48, 91, 43, 106, 78, -87, 104, 29, -67, -60, 47, 123, -58, -89, 114, -58, 18, 66, 59, 110, 93, -32, -76, 59, 24, -88, 48, 64, -87, 77, 51, -51, 79, 125, 111, 50, 43, -100, -55, -110, 30]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "D30C4FBDC13374CA2572F2DE1395D1739F0E559A069909CA4AE12C30AC394FC696A24022A31C4CF46A774BF9BB21D9A3837667B71E8C837377D35737D87FE35096495DB37E259006B12D036996A1CE7EF57DE307E9261B24FE3251D1D95A01DDFEC41CAE8CD63A66D69548AE8167CDE1F8481EB05189F4CBB91B129237FB6578FB80E3D6C5B0474C60D6B019157DFEB837DEC86439F3312AF09F19EE0774DD94E40014C48127C6EEB43D0D8526F700681F074A9AA39001AB2A5CDC7FE738D532DF66CCD32E2DB109D5D3AC308B748B628B13695B74456F6B4BFC1B5594E77A3224EBA9DC8430C95B8CCEF29769931019211C0A2E1036CB44FBCDE357F3A81D67764633879EB1BCDFF3009A56E0666D066AD36F9AACB7A64198D74B42DB5BA7FAE413A92828AC9E9DF4C97BB03AD202D81A3D18069E9FC6840970CA094889D80F5C6C65A13ACE3AE38F63BD3CDF9DED3E1741A079315BD7DAE16C60C9CE1866469980D9780FA30344068DC9EB59E0D1B59376756526C88B3B36C0B4BC740BD64132271EA29E409D907D9A4D0366354C10FE173A9019723296C4884ABF07CF48396B6615DA2B6DD559F545AC4FF67F689CEC291F6C17F732919CB6B42992709E64F2A07A416B895479E299160EF62C65218BA142C7E2CB1CEFA0E033918F178426A83040A94D33CD4F7D6F322B9CC9921E" + "'", str9, "D30C4FBDC13374CA2572F2DE1395D1739F0E559A069909CA4AE12C30AC394FC696A24022A31C4CF46A774BF9BB21D9A3837667B71E8C837377D35737D87FE35096495DB37E259006B12D036996A1CE7EF57DE307E9261B24FE3251D1D95A01DDFEC41CAE8CD63A66D69548AE8167CDE1F8481EB05189F4CBB91B129237FB6578FB80E3D6C5B0474C60D6B019157DFEB837DEC86439F3312AF09F19EE0774DD94E40014C48127C6EEB43D0D8526F700681F074A9AA39001AB2A5CDC7FE738D532DF66CCD32E2DB109D5D3AC308B748B628B13695B74456F6B4BFC1B5594E77A3224EBA9DC8430C95B8CCEF29769931019211C0A2E1036CB44FBCDE357F3A81D67764633879EB1BCDFF3009A56E0666D066AD36F9AACB7A64198D74B42DB5BA7FAE413A92828AC9E9DF4C97BB03AD202D81A3D18069E9FC6840970CA094889D80F5C6C65A13ACE3AE38F63BD3CDF9DED3E1741A079315BD7DAE16C60C9CE1866469980D9780FA30344068DC9EB59E0D1B59376756526C88B3B36C0B4BC740BD64132271EA29E409D907D9A4D0366354C10FE173A9019723296C4884ABF07CF48396B6615DA2B6DD559F545AC4FF67F689CEC291F6C17F732919CB6B42992709E64F2A07A416B895479E299160EF62C65218BA142C7E2CB1CEFA0E033918F178426A83040A94D33CD4F7D6F322B9CC9921E");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.Class<?> wildcardClass11 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-89, -90, -14, 43, 87, 75, -53, -71, -120, -99, 8, -127, 24, 42, 127, -14]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[19, 121, 79, 77, -5, 74, 98, -72, -24, 110, 23, 15, -39, -18, 112, -64]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[71, -108, 58, -51, -11, -96, -102, -61, -93, 35, -101, 102, 79, -62, 20, -116, -30, 77, -127, 105, 5, 81, 122, -92, 120, 71, -9, -12, 105, 120, 88, -56, -89, -90, -14, 43, 87, 75, -53, -71, -120, -99, 8, -127, 24, 42, 127, -14]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-92, 98, -81, 61, -38, -88, -49, 39, -85, 125, -18, -26, 59, 58, 86, 70, -103, 90, 89, 75, 86, 81, 61, 88, -74, 118, 63, 120, -37, 7, 85, -39, -89, -90, -14, 43, 87, 75, -53, -71, -120, -99, 8, -127, 24, 42, 127, -14]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "A462AF3DDAA8CF27AB7DEEE63B3A5646995A594B56513D58B6763F78DB0755D9A7A6F22B574BCBB9889D0881182A7FF2" + "'", str9, "A462AF3DDAA8CF27AB7DEEE63B3A5646995A594B56513D58B6763F78DB0755D9A7A6F22B574BCBB9889D0881182A7FF2");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "A462AF3DDAA8CF27AB7DEEE63B3A5646995A594B56513D58B6763F78DB0755D9A7A6F22B574BCBB9889D0881182A7FF2" + "'", str10, "A462AF3DDAA8CF27AB7DEEE63B3A5646995A594B56513D58B6763F78DB0755D9A7A6F22B574BCBB9889D0881182A7FF2");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("5BE3AD81AC86AE84C22517372486A489918589D0DBC7ECAED1006648A223971B966743929EA59610FAEE030703A85C3A130FCD452D9E59B914D26CD76B4FFEBB3F60CAEDC804ECE26CA0624FAA2F068C4FBE0E21DFF29A93D6EA619ED09D32C62986D8A946B45B94BB0CF5B9649A52C0", secretKey21);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[25, -38, 86, -74, 15, -32, 73, -33, -63, -94, -106, 47, 78, -128, -43, 71]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, -43, 119, -54, 64, 6, 124, -24, 22, -124, -18, 49, 12, -109, 8, -106]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 72, -64, 87, -70, -57, -109, 25, -82, 25, -79, -126, 87, -57, -49, 50]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-93, -64, -92, 21, -82, -56, -108, -113, -118, -33, 61, 87, -83, 81, 73, 105]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-110, 115, 115, 118, -43, -112, -94, 97, 21, 123, -94, 87, -48, 4, -125, 52, -81, -68, -54, -96, -52, -126, -118, -127, 119, 69, 86, 125, 3, -15, -122, -30, -1, 72, -64, 87, -70, -57, -109, 25, -82, 25, -79, -126, 87, -57, -49, 50]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("3607647E50ECCCABE8DE03DFAC3EC1AA", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC2604A2CA89AEB82DC796F15BF80521F572E7DDBD895A07FE4DBC1655B0D40DBBAFECD91671B2FC1FC48BDE9390416AF310B33216A292EAB923342D56721F703BB511D2C868A541FA9F2D8D09F26A3884707424CB2D801D4B492BCAF985EBE9239B79C2976866C0DD031900EE9E5DE6", secretKey11);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("796F76D3714103B2BB2F8200A7BDADD90D88B8895611BED2931E07DA99C53620100FCBB64F5B09F4B317BADE830021E8", secretKey11);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("ABCDC72C8F5A2F463BE2D5492E248DBA0FFAE28ECE748520B621BDBA3F3A0A7177423D42E157B151422D1BCB30434060098C298C36C9BBF520C56A034FCB1B0DAED45D4B63C12D5DCE321B72090B88DE3815B9473B1E0B86EAABD1E50BCE3F8287ECB51657A04EA4F1D7905C21E36065EE3945E9A7A021F4F35BF17DCB807C47B5E4A14710E35DF42AC18040B68A70230BAB71855362F98E6D1C648233DF9A7FA2EBA426C8A75678992BD8B96F1648EF1D8EA1C8BE9BBF672448C2E886061C0CC3B00A069E6246CDF52E445665314E43F7110B8E480ED1728A636094E5F20006761066306A09E94530B2793D303050B3", secretKey11);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        java.lang.Class<?> wildcardClass25 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[111, 105, 62, -125, -24, 104, -55, 64, 121, -84, -70, 121, -71, -104, 105, -22]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-30, -12, -63, 20, -86, 86, -17, -1, -65, -103, -102, -66, 86, -79, 39, -114]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-30, -12, -63, 20, -86, 86, -17, -1, -65, -103, -102, -66, 86, -79, 39, -114]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-52, -109, 79, -105, -59, 6, -27, -11, -53, 51, -17, 85, -105, 107, 71, -14]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[111, 105, 62, -125, -24, 104, -55, 64, 121, -84, -70, 121, -71, -104, 105, -22]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-57, -65, 32, 106, 109, -88, 45, -80, -1, 105, -58, 122, -77, 86, 120, 101, 33, -89, 27, -43, 94, -3, -56, -39, 96, -54, -127, 41, 61, 127, 43, 65, 111, 105, 62, -125, -24, 104, -55, 64, 121, -84, -70, 121, -71, -104, 105, -22]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-103, -58, 85, 46, -35, 90, 33, 44, 44, 48, 83, -21, 71, -36, 91, 11, -48, -13, -111, -82, 44, -29, -41, -15, 115, 116, 82, -3, 78, 77, 33, 103, -30, -31, -79, -37, -111, -78, 55, 19, 80, -69, -9, 15, -113, 117, 12, 36, 47, -40, 73, 107, -81, 82, -66, -86, -29, 16, -7, -51, -37, -50, 88, -33, -17, -13, -87, -34, 35, 15, 106, 50, 108, 69, 117, 114, 125, 32, -66, -51, 71, 51, -76, 19, -121, -73, 46, 91, -106, -117, 9, -19, -75, -47, -7, -40, 111, 105, 62, -125, -24, 104, -55, 64, 121, -84, -70, 121, -71, -104, 105, -22]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[111, 105, 62, -125, -24, 104, -55, 64, 121, -84, -70, 121, -71, -104, 105, -22]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "361CF47F672AC71C76F9CC522E92FA35A9134B6984B9EFCB7F78D7AD65E3C3B72E9FC1B8BE235C65680E3CD4365E69AD33F6A4EFC0678BFF2A7990994623EA8C3943727DABD1E62FE27348C49900EC8E3CE8724EA92A44309502B0F56BB01D376A5FC9B7ECEE7E5570AA719CF2773CAF6217364DEA23DC16AD86EEFC17AA6536480520FCFB4A6736E03510FA93419318CCDB61F057D0ACDB5BC9F51A790E0DFD5873AFD9EAB73EEEB2204BA24B207CB5624CACDB7FEA20B90FA6AF81E475B5A319B95D78A2C5CE0AF7FC76C1B498FD49BA307AD96ED4D48D851D1262BD01173C22BAD7FC2D49F272089F4679CD9DD333DC9D7D2BC8EC5827DB2E15D21EDD2D68A74E8242693A39904BE42FE04AB45746768FDB7BE23622E650E40F45421E6B5FE0F4A3699744C21D5D83DF3D5CB36EE63D729C60CAC2297527DB3FC85F17D616A6DA8874979B8AA68EF74B54D1BB63CFDB6E10113A9FD4CAAEE845D93539F5C56B0488B0F19F86154347288AD3972B1D33C591E7903953F4F5A16625975C61E818263F755B1E9B4BDF58C4D463330F818B28A59A06DBDD8ECC7BDBC20EFCBDE3EDA4A0D8786CB63F004169AE46ED10397FC7669D8B0BBD17D435B4460431EADA6EE711BEFC0D9C8A9B890135A0D7C60B48057832DDE112C4BDA04E9A831FFB636F693E83E868C94079ACBA79B99869EA" + "'", str23, "361CF47F672AC71C76F9CC522E92FA35A9134B6984B9EFCB7F78D7AD65E3C3B72E9FC1B8BE235C65680E3CD4365E69AD33F6A4EFC0678BFF2A7990994623EA8C3943727DABD1E62FE27348C49900EC8E3CE8724EA92A44309502B0F56BB01D376A5FC9B7ECEE7E5570AA719CF2773CAF6217364DEA23DC16AD86EEFC17AA6536480520FCFB4A6736E03510FA93419318CCDB61F057D0ACDB5BC9F51A790E0DFD5873AFD9EAB73EEEB2204BA24B207CB5624CACDB7FEA20B90FA6AF81E475B5A319B95D78A2C5CE0AF7FC76C1B498FD49BA307AD96ED4D48D851D1262BD01173C22BAD7FC2D49F272089F4679CD9DD333DC9D7D2BC8EC5827DB2E15D21EDD2D68A74E8242693A39904BE42FE04AB45746768FDB7BE23622E650E40F45421E6B5FE0F4A3699744C21D5D83DF3D5CB36EE63D729C60CAC2297527DB3FC85F17D616A6DA8874979B8AA68EF74B54D1BB63CFDB6E10113A9FD4CAAEE845D93539F5C56B0488B0F19F86154347288AD3972B1D33C591E7903953F4F5A16625975C61E818263F755B1E9B4BDF58C4D463330F818B28A59A06DBDD8ECC7BDBC20EFCBDE3EDA4A0D8786CB63F004169AE46ED10397FC7669D8B0BBD17D435B4460431EADA6EE711BEFC0D9C8A9B890135A0D7C60B48057832DDE112C4BDA04E9A831FFB636F693E83E868C94079ACBA79B99869EA");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "361CF47F672AC71C76F9CC522E92FA35A9134B6984B9EFCB7F78D7AD65E3C3B72E9FC1B8BE235C65680E3CD4365E69AD33F6A4EFC0678BFF2A7990994623EA8C3943727DABD1E62FE27348C49900EC8E3CE8724EA92A44309502B0F56BB01D376A5FC9B7ECEE7E5570AA719CF2773CAF6217364DEA23DC16AD86EEFC17AA6536480520FCFB4A6736E03510FA93419318CCDB61F057D0ACDB5BC9F51A790E0DFD5873AFD9EAB73EEEB2204BA24B207CB5624CACDB7FEA20B90FA6AF81E475B5A319B95D78A2C5CE0AF7FC76C1B498FD49BA307AD96ED4D48D851D1262BD01173C22BAD7FC2D49F272089F4679CD9DD333DC9D7D2BC8EC5827DB2E15D21EDD2D68A74E8242693A39904BE42FE04AB45746768FDB7BE23622E650E40F45421E6B5FE0F4A3699744C21D5D83DF3D5CB36EE63D729C60CAC2297527DB3FC85F17D616A6DA8874979B8AA68EF74B54D1BB63CFDB6E10113A9FD4CAAEE845D93539F5C56B0488B0F19F86154347288AD3972B1D33C591E7903953F4F5A16625975C61E818263F755B1E9B4BDF58C4D463330F818B28A59A06DBDD8ECC7BDBC20EFCBDE3EDA4A0D8786CB63F004169AE46ED10397FC7669D8B0BBD17D435B4460431EADA6EE711BEFC0D9C8A9B890135A0D7C60B48057832DDE112C4BDA04E9A831FFB636F693E83E868C94079ACBA79B99869EA" + "'", str24, "361CF47F672AC71C76F9CC522E92FA35A9134B6984B9EFCB7F78D7AD65E3C3B72E9FC1B8BE235C65680E3CD4365E69AD33F6A4EFC0678BFF2A7990994623EA8C3943727DABD1E62FE27348C49900EC8E3CE8724EA92A44309502B0F56BB01D376A5FC9B7ECEE7E5570AA719CF2773CAF6217364DEA23DC16AD86EEFC17AA6536480520FCFB4A6736E03510FA93419318CCDB61F057D0ACDB5BC9F51A790E0DFD5873AFD9EAB73EEEB2204BA24B207CB5624CACDB7FEA20B90FA6AF81E475B5A319B95D78A2C5CE0AF7FC76C1B498FD49BA307AD96ED4D48D851D1262BD01173C22BAD7FC2D49F272089F4679CD9DD333DC9D7D2BC8EC5827DB2E15D21EDD2D68A74E8242693A39904BE42FE04AB45746768FDB7BE23622E650E40F45421E6B5FE0F4A3699744C21D5D83DF3D5CB36EE63D729C60CAC2297527DB3FC85F17D616A6DA8874979B8AA68EF74B54D1BB63CFDB6E10113A9FD4CAAEE845D93539F5C56B0488B0F19F86154347288AD3972B1D33C591E7903953F4F5A16625975C61E818263F755B1E9B4BDF58C4D463330F818B28A59A06DBDD8ECC7BDBC20EFCBDE3EDA4A0D8786CB63F004169AE46ED10397FC7669D8B0BBD17D435B4460431EADA6EE711BEFC0D9C8A9B890135A0D7C60B48057832DDE112C4BDA04E9A831FFB636F693E83E868C94079ACBA79B99869EA");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("60776C49AD5DF687B0C31C9B3F6A1ABA", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("59CF4512A9C852EAFEBD9B28C4F1774C", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("0A3B539554760DC826AB65F5171B81D27FC10A635E193C0C0A17DEAC247F87288E1155F8E492E2BCD29DE533EBBAFCB6D2685B56517A5B84A552578477FA0B20C2B17ED71ABBD492A56ABE1BFC8CFA0B91C87777239A413F467D0C4551A81C5192F8F04536F17CDFE5F4F4040C0C15EF", secretKey31);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[55, 111, -12, -46, -122, 16, 35, -89, -84, 48, -98, 23, -105, 123, 47, 9]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[121, 115, 104, -28, 44, -128, -33, -85, -80, -16, 28, 22, 4, -37, -29, 54]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-28, -82, -89, -21, -104, -23, 125, -66, -124, 65, -43, 78, -42, -3, -56, -79]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[69, 51, -70, -127, 35, -19, -50, 38, 6, -123, -87, -86, 22, 108, -5, 41]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[114, -110, 7, -37, -30, -23, -68, 82, 17, 71, 46, 69, -37, -68, -99, -58]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-41, -96, 60, -117, 49, -59, -94, 34, 67, 52, -26, 127, 90, 63, 8, -44]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[70, 52, -26, -119, -90, -95, 61, -24, -50, -5, -103, 97, 11, 92, 115, 74, -48, -101, 74, -53, 84, 84, 3, 88, 14, 102, 89, -55, 23, 86, 122, 114, 114, -110, 7, -37, -30, -23, -68, 82, 17, 71, 46, 69, -37, -68, -99, -58]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[26, -67, 79, 124, -123, 27, 1, 80, -67, 59, -17, 74, -42, 53, -20, 108, -34, 79, 64, -104, 78, -71, 104, -19, -14, 105, -5, 0, -81, -47, -57, -85, 114, -110, 7, -37, -30, -23, -68, 82, 17, 71, 46, 69, -37, -68, -99, -58]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[51, 78, 107, 117, -7, 56, -58, -16, 20, 117, -8, 27, -5, -34, 84, 36, -86, 25, -15, -29, 26, -81, 38, 29, 46, -83, 96, 25, -63, 121, 116, -90, 114, -110, 7, -37, -30, -23, -68, 82, 17, 71, 46, 69, -37, -68, -99, -58]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-43, -63, 6, -128, -110, -74, 87, -64, -124, 100, 51, -44, -109, 59, -20, 88, -57, -46, -64, -31, 26, -101, 55, 68, 112, 105, -19, 43, 19, -60, -118, 73, 114, -110, 7, -37, -30, -23, -68, 82, 17, 71, 46, 69, -37, -68, -99, -58]");
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey11);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey11);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("468A186984B6CE8DCF787F1E5A47C6FE", secretKey11);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("1AADA1D2FFB8416502B45E21C5505E424B252DD37E68AA64BDBF1B356804C73BD3FE2E64079B1B1DF0036F5734786E0FDE5B2956AFF054177D948FD1A465596F0D0DDD8657E3D2745596AD4277F829163BD09479A2B28D9216CC842B22C0C814C78447F726D5C8EE7507AAFB674B747B", secretKey11);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-7, 116, -59, 33, -61, 76, -92, -109, 21, -109, 82, -62, -8, 100, 0, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-8, 120, 72, -128, 115, 10, 17, 38, -19, 76, -80, 91, -117, -41, 19, -43]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-8, 120, 72, -128, 115, 10, 17, 38, -19, 76, -80, 91, -117, -41, 19, -43]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[77, 21, -34, -125, -39, 55, 32, 102, 50, -24, -45, -114, 127, -125, 1, -118]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-7, 116, -59, 33, -61, 76, -92, -109, 21, -109, 82, -62, -8, 100, 0, 111]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[125, 84, -78, 86, 28, 106, -122, 107, 38, 91, 96, 49, 93, 22, -79, -51, 15, 108, 47, 107, -69, -51, 41, 102, -85, -89, 123, 96, -123, 51, -54, 22, 118, 11, 13, 79, -37, -68, 28, -70, -29, -44, 37, 7, 11, -62, -31, -39, -128, -7, -6, -98, 13, -65, -59, 126, 86, 38, -69, 124, -22, -78, 123, -41, -33, 24, 53, 13, -39, 40, -17, -103, -89, -83, 98, -98, 116, -124, -98, 61, -105, 16, 56, -43, -101, -5, -109, -70, -93, -112, -46, -13, -77, -109, -127, -57, -7, 116, -59, 33, -61, 76, -92, -109, 21, -109, 82, -62, -8, 100, 0, 111]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-43, 80, 50, 87, 55, -24, -28, -74, -97, 98, 80, -107, 44, -82, 72, 107, 35, -41, 125, 84, -64, 103, -115, -52, 44, 110, 85, -57, -65, 16, 21, -79, -7, 116, -59, 33, -61, 76, -92, -109, 21, -109, 82, -62, -8, 100, 0, 111]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[86, 78, -117, 14, 115, -29, 22, -47, 52, -88, -28, 113, -50, -32, -77, 38, 94, 40, 114, 77, -109, -91, -70, 46, -74, 106, 112, -94, 104, 24, -20, 111, -7, 116, -59, 33, -61, 76, -92, -109, 21, -109, 82, -62, -8, 100, 0, 111]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "90AFCE7FFFE82B9DD7CD1C5D132807D59D01DFB2B094BB5D7F54B70D1D6165F81345FDD13D3659B5B9FFC2A3B28108E6B0600591D806E9EF402EC812DAA6D7849F21FA7E6217DC2D6EC3264332C2943D3213363D1661873C208B4F746256FDB4CA4633C70E0C2B1A038B8DD30DC08D0B1D01383E4F253173B2220A560AFE902D1F50B224A8074B2C8E787B1BBA8BD379F2ABB136610D392A0EE449DEBC3AEF9D6854817324C5E547C24EE2AB6054A6A3A20818B3F2038586DB62D1E964381208950B8F17CCD8AF1F4CAC9B5A4E58FDFB216C59888E686D8787DAE2C38A164093F974C521C34CA493159352C2F864006F" + "'", str23, "90AFCE7FFFE82B9DD7CD1C5D132807D59D01DFB2B094BB5D7F54B70D1D6165F81345FDD13D3659B5B9FFC2A3B28108E6B0600591D806E9EF402EC812DAA6D7849F21FA7E6217DC2D6EC3264332C2943D3213363D1661873C208B4F746256FDB4CA4633C70E0C2B1A038B8DD30DC08D0B1D01383E4F253173B2220A560AFE902D1F50B224A8074B2C8E787B1BBA8BD379F2ABB136610D392A0EE449DEBC3AEF9D6854817324C5E547C24EE2AB6054A6A3A20818B3F2038586DB62D1E964381208950B8F17CCD8AF1F4CAC9B5A4E58FDFB216C59888E686D8787DAE2C38A164093F974C521C34CA493159352C2F864006F");
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey34);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey34);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey34);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey52);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey52);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey52);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey52);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("662CF2BFC2999C8DF18C4367DB652B2F70F63F4946CFA29C631F0A6F35B80CD37EFCDDB02D33F4D99D8DB8E7DF20FF36", secretKey52);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("463CAA2BD4DEFD20F8E05D6670DE96D7EFDC0E8D4D84C870D15F34611C55FC6BD8216FD85E17C4CCAE11A5C37A8FA6C2FA3E6B7447E59F30647091CBC50B3872F283A737E1B800897C70B6B9C3AFA21AFE2E5779F2B2D545F53C3E51FD813505E75E43E6449F79BF2F3AE18DAB12A9867FF8C9101EB49508652C4E5D05BE98070B2702F27D2CAFF2BD5E22EDE54E40206C4100CF1E042574CB2E2072249C6841142A5376DEFBCACDFEE7C5608B8B19AC364CAC50EAE8FB7D553CAB4292273D51922B40F9AC76FDB3FA00D76F0220B3885BE29EE40AE4F6390A4BB7BAA54566A4350EA9F27FBC1471CAB9C792DC57C8F5", secretKey52);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[26, 21, -36, 68, 92, 35, -84, -95, 59, -34, 58, 32, 106, -25, 98, 58]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[79, 103, -118, 113, -61, 107, -98, -111, -87, 30, 84, -48, -99, 111, 8, 33]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-57, -89, 98, -65, -54, -110, -37, 66, -75, 91, -83, -113, 17, -13, -125, -94]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-23, -1, -113, 24, -4, 119, -78, 80, 11, -52, 95, 86, 127, -89, 102, -92]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-3, 117, 36, 95, -46, -24, -93, -16, 4, 22, 91, -58, -82, -18, -54, 126]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-22, -119, -46, -95, -112, 97, 56, 44, 115, 74, 24, 59, 65, 44, -28, -25]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-22, -119, -46, -95, -112, 97, 56, 44, 115, 74, 24, 59, 65, 44, -28, -25]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-92, -49, -104, -15, -63, 99, 95, 36, 87, -26, 76, -47, -51, 97, -96, 71, -98, -4, -72, 70, 12, -104, -82, -63, -10, 39, 127, -29, 23, 79, -34, 30, -3, 117, 36, 95, -46, -24, -93, -16, 4, 22, 91, -58, -82, -18, -54, 126]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-45, 84, -83, 17, -104, -62, 81, 46, 83, -42, -93, 15, 47, 86, 100, -97]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-101, 86, 38, -8, -4, 68, -2, 93, 126, -52, -19, 4, 19, -99, 10, 8]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-18, -30, 51, 4, -78, -39, 66, -45, 124, 83, -41, -38, -31, -30, -35, -86]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-45, 84, -83, 17, -104, -62, 81, 46, 83, -42, -93, 15, 47, 86, 100, -97]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-8, -39, 126, 43, 125, -40, -32, 17, 40, 127, 86, 108, -19, 74, 52, -19, -72, 45, 29, -80, -42, 126, 101, 9, -94, -59, 126, 60, -24, 52, -8, -92, -45, 84, -83, 17, -104, -62, 81, 46, 83, -42, -93, 15, 47, 86, 100, -97]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-55, 106, -103, 112, -111, -72, 121, -98, 22, -40, 25, 80, 49, 98, -78, 83, -98, 61, -69, 0, 62, -90, 73, 88, 107, -121, -77, -84, 77, 44, 116, -128, -45, 84, -83, 17, -104, -62, 81, 46, 83, -42, -93, 15, 47, 86, 100, -97]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-18, -30, 51, 4, -78, -39, 66, -45, 124, 83, -41, -38, -31, -30, -35, -86]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-78, -98, -6, -61, 8, 56, -51, 92, 107, -16, 48, 53, 49, -97, 76, 48, -83, 74, 71, 82, -20, -98, -107, 6, -37, 118, 110, -12, 46, 117, -108, 55, -45, 84, -83, 17, -104, -62, 81, 46, 83, -42, -93, 15, 47, 86, 100, -97]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[62, 56, 72, 13, -99, -77, -100, 120, -84, 14, 76, 50, 41, 78, -111, 93, -103, -60, -69, 126, 89, 0, -9, 79, 66, 63, 99, -3, -108, 19, -49, 85, 41, -30, -43, 81, 78, 121, 98, 73, -120, -116, -110, 76, 94, -115, 102, 96, 120, 57, -41, -5, 14, 117, -119, -93, 48, 53, 56, -64, -74, -20, -96, 0, -51, -66, 63, 77, -113, -73, -75, 84, 2, -112, -116, -59, -37, -21, 87, 33, -81, -19, 9, 57, 91, -38, 73, 119, -19, 72, 62, -113, 66, -118, -44, -122, -45, 84, -83, 17, -104, -62, 81, 46, 83, -42, -93, 15, 47, 86, 100, -97]");
        org.junit.Assert.assertNotNull(byteArray65);
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("79AAC6BADDEE51E806D5C55C344BCE07C014789F446BFB96606CC5F491A4CCBBE53D15D8EA22EB6673FB1293F0E712BB", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.Class<?> wildcardClass6 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[110, 29, -113, -90, -62, -31, 54, -81, -110, 0, 116, 72, -90, -118, 92, -13, 111, -70, 49, 73, 111, 44, -59, 68, -99, 125, -20, -64, 43, 23, -5, -67, -42, 105, -118, -15, -119, 43, -96, -127, -123, 52, 71, 71, 10, 107, -74, 11, -120, 75, -121, 60, 119, -17, -84, 19, -30, -89, -26, 73, -4, -98, 77, 124, -28, 65, -73, 58, -117, -82, -125, 26, 95, 29, -41, -36, -111, -45, 26, -73, 120, 27, 47, -97, -59, 104, 10, -11, 88, 27, -81, 123, -124, 14, -82, -6, -80, -66, 57, 115, 21, 115, -38, -3, -35, 25, -73, -73, 92, 32, -85, -124]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-58, -81, 34, -14, 62, -68, -66, 23, -85, -7, -84, -111, -79, -113, 69, 37, 88, 110, -83, 49, 102, -79, 35, 102, -53, -7, -27, 127, 100, -125, -54, 54, -45, 84, -3, 111, -38, -90, 27, 72, 82, -86, -73, 104, -119, -54, -85, -36, -35, -39, 23, -47, -5, -23, -67, 19, -84, -21, 8, 113, -94, -9, -81, -95, 70, -49, -67, 13, -67, -1, -18, 31, -59, -67, 60, -55, -80, 9, -49, 60, 109, -45, 12, 83, -31, -81, -63, 4, 125, 12, 93, 64, -76, 67, -12, -11, -80, -66, 57, 115, 21, 115, -38, -3, -35, 25, -73, -73, 92, 32, -85, -124]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "C6AF22F23EBCBE17ABF9AC91B18F4525586EAD3166B12366CBF9E57F6483CA36D354FD6FDAA61B4852AAB76889CAABDCDDD917D1FBE9BD13ACEB0871A2F7AFA146CFBD0DBDFFEE1FC5BD3CC9B009CF3C6DD30C53E1AFC1047D0C5D40B443F4F5B0BE39731573DAFDDD19B7B75C20AB84" + "'", str5, "C6AF22F23EBCBE17ABF9AC91B18F4525586EAD3166B12366CBF9E57F6483CA36D354FD6FDAA61B4852AAB76889CAABDCDDD917D1FBE9BD13ACEB0871A2F7AFA146CFBD0DBDFFEE1FC5BD3CC9B009CF3C6DD30C53E1AFC1047D0C5D40B443F4F5B0BE39731573DAFDDD19B7B75C20AB84");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey9);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey9);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey44);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey44);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("1DAAFB903B39AC426EE0EBBB5B8EA339FF6DE65AD6895DB32CDB9E9DC9B2A8DE1A0110CDE63EFA1B4628E19E64B932D2F86ADAD3C92E58420AD7019B8C6799C534B6ADC977BF960688E8D2B071F966E620AC291198850B13E49230BCEA6D76BF0DD2E53B33347CA9E25655AA95C48399", secretKey44);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("0E9D5A1E385156B31E00E020866E1A8A3F243C4451113F3910A46004609548D14575385BA52EA07B573AADC6DADCA686EF46E9E7B2CE360800AA04E7AB39B3ADE90636F2E9C3794B98BA5EA42F1678A66623EB919BED63C9D4CA5490F563DD53AF4F43330E68832CD383B0113F5D2EFA85B1627C637BBE010686A66946C9A7C614F6071BBFE3147B6F8ECF8C8A0B58D313F46B0694068D8667651D830F43CA82305DA8D56B45312AA89C8D8C7BC3A22F011B2B55E903FA076734C3151E75C545A26F38F284E95816793A758CA0A8F71605BCC6C5E9D08D1389F765802934285626A9A93AAB1C5ACB511616ABE7622FA0", secretKey44);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey44);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray63 = new byte[] {};
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray63);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey65);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey69);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey69);
        byte[] byteArray73 = new byte[] {};
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray73);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey75);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey79);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey79);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey79);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey79);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey79);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey79);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey79);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey79);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey79);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey79);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey79);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey79);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("74989AC62FDAFE385E285EB5670DF18B5E5CF470E5AD7F9382C7C1589BEDC4CD11F6CB98D252404EE6600DBEF832C65A", secretKey79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey79);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-25, -105, 15, 50, 8, 119, 109, -57, -128, -39, 102, 49, -7, -47, 125, -109]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-119, 22, -13, -62, -57, -86, 113, -127, -39, -84, 13, 16, 120, 65, 124, -93]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[37, -14, 19, 12, 44, 79, 0, 99, 53, -78, -97, -118, 102, 73, -79, -121]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-71, -34, -61, -69, 91, 111, -20, 116, 24, 61, 49, -127, 56, -31, 34, 34, 28, -107, -95, -59, 79, -8, -107, -26, 30, 86, -14, -25, 31, -66, 50, 116, -25, -105, 15, 50, 8, 119, 109, -57, -128, -39, 102, 49, -7, -47, 125, -109]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-93, 112, -93, 55, 75, 2, -71, 42, 71, -2, 3, 126, -9, 18, -73, -11]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[80, 109, -34, -39, 56, -85, 116, 47, 116, 61, -113, 10, -12, -60, -91, 58]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-17, 100, 119, 68, 97, -122, -10, 97, 3, 9, 42, 26, 43, 99, 119, -71]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-78, -55, 89, -84, 64, 114, 35, 99, 33, 16, -52, 81, -44, -109, 62, -52]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[122, 69, 108, 79, -79, 7, -59, -115, -74, 127, -100, -81, 93, 80, 32, -4]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[6, -19, 23, -93, -72, 88, 89, 83, -58, -110, 7, 98, -89, 83, -58, -75]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-48, 92, -85, -49, -41, 102, -40, -35, -50, 14, -88, -35, -21, -47, 10, -110]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[122, 69, 108, 79, -79, 7, -59, -115, -74, 127, -100, -81, 93, 80, 32, -4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[122, 69, 108, 79, -79, 7, -59, -115, -74, 127, -100, -81, 93, 80, 32, -4]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[110, -36, 57, -74, 35, -124, -7, -126, 1, -82, 4, 91, -39, 115, 98, -41]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, -64, 88, 9, -96, -73, 95, -18, -35, 105, 127, -101, 44, -109, -70, -118]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-18, 106, 96, -31, -81, 49, 85, 41, -70, -51, 44, 6, 108, 98, -92, 105]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[65, -65, 60, 14, -111, -5, -27, 78, -103, 36, -108, 65, 69, 124, -3, -124, -54, -19, 86, -74, -92, 9, 71, -74, -97, -9, -122, -41, 32, -25, -127, 68, 85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-43, 123, -111, 14, -19, 57, -110, 85, -113, -84, 10, 112, 107, -72, 13, 67, -7, -80, 42, -9, -53, 46, 23, 126, 48, -35, -118, -84, -124, -58, -51, -91, 85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[93, -112, -17, 56, 96, -37, -38, -115, 124, -38, 104, -118, -22, -32, -47, -34, -12, -38, 76, 2, 125, -2, -74, -125, 94, -72, -2, -21, 27, 115, -100, 27, 19, -121, -116, -24, 111, -102, -13, -110, 104, 65, 116, -125, -7, -99, 31, -80, 41, 66, 12, -65, -6, 14, -69, 4, 125, 65, 116, 91, -74, 35, 49, 63, -46, 113, 46, -16, 124, 76, -81, -48, -10, 8, -41, -87, 91, -88, 45, 10, -21, -80, 122, 57, -84, -52, -17, -47, -98, 45, 84, -125, 106, 1, 15, 13, 85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[34, -8, -4, 63, -79, 64, 25, -107, 48, -39, 56, 105, 39, 40, -30, 64, -13, 41, -79, 42, 54, 41, 40, 63, -54, -57, -63, 91, 57, 33, -57, 83, -8, 104, -47, 127, -35, 22, 28, 99, -48, -48, 85, 17, 43, 67, -80, -7, 114, -127, 39, 37, 1, -43, -40, 56, -14, 27, -96, -63, 13, 113, 72, -62, -94, -47, -41, -106, -124, -94, 115, -65, 42, 61, 68, -127, 108, 98, -31, -103, 125, 101, -106, 15, -7, -81, -40, -90, -55, -21, -83, -76, 110, 2, 61, -3, 85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-15, 48, 60, -94, 9, 25, 108, 67, 22, 105, 93, -109, 56, -77, 17, -123, -125, -45, -41, 124, -68, -24, 25, -104, 98, -57, -48, 75, 7, -19, -1, -13, 85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[5, 99, 113, -115, -34, -84, -87, -17, 82, -112, -42, -7, -116, -90, 53, 18, 60, -12, 52, -126, -40, -91, -64, 46, 119, 28, 118, -73, 21, 99, 27, 91, -89, -4, 82, -21, 70, -49, -20, 113, 43, 117, -102, -91, -41, 111, -93, -106, -79, -105, 106, -89, -92, -60, -53, 68, 87, 90, 5, 36, 63, -103, -117, 1, -72, 62, -20, -32, 91, 73, 15, 109, 72, -99, 117, -118, -44, -74, 119, 69, 51, 94, 19, 43, -13, -113, 89, -91, 50, 29, 103, 32, -27, 27, -17, 119, 85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[9, -79, 110, 127, 31, -120, 55, -7, -114, 23, -6, -8, 30, -73, 76, -74, -27, 107, -50, -42, -62, -92, -61, -120, 125, 58, -93, -11, 41, 43, 59, -41, 85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[114, -5, -66, -124, 94, 47, 14, 111, 34, 114, -8, 25, 100, 38, 46, 19, -36, -125, 110, 122, -11, 18, -46, -11, -101, -83, 42, -119, 25, 26, 80, -9, -50, 6, -74, -89, 120, -62, 86, 27, 29, 82, -7, 23, 115, -78, 88, 42, 43, 78, -69, 43, -53, 112, -10, 121, 109, 6, 110, -109, -99, 27, 125, 14, -126, -33, 44, -19, 112, -75, 103, 68, -102, 73, -36, 29, 47, -107, 101, 118, 13, -59, -40, 58, -84, 127, 22, 6, 48, -119, 127, -83, 82, 115, -23, -86, 85, 68, 48, 0, 115, 12, -97, -118, 32, -125, 83, -44, -66, -98, -68, -105]");
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("F5D28FDC16EF101B4A67318C5A3AD68907A8EDC826BA92A64EA648F6899232223081A1FC1C1438C298BD310586743BC5504899C1BCA99428874256CE6AE984FFFC890C16F2BBAA8EFDC36FC9DB483E37D43DA929034675142FA1A1C70E51EB7AD165534B3F8B4F0935FE8A4EC43B057950FF131331DA2A25540C3EC80D7819CBDCB581922DC3EE385C37D8B5930BC8C9296D27D1C7437EB6ADABFD6EA9B8B9CF7FBCB82F8FA7784381624F442B20310E3EE4286D7D0A5AF44C4E11A247353227AE264E06550DC4C1836399E06B1747B6005B610DED29F01D01419FEC4FD43B34584149F10881E78E83AC1FBCBCFBAD7E", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0B3F770D0055D0086E4D5F34677807F643C52681888CF416427DA1BEF08CAF1787327C11DC64B59CF2B3E256003EC1C5DC733E5C890287207AD99467D8686ED5F4F64B8AFC0545EE2C1DCF50C4F4F9FEE0D707DBA4C46C56651B9B2B97612479DE9281D9476441CF2DE866714363BDAED9F5A8E83701A8E0F6B9F3EA7912686D326EBE4F95BB8136F84EF04DB9499A268ECF8C8E1BCAF3F95D8DE36EAB145B0A3DB211EC704215BD747BEBE3650F3A502E0A3FCC48C59869EB6466C1927E84E5A9F4C8CF836DEA5D92E25D34628563E33B6E89C7BDA68B0745F97FA99F971C7A84969C242F20003AB3BC7589946F98B", secretKey22);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-38, 22, 15, -59, 101, 105, -109, 76, -33, -113, 86, -96, 120, 107, 85, -76]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[57, -102, 13, 88, -85, -56, 16, -2, -90, 116, 119, 57, 105, -119, 89, 26]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[105, 62, 14, -66, -102, 95, 96, 103, -33, 87, 89, -93, -82, -109, 123, 116]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-48, 21, 109, 9, 98, 50, 10, -24, 93, 82, -8, -59, -20, -21, 19, -73]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[95, -47, 9, 119, 84, 48, 94, 55, 98, 76, -87, 44, -101, -14, -87, 98, -88, -122, 57, 28, 53, -17, -84, -24, -81, -7, -114, -46, -114, 53, -40, -43, 105, 62, 14, -66, -102, 95, 96, 103, -33, 87, 89, -93, -82, -109, 123, 116]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[105, 62, 14, -66, -102, 95, 96, 103, -33, 87, 89, -93, -82, -109, 123, 116]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-48, 21, 109, 9, 98, 50, 10, -24, 93, 82, -8, -59, -20, -21, 19, -73]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[95, -47, 9, 119, 84, 48, 94, 55, 98, 76, -87, 44, -101, -14, -87, 98, -88, -122, 57, 28, 53, -17, -84, -24, -81, -7, -114, -46, -114, 53, -40, -43, 105, 62, 14, -66, -102, 95, 96, 103, -33, 87, 89, -93, -82, -109, 123, 116]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "445B52BA53D8CAFE44A069AA5D55BED40E0DEF64695BD18DEEFF95D1866FEB8AC24AB2F2AC3C5AECC0E6A1ACEEE4BB89B169AED56A6E53E94F44546F2E7AC3CAD7CEE0D2181D269BF06C955761ACE7CA9F4C88DE269F64D6BACE5FEB99F4FAF5BA46CFA2C1043B9CFE886AD04799F2ABEBD1D4037835676EA5F39921D89A1FDCC9C76737BDCB8F6F6BB5FD6EDE5D0575187BF338CBE4FAA446B3C93DA3D79B6840380207E7D8BC7E4AF53478F06A672B2210122DDADDC8CFF0BAEFE4142576966B8987503A81DCB5FC72B2F60115E9523F083EC6B127A9046E056DCD9B7C142B4FC8840EB5F3083F6FBBCA125D4A1BB00B2DBFABB45C9F21A8EC348263FE57E2476E30F80893904658ABDC8C2DE5A39D67F5203A9062B4CA658D08425A7B977C58D9FBFA204B1C2822EFB5F46DB7DCBD98B435A59153F85EEAD25636DFAE76F5F605400DE720926B7B46F09D5F022F70E479CA8C6FF4B83EC7774E73D60AA39057F4D4D7BFB8C4B3313EC7922CD735074F1303D523013CECE3543632FDD92472CD397E3CC30041D29FD1011CCDF567E1864650CAD007C5E19FE7904B1D56EB9DC109AA3DFB6FF61DB91BEA3F9C62EC042378D873F32163AF56539FAA77F67F01C858602EDA925B6C066C6EE2D767904BF2B95FC07E3C9109BA5C4AAE00B20EDD693E0EBE9A5F6067DF5759A3AE937B74" + "'", str
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1313A55EC14B32C71F6A2004FD2D9219DA677C51ADF1B85B3C5C27DB9D144A21C0412A1F82866507F9541A28CA62DF91337A7EDCE73AA854559B1240540E3DD04DC392023E3919F46C62FC885D92F02606543B47328E2F234ECDCAA2EA5E3F2845B01D33C6423813F0DE23A28ED787BD", secretKey6);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-46, -117, 41, 64, -13, 126, -70, -81, 3, 39, 8, -112, -127, 79, 100, -63]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[126, -79, 56, -34, 78, -3, -105, 107, 79, -15, 18, -79, -66, -54, 65, -39]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[126, -79, 56, -34, 78, -3, -105, 107, 79, -15, 18, -79, -66, -54, 65, -39]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[57, -92, -57, -101, -43, -112, 123, 37, 114, -66, 122, -24, -108, 65, -102, -63, 59, -115, -109, -88, 12, 89, 15, 47, 3, 116, 94, 47, 30, -29, 50, -3, -46, -117, 41, 64, -13, 126, -70, -81, 3, 39, 8, -112, -127, 79, 100, -63]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[57, -61, -82, -63, 89, -1, 9, -116, 116, 15, 123, 79, -49, -58, 23, 61, -19, -46, 75, -37, 120, -121, 78, 107, -71, -62, 66, -10, 73, 110, 108, 102, -46, -117, 41, 64, -13, 126, -70, -81, 3, 39, 8, -112, -127, 79, 100, -63]");
        org.junit.Assert.assertNotNull(byteArray12);
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey30);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey30);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey54);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey54);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey54);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey54);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("8DF2BDAF369377059BEFB5DA4457D594F86E6CE3F0C389EF533332973DC61CDEDCA458BAEA640449F75EFC83ACF55250", secretKey54);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("5F9CD13B1145B8FE8466D01618E9FE9202B5134430798367294195E5DE335AEE5B1C4167B9FBE68468172079D3BDDC81", secretKey54);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("30FFFE03E5E8E55756D6286087DF7F543371EE945753439A048CD4D26C1FEC5FB0E199715B0B1178852792B0E615D5CEFAA3D6FB2B6AE7D9B683DBDDF34ABAB4B5FFD719E91D3CE6AB2E5F7E3FF40A49A3195052E76E6A57BBB6F3C4AF8449DA77F88636234C6AFBCC71FDA4DE4D46E0", secretKey54);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[3, -60, -91, 75, -57, -19, -124, 104, -64, 92, 21, 81, -20, 64, -81, -66]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-31, -36, -78, -89, -73, 37, -42, -108, -69, 114, -30, 98, -61, 94, -79, 42]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-27, 6, -107, 2, 43, 124, 11, 76, 50, 1, 4, 66, 103, -18, -85, 38]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-104, -72, 12, -52, 4, -25, 6, 45, -77, 34, 87, 49, 107, 120, -73, 87]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[28, 53, -79, -100, 94, -121, 100, -72, 24, -124, 122, -6, -16, 77, 5, -96]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[120, 96, 95, -122, 35, 118, -5, 100, 99, -32, -107, -115, -98, -5, 83, -18]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-75, 75, -115, 61, 105, -84, -56, -79, 15, -85, 85, -122, 102, -122, -86, 5]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[28, 53, -79, -100, 94, -121, 100, -72, 24, -124, 122, -6, -16, 77, 5, -96]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-36, 51, -95, -124, 79, -36, 26, -25, 19, -10, -87, 97, 66, 42, 0, 94]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[51, -63, -109, -108, 12, -18, -83, 34, -87, 55, 55, -49, 0, -93, -68, -107]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-22, -82, -83, 18, -24, -127, 73, 80, 122, -24, 45, -66, -38, 120, 13, -29]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-64, 126, -25, -92, -43, 73, -114, 115, 79, -108, -105, 58, 79, 61, 2, -43]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, -18, -63, -116, 6, 12, -102, 119, 59, -120, 97, 103, 31, 56, -108, 9, -26, 99, 47, 103, -101, -11, -103, -52, -97, 34, 76, -15, -28, 55, 19, 81, -22, -82, -83, 18, -24, -127, 73, 80, 122, -24, 45, -66, -38, 120, 13, -29]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[18, -8, 95, -100, 56, -8, 76, 25, -117, 27, -103, -51, 29, -76, -45, -58, 105, -76, 100, 124, -32, 71, 88, -21, -66, 99, -39, 118, -30, 0, 59, 92, -22, -82, -83, 18, -24, -127, 73, 80, 122, -24, 45, -66, -38, 120, 13, -29]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-81, 118, -118, -3, -65, 22, -35, -42, 99, -116, -32, -128, 37, 74, 14, 83, -95, 33, -37, 65, -71, -97, 93, -75, 122, -41, 98, -38, -10, 9, -7, -64, 58, -61, -25, -63, 53, 85, 31, -122, 85, -120, 118, 17, -92, 77, -5, 80, -39, -123, 104, 70, -92, -46, 13, 110, -4, -63, 104, 119, -3, 106, -40, -51, 121, -36, -35, 31, -52, 126, -21, -80, 7, 111, 39, 118, -62, -109, -91, 9, 31, 49, -66, 74, -28, 15, -125, -50, 115, -84, 67, -54, -95, 89, -48, -9, -22, -82, -83, 18, -24, -127, 73, 80, 122, -24, 45, -66, -38, 120, 13, -29]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 16, -31, -43, 79, -31, -7, -18, -95, -65, 30, -115, -116, -1, -54, 126, 99, -55, 107, 55, -78, -45, 37, -35, 93, 19, 60, -20, -37, 63, 8, 51, -84, -91, 115, -54, 76, 79, 115, 14, -107, 0, 84, -106, 10, -121, -75, -12, -65, -43, -54, 112, -9, -49, 111, -114, 48, -70, -68, 24, -68, -34, 16, -19, -63, 108, 127, -116, 35, -10, -20, 118, -36, 107, -47, 65, 116, 48, 38, 114, -26, -72, 110, -94, -6, 106, -125, -15, 58, 97, 57, 8, 27, 116, 119, 11, -22, -82, -83, 18, -24, -127, 73, 80, 122, -24, 45, -66, -38, 120, 13, -29]");
        org.junit.Assert.assertNotNull(byteArray64);
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey44);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey55);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey55);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey55);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey55);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey55);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("BD668A117D0313E58D1FFC562B6A9CE30E3C6561CE8F23362E4F050812CAAB0AC573ACF2D00DCFEE4AAE999B0D95269229E380BEBD15F4773B391955C417414A52E82F97D9F11CCAD3C54C412C4002F8819B1FB98BFCA10CEAFF4656CFD87A8004FCA05D2E7BF6C8724A4B9D69214A6A", secretKey55);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("1917464108554BFE127D71C31C4BCED1CC58038EDC16A36F27EF28B5FEDAE31F7569BC4EE3C756C8F65EA5DF050CDA9D", secretKey55);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray66);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray66);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-117, -21, -128, 93, 3, 106, -99, -115, -29, -95, -122, -118, 34, 1, -81, -3]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[77, 93, -107, 47, 95, -37, 57, -34, -13, -37, -61, 36, 50, -104, -36, -77]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-67, -29, -71, -75, -125, -58, -93, 24, 50, -118, 1, 81, 106, -58, 0, 16]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-20, -15, 109, -114, 22, -32, -117, 11, -16, -56, 37, 35, 65, 125, -75, -111]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-42, -103, 121, -19, -56, 42, -50, -86, -96, 23, 34, 107, -46, -33, 80, -50]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-18, -63, -3, 42, 28, -17, 39, -114, -88, 117, 6, -80, 126, 26, 63, 108]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-61, -51, -25, -18, 84, -127, -14, 86, 0, 18, -25, -118, 26, -38, 90, -73]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-15, 109, -125, 11, -57, 118, 19, 97, -21, -64, 114, 113, 3, -88, -79, -71]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[107, -121, -95, 56, -57, -7, 75, 114, 57, 63, 39, -3, 30, -49, 17, 41]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-124, -73, 104, 64, -34, 27, -11, 111, -81, 4, 48, 127, 96, -101, -40, -123]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[97, 97, 92, -59, 4, -74, 89, -13, -59, 15, 87, 111, 30, 1, -61, -75]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[107, -121, -95, 56, -57, -7, 75, 114, 57, 63, 39, -3, 30, -49, 17, 41]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[101, -65, -78, 67, -97, -19, -73, 98, 76, 45, -113, -100, -108, 115, 104, -96, 113, 87, -112, 74, -37, 95, -20, 49, 3, 75, 16, -76, 3, -6, -107, -38, 107, -121, -95, 56, -57, -7, 75, 114, 57, 63, 39, -3, 30, -49, 17, 41]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[107, -121, -95, 56, -57, -7, 75, 114, 57, 63, 39, -3, 30, -49, 17, 41]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-26, 72, 125, -25, 58, 59, -85, 61, -84, 80, 122, 68, -105, 2, 61, -29, -55, -17, -27, 49, -78, -124, -85, 117, -93, -22, -27, 91, 41, 26, -110, -69, 121, 116, 34, -29, 89, -22, -90, 45, -5, 45, 0, 24, 73, -56, 35, -24, 46, 116, -68, -31, -2, 75, -72, 29, -6, -74, -24, -126, -40, -71, -28, -21, 51, 26, 30, 101, -98, -43, 103, -112, -87, 55, -56, -24, 72, 3, 14, -90, -50, 30, 55, -89, -77, 37, -5, 70, -32, -56, -69, -64, -54, -97, 60, -67, 107, -121, -95, 56, -57, -7, 75, 114, 57, 63, 39, -3, 30, -49, 17, 41]");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "E6487DE73A3BAB3DAC507A4497023DE3C9EFE531B284AB75A3EAE55B291A92BB797422E359EAA62DFB2D001849C823E82E74BCE1FE4BB81DFAB6E882D8B9E4EB331A1E659ED56790A937C8E848030EA6CE1E37A7B325FB46E0C8BBC0CA9F3CBD6B87A138C7F94B72393F27FD1ECF1129" + "'", str67, "E6487DE73A3BAB3DAC507A4497023DE3C9EFE531B284AB75A3EAE55B291A92BB797422E359EAA62DFB2D001849C823E82E74BCE1FE4BB81DFAB6E882D8B9E4EB331A1E659ED56790A937C8E848030EA6CE1E37A7B325FB46E0C8BBC0CA9F3CBD6B87A138C7F94B72393F27FD1ECF1129");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "E6487DE73A3BAB3DAC507A4497023DE3C9EFE531B284AB75A3EAE55B291A92BB797422E359EAA62DFB2D001849C823E82E74BCE1FE4BB81DFAB6E882D8B9E4EB331A1E659ED56790A937C8E848030EA6CE1E37A7B325FB46E0C8BBC0CA9F3CBD6B87A138C7F94B72393F27FD1ECF1129" + "'", str68, "E6487DE73A3BAB3DAC507A4497023DE3C9EFE531B284AB75A3EAE55B291A92BB797422E359EAA62DFB2D001849C823E82E74BCE1FE4BB81DFAB6E882D8B9E4EB331A1E659ED56790A937C8E848030EA6CE1E37A7B325FB46E0C8BBC0CA9F3CBD6B87A138C7F94B72393F27FD1ECF1129");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "E6487DE73A3BAB3DAC507A4497023DE3C9EFE531B284AB75A3EAE55B291A92BB797422E359EAA62DFB2D001849C823E82E74BCE1FE4BB81DFAB6E882D8B9E4EB331A1E659ED56790A937C8E848030EA6CE1E37A7B325FB46E0C8BBC0CA9F3CBD6B87A138C7F94B72393F27FD1ECF1129" + "'", str69, "E6487DE73A3BAB3DAC507A4497023DE3C9EFE531B284AB75A3EAE55B291A92BB797422E359EAA62DFB2D001849C823E82E74BCE1FE4BB81DFAB6E882D8B9E4EB331A1E659ED56790A937C8E848030EA6CE1E37A7B325FB46E0C8BBC0CA9F3CBD6B87A138C7F94B72393F27FD1ECF1129");
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey47);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey47);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey47);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey47);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey62);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey62);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey62);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey62);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[91, -31, -17, 74, 77, 52, 55, 35, 21, 105, 9, -27, -57, 30, -19, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[25, 8, 97, -92, -81, 76, 75, -11, -84, -45, -26, 115, -61, -63, -60, -88]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-30, -20, 102, 48, 31, -96, -56, 76, 80, 62, 45, 60, -93, 62, 51, -101]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-44, -93, -80, 59, 20, 6, -50, 79, -99, -92, 19, 46, -29, 40, -54, -55]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-124, 89, 122, -85, 68, 7, 81, 79, 84, -12, 71, 113, -29, -38, 102, 113]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[18, 8, 31, -38, -120, 40, 74, -33, 0, 69, -34, 13, -93, 125, 68, 81]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-118, 78, 116, 86, -30, -53, 55, 52, -23, 3, -54, 127, 112, 49, 12, 81]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[79, -38, 67, -71, -122, -32, 16, 18, 75, -120, -109, -24, -31, 92, -55, -114]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-85, 15, 30, 114, -85, 105, 9, -91, -72, -61, -62, -80, 25, 77, -95, -108, 63, 89, 45, 106, 113, 13, 14, -33, 0, -28, -55, 103, -6, -85, -36, 97, -118, 78, 116, 86, -30, -53, 55, 52, -23, 3, -54, 127, 112, 49, 12, 81]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-23, 103, 60, -95, -91, 1, -40, 114, 71, 29, -102, -119, 101, -4, -108, -66, -43, 65, -74, 4, 16, -14, -49, -35, 21, 55, -28, -28, -123, 122, 58, 120, -118, 78, 116, 86, -30, -53, 55, 52, -23, 3, -54, 127, 112, 49, 12, 81]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[120, -96, -2, 11, 106, -58, 98, -10, 86, 84, 1, 103, 70, -77, 89, 78]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[67, -47, -88, 26, -53, -67, 50, 7, 127, -85, 32, -44, -65, 39, 51, 31]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[8, -54, 44, 79, -58, 114, -110, -57, -66, -121, 20, 11, -112, 49, -36, -16, 15, 27, -124, 56, 89, -30, -28, -103, 6, -7, 115, 75, 46, -128, 38, 13, 85, 55, 3, 44, -32, -85, -96, 15, 124, 37, 25, -81, 96, 22, 77, -10, 77, 38, -62, -83, -99, 85, 41, -40, 49, 39, 82, -128, -7, -92, -48, 16, -91, 96, -109, 75, 86, -115, 47, -82, 35, -118, -88, 83, -73, -115, -55, -26, -46, 51, -69, 103, 125, 120, -53, -43, -128, -5, -16, -118, 114, -119, 65, 10, 120, -96, -2, 11, 106, -58, 98, -10, 86, 84, 1, 103, 70, -77, 89, 78]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-106, 29, 86, -63, 33, -2, 44, 46, -104, -57, 91, 20, -22, 84, 122, 22, -65, -76, -106, 77, 39, 110, 82, 62, 70, -37, 63, -7, -57, -50, 47, 60, -30, 101, -80, -126, -58, 95, 55, -89, -2, 80, 6, 31, 77, -36, -81, -14, -88, 111, -57, -28, 102, 99, 74, 114, -125, -64, -62, 48, -46, 32, 40, -68, -28, 98, -7, -21, 0, 44, -99, 71, 107, -31, 37, 25, -72, -65, 6, -125, 102, 38, -72, -121, -126, -45, 33, 30, 86, 28, 101, 2, 66, -111, 85, -29, 120, -96, -2, 11, 106, -58, 98, -10, 86, 84, 1, 103, 70, -77, 89, 78]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey36);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey45);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey45);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey45);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey45);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-29, -10, -38, -98, -35, 122, -32, -21, -118, -83, -90, -104, -28, 106, 50, 83]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-117, 18, 27, -95, -92, 5, 105, 118, -14, 68, -41, -36, -51, 46, -49, 101]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[114, 30, 47, -14, -52, -27, 86, 55, -49, -83, -41, -46, -120, 90, 45, 14]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-71, -112, -1, -54, 7, 80, 27, 24, 49, -102, -78, -83, 75, -39, -28, -91, -113, 106, -19, -57, -58, -111, -21, -84, 22, -73, 116, 54, 13, -73, -112, -101, -29, -10, -38, -98, -35, 122, -32, -21, -118, -83, -90, -104, -28, 106, 50, 83]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[111, 119, 61, -125, 42, 101, 9, -34, -72, -117, -72, -27, -73, -128, 116, 99, 77, 33, 17, -60, -7, -36, -80, 95, 106, 88, 53, 47, -127, 20, -91, 80, 91, 108, 84, 120, -79, -17, -112, -29, -45, 47, 64, 80, 116, -125, -116, -28, 46, -7, -106, 92, 57, -107, 39, 94, -128, 36, 73, -28, -9, -90, 71, 36, 87, -82, 49, -35, -17, -78, 49, -63, 58, -104, 70, -100, -106, 40, -55, 106, -97, 17, 119, 98, 40, 35, -9, 36, -108, 13, -2, 30, -29, 7, 53, -49, -29, -10, -38, -98, -35, 122, -32, -21, -118, -83, -90, -104, -28, 106, 50, 83]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-114, -56, -32, 87, 5, -91, -98, -30, -67, -92, -65, -100, 48, -55, 5, 7, 24, 102, -49, -10, -119, -59, 56, -76, -128, 108, 79, 126, -51, -35, -54, -69, -98, 40, -60, 45, -72, 77, 74, 122, 49, -51, -20, -82, 28, 2, -75, -47, -37, -51, -87, -104, -97, -4, -81, 112, -9, -93, -44, -74, 82, 1, 38, -117, -73, -17, 53, -101, 2, -89, -56, 58, 10, 7, 67, 64, -121, -106, 49, -24, -8, -106, -124, -14, 62, 57, -115, 74, -32, -13, 24, -117, 114, -29, -81, -52, -29, -10, -38, -98, -35, 122, -32, -21, -118, -83, -90, -104, -28, 106, 50, 83]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "8EC8E05705A59EE2BDA4BF9C30C905071866CFF689C538B4806C4F7ECDDDCABB9E28C42DB84D4A7A31CDECAE1C02B5D1DBCDA9989FFCAF70F7A3D4B65201268BB7EF359B02A7C83A0A074340879631E8F89684F23E398D4AE0F3188B72E3AFCCE3F6DA9EDD7AE0EB8AADA698E46A3253" + "'", str13, "8EC8E05705A59EE2BDA4BF9C30C905071866CFF689C538B4806C4F7ECDDDCABB9E28C42DB84D4A7A31CDECAE1C02B5D1DBCDA9989FFCAF70F7A3D4B65201268BB7EF359B02A7C83A0A074340879631E8F89684F23E398D4AE0F3188B72E3AFCCE3F6DA9EDD7AE0EB8AADA698E46A3253");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "8EC8E05705A59EE2BDA4BF9C30C905071866CFF689C538B4806C4F7ECDDDCABB9E28C42DB84D4A7A31CDECAE1C02B5D1DBCDA9989FFCAF70F7A3D4B65201268BB7EF359B02A7C83A0A074340879631E8F89684F23E398D4AE0F3188B72E3AFCCE3F6DA9EDD7AE0EB8AADA698E46A3253" + "'", str14, "8EC8E05705A59EE2BDA4BF9C30C905071866CFF689C538B4806C4F7ECDDDCABB9E28C42DB84D4A7A31CDECAE1C02B5D1DBCDA9989FFCAF70F7A3D4B65201268BB7EF359B02A7C83A0A074340879631E8F89684F23E398D4AE0F3188B72E3AFCCE3F6DA9EDD7AE0EB8AADA698E46A3253");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8EC8E05705A59EE2BDA4BF9C30C905071866CFF689C538B4806C4F7ECDDDCABB9E28C42DB84D4A7A31CDECAE1C02B5D1DBCDA9989FFCAF70F7A3D4B65201268BB7EF359B02A7C83A0A074340879631E8F89684F23E398D4AE0F3188B72E3AFCCE3F6DA9EDD7AE0EB8AADA698E46A3253" + "'", str15, "8EC8E05705A59EE2BDA4BF9C30C905071866CFF689C538B4806C4F7ECDDDCABB9E28C42DB84D4A7A31CDECAE1C02B5D1DBCDA9989FFCAF70F7A3D4B65201268BB7EF359B02A7C83A0A074340879631E8F89684F23E398D4AE0F3188B72E3AFCCE3F6DA9EDD7AE0EB8AADA698E46A3253");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8EC8E05705A59EE2BDA4BF9C30C905071866CFF689C538B4806C4F7ECDDDCABB9E28C42DB84D4A7A31CDECAE1C02B5D1DBCDA9989FFCAF70F7A3D4B65201268BB7EF359B02A7C83A0A074340879631E8F89684F23E398D4AE0F3188B72E3AFCCE3F6DA9EDD7AE0EB8AADA698E46A3253" + "'", str16, "8EC8E05705A59EE2BDA4BF9C30C905071866CFF689C538B4806C4F7ECDDDCABB9E28C42DB84D4A7A31CDECAE1C02B5D1DBCDA9989FFCAF70F7A3D4B65201268BB7EF359B02A7C83A0A074340879631E8F89684F23E398D4AE0F3188B72E3AFCCE3F6DA9EDD7AE0EB8AADA698E46A3253");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[33, 6, -15, 20, 62, 109, -91, 107, -89, -72, 101, 34, -46, -10, 77, -32]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[69, 57, -127, -18, 76, -75, 39, -27, -49, 67, 76, -35, 107, 108, 41, -101]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-32, -118, -6, -91, 32, -81, -17, 10, 22, -111, -85, 115, 123, -96, 97, -45]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[49, 115, -1, -30, 85, -14, 76, -67, 7, 30, 47, 18, -59, 29, 23, -126]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[99, -83, 110, -109, -84, 58, 94, -93, -25, 97, -41, -42, -109, -42, -103, 118]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-75, -15, -101, 81, -48, -76, 117, -69, -70, 48, -116, -35, -90, -57, -93, -45]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-75, -15, -101, 81, -48, -76, 117, -69, -70, 48, -116, -35, -90, -57, -93, -45]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[38, -9, 108, -114, -105, 40, 35, -40, -93, -79, 110, -77, -47, 74, 53, 82, -49, -4, -40, -27, -96, 118, 22, 82, 109, 13, -89, -100, -53, -77, -64, -39, 99, -83, 110, -109, -84, 58, 94, -93, -25, 97, -41, -42, -109, -42, -103, 118]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[23, 99, 77, 1, -116, 6, -110, -102, 59, -55, 125, 83, 78, 39, 29, 24, 4, -27, -18, 115, -68, 45, 17, -57, -20, -102, 63, -14, 75, 89, 69, -82, 99, -83, 110, -109, -84, 58, 94, -93, -25, 97, -41, -42, -109, -42, -103, 118]");
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey24);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey24);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey24);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey24);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C48A896D509A73E10105F5AD5FC24AB616B584D5711F6C5340EA01F21B6F2D760CAB2DFD3FE3B3D9607C352901CF4972AE3479A91246FD21485D7F93D99DA2BD0133FD7AC1400CB705098594EA3A754C26F44B5BE13CFA5E0663EC4C851C65D7C5D6D3E876C2C1575A82A336DCC7405513A230E943593F5056739BD27061597CF126DB6B2E3C16ECE5E5A9D7CDD886ADAB420EB67301783D45FA5114F82BE1F6AD0B3BD93DA59351C420B5EA56AEB50F1A414CE2F9722597EC669E973873FCA6B0A3295EE37C8A6484C1E4E43847D89FFAA87EE29606F340FC3DEB99E27840345909880B5B876AB1499C65288CCE22F", secretKey24);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("6000978D729A5EAF02789174FCEF78DC19A6A5353FA2EE08001847BF93F672C57842A660B60BA3E3BAFC4CA493DB93BD616BA839F8FC6BCE8F25A5CFF9986984A5A08FB7FA9398912FBF66BA83D5698C9B89FE34ECEA63E7E13593D7BE10CB607921E0CEEC09BCE538EB3873308F1B39", secretKey24);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        byte[] byteArray55 = new byte[] {};
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray55);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey57);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey57);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey57);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB05108861568B77067864E393C66A651FA7D65C7972104CEC7664A6D568630EFF7F44008DECFABECC47EF00F1E1F507", secretKey57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey57);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-3, -88, 25, 58, -42, 84, -80, -112, -50, -61, 94, -113, -58, -15, 120, -4]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[81, -18, 63, 1, 54, -74, 97, 26, 51, 99, 126, -84, -122, -123, 113, -96]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[7, -104, -79, 28, -110, -60, 18, -126, 47, 53, 54, 80, -17, -31, 7, -114]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-79, 65, -16, 23, -50, 90, -29, -101, 120, 110, 15, 68, 31, -23, 32, 115]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[71, 82, 50, 12, 91, -29, 31, -84, -75, 15, -92, -28, 87, 92, 74, -5, -30, -48, 64, 106, 17, -95, 61, 99, -121, -106, -13, -1, -79, 55, 10, 65, 7, -104, -79, 28, -110, -60, 18, -126, 47, 53, 54, 80, -17, -31, 7, -114]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -23, 87, 48, -82, -98, 6, 14, 105, 3, 107, 79, -100, 45, 25, -88, -71, 53, 13, 24, -20, -127, 49, -57, 20, -75, -24, 94, 63, -104, 47, 91, 7, -104, -79, 28, -110, -60, 18, -126, 47, 53, 54, 80, -17, -31, 7, -114]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[97, -11, 95, -82, 41, 106, -117, 51, 44, 19, -44, 78, 95, -39, 65, 50, -55, -113, -28, -96, -32, 112, 123, -82, -108, -33, 106, -84, 6, 8, -78, -82, 42, -37, 23, 42, -6, -98, 88, -56, 34, 127, 95, 23, -53, 72, 105, 67, 72, 80, 58, -64, -10, -64, -25, 12, -103, 104, 42, 61, 26, -2, -105, -56, 2, 91, 45, 24, -118, 30, 78, -119, 27, -63, -117, 85, -64, -104, -23, -70, 45, -66, 86, 18, 105, 121, -23, 50, -109, -4, 73, 55, -121, 125, 6, 123, 7, -104, -79, 28, -110, -60, 18, -126, 47, 53, 54, 80, -17, -31, 7, -114]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-105, -125, 118, 10, -65, -14, -1, -49, -85, 25, 8, -107, 103, -64, 108, 105, -98, -21, -104, -3, -62, 112, -29, 15, 75, 43, -73, 16, -91, -14, -47, 110, 7, -104, -79, 28, -110, -60, 18, -126, 47, 53, 54, 80, -17, -31, 7, -114]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[97, -11, 95, -82, 41, 106, -117, 51, 44, 19, -44, 78, 95, -39, 65, 50, -55, -113, -28, -96, -32, 112, 123, -82, -108, -33, 106, -84, 6, 8, -78, -82, 42, -37, 23, 42, -6, -98, 88, -56, 34, 127, 95, 23, -53, 72, 105, 67, 72, 80, 58, -64, -10, -64, -25, 12, -103, 104, 42, 61, 26, -2, -105, -56, 2, 91, 45, 24, -118, 30, 78, -119, 27, -63, -117, 85, -64, -104, -23, -70, 45, -66, 86, 18, 105, 121, -23, 50, -109, -4, 73, 55, -121, 125, 6, 123, 7, -104, -79, 28, -110, -60, 18, -126, 47, 53, 54, 80, -17, -31, 7, -114]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-39, -95, 33, -60, -126, 7, -107, -95, -8, -95, -50, -116, -29, 114, -99, 110, 82, 32, -85, 123, -17, -105, -120, -53, -30, -116, 93, 29, 85, 63, -87, -8, -45, 33, -31, 91, 89, -43, 75, 31, 18, 41, 0, -39, -20, -52, 122, -43, 64, 107, -8, -20, -121, 76, 108, -90, 101, -42, 38, 93, -128, -111, -109, 13, 51, 2, 47, -80, -73, -119, -7, -2, 31, -29, -111, 84, 122, 93, 68, -28, -105, -105, -124, 113, -3, -126, 63, 104, 114, 85, 2, -96, -123, 7, -51, 38, 7, -104, -79, 28, -110, -60, 18, -126, 47, 53, 54, 80, -17, -31, 7, -114]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-66, -87, -2, -55, -91, 72, -83, 4, 40, 55, -33, -6, 123, 5, -77, -20]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[58, -47, 68, 89, 61, -98, 36, 92, -78, -71, -58, 91, 65, -29, -79, -76, -124, 58, 110, -37, -30, -5, -70, -123, -92, 75, 89, -122, 35, 100, -60, 50, -2, 91, 79, 47, -19, -89, 15, 44, 113, -31, 26, -127, 30, -109, 40, 82]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[121, 105, -53, -109, -17, -72, -6, 104, 94, 42, 4, 77, -78, -40, 121, 26, 7, 37, 30, -71, 109, -90, -3, 66, 32, 108, -51, 33, -4, 62, 119, 95, 68, -35, 39, 104, 100, -47, 26, -115, 65, 90, -82, 22, -123, 97, 92, 55, 97, 7, 92, -33, 10, -60, 23, 72, -97, -101, 59, -80, 78, -74, 98, -86, 3, 53, 86, 87, 56, -42, -88, -18, -10, 9, -51, 118, 48, 17, 47, 34, 80, 43, 87, 92, 85, -64, -100, 49, -44, -63, 112, 0, -72, -117, -92, -8, -2, 91, 79, 47, -19, -89, 15, 44, 113, -31, 26, -127, 30, -109, 40, 82]");
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("047B18E332BFC15A733C36B2920928AAA58963B6BD7892BF2BCB5859982CB00F9925DDCFE429AE83F91F152677307384F938AD687866EEA52B106D2E0DDC4A075B3D1BB1C329F4A010A535A55B5E68474691E1B115BB933D2358BF1946FF7EC23D87538A3192095C32179A1CCDBC4CFCF71F0CB7935248D3D4814BCA062BCF27B188D2004F9EA2B0C3D4161CFC0D1894838744EE9CBC1837E17D5FB17B18949A008E370E83D40F4D7731DDCFBD7CE4E14D8811665B9BFDAEE53D042DBC6DA9641C07843929AC7A33C7D70E31775E684B2ADC22B0883BDBC9906D4950F7DF08542FFBD80705A5E595EF7B9FF4618DB4F808BEF79A3B27D180A5C3776DCA23BB40238CDC6F5A185B1A78B786D97121D50ABE56DBC026818F65FE10482C9C9FB557C791EFD8BFA08BF7A1C5004C31D77D0B5FEABCEC7A59CCFF19D2CBDFC1C99D5AEF30D82B9018F7A0C9C751B7D4628F132C9988772BA8E0C3F04B808E45D678647D106E792477F338D7BE97B9BAB0E35A63B0B906C6FED52373177F37961A479E68849EBAD2346BE2A7A599B998842787E791D3CA72BB2B08AB04C3653F2F2E8DA01AB0CF88AC2F93AE9181BDFAF83534191FCB9A082ED25A68518FA525F02B6AC9B8BA452403B0CCE9B3525A01C3BE293ACDFFB633D8A1678433047E567A7C8FBA9087C49814E993D972D0554D7B37C9", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey13);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB05108861568B77067864E393C66A651FA7D65C7972104CEC7664A6D568630EFF7F44008DECFABECC47EF00F1E1F507", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E25F84769610FB6BDF9F9E22443616FF166C2D67F5956C97A382AF4C494255F8B544FD7B79832673871276F1D7BF2AD008F34451534316F08BD8D1B63B1A4629CD69C72DA97AF695E9185A0C97484CFE8CC24B8DD81B0BF1C6FBF2133D31FDC0655C7D25336F0F5BC7CC8FE5B3AD1280", secretKey21);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-46, 71, 30, -12, 113, 69, -10, 0, 118, -41, -103, 123, 42, 71, -16, 45]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[110, -112, 66, 108, -60, -55, -62, 71, 2, 61, 66, -114, 124, 119, -61, 91, -27, 8, -26, 124, 39, 1, 25, -35, -103, 54, -28, -97, -65, 53, 20, -110, 11, -59, -126, -125, -104, -5, 54, 83, 78, 39, 75, -74, 17, -119, 38, 115]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-35, 57, -8, -23, 47, 32, -88, -21, -48, 40, -82, 17, -85, -59, 14, 7, -63, 102, 28, -57, -115, 46, 56, 124, 36, -72, 66, -107, -121, -4, -27, -116, -79, -16, -87, -111, 107, 95, 89, -45, -55, 106, -50, 101, 107, 38, -76, 107, 80, 22, -58, -15, -12, 124, -115, 122, -64, -89, 67, -98, 18, 99, -12, 45, -72, 52, 119, -119, 110, 123, 80, 64, -78, -48, 123, -5, 89, -121, 32, -8, -4, -76, -25, -116, -2, -52, 35, -83, 90, 88, -115, 86, -110, -65, -105, 62, 11, -59, -126, -125, -104, -5, 54, 83, 78, 39, 75, -74, 17, -119, 38, 115]");
        org.junit.Assert.assertNotNull(byteArray26);
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey11);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("B529EFBD15C555E55DF2C1109DFE87EE99D769604C98A0D5C1318F8E8932CC812B2BC9B9FE669DEEFD6251B8B9046871EA7DFFC1FD9A4DA2A9A358EB4FADEB763BCDFF6A7FA19A1177158D2843628BF8F9F57A7480C8606A6E3E29E231EAD798872540A9DF73CA4A79320CBA115083E1", secretKey11);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("A9F1B6FCDBBA12628796A1FEFC06E52CF2B3A3709B901D81BA0BAFE476EB97A1E21C77448CD0E19E8071EDDE2243FE17AFA9F709866E52665288CE4ACCB3B538F483AC11C7D44611D414008AEC3892490FB72E3A78B9430EACE5666BD216BA5209AE6AF3220C884EED9CDAD9ECCBB199", secretKey11);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("160A51A142B4E1F80D32E3BECE0E9CD12EA3EFFEA2CBC375929CBE58E02608A4DB584EA740390D500CA86001067EFDEB0C27C9F43DF12682EAA69C3688CED5A0CD9295102011BA04B43AA586562BB2890B17022895ED0922A0157D9789FB670EE902D3393ED626D3EF12A483E4D87008", secretKey11);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey45);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey45);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("85C04DE2D06B5601CC992C2D435B4F9FFB85498EB2E09905C5DCEB1B33F2DE4136BF80E466268BFF8AD427B1DC8DF208E0716ADC5320286F978C13F26004A49BB7791F0B640B0A44C2F6AF77B8C4787356B9A59EF0E2A37D14D9933C5E93C07E1F8B21069C2BFA438D55F41DADFCBBB388444FEC486F7334822579B996CBD1EFA879CAF2D5CD2C23ACE87C21D07A6179AD0EF531527502AA389CD9BDEF9C200DF21A65B408A31CFFF099B76EC3000048CD435D32D61E0055CD6066AFF634BEC2C97E99087EFF52A724C4ED2ECD0ADE9D4DDF866E60FD8D28DE6E7B53D7A3214FAE93D100A1CDD31E81C165DDAFEC6B93", secretKey45);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("B61E731817110D6A5F96215400DE0E130F4CDF8E206E5546302BC56E0ACB5FDC4731B8B1502335F29AA2A029EE65010C", secretKey45);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("94AAE80A2F3397989CF85C179D70F22878D57914163F172292B6DC6D6A983F89E7A1BDFF227C280AD1644C525FACFD70C89D40C95A763E4729413905A7CD5B894244DCCB7F3745BDE5E512BF952069AC808CFE6976BB677FB14D9BBE758A968BDAA96B113AB8DEF284951381793A4B96FA3E52DBCFD12713A8E95B49C43F69D97C9CC0D9C522DC49BA0A09FADA98BD28D6220F6D3B08D6D42BECB5F57ABECF52BB22CEFE3ECD626B6E4B30F144D55A389D3D6AAF1971FB2518D3EC48DC836040062ED4C119AE214E236E99EEC339BCE0F98C931A5C2AAD2F54DB90E382B1E87BE1335B3ECFBB63BB31E15FDC5CC10DDB", secretKey45);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("1B53C7D9D2175090DE1ECB44A09011739C470C970C9CC19F97F87745B500522BB017F38D419902DDBB7C527CC8D7D6DE0AFE721969A15BE8D8AD36BB166187132BB990A09135DCAF6B48EFA94522BAC9A5B1A29184AA4919FCAC5FB9697E8C5CCC092A5FB9BEE6EB6DC3BC52B09E7278", secretKey45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey45);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-51, 48, 101, 50, 50, 62, 43, 90, 69, 63, 54, 125, 71, 67, 110, 41]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[33, 89, -90, 125, -104, -90, -36, -49, -87, 25, 48, 57, 117, -13, -81, 80]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 89, -90, 125, -104, -90, -36, -49, -87, 25, 48, 57, 117, -13, -81, 80]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[70, -107, 25, -16, -62, -95, 31, 0, -94, 48, -28, 48, -127, -108, 102, -48]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-51, 48, 101, 50, 50, 62, 43, 90, 69, 63, 54, 125, 71, 67, 110, 41]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-127, -87, 98, 6, 85, 116, 47, -112, 85, 77, 94, -16, 125, -83, -57, -90, 13, -40, 92, 55, -73, -71, 113, 102, 12, -25, 11, 7, -120, -76, 39, 100, -79, 104, -11, 29, -78, -125, -18, -68, 2, -127, -55, 109, -114, 15, 8, -109, -96, -31, -78, 69, 66, -18, 123, -111, -56, 20, 43, 14, 115, 117, 36, -76, 5, -118, 109, -55, 73, 95, 32, -118, 33, 68, -83, 31, -40, 64, 59, 56, 56, 77, 51, 68, -78, -115, 42, 42, -5, 105, -108, 111, -23, -105, 22, -73, -51, 48, 101, 50, 50, 62, 43, 90, 69, 63, 54, 125, 71, 67, 110, 41]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-51, 48, 101, 50, 50, 62, 43, 90, 69, 63, 54, 125, 71, 67, 110, 41]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-27, -24, -28, 82, 3, 28, 112, 3, 58, 119, 127, -61, 4, -88, 102, 47, -18, 26, 78, -22, 111, 117, -24, 119, 29, 116, -107, -100, 28, 85, -94, -31, -51, 48, 101, 50, 50, 62, 43, 90, 69, 63, 54, 125, 71, 67, 110, 41]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-82, 124, -32, 56, 9, 117, 62, 84, -41, -20, 75, -7, -16, 125, 18, -113]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-70, -120, -53, -93, 33, 103, -118, -107, -36, -65, 89, -40, 126, -79, 79, 70]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[32, -77, 87, -122, 11, 82, 123, -1, 93, -125, 58, -85, 60, -40, -36, -21]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-6, -121, 21, 12, 31, -111, 0, 101, -12, -101, -106, 12, 82, -35, 62, 33]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-33, 70, 6, 99, 64, -102, -79, 99, -127, -47, -4, 72, 62, -30, 82, 34, -18, -121, 52, 102, -25, -46, -81, -49, 80, -4, 111, 114, 118, 99, -67, 71, 32, -77, 87, -122, 11, 82, 123, -1, 93, -125, 58, -85, 60, -40, -36, -21]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-117, -52, 49, -94, -30, -51, 48, -103, 104, -33, -52, -79, -5, 37, -85, -44, 35, 23, -38, 84, 9, 81, -26, 9, -12, -50, 32, 127, -110, -46, 63, -61, 32, -77, 87, -122, 11, 82, 123, -1, 93, -125, 58, -85, 60, -40, -36, -21]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-126, -105, 112, 56, 47, 23, -47, -6, -86, -48, -46, -128, -126, 41, 37, 37, -5, -15, -123, -122, -44, -128, 34, -20, -101, 118, -122, -1, 15, -116, -28, 95, 90, -57, 121, -59, -109, 86, -2, 103, -127, 36, 28, 105, -67, -96, 70, 127, 76, 47, 116, 33, -53, -121, -41, 59, -64, 41, 18, 38, -4, -109, 116, 74, -86, -54, -2, 93, -94, 114, 112, 72, 100, 84, 121, 58, -73, 0, -29, 80, -113, -82, -21, -76, 91, -13, 76, -36, 105, 53, 107, -55, -8, 59, 22, 113, 32, -77, 87, -122, 11, 82, 123, -1, 93, -125, 58, -85, 60, -40, -36, -21]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertNotNull(byteArray55);
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey33);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey33);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey33);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey33);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[5, 58, -5, 125, 98, -93, 42, -65, -105, -21, -119, 13, -96, -87, -6, 104]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-79, -13, 72, -96, -46, 97, 41, -48, 28, 28, 41, -39, -54, 61, -114, 84]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, -50, 55, -67, 22, 103, 118, -78, -1, -123, 110, 124, -80, 59, -44, 112]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[76, -126, 25, -99, 81, 0, 101, 100, 106, -92, -100, 47, 60, -40, -94, 89]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-100, -7, -13, 116, 50, -12, 83, 36, 121, -100, -106, -109, 7, 1, -17, -59]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[82, -64, -105, -58, -22, -83, -50, -32, -56, 75, -2, 29, 125, 4, -82, -85]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[82, -64, -105, -58, -22, -83, -50, -32, -56, 75, -2, 29, 125, 4, -82, -85]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-13, 98, -10, 52, -103, -86, 6, 95, 71, 92, -22, 10, -80, 71, -68, 118, -57, 122, -46, -13, -91, 107, 9, 25, -99, 35, -101, 43, 114, 122, 107, 83, -100, -7, -13, 116, 50, -12, 83, 36, 121, -100, -106, -109, 7, 1, -17, -59]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-119, 81, 10, -128, 85, -54, 76, -67, 100, 119, -2, -53, 127, -73, -54, -120, 104, 118, 36, -93, -106, -95, 5, 39, 83, -99, 63, 73, 34, 50, 63, 79, -100, -7, -13, 116, 50, -12, 83, 36, 121, -100, -106, -109, 7, 1, -17, -59]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-26, -65, 61, -20, 111, 24, 12, -79, 113, 52, -116, -9, -112, 71, 101, 16, 30, 109, 96, 27, -60, -31, -79, -59, -22, 101, 106, 52, 21, -106, 57, -118, -100, -7, -13, 116, 50, -12, 83, 36, 121, -100, -106, -109, 7, 1, -17, -59]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[33, -118, -7, -107, 98, 103, -119, 18, 108, -89, 23, -82, 37, -107, -117, -66, 55, 7, -8, -88, -82, -92, -89, 5, -76, 91, -39, -87, -123, 24, 39, 58, 79, -123, -127, 72, -94, 65, 106, 48, 93, -22, 116, 24, 52, -56, -79, 68, -3, 117, -44, -85, 68, 8, -58, -108, -124, 33, -126, 78, -105, 93, 86, -29, 27, 22, 94, -124, 78, 23, 66, 105, -21, -26, -44, -81, -33, 42, 22, 54, -18, 18, 63, 97, -109, -71, -45, 13, -76, 98, -10, -71, 119, 115, 4, 42, -100, -7, -13, 116, 50, -12, 83, 36, 121, -100, -106, -109, 7, 1, -17, -59]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[33, -118, -7, -107, 98, 103, -119, 18, 108, -89, 23, -82, 37, -107, -117, -66, 55, 7, -8, -88, -82, -92, -89, 5, -76, 91, -39, -87, -123, 24, 39, 58, 79, -123, -127, 72, -94, 65, 106, 48, 93, -22, 116, 24, 52, -56, -79, 68, -3, 117, -44, -85, 68, 8, -58, -108, -124, 33, -126, 78, -105, 93, 86, -29, 27, 22, 94, -124, 78, 23, 66, 105, -21, -26, -44, -81, -33, 42, 22, 54, -18, 18, 63, 97, -109, -71, -45, 13, -76, 98, -10, -71, 119, 115, 4, 42, -100, -7, -13, 116, 50, -12, 83, 36, 121, -100, -106, -109, 7, 1, -17, -59]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-100, -7, -13, 116, 50, -12, 83, 36, 121, -100, -106, -109, 7, 1, -17, -59]");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9CF9F37432F45324799C96930701EFC5" + "'", str46, "9CF9F37432F45324799C96930701EFC5");
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("60776C49AD5DF687B0C31C9B3F6A1ABA", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3BD15D0C0337B85133174A8284E3C513", secretKey6);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey24);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey24);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey24);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-79, -82, -30, 78, 39, 32, -84, 94, 16, 45, -106, -103, 55, 96, 117, -86]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-110, -85, 112, -42, 18, 39, -110, 66, -90, 121, 100, -4, -70, -49, 10, -5, 10, -90, 24, 66, 12, -38, -105, 120, 50, 104, -75, -19, -27, 46, 15, 64, -98, 105, -110, -96, -33, 13, 28, 22, 12, -10, 20, -120, -36, -125, -44, -109]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-12, 24, 25, -57, 114, 94, 41, -9, -18, -87, 33, 108, 15, -107, -86, -42, -53, 122, -108, 88, -103, -78, -5, 60, 91, -116, 104, 52, -83, -27, -45, -107, -98, 105, -110, -96, -33, 13, 28, 22, 12, -10, 20, -120, -36, -125, -44, -109]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[60, 55, -6, 1, -22, -25, -87, -111, 36, -83, 119, 76, -77, -3, -36, 76, 17, -110, -99, 4, 0, 55, -17, 32, 78, -94, -104, 17, 27, -115, 118, -13, -98, 105, -110, -96, -33, 13, 28, 22, 12, -10, 20, -120, -36, -125, -44, -109]");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "3C37FA01EAE7A99124AD774CB3FDDC4C11929D040037EF204EA298111B8D76F39E6992A0DF0D1C160CF61488DC83D493" + "'", str12, "3C37FA01EAE7A99124AD774CB3FDDC4C11929D040037EF204EA298111B8D76F39E6992A0DF0D1C160CF61488DC83D493");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3C37FA01EAE7A99124AD774CB3FDDC4C11929D040037EF204EA298111B8D76F39E6992A0DF0D1C160CF61488DC83D493" + "'", str13, "3C37FA01EAE7A99124AD774CB3FDDC4C11929D040037EF204EA298111B8D76F39E6992A0DF0D1C160CF61488DC83D493");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3C37FA01EAE7A99124AD774CB3FDDC4C11929D040037EF204EA298111B8D76F39E6992A0DF0D1C160CF61488DC83D493" + "'", str14, "3C37FA01EAE7A99124AD774CB3FDDC4C11929D040037EF204EA298111B8D76F39E6992A0DF0D1C160CF61488DC83D493");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-99, -98, 76, -2, -50, -70, -109, 34, 96, 14, -46, 14, 114, 26, -35, 105]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-21, 114, 76, 42, -120, 101, 81, 66, 111, -93, 93, 25, -55, -72, 82, 64]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-21, 114, 76, 42, -120, 101, 81, 66, 111, -93, 93, 25, -55, -72, 82, 64]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[72, -30, 89, -76, -65, 53, 102, 60, -94, -107, 62, 92, -128, 114, 5, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-21, 114, 76, 42, -120, 101, 81, 66, 111, -93, 93, 25, -55, -72, 82, 64]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-48, -39, 87, -121, -15, -67, -53, -118, -22, -71, 23, -76, -53, -63, 3, 114, -69, -75, -126, 15, 45, 111, 11, 67, 33, 96, 50, 97, 110, 120, -86, 94, -99, -98, 76, -2, -50, -70, -109, 34, 96, 14, -46, 14, 114, 26, -35, 105]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-17, 4, -127, 22, -93, -56, 93, 112, 47, -72, -119, -6, -23, -34, 125, 26, 34, -11, 122, 103, 80, -59, -16, -9, 99, -101, -35, -126, 116, -127, -67, -91, -93, 69, -64, -24, 77, -117, 32, -31, -56, -73, -74, -123, -53, -33, -4, 122, -14, -39, -116, -38, 85, 7, 1, -104, -80, -77, -103, -84, -123, -114, 52, 59, 66, 72, -116, -62, 37, -98, 77, -109, -99, -3, -38, 17, 50, -51, -49, 44, -52, -119, 33, 60, 36, -105, -23, -96, -35, 8, -12, 117, -74, -3, 7, -25, -99, -98, 76, -2, -50, -70, -109, 34, 96, 14, -46, 14, 114, 26, -35, 105]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[113, 119, -49, 53, -86, 72, 121, -60, -69, -50, -80, -40, -76, 120, -47, 8, 43, 103, 28, -95, -26, -89, 8, -19, -112, -35, 117, -54, 93, -108, 77, -53, -44, 22, -109, 103, 12, -13, -18, -85, 109, 79, -11, 7, -101, -63, -107, -84, 0, 82, -35, -106, 113, -19, -77, -82, 57, 102, -108, -18, 127, 83, -20, -115, 61, 127, 114, 80, -113, -11, -105, 3, -126, 30, -5, 60, 42, 12, -124, 90, -82, -57, -37, -96, 97, -58, 100, 23, 19, 44, 118, 91, 94, -22, -89, -92, -99, -98, 76, -2, -50, -70, -109, 34, 96, 14, -46, 14, 114, 26, -35, 105]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[36, 69, 22, -15, 53, -10, -93, -70, -50, -96, 42, 105, 32, 100, -119, -124, -91, 125, -116, -33, -30, 73, -49, 36, -116, -90, -52, 47, -112, 84, -52, -89, -99, -98, 76, -2, -50, -70, -109, 34, 96, 14, -46, 14, 114, 26, -35, 105]");
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("F6441EF035CB44DF482D4076E2A2584A09FB6932E41E1A73AACC011A11D436CF6153ACC0BB45F9E81CD68A0E5BDE70C5E98B731602E244B9470D386A4098F20E0DA871E1E1E68188363224699C5B251F769207B9D3E7B513FBF246B3AB276CDE6EDB9EC603A754A6FDFF48C1723737A5", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("A0FF39109A49C5F0C0AE3EB83197EC9A224E6F69C79B718A629F943D42A85C4C06E26241B37D2758C55187466CF8EF22245EDCE7A5B29E9A59D62F277341E7D645353345B114084922B864317EF99801369F14CD724A10064A8A1C463AC5FA69D99483D6CE6597A24F7BDED540A10935", secretKey21);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-49, 37, 7, 96, 49, -9, 84, 40, -81, 21, -9, 79, 16, 92, -128, -99]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-24, 53, -31, -71, -70, -57, 84, 71, 78, -51, -11, -4, -42, -42, -107, -83]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 101, 66, 47, -68, -122, 8, -79, -37, -40, -100, 39, -44, 86, -35, 24]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-109, -39, -9, -26, 62, -108, 29, 96, 25, 48, -2, -121, -123, 32, 50, -4]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, -117, -38, -78, -55, 85, 72, -21, -127, -11, -46, 36, 89, -10, 21, 105, 0, -84, -46, -51, -85, -78, -13, -28, 10, -94, -92, 79, 6, 22, 33, -50, 100, 101, 66, 47, -68, -122, 8, -79, -37, -40, -100, 39, -44, 86, -35, 24]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[91, 21, -50, -96, -94, -117, -91, -7, -19, -109, -46, -87, -74, -48, 32, -48, 51, 1, 83, -74, -126, 107, 116, -71, -108, -48, 40, -20, 76, 90, 5, -14, -35, 51, 110, 125, -47, -19, -33, -57, -29, -47, 50, -87, 6, -15, -70, -117, 57, -65, 110, -25, 112, 57, -30, 101, -62, 67, -62, -113, -46, -46, 19, -78, 84, 127, -10, -101, -60, -58, -121, -109, -106, 84, 28, 51, 36, -34, 116, -53, 61, 64, 125, -13, 111, 124, -25, 92, -82, 8, 123, 19, 53, -106, -94, 82, 100, 101, 66, 47, -68, -122, 8, -79, -37, -40, -100, 39, -44, 86, -35, 24]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[111, -101, 103, -84, -128, 44, -112, -40, -6, -6, 102, -40, 33, -22, -22, 29, -68, -10, 2, -22, -47, -46, 7, 46, -87, 60, -17, 92, -118, 105, 66, -62, 100, 101, 66, 47, -68, -122, 8, -79, -37, -40, -100, 39, -44, 86, -35, 24]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertNotNull(byteArray30);
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("A81AD6210D7B9E5E8D7CD14D27F602DE76A2D78A0CB6F92EE8EBD2A4EDA3B9B90DF3A1C40BE37077C890EA053E5744CED4009962550F58F42A0764C6BDA8BAB99E9E6291DF104146F21A7A2492F18A783794D5F595A527F58109B2AA785B3CCB1A5E813472A32094E96A488DE2296A4196AF137D1FA63740CD0D70FD217720C3FA017FC27137169C164563FCCFADB2BD087989D056216DE643800569540118EC2D428E696B85F983691BFD9D37CF1547FE529A66CB6F6C538F11A7D6E4094F004BFB9F6D3FE66A4658404D5752E0897F005CC7BB176A4E4FCD31C94077CFB2350F7906F62D5FAA3BF6C60494748F126E", secretKey22);
        java.lang.Class<?> wildcardClass33 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-69, -47, -101, 13, 109, -121, 53, -42, -1, 103, -48, -101, 74, -122, 53, 99]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[78, 56, 119, 39, 110, -94, 66, 28, 95, -38, 29, 75, -49, 1, -120, 52]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-126, 36, -91, -108, -112, 101, -36, 120, -27, 2, -46, -16, 95, 40, 20, 25]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-3, 7, -73, 76, 19, -65, -52, -102, 90, -10, -91, 26, 29, 67, -51, -48]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-9, -52, 94, 114, -76, -74, 88, -115, -10, 40, 84, 64, 17, -29, -68, 103, 84, -83, 95, -92, 90, 125, 36, 55, -54, -93, 69, -120, 35, -31, 97, 64, -126, 36, -91, -108, -112, 101, -36, 120, -27, 2, -46, -16, 95, 40, 20, 25]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-126, 36, -91, -108, -112, 101, -36, 120, -27, 2, -46, -16, 95, 40, 20, 25]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-3, 7, -73, 76, 19, -65, -52, -102, 90, -10, -91, 26, 29, 67, -51, -48]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[9, -75, 49, 84, 76, 22, -9, -9, -94, -119, 81, 17, -18, -72, 52, -119, -5, -32, -17, 110, -38, -67, 43, -26, -104, 0, -27, 47, -90, -128, -32, -101, -126, 36, -91, -108, -112, 101, -36, 120, -27, 2, -46, -16, 95, 40, 20, 25]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-117, 103, 79, -39, 16, 86, 98, -11, 22, -115, -61, 16, -103, 55, -62, 31, 101, -83, -1, -60, 116, -24, -127, -5, -58, -91, 64, -9, 25, 38, -127, 22, -126, 36, -91, -108, -112, 101, -36, 120, -27, 2, -46, -16, 95, 40, 20, 25]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("85830BDEB6B4746250090D40BA523BF7800DA6476ACA42A369DB1500135FA2998BFFD3EFF649601FF72ED5235F5D3C08FEC56B41593B0713CA46A51D984C2D575A0AB06C9B11BBD4913F1E9164D07BD2B446DBF254D91F9295B92874DC5345FE986EEE83BCB64F0F222D61874CCBDA1F527FBB31D2A5F223B9BD68E2F64EBF02AFF2DE3F0F4BE4F6844A0445F0E44184C578DCB9297F5A071B1A53BA1F717C50602EE2401AB24B75E858B216C2551506DDA9CCA605031E978871C74A197DD7A4A5F3B959B0F3829A0F0FF888146837D8005C990DD939AAA3F85CBE03E62F583B358481BBD41D17D47764F25728A858E9", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("9368F0A8304B33E18BA503C3285D8B5B0CB44AB8D0DEA8B969B1DCD701401EEA57F6011C39DA645E0D7C4C0CB953BA08", secretKey23);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-18, 23, -16, 116, 42, -122, -53, -118, 26, -59, -51, -38, 72, 93, 107, -56]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-28, 10, -14, 85, 56, -27, -20, -20, -127, -86, 9, -57, -73, 25, -31, -128]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[26, 125, -50, 121, -10, 66, 8, -63, 41, -25, -63, 51, 60, 14, -37, -58]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-89, 25, -42, 67, -53, -12, -39, -36, -21, -34, -57, 68, -94, -37, 40, -90]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-98, -84, -108, 81, -52, -71, 88, -39, 16, 97, 117, 4, -87, 9, 60, 7, 49, -69, 121, -13, 110, 14, -120, -8, -75, -34, -120, -103, -2, -6, 86, 11, 26, 125, -50, 121, -10, 66, 8, -63, 41, -25, -63, 51, 60, 14, -37, -58]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[26, 125, -50, 121, -10, 66, 8, -63, 41, -25, -63, 51, 60, 14, -37, -58]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-89, 25, -42, 67, -53, -12, -39, -36, -21, -34, -57, 68, -94, -37, 40, -90]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 99, -58, 36, -36, 115, 114, -10, -17, 99, 87, -57, -108, 83, 38, 16, -27, 11, 80, -117, 43, 109, 47, -20, -120, 76, 36, 113, 36, -122, -29, 33, 26, 125, -50, 121, -10, 66, 8, -63, 41, -25, -63, 51, 60, 14, -37, -58]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[96, 92, -15, 1, 121, 107, 35, -4, 41, -72, -77, 35, -115, -103, -55, 117, 82, -103, -97, -71, -44, -71, 46, -17, -90, -29, -93, 102, 54, -6, -98, -47, -76, -90, 127, 17, 87, -44, 71, 19, -85, 112, 79, -96, 127, -56, 111, -94, -58, 87, 2, 3, 104, 66, -116, 0, 46, 11, -78, -91, 92, -96, 109, 125, -26, 69, 84, 106, -74, -114, 125, -88, -121, -118, 52, -106, -7, 52, -13, -110, 85, -113, 83, 41, 119, 74, 118, 97, 66, -63, -111, -50, 46, -63, 6, -116, 26, 125, -50, 121, -10, 66, 8, -63, 41, -25, -63, 51, 60, 14, -37, -58]");
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey10);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey10);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey10);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("468A186984B6CE8DCF787F1E5A47C6FE", secretKey10);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey58);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey58);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey58);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey58);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD1764EA6414F7B80E2C2528AF94187D83115A8699E6C7D82BF0FE86A1256275258B90E3C9FAB4FDB31190BD2CC496B4B40A6C521D00D531D171DA79D65BF9B87A622963780D7593B48D2EB10094D1B6DEFA22BA230EF12B37788AEA3A5AEA19032E6AD74F1A9925213ED959FC8DF27528FCECEE8E917D9E186D143D21DD24211C6DDD1920013F41C8D0012EDBE1F859F8165F48571481757A9B9EAF8358AC0CBF0C691529203641A9F7CCD7538C1996D28CCB0AE70A32D8C501CD4F3E4BFC0B6D89E9F5E8BA04C00B9DC942FADE7200C2B623E587B401C029F4B3253A15B4F0A3BEDCC4F5A7E4756E64E183FF75CAF5", secretKey67);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("04B3B6E533016A6EE6A113699A6DCA447C85028D4B5DA1749ABD1A461C719E7CE630288BC270A9EB882667A54FEC6E5C", secretKey67);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("9C6F2729D3AD2313CC88F39DD903E74B", secretKey67);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("ACD7F17C614202A0F2C8B2DA42C15732", secretKey67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey67);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[103, 115, -112, 68, 97, -1, -92, -37, -52, -25, -46, 7, 125, -36, -84, 14]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[3, 117, 36, -52, 102, 38, 51, 24, 34, -26, -19, -76, -3, 66, -33, -87]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[3, 117, 36, -52, 102, 38, 51, 24, 34, -26, -19, -76, -3, 66, -33, -87]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-75, 18, -17, -121, 5, 0, 7, -28, -20, -116, -110, 6, -96, -63, -85, 66]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[103, 115, -112, 68, 97, -1, -92, -37, -52, -25, -46, 7, 125, -36, -84, 14]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[37, -91, 53, -61, -86, -83, -122, 34, -82, -120, 56, -1, -59, 1, -21, 54, 78, -74, -87, -55, 76, 64, -78, 112, 118, 73, -80, 9, -97, 115, -95, -86, 91, 23, 98, 66, 3, 38, -57, 51, 28, -29, -17, 33, -101, -43, -50, -54, -125, -106, -29, -90, 106, -6, -6, -63, 60, -106, 92, -56, 53, -48, 108, -94, 1, 1, -9, -20, 54, 125, -119, 59, 81, -70, 127, 18, 117, 39, 88, 86, -55, 13, 92, 17, -122, -120, 22, 10, -126, 94, -64, -9, -40, -109, 18, 53, 103, 115, -112, 68, 97, -1, -92, -37, -52, -25, -46, 7, 125, -36, -84, 14]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-73, -69, 94, -84, 108, -61, -112, 20, 96, -3, -35, 1, -71, -47, 59, 88, -43, 100, -103, 68, -72, 95, -21, 123, -62, -9, -58, -74, -8, -123, -87, 35, 103, 115, -112, 68, 97, -1, -92, -37, -52, -25, -46, 7, 125, -36, -84, 14]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 93, 112, 126, 30, 24, -23, -9, -117, 70, 32, 25, -44, -32, -124, 88, -85, -39, 48, -38, 126, -23, 74, 6, 43, -20, -102, -117, -21, 22, -21, 74, 103, 115, -112, 68, 97, -1, -92, -37, -52, -25, -46, 7, 125, -36, -84, 14]");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "645D707E1E18E9F78B462019D4E08458ABD930DA7EE94A062BEC9A8BEB16EB4A6773904461FFA4DBCCE7D2077DDCAC0E" + "'", str21, "645D707E1E18E9F78B462019D4E08458ABD930DA7EE94A062BEC9A8BEB16EB4A6773904461FFA4DBCCE7D2077DDCAC0E");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "645D707E1E18E9F78B462019D4E08458ABD930DA7EE94A062BEC9A8BEB16EB4A6773904461FFA4DBCCE7D2077DDCAC0E" + "'", str22, "645D707E1E18E9F78B462019D4E08458ABD930DA7EE94A062BEC9A8BEB16EB4A6773904461FFA4DBCCE7D2077DDCAC0E");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-79, -125, -37, -100, 73, 31, -23, 115, -124, 112, -96, 72, -116, 50, -37, 53]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[9, 106, 97, 94, -34, -86, 121, 29, 80, -78, 35, 37, 35, 71, -34, 120]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-38, 85, 90, 90, 31, -66, 110, -30, -100, 45, 82, -20, 101, -92, -98, 25]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-79, 9, 14, 69, 120, -15, 72, -112, -28, 49, 83, -34, 59, -56, -53, -117]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[117, 32, 50, 15, -106, 117, 5, 25, -50, -57, -38, 33, 50, 32, -23, 77]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-95, -100, -61, 11, -86, -16, 14, 100, -86, -13, -44, -92, 34, 99, 70, 102]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-95, -100, -61, 11, -86, -16, 14, 100, -86, -13, -44, -92, 34, 99, 70, 102]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[88, -28, -42, -38, 16, -90, -69, 80, -50, -31, 34, 125, 36, -73, 8, -82, -23, -24, -48, -31, 126, 77, -9, 0, -45, -15, -20, 48, 109, -12, -116, -70, 117, 32, 50, 15, -106, 117, 5, 25, -50, -57, -38, 33, 50, 32, -23, 77]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-26, 2, -53, -49, 104, -80, -87, 23, 46, -13, -72, -98, -29, -82, 71, 106]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[3, -3, 45, -123, -88, -63, 73, 19, -61, 3, -29, 100, 117, -31, 124, 119, -15, -19, -72, -85, -124, -41, -110, -69, -101, -118, -85, 73, 16, 80, 82, -14, -101, -116, 6, 119, 28, 121, -103, 48, 125, 98, -60, 1, 38, -24, -127, -94, -5, -93, 102, -70, 111, 42, -46, -9, -71, -120, 19, -45, -49, 83, -5, 107, -7, 102, 51, 23, 97, -60, -62, -43, 34, -61, 4, 104, 31, -63, -2, 62, -30, 67, -33, 3, -65, 46, -23, -53, -41, 12, -96, 125, -65, 32, -16, -113, -26, 2, -53, -49, 104, -80, -87, 23, 46, -13, -72, -98, -29, -82, 71, 106]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-87, 66, -82, -61, -113, 58, 120, -76, 38, 20, -37, -53, 33, 104, -78, -51, -23, 61, -102, -64, -46, 6, 69, 6, -84, 92, -76, 79, -58, 18, -85, 26, -26, 2, -53, -49, 104, -80, -87, 23, 46, -13, -72, -98, -29, -82, 71, 106]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-102, -94, -19, -40, 34, 97, -37, 69, -117, -55, 45, -79, -30, 65, -60, -30, -14, -97, 98, 65, 74, -19, -32, 99, 125, 39, -112, 57, -16, 116, 4, -5, -26, 2, -53, -49, 104, -80, -87, 23, 46, -13, -72, -98, -29, -82, 71, 106]");
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-4, 58, -120, 51, -120, 116, 13, 67, -59, 28, -56, 20, -119, -6, 10, -123]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, -128, 6, 98, -111, 3, -52, -46, -52, 107, -74, 91, 91, 10, -64, -41]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-28, -4, 45, -95, -50, -106, 113, -81, -16, -33, 115, -30, 63, 19, 27, 110]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-4, 58, -120, 51, -120, 116, 13, 67, -59, 28, -56, 20, -119, -6, 10, -123]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[72, -101, -67, -62, 116, 104, -91, 50, -103, 69, -85, 39, 50, -120, 49, 118, 98, 68, -70, -16, -26, 9, 96, 46, 89, -84, -118, 47, 82, 25, 65, -53, -57, -16, 41, 4, -63, -2, -103, -124, 96, 94, 104, -80, -24, -68, -11, -85, 29, -7, -126, -33, 38, 43, 18, 35, -82, 112, -25, -58, -112, -61, 49, -14, 30, -104, 20, 111, -128, 105, 119, 73, -67, 66, -24, 121, 21, 79, -112, 110, -96, -20, -119, 16, -79, -87, -56, -87, 43, 43, 33, 37, 30, 118, 60, -104, -4, 58, -120, 51, -120, 116, 13, 67, -59, 28, -56, 20, -119, -6, 10, -123]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-4, 58, -120, 51, -120, 116, 13, 67, -59, 28, -56, 20, -119, -6, 10, -123]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("8CE30672D5D8447E1E4CBAA8025B8586FC5D95D27787390CB64EC298C8330F7CAF95EDB06732F7415C3EEF8F5690BDF1", secretKey5);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE460B38AB324C017ECD0D23493B44ABCCF3F928C046835A22405C9291434FF0743483188C46F19F52BD7899BA19CACC", secretKey13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey13);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-25, -91, -69, 73, -73, 66, 95, -70, -54, -128, -75, -31, -120, 3, -21, 114]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[74, 73, -63, -34, -75, 48, 74, 27, -4, -124, 0, 21, 78, -49, -17, 9]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[36, -22, 114, 110, 56, -99, -8, 75, -111, 89, 103, -39, -96, -78, 44, 25, -99, 88, 93, 91, 81, -8, 51, -11, 123, 51, 0, -88, 58, -16, -9, 29, -25, -91, -69, 73, -73, 66, 95, -70, -54, -128, -75, -31, -120, 3, -21, 114]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[94, 48, -28, 60, 53, 30, -118, -40, 105, -19, 66, 51, -54, -125, -62, 97, -16, -114, 64, 1, -117, 61, 66, 15, -93, 98, 71, 80, -32, -118, -123, -72, -25, -91, -69, 73, -73, 66, 95, -70, -54, -128, -75, -31, -120, 3, -21, 114]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[7, 59, -65, -14, -104, -66, -79, 68, -111, -87, -105, -3, 37, 59, 72, -115, -75, -94, -90, 17, 78, -51, -37, 10, 55, 108, 96, -51, -32, 118, 127, -127, 2, -81, -64, 111, -33, -124, -32, 19, -4, 103, -30, 88, 75, -125, 9, -40, -20, -3, 84, 115, -106, 48, 35, 10, 122, 59, -81, 8, -43, 110, 23, -113, -17, -115, -34, 77, -96, -9, 30, 107, 103, 19, -91, -102, 113, 16, -9, -105, 114, -115, 120, -20, 69, -82, -42, -75, -55, 51, -7, -98, -36, -34, -23, 72, -25, -91, -69, 73, -73, 66, 95, -70, -54, -128, -75, -31, -120, 3, -21, 114]");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-89, 78, 65, 38, -96, 6, -49, -93, 125, -72, 17, -79, -57, 32, -52, 89]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-26, 73, 34, -76, 71, 10, 108, -29, 121, 117, -63, 13, 83, -8, 100, -74, 119, 86, -77, 42, -124, 49, 89, 90, 8, -114, 5, -89, -95, -11, -91, 25, -115, -90, 57, 122, 33, 11, -82, 82, -61, 65, 2, 43, 110, 0, 63, -118, -48, 113, -72, -118, -46, 54, 110, -82, -36, 42, -37, 22, -11, -54, 104, -15, 55, -49, 69, -84, 74, 105, -11, -7, 11, -18, 39, 37, 61, -31, -5, -23, -58, -93, -105, 27, -77, 121, -12, -94, -33, -82, 36, -124, -81, 76, 95, 6, -89, 78, 65, 38, -96, 6, -49, -93, 125, -72, 17, -79, -57, 32, -52, 89]");
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey23);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey42);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey42);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("A34ABCDEF4648FD3FA5FC4E66CB98492D220058F601B939068952EA5EB8D12D70DCC1B1E24F217337BFAE0D78E60A624013527DC5C82EC1A1B19CF0D4F07B2262FC6E4E305C622CDC83799BD97BB31FB", secretKey42);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey42);
        byte[] byteArray60 = new byte[] {};
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey62);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey76);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey76);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey76);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey76);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey76);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey76);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey76);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey76);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("CD2DFBF2F19A5CDC5ED507D4E3AFAB45A61929A9932456D4FD29E992358D856933D47E2E26338D2D18E1B854BF1DD653D28E99B718F144EFD7D115D3AC141AD8067343518CEC70F03912A19633E1AB2D79EF278259DF687331526E55348DFC2C771E8C8AB9C21FD8D3B8B354F704AF0F", secretKey76);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey76);
        java.lang.Class<?> wildcardClass91 = secretKey76.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-33, 43, 8, -30, 69, 117, -89, 10, 28, -117, 110, -28, 58, 41, 120, 90]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-56, 51, -126, 24, 27, 21, 46, -54, -21, 22, 34, -74, -77, -22, -124, -80]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[58, -81, -83, 37, 125, -117, 58, -65, 37, 37, -77, 84, 66, 120, 64, 42]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-98, 105, -54, -43, 23, 6, -100, -30, -98, -62, -5, 24, 125, 4, -124, -37]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[106, -97, -88, 103, -68, -104, 45, -41, -32, 34, -52, 126, -95, 59, -4, -119, -92, -98, 13, -74, -12, 88, 54, 21, 62, -94, -108, -11, -53, -11, 75, -73, 58, -81, -83, 37, 125, -117, 58, -65, 37, 37, -77, 84, 66, 120, 64, 42]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-7, -83, 47, -7, -44, 22, -101, 69, 22, 83, 41, 86, -78, 126, 53, -64, -16, -6, 118, 23, 46, 83, 87, 16, -80, -128, 59, 12, 67, -103, -10, 52, 58, -81, -83, 37, 125, -117, 58, -65, 37, 37, -77, 84, 66, 120, 64, 42]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[21, 119, -68, -54, -93, -65, 95, -125, 72, 48, 58, 85, -27, 68, -83, 45, -21, 45, 111, -16, -21, -39, -3, 57, 113, -107, 25, 16, 51, -85, -118, -20, -68, 52, -8, -79, 41, 83, 36, 90, -101, 36, -53, -2, -25, -121, -91, 111, 117, -42, -28, -21, 24, 7, 20, 48, 81, 11, 10, -111, 26, 29, 49, 88, 100, 2, -77, -82, 51, 60, -27, 9, 76, 58, 116, 101, 52, -104, 18, 17, 99, -78, -118, -29, -36, -24, -88, -121, 105, 7, 43, -111, -7, -46, 111, 65, 58, -81, -83, 37, 125, -117, 58, -65, 37, 37, -77, 84, 66, 120, 64, 42]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[106, -7, 5, 105, 63, -33, -9, -6, -43, 69, -99, 52, -52, 7, -5, 65, -108, 21, -40, -94, -78, 43, 57, 114, 69, 69, -1, 118, -12, -66, -126, -53, 58, -81, -83, 37, 125, -117, 58, -65, 37, 37, -77, 84, 66, 120, 64, 42]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[38, 112, -59, -18, -78, -41, -30, -80, 122, -7, 23, -12, 29, -90, -79, -52, -32, -23, 96, 89, 60, -85, 127, 41, -67, 86, -109, -36, -16, -53, 122, 106, 67, -20, -122, -69, 100, -117, 62, 102, -54, -46, -46, -102, -65, -41, -7, -29, -33, -83, -84, 48, -35, -94, 7, 110, -33, -58, 2, 113, -103, 122, 105, 118, -15, -101, 48, -4, 39, -38, 75, 20, -71, 89, 104, 126, -100, -76, 27, -62, 30, -86, -8, -79, 68, -41, -103, -50, -80, 26, -39, 19, 55, -16, -89, -93, 58, -81, -83, 37, 125, -117, 58, -65, 37, 37, -77, 84, 66, 120, 64, 42]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[18, 109, 28, -113, -15, 38, 105, -2, -107, -79, -22, 35, -49, 100, 64, -35]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-3, 79, 116, -17, 22, 59, 0, -97, -124, 22, -12, -99, 102, 74, -66, -47]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-3, 79, 116, -17, 22, 59, 0, -97, -124, 22, -12, -99, 102, 74, -66, -47]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-97, 123, -128, -119, -109, 10, -99, -83, 72, 19, -27, -96, -93, 62, 39, 87]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-3, 79, 116, -17, 22, 59, 0, -97, -124, 22, -12, -99, 102, 74, -66, -47]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-47, -96, 52, -126, 126, -8, 20, -79, 58, -32, 54, -6, 83, -1, -82, 20, -20, -70, 95, -27, -50, 125, 127, 119, 103, -78, 126, 42, -86, -90, 119, -28, -50, -52, -44, 120, 125, -125, 122, -64, 1, 51, 125, -116, -114, -9, 48, -16, -51, -118, -9, -128, -30, -53, 119, -23, -91, -19, 89, 29, -30, -64, 27, 82, -69, 34, -79, -13, 16, 24, -94, 86, 17, -19, 66, 119, -45, 15, 115, -94, -9, 7, -64, -38, 121, 67, 5, -87, 12, 11, -72, 15, -20, 83, -108, 70, -13, 29, 15, 45, -124, 25, 7, -41, 108, -75, -6, 44, 56, -20, -60, 2, 30, 53, 97, -11, 64, 54, 61, 32, 46, 61, 32, -9, -57, 57, 44, -74, 16, -90, 111, 107, -5, -61, 34, -70, 106, 122, 32, 4, -26, 35, -7, -81, -23, -100, 92, -125, 93, -63, -18, -44, 17, 12, 40, 39, 65, -81, 107, -10, 18, 109, 28, -113, -15, 38, 105, -2, -107, -79, -22, 35, -49, 100, 64, -35]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-75, 24, -3, 9, -81, 9, -48, 109, 59, -79, -64, -16, -13, -82, 105, -55]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-89, -106, 96, -24, -71, 112, -6, 101, -17, 103, 110, -94, 111, 61, -105, 104]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[101, -56, -112, -102, -116, -88, 33, 34, -32, -15, -80, -8, 99, 3, -27, -53]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[65, -106, 16, 56, 5, 47, -71, -60, -42, -45, 20, 37, 28, -112, -10, -16]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-23, 101, -98, -121, -66, 56, -9, -115, -31, 110, 18, -5, 29, 30, 22, 113, -79, 21, -68, -53, -42, 17, 78, 5, 37, 76, -105, 86, 42, -36, -60, -77, 101, -56, -112, -102, -116, -88, 33, 34, -32, -15, -80, -8, 99, 3, -27, -53]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-72, -72, -62, -15, 80, 40, -32, 123, 75, -35, -81, -34, 57, 99, -77, -108, 45, -33, 87, -71, 73, -70, -84, -85, -27, -111, 86, 65, -110, -23, -93, 78, 101, -56, -112, -102, -116, -88, 33, 34, -32, -15, -80, -8, 99, 3, -27, -53]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-92, 101, -73, -74, 21, -108, -107, 36, -60, 57, 6, -79, 0, -98, 35, 68, -22, 26, 19, 104, -36, -92, -42, 14, 12, -95, -95, -8, -13, -14, 13, -8, -49, 4, -111, -11, 89, 19, -86, -103, 17, -44, 38, -65, 43, 106, 126, 41, 23, -16, -127, 23, 94, 114, -65, 4, -63, 105, 19, -39, 30, 82, 77, -115, -70, 90, 41, 126, -75, 53, 69, 122, 51, -56, -50, -94, -117, -101, 101, 4, 45, -80, 86, 103, -50, 47, 47, -13, 2, 23, 32, 100, -119, 67, 69, -83, 101, -56, -112, -102, -116, -88, 33, 34, -32, -15, -80, -8, 99, 3, -27, -53]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[48, -127, 57, 28, 86, 39, -42, -68, 25, 0, -80, -82, 23, 113, 86, -116, -92, -50, -124, 55, -77, -1, -13, -36, 52, 32, 34, -28, 3, 24, -117, -19, 83, -81, 98, 90, -37, -69, 38, 124, 0, -4, 58, 106, 93, -33, -35, 64, -80, -18, -3, 32, 49, -77, -107, -73, 77, 108, -125, -60, -94, 96, -56, 96, -30, -15, 47, -117, 61, 78, 4, 1, -109, -100, 50, 114, 56, -26, 52, 61, -4, 122, 127, -74, 111, 28, -122, 6, 12, -110, -41, -116, 53, -116, 85, 126, 101, -56, -112, -102, -116, -88, 33, 34, -32, -15, -80, -8, 99, 3, -27, -53]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[101, -56, -112, -102, -116, -88, 33, 34, -32, -15, -80, -8, 99, 3, -27, -53]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[107, -7, -96, -34, -106, -49, 99, -7, -63, 5, -82, 123, 92, -70, -55, -37, 25, -12, -60, -66, 79, 55, -12, -9, -122, 13, -37, -4, 49, -79, 53, -66, 101, -56, -112, -102, -116, -88, 33, 34, -32, -15, -80, -8, 99, 3, -27, -53]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[30, -3, 107, 27, 104, -50, -56, 123, 38, 62, -125, 48, 98, 74, -29, -88, 21, 15, 0, 103, 115, 49, -19, -60, 6, -52, 71, 39, 19, 23, -116, 125, 12, 110, 92, 42, -120, -88, -121, 67, 75, 99, -102, 48, -118, -6, -53, 50, 65, -56, -61, 50, 61, -115, 103, 77, 75, 82, 10, -47, 30, 86, -35, 8, 57, 95, -81, -97, -85, 22, 49, -90, -127, 105, -101, -24, -4, -121, 26, 33, 15, 34, 33, 99, -32, 67, -59, 98, 89, 9, -31, -91, -62, -101, -35, -28, 101, -56, -112, -102, -116, -88, 33, 34, -32, -15, -80, -8, 99, 3, -27, -53]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[21, 28, 60, 1, -55, 44, 87, 116, 51, 32, -107, 27, -25, -22, -106, -100, 11, 87, -37, 55, -6, 87, 89, -93, -32, -84, -13, -110, 125, 47, -70, -108, 101, -56, -112, -102, -116, -88, 33, 34, -32, -15, -80, -8, 99, 3, -27, -53]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey54);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey54);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey54);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("85901A7A07774EF1B30A7D77F78D499830E94396D39F6D0A240A6BA509D22CD00BBA7DCDA4CC37D69BA13844D5AF219C", secretKey54);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("463CAA2BD4DEFD20F8E05D6670DE96D7EFDC0E8D4D84C870D15F34611C55FC6BD8216FD85E17C4CCAE11A5C37A8FA6C2FA3E6B7447E59F30647091CBC50B3872F283A737E1B800897C70B6B9C3AFA21AFE2E5779F2B2D545F53C3E51FD813505E75E43E6449F79BF2F3AE18DAB12A9867FF8C9101EB49508652C4E5D05BE98070B2702F27D2CAFF2BD5E22EDE54E40206C4100CF1E042574CB2E2072249C6841142A5376DEFBCACDFEE7C5608B8B19AC364CAC50EAE8FB7D553CAB4292273D51922B40F9AC76FDB3FA00D76F0220B3885BE29EE40AE4F6390A4BB7BAA54566A4350EA9F27FBC1471CAB9C792DC57C8F5", secretKey54);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("19B302470B6D95218F93D0CB5986F11CDEE7F00A852C08A8707F9954C59B8F57E2C486AF04AC78EA27A0608930FD99841BB5517CAD607E70533CB3BD239DE296A9A0E8ACC3FB32CDCCAD58B291A603C7A6773FC681ADE5336159FDC21109E6951FCD68D4D1BE9BBFB3E751694CB3FA99", secretKey54);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[48, -111, 97, 49, -45, 91, -98, -63, 43, 126, 37, 11, -38, 126, 115, -79]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-91, -76, -37, 72, -18, 94, -33, 126, -51, -103, -87, 54, 59, 96, 12, 46]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[62, 78, -114, -78, 99, 85, 15, 24, -13, -25, 115, -34, 99, -115, 91, 82]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[117, -22, 35, -67, -114, -70, 111, 28, -93, -25, -81, -9, -95, 5, -56, 83]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, -62, 70, 71, 86, 17, -55, -90, 59, -78, -54, 9, 25, 34, -4, -114]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-84, -88, -78, -52, -49, -86, -65, 12, 49, 4, -117, 69, -105, -104, 84, -59]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[34, 107, 101, -123, -106, -6, -81, 84, -96, 32, 115, 5, -119, -45, 20, 98]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[49, 92, -93, 35, 29, 110, 115, -38, -73, 57, 59, -51, 81, 49, -48, -89]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-41, 112, -125, 121, -126, -7, -105, -108, -64, -127, -47, -43, -96, 36, -67, -85]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[102, 94, -79, 57, -124, 25, 57, -19, 118, -106, 90, 21, -73, -126, -61, -96]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-12, -24, 58, 5, 16, -89, -79, 56, -123, -43, -57, -64, -39, 57, 36, -68]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-41, 112, -125, 121, -126, -7, -105, -108, -64, -127, -47, -43, -96, 36, -67, -85]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-12, -24, 58, 5, 16, -89, -79, 56, -123, -43, -57, -64, -39, 57, 36, -68]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[124, -94, -39, 44, 66, -13, 96, -96, -88, 71, 76, 49, 23, 87, 30, -54, 1, -117, -3, -49, 63, -11, -125, 102, 79, 48, 39, -22, -46, -81, 90, -44, 23, -98, -9, -82, 83, -125, -2, 60, 33, -30, -63, 70, -72, 45, 119, 20, -11, 85, -25, 15, 91, -3, 111, -96, 28, -76, -89, -48, -46, 14, 8, 61, 28, 45, 4, 10, -14, -80, -14, 34, -97, -114, 120, 111, 22, 122, 18, 36, -16, -91, -18, 76, 120, -66, 69, -124, -101, 20, 2, -16, 101, -73, -103, 107, -41, 112, -125, 121, -126, -7, -105, -108, -64, -127, -47, -43, -96, 36, -67, -85]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        byte[] byteArray66 = new byte[] {};
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray66);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey68);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        byte[] byteArray74 = new byte[] {};
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray74);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey76);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey76);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("54CEB7F2F5AE00CE49EF6360BD1F6E81F7525E4B1CBEEF106AC4937746F16415304280CC315475B32C253E6BD6DCF186449DDD10AE4DCF93B9C04F1468198F6E30D092222E14EC6134BD03D20CB69100D8255C6B61D48E6083032C50C695126E94B37E10479924D0523513BA73AAE473E5B095C8B39A9675972132BC911CD4BEA066FFD10D9AE53214342335B4B8043B26904A5E4889A257650B71DC7064AA910CB418E14878204F93A832D67873BDB706CF3614F2D09471A3397271385E8024C416FAE03B15980486B28B30B749E6C704FE024EEFAF3524998CEF3807116A9F269A65F1F49F8062DE3102E83135EB16", secretKey76);
        java.lang.Class<?> wildcardClass81 = secretKey76.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[112, -77, -87, -106, 123, -11, -118, 81, -56, 121, 127, 53, -90, -106, 123, -1]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-73, 85, -85, 48, -9, 71, 102, 76, -118, -27, -122, -86, -21, -45, -15, -11]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-91, 96, 20, -122, 73, 20, 98, -65, -109, -45, 1, 58, 110, -58, -45, -127]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[127, 109, 108, -121, 63, 72, 104, 41, -98, 111, 25, 9, 9, -97, -110, 13]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[73, 71, -57, -42, 115, 74, 103, 53, 4, -16, 104, -3, 31, -126, -72, 42]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-50, -42, 76, -34, -14, -21, -94, 52, 38, 41, 49, 75, 25, -79, 111, -78]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-15, 56, 20, 70, -87, -49, 7, -57, 77, 68, 86, -119, -107, -8, 94, -48]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-127, 119, -9, -92, 44, 45, 88, 82, -64, 39, 83, -55, -106, -50, -109, 53]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[3, -26, -39, 115, -28, -31, -108, -32, -21, -21, -127, 76, 27, -33, -72, -25]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-3, 94, 107, -86, 122, -36, -95, -35, -90, -20, -20, 113, 62, -82, 83, -24]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-106, -70, -38, -30, -30, 75, 1, -93, -54, -72, -49, -46, 114, 42, 38, 7]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[3, -26, -39, 115, -28, -31, -108, -32, -21, -21, -127, 76, 27, -33, -72, -25]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-99, -100, 117, -42, 60, 48, 79, -50, 122, -118, 59, 41, 110, 44, -124, -99]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("4CC5DF797845510CE002A0BD16CFE56D", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("C2F853725022C068916C827B04CCE28038C88B4DBC831B2898856FB05CA185CEE8B924CCD14D468B421EEB17F8CE24A9", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[28, 49, -86, -26, 115, -61, -118, -69, 34, -55, 66, 127, -99, 66, -64, 123]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[109, 64, 26, -28, -1, -54, -9, -77, -81, 80, 37, -43, -109, -12, 9, 105]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-13, -95, 8, 118, 29, 35, 29, -118, -122, 66, 111, -120, -21, -72, -84, 31, -115, 112, -118, -11, 6, 125, -51, -101, 8, -67, -97, 38, -83, 12, 53, -60, 28, 49, -86, -26, 115, -61, -118, -69, 34, -55, 66, 127, -99, 66, -64, 123]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-103, 21, 48, 85, -108, 46, 12, 94, 11, 48, -104, -76, -103, -115, -55, -79, -30, -6, -112, -67, 4, 104, 93, 1, 7, -28, 108, -17, -120, 44, -53, 87, 28, 49, -86, -26, 115, -61, -118, -69, 34, -55, 66, 127, -99, 66, -64, 123]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-34, 31, 105, 54, 103, 113, 50, 43, -24, -24, -75, 17, 30, 80, -102, 34, -35, 44, -26, 47, 10, -88, -59, -80, 124, -88, 71, -40, -43, 71, 119, -34, 76, 89, -14, -46, 69, -46, 73, 127, 57, 27, -30, 125, -18, -35, 58, 39, -108, 83, -14, 70, 95, 58, 69, -119, -97, -6, -65, 105, 68, -19, -30, 8, 66, 85, 90, 32, 84, -63, 73, -117, -68, 54, 116, -78, 125, 110, -75, -100, -26, 108, -115, -17, 56, -97, -114, -123, 45, 29, 66, -101, -110, -83, -38, 10, 28, 49, -86, -26, 115, -61, -118, -69, 34, -55, 66, 127, -99, 66, -64, 123]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey23);
        java.lang.Class<?> wildcardClass35 = byteArray34.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-92, 65, -71, -92, -105, -106, 105, -2, -60, 99, 6, 124, 101, 13, 13, 108]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-6, -110, 25, -98, 94, -52, 85, 64, -77, -9, -32, 74, -23, -77, 33, -87]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[80, 52, 65, 0, -108, 10, 74, -93, -4, 14, 90, -46, 25, -13, 92, 98]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-44, -82, 42, 22, -87, -61, -28, -107, 26, 19, 81, -69, -13, 104, 61, 36]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-45, 30, -128, 85, -105, 31, -109, -62, -94, -121, -39, 71, -100, -97, -64, -30, -112, 79, -20, 98, -125, -91, -32, 66, 88, -3, 49, 44, 112, 46, -114, -65, 80, 52, 65, 0, -108, 10, 74, -93, -4, 14, 90, -46, 25, -13, 92, 98]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-97, -103, -73, 12, 40, 127, -61, -87, 53, -17, 116, 69, -79, 27, -71, 49, -76, 75, -84, -90, 48, 119, -48, 58, 47, -65, -7, -103, 69, -102, -119, -77, 80, 52, 65, 0, -108, 10, 74, -93, -4, 14, 90, -46, 25, -13, 92, 98]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-21, 114, -31, -77, 10, -68, 93, 39, 31, 123, -66, -12, -54, 88, -45, 110, -41, 27, -18, 125, -22, -41, 44, -114, 57, -89, -45, -16, -88, -8, 63, -47, 18, -111, 61, -33, -78, 117, -108, -103, -41, 19, 79, 65, -92, -82, -94, -64, -39, 55, -6, 44, -10, -66, -93, -17, -50, -68, -119, -58, -30, -47, -27, 77, -12, -98, 50, 46, 112, -119, 18, 113, 3, 41, -41, -88, -94, -27, 100, -115, -65, 18, -56, -77, -101, -68, 113, 87, 76, -88, -97, -79, -52, -48, -90, 75, 80, 52, 65, 0, -108, 10, 74, -93, -4, 14, 90, -46, 25, -13, 92, 98]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[35, 20, 73, -99, 83, 110, 83, 101, 6, -25, 105, 80, -30, 97, -19, 106, 58, 127, -100, 39, -55, 92, 117, 103, 56, -50, 36, 119, 8, 116, -41, -36, 80, 52, 65, 0, -108, 10, 74, -93, -4, 14, 90, -46, 25, -13, 92, 98]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-77, -75, -68, 112, 52, 31, -57, 115, 76, -41, 94, -118, -23, -64, 63, 87, 121, -48, 39, 21, -33, 23, -107, -78, 3, -89, 22, 62, -10, -112, -108, -51, 66, -104, -100, 21, -40, -125, -68, -25, -35, 77, -28, -18, -110, -113, 28, -4, 26, -101, 79, -58, 121, -92, -81, 50, 45, 35, -31, -109, -19, 123, -82, -74, 116, -109, -54, 2, 88, -78, 21, -53, 12, 18, 117, -57, 55, -103, 104, 31, -19, -85, -80, 76, 72, -109, 65, 35, 112, -62, 56, -128, 6, 92, -121, -19, 80, 52, 65, 0, -108, 10, 74, -93, -4, 14, 90, -46, 25, -13, 92, 98]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[125, 0, -84, 59, 64, -44, -5, 87, 127, -118, 77, -30, -59, 74, 53, -48]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-75, 25, 40, -64, -36, -101, 74, 58, -127, -70, -59, -11, -55, 31, 34, 113, 56, 89, -9, -65, 42, -81, 0, -125, -67, 59, -90, -125, -64, 21, 108, 101, 80, 52, 65, 0, -108, 10, 74, -93, -4, 14, 90, -46, 25, -13, 92, 98]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey54);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey54);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey54);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey54);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("20441C3BD6519FDA84C27BDCF89238D9D88B9558A6AAF75DEAD8CE60B5805352D03A036218F90474772DC4DBA9FC7F33D485789D06052AD3417E3C9FE82D111D4F3A6D7CE45445032D08A6262296FB951234E1AD75F7DC6D82F9E88A6B4DFF48AC02C756CF4B36B179C3FB3A72E0E789", secretKey54);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[112, 94, -72, 76, 75, -9, 27, -24, 56, 33, 118, -75, -75, 121, 99, 41]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-63, 28, 87, -21, -91, -65, 95, -77, 125, 51, 20, -118, -44, 28, -58, -73]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-106, -8, 111, 8, 41, -1, -42, 18, 42, 123, -119, 51, 100, -38, -92, 91]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[123, -43, -116, -110, 116, -57, -121, -120, 10, 58, 55, -95, -22, 93, 69, 78]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[61, 90, -75, 116, -80, -77, -88, -17, 113, 67, 0, 33, 23, 107, -20, 33]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[54, 109, 127, 12, 22, 55, -7, 58, -4, 86, 59, -112, -18, 115, -88, 103]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[117, 52, -89, 35, -45, 0, 65, 75, 7, 91, 15, -110, -13, 17, -19, 93]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-34, 18, -17, 91, 119, -86, -33, 114, -25, -23, 113, -18, -23, -12, 82, -42]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, -39, 101, 107, 15, 91, -12, 57, -47, -119, -13, 60, 43, -126, -57, 91]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-31, 82, -94, 36, -93, -43, -119, -90, -67, -13, -93, -67, 37, 22, -6, 85]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-81, -58, -123, -128, 26, -19, 65, 49, 62, -15, -57, -112, -32, -37, -21, -105]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, -39, 101, 107, 15, 91, -12, 57, -47, -119, -13, 60, 43, -126, -57, 91]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-16, -68, -46, -57, 39, 56, 112, -85, -49, 127, -4, 64, 47, 86, 19, -12, -100, 47, -56, -28, -7, 102, -16, -111, -125, 86, 74, -112, -88, -49, 19, -87, -1, -39, 101, 107, 15, 91, -12, 57, -47, -119, -13, 60, 43, -126, -57, 91]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, -39, 101, 107, 15, 91, -12, 57, -47, -119, -13, 60, 43, -126, -57, 91]");
        org.junit.Assert.assertNotNull(byteArray64);
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey48);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey48);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("DCAAA75B1CF149A7A56C84181A19CD1C7E00C62A648D9FFBD35F96E73411DE06C095F01DF548105840072A6573D25D2EB8C7B43EDDDA642D4F08445232D824A6C454263F0D769F95C92B077E57C7976EFB1DFA4C7A9CA92A5A7E5AE6D8A4C97DFFF37EF20AC50E55FBC16537CBF550F634B748741007EEEBC73764BA1185F1C260F97F94C704D8CFD57E0FD5AC53EE9B69F1184D3834AEC23011DEB82EC089070100A542C67CF2104261F7FE5B35CBD0702C0E96F1CE1AA85F17D23E6C0FE505B2015B82BCBC46B1F3014D6830B3C16E24642569C07C03C3653AB5235982A1E25BD078FEC674505BF7B92F6A03F3D066", secretKey48);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray55);
        byte[] byteArray60 = new byte[] {};
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey62);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey76);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey76);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey76);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey76);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-103, -25, 81, 5, 99, -116, 92, -91, 13, 72, 37, 121, -110, 102, 74, -2]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[55, -39, 122, 23, 89, 11, 14, -44, -33, 73, -103, 99, -12, 98, 73, -12]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[82, 3, 41, 27, -48, -68, -99, -91, 63, -18, -28, -75, 30, -87, 17, -96]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[66, 53, -96, -96, -97, 74, -94, 55, -99, 30, 88, -124, -44, 50, -123, -113]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-41, -104, -122, 68, 79, -40, -41, 102, -124, -56, -23, -50, 94, -66, -39, -4]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-77, -30, 57, -89, -6, -105, 0, 65, -31, -29, 29, 48, -52, 63, -42, 25]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-95, 43, 58, 37, 32, -53, 27, -11, 124, -43, 65, -71, -26, -86, 80, 101]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[39, 10, 10, -58, -55, 110, -28, -60, -104, -115, -32, -55, -73, 56, 73, -52]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, -100, -92, 18, -114, 42, -72, 90, -106, -90, 114, -47, 87, -34, -124, 7]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-79, -111, 7, -77, -50, 70, 85, 7, -48, 86, -38, 42, -22, -38, 84, -27]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-79, -111, 7, -77, -50, 70, 85, 7, -48, 86, -38, 42, -22, -38, 84, -27]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-102, 126, -67, -14, -13, 63, 80, 28, -6, -45, -29, -39, -74, -38, -77, 12, -53, -105, -86, 106, 35, 1, -124, -80, 125, -74, -58, 87, -59, -72, -107, 71, 0, -100, -92, 18, -114, 42, -72, 90, -106, -90, 114, -47, 87, -34, -124, 7]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "F1EE98B30B880DC0C95023722B58478F39CE468FD64DF8084B4B8D9735F63EF9562F6398DD2946052103513B892588CA04D38EDDD78CD8EFE48D1E9F6D069987FC1DC7BE636B3CD13C164B8D89A219B8B13697FB5A47944879FA38A4931792E5FEFC04C6D7F7FA28C02D033FB53BF00F1BC0007023FBE28E2A547B16A6DD0DDDB3A9CD0FD3939A4D45237BB20FB9DAB002D967BFAF5342C03C993EB10990D1571CB3D2448A5AFDBF47BF1A7939FEBDDC2D40EB5943C08216AB3213BC889349B5B55C1D98E65FB3728764D0DE83133578423AB6F66E381645CB053A13E466C5FCA8FBF9730C31A24AD72BAFDEC8D4DD048FB0F1F5E3522CE81768E8CE48213A922A47708A1795DD8BCEC96DC8DA5D8AA277047FAD7430A61320AEF5C1B6E35D784E74F29DB3082D53C3A340732F459EEDBBCDD1920BB71EBC1E6EE5BB92E3EC148C0AAEB8DF2921580FB13A30E2051EF2668AA6675F4F2D883D8975593AD2B837C59F470766FE85DF87AC711471CFB8711380F8F56548CE7FFF0FC6079059B44F26D3BD8689DDDDEF8B4C704A16D5A195619453F74F1089B79D71F1A7D8928BC91F4721F07EC3BFCA2D372885E7B46FD83F8A1775EFBC8C156DD43921AF2785984148A0287E6C4B41ABA9EB66C05338BD7F62CB618F44A2FD08C32BA5CE9A9DA1009CA4128E2AB85A96A672D157DE8407" + "'", str56, "F1EE98B30B880DC0C95023722B58478F39CE468FD64DF8084B4B8D9735F63EF9562F6398DD2946052103513B892588CA04D38EDDD78CD8EFE48D1E9F6D069987FC1DC7BE636B3CD13C164B8D89A219B8B13697FB5A47944879FA38A4931792E5FEFC04C6D7F7FA28C02D033FB53BF00F1BC0007023FBE28E2A547B16A6DD0DDDB3A9CD0FD3939A4D45237BB20FB9DAB002D967BFAF5342C03C993EB10990D1571CB3D2448A5AFDBF47BF1A7939FEBDDC2D40EB5943C08216AB3213BC889349B5B55C1D98E65FB3728764D0DE83133578423AB6F66E381645CB053A13E466C5FCA8FBF9730C31A24AD72BAFDEC8D4DD048FB0F1F5E3522CE81768E8CE48213A922A47708A1795DD8BCEC96DC8DA5D8AA277047FAD7430A61320AEF5C1B6E35D784E74F29DB3082D53C3A340732F459EEDBBCDD1920BB71EBC1E6EE5BB92E3EC148C0AAEB8DF2921580FB13A30E2051EF2668AA6675F4F2D883D8975593AD2B837C59F470766FE85DF87AC711471CFB8711380F8F56548CE7FFF0FC6079059B44F26D3BD8689DDDDEF8B4C704A16D5A195619453F74F1089B79D71F1A7D8928BC91F4721F07EC3BFCA2D372885E7B46FD83F8A1775EFBC8C156DD43921AF2785984148A0287E6C4B41ABA9EB66C05338BD7F62CB618F44A2FD08C32BA5CE9A9DA1009CA4128E2AB85A96A672D157DE8407");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-33, 51, 51, -124, 58, 90, -9, -116, -98, 124, -120, -102, -97, -115, 40, -99]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-13, 98, 55, -74, 54, -74, 6, 116, -77, -126, -19, 93, 4, -16, -45, 100]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-79, 10, -28, 55, 46, 4, 45, 20, -18, -40, 65, -40, 1, -34, -71, -33]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-36, -51, 124, -8, 86, -40, -126, 96, -90, 93, 40, 124, 57, -105, 58, 36]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-95, -56, -24, -37, 120, 85, -46, 124, 33, 95, -21, -3, -124, -13, 115, 13, 9, -46, -15, -12, 64, 0, -113, 76, -86, 65, -58, 20, 5, 122, -64, 66, -79, 10, -28, 55, 46, 4, 45, 20, -18, -40, 65, -40, 1, -34, -71, -33]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-76, -90, 22, 21, -125, -25, -44, 103, 37, 26, 57, -31, -115, 8, -31, -111, -45, -48, -121, 49, 57, -54, 8, -117, 91, -1, -114, -117, -50, -44, -24, -111, -79, 10, -28, 55, 46, 4, 45, 20, -18, -40, 65, -40, 1, -34, -71, -33]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-99, 5, -88, 97, 33, 64, -41, 102, 117, 52, -110, 95, 23, 87, 89, 18, 76, -128, -68, 80, -87, -45, 83, -126, -20, 120, -25, -63, 109, 17, -27, 118, 83, 61, 13, -43, -14, -33, 56, 43, 3, -13, -118, -35, -73, -54, -35, -27, -87, 64, -73, 104, -15, -4, 60, 117, 13, 0, -10, 93, 2, 87, 108, 48, 28, -1, 49, 38, 43, 103, 119, -111, -107, 107, -71, -117, -12, 55, -74, 59, -114, 110, 126, -124, 68, -87, -13, -19, 106, 23, -117, 29, 63, -20, 15, -116, -79, 10, -28, 55, 46, 4, 45, 20, -18, -40, 65, -40, 1, -34, -71, -33]");
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("C355C8EA1453E8130B3AB75E6958C99678EE3F5DBB662DCA3617E1BC9219F73F2DD69751AD2424D50371A2044B312A50", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[36, 119, 54, 1, 58, -109, 54, 117, 13, 67, 106, -61, -69, 83, 46, -56]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, -57, -79, 47, 25, 103, -35, 69, -50, -38, -126, -105, 43, 86, -18, 45]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-37, -120, 127, -8, -109, -51, 92, 84, 88, -124, -101, 73, -13, 31, -77, -31]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[36, 119, 54, 1, 58, -109, 54, 117, 13, 67, 106, -61, -69, 83, 46, -56]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[16, -85, -62, 73, -41, -1, -68, 31, 83, -3, 60, -87, -59, -104, 101, -10, -79, 18, 38, -119, -31, 7, 112, 92, -26, 9, -94, 122, 118, -107, -56, 126, 36, 119, 54, 1, 58, -109, 54, 117, 13, 67, 106, -61, -69, 83, 46, -56]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[25, -59, 28, -123, 110, -80, -72, 122, 24, -64, -71, -69, -103, -67, 39, -96, 45, -30, 20, 112, -44, 61, -51, 123, 79, -41, 120, -75, -80, -1, 86, -13, 36, 119, 54, 1, 58, -109, 54, 117, 13, 67, 106, -61, -69, 83, 46, -56]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[35, -47, -77, -110, -12, -118, 98, 53, 47, -51, -22, 54, 48, -54, -107, 109, 69, -37, 68, 40, 101, 99, 104, -19, 28, -95, 5, 52, -23, 98, 26, -7, -40, 19, -121, 78, 94, 35, -66, -4, -56, 41, -30, 91, 12, -9, -46, -111, 124, 98, -65, -115, 112, 0, 93, 104, 74, 125, -83, -69, 118, -48, 97, 118, -15, -45, 1, 36, 4, -74, 117, -94, 119, 34, 103, -17, -98, 10, 41, -74, -128, 119, 26, 57, 68, 11, 113, -44, 53, 9, -80, 118, 13, -57, 11, -117, 36, 119, 54, 1, 58, -109, 54, 117, 13, 67, 106, -61, -69, 83, 46, -56]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "23D1B392F48A62352FCDEA3630CA956D45DB4428656368ED1CA10534E9621AF9D813874E5E23BEFCC829E25B0CF7D2917C62BF8D70005D684A7DADBB76D06176F1D3012404B675A2772267EF9E0A29B680771A39440B71D43509B0760DC70B8B247736013A9336750D436AC3BB532EC8" + "'", str15, "23D1B392F48A62352FCDEA3630CA956D45DB4428656368ED1CA10534E9621AF9D813874E5E23BEFCC829E25B0CF7D2917C62BF8D70005D684A7DADBB76D06176F1D3012404B675A2772267EF9E0A29B680771A39440B71D43509B0760DC70B8B247736013A9336750D436AC3BB532EC8");
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("F1BA8F90A4CA813736832092E41CAFF86E12E6E1B6F61B1B631572FBA69E881F8D42345DCDDA102149B4BAB7E4949DABD2CC4AED97FDED039585F775991D2CF4234B093838271E518AD96C1887983FEFB129BBFBCC6118BFC0A4BA610348A44695BB0567F731709639A89C4FB8249D00B2E9664BA68E6142C74F0661EBBDA54877F3A04F9BC11195DC368BBC2BCDE2C1A6A8A642BE1087DBE008ADD5B2285F520FA482729AB2C1E32308897E1985D4AB99F1C57AC8AEB6E0FCB51C715742EADAB7372210091885939C3A9D23A6F574397DBFBC5ACD8D202D547BA279D0BF3DA38B5095CAC271172953841401CBC1D149", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[43, 52, 60, -93, 77, -102, 88, 71, -41, 90, -31, -116, 87, 70, 7, 83]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[52, 126, 99, 57, 57, -101, -64, -83, 67, -58, 57, -86, -2, 16, 105, -47, -109, 70, 69, -19, -26, 113, -93, -128, -48, -76, -117, -58, -19, -98, 97, 27, 21, -106, -8, -25, 6, 102, 64, -122, -63, -108, -60, -109, 96, -28, -55, -109]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-80, -81, 92, -44, -10, -72, -1, 121, 34, -49, -117, -53, -79, 41, -20, -14, -50, 56, 41, -78, -58, -91, -98, -38, 42, -104, -85, -46, -68, 50, 33, -128, -117, 109, -88, -43, -96, -93, -89, -103, -118, -116, 2, -104, 42, -56, -9, -85, 96, 11, 91, 41, -105, 62, -123, 113, -21, 6, 86, -36, -62, -101, -77, -109, -79, 54, -108, 107, -72, 6, -7, -76, 67, -13, 1, 13, -66, 33, 89, 76, -113, -27, 70, -20, -121, -118, 83, 13, 108, 11, -97, 20, -59, -108, 58, 26, 21, -106, -8, -25, 6, 102, 64, -122, -63, -108, -60, -109, 96, -28, -55, -109]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("56CB4A0BCDE09327B5C52D006F9E9F63EC0380EFF1FC44454F157BF18AB2204AB314624B0D4A402B86EECB0E36AC36557F4BDA764B46080BF10E3EAB6B438E7C03E0EC46868133632B06BFACE10D0128799DA6F1EB038301FDA8D088F5EAFBABC3F5F582B07D0FE862767A8AF41C8949AEE211FA4DAAD4C3DC8A13FF2FBF1103240C2CEA4C508D625800A7A9D32CAA045D14A8084A49EC983DACC58474E057F86AEFFB0F66F0E23D0E1FF85E20878AB158EE377489EF43BE607B72D9C6A1F48C7902B82DA8CB82FE33B0BF7376EA4F9601FC739E5708442B3CCBCD0D5119F598316A0864E7FD895A3292F06F0954AEF2", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("160A51A142B4E1F80D32E3BECE0E9CD12EA3EFFEA2CBC375929CBE58E02608A4DB584EA740390D500CA86001067EFDEB0C27C9F43DF12682EAA69C3688CED5A0CD9295102011BA04B43AA586562BB2890B17022895ED0922A0157D9789FB670EE902D3393ED626D3EF12A483E4D87008", secretKey10);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("30AEE7D29062D659B6B4F57B8A382733FB0E5220C36781BEAAB6B7D519F394DFBDAB3956EB5B0DB440EBEAA59F3453501ABA600C2DEF389A50D9E3884830838FFB42F5AF11E1A2D6AAC1B236BD4BEC3B9A131867BD9B5605AFD5392928AB755964D6AAC41992463B59BCD3717A4646DD217A340AC5CA3952FBA49DA239079562B5EA81E974C3F1CC9E33E0547E3D2AC4CF5F615051148284E39E06CAF2FF9C4905D2D1FF4C4C0C9411EC53BF295BC014", secretKey10);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("3AED7ED907E726C3273D7FC8110978BDA99FBE220FF129AD84913DF397B6C15C9E8781ECB402079177E3096BE77219E8ECEE29B7C55430429BAFC89D4F2D549F6BD4038B2BCBCE524490F5B0848798A5663CE10A6D8ACC688011EB8FD74FFBAB0DF92A502EB1D8AED68B578990B31C8B052187F86C9FAA20D8BC740B8FF75BAF99E753F4117894792732BE15A0655CA32E9BF3A67F151F2F9928D291E43A8C4267C4B903D94110E5AF360DC366BFAB7F0FF91BA3120A9D1C4DA255A657AE36AEB21A89AAC6CA6986D4C28A7342EB05EF87F45E3E8EE2CE280ED7D854721FCBE5384DCD6574DC1561738638D6AFC98AFD", secretKey10);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey10);
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[21, 86, -100, 64, -9, -7, -121, 65, -71, 19, -56, -93, 55, -85, -6, 91]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[96, -66, -23, -2, 71, 126, 36, -78, -102, 32, -63, 106, 46, -66, 80, 96]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[96, -66, -23, -2, 71, 126, 36, -78, -102, 32, -63, 106, 46, -66, 80, 96]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[61, 5, 66, 99, 126, -74, 49, 2, -59, 7, 89, -128, -80, 60, 45, 14, 66, 7, -68, -73, -80, 29, 114, 57, -46, 78, 35, 32, -99, 123, -115, -37, 21, 86, -100, 64, -9, -7, -121, 65, -71, 19, -56, -93, 55, -85, -6, 91]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[16, -65, -51, -36, -111, -83, -42, -50, 54, 91, -77, 12, -84, 42, -14, -9, 41, -92, 5, 4, -94, -54, -63, 29, -116, 97, 3, -62, -30, -117, 73, 78, 21, 86, -100, 64, -9, -7, -121, 65, -71, 19, -56, -93, 55, -85, -6, 91]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-77, -57, 74, -43, -83, 58, -120, 47, 8, -74, 58, 50, 21, -125, -5, -105, 88, -73, 9, -37, -41, -77, -58, -25, -121, -114, 78, 10, -17, 62, -68, 29, 46, -32, -70, 19, -112, 111, -59, -119, 105, 42, 102, 90, 29, -83, 51, 102, -21, 100, -108, 43, -15, -41, 25, -51, 44, -126, -79, -94, 41, 124, -35, -2, 84, 28, -109, 90, -8, 57, -73, 98, -11, -47, 100, -71, -2, 5, -58, 7, 78, -2, -123, 87, -104, 94, -121, 121, -117, -70, -43, -29, -115, -127, -86, 17, 21, 86, -100, 64, -9, -7, -121, 65, -71, 19, -56, -93, 55, -85, -6, 91]");
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey25);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("EACA603F6C3702AFF15917978DE510B99ECDD314A868720C166EEE2E28FF0212DDDC91DC8215D49CD6F698CC14FA8FB13DC3D8B7C017EDE31594E62E4584D8306C2F50F992C3C052E995196F8857F28A626B40C0078DA5AD3207258C24C458EC51768B970448F37E6FE4E3F7796DB4C9", secretKey25);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("F351DD37D09CAD6BFB1F382F0B708AFA9374BC536C79642D4DBD6AC9B925591B43309EEABC9C017465382B1AC87E662B14BA2BEA2698D97C1EA68AE4423732E17F2F526FC930BB40CFF1296DF991A80664CAF0F4C6B899358C9994EE5BED4879929A209ADD44404C1E95FD47779B8B06", secretKey25);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D4104CB642962213B1815B30115F5D90D693123F14E3F426C96883ED41DE208B9FEA0BE62344F24C5357363C4BB9E4585AE21BD7F598C5FD4A4C6914FBB6E76853232BFBF07EA306090D44A0E74CC1B029C3D5A3E0DE419AAAFC1A69BB10DDB1B5DF542A0AD4EF81EC2112BAEE0FEF884D7857D8C734370CCF09B525F7B4603AEC4F6A774773633FCEDA8BD7C5D94015EBF654AEA6599BB52C6059D0C88017D20105F14AA449E5FBED7F05A7E325FC0C49EDD506A0BE0A8A192620A258C516385E6CA6D4DC4A7DE1204C12901234942D6324F07575758406B62C2666AE924D86D92AF28576EE97BE8237F8EC94C4C7B", secretKey25);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("C07656168539468D6C898BFF389D6C192495C98DE9678E1BF0715491EB37C95EA405EB649BC8449C2990B1C06DD236A39DA38FB8934BFC2F8EFB4A99655505759C92D7D15878F38087E87B47B025E631E392DB6D40F9FD8C6849E878534A6E5022CA958B93DD5FB61E344C196EFFE798C609762A67454EBA212752171E17C40B8EDF9106BB0CAB6670F442568904840E3A12CF11C55AE078599FA3FA79847B397BE04119B092C3FADF65B05D11137C4057875FF1879F61F5EF10AE29FC7A8AB948A9511DADB20355FFE0CE1848C585A4045AB3F5FEE4AEC510FECDCECD123CCFE87560C1B8A9314C1D2FACDA341E6D8E", secretKey25);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[119, 117, 96, -81, -89, -28, 33, 111, 22, 31, 125, 22, -47, 76, -84, 16]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[42, -16, 91, 61, 84, 19, 122, -69, 10, -36, 86, -125, -124, 115, -2, 89]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[69, 33, 49, -6, -3, -62, -103, -127, -36, -40, 93, 11, 85, -66, 6, 125]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-116, 25, -46, 103, 38, -33, 29, 40, -46, -96, -51, -115, 97, 18, -111, 81]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[11, 46, 4, -67, 51, -10, 83, -124, -94, 108, 101, -20, 123, -43, -38, 51, 31, 58, 72, -81, 119, 9, 115, -93, -104, -13, -122, 24, 79, 77, -40, -115, 69, 33, 49, -6, -3, -62, -103, -127, -36, -40, 93, 11, 85, -66, 6, 125]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[69, 33, 49, -6, -3, -62, -103, -127, -36, -40, 93, 11, 85, -66, 6, 125]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-116, 25, -46, 103, 38, -33, 29, 40, -46, -96, -51, -115, 97, 18, -111, 81]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-45, 82, -94, -118, 36, -1, 102, 70, 58, 116, -117, -62, -121, -90, -94, -109, 64, -32, -48, 94, 43, -43, 113, 93, 121, -43, -21, 65, 108, 81, 29, 46, 69, 33, 49, -6, -3, -62, -103, -127, -36, -40, 93, 11, 85, -66, 6, 125]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-36, -20, -66, -50, -117, -71, -94, -86, 55, -39, -4, 11, 65, 25, 14, -27, 103, 115, -81, -58, 70, 127, -30, 26, -91, -75, -101, -98, 114, -84, -126, 96, 69, 33, 49, -6, -3, -62, -103, -127, -36, -40, 93, 11, 85, -66, 6, 125]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey21);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey44);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        byte[] byteArray50 = new byte[] {};
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey52);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("41A735EEF9CCEAE71F96AB5C1E49E12FE564CCDE22C1C25E62649CDA4E7C1269ACF88FFE5E4B58A92E25A180C9CBC0DE027858C951CD7787F5FD992FA0708ED9E2CE2E14073DD0E4F0D97A9DD20A20C0539C7C6A955A05045D747BD66823402D4EC98F6737E4995D1FF877A6DE9742C256E5B45A32C8AA849EA7A589D0C803C8C4C7479A14517C9A682257C15D3F5419BAD90E329E85A258B74393A829A0A056931AA6E8D75969F8F56D5E5C19553823B207460D73DF40856C021A6EE0EE4A3D724E04F6B6162EF291F8F9FFD0BE6F5DD09F3C444D5F215FBAD9322AC4BCA1297EC1B24C44BF5B5AA807561F71225DCF", secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey52);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[88, 79, -105, 25, -72, 98, -35, -15, 55, -56, -125, 118, 89, -44, 33, -37]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-50, 83, 29, -55, -26, 40, -23, 107, -13, -1, -42, 35, 84, -29, 58, -4]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-65, 78, -65, -54, -27, 64, 57, 86, -20, 82, -16, -115, -49, -60, 67, -17]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[66, 48, 46, 56, 49, 73, 96, 60, -16, 32, 98, -108, 45, 92, 65, -24]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[27, 42, 5, 120, -80, -127, 14, -94, 93, 0, 95, -52, -31, 34, 41, -6, 45, 61, -26, -123, 117, 90, -113, -35, 105, 61, 83, 64, -59, -59, -8, -100, -65, 78, -65, -54, -27, 64, 57, 86, -20, 82, -16, -115, -49, -60, 67, -17]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-81, -108, 8, -108, -47, 121, 89, 15, 81, 19, -124, -75, 56, -32, 40, 18, -24, 103, -16, 71, 56, -83, -115, 95, 65, 18, -4, 112, -116, -4, -32, -114, -65, 78, -65, -54, -27, 64, 57, 86, -20, 82, -16, -115, -49, -60, 67, -17]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, -116, -124, 124, 89, 88, -76, -67, -41, 124, 42, 90, 52, 18, -82, -39, -56, 72, 26, -105, 103, -7, -22, 94, 107, 51, 57, 14, 10, -55, 59, 120, 123, 100, 89, 7, -117, 124, -18, -121, -125, 16, -40, 56, 2, -122, 34, 90, 11, -35, -52, 20, 65, -32, -36, -11, 99, 38, 78, -17, -94, 51, -75, 89, -113, 43, 61, 38, 38, 21, -113, -103, -50, -54, 97, -87, 119, 11, 121, 111, -42, 44, 74, -60, -64, 106, 69, -71, 84, 31, -23, 58, -66, -6, -123, -32, -65, 78, -65, -54, -27, 64, 57, 86, -20, 82, -16, -115, -49, -60, 67, -17]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-87, -120, 15, -24, -64, -99, -78, 106, 82, 25, -36, -122, -126, 93, 1, -48, -38, -55, 39, 9, 83, -22, -88, -32, 56, 8, 92, -87, -17, 27, -7, 50, -65, 78, -65, -54, -27, 64, 57, 86, -20, 82, -16, -115, -49, -60, 67, -17]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-51, -68, -110, -112, -75, 98, 120, 59, -20, -76, -107, -41, 41, -35, 60, -95, 35, 99, -82, -125, 108, -109, 46, -98, -36, 34, -121, 27, 73, -19, -99, 34, -65, 78, -65, -54, -27, 64, 57, 86, -20, 82, -16, -115, -49, -60, 67, -17]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-13, 12, -74, 121, 101, 119, 119, 115, -81, 24, -3, -67, 82, 51, 115, 90]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 84, -2, 60, 54, -128, 39, -77, 3, -54, 36, -26, -28, -45, 66, 103, 41, -74, 116, -70, 70, -31, 92, 46, -42, -6, -13, 63, -113, -65, -54, -46, -8, -102, 34, -55, -126, -40, 94, 87, 107, -67, -74, -32, 43, 85, -112, 75]");
        org.junit.Assert.assertNotNull(byteArray57);
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        java.lang.Class<?> wildcardClass29 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[37, 99, 14, 36, -38, -64, 51, -38, -56, -18, -84, -33, -49, 16, 2, 11]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[71, 14, 95, -3, -86, 122, -109, 106, -87, -96, 24, -110, -122, -90, -57, -43]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-3, -57, 113, 89, 57, -28, -16, -14, -58, -38, 124, -100, -97, 36, 59, -34]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-56, 10, 103, 88, 19, 23, -43, 38, 57, -19, 39, 80, 99, -59, -47, 25, 107, 80, 79, 101, -78, -38, -30, 61, 72, 95, 62, -74, -47, 16, 104, -35, -72, -46, 50, 125, 111, 97, 99, 72, 63, -39, -53, -62, 41, 98, 83, 118, 100, 48, -108, -30, -109, 95, 65, -1, 92, 23, 119, -109, -41, 108, -78, -122, 13, -70, -92, 31, 11, -117, -90, 103, -15, -4, 38, -15, 87, 55, 5, 66, -106, 68, -90, -62, -10, 46, -104, -50, -30, -115, -3, 125, -26, 79, -44, 64, 71, 14, 95, -3, -86, 122, -109, 106, -87, -96, 24, -110, -122, -90, -57, -43]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[109, 82, -106, 95, -120, -100, 56, -96, -57, 31, 67, -1, -22, 127, 40, -19, 46, -32, -104, 63, -115, -71, -65, 70, 8, -99, 64, -112, 64, 59, 52, 53, 126, 99, 61, -98, -39, 109, -116, -92, 80, -22, -60, 101, -16, 7, 100, 27, 39, 101, -74, -96, 22, 18, -112, -123, -119, 10, -28, 10, 99, 64, 96, 52, -121, -11, -127, -102, 55, 91, -40, -75, 91, 75, 73, -113, 26, -96, 57, 39, -27, -27, 52, 6, 68, 116, 82, -9, 93, -32, -124, -91, -82, -20, 37, -58, 71, 14, 95, -3, -86, 122, -109, 106, -87, -96, 24, -110, -122, -90, -57, -43]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[71, 14, 95, -3, -86, 122, -109, 106, -87, -96, 24, -110, -122, -90, -57, -43]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey47);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey47);
        java.lang.Class<?> wildcardClass54 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-15, -103, 113, 108, -33, 99, 80, 28, 120, 81, -73, -100, -54, 40, 92, -34]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[76, 94, 69, 33, -38, -21, 101, 3, 24, -7, 100, -60, 25, 111, 106, -70]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-26, -39, 82, -1, 107, -117, 6, 10, -18, -65, -102, -77, -100, 116, 31, 6]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[51, -25, -4, -112, -34, 109, 60, -47, -47, 100, -26, -61, 96, -103, 41, 37]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[88, -81, -47, 1, 1, 52, -78, -35, -84, -12, -1, -3, -127, -2, 71, -20]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-72, 8, -29, 88, -37, 82, 105, 89, 28, 120, 22, -64, -112, 63, 69, -125]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-41, 48, -73, -14, -7, 7, -69, 0, 99, 79, -65, 89, 117, -68, -8, -28]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[17, -58, -74, -47, -5, -116, 111, 65, 107, -30, 18, -25, 23, 113, 39, -59]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[115, 124, 77, 61, -128, 50, 6, -126, -18, 80, -86, 96, 71, 103, -108, -86]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[8, -124, 58, 23, 0, 63, 40, 102, 64, -110, -55, 25, 41, 26, 87, -113]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[8, -124, 58, 23, 0, 63, 40, 102, 64, -110, -55, 25, 41, 26, 87, -113]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-58, -12, 39, 71, 123, -31, 97, -50, 96, 112, 53, -26, -42, -28, 27, -63, 76, 90, 16, -18, -52, -74, 15, -41, 38, -74, -84, -95, -101, 105, 24, 56, 115, 124, 77, 61, -128, 50, 6, -126, -18, 80, -86, 96, 71, 103, -108, -86]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("407691AFF933C3C5C4C3507FDC720F14353F74F368E591D565489EFBE5AAF13FB52355301586EAE5DC920779218FDE1C53B8A55E40FE04DB2E20D4400468039CA90BF956635A58E4202F722285A83DDD5DB7716F3345BEE254969C8C61FF6E7616C9DD5F8B41DC04D784057ED8198C7C", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey12);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[75, 21, -106, -31, 119, 103, 99, -126, -20, 1, 34, 79, 4, -65, 87, 35, -91, 30, 117, -89, -86, -93, 109, 7, 52, -18, -22, -60, -44, 11, -16, 24, -109, -93, -119, 87, 118, -121, 33, 49, 56, -95, 25, -1, 89, 17, -123, -90, 60, -45, 41, 81, -87, 69, 84, 123, -14, 75, 62, 76, -101, 63, -96, -59, 117, 36, 13, -60, 5, -36, -28, -82, 125, 57, 115, -40, -30, 20, -123, 34, 9, -51, -50, 32, 123, -12, 112, -54, -64, -91, 98, 49, -125, -102, 65, 65, 73, 1, 65, 84, 1, -4, 122, -99, 24, 109, -110, -4, -127, 39, 9, 33]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-48, 33, -113, 75, 57, 37, 24, 10, -5, -5, -103, -54, 44, 99, -28, -8, -34, 109, -33, 121, 39, 123, -61, 50, 117, 82, -100, -10, -117, -12, -52, 96, 73, 1, 65, 84, 1, -4, 122, -99, 24, 109, -110, -4, -127, 39, 9, 33]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "E032F40BE4F5851F98DA90194D61468594E325707645991679CD76E35E80AFC3281B92D805757BAE44FFEF5FCF1592FDD039AC25057F179BEC0BF98242B9FCBD95CDC3BFB7CA4F3B011C0B46AB348825FE7853B1839ADE6F6C07CE6289B3FC48A56BD3D66DA25402987DDF457AB242C067EDC0CC3788C985CE2C11CCE0236EDF13ECC9C223BA276B1B20D69137DEE4F814539BD92B3B964959A4310C4B03D85500624D02EB926C5EB67E6900AAD3779F0C9E8E59E19427A77DC14A2FF97BA44DEFF3063A7D2A16D13C2336DD5DB94F9D26292218A2ACC933B7902B904FD630934901415401FC7A9D186D92FC81270921" + "'", str7, "E032F40BE4F5851F98DA90194D61468594E325707645991679CD76E35E80AFC3281B92D805757BAE44FFEF5FCF1592FDD039AC25057F179BEC0BF98242B9FCBD95CDC3BFB7CA4F3B011C0B46AB348825FE7853B1839ADE6F6C07CE6289B3FC48A56BD3D66DA25402987DDF457AB242C067EDC0CC3788C985CE2C11CCE0236EDF13ECC9C223BA276B1B20D69137DEE4F814539BD92B3B964959A4310C4B03D85500624D02EB926C5EB67E6900AAD3779F0C9E8E59E19427A77DC14A2FF97BA44DEFF3063A7D2A16D13C2336DD5DB94F9D26292218A2ACC933B7902B904FD630934901415401FC7A9D186D92FC81270921");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[107, 23, 65, -17, -22, -10, -78, -33, -18, -125, 84, -64, -71, 76, 39, 106]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-113, 52, -28, 6, -57, -38, -70, 23, 86, 76, -97, 54, 125, -101, -29, 44]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-57, -38, -40, 104, -50, -86, 14, 36, -18, -103, 30, -40, 93, -102, 75, 27, -10, 110, 110, 120, 100, 51, -74, -92, 52, 13, -112, -22, -38, -109, -79, 22, 107, 23, 65, -17, -22, -10, -78, -33, -18, -125, 84, -64, -71, 76, 39, 106]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-3, 16, -60, -34, -88, 65, -14, -96, 41, -114, 87, -42, -31, 125, -3, -128, -95, -119, -107, -23, -125, 99, -74, -38, 107, 47, -97, -87, -66, -50, -35, 80, 107, 23, 65, -17, -22, -10, -78, -33, -18, -125, 84, -64, -71, 76, 39, 106]");
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey57);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey57);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey57);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey57);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("46A158D3EEEE08EAF2706FF2F95DBD4028CB52AE04C71CFBE6548D30EB69AEEB9CBD5BC45857E9000E80CA2B95CAC8FC", secretKey57);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey57);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("C07656168539468D6C898BFF389D6C192495C98DE9678E1BF0715491EB37C95EA405EB649BC8449C2990B1C06DD236A39DA38FB8934BFC2F8EFB4A99655505759C92D7D15878F38087E87B47B025E631E392DB6D40F9FD8C6849E878534A6E5022CA958B93DD5FB61E344C196EFFE798C609762A67454EBA212752171E17C40B8EDF9106BB0CAB6670F442568904840E3A12CF11C55AE078599FA3FA79847B397BE04119B092C3FADF65B05D11137C4057875FF1879F61F5EF10AE29FC7A8AB948A9511DADB20355FFE0CE1848C585A4045AB3F5FEE4AEC510FECDCECD123CCFE87560C1B8A9314C1D2FACDA341E6D8E", secretKey57);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey81);
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey81);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        byte[] byteArray87 = new byte[] {};
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray87);
        javax.crypto.SecretKey secretKey89 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray87, secretKey89);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey89);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey89);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey89);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("41A735EEF9CCEAE71F96AB5C1E49E12FE564CCDE22C1C25E62649CDA4E7C1269ACF88FFE5E4B58A92E25A180C9CBC0DE027858C951CD7787F5FD992FA0708ED9E2CE2E14073DD0E4F0D97A9DD20A20C0539C7C6A955A05045D747BD66823402D4EC98F6737E4995D1FF877A6DE9742C256E5B45A32C8AA849EA7A589D0C803C8C4C7479A14517C9A682257C15D3F5419BAD90E329E85A258B74393A829A0A056931AA6E8D75969F8F56D5E5C19553823B207460D73DF40856C021A6EE0EE4A3D724E04F6B6162EF291F8F9FFD0BE6F5DD09F3C444D5F215FBAD9322AC4BCA1297EC1B24C44BF5B5AA807561F71225DCF", secretKey89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey89);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[123, -41, 104, -57, -122, -15, 70, -81, -115, -122, -60, -25, 30, 105, -74, -5]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-90, -71, -119, 85, -57, 11, -45, 126, -36, 111, -42, -26, -4, -23, 45, 9]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[76, -45, -78, -81, -128, 89, -76, 68, -90, -100, 26, -31, 73, -115, -84, -13]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[120, -26, 87, 6, 46, -98, -26, -36, -93, 85, 114, 41, 88, -52, -64, 55]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-67, -58, 61, -58, -122, 44, 119, -114, -56, -65, -57, -79, 87, 0, 28, 30]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-46, -41, -67, -45, -6, -93, -25, -112, 83, -56, 52, -31, -64, -2, 46, -115]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-53, 71, 60, -122, -25, 105, 78, -67, 76, -46, -69, -74, -75, -12, 107, 108]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-86, -81, -29, -58, -81, -63, 51, 43, 1, -33, 92, -18, 82, -17, -49, 92]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[102, -110, 64, 60, 88, 73, 87, 78, -126, 68, -120, 80, -44, 100, 61, 95]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[77, -5, -111, 41, 51, 48, 113, -18, -92, -56, -78, 62, 46, 33, 109, -43]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-53, -89, 28, 81, 38, 8, -28, 4, 38, -100, 109, -13, 20, -44, -104, 51]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[102, -110, 64, 60, 88, 73, 87, 78, -126, 68, -120, 80, -44, 100, 61, 95]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-122, -125, 20, 82, -123, -48, 120, 52, 3, -114, -81, -121, -77, 23, -49, 55, 13, 31, -45, -22, -31, -127, -4, 39, -121, -6, -121, 120, 46, -82, -106, -93, 102, -110, 64, 60, 88, 73, 87, 78, -126, 68, -120, 80, -44, 100, 61, 95]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-87, -24, -26, 27, -17, -29, 81, -43, 97, -32, 25, -68, 32, -96, 73, 66, -22, 124, -60, -76, 102, 75, -61, 56, 88, -24, 53, 89, 52, 79, 78, -38, -107, -71, -32, -126, -59, -16, -40, -87, 43, 22, -108, -82, 105, 120, 113, 19, -38, -89, 54, -72, 63, -47, 54, 29, 32, -63, 12, -107, -44, -71, 25, 86, 34, -53, 107, 18, -23, 121, -85, 5, -25, -11, 54, 42, 10, -23, -17, 7, 30, 53, -124, -110, 8, -122, -78, -24, 100, 116, 16, -15, 64, 20, 120, -21, 102, -110, 64, 60, 88, 73, 87, 78, -126, 68, -120, 80, -44, 100, 61, 95]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-105, 51, 125, -47, 70, 7, 108, 57, -13, 12, -62, -122, -24, -62, -2, 58]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(secretKey89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[78, -120, 8, 96, 116, 52, 85, 58, -48, -52, -103, -45, 7, 25, 41, -11, 31, 108, -75, -69, 45, -64, -80, -89, 84, 47, -9, -28, 15, 95, 21, -123, 72, -83, -76, 50, 61, 73, -106, -3, -89, 38, -31, 51, 27, 2, -111, -16]");
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey36);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey36);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("45AC629B1599BBF8D6F5594B877D8B4BBCC89E2C3891435E151277E3E4290D327B77DE9F3AAF37E4922662EB2FEB94DF", secretKey36);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey36);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey53);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey53);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("8358BFDDB3594E935AEEAB7B623E7765", secretKey53);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("85EE33B151E4F868FDFCE144E0809E7B9A7B8F3EEA5B6644158AC43217DA6927A071D7D360B55BE2CB977D0CAE96BEC8", secretKey53);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[49, 61, -22, 61, -47, -40, 122, -87, 44, 22, 90, 89, -93, 13, -127, -47]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-40, -6, 32, 50, 41, -53, 86, -33, -14, 26, 90, 102, 68, -34, -26, -14]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-44, -97, 12, 10, 87, -115, 21, -67, -30, 26, -119, 61, -65, -48, -62, 35]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[72, 17, -114, 19, 6, 123, 16, 56, -121, 95, -75, -6, -29, -19, 90, 125]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[2, -3, -112, 100, 43, -120, 22, 121, -92, 54, -64, 72, -56, -110, 10, -69]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-10, 78, -93, -68, 43, 10, 64, -125, 80, 6, 100, 26, 34, 14, -114, 123, 97, 106, 92, 70, 14, -56, 46, -118, -10, 17, -61, 112, -64, 26, 55, 118, 72, 17, -114, 19, 6, 123, 16, 56, -121, 95, -75, -6, -29, -19, 90, 125]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-36, -70, 79, -53, 97, 88, 109, 104, 24, 106, 22, 91, 14, 12, 74, -105, -58, -22, -116, -13, -86, 23, 50, 26, 47, -41, -127, -80, 24, 62, -100, 113, 72, 17, -114, 19, 6, 123, 16, 56, -121, 95, -75, -6, -29, -19, 90, 125]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[16, -108, -60, 109, 64, -13, -46, 51, -14, 53, -52, -40, -121, -100, -99, -23, -56, -101, -80, -80, -94, 4, 120, -105, 42, 49, -59, -31, 92, 108, -105, -105, 33, 25, 49, -68, 10, -46, 13, -57, 63, -65, 96, 47, 51, -53, -83, -81, -85, -29, 98, -93, 126, -22, -102, 14, -39, -88, 37, 64, 99, 105, -103, -93, 3, -21, -108, -50, 125, -108, 108, -121, -113, -40, 4, 55, -114, 25, 55, 66, 41, -95, 63, 5, 117, -39, 23, -90, -54, -37, -121, -75, -109, -48, -82, -93, 72, 17, -114, 19, 6, 123, 16, 56, -121, 95, -75, -6, -29, -19, 90, 125]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-15, -17, -4, -38, 96, -79, 34, -106, 113, -117, 101, 55, -101, 53, 125, -124, -98, -5, -54, -43, -57, 11, -10, -112, 22, 62, -96, 74, -96, 38, 4, -30, -55, -15, -56, 42, 114, -96, 27, 13, 125, 47, -106, 53, 52, -96, -107, -79, -9, 22, -2, -47, -91, -64, 74, 94, 105, 37, -46, -33, -56, 8, 85, -57, -80, 15, 62, 44, -19, 39, -65, -82, 95, -122, 65, -95, -27, 26, 36, -124, -87, -124, 111, 28, -37, -5, -119, -91, 58, 50, -66, -100, -66, -45, -21, 62, 72, 17, -114, 19, 6, 123, 16, 56, -121, 95, -75, -6, -29, -19, 90, 125]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-121, 106, -55, -86, -44, 68, -51, 6, 76, -52, -111, 3, 88, 118, -34, 78]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-68, 105, -104, -89, -41, -127, 72, -68, -67, 91, 116, 10, 85, -85, -19, 84]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[94, -77, -66, 58, -54, 51, 38, -13, 100, 1, 48, 64, -104, -115, -38, -11, 49, 25, 97, 110, 46, -60, -42, -32, -50, 60, -94, -98, -68, 75, 116, -39, 77, 28, -74, 69, -94, -89, 31, 88, 9, -40, 113, 64, 20, 125, 79, 72, 123, -47, -7, -12, -94, -58, 7, -62, 117, 116, 50, -10, 11, -122, -108, -14, 121, -108, 104, -12, -54, 99, -105, -77, -41, -19, 16, -127, -33, -93, 46, 92, -93, -21, -77, -39, 37, 43, -93, -63, -13, 98, -88, -116, -115, -72, -102, -58, -121, 106, -55, -86, -44, 68, -51, 6, 76, -52, -111, 3, 88, 118, -34, 78]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[64, 117, 19, -27, -93, -125, -116, 57, -52, 15, 126, -40, 92, 58, 27, -65, 19, 100, 29, 121, 24, -50, -43, -67, 105, 97, 63, 21, -34, 114, 0, 110, -121, 106, -55, -86, -44, 68, -51, 6, 76, -52, -111, 3, 88, 118, -34, 78]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-106, 86, 31, 84, 12, -96, 44, -96, 33, -29, -78, -119, -11, -83, 44, -42, -117, 39, -33, -100, -17, 98, 21, -9, -20, 34, -71, -34, -10, 59, -90, 28, 12, -16, -101, -25, 119, -24, 65, -97, -57, 113, -50, 107, 16, 114, 43, 41, 74, 34, 27, -66, 104, -43, 65, 100, 116, 77, 28, 12, -48, 88, -96, 83, -2, -56, -37, -42, 105, 7, -33, -89, -108, 53, -102, -54, -67, 20, 34, -63, -125, -70, 58, -93, -19, -16, -118, 6, 114, 118, 2, 124, -78, 71, -103, 20, -121, 106, -55, -86, -44, 68, -51, 6, 76, -52, -111, 3, 88, 118, -34, 78]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[31, -83, -103, 53, 97, 50, 69, -73, 51, -18, 22, -22, -75, 59, -105, -48, 69, 79, -49, 47, -49, 38, -7, 42, 44, -97, -100, -124, -87, -41, -99, -18, -121, 106, -55, -86, -44, 68, -51, 6, 76, -52, -111, 3, 88, 118, -34, 78]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-49, -96, -35, -29, 109, -41, 26, 81, 73, 32, -54, -18, -61, 77, -18, 19, 65, 20, 120, 100, 79, -128, -80, -84, -21, -86, 81, -23, 99, -15, -118, 11, 124, 71, -46, 53, 49, 29, 42, -79, -44, 78, -55, 46, -73, -76, 3, 68, 31, 101, -4, -22, 37, -37, 97, -112, 7, -15, -27, -95, -74, 50, 64, 97, 122, 41, -128, 93, -69, -18, 96, -3, -94, 50, 10, -23, -89, 56, -65, -39, -103, 43, -95, 20, 37, 93, -126, 32, -83, 118, 88, 123, -39, 78, -105, 17, -121, 106, -55, -86, -44, 68, -51, 6, 76, -52, -111, 3, 88, 118, -34, 78]");
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("246EF612B83FB6FAAF652F09C0191B93538B75E8E468BA0EF50F7AACC5E05A5708DC714E5EDB5E8378FDEF828B24775C", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("D240F7F4DA05EDD42602F59D6EFB5E1A", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("D0076376D6DE26ADC2CD52C449181D31", secretKey8);
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[120, 32, -108, -53, -117, -77, -41, 22, 104, -35, 101, 13, -24, 43, 52, 48]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-3, -105, -51, -124, -124, 10, 87, 25, 118, 28, 108, 42, -110, -95, 43, 29]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-3, -105, -51, -124, -124, 10, 87, 25, 118, 28, 108, 42, -110, -95, 43, 29]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-121, 61, 118, -13, -113, -45, -92, -63, -43, -31, -72, 27, -31, -59, 16, -113, -15, 22, -45, -88, 95, 84, -82, -28, -27, 11, -83, 102, -25, -105, -90, -39, 120, 32, -108, -53, -117, -77, -41, 22, 104, -35, 101, 13, -24, 43, 52, 48]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[14, 9, 39, -73, -98, 7, -53, -104, 16, 118, -79, 48, 86, -118, 7, -80, 75, -117, -73, 113, 117, 84, 126, 42, -99, 37, 53, -53, -125, -20, -80, -6, 120, 32, -108, -53, -117, -77, -41, 22, 104, -35, 101, 13, -24, 43, 52, 48]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[46, 120, 39, 45, -69, -83, -80, -74, -7, -100, -123, -73, 19, 89, 37, -41, -72, -53, 43, 99, 63, -68, -57, 57, -40, 80, 105, 60, -74, 120, -70, 97, 120, 32, -108, -53, -117, -77, -41, 22, 104, -35, 101, 13, -24, 43, 52, 48]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[9, 67, -111, -83, 123, -76, 78, -113, -117, 35, 22, -128, 97, 110, 50, 122, -122, 102, -67, -17, 110, -29, -23, -31, 79, 89, 34, -45, -44, 70, 65, -28, 120, 32, -108, -53, -117, -77, -41, 22, 104, -35, 101, 13, -24, 43, 52, 48]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-63, -115, 111, 63, 87, -101, -100, 45, -107, -85, 73, -79, 30, 59, 96, -55, -110, -127, -59, -89, 27, 94, 20, -62, -123, -25, 25, 55, 104, 54, 45, 52, 120, 32, -108, -53, -117, -77, -41, 22, 104, -35, 101, 13, -24, 43, 52, 48]");
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey87);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey87);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("ACD7F17C614202A0F2C8B2DA42C15732", secretKey87);
        byte[] byteArray97 = com.thealgorithms.ciphers.AESEncryption.encryptText("0F8E32C8F777FEC0F4ACB78AD1BBA65D3CD5B6F8356B31C6EF957C7C546A3FD5E5F5ACA3AA39C7D5BC58BEF1A82E5DC47B5C1112E5C39145E084568E86D212172E51343026B6098F243A4E6C22188501390C653E452EACADD8EFB90CA0E2C312E8D006E11147C27ABFCAEED87AC370829AFFBB89226428978B58F9BCA9EE6F90FEF28A3FEAE33CC93AFBE93D88E6FF4D26ACB17216059DC8A9B028690E99410E5253FD3A181162DD7A91E9A3A2D39A49CFBCD6D4C6B39590EDF57F29ABF3F7685405F2715EACFFEECE6B5F98BE51ABFF2442687E30BF6305F384E3BE57DF43F03D8622C63D640835FD8741D0C69FDC24", secretKey87);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[21, 120, -36, 94, -5, -10, 103, 74, 75, 84, -6, 2, -3, -16, 62, 42]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[45, 24, -48, 54, 107, 60, 74, 79, 113, -5, 78, -103, -44, -15, 36, -124]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-94, 26, -114, 24, 71, 65, 6, 32, 44, -114, 102, 125, -92, -107, -94, 50]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-13, -120, 32, 87, -93, -33, -84, 4, -85, -99, -89, -11, -67, 3, -43, -69]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 99, 5, -16, 122, 52, 126, -95, -6, -5, 104, 125, -82, 75, 102, -31]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-60, -16, -121, -127, 14, 84, -76, -87, -77, -58, -62, -127, -12, 127, -52, -94]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-96, -118, 116, -21, 76, -56, -76, 66, 127, -72, 71, 46, -53, 72, -98, -117]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[34, 88, 14, -94, -103, -125, 68, 60, 28, 51, -7, 120, -100, -24, -108, -17]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-95, -91, -67, -88, -127, 68, -53, 84, -72, -97, -88, -106, 82, -127, -59, -90, 65, 54, 4, -126, -6, 8, 40, 82, -9, -99, 77, -23, -51, 16, -1, -47, -96, -118, 116, -21, 76, -56, -76, 66, 127, -72, 71, 46, -53, 72, -98, -117]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-96, -41, 89, -58, -71, 63, 1, 28, -57, 126, 84, -51, -126, 71, -112, 19]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-49, -16, -103, 110, -41, -38, 8, 75, -107, 15, -16, 9, 67, 105, 76, -122]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[82, -60, 20, 11, -83, 108, 4, 31, -7, -44, 76, 31, -67, -22, 47, 107]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-33, -108, -112, -65, -88, -104, -84, 123, 116, 118, 98, -118, 63, -81, 109, -121]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1, 55, 84, -68, -45, -65, -103, -47, -101, 26, -79, 91, -57, -36, 0, -47]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[82, -126, 84, 38, -79, 40, 75, 84, -50, 101, 18, 73, -111, 118, -42, 100]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[107, -8, 31, -118, -36, 103, -110, -99, -111, 25, 67, -52, -83, 65, 38, -76]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-128, 37, 14, 87, 103, 42, 51, 17, 89, -48, 109, -9, -91, 63, 8, -24]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[59, -47, -11, -36, -43, -41, -50, -68, -128, -113, -80, 9, 110, -117, 65, 19, -64, -104, 7, -71, -42, -22, 54, 2, 23, 6, -77, -83, -117, -13, 5, 81, 107, -8, 31, -118, -36, 103, -110, -99, -111, 25, 67, -52, -83, 65, 38, -76]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-128, 37, 14, 87, 103, 42, 51, 17, 89, -48, 109, -9, -91, 63, 8, -24]");
        org.junit.Assert.assertNotNull(byteArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-2, -64, 81, 34, 41, -94, -62, -102, -19, -89, 107, 7, 41, -25, -113, 51, -25, -22, 32, -113, 76, -25, 52, -94, -83, -78, -128, -29, -75, -19, 53, -65, 107, -8, 31, -118, -36, 103, -110, -99, -111, 25, 67, -52, -83, 65, 38, -76]");
        org.junit.Assert.assertNotNull(byteArray97);
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey29);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey29);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey29);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[21, -128, -33, -24, 86, 115, -110, 15, 106, -9, -25, -117, 5, -17, 31, 50]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[118, 32, 67, -99, -5, -93, -89, -121, 94, -17, -11, -123, 38, 115, -125, 84]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[99, 99, 22, 127, 83, -13, 20, 94, 20, -68, 37, -63, 121, -4, -54, -45]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-32, -39, -63, 29, 97, 81, 7, -75, -80, 80, -91, -70, -23, -120, 44, 36]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[118, 32, 67, -99, -5, -93, -89, -121, 94, -17, -11, -123, 38, 115, -125, 84]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-53, 71, -20, 1, -71, -34, 92, -50, 120, 114, 62, -80, 18, -77, -110, -50, 68, 69, -5, 97, 80, 95, 86, 22, 47, -105, 22, -104, 114, 64, -91, 109, 118, 32, 67, -99, -5, -93, -89, -121, 94, -17, -11, -123, 38, 115, -125, 84]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "D014C241F916120846E07BA0E0860DBD0CA27E56FEC51A8C40A5511278C319C05CD1B44CF2D6BCBFE2321C943BB1BA1FC8AEDC1251B9E8673CA8E841DADB51A2568D552514CC5C7C094DA1383A682CA6EC43061400C1EF196308F203BDA0EBC14D7BC175A151B2AF0F4F7414E9A98D3AD80D666FFB806D732649802F56E29F2F7DC7AA2EA28009AA83502E1FD752D3A55A1FED77EE00574AB88A27B7A8C7E9A2929661ECF55CF7D64EE836D44AC8146D9B8C3D388C6048CFC00A31110DE73674C9A86817F1218DF6B7393781C2C48D9A12CB014C0AEF61FA3C86D8C5416A5BFF7620439DFBA3A7875EEFF58526738354" + "'", str37, "D014C241F916120846E07BA0E0860DBD0CA27E56FEC51A8C40A5511278C319C05CD1B44CF2D6BCBFE2321C943BB1BA1FC8AEDC1251B9E8673CA8E841DADB51A2568D552514CC5C7C094DA1383A682CA6EC43061400C1EF196308F203BDA0EBC14D7BC175A151B2AF0F4F7414E9A98D3AD80D666FFB806D732649802F56E29F2F7DC7AA2EA28009AA83502E1FD752D3A55A1FED77EE00574AB88A27B7A8C7E9A2929661ECF55CF7D64EE836D44AC8146D9B8C3D388C6048CFC00A31110DE73674C9A86817F1218DF6B7393781C2C48D9A12CB014C0AEF61FA3C86D8C5416A5BFF7620439DFBA3A7875EEFF58526738354");
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey58);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey67);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey67);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey67);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey67);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("73912D453669B7FE81F32940C313724166866F2175F958719DB06EACDD4B5B281CDFE84185F2C4749276BA8BA5DBD8CF2E04DD8ED74819514EFAF9BC4E90AF512FCF0DFE37924499911E8A60792941EBA04320836BF21CEADDDA3D50DE7CD3D4D05E7829B393DF4225B293463740D538", secretKey67);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("\006\ufffd\ufffd\t\ufffd\023S\031\ufffd\ufffd}+", secretKey67);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("8A63475DC16C9A7832F3B3C0D832D4B0B1F8546F91A670DF5643C79FE1AF35990DE90750B0A86B9D05F661059AF7FFFA", secretKey67);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("613F059B097269FEEB292292840FFCD7DCF3166F234D14BCEE3E3C8449BB692CFE4342D41089B6ADDB86DAB0A52CD45B", secretKey67);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("083161702AB8550A89A7DD9B75AB8CD0", secretKey67);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("A85EEBBCD787D3EFFE92687B99D166ECAD0EB36BE3D836513058D3E0DB95BFFD4CEBDBF725A024182EA9F942E6DFFE05DF1657E6F209B91DD38606D31BC3FD0671592F39ACA7DF11DCF13D1A07488324EEDE4AF50EC3E10F3137169C5F334355468B739943C6FD32565FB19FBE8A3BB9", secretKey67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey67);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-25, 28, -88, -6, -82, 73, -2, 87, -110, 62, -14, -9, 108, -120, -31, 38]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[103, 73, -99, -113, -81, 117, 115, -89, 57, 8, 75, -40, 67, 96, 26, -56]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-105, 71, 20, 78, 87, -48, 18, 20, -7, -115, -6, 34, 101, 111, -70, -43]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-25, -27, 88, 30, -75, -29, -63, 107, -76, 47, -4, 60, 101, 99, 29, 56]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[5, -64, 11, 127, -56, 69, -32, 108, 11, 2, 121, 60, -50, 117, 20, -118, -109, 70, -77, 28, 118, -84, 32, 65, -30, 14, 126, 19, 47, -81, -105, 11, -105, 71, 20, 78, 87, -48, 18, 20, -7, -115, -6, 34, 101, 111, -70, -43]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[86, -120, 46, 46, -119, 104, -86, 71, -59, 69, -1, 103, 88, -70, 111, 103, -31, 69, 4, 36, -58, -45, -20, 25, -117, 114, -24, 69, -99, 77, 61, -84, -105, 71, 20, 78, 87, -48, 18, 20, -7, -115, -6, 34, 101, 111, -70, -43]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 85, 4, 52, 38, 124, -102, -44, -33, 23, -83, 39, -89, 19, -68, -89, 70, -120, -52, 35, -79, -83, 46, -111, 123, -60, 96, -33, -50, -127, 95, 74, 46, -57, -71, -40, -56, 114, 103, -30, 30, 95, -81, -95, 92, -56, 115, -72, 104, 55, 52, 78, -77, 98, 107, 16, -36, -68, -48, 27, -107, 122, 76, -106, 84, -80, 45, -101, -14, 21, 116, 86, -81, 77, -4, 5, 127, -98, -54, 38, -67, 124, -60, 25, 71, -35, 126, 126, 68, -69, 46, 2, 1, 126, 56, -105, -105, 71, 20, 78, 87, -48, 18, 20, -7, -115, -6, 34, 101, 111, -70, -43]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[92, -47, 117, -51, -26, 76, -91, 44, -23, -119, -41, -29, 75, -25, -65, -76, 86, 34, 88, -2, -51, 98, 22, -90, -56, -42, -12, -17, 83, -118, -32, -72, -105, 71, 20, 78, 87, -48, 18, 20, -7, -115, -6, 34, 101, 111, -70, -43]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-105, 71, 20, 78, 87, -48, 18, 20, -7, -115, -6, 34, 101, 111, -70, -43]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[36, -110, -35, -62, 98, 13, 11, 49, -78, -91, 39, 105, -76, -89, -25, 68]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-11, -28, 23, -71, -121, -101, 121, -121, -21, 9, 121, 7, 74, -8, -94, -124]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[96, 45, 20, 94, 40, -32, -16, 50, -78, 39, -31, -18, 113, -114, 56, -27]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-91, 7, -116, -55, 71, 68, -88, -93, 77, -34, 9, -5, 30, 31, 52, 48]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-71, 25, -92, -115, 112, 68, 110, -92, 72, 115, 59, -31, 87, 43, -82, -99]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[114, 23, -30, -52, 94, 35, 32, -95, -81, 78, -20, -18, 66, -13, 71, 25]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[114, 23, -30, -52, 94, 35, 32, -95, -81, 78, -20, -18, 66, -13, 71, 25]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-118, -87, 59, -33, -65, -46, -14, 91, 91, 73, -125, -33, 30, 27, -116, -109, -63, 18, -50, -115, -114, 93, 27, -128, 53, -6, 7, 112, -108, 43, 44, 2, -71, 25, -92, -115, 112, 68, 110, -92, 72, 115, 59, -31, 87, 43, -82, -99]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-99, 104, 126, -103, 13, -103, -2, -98, 92, 115, 127, 8, 15, -113, 107, 56, -57, -47, -56, 36, 86, 27, -88, -71, 28, 5, 17, 14, -61, 49, 41, -106, -71, 25, -92, -115, 112, 68, 110, -92, 72, 115, 59, -31, 87, 43, -82, -99]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-29, -76, 4, -48, 125, 13, 6, -9, -108, -91, 30, -72, 0, -66, -83, -108, 92, 52, -58, -80, 106, -95, -56, 42, -34, -20, -79, -101, 4, -2, 78, -43]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-61, -110, 82, -70, 91, -99, -91, 32, -61, 91, -110, -30, -19, -10, 95, 15, -101, 95, 29, -53, 73, -46, 43, 104, 79, 3, -39, 23, -54, 33, 126, -79, 13, 11, -20, -117, -6, 26, -92, -28, 43, -45, -98, -86, 26, 37, 112, 108, -110, 20, -44, -61, 127, 31, -22, -32, -96, 110, 16, 27, -16, 7, -9, 106, 119, 53, -52, -64, 54, 107, 1, -78, 36, -37, -100, 93, -55, 50, 116, -23, 114, -81, 115, 100, 34, -38, -40, -52, -73, -87, 48, -80, 90, -109, -93, 98, -71, 25, -92, -115, 112, 68, 110, -92, 72, 115, 59, -31, 87, 43, -82, -99]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[57, -60, 83, -79, 113, 38, 34, -59, 59, -123, -6, -15, 90, 116, 74, -1, -113, -119, -43, 48, 24, 125, -97, 34, 54, -67, 80, -80, -120, -22, -60, -71, 49, -1, -68, -55, 50, 2, 14, -44, 25, 125, 85, -113, -74, 86, -34, 82, -128, 39, -78, -32, -115, -60, -26, 64, 91, 48, 20, -86, 105, -2, 44, -23, -5, 22, -101, -60, -22, 75, 66, -76, 8, -73, -38, 109, -96, -71, -43, -48, 93, 35, -77, -100, 69, -73, -53, -52, 89, 55, -91, -37, -29, 82, 56, -6, -71, 25, -92, -115, 112, 68, 110, -92, 72, 115, 59, -31, 87, 43, -82, -99]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-14, -1, -107, 40, -94, 92, 55, -53, -40, 117, 115, 39, 35, 125, 21, -106, -78, -120, 92, 41, -126, 52, -119, 40, 49, -9, -3, 7, 76, -21, 6, 32, -71, 25, -92, -115, 112, 68, 110, -92, 72, 115, 59, -31, 87, 43, -82, -99]");
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.Class<?> wildcardClass15 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[106, 58, 63, -55, -112, -123, 6, 41, -40, 103, -74, 52, -80, -103, 109, 9]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[61, 0, -54, -113, 119, -100, 54, 91, 91, -26, -100, 68, 30, -65, -21, -65]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[64, -102, 24, -51, -94, -50, 124, 125, -23, 21, -114, 16, -7, -94, 100, -24]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[106, 58, 63, -55, -112, -123, 6, 41, -40, 103, -74, 52, -80, -103, 109, 9]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[101, -116, 61, 109, 20, 89, 113, 59, 59, -39, -42, -123, 111, -124, -81, -26, -30, 65, -108, -5, 8, -17, -124, 103, -64, -61, 59, -3, 62, -87, 74, 125, 106, 58, 63, -55, -112, -123, 6, 41, -40, 103, -74, 52, -80, -103, 109, 9]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[106, 58, 63, -55, -112, -123, 6, 41, -40, 103, -74, 52, -80, -103, 109, 9]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "6A3A3FC990850629D867B634B0996D09" + "'", str13, "6A3A3FC990850629D867B634B0996D09");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "6A3A3FC990850629D867B634B0996D09" + "'", str14, "6A3A3FC990850629D867B634B0996D09");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("057E49A08C2BD83DFDF50BA39F6EA4CCDD832C7BD47526658F32D8F833666C527FD4FC9238D99CACBCE4A1E3C58D22E935D8069993172A3F5FAB16DF20E79FC534EBD8E377CB81AB95435614A543800E292D0BF763A5F8805C5BCE03FF1A5EF0FC39E3643BB2177BBDE5A33900520AA18CC00623398BD7306F4F09807FC2D4187D33D95F0C588EDFE1C49AE73E6B79046675F55E29CF116C10D8F34BE81A3353DFE794DBC676CA2C55FD966CCCEFFEE8775D815491A13485569D80712356A057115B4C8AFC71939B1AF830ABE9C6C413BA0015967583A03DA8F2167CB83DF3298A054CA1A005025B4C3E26D173CAF28F", secretKey19);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-30, 37, 7, -110, -27, -3, -3, 122, -35, -16, 40, 37, -15, -111, -38, -32]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122, -53, -57, 5, 52, -108, 70, -44, -127, 70, -16, 76, 62, -95, -93, -2]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122, -53, -57, 5, 52, -108, 70, -44, -127, 70, -16, 76, 62, -95, -93, -2]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[59, -54, -61, 40, -60, -67, -11, 7, -44, -120, -127, -117, 58, -68, 42, -9]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-7, -110, -111, -118, -103, 77, -59, 90, -16, 39, -60, -51, 122, 19, -102, -56]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[33, -33, -13, -82, 58, -128, -10, 41, 103, -103, 13, 16, -128, 104, -114, 9, 7, -103, -2, 35, -59, 11, 99, 76, 124, 117, 122, 52, 117, -85, 123, 49, 101, 61, -30, 0, 91, 71, 9, 12, 126, -2, 63, -44, -48, 38, -108, 102, -16, 91, 116, -98, 87, -109, 43, 125, 121, -95, 76, -18, 70, -121, 33, -117, 118, -51, -64, -7, -115, 37, 88, 60, -49, 13, -62, -116, 10, -106, 47, -23, 69, -54, -66, -121, -110, -122, 107, 87, 10, -27, 114, -85, -128, -82, 85, -104, 59, -54, -61, 40, -60, -67, -11, 7, -44, -120, -127, -117, 58, -68, 42, -9]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-52, -47, -89, -44, 90, 48, 49, 82, -89, 112, -12, 101, -44, -38, 30, -61, -111, -82, 71, -25, -79, 119, -75, -81, 20, 4, -22, -15, 20, 51, -61, -35, 59, -54, -61, 40, -60, -67, -11, 7, -44, -120, -127, -117, 58, -68, 42, -9]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1128F481D92BF2BAD5CA7BD5EECF0A5F12C42117DEB68C2882367A72EA220785F9FE3BE4D1D78FD44AAC2B18C4EFEDCE7E6149F18DECD179E02AD5510E433088EBBD5800113E989D20D83CFA331F1687F1EDFBA89626EA6043F7FB3A698D0E497145D2CAA845E155CE3BBBBA2743C217AA425469173AB2A63935D64518E557992113777822168F9B69C60DD0E1E9A5C5631FBCC6754287F875F8E4493DC71CB7A48CAB7438B63C318FF546F9BB9817F6B56F25E2564F530A374E993D5077BD131D764CDCE5B56222D06107210ECB95F8208795D84F24E1239DF7B0D18E01AC3113F7512D464BF29694AD582BA0052D5CF835EB3B03F24B8C44D201BF75A4B64901DD44B722123B29F5FC78F7295DEA0DA696305034BBCB363D75B30E7278CF3D3987E3036B50B86FF67675932F48F3C78755E11B4EB40806A03FA3F7A7886E68DC70F0D9B3D41854F641F1538EAA8719F720BCC7BEA3863847BB0D86EA56BFD0EDDA9738A2FCEC42C36FFE643686D71F93010EEFB5344D4288ACE31EFD151AE273373B70583D55839BD69E0F9D8FF0A9178923FA07FB2AB90FD66A8C643EF97ED3F611F2C85614E0F6BEE386A8664E19D2C3A33082BAA4195B84583E17E57C08E269CBAED2DEC6A0F5AE0907AF8D58A2280DDD3DC30370EB28D94D7E283DD5D83BCAC328C4BDF507D488818B3ABC2AF7" + "'", str26, "1128F481D92BF2BAD5CA7BD5EECF0A5F12C42117DEB68C2882367A72EA220785F9FE3BE4D1D78FD44AAC2B18C4EFEDCE7E6149F18DECD179E02AD5510E433088EBBD5800113E989D20D83CFA331F1687F1EDFBA89626EA6043F7FB3A698D0E497145D2CAA845E155CE3BBBBA2743C217AA425469173AB2A63935D64518E557992113777822168F9B69C60DD0E1E9A5C5631FBCC6754287F875F8E4493DC71CB7A48CAB7438B63C318FF546F9BB9817F6B56F25E2564F530A374E993D5077BD131D764CDCE5B56222D06107210ECB95F8208795D84F24E1239DF7B0D18E01AC3113F7512D464BF29694AD582BA0052D5CF835EB3B03F24B8C44D201BF75A4B64901DD44B722123B29F5FC78F7295DEA0DA696305034BBCB363D75B30E7278CF3D3987E3036B50B86FF67675932F48F3C78755E11B4EB40806A03FA3F7A7886E68DC70F0D9B3D41854F641F1538EAA8719F720BCC7BEA3863847BB0D86EA56BFD0EDDA9738A2FCEC42C36FFE643686D71F93010EEFB5344D4288ACE31EFD151AE273373B70583D55839BD69E0F9D8FF0A9178923FA07FB2AB90FD66A8C643EF97ED3F611F2C85614E0F6BEE386A8664E19D2C3A33082BAA4195B84583E17E57C08E269CBAED2DEC6A0F5AE0907AF8D58A2280DDD3DC30370EB28D94D7E283DD5D83BCAC328C4BDF507D488818B3ABC2AF7");
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("E252EC95F03F1DCA2D5FB38537A9B130015DC57FC84328A4F6D686305CD72D31929A0B8D747F8A382D1719EE563F8F5D7BC62453E1091D0F23B4F140704CAA48BD24197C59C7E84F2317DB1F84A58500CF0CC4FCCA453C43B38915D03E636A0232EAE4CAD668EA5731855F254DCC2A13", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("0F13C839C422524812F32D85784F2C37", secretKey9);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-108, 54, -3, -50, -69, 74, 94, -117, -16, -82, 117, -28, -66, 36, -126, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-123, -93, -75, 69, -111, -90, 83, -109, 5, -54, 21, -43, 72, 71, -28, 93]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[7, 93, 5, -14, -128, 64, -89, 123, 72, -57, -57, 125, -67, 112, 7, -31]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-108, 54, -3, -50, -69, 74, 94, -117, -16, -82, 117, -28, -66, 36, -126, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[69, -48, 107, 97, 79, 94, 108, 14, -62, -47, 95, -90, -91, -125, 5, 45, -62, -76, -35, 17, -67, -13, 120, 53, 42, 90, -71, 126, 9, 98, -19, -102, -108, 54, -3, -50, -69, 74, 94, -117, -16, -82, 117, -28, -66, 36, -126, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, 67, -36, -85, 63, -76, -93, 14, -11, -47, 96, 66, 51, 122, -12, -72, 110, -24, 47, 23, -51, -61, 30, 73, 69, -104, -127, -47, 30, -102, 5, -47, -108, 54, -3, -50, -69, 74, 94, -117, -16, -82, 117, -28, -66, 36, -126, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-40, -97, -14, -56, -21, -35, 63, 44, 11, -108, 61, -63, -93, -74, -80, 27, -120, 35, 24, 60, -125, 1, -78, -90, 102, -109, -72, 67, -43, 94, 55, 6, -108, 54, -3, -50, -69, 74, 94, -117, -16, -82, 117, -28, -66, 36, -126, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "D89FF2C8EBDD3F2C0B943DC1A3B6B01B8823183C8301B2A66693B843D55E37069436FDCEBB4A5E8BF0AE75E4BE24820A" + "'", str19, "D89FF2C8EBDD3F2C0B943DC1A3B6B01B8823183C8301B2A66693B843D55E37069436FDCEBB4A5E8BF0AE75E4BE24820A");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "D89FF2C8EBDD3F2C0B943DC1A3B6B01B8823183C8301B2A66693B843D55E37069436FDCEBB4A5E8BF0AE75E4BE24820A" + "'", str20, "D89FF2C8EBDD3F2C0B943DC1A3B6B01B8823183C8301B2A66693B843D55E37069436FDCEBB4A5E8BF0AE75E4BE24820A");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "D89FF2C8EBDD3F2C0B943DC1A3B6B01B8823183C8301B2A66693B843D55E37069436FDCEBB4A5E8BF0AE75E4BE24820A" + "'", str21, "D89FF2C8EBDD3F2C0B943DC1A3B6B01B8823183C8301B2A66693B843D55E37069436FDCEBB4A5E8BF0AE75E4BE24820A");
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey13);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB6BBE89827ED79478708E5BE652AE6A592F3C0B33FE6B21B29D235307851EDF778954F79DEEF182740044AEB796CFBD946EC41684FB6BDB02351390953ED24B8FC2E9CC69778692D9878232D2C392341F6DAA85B8131003972C87538766BC488B081DB74F4954FB5ED3C208327A3F67CBE17A9E6C7294F256D2AAE38B25AAC3AE619A537C280E7AE8576643D8BEA862E1B3B096839819443019C0AD246BC20503A3DEFA830889BB89F18CD74ACA093BF9DF2E8E728E028C9A9C0A87F86C0317203C600FF0DAB562D88A730A6B87C81668D9961D0E810A9F788AFE485ECC17015E50DC8E0375F3FBAB90D64036637D2A", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("764665E65EA1FCD14BE867475EC14A95056B0D379482B5ECB02F55F736BB5CAB3EBCFA0B6FAB7B02E4A6AFC11B1097234B78EDA47754D063C9EB0855685E89A731D8B3AD4F440DA1E4B03BF382F1A06CB6FCC9322725CFEA8F6B7C876F90A9512DC69D9B6936769B642DDF3660411FECAD0D88FC974EBE2751E2124C3BDDE003EDBE050DDA14E737E298D76DE51204AF1148E52A76AFC86E2E17A1861AF88BD22B2245FDD675C43F6372896EE9CF9C996D3C7E96351EEEBD038F62873EFA602D9F9965771552FFF39BF8620E2A526EC5418B30E5D37D87712E556385C364FBBABFBC13C393CCCEDD31DEE9117D6306A7", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("A1BC7C3E4B4C7D20C069FDEA453AFD89E38F329A163DDFCAFDE4608530E6ED6A0397A7A0919566E6F1AE88F8EC6FB2B5", secretKey31);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-96, 67, -7, 0, 106, 80, -2, 2, 56, 68, 86, 16, -125, -10, 102, -54]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[32, 124, -42, -63, 14, -127, 1, -113, -113, -39, 2, -47, 82, -38, 37, 17]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[46, 110, 22, -65, 67, 48, -103, -79, -59, -36, 83, 84, 122, -66, 21, 105]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[34, 55, 90, -70, 30, -1, -120, 20, -85, 81, -106, 7, 30, -62, -81, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[32, 124, -42, -63, 14, -127, 1, -113, -113, -39, 2, -47, 82, -38, 37, 17]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-82, 33, 105, 109, -65, 104, -106, 47, 123, -22, 17, -124, -113, -36, -109, 104, -23, -54, -109, 49, -47, 83, -102, 113, -127, -117, -92, -10, -15, 57, -9, 22, 32, 124, -42, -63, 14, -127, 1, -113, -113, -39, 2, -47, 82, -38, 37, 17]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[36, 3, 111, 21, 63, 89, 104, -74, -61, 62, -91, -27, 109, -56, -52, 28, -109, -71, 36, -107, -71, 72, 118, -66, 0, 68, 71, 112, 2, 119, 27, 46, 43, 107, -59, -124, -61, 61, -87, 61, 14, 46, -70, -70, -71, 31, -46, -107, -100, -39, -116, 17, 96, 83, 51, -106, -82, -106, 15, -39, 0, -55, -17, 59, 125, -100, 35, -60, 28, -46, 126, -56, 18, -91, 39, 83, -56, 98, -39, 42, 8, -65, 35, -122, -111, 93, -122, -23, -60, -3, -2, 111, -79, -117, -12, 88, 32, 124, -42, -63, 14, -127, 1, -113, -113, -39, 2, -47, 82, -38, 37, 17]");
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("17E0AC8083E38441C3D1C9CB1EA7D68F", secretKey40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey40);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-123, 85, -31, -120, 76, -113, -44, -94, 44, -116, 102, -16, -126, 50, 48, -93]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, -51, -58, -89, -102, -71, -27, -39, -56, 115, -24, -109, -46, -39, -90, 73]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-94, -112, -89, -41, 24, -25, 115, -104, -34, 42, 108, 88, 40, -110, -108, -111]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[81, 22, -29, 109, -15, 118, 46, 107, 16, 67, -110, -89, 43, -61, -112, -17]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-89, 19, 117, -61, -3, -107, 46, -95, 54, 25, 36, -8, 46, -11, 54, 77, -105, -110, -53, -29, -59, 102, 96, 54, -58, 84, 72, 101, 17, 35, -58, -85, -94, -112, -89, -41, 24, -25, 115, -104, -34, 42, 108, 88, 40, -110, -108, -111]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-94, -112, -89, -41, 24, -25, 115, -104, -34, 42, 108, 88, 40, -110, -108, -111]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[81, 22, -29, 109, -15, 118, 46, 107, 16, 67, -110, -89, 43, -61, -112, -17]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "5116E36DF1762E6B104392A72BC390EF" + "'", str27, "5116E36DF1762E6B104392A72BC390EF");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "5116E36DF1762E6B104392A72BC390EF" + "'", str28, "5116E36DF1762E6B104392A72BC390EF");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5116E36DF1762E6B104392A72BC390EF" + "'", str29, "5116E36DF1762E6B104392A72BC390EF");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "5116E36DF1762E6B104392A72BC390EF" + "'", str30, "5116E36DF1762E6B104392A72BC390EF");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "5116E36DF1762E6B104392A72BC390EF" + "'", str31, "5116E36DF1762E6B104392A72BC390EF");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "5116E36DF1762E6B104392A72BC390EF" + "'", str32, "5116E36DF1762E6B104392A72BC390EF");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-45, -101, -20, 76, -27, 30, -97, 31, -53, 75, 30, 86, -81, 18, -40, 12]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[76, -53, 126, -83, -28, -78, 111, -39, 111, 105, -25, -77, -3, 92, -7, -76]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[76, -53, 126, -83, -28, -78, 111, -39, 111, 105, -25, -77, -3, 92, -7, -76]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-79, -57, 21, 122, -104, 2, -47, 54, 126, -49, -9, 89, -77, 51, 9, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[76, -53, 126, -83, -28, -78, 111, -39, 111, 105, -25, -77, -3, 92, -7, -76]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[42, -36, -39, -10, 115, -73, 75, -2, -78, 54, 56, -59, -34, 74, -17, 27, -61, -39, 122, -84, -31, -98, 20, 127, -93, 4, -83, 94, -126, -58, 63, 11, -45, -101, -20, 76, -27, 30, -97, 31, -53, 75, 30, 86, -81, 18, -40, 12]");
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B94B61F93519A201D7C95E222E2DBEBC4F107D1A1FB6C3A0A56E673AB14FB317A106FCD4715B05A1BB4717AE5BC9518DB5EA396FE16503B22B3171CD2210916C33ECD463AA688E462178E59BF97955920F577D5DDB84DFE758C97264EC0EA59EC51ED8EE03C95865298C626D9DA71B7A", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.Class<?> wildcardClass32 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[3, 23, 123, 65, -101, -126, 114, 20, -115, -91, 9, -81, -26, -110, -120, -61]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[44, -7, 67, -111, -10, 43, 102, -51, -78, -77, 78, -3, 37, 4, 55, 94]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-111, -41, 22, -128, 53, 3, -25, 79, 60, 11, 38, 49, -119, 13, 1, -111]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[59, -33, 104, -98, -103, -119, 38, 95, 45, -120, -31, -49, -111, -48, -7, 31]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-25, 109, -91, 83, -116, -32, -108, -45, 111, 58, 35, -73, 8, -17, 47, -39, 32, -97, -18, -3, 108, 0, 0, -99, 101, 45, 115, 30, -17, -106, -37, 89, -111, -41, 22, -128, 53, 3, -25, 79, 60, 11, 38, 49, -119, 13, 1, -111]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[90, 31, -101, 66, 86, -110, -73, 20, -12, 119, -90, 35, 94, -21, -70, -28, 19, 38, -48, 42, 8, 53, 44, 46, 54, 100, 78, -109, 109, 78, 49, -46, -111, -41, 22, -128, 53, 3, -25, 79, 60, 11, 38, 49, -119, 13, 1, -111]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-113, 97, 8, -47, -3, 95, -77, -98, 42, -105, -6, 117, 123, 116, 37, 94, 119, -51, 63, 22, -51, 70, 82, 68, -89, -105, 71, -80, 18, -32, -26, 64, -82, -3, 68, -98, -36, 122, -24, -87, -7, 124, -113, 46, -41, -38, -108, 11, 114, -108, -113, 69, -109, -47, 86, 107, -9, -104, -88, 70, -79, 86, 38, -125, -25, -14, 126, 32, -37, -95, 56, 86, -40, -88, -57, -22, 83, 6, -60, 41, -96, 57, -96, -124, 72, 123, -7, -45, 74, -79, -79, 11, 12, 44, -69, -31, -111, -41, 22, -128, 53, 3, -25, 79, 60, 11, 38, 49, -119, 13, 1, -111]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[90, 31, -101, 66, 86, -110, -73, 20, -12, 119, -90, 35, 94, -21, -70, -28, 19, 38, -48, 42, 8, 53, 44, 46, 54, 100, 78, -109, 109, 78, 49, -46, -111, -41, 22, -128, 53, 3, -25, 79, 60, 11, 38, 49, -119, 13, 1, -111]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "7D9C70451B7A47E7CD6FB1469681D2AE3C235B87831BE3B8C3128B7201A3C44ECB9F786B9BC5DE7004895ED591E746FCC6E3919782C6FE6049675997DB987C3DEE4D4CFCE7489F1EDC4647D105440391543C93253DBDE6C945F6B23E7BB3ACD5E7B0F502268100F0A068627BCDD75BACAEB4EC24C92AF39080C73E0F991A0B6E5F4F391DEC86CE3D58EEEFA5273B1DF57EF143C4919A0314CA091557E0DE2A2E0E3B579383D1193D2F1776E1D911B5DD5131F89B83F37E4C594E24222A3B659A931284FA10430AD93B9E5301BDD16D726DCD0B3B528C5916CC605A60ADF5D95A91D716803503E74F3C0B2631890D0191" + "'", str31, "7D9C70451B7A47E7CD6FB1469681D2AE3C235B87831BE3B8C3128B7201A3C44ECB9F786B9BC5DE7004895ED591E746FCC6E3919782C6FE6049675997DB987C3DEE4D4CFCE7489F1EDC4647D105440391543C93253DBDE6C945F6B23E7BB3ACD5E7B0F502268100F0A068627BCDD75BACAEB4EC24C92AF39080C73E0F991A0B6E5F4F391DEC86CE3D58EEEFA5273B1DF57EF143C4919A0314CA091557E0DE2A2E0E3B579383D1193D2F1776E1D911B5DD5131F89B83F37E4C594E24222A3B659A931284FA10430AD93B9E5301BDD16D726DCD0B3B528C5916CC605A60ADF5D95A91D716803503E74F3C0B2631890D0191");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0B3F770D0055D0086E4D5F34677807F643C52681888CF416427DA1BEF08CAF1787327C11DC64B59CF2B3E256003EC1C5DC733E5C890287207AD99467D8686ED5F4F64B8AFC0545EE2C1DCF50C4F4F9FEE0D707DBA4C46C56651B9B2B97612479DE9281D9476441CF2DE866714363BDAED9F5A8E83701A8E0F6B9F3EA7912686D326EBE4F95BB8136F84EF04DB9499A268ECF8C8E1BCAF3F95D8DE36EAB145B0A3DB211EC704215BD747BEBE3650F3A502E0A3FCC48C59869EB6466C1927E84E5A9F4C8CF836DEA5D92E25D34628563E33B6E89C7BDA68B0745F97FA99F971C7A84969C242F20003AB3BC7589946F98B", secretKey7);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D7ED78D3EEC190674D51C0C40347823F954FEA5FD5998AC7970B4B21EC7983DA1A1F9D9180FCFF5D0AA59CE6759116A3B7077D2470863013236B3D511817CEAAEFE25FD24881D524870AEAA6BE11898F33DA6B4D3C6A1AC5D82007573AA3E8B36FA486A7C1C6EEC11FBC54A4B2DC8ECA5F3FFC0FCE452EDEBF473F4833C6428A55DA1AC31AC5B8F1CD7E8ACD49EF0CD3EF76DFA15C085329B717FD0369401D1E3648BE1C64EF5182E6C960F30AB7AB2FC0B1C759990395C3855715B053A29160205BCB76643FECEA381FEA4D5DCA7FB173FCB4F475DFA45AF08690EFD66EEBD9FFC5E64C0F37C88B862203776AC1A378", secretKey21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey21);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[93, -98, -19, 95, -53, -37, 11, 66, -53, 72, 64, -33, -2, -82, -29, -99]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-62, -78, -109, 70, -36, -12, -71, 44, -3, -18, 13, -109, 24, 92, 56, 20]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-62, -78, -109, 70, -36, -12, -71, 44, -3, -18, 13, -109, 24, 92, 56, 20]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[26, 61, 117, -1, -64, -22, -63, -33, -79, -120, 61, 10, 47, 1, 65, 127]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-71, -80, -5, -61, -73, -99, 67, -65, 16, 7, -19, 112, 15, -60, -27, -17, 29, 100, -109, -26, -47, -63, -9, 87, -61, -15, 22, -52, -89, 52, -46, 93, 93, -98, -19, 95, -53, -37, 11, 66, -53, 72, 64, -33, -2, -82, -29, -99]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[29, 5, 41, 79, 50, 44, -38, -43, -125, -86, 125, -125, 36, 63, -42, -91, -57, 47, 45, 115, 23, -57, -8, 11, -44, 118, 66, -11, 58, 73, -45, -83, 20, -12, 90, 63, -34, -108, -41, -39, 60, 58, 58, 89, 9, -19, 116, 22, -9, -5, 84, -111, -54, 71, -16, 115, 38, 126, -44, 114, 89, 25, 85, -47, 48, -64, -34, -19, -117, 50, 88, 24, -67, 58, -85, -79, 3, 26, -97, 28, 17, -54, 86, -128, -1, -75, 37, 57, 117, 107, -84, -33, 72, -107, -114, -54, 93, -98, -19, 95, -53, -37, 11, 66, -53, 72, 64, -33, -2, -82, -29, -99]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-105, 35, -44, -57, -100, 1, -62, 51, 125, -44, -22, -96, -72, 57, -99, -9]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-13, 50, -111, -101, -123, -49, 112, 117, 67, -7, 122, -38, 1, -84, 11, 124]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-13, 50, -111, -101, -123, -49, 112, 117, 67, -7, 122, -38, 1, -84, 11, 124]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-107, 91, -27, 108, -27, -99, -2, -20, -24, 55, 57, 124, 19, 51, 102, -45]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[117, 84, 44, -7, -40, 60, -97, -50, 122, -64, -112, -108, -18, -86, 78, -122, -119, -126, -24, 60, 108, 18, -66, 70, 7, -97, -118, 105, 59, -13, -106, -94, -105, 35, -44, -57, -100, 1, -62, 51, 125, -44, -22, -96, -72, 57, -99, -9]");
        org.junit.Assert.assertNotNull(byteArray27);
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("E3F0C6265AB1A162C2D812BA34CE0FE5D4D36759EBA4E899504188AC6C8366F9A8F226668D88274FAD1B55FE78A1D125", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBD74FDAC32596A72A5D74C50623A23C", secretKey5);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-121, -44, 126, -62, -114, -40, 123, 63, 124, 65, 108, -97, 29, 121, 49, 37, 61, 75, 6, 50, -59, -104, 93, -97, 93, 52, 61, 32, -128, -98, 58, 8, 80, 63, -47, -23, -87, -97, 17, -54, -90, -8, 107, -50, 13, -75, -19, -103, -28, -44, -96, 65, 24, -97, 57, -20, -110, 106, -100, -30, 55, 51, 55, 8, 44, -38, -103, 33, -58, 48, -65, -2, -96, -57, -16, 68, 71, -114, -126, 77, -4, 0, -81, 62, -48, 87, 57, -45, -62, -103, 1, -66, -27, 103, -70, 100, -108, 125, -69, 19, 118, -62, -19, -3, -78, -70, 73, 124, 120, -49, -126, -50]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-71, -109, 121, -110, -59, 98, 94, 57, -16, -77, 29, 82, -92, 16, 6, 21, -125, -57, -125, -21, 9, -66, -112, 93, 89, -74, -103, 56, -31, -92, 118, 76, -108, 125, -69, 19, 118, -62, -19, -3, -78, -70, 73, 124, 120, -49, -126, -50]");
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey22);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[71, 40, 100, 18, 57, -72, 53, -110, -91, 49, -78, -92, 28, -51, -42, 69]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-102, 123, 94, 73, 8, -4, 70, 73, 56, 47, 92, -19, -111, 0, -50, 88]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-14, 21, -40, -77, 45, -48, 52, -76, 60, -103, 125, 6, 82, -121, 66, 53]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-100, -42, 32, 60, -92, 86, 17, 50, -69, -101, -124, -42, 30, -99, 84, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[105, -34, -102, 70, 110, 50, 52, -80, -12, 60, -22, -43, 2, -126, 94, 64, -108, -37, 10, 1, 21, 1, -11, 7, -44, -55, -84, 70, 57, -12, 47, -49, -14, 21, -40, -77, 45, -48, 52, -76, 60, -103, 125, 6, 82, -121, 66, 53]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 106, 125, 100, -100, -43, 122, -70, -25, 126, 93, 64, -95, -43, 64, 70, 46, 103, 38, -107, -54, -63, 82, 101, -70, 100, 39, 80, 84, -120, 2, 123, -14, 21, -40, -77, 45, -48, 52, -76, 60, -103, 125, 6, 82, -121, 66, 53]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-100, -26, -21, 86, 117, 61, -111, 102, 34, 89, -23, -11, 65, -66, 105, 80, 50, -68, -106, 65, 18, -32, 58, -80, 100, 113, -58, 93, -48, -65, -47, 109, -77, -33, -42, 105, 47, 89, 50, -94, 111, -99, 32, 121, -50, -33, 82, -92, 90, -48, -86, 110, -52, -3, 113, 36, -104, -99, 110, -64, -41, -32, -103, 42, -58, 8, -21, 37, 100, 106, 109, 123, -15, 56, 15, 91, -38, 96, 95, 109, 7, 105, 67, 24, -17, 31, -110, 17, -88, 33, 103, -12, 14, -57, 10, 32, -14, 21, -40, -77, 45, -48, 52, -76, 60, -103, 125, 6, 82, -121, 66, 53]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[118, -5, -20, 73, -118, 10, 101, 36, 64, -94, -52, 99, 62, 126, -74, -32, -33, 25, -13, -9, -58, -18, 89, 107, -9, -1, -64, -99, -68, 20, -46, -71, -123, 8, 11, -81, 30, -33, -15, 63, 3, 45, 34, -58, -25, -47, 24, -49, -102, -122, 15, 1, -77, 120, -113, 70, 42, -86, -66, 92, 6, 113, 18, -37, -126, 22, -38, 105, -127, -111, 61, 39, -28, -10, 126, -42, 117, 6, -78, 42, -91, -44, -20, -91, 24, 80, 1, 97, 14, -28, -67, 56, 24, -118, -20, -8, -14, 21, -40, -77, 45, -48, 52, -76, 60, -103, 125, 6, 82, -121, 66, 53]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[109, -94, 92, -123, -94, 103, -111, -20, 3, -109, 26, 8, 106, 123, -50, -61, 92, 107, 79, -24, -9, 98, -80, 92, 127, -78, 26, -40, -79, -92, -52, 89, -14, 21, -40, -77, 45, -48, 52, -76, 60, -103, 125, 6, 82, -121, 66, 53]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "A6E8F2DE4E766B6D61353B23D9F2757C696ED72F857F4865273ADA0937C3E69ABE1FD8C91F6D21597F25C851129D3CC440A51BCAE15216ED8FE0AFF02EF5223CEE0D524A30F5884D06265F442FA9D70FA9A89B6D101AF625C409AF2698FCFA1E7E33C9B4159306BB78AC37CFD4360CCF7907F55A4A93B95F51460B0B5A7DE2EB8A47A9D3C9775FFB3005D9834FAD936D4877C85D8D3AC39AC062A168A3E636727F0148D71AC5E3BA204B5875A1340B485B248F906120DDBCF93BE8A1551591D187C0A7AE174F25234595539C0E2CDAC37FDB2B67FF245DB3451B443177B2BA99F215D8B32DD034B43C997D0652874235" + "'", str33, "A6E8F2DE4E766B6D61353B23D9F2757C696ED72F857F4865273ADA0937C3E69ABE1FD8C91F6D21597F25C851129D3CC440A51BCAE15216ED8FE0AFF02EF5223CEE0D524A30F5884D06265F442FA9D70FA9A89B6D101AF625C409AF2698FCFA1E7E33C9B4159306BB78AC37CFD4360CCF7907F55A4A93B95F51460B0B5A7DE2EB8A47A9D3C9775FFB3005D9834FAD936D4877C85D8D3AC39AC062A168A3E636727F0148D71AC5E3BA204B5875A1340B485B248F906120DDBCF93BE8A1551591D187C0A7AE174F25234595539C0E2CDAC37FDB2B67FF245DB3451B443177B2BA99F215D8B32DD034B43C997D0652874235");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "A6E8F2DE4E766B6D61353B23D9F2757C696ED72F857F4865273ADA0937C3E69ABE1FD8C91F6D21597F25C851129D3CC440A51BCAE15216ED8FE0AFF02EF5223CEE0D524A30F5884D06265F442FA9D70FA9A89B6D101AF625C409AF2698FCFA1E7E33C9B4159306BB78AC37CFD4360CCF7907F55A4A93B95F51460B0B5A7DE2EB8A47A9D3C9775FFB3005D9834FAD936D4877C85D8D3AC39AC062A168A3E636727F0148D71AC5E3BA204B5875A1340B485B248F906120DDBCF93BE8A1551591D187C0A7AE174F25234595539C0E2CDAC37FDB2B67FF245DB3451B443177B2BA99F215D8B32DD034B43C997D0652874235" + "'", str34, "A6E8F2DE4E766B6D61353B23D9F2757C696ED72F857F4865273ADA0937C3E69ABE1FD8C91F6D21597F25C851129D3CC440A51BCAE15216ED8FE0AFF02EF5223CEE0D524A30F5884D06265F442FA9D70FA9A89B6D101AF625C409AF2698FCFA1E7E33C9B4159306BB78AC37CFD4360CCF7907F55A4A93B95F51460B0B5A7DE2EB8A47A9D3C9775FFB3005D9834FAD936D4877C85D8D3AC39AC062A168A3E636727F0148D71AC5E3BA204B5875A1340B485B248F906120DDBCF93BE8A1551591D187C0A7AE174F25234595539C0E2CDAC37FDB2B67FF245DB3451B443177B2BA99F215D8B32DD034B43C997D0652874235");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "A6E8F2DE4E766B6D61353B23D9F2757C696ED72F857F4865273ADA0937C3E69ABE1FD8C91F6D21597F25C851129D3CC440A51BCAE15216ED8FE0AFF02EF5223CEE0D524A30F5884D06265F442FA9D70FA9A89B6D101AF625C409AF2698FCFA1E7E33C9B4159306BB78AC37CFD4360CCF7907F55A4A93B95F51460B0B5A7DE2EB8A47A9D3C9775FFB3005D9834FAD936D4877C85D8D3AC39AC062A168A3E636727F0148D71AC5E3BA204B5875A1340B485B248F906120DDBCF93BE8A1551591D187C0A7AE174F25234595539C0E2CDAC37FDB2B67FF245DB3451B443177B2BA99F215D8B32DD034B43C997D0652874235" + "'", str35, "A6E8F2DE4E766B6D61353B23D9F2757C696ED72F857F4865273ADA0937C3E69ABE1FD8C91F6D21597F25C851129D3CC440A51BCAE15216ED8FE0AFF02EF5223CEE0D524A30F5884D06265F442FA9D70FA9A89B6D101AF625C409AF2698FCFA1E7E33C9B4159306BB78AC37CFD4360CCF7907F55A4A93B95F51460B0B5A7DE2EB8A47A9D3C9775FFB3005D9834FAD936D4877C85D8D3AC39AC062A168A3E636727F0148D71AC5E3BA204B5875A1340B485B248F906120DDBCF93BE8A1551591D187C0A7AE174F25234595539C0E2CDAC37FDB2B67FF245DB3451B443177B2BA99F215D8B32DD034B43C997D0652874235");
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        byte[] byteArray80 = new byte[] {};
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray80);
        javax.crypto.SecretKey secretKey82 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey82);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey86);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey86);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey86);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey86);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey86);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("AA8673337ACFB55E864A42B13E32D319BE4722866C04C73588C3A4D8CCD43E415F976453DD9047E1E45D6C2D02C358E581FC9E7B229323C8109280344A503E8E1C110E42B2B9D01083CC0AF7652C3047726579CD6DC232906CDA2E7BB6EF2A670102445E30524A34F97CCC737866BE46", secretKey86);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        java.lang.Class<?> wildcardClass96 = secretKey86.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-89, 61, -13, 24, 73, 28, 106, 4, 22, 89, 105, -101, -56, 118, -81, 53]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[55, 84, -52, -105, 112, -21, 108, 81, -53, -74, -8, 116, 6, 61, -102, -4]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-27, -100, 70, 9, -80, -77, 69, -82, -40, 123, 38, 54, -79, -91, 119, 85]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[95, -4, 73, 20, -82, 22, -67, -118, 94, -70, -52, -78, 70, -116, -91, 72]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-36, 35, 40, -72, 7, 13, -13, 97, 33, -80, -72, 12, 40, -88, 44, -119]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[70, 3, -58, -81, -64, -81, 81, -31, -90, 69, -25, -12, 96, -66, 57, -10]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-89, -91, 62, -74, 60, 9, 55, -94, -108, -62, -42, -115, 73, 76, -55, 111]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-92, -87, -16, -92, -72, -40, 18, -121, 99, 0, -33, -93, 72, -78, -73, -111]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[52, 64, -31, 59, -58, 124, 117, 45, -103, 46, -78, 14, -70, 64, -121, 76, 43, 36, -124, 99, -92, 50, -56, -66, 17, 99, 86, -11, -70, 62, -77, 85, -89, -91, 62, -74, 60, 9, 55, -94, -108, -62, -42, -115, 73, 76, -55, 111]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[44, 61, -12, 102, -111, 39, -109, 58, 45, 26, 20, -18, -57, 109, 99, -57]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-53, -21, -81, -95, -44, 54, -26, 102, 100, 6, 63, 80, 32, 86, 120, -63]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[81, 73, 43, -91, -110, 63, -65, 34, 93, 127, -25, 15, 55, 44, 24, 47]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[74, -4, -115, -27, 51, 75, 23, 7, -125, 46, -53, -1, 68, 54, -122, -1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-43, -47, -46, -44, -3, -51, 113, 124, -5, -109, -26, -8, -10, 60, -54, -21]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-96, -34, 110, -115, -113, 88, 38, -23, -46, 118, 75, 125, 74, -125, 13, 67]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-94, -32, -37, 66, -3, -11, -124, -48, -48, -76, -47, -105, 122, -96, 63, -7]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[79, -30, -99, -31, 100, 127, 30, 123, -50, -99, 95, -52, 119, 67, 83, 15]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-42, -78, -84, 73, -47, -59, 67, -76, 101, -71, 117, 107, 96, 107, 76, -30, 23, 74, -52, 80, 113, 94, -61, -120, -56, 46, -34, -77, 22, 70, -46, -108, -94, -32, -37, 66, -3, -11, -124, -48, -48, -76, -47, -105, 122, -96, 63, -7]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-94, -32, -37, 66, -3, -11, -124, -48, -48, -76, -47, -105, 122, -96, 63, -7]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey49);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey49);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey49);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("B128023561FF10EFD9335C46277DEA7FECD89993E2B6572E80F4DF46957DF5A2A0364D0382B6263D705F5B354905D89B108991C98F7A0D51258BBFCF280694B3515459EABBF1895D46B0709A6ACB3E5AC9993430502917E03F6A72F01BDC7982E27A9D8581FB0FD0F82FF7ACF0574A64", secretKey49);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("4398D8D00F6A6E822332685181C6096EFCCA2E3830DA2F85BF32289C603B880452EFB559E937FFDF3618B885CA2AAFA17F7C3F6E3AFFC340E9ED0515A932A0412E05D9C3E4FA4F886DA648312A8D94223C19FE8E2AAD5DF1D0EA9B1D299D769FAB3EDA24E1F93C58AB43CF640C4929AB", secretKey49);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[9, -52, -17, 97, -64, -1, 11, 24, 118, 125, -93, 60, 31, 120, -27, -101]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, 84, -101, -92, 56, -7, -31, -86, 82, -44, -52, 57, -59, 98, -118, -96]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[25, 127, 115, -100, -35, -118, 47, -31, 94, 108, -50, 17, 17, 32, -45, 34]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[66, -38, 0, 85, -106, 64, 47, -30, -111, 74, 37, -103, 39, 121, 1, -124]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-71, -69, -125, 61, 95, 45, 69, -86, 106, 11, -120, 87, 115, -46, -67, -113]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[109, -8, 109, -61, -111, -100, 93, -43, -78, -57, 72, -48, -118, -37, 27, 92]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[38, -92, 105, 18, -42, 20, 26, -38, 97, 102, -89, -118, -9, -123, -69, 122]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[14, 48, -87, 112, -81, -12, -11, 70, -102, 93, -104, -21, 78, 48, -20, -9]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[36, -19, -49, -17, 9, 53, 17, 45, 42, -34, -67, -124, -71, 3, 71, 34, 30, -100, 13, 21, 12, 107, 87, -122, -55, 86, 116, -124, -55, -84, -87, 14, 38, -92, 105, 18, -42, 20, 26, -38, 97, 102, -89, -118, -9, -123, -69, 122]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-45, 23, 44, -31, -20, -107, 10, -117, 103, 47, -64, -18, -103, -41, -85, -74, -58, 39, -87, -43, -5, -95, -75, 97, 53, 104, 51, 18, -81, -61, -78, 80, 38, -92, 105, 18, -42, 20, 26, -38, 97, 102, -89, -118, -9, -123, -69, 122]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertNotNull(byteArray59);
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("D7ED78D3EEC190674D51C0C40347823F954FEA5FD5998AC7970B4B21EC7983DA1A1F9D9180FCFF5D0AA59CE6759116A3B7077D2470863013236B3D511817CEAAEFE25FD24881D524870AEAA6BE11898F33DA6B4D3C6A1AC5D82007573AA3E8B36FA486A7C1C6EEC11FBC54A4B2DC8ECA5F3FFC0FCE452EDEBF473F4833C6428A55DA1AC31AC5B8F1CD7E8ACD49EF0CD3EF76DFA15C085329B717FD0369401D1E3648BE1C64EF5182E6C960F30AB7AB2FC0B1C759990395C3855715B053A29160205BCB76643FECEA381FEA4D5DCA7FB173FCB4F475DFA45AF08690EFD66EEBD9FFC5E64C0F37C88B862203776AC1A378", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey7);
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[31, 38, -10, 54, -47, -107, 55, -86, -128, -13, 86, 2, -36, 114, 52, 21]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-47, 120, -39, 108, -32, -15, -78, -76, -84, -38, 5, 30, 118, 83, -26, -36]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-47, 120, -39, 108, -32, -15, -78, -76, -84, -38, 5, 30, 118, 83, -26, -36]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[28, 84, 127, 30, 10, -78, -101, -13, 83, -91, 121, 23, -127, 29, -69, -77]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[22, 12, -78, 35, -21, 68, -6, 78, 43, 78, -1, 65, -81, -5, 95, 80, 49, 106, -71, -15, 18, 9, 120, -43, 97, 44, 0, -82, 103, -34, -53, 89, 31, 38, -10, 54, -47, -107, 55, -86, -128, -13, 86, 2, -36, 114, 52, 21]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-69, 5, -38, 75, -68, -107, 124, -86, 122, 90, 100, -120, -53, 90, -76, -67, 55, 91, -62, 98, -6, 116, 121, -125, -66, 69, 10, 8, -122, -119, 40, 17, 31, 38, -10, 54, -47, -107, 55, -86, -128, -13, 86, 2, -36, 114, 52, 21]");
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        byte[] byteArray80 = new byte[] {};
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray80);
        javax.crypto.SecretKey secretKey82 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey82);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey86);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey86);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey86);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey86);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey86);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("AA8673337ACFB55E864A42B13E32D319BE4722866C04C73588C3A4D8CCD43E415F976453DD9047E1E45D6C2D02C358E581FC9E7B229323C8109280344A503E8E1C110E42B2B9D01083CC0AF7652C3047726579CD6DC232906CDA2E7BB6EF2A670102445E30524A34F97CCC737866BE46", secretKey86);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey86);
        java.lang.Class<?> wildcardClass96 = secretKey86.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[61, 54, -87, -110, -105, 73, 102, -123, -50, -104, -54, 113, -92, -68, 29, -96]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-53, -119, 88, -105, -11, 127, -48, 70, 89, -60, 105, -80, -121, -81, 81, -101]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-94, -30, 125, 93, -14, -3, 5, -63, 44, 24, -88, 114, -74, 105, 116, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, -94, -78, 90, -59, 51, 4, -107, -85, -44, 78, -77, 60, 103, -110, 73]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[121, -28, -117, 6, 74, -42, -47, 32, 109, 24, 114, 112, -106, -2, -3, 73]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-42, 27, -96, 96, 39, -77, -43, -116, 98, -85, 3, 120, 7, 37, 125, -18]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[27, 89, -64, -126, -70, 120, -105, -55, -77, 6, 67, -64, 31, -65, -75, -30]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-6, 84, -71, -11, -53, -42, 112, -26, 69, 87, -21, -93, 108, 5, 20, -29]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[81, -98, -64, -108, 102, -3, 38, -105, -109, 7, 51, -79, 91, 125, -88, -43, -36, 82, 127, -1, -117, -37, -98, 111, 104, -29, -2, 119, 13, 103, 69, 6, 27, 89, -64, -126, -70, 120, -105, -55, -77, 6, 67, -64, 31, -65, -75, -30]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[37, 28, -111, -127, 91, 10, -1, -96, 90, -16, 116, 18, -87, -80, 100, -119]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[42, 7, 44, -47, -35, -126, 26, -66, -119, -84, -94, 125, -117, 88, -22, 95]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[32, 80, -45, -61, -56, 75, 114, -117, 16, -40, -85, -48, -69, -114, -48, -111]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-21, -44, -43, 92, 11, 47, -64, -35, -102, 84, -60, -124, -123, 39, 51, 120]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-122, -107, -79, 93, 73, 3, 95, -44, 38, 67, 111, -9, -30, 0, -63, -58]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-36, -14, -51, -27, -107, -53, 88, -25, -54, -37, 102, -114, -110, -55, -16, -38]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[100, -85, 57, 41, 106, -124, 98, 72, 2, -118, -97, -34, -94, 56, 113, 109]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-78, -42, -34, 120, 15, 5, -43, -78, 102, 22, -78, 21, 39, -26, -102, 28]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-125, -16, -13, -127, -21, 90, -126, 17, 58, 106, 120, 5, 80, 77, -5, 77, -80, -10, 98, -90, -92, 116, 24, -36, -71, -75, 58, 68, 84, 78, -72, -32, 100, -85, 57, 41, 106, -124, 98, 72, 2, -118, -97, -34, -94, 56, 113, 109]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-99, 82, -28, -36, -56, 95, -114, 92, 64, -25, -18, 24, 77, -27, 33, -95, -45, 83, -39, 78, 73, 44, -29, -21, -21, 94, 9, 31, -52, -59, 124, -21, -73, 90, 80, 122, -13, -93, 104, 119, -42, -72, 28, 13, 59, -68, -29, 111, -86, -33, 23, 59, -34, 127, 104, -61, 104, -78, 123, 109, -70, -91, -69, -20, 97, -74, 127, -17, -26, -42, 4, 68, 78, -70, -127, -119, 116, 106, -102, 29, 44, -78, -93, -21, 53, 63, 125, 29, 8, -32, 41, 80, -82, -115, 117, 69, 100, -85, 57, 41, 106, -124, 98, 72, 2, -118, -97, -34, -94, 56, 113, 109]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD53FF6B275E2ECF054D2E30B442FC69", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("815BE29BF413B9A4F22E40BCD2730B2D9FB4060DFDB0508CE0551EFB108D0DB5DF66CAEBB4655B582572AC4AEDA80469188E1CB653C24682B9C0ABDCC8A4C70C8D820FBC410FAAB9AD24D085DAAE937F931A2FED977082D75D785A694F59F54E1764DA9DDB21F608D11CD0C5EEFA3987", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("3BA2F87DCF2F7BCA94243148028D6AE47C873E2F07D9B8DE6ABD8D9D0A4612301B6DEC3C35F25EE27C893EA6111C248AB18A041839B20D5EC2A49EED0B73FF6B544A4D20069AEFD9A5EE53D374CF27725DD37B2AA61A54B55FF6B3A60F62E5D09D8A27E9ED7248128E83CA03A1A26AA71BA4CAD8207C5610B9B2BAC6F2FD39101634BE5DF8024EA0A2FD1823EB97CDDB0668F4873CC8B252C6253E04E27C6946641412465AE227B20136A4C1E20A596D8D68B59980C40BC083095935F1138707D624514EDEDD6B0CEFFFBD4D9D3F375A7D9775C8736E9A037F16CDFC0AC6FAC7BD330967EA20A249FC944275F5F5D9EB", secretKey7);
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-9, -26, -128, -49, -14, 98, -86, 20, 64, 110, 21, 33, 80, 24, -70, 66]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[30, -109, 96, -63, -84, -44, 51, -88, 92, 63, 41, 7, -8, 101, -90, -72]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-58, -119, -81, 30, 60, 97, 113, -92, 80, -81, 66, 118, 114, 75, 63, 108, -43, 3, -118, 109, -37, -3, -90, 42, -93, 1, -65, 10, 37, -42, 95, 27, -9, -26, -128, -49, -14, 98, -86, 20, 64, 110, 21, 33, 80, 24, -70, 66]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, -38, -65, -9, -106, -107, -102, 61, 61, -61, 1, -42, -94, -68, -102, -7, 41, 66, 64, 7, -93, 67, -64, -20, -52, 99, -22, -2, -115, -46, -11, -92, -9, -26, -128, -49, -14, 98, -86, 20, 64, 110, 21, 33, 80, 24, -70, 66]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray60 = new byte[] {};
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey62);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey76);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey85);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("3D515EE06FD2B87EB56EDD7A17F930C8C9A116BF7E8E782A6D14839A271125D9B5FC655EC15E6D8300FCA04D3C6D0FED762E5C605835DF03D21B87CED4B3E47704CCC808EE82D5B5C3794D5FA68BB5C1375AB1051056C084515BE83D5CC6B52F53A580EFF2E94059A29ED571243449A3534724152DF435FA7BD77C7FB3D7CF61936D6C263DB7E709A5FFA217F4FDF5F0A114BE8A02B9DFCB1658D1151B041BDFBE90F0F1EA0B760D1F5BB5B4602BE3377B1A950C708A014681E99D334CA283946B78169ABFAB3EA68076DD682DF557CF47210A137DD2F704594CFB5EE4E9001B3D3107A050F8E604ACFE4429DEB1AC96", secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("4CC5DF797845510CE002A0BD16CFE56D", secretKey85);
        java.lang.Class<?> wildcardClass94 = byteArray93.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[4, -40, -97, -83, -122, 29, 36, -86, 0, 68, 84, 75, -128, -34, 2, 80]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -7, 38, -39, 109, -16, -115, -55, -49, -104, 20, -46, -66, 72, -8, -116]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[75, 75, 94, -72, 38, 62, 4, 6, -122, 96, -120, -68, 37, 124, 15, 93]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-92, 35, -27, -9, 92, -103, 34, -2, 11, -42, -35, 50, -30, 44, 7, -11]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-93, 24, 110, -109, 62, -58, 121, 53, -10, -11, -9, -59, -7, -23, -27, -31]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[51, -49, -60, 114, -73, 117, 75, -115, 19, -59, 12, 69, -46, -77, -93, -96]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-39, 106, 115, -84, 80, 80, 120, 43, 85, -47, 41, 35, 89, 63, 33, 47]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-69, 96, 89, 57, -35, 52, 110, 127, -127, 13, 45, -6, 16, -109, -22, -65]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[29, 90, 65, -108, -95, 93, 44, 50, -1, -31, -46, -106, 7, 68, -56, -76]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-128, 96, -72, 6, 9, 2, -55, -12, 8, 94, -1, -71, -73, -20, 113, -58]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-107, -12, -41, -70, 52, 29, 15, -62, -43, -112, 98, 12, -71, 14, -65, -67]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[29, 90, 65, -108, -95, 93, 44, 50, -1, -31, -46, -106, 7, 68, -56, -76]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[39, -61, -81, 29, -121, -20, 7, 66, 127, 126, 63, 75, 14, 10, -83, -57]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-55, 98, -87, 8, 63, 53, 76, 59, -99, -83, 76, 92, -2, 102, 107, -87]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-30, 89, 102, 9, 11, -25, -123, -128, 113, -24, -123, 62, -65, -9, 52, 19]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-96, -27, -30, -48, -104, 62, 114, -42, -24, 52, 3, -34, 6, 13, -22, -64]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[69, 69, -100, 22, 46, 58, 121, 39, -72, -62, -6, 14, 39, 25, 125, 86]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-83, -14, -121, 13, -61, 59, 93, 48, 50, 68, 90, 2, 64, -111, 126, -52]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-83, -14, -121, 13, -61, 59, 93, 48, 50, 68, 90, 2, 64, -111, 126, -52]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[127, -117, 31, -114, -114, 26, -66, 57, -4, 69, 0, 6, -91, 120, -51, -33, -24, -104, 18, 86, -82, -51, 18, 96, 89, 14, 112, -7, -79, -77, -86, 101, 69, 69, -100, 22, 46, 58, 121, 39, -72, -62, -6, 14, 39, 25, 125, 86]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[74, -73, 72, -11, -62, -43, -31, -123, 79, 125, -73, 62, -34, -87, -86, -109, 118, -36, -26, 85, 82, 22, -119, 43, 49, -96, -99, 48, 24, -52, 120, -81, 69, 69, -100, 22, 46, 58, 121, 39, -72, -62, -6, 14, 39, 25, 125, 86]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey53);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A355788E230169D1536A960D5EA1C5ED3FBE4ABD18AECD9A59BFDF2CBDC1B7E8AA7215D99A7F8907E4CE5A2EF353974F862F615A2BBE2083F5DF8F1E7BDA83159933791065AE82F453BCAC891A29A25FACEAF48D1FC772A3F6B9CB4DAA6C040EC84B04F8EFBD9354B5367918605E09E", secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("557F2FAF8213773CE7754928006D3B71AE965F3ABDED9EA5A9E4F6715F4E2C8A69867E6F23B81C5146BEF7827CBF6DBF", secretKey53);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-37, 109, 65, -62, -46, 31, 67, -100, -62, 16, -60, 93, -50, 70, -121, 39]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[23, -109, -109, 20, -36, 123, -121, -43, -63, -36, -117, 89, 60, -109, 36, -26]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[11, -34, -37, 11, 33, 26, -29, 17, 4, 27, 94, 66, 94, -27, -67, 45]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[5, -62, 26, 75, 11, -1, 17, 106, 118, 74, 37, -4, 8, 10, 65, 54]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[104, 7, 54, 93, -1, 18, -51, 99, -40, 36, 4, -108, 124, -81, -77, -19]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-31, 11, -54, -79, 12, -36, 0, -88, 105, 30, -123, 120, 62, -51, -89, -117]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[60, -92, -26, 56, 127, -6, 50, 27, 11, -103, -112, -96, 120, -37, -48, 91]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-19, 112, -1, -18, 16, 12, 7, 1, 38, -29, 117, -43, 72, 116, 121, -86]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[2, -67, 31, -107, -57, 19, -38, -57, 17, 125, -62, 92, -41, 14, -75, 90]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[72, -18, -89, -98, -75, -50, -20, -50, 105, -43, -124, -63, -83, 59, -26, 49]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[41, -128, -29, 111, -72, -118, 57, 92, -22, 31, 9, -46, 89, -14, 21, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[2, -67, 31, -107, -57, 19, -38, -57, 17, 125, -62, 92, -41, 14, -75, 90]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-37, -66, 31, 90, -39, 67, 28, -110, -106, 86, 66, 66, -41, 9, -70, -50, -12, -111, 66, -127, -7, -51, 114, 103, -75, -27, -46, 105, 29, -77, 46, 8, 44, 15, -81, 103, 95, 6, 121, -55, -63, 90, 76, -80, 29, 33, -107, -75, -125, 94, 94, -24, -69, 96, 75, 20, 112, -122, 2, -68, 80, -105, 65, 1, -86, -57, -114, 31, -84, 31, -124, 117, -26, -86, -24, 88, -82, 116, 72, -97, 6, 29, 72, -54, -108, 2, -114, 30, 56, -91, 21, 30, -66, -43, 87, -61, 2, -67, 31, -107, -57, 19, -38, -57, 17, 125, -62, 92, -41, 14, -75, 90]");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "DBBE1F5AD9431C9296564242D709BACEF4914281F9CD7267B5E5D2691DB32E082C0FAF675F0679C9C15A4CB01D2195B5835E5EE8BB604B14708602BC50974101AAC78E1FAC1F8475E6AAE858AE74489F061D48CA94028E1E38A5151EBED557C302BD1F95C713DAC7117DC25CD70EB55A" + "'", str63, "DBBE1F5AD9431C9296564242D709BACEF4914281F9CD7267B5E5D2691DB32E082C0FAF675F0679C9C15A4CB01D2195B5835E5EE8BB604B14708602BC50974101AAC78E1FAC1F8475E6AAE858AE74489F061D48CA94028E1E38A5151EBED557C302BD1F95C713DAC7117DC25CD70EB55A");
    }
}

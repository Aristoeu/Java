package AESEncryption;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("066FD0B7551F2668A263D142A470E61DFB2C5A60BF534D592C52BF6F0AE973841FC9DC095841BFCA60603CE7D591D1D3", secretKey21);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey62);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey62);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey62);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey62);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey62);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey62);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey62);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("C718B4A2C36E882A21FF0D9AFADE2A77", secretKey62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey62);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[37, -40, 75, 34, -34, -94, 9, -78, 80, -92, -3, -98, -73, 90, -125, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-58, -126, -80, 127, 19, -31, -113, 75, 65, 42, -101, 33, -91, 112, -116, -107]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[21, 92, 22, -2, -87, -95, 98, -121, -115, -16, -5, 115, -48, -65, -69, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[92, 1, 10, -68, -82, -14, -79, -90, -38, -7, -68, -121, 16, 34, -2, -120]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[60, 38, -5, -1, 38, 27, -110, -55, 105, 74, -20, -5, -23, -31, -44, -118, -102, 112, 4, -43, -47, -106, -2, -23, -69, 51, -80, -89, -123, 112, 74, 106, 21, 92, 22, -2, -87, -95, 98, -121, -115, -16, -5, 115, -48, -65, -69, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-123, 59, 78, 71, 118, -75, -17, 109, -82, 65, 2, 43, -105, -2, -49, 37, -12, -70, 118, 67, 121, -14, -113, 73, -87, 120, 10, -4, -78, 63, 98, 101, -43, -79, 71, -77, -18, 96, -40, 76, 16, -107, 40, 65, 50, 79, -73, 17, 52, -112, -52, 109, 0, -78, -111, -119, 84, 112, 89, 4, -57, 8, 127, 107, -14, 99, -46, 12, 20, -39, -64, -15, -25, 32, 79, 49, 93, -46, -120, 43, -52, -75, 110, -2, 123, 80, 117, -14, -2, -54, 126, -61, -4, 121, -49, -127, 21, 92, 22, -2, -87, -95, 98, -121, -115, -16, -5, 115, -48, -65, -69, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-81, 24, -3, 41, -103, 67, -37, 44, 83, 106, 57, -85, -18, -85, -25, -75, -118, 69, -73, -29, 21, -58, 60, 5, -104, -62, -60, 7, 34, 123, 108, -60, 21, 92, 22, -2, -87, -95, 98, -121, -115, -16, -5, 115, -48, -65, -69, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[73, 98, -35, -124, -119, -112, 113, -68, 125, 113, 120, 122, 87, 81, 71, 124, 86, 95, -111, 102, 78, 74, -83, 104, 61, 116, -113, 108, 79, -14, -49, -23, -126, 45, -101, 70, 52, 103, 114, 38, 63, -6, -23, -30, -117, -14, -92, -58, -15, 64, 103, -4, -104, 77, 46, -4, -26, -12, -101, 38, -15, 14, -89, 46, 76, 79, 57, -86, 7, 41, -37, 37, 96, -106, 74, -54, 0, -30, 17, -93, 65, 87, 13, -53, 120, 107, 34, -71, -103, 13, 51, 20, 66, 48, 61, 24, 21, 92, 22, -2, -87, -95, 98, -121, -115, -16, -5, 115, -48, -65, -69, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-119, 124, -76, 84, -45, -48, -128, -55, 65, -120, -3, -36, 90, 88, -58, -122, 105, 123, -16, 61, -107, -76, 123, 22, 4, -9, 79, 53, -120, 112, 76, 8, 56, 11, 113, 115, 109, -17, 29, 112, 110, 121, 56, -7, 112, 85, 116, 78, 60, 111, -115, -50, 104, -71, -76, 119, -18, 93, -70, 42, -112, 59, 82, 27, -33, -31, 24, 2, -112, -112, -43, 123, 8, 48, 32, 79, -6, 36, 64, -68, -5, -56, 54, 41, -82, -64, -31, -46, -40, -3, 30, -40, -68, -50, -51, -122, 21, 92, 22, -2, -87, -95, 98, -121, -115, -16, -5, 115, -48, -65, -69, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[20, -43, 5, -52, -8, 71, 90, 77, 2, 80, 32, -88, 16, 102, 34, -8]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[106, 42, 70, -100, -96, -76, 1, -118, 117, -42, -42, -41, 76, -68, 67, -70]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, -51, -56, -125, 75, 44, -65, -1, -61, -69, -55, -118, -18, 27, -121, 96]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-71, 116, 95, -93, -119, -18, 115, 27, -119, 112, -5, -110, 100, -55, -64, 26]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[45, -77, -70, 23, -40, 74, -116, 32, 98, -26, 80, 48, -66, 113, 74, -95]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[34, 11, 109, -79, 100, 95, 52, -65, -40, 91, 40, -81, -90, -62, -65, 8]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-98, 89, 84, -15, -19, 86, 28, -63, 78, 55, -67, -65, 13, 122, -52, -124, -6, 81, -13, -27, -60, -72, 39, -20, 120, -52, 84, 55, -84, 119, 47, 25, 45, -77, -70, 23, -40, 74, -116, 32, 98, -26, 80, 48, -66, 113, 74, -95]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[95, -2, -31, 20, 98, -37, 29, 43, 87, 108, -12, 62, -69, -63, -45, -107, -60, -86, 39, -96, 77, 95, -98, 120, -37, 41, -51, 21, -51, 84, -62, 104, 45, -77, -70, 23, -40, 74, -116, 32, 98, -26, 80, 48, -66, 113, 74, -95]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-87, 91, 31, -37, 115, -100, 0, -125, 88, 60, 38, -66, -15, -3, -44, -32, -13, 6, 25, 33, 92, -114, -24, 86, -126, 1, -109, -17, -114, 78, 55, -108, -126, 76, -14, 100, 19, 85, -6, -46, 54, 14, 22, -114, 85, 123, 76, 90, -66, -29, 25, -47, 66, -49, 2, -123, 2, 121, 0, -14, -70, -72, -102, 61, 23, 59, 69, 31, -32, -80, -33, -46, 12, 15, -101, -39, -62, -103, 24, 67, -99, -109, 17, 97, -49, -106, 68, -24, 89, 21, -78, 0, -66, -68, -77, -69, 45, -77, -70, 23, -40, 74, -116, 32, 98, -26, 80, 48, -66, 113, 74, -95]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-109, -100, -75, -57, -125, -34, -17, -50, 59, -66, -29, -2, 126, -23, 100, 89, -112, -125, -34, 42, 76, 87, 35, -39, 18, 29, -38, -44, -124, 1, -39, 88, 45, -77, -70, 23, -40, 74, -116, 32, 98, -26, 80, 48, -66, 113, 74, -95]");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("F6441EF035CB44DF482D4076E2A2584A09FB6932E41E1A73AACC011A11D436CF6153ACC0BB45F9E81CD68A0E5BDE70C5E98B731602E244B9470D386A4098F20E0DA871E1E1E68188363224699C5B251F769207B9D3E7B513FBF246B3AB276CDE6EDB9EC603A754A6FDFF48C1723737A5", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey7);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey21);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[9, 102, -127, 103, -18, -1, -1, 49, 102, -40, 55, -23, 123, 54, 80, 59]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-76, -106, -9, -74, -5, 88, 99, 63, 26, 27, -4, -95, -110, 79, 31, 33]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-58, -120, 17, -69, -64, -70, -62, 86, 22, -49, 71, -39, -14, -8, -30, -112, -11, -38, -88, 21, -105, 82, -93, -107, -4, -30, -49, -73, -95, -125, -97, 93, 9, 102, -127, 103, -18, -1, -1, 49, 102, -40, 55, -23, 123, 54, 80, 59]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[31, 77, 5, 119, 10, 66, -102, 67, -94, -11, 116, -122, 118, -96, 37, -123, -57, 68, -68, -79, -69, -74, -118, 118, 119, 36, -105, 50, 98, 67, 107, -18, 9, 102, -127, 103, -18, -1, -1, 49, 102, -40, 55, -23, 123, 54, 80, 59]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, 73, -8, 50, 63, 61, -56, 68, -116, 44, -88, -15, -62, -34, 7, 14, -25, -43, -79, -76, -90, -86, 28, 49, -33, 14, -38, -3, 26, -54, -76, 11, 9, 102, -127, 103, -18, -1, -1, 49, 102, -40, 55, -23, 123, 54, 80, 59]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-83, -64, -99, 62, -61, 86, 40, 87, 94, -127, -122, 91, -60, -66, -34, 51, 23, -15, 13, -96, -100, 2, -29, -81, 10, -39, 20, -51, -29, -68, 16, -114, 24, -70, 35, 41, -99, 33, 115, 26, -32, 13, 51, 86, -66, 76, -53, 121, -37, -103, -25, -109, -26, -107, 93, 26, 40, 67, -116, -70, 120, 90, 59, -36, -33, -127, -75, -33, 22, -112, 68, 80, 55, -59, 110, 34, -105, 64, 42, -85, -37, -33, -23, -49, -119, -17, -48, 35, -63, -3, -128, -26, -77, 43, -100, -50, 9, 102, -127, 103, -18, -1, -1, 49, 102, -40, 55, -23, 123, 54, 80, 59]");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[126, -32, 36, 50, 81, -105, 49, 91, -123, -40, -86, -14, 93, 106, -92, -19]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-90, -119, 53, 21, 47, 22, 43, -3, 30, -51, -89, -101, -49, -103, -2, -87]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-90, -119, 53, 21, 47, 22, 43, -3, 30, -51, -89, -101, -49, -103, -2, -87]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[62, -3, -20, -85, -109, 49, 9, -33, 41, -71, -18, 121, -47, 84, 89, -54, 126, -38, 101, 126, -116, 91, 59, -4, -39, -59, 42, -97, -65, -113, 70, -110, 126, -32, 36, 50, 81, -105, 49, 91, -123, -40, -86, -14, 93, 106, -92, -19]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-71, -82, -45, 112, 84, -88, 107, -116, -6, 110, 25, 91, -124, -4, 65, 49, -95, 75, 25, 73, -25, 25, 51, -13, -5, -33, -73, -120, -1, 84, -10, -16, 126, -32, 36, 50, 81, -105, 49, 91, -123, -40, -86, -14, 93, 106, -92, -19]");
        org.junit.Assert.assertNotNull(byteArray27);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6EA4E116455BC7AF3FB5BF064D6F874CB5F555408DB9AD9F9733DFD99DAC4D7FEEE704EFF20D5601E11B02E83309E581", secretKey7);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey36);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey36);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-10, -86, 73, -120, 61, -20, -78, -13, -52, 114, -96, 68, -94, -99, -85, 101]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[18, -108, -82, -109, 31, -31, -99, -33, 9, 76, 97, 52, -101, 109, 23, -39]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-80, 101, -42, 109, 93, -102, 21, 46, 21, -77, -42, -14, 59, -99, -75, -52]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-10, -86, 73, -120, 61, -20, -78, -13, -52, 114, -96, 68, -94, -99, -85, 101]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-128, -121, 123, -21, 84, 119, 72, 13, -12, -29, -41, -108, 102, 68, -128, 40, 40, 101, 51, 50, 39, 9, 117, -80, -29, -120, 74, 8, -8, 38, -48, -96, -121, 90, 44, -35, -33, 124, -20, -34, 58, 86, -76, -41, -21, -28, 27, -72, -74, -2, -101, 13, 74, -83, 46, 124, -63, -121, 93, -42, -29, 53, -22, -93, 12, 27, 75, -76, 89, 117, -67, 44, -1, 109, 41, -25, -49, -9, -119, -5, 79, -54, -126, -16, -5, 15, 75, 110, 112, 27, 25, 55, -48, 8, -21, 119, -10, -86, 73, -120, 61, -20, -78, -13, -52, 114, -96, 68, -94, -99, -85, 101]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[52, 60, 75, -62, 70, -9, 110, -125, -124, -32, -98, -44, 100, -44, 74, 86, -79, 108, -124, -26, 96, -44, 70, -71, -72, 64, -114, 79, 42, 99, -60, -77, -10, -86, 73, -120, 61, -20, -78, -13, -52, 114, -96, 68, -94, -99, -85, 101]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[26, 37, 6, 81, -81, 88, 5, 1, 117, 108, -84, -14, -49, 54, 6, -106, 35, -35, -42, 119, -69, 48, -128, -81, 100, -100, 76, -117, 68, 101, -6, 14, -105, 63, -86, -73, -15, -43, -19, 96, -91, 46, -26, -125, 6, 17, 94, -36, 120, -123, -69, 100, -124, -24, -77, -103, -48, 97, 88, 94, 61, -120, 12, 66, -16, 119, -128, -55, -105, -96, 84, -9, -1, 105, 1, 57, -126, -118, 115, 99, -28, -46, -6, -92, -81, 63, -107, -77, -2, 3, 50, -106, -15, -75, 120, -106, -10, -86, 73, -120, 61, -20, -78, -13, -52, 114, -96, 68, -94, -99, -85, 101]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[15, -1, 38, 62, 107, 76, 21, -106, -67, 22, -80, 93, -118, 127, 123, 89]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, -85, 10, 9, 116, 23, -20, -36, -45, 109, 53, -19, -11, -103, -12, -63]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[53, 22, -66, 98, -73, -111, 95, 28, -48, 19, 39, -68, -71, 44, 53, -66]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-37, 98, 120, -81, -67, 36, 33, 68, -27, -16, -113, -117, 79, 42, -59, 71]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[98, -84, 95, 101, 20, 46, -55, -71, -21, -82, -11, -52, 96, 124, 110, -12, -47, -47, -64, 47, 86, 25, -37, 68, 123, -30, -18, -37, -107, 110, 115, 36, 53, 22, -66, 98, -73, -111, 95, 28, -48, 19, 39, -68, -71, 44, 53, -66]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[53, 22, -66, 98, -73, -111, 95, 28, -48, 19, 39, -68, -71, 44, 53, -66]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-37, 98, 120, -81, -67, 36, 33, 68, -27, -16, -113, -117, 79, 42, -59, 71]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-50, -98, 44, -18, 14, -84, -53, 109, 8, 60, 48, -8, -57, 52, -46, -56, 111, 62, 81, -114, -68, -68, 68, 104, -101, -127, 41, -79, 17, 23, -79, -103, 53, 22, -66, 98, -73, -111, 95, 28, -48, 19, 39, -68, -71, 44, 53, -66]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[66, -56, 84, 95, -58, -2, 73, 3, 62, -106, -31, 121, -14, 75, 48, 42, 94, 5, 34, 36, 101, 114, -13, -107, -30, 23, -81, 109, -94, -126, -8, 65, 53, 22, -66, 98, -73, -111, 95, 28, -48, 19, 39, -68, -71, 44, 53, -66]");
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey1);
        java.lang.Class<?> wildcardClass3 = secretKey1.getClass();
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-43, 17, -128, -69, 119, 41, 110, 47, -51, 125, -128, -42, 70, 69, -51, 95, -73, -101, 75, 7, -71, 7, -123, -19, 14, -29, -85, -70, -108, 70, -99, 37, 94, 26, 101, -83, -22, 73, 108, -28, -104, -64, -70, -125, 125, 7, 106, -26, -101, -23, 108, -42, -110, -13, -3, 64, -126, -29, 11, 16, -98, 70, -121, 19, -56, -53, -114, 37, 94, 105, 3, 32, -37, -34, -92, 71, 85, -122, -128, -55, -44, 97, 99, 58, -41, 14, -59, -49, 117, -122, 25, -90, -119, 86, 5, 116, 26, 5, 44, 38, -118, -25, -2, -123, 89, -78, -25, 24, -21, -77, 12, 108]");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-50, -14, -73, 92, 45, 60, 15, -126, -115, -40, 20, 111, 111, 6, -32, 35]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-37, -123, -112, 113, 18, -85, 55, -4, -89, 27, 96, -42, -49, 24, 124, 59]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[86, -119, -36, -108, -75, -7, -2, 53, 5, 118, 116, -83, -107, 70, 68, 64]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[114, 68, -45, 105, -93, 115, 64, -106, -38, -100, -39, -66, 47, -107, -121, 72]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-51, 98, 88, 111, 13, -64, 31, -9, -53, 101, -64, 57, -108, -16, 35, 66, 57, 41, 120, -73, -62, 11, -125, -92, 84, -71, -12, -46, -121, -105, -40, -49, 86, -119, -36, -108, -75, -7, -2, 53, 5, 118, 116, -83, -107, 70, 68, 64]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[37, 118, 0, 119, 118, -38, 90, -73, 65, 63, -107, 62, -69, 62, -54, -97, -5, 48, 110, 20, 0, 120, 66, 39, -50, 117, -112, -92, 84, 50, -118, 29, 86, -119, -36, -108, -75, -7, -2, 53, 5, 118, 116, -83, -107, 70, 68, 64]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[102, 0, -110, -63, 63, -107, -113, -8, 70, 117, -15, 17, 69, 98, 81, 37, 77, -54, -19, -10, -65, -88, -85, 21, -102, -73, 77, -21, 107, 15, -2, 55, 74, -112, -104, -59, -112, -108, -11, 84, 27, -13, 88, -56, 19, 23, -34, 12, 115, 15, -63, 88, 20, -51, 57, -99, -63, 70, -69, 59, -101, 4, 53, 118, -35, -51, 4, 106, 103, -96, -29, 72, 10, 42, 92, -70, 96, -19, 30, -79, -53, 124, 81, 114, -6, -84, 113, 43, -49, 47, -28, 113, 111, -56, -117, -2, 86, -119, -36, -108, -75, -7, -2, 53, 5, 118, 116, -83, -107, 70, 68, 64]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-64, 33, 26, -25, 6, -62, 19, 67, -43, 18, 122, 125, 127, -67, -117, -7, -85, -120, -58, -59, 67, -41, 99, 92, -86, 59, 113, 51, 14, 96, -98, -37, -70, 75, 43, 21, 112, 53, 56, 96, 39, 125, -83, -22, 28, 75, -53, 53, -80, -17, 53, 119, -79, 83, 27, 68, -13, -22, -37, -106, -96, -28, 68, -52, 84, 125, 53, 54, -19, 46, -58, -115, -101, -128, 48, -8, -84, -94, 85, 31, 106, -47, 103, -88, -52, 90, 85, 65, 111, -19, -74, 101, -101, 127, -95, -39, 86, -119, -36, -108, -75, -7, -2, 53, 5, 118, 116, -83, -107, 70, 68, 64]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 28, -5, 26, -101, 104, -73, -118, 12, 75, -92, 114, -35, -128, -118, -37]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[89, 120, -115, -27, -40, 75, 30, 103, -65, 51, -40, -21, -24, 98, -13, -78]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[121, 24, -95, -20, 35, 105, -115, -7, -43, -122, 10, -11, -121, 62, 107, 125, 113, 88, -6, -57, -48, 94, -127, -57, 93, 72, 91, -61, -71, 34, -78, 34, 34, -2, 6, -77, 73, -73, 66, -74, 2, -16, -68, -89, -4, 41, 28, -53, 64, 96, -2, -126, 32, 99, -46, -92, 27, -64, -28, -108, -90, -116, 26, 43, 91, -128, -28, 107, 5, 28, -27, 4, -40, -64, -115, 67, 0, -2, 107, -32, -119, -100, -87, -109, 89, -88, 48, 47, 88, -112, 3, -121, -55, -58, -30, -78, -1, 28, -5, 26, -101, 104, -73, -118, 12, 75, -92, 114, -35, -128, -118, -37]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-27, 105, 109, -101, -18, -3, -102, -114, 67, -56, -26, -50, -104, -110, 16, 124]");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-50, 9, -10, -72, 60, -92, 122, -66, -17, -69, 36, 61, 46, -51, 102, -83]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-62, -38, 36, -112, 103, -113, -19, 17, 30, -57, -10, -113, -124, -14, -52, 28]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-108, 58, 53, 56, 46, -101, 40, -3, 118, 67, 61, -128, -84, 103, 77, -100, 103, 23, 103, -36, -9, -44, 108, -51, -91, -30, -114, 90, -80, -122, -22, -13, 84, 103, -16, -74, 70, 38, 120, -7, -67, 23, 123, -33, 3, 76, -80, -89, -102, 108, -90, 44, 55, 116, 22, 92, 21, 70, 8, 64, 60, 50, 118, -84, 104, 76, 40, -68, -118, -61, -63, 105, -97, -26, -67, 35, 38, 118, 22, -73, 62, 21, 44, 4, 3, -4, 111, 19, -47, 113, 89, -53, -2, -115, 62, -48, -50, 9, -10, -72, 60, -92, 122, -66, -17, -69, 36, 61, 46, -51, 102, -83]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-7, -18, 35, 105, -86, 125, 93, -14, -70, 120, -81, -12, -49, 8, -66, 37, -95, 90, -102, 109, -103, 23, -1, 70, 47, 8, 21, 109, -60, -33, -50, 31, -50, 9, -10, -72, 60, -92, 122, -66, -17, -69, 36, 61, 46, -51, 102, -83]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-103, -54, -100, 62, -48, 39, 2, 39, -51, -100, -36, 38, 46, 122, 74, -70, -34, -78, 95, 52, 102, 11, -59, 14, 55, -100, -6, 56, -72, -1, 0, -114, -31, -24, -101, -12, -11, 52, -8, -42, 108, -91, -43, 110, 48, 111, -28, -58, -65, -83, -77, 32, -112, -99, -54, -19, -31, 13, 25, 20, -55, -26, -108, 104, 17, 95, 65, 68, -20, -115, 53, 53, 56, 69, 38, -67, -59, 14, 85, -120, -54, 81, -79, 70, 90, 6, -29, 117, -5, 57, -39, -123, -49, 8, 95, -36, -50, 9, -10, -72, 60, -92, 122, -66, -17, -69, 36, 61, 46, -51, 102, -83]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey41);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey62);
        byte[] byteArray66 = new byte[] {};
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray66);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey68);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey72);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey72);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey72);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey72);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey72);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey72);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey72);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey72);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey72);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[99, 69, -75, -94, 15, -86, 73, 102, 101, -122, 56, 44, 70, 40, 8, 86]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-98, 96, -66, -44, 34, 106, 35, 79, -41, -54, 22, 6, -74, 48, 31, -86]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-83, -36, -8, -29, -117, -30, 78, -13, 19, 107, -107, 112, 119, 103, -61, -84]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[68, -45, 67, 77, -83, -45, -27, -117, 90, 65, -43, 72, -35, -28, 86, 32]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-118, 43, -66, -99, 4, 65, -65, -85, -107, 98, -22, 40, 52, 109, 5, -77]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-102, -9, 26, -15, 113, 69, -22, -77, 40, 80, -3, -103, 96, -40, 84, -32]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[53, 125, 48, -72, 51, 33, -84, -27, -64, -58, -59, -12, 58, 49, 28, -121]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[116, 125, 33, 94, 0, -102, 57, 122, -10, 1, 29, -106, 3, 6, -4, 42]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[36, -2, 37, 39, -81, 54, -103, -126, -29, -91, 58, 102, -53, -118, -40, -26, -59, 71, -119, -43, 71, 47, 99, -47, 100, 110, -13, 86, -93, 29, -105, -47, 53, 125, 48, -72, 51, 33, -84, -27, -64, -58, -59, -12, 58, 49, 28, -121]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-60, -74, -110, 83, 61, 58, 126, 14, -12, -37, -77, 63, 110, -84, 29, 38, 106, -91, -74, 11, -17, -121, -92, -47, 82, 34, 3, -17, -120, 76, -66, 2, 53, 125, 48, -72, 51, 33, -84, -27, -64, -58, -59, -12, 58, 49, 28, -121]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[59, -6, -37, -66, -35, -15, 18, 0, -123, 42, 65, -78, -64, -94, 4, 122, -119, 37, 83, -107, -88, 114, 39, 65, -14, -86, 87, 4, -66, -99, -65, -54, -95, 1, 105, -120, -52, 109, -47, -112, 93, 77, -95, -33, -91, 2, -16, -9, 74, 23, -88, -123, 22, 28, -120, 108, -51, -78, -52, -94, 22, -71, 14, -64, -118, -22, 74, -83, 34, 119, -119, 2, -22, 94, -56, -22, 78, 78, -78, -123, -38, 49, -54, 126, -107, 88, 55, -20, -51, 96, -48, -1, -51, -102, -32, 68, 53, 125, 48, -72, 51, 33, -84, -27, -64, -58, -59, -12, 58, 49, 28, -121]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-31, -6, -32, 123, 118, 89, 88, -108, -16, -86, 36, -126, 58, -4, -11, -9, -32, 105, -19, 103, 56, 81, -49, 103, -27, 23, -49, -79, -26, 33, 109, -29, 53, 125, 48, -72, 51, 33, -84, -27, -64, -58, -59, -12, 58, 49, 28, -121]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-75, 111, -38, -14, 17, 0, -102, -110, -95, 49, -16, 113, 18, 83, -55, -128]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[24, 65, 117, 97, -106, -89, 102, 63, -56, -26, 71, -38, 63, 16, 8, -48]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[29, 41, 67, -75, -125, -35, -29, 24, -40, 41, -79, -70, -43, -8, -118, 10]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[34, 41, -21, -59, 70, 36, 64, -80, -47, 59, -25, 44, 109, 43, -63, -13]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-20, -105, 69, -101, -128, 39, -83, -69, -69, 124, -23, -97, -16, 81, 42, -62, 61, -22, -12, 24, 57, 69, -30, -47, -79, -82, -51, 79, 70, -55, -59, -15, 29, 41, 67, -75, -125, -35, -29, 24, -40, 41, -79, -70, -43, -8, -118, 10]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-40, -8, 110, 64, 37, 29, 43, -27, 39, 25, 32, -113, 51, -76, 103, -19, 7, -87, -21, -33, -18, 55, 39, 7, -110, 32, -114, -102, -86, 101, 15, -122, 29, 41, 67, -75, -125, -35, -29, 24, -40, 41, -79, -70, -43, -8, -118, 10]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-105, 106, 66, 20, 122, -116, -60, -20, -47, -46, 115, 19, -85, -82, -10, 106, -114, 118, 80, -30, 99, -70, -8, -69, 51, 124, -34, -51, -31, -13, 32, -30, -16, -128, -97, 81, -85, -106, 82, -42, -93, 92, -83, -46, -113, -72, -103, 16, -88, 90, -41, -95, 124, 20, 65, 64, 54, -56, 68, 7, 49, 19, 87, -93, 15, 120, -36, 75, 124, 37, 87, -125, 57, 102, -99, -125, 27, 76, -111, -24, 44, 115, 34, -70, 117, 96, -100, 53, -109, 23, -13, -82, 119, 118, 71, -66, 29, 41, 67, -75, -125, -35, -29, 24, -40, 41, -79, -70, -43, -8, -118, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-72, 94, -25, 35, -113, -75, 66, -17, 121, 96, 120, 66, 64, -55, 33, 83, 5, 22, -38, 16, -64, -123, -120, 111, -113, -94, 95, -85, 63, 53, -94, -76, 1, 88, -52, -61, 0, -8, 54, 56, 14, 72, -27, 16, -40, -22, 9, -71, 88, -18, -33, 68, -82, -103, 52, 84, 125, 79, 80, 118, 73, -57, -122, 107, -15, -51, -50, -103, 0, -127, 36, 111, 2, -43, -12, -7, -63, 13, 22, 110, 28, 114, 122, -121, -9, -114, 121, 126, 81, 89, -6, 116, 73, -7, -62, 70, 29, 41, 67, -75, -125, -35, -29, 24, -40, 41, -79, -70, -43, -8, -118, 10]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-77, 101, 71, 27, 63, -118, -50, 124, -55, -29, -110, 35, 7, -73, -42, 107, 20, -21, -127, 94, 111, -23, -15, -30, -85, 123, 116, 43, -23, 74, 66, -34, 94, 120, -56, 12, 54, 105, 121, -33, 94, 100, 0, 69, -111, 70, 124, -65, -84, 49, 121, 48, 69, -49, -95, -104, 57, 21, -3, 26, 125, -3, -82, 60, 36, -118, 37, 57, -51, -52, 35, 112, -29, 33, -122, -38, 49, 82, -81, -53, 97, 105, -26, -95, -106, -62, -51, -5, -23, -71, 93, -115, 39, -17, 93, 110, 29, 41, 67, -75, -125, -35, -29, 24, -40, 41, -79, -70, -43, -8, -118, 10]");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey22);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey75);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey86);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey86);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey86);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey86);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey86);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey86);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-82, -53, -75, -105, -18, -7, -3, 19, 107, 15, -92, 99, -99, 117, -56, -89]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[111, 93, 122, -5, -110, -69, 22, 100, -11, 48, 111, -86, -121, -59, -67, -82]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[12, 29, 68, 92, -23, 69, -34, -119, -120, -54, 66, 17, 48, -101, 11, 4]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[72, -92, -79, -3, -116, -60, 31, 123, -121, -55, 78, 67, -75, -27, 70, 74]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[102, -2, 67, 118, -61, -90, -71, -49, -5, -53, -29, 3, 6, -112, 89, -17, -90, 126, -62, 65, -126, 94, 25, 73, -22, -76, 8, 13, -21, -72, -70, -117, 12, 29, 68, 92, -23, 69, -34, -119, -120, -54, 66, 17, 48, -101, 11, 4]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-87, 93, 61, 46, -121, -9, 37, -35, -87, -113, 18, 79, 18, -66, 52, -110, -29, 6, -99, -33, -73, -47, -121, -77, -100, -105, 92, 39, -107, -58, -53, 75, 12, 29, 68, 92, -23, 69, -34, -119, -120, -54, 66, 17, 48, -101, 11, 4]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-6, -19, -85, 120, -39, 55, -54, -17, 64, -67, 65, 60, 78, 69, 115, -84, -98, -31, -33, 90, -1, 68, -26, 20, 39, -58, -119, 10, -16, -120, -9, -128, 74, 80, 127, 31, 6, 74, -114, -69, -124, -40, 85, -8, -45, 49, 47, -104, -16, 56, 100, 84, 27, -86, -109, -58, 2, 59, -82, -72, 43, -69, -70, -1, -16, 86, -126, 38, -97, 60, -67, -91, -109, -10, -7, 111, 47, -42, -27, 86, 60, -92, 103, -9, -116, 71, 15, -69, -123, -128, -91, 0, -103, -105, 20, -123, 12, 29, 68, 92, -23, 69, -34, -119, -120, -54, 66, 17, 48, -101, 11, 4]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[54, 86, 97, 39, -76, -10, -8, 107, -72, -80, 126, -117, 48, -119, 92, 93, -115, 21, 112, -75, 127, 0, 81, -108, 1, -15, 95, -126, 72, 116, 86, -53, 12, 29, 68, 92, -23, 69, -34, -119, -120, -54, 66, 17, 48, -101, 11, 4]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[50, -104, -75, 19, 86, 82, 4, 109, 101, -125, 88, -105, 92, -14, 28, 44, 114, -11, 63, -113, 28, -4, -11, -86, -85, 92, 59, 48, -59, 81, -103, 87, -123, -101, 37, -113, -113, 48, -18, 100, 98, 85, -79, 41, 15, 33, -38, -46, -35, -91, -77, 89, -28, 102, 9, 127, -119, -93, -37, -115, -17, 33, -66, -15, -107, -94, -21, 115, 22, 111, 1, -39, -4, 122, 34, 86, -27, -87, -88, -124, -22, 57, -1, -92, 91, 37, 109, 48, 42, -81, -63, -98, -33, -71, -24, 31, 12, 29, 68, 92, -23, 69, -34, -119, -120, -54, 66, 17, 48, -101, 11, 4]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[127, 17, -128, 3, 47, 94, 58, -85, -91, -105, -48, 62, -65, 20, 106, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[106, -11, 84, -2, -123, 121, 95, -28, 14, -88, -38, 68, -110, -6, 41, -78]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[87, -95, -92, -70, -42, -70, -22, 82, -32, -39, -40, 53, -66, -45, -6, 3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 18, -48, 33, 32, 41, -50, -2, -44, -110, -102, -16, 2, -117, 57, 62]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[41, 100, -44, 55, 99, -44, -118, -30, 109, -66, -6, 95, -63, 123, 33, -9]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-120, 99, -29, -47, -109, 26, 91, 111, -68, 55, -85, 28, -55, 41, 52, 68]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-8, -50, -85, -96, 127, 94, 56, -7, -94, -26, 18, 67, -70, 28, 6, 126]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-6, -78, 26, -31, 109, 6, -31, -105, -47, 110, 95, -34, -80, -27, -101, -23]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-33, -47, 48, -15, -36, 46, 107, -57, -108, -46, 116, -33, 3, -9, -17, -49]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[17, -115, -127, 9, 30, 55, 68, 91, -16, -45, -36, 65, 24, -29, 40, -56]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-49, 71, -38, 66, 40, 73, 79, -31, -30, 28, 39, 89, 108, -25, 96, 122]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-62, -39, 65, 46, 54, -66, 67, -7, -18, 89, 108, 126, -51, 108, -76, -46]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[17, -115, -127, 9, 30, 55, 68, 91, -16, -45, -36, 65, 24, -29, 40, -56]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[58, 104, -53, -9, 114, -30, 16, 100, -104, 28, -82, 13, 10, -94, 72, 72, 109, -12, -17, 79, -15, -57, 34, -76, -14, -38, 99, 92, 72, -32, 77, 3, -77, 6, -73, 6, 119, 86, -100, -94, -62, 38, -58, -127, 50, 89, 112, -126, 107, -107, 91, -47, -5, -8, 117, -101, 80, 74, 120, -77, 49, 83, -2, -66, 4, -33, 73, -35, -109, 86, -27, 2, 22, 52, -87, -34, -78, -1, 36, 76, -103, 102, 117, -113, 37, -1, 71, 55, 22, 5, 65, 74, 15, -53, -25, 92, 17, -115, -127, 9, 30, 55, 68, 91, -16, -45, -36, 65, 24, -29, 40, -56]");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-37, 60, 59, -100, 122, -100, -119, 80, 4, -39, -86, -67, -26, -127, 68, -113, 105, -126, -116, -115, -96, 3, -116, 126, -54, -67, -110, 109, -78, 92, -62, -83, -64, 121, -43, 67, 119, -57, 27, 102, 54, 89, 76, 96, -121, -41, 111, -20, 75, -87, 3, 100, 65, 60, -66, -42, 20, -78, -121, 35, -4, -29, 25, -75, -1, -63, -26, 14, 120, -79, 81, -43, 0, -68, 105, -124, 37, -125, 56, 69, 85, -20, -84, 94, 93, -30, 12, -91, -99, 98, -73, 23, 33, 70, 9, -116, 17, -115, -127, 9, 30, 55, 68, 91, -16, -45, -36, 65, 24, -29, 40, -56]");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-59, 36, -72, -21, 33, 66, 111, -51, 53, -48, -54, 16, 74, -100, -103, 75, 15, 30, -86, -15, -66, 113, 55, 73, 126, 121, 113, -107, -104, -36, -123, -61, -29, 52, 10, -123, 16, 54, -112, 38, 82, 50, 11, -100, 29, 100, -6, 31, -43, 14, 14, 73, 109, -4, -60, 123, 6, 117, -17, 109, 56, 13, -4, -43, 17, -25, 26, -61, -10, 85, -22, -31, 33, -43, -96, -74, -60, 124, 122, -9, -42, -88, -51, -117, -124, 85, 68, -117, 98, 25, -15, -128, -83, -118, -15, 51, 17, -115, -127, 9, 30, 55, 68, 91, -16, -45, -36, 65, 24, -29, 40, -56]");
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey21);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey60);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey60);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey60);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey60);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey60);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, -66, -9, 106, -45, -103, -116, -119, 8, 99, 45, 62, 97, 104, -79]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-3, 32, 52, -83, -113, -124, 55, -69, 91, -59, 83, 74, 126, 23, 87, -49]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[35, -125, 84, 109, -4, 14, -48, -100, 28, -60, -24, 59, -78, 42, 63, 4]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-113, -17, -38, -28, 56, 120, -38, -18, 83, -115, 7, -76, -26, 87, 76, 110]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[66, 78, -18, 90, -76, -9, -105, -107, 9, 50, -25, 73, -97, -107, -74, 9, 117, -89, 103, 68, 76, -73, -75, -112, -28, -123, -8, -127, -39, 125, -29, 121, 35, -125, 84, 109, -4, 14, -48, -100, 28, -60, -24, 59, -78, 42, 63, 4]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[42, -118, -22, 125, -22, 93, 56, 89, -115, -110, 37, 103, -78, 47, -22, -80, -34, 48, 54, 39, -17, 71, -9, 0, -85, 13, 82, 20, -6, 40, -47, 39, 35, -125, 84, 109, -4, 14, -48, -100, 28, -60, -24, 59, -78, 42, 63, 4]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[50, 126, 39, 27, 78, -46, 68, -78, -32, -128, -103, -128, -38, -107, 84, -43, -18, -65, 56, 28, -35, -56, -88, 122, 5, 55, 111, 43, -109, 127, 118, -67, -54, 57, 1, 27, -6, -81, 52, 28, -113, 111, -72, -57, -115, 88, -113, 89, 79, 46, 116, -17, 48, 92, -12, -45, 50, 33, 18, -2, -112, 49, 12, -10, 18, 19, 53, -48, -53, -11, 117, -73, 23, 40, 108, 63, 99, -92, -28, 57, 93, -121, -53, -107, -44, 75, 59, 127, 32, 73, 68, 93, -22, 22, 76, 89, 35, -125, 84, 109, -4, 14, -48, -100, 28, -60, -24, 59, -78, 42, 63, 4]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-79, 21, 61, -83, -106, 68, -67, -74, 45, -103, 59, 41, 112, -58, 78, -10, -52, 115, 26, -109, -4, 126, -18, -13, 44, 9, 82, 8, 68, -21, 125, -15, 53, -55, 78, 93, 50, -46, -118, 76, -78, 88, -107, -27, 62, 18, 99, 69, 75, -64, -93, 27, -22, 114, -63, 86, -123, -90, -47, -44, -103, 7, -122, -11, -58, -127, -114, -81, 11, -81, 57, -39, 99, -76, 72, 13, 96, 92, -87, 36, -101, -35, 120, 54, 119, 30, -126, 85, 42, 14, 44, -42, -3, 5, 30, 96, 35, -125, 84, 109, -4, 14, -48, -100, 28, -60, -24, 59, -78, 42, 63, 4]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[60, 66, 116, -121, 4, 60, 113, -98, -57, 83, 73, -127, 4, -119, 92, -118, -48, 35, 31, -65, -23, -89, 11, -19, 49, -30, -20, -65, -100, 89, 91, -36, -72, -47, -37, 105, 36, 38, -42, -120, 46, -117, -96, -23, 33, -57, -29, -37, 79, 45, 114, -64, 107, -60, -35, 21, -9, 34, 36, -74, -68, -43, 34, -35, -29, -124, 37, 76, 65, -54, -109, 54, -78, -46, 65, 95, -55, -17, 57, 109, 42, 20, 68, -119, -1, -82, 35, 77, 97, 74, -19, 37, -88, 14, -10, -40, 35, -125, 84, 109, -4, 14, -48, -100, 28, -60, -24, 59, -78, 42, 63, 4]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[50, -81, 33, -8, 47, -13, -52, 92, -83, -99, -52, 111, -19, 64, 43, 30]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-17, -7, -104, 122, -77, 104, 72, -70, -89, -109, -7, 36, 24, -1, -119, 63]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[25, -115, 72, -76, 114, -76, 114, 76, -16, -46, -86, 105, -122, -113, -74, 41]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[89, 48, 86, 85, -56, 101, 125, -92, -85, -34, -39, 15, 28, -117, -112, -90]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[6, 118, 36, -111, 11, 52, -99, 85, -86, 35, -59, 83, 39, 39, -21, -88]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[33, -57, -69, -40, -59, 63, -35, -85, -60, 111, 4, -88, -106, -15, -126, -14]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[33, -57, -69, -40, -59, 63, -35, -85, -60, 111, 4, -88, -106, -15, -126, -14]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-22, -32, 98, 43, -5, -83, 39, -58, -40, 29, -56, -12, 28, -78, 75, -112, -5, -49, 11, 71, -102, 40, 53, -58, -71, -64, -57, 79, 41, 64, -19, -6, 6, 118, 36, -111, 11, 52, -99, 85, -86, 35, -59, 83, 39, 39, -21, -88]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[121, -28, -80, -1, 25, -110, 73, -71, 106, -110, 103, -54, -34, 115, 127, -46, -110, -96, -55, 122, -93, -85, -10, 70, -42, 28, -79, -30, -20, 109, -3, -86, 6, 118, 36, -111, 11, 52, -99, 85, -86, 35, -59, 83, 39, 39, -21, -88]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-113, -46, 12, 123, -61, 26, 59, 32, 49, -83, -95, 51, -128, -37, 79, -38, 55, 87, 41, 97, 13, 12, 46, -114, -116, 54, -121, 101, -58, 109, 66, -70, 6, 118, 36, -111, 11, 52, -99, 85, -86, 35, -59, 83, 39, 39, -21, -88]");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey20);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey33);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[14, -9, 90, -97, 115, 109, -20, -40, -79, -76, 78, 99, 33, 109, 59, -62]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[76, 90, -67, 10, -81, -64, 90, -60, -105, -50, -28, -7, -17, 98, -13, -48, -30, -63, 69, 10, 20, -74, 48, 61, 98, -33, 39, -77, -48, 80, 66, 50, -56, -115, -19, -88, -14, 43, -99, 77, 12, 38, 70, 81, 40, 56, 113, 98]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[29, 98, 122, -14, 80, 19, -43, 48, -3, 6, 31, 38, -81, 38, 5, 13]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-23, -41, 77, -84, 9, 112, -34, 107, -89, 55, -83, -12, -49, 11, 33, -80]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-43, 46, -123, -55, -97, 62, 60, -69, 61, 57, 61, 84, 19, 43, -19, -4, 102, -114, -98, -85, -36, 11, 36, 106, 126, -3, -97, 87, -61, -91, 107, -75, -84, 81, -105, -99, -120, -84, 70, -88, -95, -67, -6, 49, 110, -80, -86, 102, 17, -101, -101, -111, 79, -86, 113, -69, -109, -94, -67, 72, -117, 83, -29, 98, -107, 36, 65, -93, 21, -92, -31, -47, 107, -43, -124, 54, -8, 122, -46, 73, -24, 35, -101, 32, -31, 17, -96, -119, 114, 19, 54, 43, -43, -87, 89, 32, 29, 98, 122, -14, 80, 19, -43, 48, -3, 6, 31, 38, -81, 38, 5, 13]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[62, -96, 81, -106, 101, 8, 110, 27, 66, 92, -105, 28, -79, -59, -92, 83]");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey11);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey9);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.Class<?> wildcardClass20 = byteArray18.getClass();
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[61, 49, 7, -96, 80, -8, -26, 4, -84, -2, 68, 41, -34, -79, -84, -106]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[119, -73, 121, 112, 94, 111, -10, -15, -48, 93, 99, -64, -44, -76, -87, -44]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[119, -73, 121, 112, 94, 111, -10, -15, -48, 93, 99, -64, -44, -76, -87, -44]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[82, -2, 111, -2, -123, 1, 48, 101, 9, 25, 77, -118, -24, -36, -18, 95]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[119, -73, 121, 112, 94, 111, -10, -15, -48, 93, 99, -64, -44, -76, -87, -44]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-50, -1, 92, 86, -124, -46, 83, 88, -76, 35, -35, -55, 52, -3, -52, -70, -124, 61, 30, -105, 45, -36, -115, -2, 113, -38, -111, 52, 79, 110, -111, 6, 61, 49, 7, -96, 80, -8, -26, 4, -84, -2, 68, 41, -34, -79, -84, -106]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-123, -13, 115, 81, -50, 61, 1, 119, 31, -71, -38, 127, -35, 31, -22, -70, 0, 39, -61, 91, 29, -68, -101, -31, 13, -91, -109, 88, 108, 67, 35, 54, -14, 90, -105, 89, 105, 58, -56, -107, 21, -35, 15, 111, 60, -115, 79, 37, 3, -119, 6, -104, -75, 21, 50, -39, -27, 10, -23, -36, -105, -10, 57, 7, 112, -88, 9, -125, 87, -95, 37, 127, 21, 59, 115, 105, 71, 113, 69, -58, -54, 122, -106, -73, -5, -29, -94, -64, -95, -92, -97, 119, -93, -18, 7, 18, 61, 49, 7, -96, 80, -8, -26, 4, -84, -2, 68, 41, -34, -79, -84, -106]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-65, 118, -27, 91, 125, -95, -43, 7, -94, -124, -106, -32, -33, -82, 71, 10, 64, 13, 67, 6, -109, 29, -28, 67, 59, -63, 87, -114, -117, 105, 57, 108, 40, -82, -57, -101, -91, 63, 61, -66, -124, 23, 45, -52, 44, 85, -50, 44, 2, 26, -99, 125, -6, -116, 42, -20, -96, -36, 48, 124, 127, 57, 38, -77, 66, 69, 112, 9, -111, -70, 49, -63, -64, -79, -128, 101, -89, -102, -91, 60, 107, 96, -128, -89, -43, -25, 20, 20, 121, -102, 95, -42, 65, -51, 91, 22, 61, 49, 7, -96, 80, -8, -26, 4, -84, -2, 68, 41, -34, -79, -84, -106]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "3D515EE06FD2B87EB56EDD7A17F930C8C9A116BF7E8E782A6D14839A271125D9B5FC655EC15E6D8300FCA04D3C6D0FED762E5C605835DF03D21B87CED4B3E47704CCC808EE82D5B5C3794D5FA68BB5C1375AB1051056C084515BE83D5CC6B52F53A580EFF2E94059A29ED571243449A3534724152DF435FA7BD77C7FB3D7CF61936D6C263DB7E709A5FFA217F4FDF5F0A114BE8A02B9DFCB1658D1151B041BDFBE90F0F1EA0B760D1F5BB5B4602BE3377B1A950C708A014681E99D334CA283946B78169ABFAB3EA68076DD682DF557CF47210A137DD2F704594CFB5EE4E9001B3D3107A050F8E604ACFE4429DEB1AC96" + "'", str19, "3D515EE06FD2B87EB56EDD7A17F930C8C9A116BF7E8E782A6D14839A271125D9B5FC655EC15E6D8300FCA04D3C6D0FED762E5C605835DF03D21B87CED4B3E47704CCC808EE82D5B5C3794D5FA68BB5C1375AB1051056C084515BE83D5CC6B52F53A580EFF2E94059A29ED571243449A3534724152DF435FA7BD77C7FB3D7CF61936D6C263DB7E709A5FFA217F4FDF5F0A114BE8A02B9DFCB1658D1151B041BDFBE90F0F1EA0B760D1F5BB5B4602BE3377B1A950C708A014681E99D334CA283946B78169ABFAB3EA68076DD682DF557CF47210A137DD2F704594CFB5EE4E9001B3D3107A050F8E604ACFE4429DEB1AC96");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("7CA49FB87215185DDB50BA3084C558F36D00F53E952403E977CB3632DE840FE960FDBC24442AAAB8B37E391826BC1C1E87980A92D112094033FD24B876593F2EF6182DB6D31A14F6B8E49CEEC74CA7003F717F754356175B555ECF25F8DE63FBA48E91FA121C2BA2CB8028DB8F7D15CD", secretKey7);
        java.lang.Class<?> wildcardClass15 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[16, -104, -102, -5, 93, 33, -17, -31, 18, 110, 56, 94, 53, -34, 32, -77]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[92, -116, 80, 25, -71, -31, 20, 102, -59, 65, 40, -21, -124, 114, 123, 66]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[114, -98, 72, -117, -35, -34, 6, -108, 87, 64, 107, 49, -67, 80, -5, -81]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[49, -114, 16, -14, -126, -5, 104, -89, -106, -77, -55, -60, 22, -72, 61, 3, 92, 91, -32, 109, 87, 37, 60, -52, 64, 50, -95, 95, -3, -8, -102, 21, 16, -104, -102, -5, 93, 33, -17, -31, 18, 110, 56, 94, 53, -34, 32, -77]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[8, -57, -89, 37, 28, 52, 92, -39, -103, 113, 75, -3, 15, 96, -54, -2, -65, 114, -46, -33, -25, 63, -60, -55, 41, 116, -89, -73, 51, -106, -21, 63, 16, -104, -102, -5, 93, 33, -17, -31, 18, 110, 56, 94, 53, -34, 32, -77]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[99, 78, 41, -17, 72, -108, -4, -112, -124, -60, 98, -18, 3, -109, -95, 87, 87, 32, -128, 49, -77, -63, -111, -73, -51, 91, -34, 123, -115, 90, 48, 83, 16, -104, -102, -5, 93, 33, -17, -31, 18, 110, 56, 94, 53, -34, 32, -77]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[83, 93, -31, -50, 47, 90, 100, 14, 83, 69, -101, -24, -26, -47, 49, 54]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[33, -51, -89, 61, -55, -77, 71, 122, 119, 68, 112, 75, 57, 95, -68, 62]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[48, -72, 116, 106, 62, -45, 29, 75, 68, -127, -4, -39, -100, 58, -91, -14, 126, 61, -96, -116, -6, 4, -46, 90, 123, -103, -64, -121, 102, -96, 43, -98, 83, 93, -31, -50, 47, 90, 100, 14, 83, 69, -101, -24, -26, -47, 49, 54]");
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9E3FA735129C449B99534E5E23A8CD37381E7A83D9BEBA2014B2C5301D9CBF2939A122A8A7ABF168E3D309422D89A40503600C06C72412872F119661B5C91C2BFDDB687C5C90027C4E4E15C34EB35CC5B0D23EEB4FEA44B6705E349738317C8F3FE0B5B4056E29386E3DEF440334A03F", secretKey21);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey52);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey52);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-11, 102, -87, -85, -4, -76, 3, 127, -101, -125, -91, 5, -29, -122, -124, -47]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-89, -8, 82, 9, 4, 40, 19, -120, 104, -22, -128, -125, 87, -42, 119, -23]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-105, 88, -20, -86, -64, -19, 60, 19, -43, 123, -96, -39, -2, -34, -31, 44]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[123, 24, 107, 36, -85, -59, -126, -32, -49, -40, -18, 5, 112, -56, -1, -76]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[36, -37, 121, 29, 85, -116, -88, -101, 110, -63, -5, -68, 115, -13, -67, 123, 13, 57, -92, -64, -126, -74, 34, -21, 11, 46, 43, -82, 117, 103, 12, 93, -105, 88, -20, -86, -64, -19, 60, 19, -43, 123, -96, -39, -2, -34, -31, 44]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-95, 21, 55, -17, 15, 28, -12, -62, 127, -28, 82, 80, -36, -51, -87, 82, 60, 44, -58, -22, -64, 124, 114, 88, -62, -50, 102, 24, 88, -32, 105, -20, 36, -8, 117, 7, -66, 97, -20, 111, 62, -110, 84, -32, 91, 112, 33, 79, -32, -110, -75, -59, 61, 109, 73, -112, -84, -32, 121, 117, 21, -100, -38, 114, 33, -76, -18, 98, -34, -38, -84, 54, -125, -104, 47, 103, 0, -1, -20, -84, 49, 117, -3, 71, -26, -74, 38, 23, 86, -85, -73, -128, 28, 83, 15, -100, -105, 88, -20, -86, -64, -19, 60, 19, -43, 123, -96, -39, -2, -34, -31, 44]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-73, -17, 51, -53, -82, -4, -20, 47, 29, -115, -56, 116, 15, 81, 12, 59, 42, -35, -76, 23, 121, 10, -106, 6, -10, 68, -112, -64, 89, -106, -68, -29, -105, 88, -20, -86, -64, -19, 60, 19, -43, 123, -96, -39, -2, -34, -31, 44]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-105, 88, -20, -86, -64, -19, 60, 19, -43, 123, -96, -39, -2, -34, -31, 44]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[103, -77, 65, 113, -4, -106, 114, -54, -4, -2, 55, -92, 94, 93, -78, 114]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[127, 24, 88, 104, -58, -128, 87, 33, 33, 40, 78, 77, 59, 32, 80, -69]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-48, -24, -111, 78, 0, 19, -80, -81, -87, -83, 37, 119, -45, -41, 118, 56]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[92, 26, -70, 23, 52, -35, -51, 41, -54, -33, 113, -45, -35, 127, 47, 123]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[23, 87, -9, 126, -104, -32, 62, 37, 27, 91, 7, 111, -3, 8, -106, -4, 7, -81, -55, -103, 42, 30, -94, 73, 8, -8, 34, -28, -36, 57, 60, -104, -48, -24, -111, 78, 0, 19, -80, -81, -87, -83, 37, 119, -45, -41, 118, 56]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-107, 35, -98, -106, -93, -63, 94, 32, 24, 43, -44, -79, 120, 89, 7, 72, -73, -33, 95, 14, -99, 47, -99, -71, 6, 118, -59, 92, -111, 38, 88, -86, -54, -87, 50, -90, -74, -5, -99, 127, -78, -31, -62, -15, 5, 61, -87, -38, 48, 66, 92, 3, -25, -68, 69, -17, -55, -102, -28, 69, 120, -38, -128, -102, 123, 44, -40, 120, -94, -43, -77, 47, 7, -3, 114, 115, -31, -52, -16, -109, -70, -72, -18, 14, -3, -111, 2, -94, -1, -57, 112, -121, 121, 2, -120, -47, -48, -24, -111, 78, 0, 19, -80, -81, -87, -83, 37, 119, -45, -41, 118, 56]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-28, -11, 74, 89, 52, 78, -111, -66, 54, -22, 79, 103, 45, 92, 84, 71, 38, -33, 10, 55, -47, -72, -20, 17, 69, -69, 28, 19, 76, 77, -65, -57, -48, -24, -111, 78, 0, 19, -80, -81, -87, -83, 37, 119, -45, -41, 118, 56]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-48, -24, -111, 78, 0, 19, -80, -81, -87, -83, 37, 119, -45, -41, 118, 56]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-35, -27, -85, -56, -94, 90, 69, -117, -121, 97, -13, 23, 93, -66, -9, -76, -103, -46, 75, 109, 94, 102, 83, 39, 89, -51, 117, -5, 80, 46, 32, 34, -48, -24, -111, 78, 0, 19, -80, -81, -87, -83, 37, 119, -45, -41, 118, 56]");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey35);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey40);
        java.lang.Class<?> wildcardClass43 = secretKey40.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[64, -123, 101, 100, -117, 10, -29, 63, 100, -104, -28, 91, 54, -83, 26, -41]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[110, -80, -16, -35, 64, 25, -44, 16, -98, -109, -43, -125, -26, -110, -28, 117]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-9, -83, -111, 106, -11, 7, -76, 98, -97, -97, -120, -38, 11, -106, 27, -63]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, -127, -71, -117, 51, 49, -30, -117, 35, 122, 118, 100, -37, -76, -70, -13]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-85, -12, 79, -16, -29, 21, 86, -1, -93, 25, -65, -11, 5, -11, 116, 91]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[33, -88, -124, -1, 15, 39, -49, -44, 65, 66, 56, 47, 60, -46, 56, 101]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[109, -110, 115, -23, -64, 78, -67, -10, -85, -48, -46, -75, -64, -51, -26, 31]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-85, -12, 79, -16, -29, 21, 86, -1, -93, 25, -65, -11, 5, -11, 116, 91]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[73, 29, -28, -72, -7, -18, -51, 84, 71, 18, 12, 39, -73, 55, 103, 67]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-11, 49, 62, 38, -33, 107, -88, 110, -122, -80, -49, 79, 70, 94, -66, 57, 100, 106, 95, -64, 54, 38, 111, 47, -107, -87, -87, 97, -64, 125, -14, 121, -35, -110, 42, 86, -108, 66, -62, 113, -96, -112, 58, 28, -65, -100, 44, 107]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[88, -65, -122, -108, 11, -112, -68, -97, -26, 8, 80, -100, 4, 80, 26, 15]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey8);
        java.lang.Class<?> wildcardClass17 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[36, 60, -49, 31, 95, 5, 3, 26, 54, -59, -88, 58, 103, -79, -24, -115]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[85, -2, 39, 114, -120, 76, -49, 51, 81, 90, 114, 62, -50, 71, -60, 35]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[85, -2, 39, 114, -120, 76, -49, 51, 81, 90, 114, 62, -50, 71, -60, 35]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[112, -66, 32, 19, 15, 64, -101, 52, -106, -72, 17, 102, 45, -98, 123, -55]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[36, 60, -49, 31, 95, 5, 3, 26, 54, -59, -88, 58, 103, -79, -24, -115]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[9, -121, 124, 81, 43, 44, 3, -123, 96, 93, -78, -53, -50, 116, 82, 56, -78, 13, 55, 16, 94, 25, 29, 46, -33, 0, -61, -41, -14, 44, -82, 77, 57, -128, -93, -85, 108, -101, 76, -31, 106, 26, -125, 71, 0, 9, 8, -127, -8, 92, -27, 83, 47, 37, 71, 84, 100, 126, -62, -108, -3, 95, -88, 28, -35, 80, 51, -78, 34, -47, -102, 73, 97, 93, 85, -109, 116, -59, -80, -29, 59, -120, -34, 106, 29, -81, 5, 3, -13, -43, 116, -56, 82, -116, 77, -59, 36, 60, -49, 31, 95, 5, 3, 26, 54, -59, -88, 58, 103, -79, -24, -115]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("E252EC95F03F1DCA2D5FB38537A9B130015DC57FC84328A4F6D686305CD72D31929A0B8D747F8A382D1719EE563F8F5D7BC62453E1091D0F23B4F140704CAA48BD24197C59C7E84F2317DB1F84A58500CF0CC4FCCA453C43B38915D03E636A0232EAE4CAD668EA5731855F254DCC2A13", secretKey8);
        java.lang.Class<?> wildcardClass17 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-57, 2, 4, 102, 61, 24, 25, 103, 44, -108, 39, -52, 53, 90, 121, -82]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[88, 127, -102, 122, 50, 62, 68, 11, 82, 29, 84, 88, -20, 124, -64, 89]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[88, 111, -93, -73, -44, 18, 47, 61, 28, 51, -6, 42, 30, 7, 43, 47]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-57, 2, 4, 102, 61, 24, 25, 103, 44, -108, 39, -52, 53, 90, 121, -82]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[82, 3, -7, -62, -93, -111, 18, -55, 24, 92, -112, -22, -42, -88, -42, -58, -84, -116, 2, -83, -26, 42, 9, 3, 11, 93, 5, -119, 104, -75, -52, 44, -57, 2, 4, 102, 61, 24, 25, 103, 44, -108, 39, -52, 53, 90, 121, -82]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-36, 102, -74, 103, 85, -45, -58, -99, 112, -41, 99, 113, -102, -107, 34, -35, 109, -40, -99, 66, 71, -30, -119, 111, 14, -124, 105, 29, -35, -101, 106, -68, -57, 2, 4, 102, 61, 24, 25, 103, 44, -108, 39, -52, 53, 90, 121, -82]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-74, -91, -107, -2, 81, -63, -124, 57, 118, 67, -85, 26, -14, 99, -61, -126]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-109, 90, 58, -9, -74, -104, -70, -123, 8, -34, -46, -59, 23, 8, -16, 117]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-75, 61, 82, 78, 50, 33, 63, 69, -12, 123, -53, -62, 48, 115, 34, -59, 2, -34, -93, -56, -17, -44, 3, 115, 0, -34, 103, 75, 99, -10, -23, 97, -74, -91, -107, -2, 81, -63, -124, 57, 118, 67, -85, 26, -14, 99, -61, -126]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-2, 58, 41, 51, 75, -35, -104, -97, 97, 7, -74, -39, -16, -53, 69, 108, -8, -37, -95, 110, 0, -100, 79, 46, -26, 38, -77, -51, -30, -82, -62, 123, -74, -91, -107, -2, 81, -63, -124, 57, 118, 67, -85, 26, -14, 99, -61, -126]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        java.lang.Class<?> wildcardClass33 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-112, 103, 120, 29, -68, 98, -68, 31, -119, 93, 35, -62, -118, 123, 41, 106]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[6, -36, 116, -10, 79, -46, -127, -62, -22, 14, 114, -120, -97, 3, 7, -18]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[20, -60, 35, 22, -65, 10, 60, -21, 40, -16, -88, 127, 83, 97, -16, 104]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-62, -5, -123, 38, 49, -15, -127, -110, -127, 36, 7, 50, -69, 71, 40, -79]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-48, 42, 115, -34, -58, -42, 6, -73, -106, 18, -111, 5, 58, 61, 90, 40, -21, 64, -114, -78, 83, 82, -37, -43, -58, 34, -63, 122, 29, -43, -69, -103, 20, -60, 35, 22, -65, 10, 60, -21, 40, -16, -88, 127, 83, 97, -16, 104]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-42, 80, 101, 92, -69, -97, 26, 49, -56, -62, 62, -86, -89, 74, 78, 60, -40, 71, -4, 3, 73, -40, 85, 61, -14, 89, 92, 115, -103, -28, 61, 71, 20, -60, 35, 22, -65, 10, 60, -21, 40, -16, -88, 127, 83, 97, -16, 104]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-118, -18, -117, -88, -69, 1, -23, 21, 77, -86, 33, -105, -84, 76, 4, 90, 91, -59, -13, -80, -64, -94, -47, 14, 70, 85, -120, -66, 111, -40, -118, -26, -81, -114, 40, 36, -51, 45, 77, 40, -32, -49, 28, -31, -20, 48, 33, 35, 88, -43, -42, 52, -4, -97, -70, 96, 123, -75, -1, -47, 102, 54, 13, -10, -60, -106, -121, 102, 13, 65, -36, 31, 89, 23, 119, -40, 22, 37, 68, 102, 29, -101, 110, -93, 21, 126, -13, -108, -108, -86, -46, 106, 42, 117, -76, -26, 20, -60, 35, 22, -65, 10, 60, -21, 40, -16, -88, 127, 83, 97, -16, 104]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-93, -31, -5, -39, -106, -30, -124, -76, -82, -10, 11, -114, 28, 83, 71, 57, -72, 83, 39, -85, 1, -47, -3, -8, 3, 36, 93, -111, -103, 66, -100, -11, -20, 49, -103, 116, -112, 18, -50, 80, -68, 125, 1, 89, -18, -40, 63, -120, -92, -46, -2, -15, -107, -4, -118, 118, -40, 16, 115, -93, 32, -92, 117, 25, -70, -90, -24, -27, -127, 8, -11, 15, 79, -49, -13, 121, 58, 11, -118, 27, -67, -68, -18, 117, -86, 122, -50, -107, -30, 33, -101, -57, -68, 6, 69, 82, 20, -60, 35, 22, -65, 10, 60, -21, 40, -16, -88, 127, 83, 97, -16, 104]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-99, -77, -120, -31, -50, -82, 44, 109, -77, 30, -61, -77, 0, 45, -1, 91, 54, 103, 110, -102, 122, -19, 38, -81, -60, 8, -8, -53, -37, 38, 65, 71, 20, -60, 35, 22, -65, 10, 60, -21, 40, -16, -88, 127, 83, 97, -16, 104]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[20, -60, 35, 22, -65, 10, 60, -21, 40, -16, -88, 127, 83, 97, -16, 104]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[17, 56, -121, 24, -42, -32, -39, 98, 100, -85, -85, -1, 70, 18, -60, 66]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-114, -53, -68, -29, 35, 53, 61, -62, 15, -100, -26, 50, 89, -88, -13, 42, -114, -86, 96, 43, -28, -90, -84, 16, -4, 96, 9, -40, 84, -104, 110, -121, -57, -8, 118, -76, 18, 76, 34, -71, 32, 79, -35, -18, 26, 4, -3, -58]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[126, -120, 52, 23, 104, 64, -5, -60, 92, -1, 86, -113, -99, 107, 112, 80, 34, 62, 106, 69, 70, -126, -17, -120, 72, 89, -97, 55, 54, -25, 119, 35, -37, -64, -80, 28, 53, -115, 23, 2, -122, -80, 104, 59, -94, 108, -106, -128, -92, 19, -28, -23, -93, -101, 111, 83, 81, -104, 81, -15, 34, -38, 69, -82, -74, -48, 21, -60, -52, 32, 49, 100, -24, -25, 50, 127, -74, -97, -58, -94, -46, -109, 11, -106, -73, 14, 124, 95, 68, -112, -20, 58, -125, -39, -59, -83, -57, -8, 118, -76, 18, 76, 34, -71, 32, 79, -35, -18, 26, 4, -3, -58]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[127, 20, -84, -45, -40, -61, -50, 53, -111, -6, 121, 38, 83, 112, 60, -20]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-85, -34, -107, -108, 93, 6, 52, 62, -11, 63, 43, 38, 105, 121, -114, -10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-43, -125, 8, -68, -70, 73, -50, 91, -79, -8, -13, -13, -82, 2, 25, 97]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-50, -63, 124, -116, 15, 97, -114, -56, 116, 110, -4, 105, 122, 30, -42, -53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[72, -48, 13, 13, 45, 118, -71, 22, 88, 52, -119, 39, 121, -14, -41, -67, -119, 16, 57, 55, 106, -77, -102, -3, -108, 72, -94, 102, -7, 48, 26, -119, -43, -125, 8, -68, -70, 73, -50, 91, -79, -8, -13, -13, -82, 2, 25, 97]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-86, 16, -19, -11, -82, 25, -78, -72, 52, -47, 62, -113, 116, 111, 29, 7, -108, -24, -109, 44, 4, -65, 109, -13, 43, -91, 56, -16, -57, 74, -41, 68, -125, -39, 127, 89, 54, -38, -68, 55, 103, -18, 10, 16, -114, 78, -102, -79, 8, 111, 4, 35, 54, -41, 3, -124, 62, 126, 45, 72, 75, 120, -43, 35, 19, -127, -56, -50, -123, -45, -119, 58, -123, -17, 3, -50, 100, 49, -99, 72, 76, 64, 85, -74, -127, 110, 53, -115, 30, -27, 26, -15, -43, 52, -111, 59, -43, -125, 8, -68, -70, 73, -50, 91, -79, -8, -13, -13, -82, 2, 25, 97]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-117, 126, 114, -21, -50, -45, -81, 25, -105, -106, 40, 28, -73, 125, -1, 42, -45, 12, 58, 80, 67, 55, 55, -15, 75, -42, -42, -21, 87, 58, 16, -91, -43, -125, 8, -68, -70, 73, -50, 91, -79, -8, -13, -13, -82, 2, 25, 97]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[119, -105, 86, -4, 66, 0, 95, 2, -11, -21, -98, 29, 9, -73, -60, 106]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-81, -36, 97, 69, 75, 49, 13, 63, 98, 118, 108, -35, 52, -25, 31, 25]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[26, -84, 0, 126, -72, 85, -104, -128, -113, -67, -11, -33, -3, 56, 29, -118, -97, 17, -32, 103, -75, 88, -122, -45, 94, 99, 10, 74, -72, 38, 47, -57, 119, -105, 86, -4, 66, 0, 95, 2, -11, -21, -98, 29, 9, -73, -60, 106]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-64, -86, -19, -75, -24, -86, 99, 70, 95, 102, 101, -42, -5, -20, 116, -21, -48, -77, -18, 7, -3, -97, -46, -42, 26, 0, -7, 85, -66, -59, -9, -127, 119, -105, 86, -4, 66, 0, 95, 2, -11, -21, -98, 29, 9, -73, -60, 106]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "235484DD0CBD33C05BED5DA29E17C2FD832C5AB50648CE5B762E58B492C5A8C755AA14DFD7B688D22906C285C3FB06F864CB39B46FFE336D6464323E2E3F4E23D770D7AC5B0A4C68A215EFE9C45C2E63025EF5CE361167FD588E92EBEAC772412F633E721ABA2CC41B6BDBC200BFC60B50065D80F8C1F175BB8D3506A2FCE41F3EB4A134026B08B1C95EA7586630813B5720A4A0C6C65B894FDF2751CBBB1122CCB6A4D39A0168B5D2F5B2899984948153360CD6E1E29D13BCBAB8D45FE340AAD35D0F14C805441C0057F495F50A773245FF26044EE2646DAC7C848DC3E4F6D3779756FC42005F02F5EB9E1D09B7C46A" + "'", str11, "235484DD0CBD33C05BED5DA29E17C2FD832C5AB50648CE5B762E58B492C5A8C755AA14DFD7B688D22906C285C3FB06F864CB39B46FFE336D6464323E2E3F4E23D770D7AC5B0A4C68A215EFE9C45C2E63025EF5CE361167FD588E92EBEAC772412F633E721ABA2CC41B6BDBC200BFC60B50065D80F8C1F175BB8D3506A2FCE41F3EB4A134026B08B1C95EA7586630813B5720A4A0C6C65B894FDF2751CBBB1122CCB6A4D39A0168B5D2F5B2899984948153360CD6E1E29D13BCBAB8D45FE340AAD35D0F14C805441C0057F495F50A773245FF26044EE2646DAC7C848DC3E4F6D3779756FC42005F02F5EB9E1D09B7C46A");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey7);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey22);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-37, -90, -80, 5, -77, -43, -33, 97, -105, -117, 6, 28, -119, 99, -50, -110]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -60, -40, -54, -120, -51, -2, -122, -118, -32, -93, 31, -38, -38, 47, -93]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[115, -60, -40, -54, -120, -51, -2, -122, -118, -32, -93, 31, -38, -38, 47, -93]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[101, 11, 57, -29, 9, -13, -8, 107, -103, -78, 37, 73, 17, -55, -28, 121]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-37, -90, -80, 5, -77, -43, -33, 97, -105, -117, 6, 28, -119, 99, -50, -110]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-40, 64, 121, 93, -4, -70, 57, 43, 114, -87, -125, -43, 101, 79, -37, -72, 54, -11, -11, -92, 64, -107, -51, 62, -38, 81, 58, -54, -61, -80, -103, -92, 57, 124, 43, -46, 6, 16, -52, 109, -37, 32, 48, 35, -70, 120, 28, 5, -26, 92, -43, 2, 40, -9, -113, 47, -80, 27, -121, -102, 64, -9, -103, 19, -48, 74, 0, 21, -114, 53, -85, 65, 51, -63, 82, 13, -76, -91, 54, 124, -122, -103, 46, -13, 81, 68, 122, -77, -91, -89, -48, -72, -19, 56, 27, 64, -37, -90, -80, 5, -77, -43, -33, 97, -105, -117, 6, 28, -119, 99, -50, -110]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[110, -16, 32, 21, -57, 79, 97, 71, 96, 124, 89, 39, -55, -45, 41, -111, 72, 2, -74, -110, -24, 37, 76, 127, 58, 10, 73, -33, -44, 36, 40, 44, 61, 87, 46, -109, 60, 79, 76, 77, 40, 21, -15, 18, 2, 57, 101, 115, -48, 16, 4, 32, 70, -108, 85, -59, -20, 20, -4, -76, -39, 72, -3, -68, -33, 67, 7, 113, -34, 119, -83, 8, -46, -108, 50, -127, -127, -33, -32, 105, -71, -25, -2, 33, -4, 31, 101, 26, -99, 96, -44, 84, -6, -24, -26, -16, -37, -90, -80, 5, -77, -43, -33, 97, -105, -117, 6, 28, -119, 99, -50, -110]");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[18, 113, -56, 42, -45, -32, 12, -18, 126, 63, 74, -74, -73, 83, -117, 21]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[117, -124, -45, 33, 75, -74, -65, -31, 49, -122, -84, -66, 118, 14, 111, 14]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-32, -99, 86, 127, -98, 26, 37, 14, 74, -107, 97, 41, 54, -57, 46, -6]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[18, 113, -56, 42, -45, -32, 12, -18, 126, 63, 74, -74, -73, 83, -117, 21]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[5, -51, 36, 1, 32, 58, -84, -77, -6, -68, 42, 89, 86, -7, -14, 79, 86, 47, 31, 101, 62, -78, -23, -105, 117, 7, 89, -102, 25, -59, -42, -30, 18, 113, -56, 42, -45, -32, 12, -18, 126, 63, 74, -74, -73, 83, -117, 21]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-20, -60, 22, -33, 103, 24, -122, 86, 12, -35, 43, 69, -11, 8, -45, -39, 62, 1, 90, -33, 117, -81, -23, -45, 111, -122, -127, -89, -98, -116, -2, -117, 18, 113, -56, 42, -45, -32, 12, -18, 126, 63, 74, -74, -73, 83, -117, 21]");
        org.junit.Assert.assertNotNull(byteArray29);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey40);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey46);
        java.lang.Class<?> wildcardClass50 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-51, 60, -109, -72, 85, 121, 123, -82, 113, 113, -72, -35, -87, -33, -66, 85]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[84, -23, -23, -108, -33, 70, 75, -8, -26, 84, 102, 103, 15, -39, 84, -84]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-60, 102, 68, -112, -46, 120, 30, 22, 62, 125, -58, 93, 51, -110, -125, -49]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-46, 8, 76, -14, 30, -31, -89, -120, 15, -101, 23, 125, -93, 6, -89, -57]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-76, -24, 98, -122, -53, 44, 79, -64, 68, 41, 84, -51, -98, -63, 65, 57]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[71, -102, 52, -1, 41, -20, -62, -39, 40, 92, 90, -50, 96, -21, -56, -99, 39, 25, -43, 58, -63, 41, 77, 56, -74, 88, -109, -100, 118, -81, 104, -122, -46, 8, 76, -14, 30, -31, -89, -120, 15, -101, 23, 125, -93, 6, -89, -57]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[54, 62, 23, 97, -116, 3, 110, 42, 12, -33, -102, 37, 19, -102, 13, 89]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[16, 104, 66, 127, 111, 28, 91, 84, -30, -92, -121, -65, -100, 88, 19, -55]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[78, 29, 121, 105, -39, -63, 115, 62, -45, -58, 83, 14, 80, 112, 94, 120]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[97, -61, -52, 75, -105, -46, -126, 74, -94, 127, -22, 51, 36, 106, -100, -78]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey4);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-53, -13, 33, -126, 36, 89, 125, -96, -42, 69, 49, -105, 40, 99, 46, -39]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[79, -29, -81, -6, -18, 112, 98, -109, 43, 19, -122, 111, -90, 64, 111, -23]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[60, 114, 116, -125, 17, 80, 57, -1, 65, -61, 23, -112, -121, 19, 29, -74, -126, 55, 36, 11, 93, 63, 67, 76, -41, -52, 13, 32, -109, 115, -90, -121, -53, -13, 33, -126, 36, 89, 125, -96, -42, 69, 49, -105, 40, 99, 46, -39]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[83, 43, -112, 14, 127, -7, 33, -124, -104, 29, -108, 62, 5, -1, -117, 50]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[48, -78, -70, 84, 71, -12, 127, -124, 54, 21, 71, 58, 33, 18, 57, -91]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[19, 57, -63, 87, 34, -95, -3, 50, 49, 118, -118, 94, -4, -26, 40, 66]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[24, -90, -15, 100, -41, -48, 28, -125, -12, 28, -72, 63, -55, -49, -86, 122]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-80, 94, 119, 56, -53, 84, -68, -60, 54, 123, -1, 122, -102, 35, -94, 59]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-98, 48, 110, 83, -43, -119, -62, -52, 105, -34, 15, -4, 96, -19, -47, -124]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-98, 48, 110, 83, -43, -119, -62, -52, 105, -34, 15, -4, 96, -19, -47, -124]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-104, 50, 55, -62, 28, 16, -88, -84, -19, -80, 93, 109, 42, -114, -83, 74, -73, 84, -19, -96, -15, 69, -58, 20, 36, 0, -22, 72, 120, -104, -58, 108, -80, 94, 119, 56, -53, 84, -68, -60, 54, 123, -1, 122, -102, 35, -94, 59]");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-33, -4, 102, 100, -37, 6, -43, -43, -69, -75, 94, 122, 64, -128, 92, -15]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[25, -63, -114, 85, 111, 116, 27, 119, 112, -36, -7, 116, 87, -91, -6, -75]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[25, -63, -114, 85, 111, 116, 27, 119, 112, -36, -7, 116, 87, -91, -6, -75]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-33, -4, 102, 100, -37, 6, -43, -43, -69, -75, 94, 122, 64, -128, 92, -15]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-33, -4, 102, 100, -37, 6, -43, -43, -69, -75, 94, 122, 64, -128, 92, -15]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey2);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey24);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[15, 75, -97, -118, -103, 16, 88, -62, 18, 9, -70, 74, -19, 113, 86, -21]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-49, -19, 60, -76, 94, 92, 73, -93, 83, 89, -43, 75, -10, 39, 110, -97, 31, 115, 94, -33, 81, 88, -19, -56, 120, -21, 78, -36, -35, -40, 51, 5, -72, -122, 108, 16, 26, -126, -67, 9, -11, -16, 56, -16, 107, -28, 59, -31, 11, -71, 91, 73, 10, -12, -40, 123, 99, -54, -114, -107, 0, 115, -21, -87, 95, 54, 42, -128, -4, 61, 92, 68, 76, -86, -82, -29, -85, -96, -31, 109, -13, -67, -56, -123, -57, 96, 18, 0, 23, 126, 21, 39, -35, 67, 87, 113, 15, 75, -97, -118, -103, 16, 88, -62, 18, 9, -70, 74, -19, 113, 86, -21]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[5, -19, -120, -15, 1, -100, -112, 107, 60, -94, -84, 35, -127, -106, 116, -116]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[68, -84, 80, -99, -41, -61, -13, -107, 60, 101, 68, 56, -121, 126, -128, 77]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[33, 45, -73, -44, -15, -72, 81, -74, -127, 8, -57, -127, -122, -118, -85, -58]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-73, -50, 86, 32, 88, 0, -15, 50, 116, -73, -5, 127, 60, 79, 123, -92]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-4, -78, 71, 111, -28, 36, 115, -69, 118, -95, 61, 5, 35, 84, 95, 1, -18, 125, 18, 34, 73, -88, -93, 115, -35, -31, 74, 46, -56, 67, 126, 79, 33, 45, -73, -44, -15, -72, 81, -74, -127, 8, -57, -127, -122, -118, -85, -58]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-48, 31, 4, 43, 54, -1, -85, 42, 33, 86, -92, 40, 115, 117, -23, -53, -31, 94, -81, 69, 18, 12, -123, -125, -50, -25, 105, -122, 99, 84, -39, -77, 33, 45, -73, -44, -15, -72, 81, -74, -127, 8, -57, -127, -122, -118, -85, -58]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[36, -94, -58, -56, 110, 117, 51, 121, 41, -108, 68, -74, -125, -103, -120, -64, -123, -116, 125, 107, 110, 19, 35, -126, -115, 34, 127, 112, 105, 98, -103, 61, 90, 63, 53, 42, -56, -18, -33, 28, -99, -37, -73, 9, 102, -27, 14, 90, -22, -57, -69, 121, 61, 33, 124, -17, 33, -48, 89, -71, 114, -103, -61, 3, -88, 82, -116, -80, -118, 76, 87, 22, 35, 48, -39, 79, 20, -101, 16, 47, 47, 29, 50, -30, -110, -111, -5, -90, -54, -99, -63, -37, -10, 98, 78, 71, 33, 45, -73, -44, -15, -72, 81, -74, -127, 8, -57, -127, -122, -118, -85, -58]");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey39);
        java.lang.Class<?> wildcardClass41 = secretKey39.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-98, -13, -38, -55, 13, -97, 83, -108, -115, -100, -99, -27, 80, 68, 104, -42]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-115, -78, 51, -31, 22, 70, -73, 116, -10, 50, 3, 78, 81, -71, -6, 23]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-75, -111, 41, 18, 33, 5, -74, 110, 26, 72, -39, -19, -113, 28, 13, -78]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[103, 85, -47, -83, 51, 69, 124, 127, 85, 74, 104, -86, -90, -62, 42, -68]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[82, -55, 19, -21, 25, -115, -99, -56, -67, -15, -86, 13, -34, 21, 88, 66]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[103, 6, -115, 15, -85, 36, -70, -82, 11, -46, 19, 78, -97, 68, 108, 38]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[103, 6, -115, 15, -85, 36, -70, -82, 11, -46, 19, 78, -97, 68, 108, 38]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-114, 121, 27, 116, 5, 77, -98, 9, 98, -116, 91, 83, 40, -86, 108, 57, -67, 8, -27, -60, 119, 6, 43, 67, 5, -86, 102, -118, 122, 116, -109, -119, 82, -55, 19, -21, 25, -115, -99, -56, -67, -15, -86, 13, -34, 21, 88, 66]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.Class<?> wildcardClass21 = secretKey16.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-51, -116, 126, -59, -70, 36, 56, -18, 18, 28, -2, -124, 17, -66, 106, 35]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-58, 14, 76, 9, -98, 24, 43, 41, -34, -27, -87, -40, 112, 124, 115, -62]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-62, 73, -26, -117, -97, -33, 93, 80, -12, 27, 2, 75, -12, -11, -111, -41]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-10, -35, -82, -45, -38, 109, -96, 69, -83, 92, 61, -109, 95, 80, -86, -108]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        javax.crypto.SecretKey secretKey15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey15);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-56, 33, -45, 91, -7, 38, -120, 64, 65, -2, 58, -40, 88, 31, 60, 126]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[72, -47, -125, 62, -41, 6, -11, -49, -49, 29, 75, 40, -93, -52, -108, 67]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100, 56, 1, 70, 2, -36, 103, -114, 17, -8, 50, 5, 75, -53, 95, 45, -29, 46, -36, 56, -47, -20, 99, 105, -67, 91, -95, -71, 25, 85, -52, 3, -55, 93, -58, -45, 108, -103, -85, 73, 120, -98, 11, -5, 46, 91, 98, -55, 107, 92, 67, 90, -58, 127, 64, -4, 7, -18, 93, 111, 122, -77, -119, 11, 112, 65, 111, -25, -33, -69, -124, 0, 74, -81, -87, 14, 27, 91, 49, -18, 25, 100, -6, -89, 62, 117, -62, 5, 91, -8, -9, -99, -105, 19, 25, 64, -56, 33, -45, 91, -7, 38, -120, 64, 65, -2, 58, -40, 88, 31, 60, 126]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[117, 40, -45, 95, -84, -101, 25, -67, 12, 114, 85, 95, -98, 112, 101, 71, -33, 114, 32, -122, 6, 95, -80, 33, 120, 81, -14, -106, -26, -112, 93, 40, -56, 33, -45, 91, -7, 38, -120, 64, 65, -2, 58, -40, 88, 31, 60, 126]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[78, -66, 46, 13, 48, 67, -52, -124, 111, 10, -99, -3, 64, -114, -68, -101, 57, -6, 67, 41, 126, -115, -2, -11, 90, -98, -45, -57, -25, -6, -112, 61, -56, 33, -45, 91, -7, 38, -120, 64, 65, -2, 58, -40, 88, 31, 60, 126]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-56, 33, -45, 91, -7, 38, -120, 64, 65, -2, 58, -40, 88, 31, 60, 126]");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        byte[] byteArray0 = null;
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-101, -14, 97, -41, 103, 59, -97, 110, 68, 25, 26, 101, 74, -33, 62, 26]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[105, 6, -10, 60, -16, 100, 116, -10, -108, -101, 119, 86, 110, -23, -22, -9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[59, -93, 99, 117, -119, 72, 3, 57, -3, -4, -41, -24, 68, -80, 19, 32]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-24, -110, -117, -55, 2, 94, 78, 80, -115, -77, 106, -87, 116, 14, 77, -114]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[110, -10, 37, 41, -18, 4, 103, -26, -19, -70, 42, -58, 120, 63, 101, -91, 109, -71, -106, -71, -99, 92, 4, -72, -80, -61, 40, 34, 97, -33, 75, 0, 59, -93, 99, 117, -119, 72, 3, 57, -3, -4, -41, -24, 68, -80, 19, 32]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray27);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey15);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[86, 6, 79, 65, 27, -94, 29, -74, -99, -35, 101, 48, 29, -4, 78, 59]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[71, -98, 73, -29, 100, 63, 89, -15, -126, -117, 20, -41, 100, -126, -31, 19]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-95, -26, -126, -12, 76, 93, -55, 32, 118, -22, 38, 47, 114, 62, 69, 63]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[86, 6, 79, 65, 27, -94, 29, -74, -99, -35, 101, 48, 29, -4, 78, 59]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[111, -15, 71, -19, 48, -27, 12, 117, 21, 20, 92, -48, 98, 84, 69, 66, -48, 4, -112, 97, -112, -50, -15, 103, -109, 91, -19, 30, -57, 28, -23, -33, -11, -117, -120, 76, 68, -1, -30, 1, -12, -36, 107, 21, 93, 75, -108, 91, 11, -54, 115, 32, 42, -13, -93, -85, -36, 22, 3, -72, 88, 107, 71, -71, 14, -93, -51, 100, -64, -57, -34, -64, 127, 103, -62, 122, -40, 44, -55, 19, 122, 39, -33, -116, -71, 60, 12, 88, 127, -90, 3, -90, -33, 11, 31, -54, 86, 6, 79, 65, 27, -94, 29, -74, -99, -35, 101, 48, 29, -4, 78, 59]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[105, -120, -19, -14, -90, -39, 83, 86, -13, 94, -90, 29, -114, 107, -15, -120, -7, -78, -2, 9, 108, -32, -42, 88, -59, 90, 118, -34, 127, 20, 6, 51, 86, 6, 79, 65, 27, -94, 29, -74, -99, -35, 101, 48, 29, -4, 78, 59]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "6988EDF2A6D95356F35EA61D8E6BF188F9B2FE096CE0D658C55A76DE7F14063356064F411BA21DB69DDD65301DFC4E3B" + "'", str13, "6988EDF2A6D95356F35EA61D8E6BF188F9B2FE096CE0D658C55A76DE7F14063356064F411BA21DB69DDD65301DFC4E3B");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[79, 87, 62, -107, -125, -81, 20, 90, -111, 78, -55, -37, -125, -38, -2, -101]");
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey8);
        java.lang.Class<?> wildcardClass14 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[7, 4, -122, -22, -124, 98, -29, -123, -47, -37, 121, 29, -103, -35, 75, 113]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100, -96, 81, 127, 48, 21, -110, -96, 98, 121, 88, 14, -29, 71, 92, -12]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, -97, -41, 114, -99, 60, -19, 12, 9, -64, 83, 6, -118, 12, 35, 15, 54, -6, 61, 4, -83, -92, 51, -53, -117, -33, 34, -66, -49, -86, 127, -83, -80, -42, 76, 105, 13, 57, -5, -55, 106, 56, -23, 17, 61, 42, 39, 119, -35, 34, -66, -69, 32, -35, -122, -102, 96, -66, -111, 20, 120, -91, -63, 114, 7, -34, -41, -127, 53, -98, 116, 25, 44, -58, 58, -20, -46, -98, 98, -10, 69, 28, 2, -12, 74, -128, 16, -106, 38, 102, -28, -49, 17, -29, 104, -44, 7, 4, -122, -22, -124, 98, -29, -123, -47, -37, 121, 29, -103, -35, 75, 113]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-118, 39, -10, -18, -108, -104, -122, 36, 113, -97, -42, -8, -31, 101, -103, -41, 51, 12, 127, -112, -42, 103, 72, -83, -60, 94, -28, 9, -76, 34, 14, -72, 7, 4, -122, -22, -124, 98, -29, -123, -47, -37, 121, 29, -103, -35, 75, 113]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey35);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey35);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[106, -3, -125, 92, -89, 43, -50, 8, -55, -83, -78, -112, 121, -79, -75, 46]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-68, 106, -20, 3, 47, 9, -16, 92, -26, 79, 33, 31, -18, -43, 48, -103]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[66, -34, 114, 93, -66, -40, 98, 40, 42, 85, 61, 89, 28, 23, -81, 10]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-44, 23, 78, -120, 117, -13, 112, 77, 44, 95, 85, 53, 105, -12, -36, 50]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[72, 41, -111, -23, 43, 10, -19, 15, 19, 56, 46, -18, 61, -63, 105, 121, -88, -104, 44, -38, -14, 119, 118, 85, 22, 64, 12, 0, 67, -111, -108, -1, 66, -34, 114, 93, -66, -40, 98, 40, 42, 85, 61, 89, 28, 23, -81, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[72, 41, -111, -23, 43, 10, -19, 15, 19, 56, 46, -18, 61, -63, 105, 121, -88, -104, 44, -38, -14, 119, 118, 85, 22, 64, 12, 0, 67, -111, -108, -1, 66, -34, 114, 93, -66, -40, 98, 40, 42, 85, 61, 89, 28, 23, -81, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[66, -34, 114, 93, -66, -40, 98, 40, 42, 85, 61, 89, 28, 23, -81, 10]");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[77, 79, 57, 2, 58, -91, -26, -85, 122, -89, -38, 36, -66, 73, -91, 72]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[63, 124, 93, 36, -39, -44, 109, 37, -39, -67, -108, -89, 47, 52, 7, -82]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[63, 124, 93, 36, -39, -44, 109, 37, -39, -67, -108, -89, 47, 52, 7, -82]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[56, 34, -53, 16, -95, -40, -41, 51, -60, 92, 115, -32, -106, -115, -53, 20]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[77, 79, 57, 2, 58, -91, -26, -85, 122, -89, -38, 36, -66, 73, -91, 72]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[106, -40, -122, -44, 38, -38, -102, -14, -4, -34, 61, -115, 52, -20, 50, 32, 17, -5, 50, -31, 73, -37, -101, -16, 59, 86, 36, -73, -128, 109, 117, -80, -124, 119, -104, -62, 52, -74, -16, 5, -64, -31, 24, 70, -121, -109, 47, -112, 92, -38, -48, -51, 79, -13, 23, -5, -67, 97, -112, -73, -104, -77, 96, -109, -70, -61, -3, 99, -120, 123, -128, -74, 44, -64, 7, 35, 43, 42, 122, 124, 23, -47, -71, -107, 41, 111, 18, 23, 113, 70, 4, 41, 78, 120, -32, 28, 77, 79, 57, 2, 58, -91, -26, -85, 122, -89, -38, 36, -66, 73, -91, 72]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-126, -119, -9, 84, -21, 127, 7, -81, -55, -21, -105, -123, -101, -81, 19, -124, 126, -31, 38, -99, -79, -27, -65, 1, 13, 16, -49, 115, -14, -53, -22, 31, 107, -50, 96, 123, -64, -81, 68, 106, 106, -1, -34, -32, 108, 84, 13, 3, 50, 63, -32, 76, 123, -54, -109, 106, -79, 96, -76, 8, -34, 87, -114, -82, -11, 104, -31, 6, 10, 76, -127, 79, 108, -1, 18, 114, -23, -56, -68, -119]");
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey31);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("C718B4A2C36E882A21FF0D9AFADE2A77", secretKey31);
        java.lang.Class<?> wildcardClass42 = byteArray41.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[26, -94, -93, 123, -1, -98, 92, 71, -61, -116, 89, 127, 83, 69, 115, 84]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-15, -128, -2, -117, -21, 72, 8, -4, 65, 60, 61, 27, 68, 73, 77, -97]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[120, 83, -120, -92, 26, -58, -106, 81, 105, 12, 110, 109, -113, -75, -46, -7]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[115, -65, -73, -30, -43, 96, -97, 32, -29, -98, 49, -106, -75, 19, -50, 115]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[42, 62, -60, 90, -103, 92, 53, 107, -86, 29, 76, 32, 96, 92, -86, 72]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-11, 30, -15, 34, -99, -17, -22, 79, -64, 49, 92, -70, -46, -115, 111, -22]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-123, 112, -60, 27, 123, -86, -106, 127, -115, -56, -23, -71, -79, 66, 87, -10, 123, 35, 106, 46, 42, -51, -77, 54, -8, -15, 13, -86, 97, 12, 86, 9, 42, 62, -60, 90, -103, 92, 53, 107, -86, 29, 76, 32, 96, 92, -86, 72]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[18, 35, 17, 14, -61, -69, -27, 77, 17, -75, -99, -83, 63, -35, 63, 33, 44, -114, -60, -5, 121, -72, 43, 61, 46, 34, -27, -74, -101, 61, 127, 120, 42, 62, -60, 90, -103, 92, 53, 107, -86, 29, 76, 32, 96, 92, -86, 72]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[42, 82, 34, 112, 8, 90, -110, -44, 84, -75, 110, 46, 40, -13, 62, -49, -125, -92, 44, -82, 69, -85, -123, 47, 99, 7, -96, -9, 34, 15, -20, 79, -70, -94, -68, -119, -59, -108, 3, 83, -103, -56, 22, 70, 49, 64, -125, -24, 12, 121, -35, -86, -56, -7, -124, 99, -3, 37, 50, 62, 38, -46, 95, -58, -43, 99, 112, -94, -18, -87, 115, 35, -7, 11, -10, -117, 95, -125, -77, 97, -33, -83, -83, -60, -108, 89, -63, 36, 14, 32, -27, -62, 87, -73, 113, 66, 42, 62, -60, 90, -103, 92, 53, 107, -86, 29, 76, 32, 96, 92, -86, 72]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[99, -12, 25, -43, -69, 67, -2, -55, 95, -103, -43, -50, -19, -65, -72, 84, -126, 30, 64, 97, 106, 57, -1, 16, -85, 53, 87, -20, 109, 96, 99, 106, 42, 62, -60, 90, -103, 92, 53, 107, -86, 29, 76, 32, 96, 92, -86, 72]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey38);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey38);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("F6441EF035CB44DF482D4076E2A2584A09FB6932E41E1A73AACC011A11D436CF6153ACC0BB45F9E81CD68A0E5BDE70C5E98B731602E244B9470D386A4098F20E0DA871E1E1E68188363224699C5B251F769207B9D3E7B513FBF246B3AB276CDE6EDB9EC603A754A6FDFF48C1723737A5", secretKey38);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey38);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[107, -112, 83, 20, 47, -119, 26, 82, -100, -33, -78, -94, -80, 63, -116, 89]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[64, 43, -74, -97, -66, 59, 61, -99, 44, 117, -86, -115, 25, 52, -80, 55]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-40, -87, 26, -119, -53, -36, -4, -1, -79, -69, 125, -22, 81, 0, 9, -37]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[37, 13, 125, 9, -89, 84, 29, 34, 38, 78, 112, 59, 0, -11, 51, 42]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[52, -25, -87, 118, 100, 106, 101, -66, -19, 84, 120, 127, -11, 92, 81, 107, 10, -42, 96, 21, -30, 0, -98, -79, -45, 88, 96, 81, -88, -5, -28, -112, -40, -87, 26, -119, -53, -36, -4, -1, -79, -69, 125, -22, 81, 0, 9, -37]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-91, 118, -80, 120, 76, -127, 46, -86, 109, -9, 11, 26, 10, -25, -117, 18, -126, 118, -44, 106, 11, 69, 98, 119, -122, 24, -63, 118, 18, -88, 52, 11, -40, -87, 26, -119, -53, -36, -4, -1, -79, -69, 125, -22, 81, 0, 9, -37]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[42, -125, -50, 8, -72, -52, 70, -70, -91, -57, -113, 52, -101, -43, 37, 98, -121, 98, 84, 84, 40, -7, -44, -56, -63, 34, 50, 29, -79, 127, -120, -9, 55, -66, -52, 75, -81, 102, 17, -66, -6, 50, 4, -85, 52, 12, -44, 29, -54, 77, -69, 116, 43, -100, -48, -103, -94, 79, -60, -59, -26, 60, -59, 31, -78, -7, 91, -57, 57, 62, -114, 107, -91, -86, 29, -78, 26, 41, 49, -126, -41, -116, -73, 93, -58, 71, 110, 61, -28, 7, 119, 9, -33, -52, -44, 28, -40, -87, 26, -119, -53, -36, -4, -1, -79, -69, 125, -22, 81, 0, 9, -37]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 1, 44, -100, -69, 11, 24, -77, -112, -9, 17, -23, -85, 0, -2, 88, 19, -60, 76, -95, 41, -8, 26, 119, -16, -56, 65, -101, 105, 15, 66, -52, -40, -87, 26, -119, -53, -36, -4, -1, -79, -69, 125, -22, 81, 0, 9, -37]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-40, -87, 26, -119, -53, -36, -4, -1, -79, -69, 125, -22, 81, 0, 9, -37]");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[120, -44, -96, 13, 94, -110, 17, 68, -13, 1, -126, 118, 114, -22, 47, 106]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[27, -23, -100, 56, 120, 5, -4, -121, 31, -127, -75, 30, 47, 96, 14, -30]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[37, 83, 66, 62, 47, -110, 17, -12, -12, 92, 55, 54, -64, 49, 50, -73, -69, 84, -80, 56, -105, 121, -28, 40, 77, 94, -77, 86, -128, -118, -117, 63, 120, -44, -96, 13, 94, -110, 17, 68, -13, 1, -126, 118, 114, -22, 47, 106]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-18, -30, -27, -3, -13, -102, -59, -102, 49, -55, 65, -79, -31, 39, -52, 119, 63, -59, -81, 38, 125, -38, 57, 39, 21, 55, -62, -9, 106, -122, -50, 116, 120, -44, -96, 13, 94, -110, 17, 68, -13, 1, -126, 118, 114, -22, 47, 106]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-35, 94, 8, -12, 6, -41, -97, 124, 124, -2, -99, -51, -74, 114, 78, -25, 16, 104, -90, -63, 92, -56, -118, 4, -80, -89, 18, -74, -116, 105, 90, 55, 120, -44, -96, 13, 94, -110, 17, 68, -13, 1, -126, 118, 114, -22, 47, 106]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, -73, -2, -108, 64, -116, -120, 76, -119, -62, -55, 127, 69, -117, -94, -39, -16, 85, -38, -126, -113, 63, 17, 66, -105, -6, 9, -114, 2, -126, -24, 105, -119, 28, -93, -3, 8, -94, -59, 96, -77, 85, 22, -23, -15, 29, 124, -11, -118, 76, -56, 68, 104, -43, 122, -1, 71, -107, -33, -2, -15, -52, -82, -53, -26, 43, 41, -71, 117, 87, -19, -18, -89, -100, 77, 60, -105, 108, -78, -60, -11, -25, -42, -50, 19, 43, -55, -4, 120, 63, -36, 106, -62, 62, -22, -58, 120, -44, -96, 13, 94, -110, 17, 68, -13, 1, -126, 118, 114, -22, 47, 106]");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey9);
        java.lang.Class<?> wildcardClass16 = byteArray15.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[74, -21, 75, 67, -53, -124, 103, 56, -75, -93, 39, 82, 83, -61, 33, -35]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-23, 103, 71, -59, -31, -56, 1, -50, -4, -24, 36, -49, -105, 8, -62, -75]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[32, 85, -11, 48, 33, -63, -124, -37, -108, 105, 25, 78, -60, -55, -69, -110, 84, 65, 31, 49, -88, -109, -29, -66, 19, 1, 83, -1, -94, 107, 84, 50, -82, 86, 29, 57, -6, -43, 49, 41, -5, -29, -31, -58, -23, -100, -82, -126, -2, 78, -25, 70, 123, -108, 4, -41, -20, 7, -89, -89, 109, -55, -65, 54, -63, -128, 99, -108, -30, 65, 50, -24, 29, 36, 105, 126, 75, 64, -113, -99, 97, 47, -86, -76, 49, -97, -124, 24, -110, 122, -5, -78, 64, 92, -94, 123, 74, -21, 75, 67, -53, -124, 103, 56, -75, -93, 39, 82, 83, -61, 33, -35]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[40, 78, -104, -50, -66, 73, -46, 18, 14, 122, -20, 126, 126, 21, -64, 55]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey31);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        byte[] byteArray55 = new byte[] {};
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray55);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey57);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey61);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey61);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey61);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey61);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey61);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-28, 124, 16, -90, -126, 69, -100, 48, 33, 10, -54, 125, -38, 71, -81, 79]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[35, -74, 121, 33, 110, -50, 113, 59, -21, -19, 24, 115, 120, 46, 43, -122]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-30, -5, 54, 70, 5, 0, 98, -31, -110, -102, 94, -66, -51, 0, 87, 108]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-25, -108, -109, 72, 37, -112, 93, -126, 53, 14, -108, -82, 59, 69, -119, -127]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-103, 109, -56, -88, 21, -24, 66, 29, -27, -116, -35, -40, -67, 27, 20, 7]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[82, 67, -105, 98, -113, 66, 15, -112, 57, 25, 109, 107, -96, 121, 59, -30]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[82, 67, -105, 98, -113, 66, 15, -112, 57, 25, 109, 107, -96, 121, 59, -30]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-38, -80, -52, 29, -73, 64, 45, 91, -106, 100, 91, -113, -36, -4, 68, -122, -40, -23, -14, 119, -72, -104, 115, -124, -23, 13, 74, -104, -51, -7, 123, -17, -103, 109, -56, -88, 21, -24, 66, 29, -27, -116, -35, -40, -67, 27, 20, 7]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-116, 85, 101, 7, 5, 31, -7, -118, 74, -61, -71, 45, 125, 27, -1, 101, -49, 21, -74, 58, -91, 110, 15, 17, 20, -20, 79, -85, 45, -125, 90, -6, -103, 109, -56, -88, 21, -24, 66, 29, -27, -116, -35, -40, -67, 27, 20, 7]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 55, 123, 59, -111, 52, -101, 50, 56, 33, 3, -44, 122, -12, 116, 21, 68, -78, -117, -52, 10, 46, 87, 102, 29, -67, 88, -77, 57, 45, 55, -33, -103, 109, -56, -88, 21, -24, 66, 29, -27, -116, -35, -40, -67, 27, 20, 7]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-18, -16, -87, -116, -24, -17, -111, 108, -36, -73, -67, -57, 99, -82, 39, 72, -51, -58, 19, -119, -29, 93, -108, -81, -114, -108, 21, 64, 80, 61, 80, -16, -53, -34, 59, 56, 35, 64, -64, -3, -102, -28, -15, -93, 15, -67, -33, -58, -15, 59, 71, -3, 89, 21, -23, 20, 29, 13, -96, -8, -25, -54, 50, -47, 112, -121, 10, -121, -13, -86, -9, 14, -62, -69, -125, -15, 66, -70, -119, 104, 45, 24, -98, 35, 34, -34, 82, -31, -96, -3, 58, -75, 40, 60, 11, -41, -103, 109, -56, -88, 21, -24, 66, 29, -27, -116, -35, -40, -67, 27, 20, 7]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-68, 94, 2, -128, 54, 42, -25, 107, -97, 112, -116, -47, 22, -128, 33, -17]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[53, -11, 58, -85, -5, 15, -7, 28, -118, -5, 4, -95, -91, -102, 69, -31]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-86, -41, 38, 97, 82, 19, 69, 98, -74, -59, -97, -92, -2, 48, -115, 41]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[64, 82, 55, -10, 26, -35, -95, 24, 95, -48, 23, -115, 116, -5, 111, 120]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-25, 47, -99, 30, -49, 28, -2, 43, 124, -91, -47, -62, 37, -92, 5, -65, -60, 89, -45, -7, 117, 32, -95, 51, 40, 74, -53, 55, 63, -36, -4, 37, -86, -41, 38, 97, 82, 19, 69, 98, -74, -59, -97, -92, -2, 48, -115, 41]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-55, 89, 50, 67, -93, 114, -16, -25, 118, -34, -23, -128, -62, -40, -27, -50, -68, 12, 31, 67, 112, -8, -51, 103, 118, 8, -58, -74, 58, -127, 73, 55, -86, -41, 38, 97, 82, 19, 69, 98, -74, -59, -97, -92, -2, 48, -115, 41]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-62, -106, -42, 86, 113, 0, -110, 112, -56, -10, -75, -122, -77, 20, 0, 89, -3, 97, -102, 51, 120, 47, -124, -127, 37, -108, 47, 6, -28, -30, 116, 85, 55, 62, -9, 12, 78, 92, 67, -25, 112, -8, -82, 62, 25, 103, 108, -93, -88, 82, 57, 60, 94, -34, 92, 26, -112, -93, 107, -85, -33, 85, 36, -15, 15, -99, -76, 60, -77, -86, 79, 125, 125, -26, 39, -40, -8, 49, 27, 101, -45, 83, 18, -123, -28, -83, 108, -82, 108, 29, 97, -12, 75, 56, 11, -116, -86, -41, 38, 97, 82, 19, 69, 98, -74, -59, -97, -92, -2, 48, -115, 41]");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[48, -78, -34, 16, 31, 72, 17, 18, -70, 60, -11, 96, 3, 84, 20, -51]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[120, -2, -85, -83, 42, -101, 41, -112, 25, -56, 84, -35, -2, 97, -23, 124]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[30, -88, -61, 69, -37, -46, -114, 102, -61, 48, -58, 80, 53, -7, -96, 50]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-103, -44, 41, 46, -93, 42, -96, 87, -103, -48, 28, -99, 67, 119, 77, 10]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[17, -56, 46, 39, -27, 83, -70, -119, -39, 40, 70, 26, -41, -57, -81, -100, 91, 126, -95, 97, 124, 42, -126, 30, 68, 90, 94, -10, -2, 74, -108, 76, 30, -88, -61, 69, -37, -46, -114, 102, -61, 48, -58, 80, 53, -7, -96, 50]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-9, 125, 74, 31, -127, 126, 5, 99, -128, -96, 22, 78, 118, -4, 118, 33, 63, -13, 33, 74, 54, -6, -122, -120, -66, 63, -49, 74, -20, -40, 59, 39, 30, -88, -61, 69, -37, -46, -114, 102, -61, 48, -58, 80, 53, -7, -96, 50]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-87, 77, -76, 18, -104, -86, 51, 86, -46, 11, -111, -83, 3, -64, -10, -112, -51, 43, -1, -81, -72, 19, -22, -29, -50, 87, 127, -11, 63, 84, -64, -114, 119, 99, -87, 106, -29, 6, -39, 26, 72, -34, -15, 104, -37, -126, -101, 52, -82, 14, 125, -8, -38, -75, 95, -1, 74, 90, 45, 10, -66, -94, 77, 64, 6, -115, -72, 97, -45, -48, 15, -19, -41, -28, 55, -42, -21, 92, -57, 108, -128, 64, 65, 28, -24, -108, -101, 43, -69, 65, 72, -82, -109, -113, 98, 84, 30, -88, -61, 69, -37, -46, -114, 102, -61, 48, -58, 80, 53, -7, -96, 50]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[16, -24, -116, 101, 117, 39, 108, 28, 79, -43, -128, 74, -52, -66, -69, 74, -87, 59, -94, 127, -46, -107, 45, 116, 64, 51, -64, 8, -50, 111, 2, -70, 112, 2, -112, -9, -35, -60, 120, 103, 114, 71, 113, -124, 110, 9, 74, -93, -76, 69, -63, 119, -43, 30, 7, 93, -33, -53, -69, -125, -25, 59, 5, -126, -89, -53, 0, 110, -71, 69, -21, -44, 22, 54, -57, 50, 53, 64, 115, 55, 78, 36, -32, 8, 20, 92, -44, 113, 27, 57, -33, -63, 86, -41, 59, 29, 30, -88, -61, 69, -37, -46, -114, 102, -61, 48, -58, 80, 53, -7, -96, 50]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[112, -112, -13, -124, -50, -50, 62, -83, 104, -23, -57, -64, 61, 40, 12, -80, -74, -84, 22, -112, -14, -86, 0, 34, -22, -127, -3, 81, -46, -48, -109, 95, -74, -65, 81, -47, -88, 38, -96, -105, 39, -77, -66, 113, 87, -67, -12, 73, -96, 40, 9, -9, 78, 118, -34, -25, 123, 77, -15, -53, 57, 9, -58, -106, -50, 99, -32, -48, -122, 96, -17, -119, 64, 6, -6, -81, 67, 46, 76, -11, 56, 109, -65, 118, 53, 83, -32, 3, -84, 38, -28, -24, 35, 65, -108, -8, 30, -88, -61, 69, -37, -46, -114, 102, -61, 48, -58, 80, 53, -7, -96, 50]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey51);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey65);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD016B569A2999509F59EE7F094987DD", secretKey65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey65);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-57, -116, -110, 117, -82, 84, -20, 77, 64, -56, 21, -107, 11, 0, -81, -21]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[2, -88, -94, 62, -108, 7, 82, 73, 107, -111, -25, -76, 118, 99, 97, 23]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-72, 111, -114, 105, -35, -40, -66, -31, -57, -19, -96, 123, 48, 110, -77, -48]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-71, -92, 55, 124, -24, -113, -58, -110, -81, -37, 76, -31, -73, -106, 62, -19]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[29, -89, -3, 108, -43, 53, 60, -23, 69, -11, -1, -81, -105, 45, -9, 13]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[92, -28, 81, -70, -107, -110, -70, -127, -32, -101, 61, 62, -7, -57, -1, 73]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[88, 92, 45, -122, 28, 124, -61, -126, -92, 60, -81, -7, 28, -8, -27, -71]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-13, 12, 110, -17, -28, 62, -114, -17, 85, -123, 32, -10, -20, -58, -35, -51]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[82, 101, 43, -113, 37, 50, -54, 60, 35, -18, -62, 41, -10, 12, -57, -27]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[124, 82, 19, 37, -68, -99, 123, -95, 64, -98, -57, 86, 27, -125, 90, -122]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-27, 67, -3, -111, -48, -99, 1, 56, 117, -31, 53, -83, 81, 84, -99, -61]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[82, 101, 43, -113, 37, 50, -54, 60, 35, -18, -62, 41, -10, 12, -57, -27]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[89, 90, -63, -39, 80, 121, -79, 35, -64, -20, 75, -23, -8, -39, 4, -96]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-23, -3, -19, 68, 98, 80, -75, 45, 45, 5, -42, -22, -53, -76, -23, -24]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-23, -3, -19, 68, 98, 80, -75, 45, 45, 5, -42, -22, -53, -76, -23, -24]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-10, -25, -23, -68, -122, -33, -76, 88, -19, 102, -122, 33, -105, 7, 66, 7]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-23, -3, -19, 68, 98, 80, -75, 45, 45, 5, -42, -22, -53, -76, -23, -24]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-44, 33, -66, -81, 38, 58, -120, 44, 57, 96, -103, 6, -31, -25, -94, -109, -48, -90, -1, -72, -86, 62, -61, -41, 24, -16, -41, 112, -70, 112, 78, 8, 89, 90, -63, -39, 80, 121, -79, 35, -64, -20, 75, -23, -8, -39, 4, -96]");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey3);
        javax.crypto.SecretKey secretKey7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey7);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[92, 67, -120, -109, 103, -10, 17, -116, 30, 74, 8, -24, 113, 114, 19, -124]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[74, 51, 15, -54, -89, 29, -31, -28, 73, -76, 5, 70, 14, -41, -85, -73]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[114, -87, 78, 115, -110, -56, -61, -71, 7, 91, 24, 51, 98, -100, -18, 119, -96, -75, -19, -73, -51, -111, -96, 83, -50, 28, -20, -18, 62, -44, -20, 33, 92, 67, -120, -109, 103, -10, 17, -116, 30, 74, 8, -24, 113, 114, 19, -124]");
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey4);
        java.lang.Class<?> wildcardClass8 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, -3, 51, 17, 122, 117, 126, -107, 122, -72, -9, 99, 0, 122, 60, 94]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-83, 86, -38, 112, 16, 49, -96, 46, -105, 48, -109, -48, 50, -30, 10, 16, 2, 58, 112, -51, -48, 36, 36, -44, -61, -97, 29, 58, -38, -127, 21, -86, -128, 56, 96, 17, -79, 87, 125, 97, 66, 21, 57, -87, -77, -53, 24, -46]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey12);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[24, 34, -99, -107, -82, 28, -25, 117, 96, 35, 122, 58, -70, 65, 74, -34]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-88, -50, -41, -44, 0, -19, 65, 9, -99, -76, -90, 92, -55, -84, -54, 77]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey32);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey32);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey32);
        byte[] byteArray50 = new byte[] {};
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey52);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey56);
        byte[] byteArray60 = new byte[] {};
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey62);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey66);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey75);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey75);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey75);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey75);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey75);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey75);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey75);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[121, 99, 45, -111, 29, 79, -120, 29, 104, -92, -96, -58, -72, 60, -60, 91]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-43, -125, 75, 36, -95, 121, -72, -31, 56, 43, 86, -2, -30, -7, -99, -2]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-95, -25, -117, -46, 82, 86, -82, 72, -30, -27, -95, -109, 108, 34, -110, -2]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 119, -29, 87, 119, -78, 109, -6, 16, 36, 62, -20, -37, -46, 11, 52]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[66, 114, 92, -53, 37, -74, 71, 127, -26, 47, -78, 112, 105, 71, -74, 47]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-84, -61, -113, 12, 116, -37, 56, -29, -6, -107, -25, -57, 46, 38, -96, -61]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-84, -61, -113, 12, 116, -37, 56, -29, -6, -107, -25, -57, 46, 38, -96, -61]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-56, 9, -118, 120, -51, -100, -103, 71, 92, 109, 83, -124, 23, 29, 57, 15, -65, -66, 124, 30, -69, -78, 15, -72, -50, -93, 80, -55, -103, 120, -108, 12, 66, 114, 92, -53, 37, -74, 71, 127, -26, 47, -78, 112, 105, 71, -74, 47]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[34, -3, 70, 95, 118, -105, 89, -58, 14, 115, -30, 58, 85, -90, 21, 80, -116, -105, 82, -101, 10, -51, 57, -115, 8, 106, 11, -21, 95, -93, 16, -103, 66, 114, 92, -53, 37, -74, 71, 127, -26, 47, -78, 112, 105, 71, -74, 47]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-78, 53, 72, 57, -73, 38, -78, -107, 0, 73, 19, 90, 45, 96, 115, -107, 55, -126, -78, 64, -17, 98, 111, 70, 56, -52, 61, -86, 75, 40, -86, 53, 66, 114, 92, -53, 37, -74, 71, 127, -26, 47, -78, 112, 105, 71, -74, 47]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[64, -88, 46, 110, 84, 16, 47, -116, 33, 47, 61, -109, 50, -38, -81, -118, 33, 120, 41, -19, 7, 6, -102, -30, 50, 125, 39, -84, 62, -91, 32, 113, 85, -46, -75, -75, 59, -108, -59, -60, 101, 15, -99, -109, 127, 70, -9, -74, 122, 106, -64, 18, -55, -8, -44, -52, -32, -63, 126, 45, -88, -42, -104, 87, 88, -55, -20, -123, -59, 92, 95, 63, -97, 91, -41, 89, 78, 85, -89, -106, -35, -28, 106, -101, -13, 5, 107, 56, -127, 41, 125, 79, -126, 90, -44, 101, 66, 114, 92, -53, 37, -74, 71, 127, -26, 47, -78, 112, 105, 71, -74, 47]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[64, -88, 46, 110, 84, 16, 47, -116, 33, 47, 61, -109, 50, -38, -81, -118, 33, 120, 41, -19, 7, 6, -102, -30, 50, 125, 39, -84, 62, -91, 32, 113, 85, -46, -75, -75, 59, -108, -59, -60, 101, 15, -99, -109, 127, 70, -9, -74, 122, 106, -64, 18, -55, -8, -44, -52, -32, -63, 126, 45, -88, -42, -104, 87, 88, -55, -20, -123, -59, 92, 95, 63, -97, 91, -41, 89, 78, 85, -89, -106, -35, -28, 106, -101, -13, 5, 107, 56, -127, 41, 125, 79, -126, 90, -44, 101, 66, 114, 92, -53, 37, -74, 71, 127, -26, 47, -78, 112, 105, 71, -74, 47]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-105, -100, -100, 84, 1, -61, -46, -10, -100, 104, 97, 2, -13, -104, 62, -121]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[6, -14, 38, 78, -21, 103, -119, 10, 122, 81, -93, 127, -41, -60, -104, 116]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-99, -15, -77, 31, -114, -37, -3, -81, 105, 123, -56, -52, -15, 47, 69, -65]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-40, -127, -18, 9, -56, -123, -44, 71, -106, -33, 115, 19, 42, 89, 18, 114]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-72, -84, 25, 86, 70, 102, -113, 76, 52, -91, -32, 60, 100, -97, -67, -19]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[81, -100, 120, -125, -30, -30, -5, -121, -48, -24, -83, 55, 37, -61, 88, 103]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[81, -100, 120, -125, -30, -30, -5, -121, -48, -24, -83, 55, 37, -61, 88, 103]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-73, -8, -99, 81, -44, 7, -50, 64, -88, -101, -9, -74, -60, 120, 74, 6, -56, 83, -17, 120, -52, 22, -104, 109, 12, -115, -104, 48, -115, -22, -69, -34, -72, -84, 25, 86, 70, 102, -113, 76, 52, -91, -32, 60, 100, -97, -67, -19]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-124, 127, 5, -118, -20, 126, -113, -66, 78, -60, 97, -123, -5, -118, 25, 110, 36, -10, 115, -115, -49, 49, 54, 26, -8, 28, -114, 77, 28, 23, 99, 103, -72, -84, 25, 86, 70, 102, -113, 76, 52, -91, -32, 60, 100, -97, -67, -19]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey20);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey49);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("785D85238EF6058BD3CBAAA7366D7F415A8722502FC5E50082C9918733F9B3B0C8F7350F7CB66869038D210C0114B59BDA9757FAD4C615A36FB13B100BBE29A286D4D18998E6A4BE07D276C9D4699B9281A29F98AE8D4D678FADD8931E0FE4D12898879AC63D43C168E02747B342775F", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey49);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-118, 0, 109, 87, -28, -39, 92, 74, -22, 23, 54, 51, 81, -109, 122, -9]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-34, 96, 66, -79, -9, 52, -128, 42, -112, -54, 47, -30, 100, 76, 121, -67]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[83, 31, 74, -47, -56, -53, 104, -16, 37, 32, -79, -70, -14, 71, -25, -41]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-11, -105, 71, 61, 124, 38, 38, 53, 125, 96, 8, 84, 69, 37, 39, -91]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-26, -18, 82, -32, -6, -24, 82, 51, 84, -74, 74, -34, -79, -120, -65, -57, -34, 86, -35, 101, 78, 70, -64, 79, -105, 80, 29, 30, 32, 104, -114, -93, 83, 31, 74, -47, -56, -53, 104, -16, 37, 32, -79, -70, -14, 71, -25, -41]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[73, 87, 79, -10, 126, 89, 115, 58, 122, -56, 46, -18, -12, -49, -33, -70, 62, -51, 71, -114, -61, 76, 96, 87, -98, 28, 39, -92, 78, 113, 95, 94, 83, 31, 74, -47, -56, -53, 104, -16, 37, 32, -79, -70, -14, 71, -25, -41]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[15, -45, 100, -31, 37, -38, 23, -20, 3, -72, 38, 117, 37, 62, -92, 29, 22, -81, 106, -122, 12, -24, 113, 124, 71, 83, 44, 98, -58, -109, 50, 100, -2, 10, -65, -52, -82, 115, 38, 35, -28, 78, -5, -34, -80, 106, 77, -54, 88, -96, 98, -96, -70, 61, -64, -31, 46, -79, 31, 45, 78, 13, -84, -88, 112, 123, 67, -78, 43, 5, -16, 38, -121, 87, 75, 103, -27, 77, -22, -5, 99, -69, -18, 14, -37, -30, 113, 85, -77, 110, 123, -32, 103, 64, -8, 15, 83, 31, 74, -47, -56, -53, 104, -16, 37, 32, -79, -70, -14, 71, -25, -41]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-44, -120, 102, -81, -77, 55, -47, 43, 119, -24, -76, -90, -47, -98, -22, -39, -27, 32, -115, -23, 69, 58, -10, -17, -116, 30, -49, -33, -42, 66, -49, 73, 83, 31, 74, -47, -56, -53, 104, -16, 37, 32, -79, -70, -14, 71, -25, -41]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-78, 88, -93, -96, 96, 102, -102, -28, -17, 21, 101, -119, -86, -120, -108, -125]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-44, 61, 31, -14, -121, 97, -107, -3, 96, 118, 92, 95, 94, -66, -16, 16]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[7, 23, -89, 54, -79, 45, 119, -94, 1, -79, 83, -93, -103, 85, 51, -99]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-97, -37, -28, 105, -15, 124, -120, -82, 67, -30, -85, 37, 117, 13, -37, -55]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-94, -21, -110, -81, 31, -86, -5, 27, 0, -68, -77, -113, 114, 100, -115, -55, 127, -61, 75, 53, 65, 27, -79, -37, 16, 0, 33, -111, 71, 107, -72, 7, 7, 23, -89, 54, -79, 45, 119, -94, 1, -79, 83, -93, -103, 85, 51, -99]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-81, -52, -90, -72, 20, 72, -49, -57, 24, -70, -112, -105, 86, -13, -110, 115, 10, -13, 23, -36, 16, -94, 80, 50, -48, -1, -77, 40, 74, 62, 27, 124, 45, -73, 57, 41, -14, -29, 61, -11, -78, 113, -98, -112, -50, -118, -58, 57, 22, -24, 33, -4, 10, -107, 15, -105, -19, -86, 70, -50, -110, 26, -90, -4, -90, -18, 36, -57, 28, -64, -86, 53, 106, -18, -31, -16, 81, -27, 103, -78, 42, 39, -87, -98, 82, 19, 38, 6, -85, 43, 73, -62, 8, 19, -128, 31, 7, 23, -89, 54, -79, 45, 119, -94, 1, -79, 83, -93, -103, 85, 51, -99]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[48, -31, 92, -90, 94, 85, -118, 89, -76, 94, 58, -115, -3, 6, -60, -98, -4, -27, -20, 59, -54, -103, 102, -109, 23, 115, -112, -8, -2, -81, -109, -60, 7, 23, -89, 54, -79, 45, 119, -94, 1, -79, 83, -93, -103, 85, 51, -99]");
        org.junit.Assert.assertNotNull(byteArray57);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-112, -77, -107, 38, 41, -61, 77, 60, -20, 84, 43, 102, 84, -37, -84, -121]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[109, 56, 57, 60, 36, -103, 2, 110, -36, 4, 67, 5, 113, 90, -91, -87]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[109, 56, 57, 60, 36, -103, 2, 110, -36, 4, 67, 5, 113, 90, -91, -87]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-112, -77, -107, 38, 41, -61, 77, 60, -20, 84, 43, 102, 84, -37, -84, -121]");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[120, -6, -30, 97, 100, -21, 22, -10, -77, -23, 64, -93, 109, -92, -1, -101]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[91, 93, 91, -33, -99, -45, 24, -56, 70, -51, -119, -13, -36, 114, 38, -79]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[91, 93, 91, -33, -99, -45, 24, -56, 70, -51, -119, -13, -36, 114, 38, -79]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[120, -6, -30, 97, 100, -21, 22, -10, -77, -23, 64, -93, 109, -92, -1, -101]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[120, -6, -30, 97, 100, -21, 22, -10, -77, -23, 64, -93, 109, -92, -1, -101]");
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("76B6C9460E19133E83C714B4E6062601", secretKey30);
        java.lang.Class<?> wildcardClass40 = byteArray39.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-85, -119, 42, 41, -72, 71, 29, -28, -69, -71, -109, -128, 124, 33, -6, 91]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[116, 99, -97, 15, 101, -65, -78, -121, 112, 67, 67, -79, 100, -40, -103, -75]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[66, -91, 68, 23, -35, 101, -43, 44, 112, 105, -86, 28, 126, 103, -96, 22]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[102, 25, -120, -111, -90, 34, -10, 115, -86, -96, 124, -122, 13, 85, -98, 29]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-85, -73, -87, 56, -20, -92, -37, 64, 20, -32, -4, -102, 122, 47, 97, -123]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[117, 72, 113, 90, 54, -18, -54, -94, 112, -84, 93, -3, -91, -50, 78, -98]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-73, 51, 64, 84, 58, 10, 111, -71, 38, 19, 126, -99, -101, 111, 97, -104, -70, 124, -19, -6, 46, 125, -38, 120, 89, -68, 23, -76, -111, -52, -121, -2, -85, -73, -87, 56, -20, -92, -37, 64, 20, -32, -4, -102, 122, 47, 97, -123]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[83, -64, 118, -81, -117, -36, -88, 40, 90, 113, 32, -10, -56, -96, -112, 118, 67, 37, 81, 50, 0, -122, -2, -22, 78, 60, 2, 55, -104, -33, -40, -28, -85, -73, -87, 56, -20, -92, -37, 64, 20, -32, -4, -102, 122, 47, 97, -123]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-18, 96, -126, 38, 23, -57, 12, 4, -7, 125, 6, -107, -53, -78, 57, -118, -37, -47, -110, 17, 15, 66, 83, -84, 127, 59, 98, -52, 72, -27, -63, -126, 81, -125, -115, 77, 30, -29, 121, 20, -56, -123, -118, -60, 123, 69, -96, -27, -54, -57, 53, -83, 43, 2, 4, -81, -40, -83, -71, 121, 59, 34, 109, 26, -124, -4, 57, 97, -97, 123, 50, -13, 62, 45, -99, -94, -63, 104, -67, 62, -42, 38, 108, 82, 21, 126, 38, 33, 112, 126, -11, 17, -121, 89, -32, 103, -85, -73, -87, 56, -20, -92, -37, 64, 20, -32, -4, -102, 122, 47, 97, -123]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-13, 99, -50, -128, -53, 90, -77, 39, 114, 15, 126, 44, 64, -101, 73, -60, -18, -116, 91, 88, -39, -78, -63, -86, -4, 33, -29, 107, -72, -101, -62, -2, -85, -73, -87, 56, -20, -92, -37, 64, 20, -32, -4, -102, 122, 47, 97, -123]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.Class<?> wildcardClass29 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-51, 57, 78, -15, -33, 114, 112, -36, 92, 76, 109, 98, 71, 88, 17, 13]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-28, -8, -94, 77, -90, 30, 14, -26, -92, -18, -89, 102, 122, -83, 74, 88]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[110, -81, 118, -118, -16, -105, 114, 107, 71, 32, 84, -81, -55, 63, 58, 126]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[16, 69, -34, 109, -109, 19, 0, 107, 22, 17, 56, -114, -31, 2, 48, 23]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-112, 22, -107, 114, -23, 43, 126, 105, -30, -99, 76, -39, -109, 118, 16, -99, -14, 123, 42, -20, -84, 70, 124, 120, -108, 4, 99, -114, -67, 102, -97, -7, 110, -81, 118, -118, -16, -105, 114, 107, 71, 32, 84, -81, -55, 63, 58, 126]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[110, -81, 118, -118, -16, -105, 114, 107, 71, 32, 84, -81, -55, 63, 58, 126]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[16, 69, -34, 109, -109, 19, 0, 107, 22, 17, 56, -114, -31, 2, 48, 23]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1045DE6D9313006B1611388EE1023017" + "'", str27, "1045DE6D9313006B1611388EE1023017");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1045DE6D9313006B1611388EE1023017" + "'", str28, "1045DE6D9313006B1611388EE1023017");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E52798FE981D087B2C0A3B6A298910A3", secretKey21);
        java.lang.Class<?> wildcardClass29 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[11, -89, -60, 18, -86, -88, 6, -56, -81, 57, -4, 53, 53, 103, -112, -110]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-29, -28, 19, -42, -126, 52, -116, -94, 94, 101, 0, 68, -96, 113, -79, 28]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-13, -105, -122, -43, 13, -24, -75, 20, -51, -38, 40, 4, -61, -90, 99, -94]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-36, -57, -54, -97, 81, 45, 94, -121, 117, 56, 2, 60, -87, -12, -113, 123]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 96, 32, 44, -69, -84, 12, -91, 103, -2, -65, 67, 49, 125, 63, 102, -124, -105, 119, -122, -83, -23, -6, 99, 112, -110, -106, 41, -122, 124, -42, 101, -13, -105, -122, -43, 13, -24, -75, 20, -51, -38, 40, 4, -61, -90, 99, -94]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, -30, -56, 71, 10, 95, -32, -37, -83, -61, -119, -46, -117, -91, -109, 38, -94, 19, -69, 121, 64, 56, 93, 98, -107, 5, -76, 50, 1, 100, -32, 72, -13, -105, -122, -43, 13, -24, -75, 20, -51, -38, 40, 4, -61, -90, 99, -94]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey48);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey48);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey48);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey48);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("C7E6D5DA2ED0973D63DD46433A42257BC953CDEDF0FF7BE4F924CB6E0BAC8779AB28809B0A9BCA3160E4D4C68B5246CC884C8F244127610D4FCF26106A28B55CDCC074E0A6C67ABCE19CFE5C790E45E7877EA397E659C994274087AFC6BFF7DBEEF58CC712BB1C750ACF3D0B26A5E7A587A3A5C48052EF2ECBDC522B41E778EC2DFFF63A4AB8ADF521AB9FEE2BC0948A7A96DE58F882B5200D4E8FE2F6C6C0A584FBB791A25C08F335AA0D7F498FE54EDFFC3B507B8A4D85E9B7FB4F8853EA1C3F60C18DBF4EBDBBA1F1A87315CE669595D58F0A25EF33C5C63EE7BC157EED457120495BF6BF33A182441D2A09992F22", secretKey48);
        java.lang.Class<?> wildcardClass58 = secretKey48.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-12, -15, -58, 22, -45, -23, -128, 64, -71, 79, 15, 45, -7, 14, -55, -108]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[55, 20, -67, -8, 26, 58, -69, -9, -105, 7, -96, 48, 45, -71, -55, 106]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-99, 102, -76, -91, 5, 39, -35, -30, 45, -43, -38, -61, 108, 117, -127, 88]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-125, -49, -10, 71, -62, -110, 73, 63, 28, -27, 97, 60, -19, -42, -71, 5]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-103, 93, -51, 56, 99, 74, -54, 50, 111, -100, -98, -85, -98, -55, 67, 94]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, -6, 22, -40, -47, 99, -68, 103, 122, -49, 1, 63, -80, -37, 87, -13]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[73, -25, 28, 87, 120, -37, -3, -98, -10, 43, -60, -90, 117, 48, -63, 24]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-79, -99, -25, 43, -38, -9, 78, 63, 65, 71, 16, 84, 51, -47, 121, 104]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[113, -46, 100, -25, -104, 23, -108, 12, 108, -120, -80, -64, -7, 80, 58, -58, 65, 4, 71, -43, 34, 101, -80, -94, -92, 98, -18, -42, 103, -22, -119, -90, 73, -25, 28, 87, 120, -37, -3, -98, -10, 43, -60, -90, 117, 48, -63, 24]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[115, -90, -1, 100, 82, -45, 127, 2, 73, 75, 120, -27, 45, -47, -100, 106, -66, -7, 110, -53, 115, -92, -93, -30, -92, 74, 119, -109, 124, -20, 89, 18, 73, -25, 28, 87, 120, -37, -3, -98, -10, 43, -60, -90, 117, 48, -63, 24]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey85);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray93);
        java.lang.Class<?> wildcardClass95 = byteArray93.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[25, 102, 79, -113, -46, -19, 125, -102, -121, 118, 28, 115, 43, 79, -102, 116]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-3, -97, -117, -84, -18, -110, -85, -25, -74, 33, -99, 99, 8, -98, 100, 115]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-82, -48, -38, 22, 119, 83, 22, -3, -120, -91, 121, -44, -57, -30, -124, -39]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-22, -93, 126, -43, 20, 100, -112, 106, 58, -45, 125, -90, 104, -13, -87, -95]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-38, 62, -122, -79, 10, 119, -34, 3, 0, 104, 108, 56, -29, -99, -72, 62]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[41, -120, 5, 120, 114, 79, 103, -9, -3, -120, 7, 122, 40, 11, 67, -94]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[72, -57, -113, 47, 111, 59, 69, -45, 63, 119, -50, 95, 96, 46, 32, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-43, 31, -63, -16, -30, -9, -70, -14, 116, -87, 112, -74, 62, -39, -5, -83]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[44, 92, 115, -105, 22, 45, 105, 115, 57, 9, 49, 15, -110, 97, -58, -104, -80, 55, -20, 108, -27, -115, -12, -73, -15, -41, -107, -12, 32, -33, 68, -70, 72, -57, -113, 47, 111, 59, 69, -45, 63, 119, -50, 95, 96, 46, 32, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[83, -99, -46, -14, -127, -72, 115, -50, 79, 112, -116, 17, -117, 39, -16, 75]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-78, 100, -104, -24, 104, -66, -103, 94, 55, -34, -96, 104, -82, 73, -22, 34]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[75, 51, -39, -17, -63, -48, 23, -21, -71, -12, -5, -79, 52, 117, 11, 124]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[109, 70, 64, -87, 92, 6, -45, 25, 6, 70, 92, 30, 119, 28, -55, -111]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[22, 89, -74, -16, 23, 116, 74, -24, 89, -108, -65, -36, -49, -51, 81, 122]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[49, 77, -125, -107, -17, -126, -2, 38, -27, -73, -62, 112, 88, 115, 122, -105]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[109, 18, 7, -121, -112, -99, -86, 12, -10, -39, 126, 89, -2, -92, 41, 76]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-8, -96, 38, 42, 40, 85, -54, 46, -59, -107, 118, -77, -31, -39, 49, 103]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-32, 77, 49, 89, 29, 105, 47, -111, 75, -73, -43, -124, 117, -50, 28, -37, 123, 97, -47, 54, -53, 86, -49, 19, 122, -7, -48, 91, -19, -81, -29, -103, 109, 18, 7, -121, -112, -99, -86, 12, -10, -39, 126, 89, -2, -92, 41, 76]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-8, -96, 38, 42, 40, 85, -54, 46, -59, -107, 118, -77, -31, -39, 49, 103]");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "F8A0262A2855CA2EC59576B3E1D93167" + "'", str94, "F8A0262A2855CA2EC59576B3E1D93167");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-83, -64, -89, 114, 127, -36, 67, 76, 105, 81, 118, -64, -19, 39, -77, 79]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[13, -13, -19, 123, -53, -19, -65, -49, 22, -38, 108, 112, -63, 91, 99, 119]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[13, -13, -19, 123, -53, -19, -65, -49, 22, -38, 108, 112, -63, 91, 99, 119]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, 87, -48, -23, -62, -30, -28, 48, -69, -85, 109, 31, 29, 33, 76, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-125, -100, -5, 120, 83, -40, -27, -66, 94, 59, -111, 1, 69, 111, -75, 115, -55, -8, -11, 78, 108, 3, 62, -25, -16, -45, 75, -43, -127, 122, -69, 41, -125, 51, 87, -5, 54, 48, -39, 14, -14, 115, -117, 66, 52, -51, -48, -34, -57, 53, 0, -125, 113, -82, -45, -40, -92, 74, -93, 51, 39, -122, 38, 69, 75, -9, 23, -13, -30, 25, -43, 36, 47, 115, -30, 70, 127, -54, -19, 121, -66, -3, 16, 21, 67, -41, -50, -122, -2, -110, 115, 37, 119, -102, 111, 69, -83, -64, -89, 114, 127, -36, 67, 76, 105, 81, 118, -64, -19, 39, -77, 79]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey33);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[2, 14, 83, 2, 97, -63, 80, 118, -46, 62, -99, 67, 116, -23, -21, 15]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[15, -115, 42, 31, -49, 31, -22, -5, 114, 117, -56, -109, -72, 10, -35, -47]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[15, -115, 42, 31, -49, 31, -22, -5, 114, 117, -56, -109, -72, 10, -35, -47]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-40, -29, -97, -112, -124, -52, 91, -29, 104, -45, 125, -29, 0, -88, -104, 122]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[15, -115, 42, 31, -49, 31, -22, -5, 114, 117, -56, -109, -72, 10, -35, -47]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[92, -54, 35, -42, -84, -41, 121, 76, 68, 124, -65, -102, 32, 25, 100, -64, -61, -96, -71, 110, 32, 114, 22, -44, 24, 71, -87, 111, -84, 87, 68, -105, -9, -83, 112, -112, -54, 71, -44, 111, 51, -22, 102, 2, -119, -107, 99, -115, 53, 31, -84, 39, 89, -67, 40, 115, -108, 114, -34, 76, 58, 93, 10, -20, -11, 64, -122, -107, -73, -33, 85, -101, -13, -11, -14, 64, 127, 76, -37, -123, -87, 22, -125, 20, -101, 124, 39, -89, 28, 18, -66, -83, -79, 112, 6, -125, 2, 14, 83, 2, 97, -63, 80, 118, -46, 62, -99, 67, 116, -23, -21, 15]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-74, -75, -63, -73, -42, 13, -42, -70, -97, 49, 52, 100, -109, 67, 98, 113]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[105, -3, -104, 112, 78, -37, 70, -22, -113, 53, -87, 2, -76, 73, 71, -69]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[61, -99, 108, -69, -21, -105, -72, -123, -98, -20, 16, -94, 120, -118, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[120, -56, 48, 91, 60, -122, -64, -46, 127, -29, 39, 76, 86, -106, -114, 96]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-122, 37, 13, -69, -120, 26, -18, 50, 36, 57, -87, -125, 10, -7, -112, -3, -99, -90, 88, 111, 1, 71, 72, 58, -21, -38, -81, -80, 21, 89, -115, 108, 61, -99, 108, -69, -21, -105, -72, -123, -98, -20, 16, -94, 120, -118, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-108, 118, -17, -19, 64, -22, 83, -57, 67, 59, 70, 68, 15, -35, -76, -55, -91, 111, -114, -12, 101, 59, -42, 44, -11, 2, -71, -95, -2, 29, -90, 84, 61, -99, 108, -69, -21, -105, -72, -123, -98, -20, 16, -94, 120, -118, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-72, 66, 110, -54, 98, -35, 67, 78, 48, 117, -90, 4, -122, -128, -20, 98, -80, 10, -29, -54, 113, 59, -91, 119, -111, -108, 15, 13, -45, 16, -97, 12, 61, -99, 108, -69, -21, -105, -72, -123, -98, -20, 16, -94, 120, -118, -119, -126]");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("631CD88B891BC25FC9995B70DD362D570E52845EC8867317731568B9E7523AE26B6721F6D29768B47B9C91B6E386162460CC156C55E4B5F06B716200308DD85CE13D6F3D3E22F68338846F1ECFF8553CC03153D90EE69321F8C1B48BA8E4C314951651A5FB6EC9F82A78CD2EA69D5F211C5E03848451A725EFF8A94C87AD24E08D7E10050FFE0F980274AFADD6A565F45E6A1D97EC7726764A99B76B42352A3D5055F5FB20717AE9E7D67867BA207468ED40152F4EFE4146AFF8B79DF23D9B149AB8BC11B1126C724FCB230A95EFA90CB54EC5465E9935C4A25D335288A731AECA96234FF3B0E7541672180D80122DBB", secretKey22);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey41);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[82, 42, -121, -73, -80, -77, 59, -37, -18, 67, 109, -85, -32, 2, -62, -5]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-31, -106, 46, 92, -7, 96, 59, 24, 40, -118, 0, -83, -10, -84, 20, 93]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-5, -77, 92, 23, -121, 21, -108, 75, 76, 34, -48, 1, 17, 4, 114, 33]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-87, -38, -85, -16, -115, -89, 21, -51, -95, -14, 46, 6, -38, -69, 95, 13]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-75, 27, 87, -28, -75, -35, -15, 63, 71, -107, -57, 5, 107, -31, 88, -117, -33, 10, -40, -106, 5, 31, 16, 64, 33, -33, -49, -115, -127, 79, -3, 19, -5, -77, 92, 23, -121, 21, -108, 75, 76, 34, -48, 1, 17, 4, 114, 33]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-5, -77, 92, 23, -121, 21, -108, 75, 76, 34, -48, 1, 17, 4, 114, 33]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-87, -38, -85, -16, -115, -89, 21, -51, -95, -14, 46, 6, -38, -69, 95, 13]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-50, -13, -25, 28, 50, 35, 12, -49, 70, 49, -90, -106, 114, 44, 108, 112, -56, 37, 105, 97, 4, -45, -68, -98, -41, 24, 127, 45, 92, 15, 109, -24, -5, -77, 92, 23, -121, 21, -108, 75, 76, 34, -48, 1, 17, 4, 114, 33]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[33, 71, 77, 28, 48, -83, 49, 50, -79, -66, -112, -123, -90, -92, -90, 5, -55, 90, 16, 36, -26, -68, 59, 66, -105, 61, 68, 114, 6, 49, -110, 37, -6, 97, -23, 31, 84, -68, -80, -74, 76, -20, -13, 93, 89, -110, 59, 33, -91, -103, -78, 16, 65, 96, -35, -39, 71, 69, -75, 47, -72, 122, 127, -5, 96, 99, 38, 127, -40, 63, 13, 22, -18, -99, -4, -1, 5, 10, -112, -17, 122, -51, 117, 28, 13, -81, -113, -20, 41, 64, -44, -24, -33, 66, 38, 50, -5, -77, 92, 23, -121, 21, -108, 75, 76, 34, -48, 1, 17, 4, 114, 33]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-59, 51, 26, -28, 111, 20, -120, -25, -126, -20, -20, 5, 22, -22, -123, 123]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, -18, -37, 61, 69, 67, 19, 73, -98, 63, -51, -108, -124, -91, 8, -101]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-30, 92, 59, 5, -111, 25, -35, -15, -94, 121, 5, 76, -66, 17, 21, -79, -101, 28, 90, -93, 3, -81, -57, -105, -31, 25, -109, 65, -55, -57, 34, 77, -62, 104, -15, -95, 24, 113, 36, -65, -71, -2, 22, -37, -22, 36, 56, -92, -43, 88, -125, -107, -65, 18, 84, 110, -77, -119, 6, 122, -51, 8, -24, -100, -81, 14, -17, 95, 91, 120, 94, -126, 95, -119, 62, 116, -97, -61, -77, 106, 26, -83, -32, 80, 55, -80, 77, 45, -109, 89, -2, -77, -59, 58, 64, -119, -59, 51, 26, -28, 111, 20, -120, -25, -126, -20, -20, 5, 22, -22, -123, 123]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-49, 58, 15, -128, -55, 116, -64, 89, -99, 62, 44, 51, -106, 87, -24, 74]");
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("F6441EF035CB44DF482D4076E2A2584A09FB6932E41E1A73AACC011A11D436CF6153ACC0BB45F9E81CD68A0E5BDE70C5E98B731602E244B9470D386A4098F20E0DA871E1E1E68188363224699C5B251F769207B9D3E7B513FBF246B3AB276CDE6EDB9EC603A754A6FDFF48C1723737A5", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey33);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[40, -107, -83, 2, -35, 54, 110, 26, -111, 125, 106, -65, 1, -117, 9, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-126, 29, 68, -61, 65, 119, -11, 96, 109, -98, 122, -81, 68, 49, -114, 69]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-52, -91, 42, 51, -60, 75, 121, 37, -61, -16, -115, 86, -120, -114, -48, -22, -18, 105, 34, 43, -70, -85, -119, 99, -48, 94, 90, -8, 66, -51, 122, 26, 40, -107, -83, 2, -35, 54, 110, 26, -111, 125, 106, -65, 1, -117, 9, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-72, 90, 78, 45, -86, -70, -123, -119, -109, 72, 38, -75, -112, 49, -73, -17, 63, 116, 123, -36, 127, -1, 73, -50, 23, 81, 64, -63, -32, 1, 46, -55, 40, -107, -83, 2, -35, 54, 110, 26, -111, 125, 106, -65, 1, -117, 9, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-115, -96, -54, -56, 12, -119, 21, 17, -39, 108, 127, -32, -98, 93, 29, 1, 90, -73, 79, -99, -96, -9, -33, -35, -17, 18, 87, -21, 37, -53, -54, 118, 40, -107, -83, 2, -35, 54, 110, 26, -111, 125, 106, -65, 1, -117, 9, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "5535042DBC2DBF658BF5354BBEC1427BDCD6E0CE23CAAB0AC99B7464EF0FB9A2DDE94157F12CA26CDD549DC1BFF3A3C6433E78086D296570749C52DDE508A70A91BA1347740419583CC99B7420D00DEC3903595E7C1461D70BD2B03C77881A5E8B3D60F59AD5FAA4E4B49DF484B8A9A46598E8F4392E32FBBE1ACB434C8948D1D50E5CE2807D15513A0FB86FA8C9FB487DE9A8666714F9338B89A59789D763999EF375112126B9AE2150CA629007A885E0CFE0D0588B0FFEB9F8094D25CE8AFF6C71EB158A5D345450FD61BDA8A14D42D8D53A69DBBC88C2CF2ADC758A7AB8F92895AD02DD366E1A917D6ABF018B090A" + "'", str13, "5535042DBC2DBF658BF5354BBEC1427BDCD6E0CE23CAAB0AC99B7464EF0FB9A2DDE94157F12CA26CDD549DC1BFF3A3C6433E78086D296570749C52DDE508A70A91BA1347740419583CC99B7420D00DEC3903595E7C1461D70BD2B03C77881A5E8B3D60F59AD5FAA4E4B49DF484B8A9A46598E8F4392E32FBBE1ACB434C8948D1D50E5CE2807D15513A0FB86FA8C9FB487DE9A8666714F9338B89A59789D763999EF375112126B9AE2150CA629007A885E0CFE0D0588B0FFEB9F8094D25CE8AFF6C71EB158A5D345450FD61BDA8A14D42D8D53A69DBBC88C2CF2ADC758A7AB8F92895AD02DD366E1A917D6ABF018B090A");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[71, 60, 19, -6, -80, 48, 37, 115, -60, 123, -88, -18, 49, -96, -104, -2]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-39, -101, 127, 76, -105, -77, 7, -71, 114, 40, 86, -24, -100, -74, -31, -20]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 95, -58, -82, -46, -82, 3, -111, -72, 84, 86, -112, -40, 14, 28, 4]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-31, 107, -101, 36, -74, 113, 37, 38, -76, -4, -91, 70, -45, 19, -65, -128]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-115, -79, -54, 102, -6, -69, 79, -58, 8, 100, 100, -6, -96, -106, 16, 33, -15, -73, -60, -103, 42, 51, -117, 120, 43, -119, 112, 49, -81, -95, -93, 114, 10, 95, -58, -82, -46, -82, 3, -111, -72, 84, 86, -112, -40, 14, 28, 4]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray40);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey35);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey44);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey44);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey44);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey44);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey44);
        java.lang.Class<?> wildcardClass53 = secretKey44.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-79, 68, -54, -55, 98, 117, -92, 124, -1, -101, -3, -22, 7, -26, -3, -97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-38, 0, 105, -66, 66, 69, -43, 120, 17, -112, -5, -103, 9, 10, 57, 72]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[95, -15, -66, -50, 42, 120, -108, 72, -9, 105, 98, -104, 41, -84, 103, -64]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[104, -2, -77, 21, -77, 37, -5, -59, 99, -10, -34, 97, -51, -65, -89, 71]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-45, -24, -56, 49, -75, 20, -27, -49, 80, 54, -119, -40, 70, -67, -5, 65]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 96, 100, -32, 103, -9, 101, -116, 53, -51, 101, 33, -36, -75, -8, 13]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-68, 24, -67, -94, -87, 75, 37, -12, 67, 79, 107, 13, 54, -45, 18, 33]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-68, 24, -67, -94, -87, 75, 37, -12, 67, 79, 107, 13, 54, -45, 18, 33]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[109, 74, -82, -40, 3, -90, -78, -72, -18, -44, -78, 22, 49, 55, -21, -46, -38, -97, -103, -12, 122, -89, -23, -44, 42, 57, -122, 19, -37, 37, -8, -49, -1, 96, 100, -32, 103, -9, 101, -116, 53, -51, 101, 33, -36, -75, -8, 13]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[87, 98, 38, -91, 41, 121, 46, -107, 55, 6, 107, 31, -115, -42, 55, -121, -34, -31, -103, -74, 85, 105, -77, 8, 57, -126, 79, 110, -111, 0, 100, 88, -1, 96, 100, -32, 103, -9, 101, -116, 53, -51, 101, 33, -36, -75, -8, 13]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey16);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey16);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey16);
        java.lang.String str24 = null; // flaky: com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey16);
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-40, -20, -80, 90, 117, -87, -89, -27, 55, -53, 88, -46, 79, -127, -72, -48]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[117, 91, -115, -83, 36, 55, 94, -76, 58, 65, -122, -95, -89, -47, -7, -115]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[117, 91, -115, -83, 36, 55, 94, -76, 58, 65, -122, -95, -89, -47, -7, -115]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-40, -20, -80, 90, 117, -87, -89, -27, 55, -53, 88, -46, 79, -127, -72, -48]");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[45, -115, -114, -88, 107, -37, 50, -97, -56, -114, -120, 114, -120, -16, 96, -113]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[99, 42, -2, -40, 40, 124, -94, 97, 109, 15, 55, 69, -59, -72, -17, 120]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[99, 42, -2, -40, 40, 124, -94, 97, 109, 15, 55, 69, -59, -72, -17, 120]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[125, 27, 30, 111, 51, 118, 99, -102, 41, 126, -95, -85, -35, 52, -47, -29]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 42, -2, -40, 40, 124, -94, 97, 109, 15, 55, 69, -59, -72, -17, 120]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-22, -126, -57, -114, 125, -44, -102, -67, -41, 122, 44, -28, 111, -68, -30, 74, -40, 72, -52, -40, -37, 99, 123, -34, -52, -4, -112, 94, -6, -47, 28, -23, 45, -115, -114, -88, 107, -37, 50, -97, -56, -114, -120, 114, -120, -16, 96, -113]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[48, -75, -89, -53, -67, 8, 81, -8, -68, -15, -28, -86, -13, -100, -56, -64, -62, -48, 115, 52, -37, -20, -125, -126, 65, -3, 12, 83, -121, 18, 109, 21, 45, -115, -114, -88, 107, -37, 50, -97, -56, -114, -120, 114, -120, -16, 96, -113]");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\006\ufffd\ufffd\t\ufffd\023S\031\ufffd\ufffd}+" + "'", str24, "\006\ufffd\ufffd\t\ufffd\023S\031\ufffd\ufffd}+");
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey21);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey37);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-14, 41, 29, -23, -105, -116, -59, 44, 28, -34, 63, -98, -123, -27, -90, -68]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[76, -84, -13, -98, 68, 9, -104, -3, 69, 67, -57, -122, -94, 121, 80, -74]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[59, -79, -86, 63, 7, -112, -21, 99, -78, -31, -90, 123, -38, -103, 27, 34]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[13, 112, 92, 73, 104, -97, 79, -122, -99, -63, 109, 4, -109, -16, -2, -90]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-43, 116, 59, 56, -111, 14, -86, -101, -7, -92, 126, 24, -124, 32, -117, -31, -19, -90, 94, 70, -34, -36, 93, 120, -37, 125, 61, 72, 81, 115, -70, -94, 59, -79, -86, 63, 7, -112, -21, 99, -78, -31, -90, 123, -38, -103, 27, 34]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[92, 27, -81, -6, 65, -77, -103, -25, -123, -8, -115, -84, 89, 91, 55, 94, -89, -26, 122, -71, -12, -24, -13, 71, 33, 124, -92, -58, -54, -86, -114, -81, 59, -79, -86, 63, 7, -112, -21, 99, -78, -31, -90, 123, -38, -103, 27, 34]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-56, -37, 112, 17, -11, -12, -94, 85, 84, 28, 94, -57, -33, 15, -67, -83, 65, -112, -29, -67, -94, 70, -109, -26, 77, 25, -63, -28, -29, 34, 17, -113, -4, -114, -15, -17, -37, -55, -72, 114, -75, -102, 31, 25, 41, 16, 75, 60, -29, 54, -97, 45, -82, -49, -6, 49, -14, 62, -40, -7, 90, -22, -54, -104, -47, 48, 20, -8, 51, -72, 34, 22, 49, -103, -59, 2, -45, -73, -13, 55, 77, -25, 60, -36, 88, 12, 41, -116, -120, 21, 84, -91, 105, -107, -51, 47, 59, -79, -86, 63, 7, -112, -21, 99, -78, -31, -90, 123, -38, -103, 27, 34]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[57, 126, 24, 84, -100, 84, -124, 7, -103, 66, 45, 36, 69, 43, 11, 107, -74, -10, 84, 117, 10, 87, 124, -33, 27, -76, 20, -38, 48, -17, 12, -49, 80, 53, -35, 29, 65, -50, 18, 34, -121, -40, 102, -49, 50, -95, -4, 67, 95, 50, 26, -33, -91, 84, -109, 119, 117, -73, -75, 78, -17, 127, -14, 40, -117, -31, 115, 95, -101, 78, -116, -52, 91, 52, 58, -85, 28, -53, 119, 122, -35, 81, -15, -31, 48, 40, 65, 70, 72, -96, -74, -104, -50, 82, 40, -26, 59, -79, -86, 63, 7, -112, -21, 99, -78, -31, -90, 123, -38, -103, 27, 34]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-86, 84, -22, -8, -6, 126, 59, -107, -49, -103, 109, 120, -27, 8, 52, 80, 94, 29, -44, 114, -49, 82, -9, -102, 99, 24, -50, 49, -19, -47, -80, -97, 59, -79, -86, 63, 7, -112, -21, 99, -78, -31, -90, 123, -38, -103, 27, 34]");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-4, -60, 34, 8, 51, 126, -8, -32, -93, 40, 100, -62, -14, -33, -36, 124]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-3, -12, 72, 60, -38, -2, 2, -6, -84, 7, 47, 27, 23, -15, 60, -23]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-3, -12, 72, 60, -38, -2, 2, -6, -84, 7, 47, 27, 23, -15, 60, -23]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[9, -108, 82, -4, 37, 93, 121, 12, -32, -98, -84, 10, -50, 15, 80, -25, -118, -1, 23, -45, 26, -16, -126, 61, 70, -95, -110, 94, 15, -118, -123, -6, -4, -60, 34, 8, 51, 126, -8, -32, -93, 40, 100, -62, -14, -33, -36, 124]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-86, 126, -79, 23, -10, -126, 32, 116, -29, -78, 122, -7, -83, -41, -110, 60, 50, -49, -3, 125, -72, -8, 23, 112, -16, -57, 101, -4, -114, 92, -3, -30, -4, -60, 34, 8, 51, 126, -8, -32, -93, 40, 100, -62, -14, -33, -36, 124]");
        org.junit.Assert.assertNotNull(byteArray43);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey17);
        java.lang.Class<?> wildcardClass23 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-49, 2, -57, -61, 38, -78, -76, -97, -28, 106, -114, -3, -99, -22, -12, 17]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[12, -18, 60, -68, 92, 79, -117, -108, -68, -76, 30, -125, -100, -48, -1, -96]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[58, 46, 76, -13, 44, 59, -127, -42, 76, -24, 27, 37, -93, 68, -80, 119]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-77, -8, 24, -64, 115, -125, -69, 109, 86, 17, -58, 9, -24, 68, 83, -113]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[124, -44, 0, -48, 11, -15, -90, 126, 113, -53, -73, 70, -124, -20, 3, -62, -30, -112, 77, -114, 81, 118, 19, -76, 29, -35, 23, 86, -93, 67, 113, 108, 58, 46, 76, -13, 44, 59, -127, -42, 76, -24, 27, 37, -93, 68, -80, 119]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.Class<?> wildcardClass7 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0101FF" + "'", str5, "0101FF");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0101FF" + "'", str6, "0101FF");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[27, -4, -80, -97, -71, 106, 120, 74, -82, 98, 114, -11, 104, -11, -53, -63]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[20, -124, 33, -33, -42, -98, 114, 98, -8, -11, -2, 119, -45, -26, 72, 61]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[62, -21, -8, -86, -19, -72, -50, -114, 101, 90, -2, 112, 1, -21, 17, -63]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-41, 75, -34, 25, 110, -43, -97, -65, -95, -101, 125, 115, -18, -11, -16, -53]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-79, -55, 17, 112, -91, -100, 36, -60, 25, 64, 33, 95, 67, -35, 98, 43, -3, 117, -73, 111, -24, -8, 33, -117, 4, 79, -36, -30, 121, -76, -69, 70, 62, -21, -8, -86, -19, -72, -50, -114, 101, 90, -2, 112, 1, -21, 17, -63]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-59, -79, -80, -35, 110, 113, 67, -6, 28, 95, 49, 42, -96, -123, 99, 109, -83, 69, 29, -40, 114, 55, -2, -14, 69, 78, 88, 75, -124, -49, 2, -73, 62, -21, -8, -86, -19, -72, -50, -114, 101, 90, -2, 112, 1, -21, 17, -63]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[73, -9, 48, -90, 95, 109, 91, -7, -31, -72, 50, 21, 68, 123, -92, -59, 11, 52, 27, 100, 53, -64, -35, 22, 26, -109, -78, -31, 115, 60, 90, -60, -4, 56, -107, 82, -112, -79, -117, 33, 0, 108, 86, 93, 16, -124, -72, -85, 95, 4, -79, 45, -58, 18, -95, 59, 91, 107, -115, 24, 81, -68, -92, 64, 32, 61, 117, -86, 117, 103, -113, 69, -60, 50, -53, -23, -118, -108, 60, -43, -85, 63, 75, 75, -77, -103, -114, -43, 70, -55, 117, 78, -64, 77, 34, -57, 62, -21, -8, -86, -19, -72, -50, -114, 101, 90, -2, 112, 1, -21, 17, -63]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey21);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey68);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey68);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey68);
        byte[] byteArray77 = new byte[] {};
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray77);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray77, secretKey79);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey79);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey79);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey79);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey79);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[5, -125, -52, -127, -107, -15, 57, -99, 97, 102, -6, -64, 44, 92, -10, 30]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[36, 88, 54, -38, -82, -74, -114, -125, -68, 13, -62, 48, 39, -74, 39, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-17, -90, -33, 45, -58, -124, -37, -40, -44, 44, 27, 106, 27, 105, -103, -12]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-113, -31, -116, 97, -122, -92, 104, 25, -100, -9, 89, 61, -10, -97, 28, -23]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-11, 65, -4, 7, -125, -3, 76, -53, -90, -83, -41, 101, -100, 13, 65, 12, -64, 52, 89, 32, -38, 49, 122, 117, -24, -112, 23, -32, 92, -33, 126, 46, -17, -90, -33, 45, -58, -124, -37, -40, -44, 44, 27, 106, 27, 105, -103, -12]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[51, 50, -109, 32, -106, -7, 53, -11, -39, -20, -16, -39, 29, 59, -24, -86, 54, 87, -40, 74, 21, 38, 21, -85, -101, 56, 49, -88, -65, -124, 54, 86, -17, -90, -33, 45, -58, -124, -37, -40, -44, 44, 27, 106, 27, 105, -103, -12]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-102, 83, 40, 49, -83, 97, -48, -128, -84, 54, 121, -24, -34, 2, 67, -116]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-86, 78, 111, -19, 114, 42, -114, 24, -96, 10, 56, 13, -23, 67, -24, 115]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-94, 116, 103, -13, 69, 67, -59, -50, -53, 74, -1, 87, -4, 25, 45, -62]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-73, -104, 59, 51, 94, 42, 12, 92, -12, -13, -12, -15, 101, 28, 17, -38]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-41, 58, -70, 51, 126, 8, 35, -53, 119, -57, -123, 32, -55, -49, 27, -116]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[103, 108, -24, 127, -72, -63, -106, -45, 117, 42, 40, -84, -122, -94, 23, 15]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-77, -49, 76, -53, 91, -91, 15, -95, 31, -15, -102, -76, -19, -26, 57, 124]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[88, 48, -29, 118, -88, 68, -113, -112, 118, 72, -105, -72, -12, 18, 127, 56]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[106, 5, -13, -111, -57, 13, 12, 52, -125, 74, 83, -72, -97, 56, -28, 73, 104, -57, 87, -38, 49, 50, 64, -85, -117, -7, 106, -89, 13, -68, 0, -89, -77, -49, 76, -53, 91, -91, 15, -95, 31, -15, -102, -76, -19, -26, 57, 124]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-50, 40, -37, 71, 49, 41, -28, -40, -70, 59, -74, -110, -3, -40, 78, -82]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[83, -18, 124, -56, 125, 34, -102, -122, -79, -116, -7, 100, 28, 31, -44, -2, -122, -10, -42, -34, -124, 16, 125, -98, 65, -79, -126, 50, -10, -13, -98, 109, 19, 91, -121, -12, -59, 37, 37, -47, 85, 56, -60, -7, 91, -13, 83, -81]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey22);
        java.lang.Class<?> wildcardClass33 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-112, 31, 26, -103, 94, 42, -46, -40, 108, 45, 32, 93, 122, -26, 125, 3]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-7, -15, 51, -78, -56, -42, 111, 15, -76, -75, 119, 75, 29, 70, -55, 43]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[36, 102, 121, -31, 106, -106, -40, 118, 115, -98, 98, 89, -104, -26, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 25, 112, -45, 102, 104, 110, 118, -45, 98, 7, 73, 81, 94, -117, 96]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-70, -84, 57, 117, -29, -123, -44, -6, 88, -71, 61, -30, -43, 67, 64, 71, -40, 27, 46, 0, 46, 116, -77, 6, 77, 39, 26, -41, -62, -85, -87, 17, 36, 102, 121, -31, 106, -106, -40, 118, 115, -98, 98, 89, -104, -26, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-123, 126, -123, 103, 23, 35, 76, -34, -105, 83, 55, -69, 49, -116, 117, -56, 79, -90, 81, -107, 16, -38, -6, -16, 41, 71, 46, 8, 99, -40, 99, 87, 36, 102, 121, -31, 106, -106, -40, 118, 115, -98, 98, 89, -104, -26, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[11, -72, -28, -36, -128, 62, -49, 17, -32, -33, -93, 74, -14, -76, -23, 12, 70, 49, -126, -68, -99, 65, 83, 10, -127, 49, -48, -66, -5, 62, 32, -32, -97, 60, 91, 34, 124, 83, -67, 113, 114, 22, -47, 23, -74, 43, -18, -56, 59, -92, 116, -29, 25, -65, 84, 120, -100, -1, -72, 89, 14, 95, -15, -121, -21, -89, -122, 20, -40, 63, -17, 74, -50, -37, -28, -92, -51, -110, 73, -107, 47, 4, 119, -51, -64, -38, -114, 106, 9, -21, 120, -11, 108, -34, -99, -104, 36, 102, 121, -31, 106, -106, -40, 118, 115, -98, 98, 89, -104, -26, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-8, -46, 82, 108, -104, 47, -128, -3, 52, -94, 115, -2, 127, 82, -121, -126, 69, -111, 115, -18, 38, 67, -74, 9, 102, -115, -89, 47, -72, 31, 57, 87, 36, 102, 121, -31, 106, -106, -40, 118, 115, -98, 98, 89, -104, -26, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[17, 68, -90, 113, 127, -31, 58, -83, 111, -90, 123, -98, 101, -109, -5, 21, 36, -15, 91, 93, -55, -23, 51, -5, 36, 36, -125, 67, 1, -2, -23, -8, 62, -66, 85, 65, -86, 50, -53, 62, -19, 126, -128, -116, 15, 59, -86, 39, -50, -100, -92, 85, 114, -73, -6, 99, 93, 19, -56, -119, 91, 66, -1, 36, 63, 26, 108, -88, 117, 50, 91, -127, 124, 127, -38, -10, 62, 46, 3, 71, -20, -125, -94, -110, 13, 123, 112, -42, -83, 113, 84, 44, 4, 114, -33, -121, 36, 102, 121, -31, 106, -106, -40, 118, 115, -98, 98, 89, -104, -26, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-53, -77, 97, -51, -88, -105, -103, 41, -33, 127, -62, 95, -87, 3, -113, -25]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[63, -94, 42, 39, 19, 12, 62, 64, -70, 45, -92, 120, -95, -60, -108, -6]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-27, -105, 60, -11, -95, -52, 48, 106, 72, 62, -51, -44, -127, -85, -26, 31]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-94, 55, -54, -47, -96, -96, -92, 42, -110, 59, -126, -95, 23, -107, 1, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-99, 29, -22, 34, -70, -70, 84, -55, -9, 38, 13, -70, 97, -32, 97, -44, 104, 47, 68, -77, -42, 14, -113, -69, 10, 120, 45, -124, -98, -18, -42, 81, -27, -105, 60, -11, -95, -52, 48, 106, 72, 62, -51, -44, -127, -85, -26, 31]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-128, 42, -101, -5, -53, 52, 35, -93, -128, 30, 120, -36, -51, 61, -34, -59, 30, 107, 67, -121, 81, 29, -9, 91, -90, -29, -46, -92, 121, 43, -1, -6, -27, -105, 60, -11, -95, -52, 48, 106, 72, 62, -51, -44, -127, -85, -26, 31]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-44, -87, -123, -117, -118, 107, -4, -50, 103, 117, -69, 95, 102, -86, 12, 86, -106, 13, 95, -27, 83, -81, 124, -30, -38, 102, -79, -128, -66, -54, 61, 53, -122, 16, -50, -45, -72, 123, -114, 117, 98, 89, -4, 109, 95, -81, -76, -116, -113, -38, 56, 39, 9, -120, 79, -18, 74, -96, -51, -28, -128, -19, -73, 57, -50, -85, -114, -7, 49, -107, 74, -62, 84, 106, 8, 86, -126, -96, -14, 78, 37, -87, -107, 34, 51, -127, -12, -44, -111, -100, 73, 39, 6, 94, 65, 74, -27, -105, 60, -11, -95, -52, 48, 106, 72, 62, -51, -44, -127, -85, -26, 31]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[127, -64, 24, 44, -118, -112, -43, 54, 34, 36, -93, -77, 32, 117, 24, -106, 59, -100, 8, 16, -56, 28, 38, 55, 119, -53, 99, -121, 6, 17, -46, -13, -79, -26, 9, -100, 28, -20, -87, 100, 10, 76, 47, 91, 116, 95, 116, -95, 95, 2, 92, 122, 109, -48, 9, 61, -16, 106, -59, -1, -55, 106, -124, -59, -43, 112, -102, -116, 6, 2, 68, 127, 103, -105, -41, 101, -21, -31, -72, 83, -24, -46, 126, 86, -31, 100, 70, -76, 34, -69, -121, 65, -109, 76, -127, 121, -27, -105, 60, -11, -95, -52, 48, 106, 72, 62, -51, -44, -127, -85, -26, 31]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        byte[] byteArray50 = new byte[] {};
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey52);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey56);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey56);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey56);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey56);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey56);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey56);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey56);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-11, 100, -57, -4, 84, 84, -49, -12, 28, 79, -73, 46, 84, -103, -103, 60]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[119, 86, -96, -53, -19, 31, -21, 96, 64, -21, 113, 74, 86, 9, -73, -6]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[73, 127, -3, 0, -9, 119, 56, 74, 88, 67, 2, 67, 115, -5, 94, -60]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-108, -62, 53, -111, -86, -128, 22, -53, 101, 57, -95, 79, 69, -36, -124, -15]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[110, -105, -87, 6, -73, 13, 13, 79, 70, -52, -16, -63, 71, 78, 38, 23]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[45, -35, 26, 2, -121, -65, 9, 2, -104, 26, -78, -76, -62, 44, 126, 126]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-34, 51, 47, -120, 113, 104, 105, -17, -23, -120, 49, -68, 66, 121, 40, -105]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[16, 52, -37, 126, 113, 82, 80, 23, -31, -22, 14, 9, -34, -89, -126, 43]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-25, 108, -122, -100, 110, 109, -64, -84, -37, 48, -38, 35, -29, -24, -109, -122]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-114, 15, 119, -62, 70, 26, 59, 38, -29, 89, -112, -53, -88, -82, -116, 42, 31, 92, -72, 72, 30, 54, -91, 126, -34, -30, -11, -17, -36, -21, 14, 41, 16, 52, -37, 126, 113, 82, 80, 23, -31, -22, 14, 9, -34, -89, -126, 43]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[56, 88, 47, -49, 27, -59, 90, 95, 65, -75, -29, -15, -29, 59, -22, -58, -99, 42, 84, 1, 95, -27, -103, -126, 66, -37, 91, 28, -96, 15, 28, -111, 16, 52, -37, 126, 113, 82, 80, 23, -31, -22, 14, 9, -34, -89, -126, 43]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey28);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey28);
        java.lang.Class<?> wildcardClass36 = secretKey28.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-15, -40, -125, -119, 36, -128, 51, -92, 54, -84, -98, -110, -20, -99, -69, -97]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[111, 44, 43, 75, 59, 113, -19, 96, 115, -6, -67, -39, -1, -28, -27, 73]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-88, -115, -101, 116, 109, -128, -23, 108, 53, -1, 47, 39, -58, -29, 18, 118]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[87, -84, -84, 95, -36, 90, -55, -32, 8, -71, -45, 12, -25, -42, 116, -78]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-39, 28, 87, -42, -91, -18, -6, 121, -73, -102, 82, -19, -75, 44, 23, 64]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-3, -76, 51, 74, 36, -2, -44, 126, -30, 123, -46, -59, -24, -25, -112, 105]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[127, -38, 54, 60, -14, -35, 66, -117, 95, 64, -51, -31, -10, 68, -14, -41, -55, 110, 81, -73, 105, -60, -13, -3, -46, 3, 120, -48, -34, 123, -27, -17, -39, 28, 87, -42, -91, -18, -6, 121, -73, -102, 82, -19, -75, 44, 23, 64]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[94, -19, -105, -66, 4, -42, -99, 10, -52, -112, -106, -127, -79, -56, -49, -43, 31, 59, -71, 49, 0, 120, 93, 45, 37, 39, 19, 2, 12, -37, 86, -91, -39, 28, 87, -42, -91, -18, -6, 121, -73, -102, 82, -19, -75, 44, 23, 64]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey39);
        java.lang.Class<?> wildcardClass47 = byteArray46.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-108, 86, -53, 100, 77, -26, 50, -74, 34, -93, 88, 34, -105, -89, -96, 96]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[101, 34, 41, 23, -81, 64, -89, -108, 119, 47, 104, -5, -79, 44, -46, 38]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[82, -46, 58, -46, -6, -56, 54, 85, 102, 7, 123, 101, 32, -123, 58, 43]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[49, 42, 3, -127, 124, 126, 114, 12, -48, 121, 81, -113, 66, 9, 123, -64]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-60, -107, -82, -124, -63, -33, -111, -93, 75, 117, -115, 53, -54, -30, 26, 66]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[118, 91, -3, -72, -5, 88, -29, -96, 11, 113, -68, 121, -104, 102, -103, 39]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[66, 65, 57, -126, 52, 116, -67, -54, 26, 123, 40, 109, 83, -67, 120, -3]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-93, 38, 74, 102, -39, 98, 96, -83, 63, -53, 119, 67, 71, -32, 70, -88]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-26, -69, 110, -65, -43, 54, 8, 88, 77, -96, -61, -120, 64, 29, 53, -46, 8, -47, 27, 37, 12, -85, -118, 61, -128, 24, 90, -70, -7, -27, 66, 53, 66, 65, 57, -126, 52, 116, -67, -54, 26, 123, 40, 109, 83, -67, 120, -3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[111, -124, 98, -56, 1, -124, 11, 17, -40, 91, -111, -29, 69, -32, 114, -53, -90, -56, 29, -65, -83, 96, 104, -79, 28, 43, -91, 84, 26, -4, -97, -79, 66, 65, 57, -126, 52, 116, -67, -54, 26, 123, 40, 109, 83, -67, 120, -3]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D7C1DE87806880D3EB8DC40B1AB5421EEDC5A1D206D8942E8633B09A3FFDA257FC38C2C5F14D2725CDE598D0986A6466", secretKey28);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey41);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-106, -29, 114, -12, -117, -52, 39, -128, -6, -70, -126, -22, -81, 89, -100, 2]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-118, 118, -20, -94, 82, 7, 4, 32, -104, 27, 4, -110, 40, 94, -123, 36]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[33, -21, -97, -26, 70, 39, -91, 109, 7, 31, -25, -29, -68, 111, 32, 60]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[22, -38, -86, -58, 52, 121, 48, -87, -12, 57, 42, -53, -119, 35, 116, 42]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[111, -16, -2, -64, -44, -40, -99, -84, -118, -84, 89, 20, -50, -93, 110, 3]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[57, -63, 16, 35, -113, 49, -34, 56, 37, 107, -52, 117, 54, -53, 80, -16]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[57, -63, 16, 35, -113, 49, -34, 56, 37, 107, -52, 117, 54, -53, 80, -16]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-93, -42, 97, -104, 47, -97, 26, -95, -24, 42, -119, -96, 101, 58, -71, -59, 13, 122, 96, -18, -68, -40, -71, 99, -100, -42, 96, 27, -18, 12, -14, 113, 111, -16, -2, -64, -44, -40, -99, -84, -118, -84, 89, 20, -50, -93, 110, 3]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-38, -64, -101, 117, 23, 91, -35, -79, 98, 24, 86, 124, -93, -111, -112, -109, -74, -78, 63, -96, 59, 100, -44, -76, -119, -124, 15, -117, -45, -119, 52, 71, -19, -21, -63, 84, 0, -124, -113, 113, -54, -125, -111, -56, -102, 4, -35, -78, -104, 34, 65, 105, -94, -127, -76, 48, -115, 75, -124, -24, -120, -125, -29, 42, 74, 36, 58, -93, 102, -127, -119, 24, 95, 53, -9, -46, -58, -17, -62, 46, -107, 25, -10, 99, 7, -14, 1, -74, 94, -22, 26, 45, -40, 48, -8, 116, 111, -16, -2, -64, -44, -40, -99, -84, -118, -84, 89, 20, -50, -93, 110, 3]");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[24, 76, 43, -4, 114, -66, 38, 55, 68, 92, -121, 125, -27, 30, 81, 16]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[125, -94, -1, -67, 32, -118, 13, 20, -99, 40, 12, 52, 20, -79, -53, 73]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[95, -120, -21, 69, 114, 85, 123, -82, 62, 94, -112, -6, -118, 19, 79, -87, 6, 55, 127, 61, -97, 18, -84, 89, -6, 5, 113, 1, -123, -83, 7, -92, 26, 90, 19, -24, 0, -23, 38, -96, 117, 23, -34, 18, 90, -39, -115, -11, -16, 103, 15, -121, 78, 50, -114, -18, 100, -121, 78, -42, -4, -3, 98, 109, -61, 103, 58, 109, -1, -128, 55, 47, -110, 62, -119, -53, 89, -100, -62, -62, 101, -115, -8, 59, -96, 95, -12, 39, 51, -91, 9, -111, -3, -115, -49, 43, 24, 76, 43, -4, 114, -66, 38, 55, 68, 92, -121, 125, -27, 30, 81, 16]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-23, 98, 55, -33, 86, -73, -122, -80, -51, 69, -48, -98, -43, 80, 64, -49, -21, -23, 104, 78, 88, 58, 26, -85, 19, -96, -93, -8, -68, -102, -21, -93, 24, 76, 43, -4, 114, -66, 38, 55, 68, 92, -121, 125, -27, 30, 81, 16]");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-87, -122, 46, -55, -33, 122, 47, -18, -97, 2, -93, -67, -2, 67, -93, 116]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-112, -75, 56, -30, 52, -51, -110, -83, 12, 1, -90, -40, -90, -110, 11, -126]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[117, 104, 56, -87, -74, -50, -123, -12, 52, -63, -58, -99, -47, 76, -71, 79]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[45, -10, 2, -27, 125, -78, 1, -5, -102, 1, 89, -98, -38, -22, 5, 78]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-100, -111, -32, -71, -124, -45, -101, 84, 124, 60, -77, 103, 98, 74, 34, -105, 7, -55, -100, 53, 51, 32, 10, -112, -85, -11, -88, -27, -79, -56, 37, 61, 117, 104, 56, -87, -74, -50, -123, -12, 52, -63, -58, -99, -47, 76, -71, 79]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, 85, -29, 12, 115, -30, -98, 33, -49, -100, 73, 120, -85, 32, 17, -92, 69, 26, -13, 70, -107, 53, 100, -51, -112, 92, 85, -45, 81, 4, -35, -78, 117, 104, 56, -87, -74, -50, -123, -12, 52, -63, -58, -99, -47, 76, -71, 79]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[75, -107, -126, -43, 4, 30, 95, 78, -106, 97, 42, -111, 99, -102, -122, 120, 102, 63, -92, 35, -25, -71, -103, -66, 29, -53, -78, 122, 0, -43, 45, -71, 39, 33, 27, -16, 126, 121, 68, -83, -23, 37, -62, 78, -14, 78, 78, -79, 76, -85, 8, -9, 102, -82, -52, 6, -48, -33, -23, -73, -99, 43, -100, 116, 117, -51, 0, -109, 85, 23, 113, 52, -71, -6, -54, -99, -103, 102, -76, -62, -76, 26, 45, 0, 25, -60, -48, -37, 11, 17, -1, -88, 80, 34, -37, -11, 117, 104, 56, -87, -74, -50, -123, -12, 52, -63, -58, -99, -47, 76, -71, 79]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[103, -54, 111, -17, 63, 90, 60, 47, 104, -33, -40, 1, -57, -45, -99, -52, 40, 44, -79, -126, 32, -108, -30, -42, -76, -97, 14, 41, -20, 38, 20, 93, -47, -110, 97, 108, -5, -5, -77, 114, -95, 113, 79, 65, 26, -32, 71, 41, 73, -5, -77, -125, 46, 103, -36, 64, -67, -29, -86, 33, -13, 121, -105, 96, 112, 113, -36, -77, 109, 120, 53, 21, -27, 25, -50, 3, -15, -9, -94, -123, 16, -51, 111, -120, 10, 111, -67, -81, -44, 40, 63, 68, 13, 95, -98, 63, 117, 104, 56, -87, -74, -50, -123, -12, 52, -63, -58, -99, -47, 76, -71, 79]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[110, -106, -111, 102, 45, -53, -99, 32, 61, 12, 108, 50, 77, -30, -67, -6, -71, 73, -61, -67, -47, 29, -25, 110, 6, 22, 58, 36, -39, -118, -111, 62, 117, 104, 56, -87, -74, -50, -123, -12, 52, -63, -58, -99, -47, 76, -71, 79]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "6E9691662DCB9D203D0C6C324DE2BDFAB949C3BDD11DE76E06163A24D98A913E756838A9B6CE85F434C1C69DD14CB94F" + "'", str31, "6E9691662DCB9D203D0C6C324DE2BDFAB949C3BDD11DE76E06163A24D98A913E756838A9B6CE85F434C1C69DD14CB94F");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, -57, 80, 65, 37, 75, 48, 106, -87, -27, -67, 103, 50, -71, 54, -100]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-10, -92, 57, -95, 83, 95, 12, -13, 45, -54, -18, -117, 41, -44, 123, -48, 90, -21, -50, 109, -124, 96, 113, 52, 68, -84, -30, 64, -25, -53, 56, -8, -31, -97, 77, -1, -67, 47, 2, 61, -39, 103, -17, -87, -102, 42, -108, 43]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-43, -95, 28, 76, -91, 92, -8, 40, 108, -100, -113, 74, 50, 52, -79, -24, 75, 70, 77, -61, -35, 32, 2, 97, -84, 73, -114, -83, 109, 9, 121, 20, 103, 109, -59, 117, -5, -115, 113, 21, -123, -49, -112, -29, 111, -63, 27, -77, -92, -119, 116, 101, -52, 24, 76, 47, -6, -128, -8, -62, 121, 100, -11, 57, -125, 83, 93, -19, 44, 30, 0, 5, 28, -3, -86, -62, -115, -102, -73, 45, 121, -5, -3, 53, -75, -127, 68, -117, 25, -84, 55, -27, -126, -39, -73, 45, -31, -97, 77, -1, -67, 47, 2, 61, -39, 103, -17, -87, -102, 42, -108, 43]");
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey26);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[26, 15, -81, 53, -65, -32, 7, 104, 97, -103, -18, -50, -85, -1, 112, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[40, -50, -30, -108, 0, -34, -31, 70, 36, 104, -114, -109, 62, 9, -2, -66]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[30, -10, 105, -102, 96, 43, 120, -91, -38, 18, -49, 116, -38, 94, -55, -13]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-128, -116, -44, -47, 79, 53, 54, 11, -128, -41, 51, 83, 58, 13, -110, 95]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[95, 118, -19, 1, -62, 60, 127, -5, -4, 52, 45, 91, 69, 53, -40, 30]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-89, -84, -112, -25, 26, 77, -96, -56, -31, 46, 55, -43, 36, 120, -13, -24]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-89, -84, -112, -25, 26, 77, -96, -56, -31, 46, 55, -43, 36, 120, -13, -24]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[23, -73, 68, 90, 27, 103, -63, 97, 85, -82, 21, 64, 10, -110, -65, 49, 111, 18, -98, -118, -55, -42, 16, -99, -23, 85, -12, 76, -84, 120, -97, -122, 95, 118, -19, 1, -62, 60, 127, -5, -4, 52, 45, 91, 69, 53, -40, 30]");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-107, -122, 78, -108, 100, 70, -25, -88, -98, 65, 53, -90, 110, -73, 78, 77]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-32, 120, 50, 0, 25, -117, -98, -122, 48, 122, -122, 8, 71, -55, 112, -97]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-32, 120, 50, 0, 25, -117, -98, -122, 48, 122, -122, 8, 71, -55, 112, -97]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[25, 118, -104, -12, 0, 127, 33, 112, -57, -91, -71, -111, 75, -69, 29, -8]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-107, -122, 78, -108, 100, 70, -25, -88, -98, 65, 53, -90, 110, -73, 78, 77]");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        byte[] byteArray0 = null;
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[84, 73, -20, 25, 125, 20, 102, -24, -98, -109, -15, -39, 29, 97, -115, 43]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[12, -100, 16, -112, -87, -120, -120, 100, 36, 21, 103, -81, -22, -31, 32, -1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[32, -23, 2, 65, -125, 77, 35, 72, 68, 44, -12, -28, -109, -116, 83, -59]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-5, -83, -55, 69, -111, -44, 36, -65, 127, 102, 67, -27, -56, -118, 85, 126]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-96, 28, 79, 120, -41, -68, 121, 58, 120, -25, 86, -86, -97, 49, -44, 126, -81, -53, 109, 47, -75, -77, -95, 96, -39, -115, 24, 22, 93, -107, 100, 86, 32, -23, 2, 65, -125, 77, 35, 72, 68, 44, -12, -28, -109, -116, 83, -59]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-125, 124, 13, 60, 73, 103, -16, -118, 114, 91, 31, -80, -28, -27, -84, -17, -84, -124, 50, -38, -128, -126, -30, -96, 96, -14, 5, -99, 20, -56, 88, -74, -72, 46, 62, -33, -29, 87, -41, -125, -7, -85, -118, -30, 86, -72, -5, 91, -26, -74, 97, 27, -83, 63, -64, -76, -25, -108, -121, -29, -62, 52, -91, 91, -122, -98, 61, -5, 51, 77, -67, 126, -82, -2, 64, -111, 123, -5, -99, 72, 91, -107, -31, -63, -46, 88, 122, -92, -98, -128, 119, 110, -116, 2, 21, -80, 32, -23, 2, 65, -125, 77, 35, 72, 68, 44, -12, -28, -109, -116, 83, -59]");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("13D66FE0096DC7013F3EB4E032E54A6475F10E1D9AF7B070C1659ACE164F46DEF42014DBAB5617B00571E3B7971D26F2", secretKey3);
        java.lang.Class<?> wildcardClass7 = secretKey3.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-85, -15, 22, 114, 47, -71, -77, -4, -26, 66, -108, -81, -117, 70, 116, -45, -102, -62, 120, -9, 63, 84, 105, -78, 8, 111, -101, -59, 96, 28, 45, -7, 38, -36, 120, 101, -106, 85, -106, -86, 97, 57, -81, -4, 9, -82, 87, -16, 123, -2, -56, -23, -91, -76, -26, 91, -107, 108, 125, 63, 41, -69, 78, 110, 1, -86, -88, 53, 126, -128, 62, -70, 100, -16, 41, 127, -58, -16, 98, 25, 58, 67, 91, -102, -96, -109, 30, 95, -109, 118, 61, -38, 118, 24, 23, -11, -17, -59, -29, 104, 97, 0, 26, -21, -61, -18, -37, 14, 119, -22, 15, -15]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-20, -28, -1, -54, -7, 119, 48, -57, 10, 122, -25, -57, 13, -35, -47, 125, -29, 64, -78, 115, 65, -90, 68, 96, -86, 95, -112, 80, -10, 92, -57, 92, -120, 43, 90, -49, 39, -117, 20, 25, -115, -46, -122, -4, 32, 25, 34, 0, -107, -122, 97, -69, -93, 54, -54, -112, -111, -76, -7, -38, -124, 93, 12, 119, 16, 105, 65, -28, 123, 99, 123, 102, -13, 48, 2, 63, 94, 35, 106, 11, 56, -85, 46, -88, -4, 65, 19, 44, -73, -25, 12, 5, 63, -53, 90, 109, -17, -59, -29, 104, 97, 0, 26, -21, -61, -18, -37, 14, 119, -22, 15, -15]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[62, 123, -110, 11, 12, -115, -13, -10, -22, -95, 10, -112, 81, -46, -110, -28, 56, 25, -125, -6, -69, 87, -13, -70, 42, 70, -89, 66, -39, -9, 62, -30, 13, -62, 29, -119, -21, 0, -114, 68, -16, -93, -87, -7, 14, 113, -84, -20, 6, -109, -42, 76, 59, -71, 102, 81, -47, 119, 39, -60, 64, -75, -46, -109, 49, 46, 18, 8, 50, -123, -26, 34, 88, 93, -37, -37, 12, 45, 81, -15, 92, -8, 2, 78, 59, 35, -121, 54, 79, -126, 62, -25, 57, 54, 45, 106, -17, -59, -29, 104, 97, 0, 26, -21, -61, -18, -37, 14, 119, -22, 15, -15]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.Class<?> wildcardClass31 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[50, 83, 114, 31, 119, 64, 68, -102, -111, -74, 80, 38, -42, 35, -48, 115]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-102, 96, 22, 124, -19, 48, 1, -109, -121, -89, 20, 54, 75, -14, 79, -19]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-98, -29, 31, -40, 18, 60, 70, 49, -53, 0, 79, -127, -84, 30, 102, -28]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[59, 32, -120, -100, -52, 122, 57, 80, -64, -70, 63, -82, 54, -66, -120, 98]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[98, -43, -90, -62, 53, -52, 87, -2, 56, 88, 22, -16, 4, -40, -89, 10, -65, 72, 92, 123, -100, 87, -22, 117, -80, 66, -96, 121, 0, -99, -38, -94, -98, -29, 31, -40, 18, 60, 70, 49, -53, 0, 79, -127, -84, 30, 102, -28]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-65, -27, -12, -35, -53, -11, 107, 120, -10, -37, 35, -37, -113, -45, -124, -123, 113, 58, 126, 60, 121, -5, -90, -46, 77, -28, 58, 62, -103, -19, 66, -105, -98, -29, 31, -40, 18, 60, 70, 49, -53, 0, 79, -127, -84, 30, 102, -28]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-123, 35, -55, -7, -3, -23, 96, -38, -61, -86, 9, -58, 113, 59, 103, -9, -45, -108, -88, -103, 33, -44, -102, -67, -102, 88, -10, 27, -68, -51, 35, 14, 115, 19, -3, -33, -2, 47, -109, -82, 116, 121, 109, 27, 117, -128, 127, 61, 112, 57, 15, -19, 127, 21, -56, -14, 58, -105, -85, -88, 62, -97, 92, 47, 44, 32, -18, -41, -35, -65, -43, -100, -101, 33, -65, -50, 58, 51, 91, 77, -24, -13, -117, -101, 48, -99, -67, -28, 121, -84, 107, -17, -97, -50, 80, -113, -98, -29, 31, -40, 18, 60, 70, 49, -53, 0, 79, -127, -84, 30, 102, -28]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-65, -27, -12, -35, -53, -11, 107, 120, -10, -37, 35, -37, -113, -45, -124, -123, 113, 58, 126, 60, 121, -5, -90, -46, 77, -28, 58, 62, -103, -19, 66, -105, -98, -29, 31, -40, 18, 60, 70, 49, -53, 0, 79, -127, -84, 30, 102, -28]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "BFE5F4DDCBF56B78F6DB23DB8FD38485713A7E3C79FBA6D24DE43A3E99ED42979EE31FD8123C4631CB004F81AC1E66E4" + "'", str29, "BFE5F4DDCBF56B78F6DB23DB8FD38485713A7E3C79FBA6D24DE43A3E99ED42979EE31FD8123C4631CB004F81AC1E66E4");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "BFE5F4DDCBF56B78F6DB23DB8FD38485713A7E3C79FBA6D24DE43A3E99ED42979EE31FD8123C4631CB004F81AC1E66E4" + "'", str30, "BFE5F4DDCBF56B78F6DB23DB8FD38485713A7E3C79FBA6D24DE43A3E99ED42979EE31FD8123C4631CB004F81AC1E66E4");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.Class<?> wildcardClass32 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-45, 111, 109, -89, -46, -66, -24, 38, 93, 61, -89, 25, 108, -110, 81, -12]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-36, 30, 12, 72, 87, -50, -97, 107, -105, -37, 2, 39, 39, 8, 75, -72]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[54, 7, 100, 126, 80, -20, -52, -85, -24, -34, 3, -33, -84, 62, -63, -86]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, 91, 4, 64, 61, 11, 70, -39, 47, 7, 64, 72, 33, -87, -41, -51]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-119, -75, -105, -11, 33, -119, -64, 59, 23, -83, 79, -115, -5, -35, 87, 125, -119, -120, 70, -96, 83, 22, 50, 116, 114, -61, -63, -102, -47, 125, -40, -55, 54, 7, 100, 126, 80, -20, -52, -85, -24, -34, 3, -33, -84, 62, -63, -86]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[34, -68, 122, -112, 65, -82, -20, -16, 17, 29, -95, 45, -100, 112, 122, 91, -81, -81, 19, 60, -125, -48, -115, -125, 127, -8, -18, 0, 51, -42, -69, 37, 54, 7, 100, 126, 80, -20, -52, -85, -24, -34, 3, -33, -84, 62, -63, -86]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-127, 31, -1, 42, -127, 91, 94, 112, 79, -124, 8, 107, 57, -128, -72, -81, -97, -57, 29, 35, -24, 95, 90, 101, -67, 64, -29, 85, 49, 45, -76, 51, -2, 110, 56, 88, 109, -13, 8, 24, 52, -85, -5, -101, -40, -74, -122, 7, -2, -85, 124, -96, 44, 78, 49, 38, 53, 87, -118, -118, 40, 113, -29, 93, -122, 71, 69, 25, 48, 73, -118, 103, -108, 32, -116, -26, 13, -124, 61, 124, 101, 102, 116, 111, 55, 98, -99, -72, 43, 18, 88, -11, -31, -95, 63, -5, 54, 7, 100, 126, 80, -20, -52, -85, -24, -34, 3, -33, -84, 62, -63, -86]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[120, 14, 18, -15, -55, 32, 64, 81, 117, -122, -52, 123, -114, 1, 105, 55, 88, -122, 65, -10, 82, -78, 37, -62, 117, -73, -35, 30, 47, -78, 117, -3, 47, 55, 24, 21, -53, 14, -85, 117, 48, -108, -60, -122, -36, 22, 38, 35, -128, -99, 34, -11, 100, 34, 68, 94, 61, 101, 66, 47, 3, -32, 119, 64, -109, 25, 122, 24, 25, -118, -73, -61, -114, 108, 38, 2, 11, -77, -85, 67, 29, -61, -61, -46, -43, 37, 17, -121, -41, -42, 49, 10, -10, 88, -81, -103, 54, 7, 100, 126, 80, -20, -52, -85, -24, -34, 3, -33, -84, 62, -63, -86]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[54, 7, 100, 126, 80, -20, -52, -85, -24, -34, 3, -33, -84, 62, -63, -86]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "3607647E50ECCCABE8DE03DFAC3EC1AA" + "'", str31, "3607647E50ECCCABE8DE03DFAC3EC1AA");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
        java.lang.Class<?> wildcardClass38 = secretKey31.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 8, 120, -119, -111, 82, 23, -125, 23, -25, 10, -78, -96, 87, 77, 78]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-17, 123, -19, -114, -4, -69, 30, 66, 90, -93, -74, -19, 61, 100, 105, 98]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-38, 10, -49, -10, -86, 117, -113, -35, -97, -40, 122, -128, -10, -119, 126, -124]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[54, 93, -5, 59, -112, 6, 96, -47, 55, 92, 36, -53, -14, -83, 46, -89]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-107, -127, 56, -49, 55, -14, 54, 27, -67, 74, -89, 19, -72, -59, -93, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-32, -109, -122, 1, -91, -83, -57, -13, 101, -74, 104, -71, 4, -29, 93, 105, -60, 113, -11, -106, 32, -18, -123, -20, -14, 17, 27, -38, -94, -122, -105, -38, 54, 93, -5, 59, -112, 6, 96, -47, 55, 92, 36, -53, -14, -83, 46, -89]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey49);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("89FEC40ED18BE1564C0F258FE07E9941", secretKey49);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey49);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-23, -113, 26, -39, -115, -90, 93, 109, 37, 54, -45, -37, -114, 10, 45, -11]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[36, 101, 64, -78, 15, 38, -98, 46, -117, 120, 44, 103, -47, -127, -23, -126]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-128, 93, 125, -61, -38, 113, 25, 16, -2, -78, -108, 64, -99, 67, -92, -94]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-57, 67, -64, -95, -33, -21, -105, -17, -17, -81, -127, -12, 79, -50, 15, -87]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[38, -33, 96, -2, -63, 2, -59, -120, 26, -29, 39, -109, 78, 42, -53, 113, 39, -87, -23, 67, -89, 12, 62, 1, -1, -27, 20, -41, -61, -2, 96, 40, -128, 93, 125, -61, -38, 113, 25, 16, -2, -78, -108, 64, -99, 67, -92, -94]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[123, -125, -18, -63, -37, -12, -86, 11, 3, 73, 52, 97, -71, -121, 58, 85, 100, -102, 102, 57, -4, 11, -26, -92, 47, 10, 24, -26, 0, 78, 13, 24, -128, 93, 125, -61, -38, 113, 25, 16, -2, -78, -108, 64, -99, 67, -92, -94]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "E35461596C6D7B9B8C07CA2A34A4EE31C1B94204F322B3D7FB457676941C0B3663A2D806B1DD79860E250232220D41061E69DC8F03FEC92340E0A2FF985E40E27FFF3CDAECC98456A2CFEDF259AC8D7D5E200D1D4FB0F0F38BE648EFD4B0A88FA3089CBE02976CCB1DE77C40693B39B133AD05033916B5D99395760967F1C89530C5EA6BB74F22EC30424BF568D2467C4EC80C598BA099EBFE8EF790643853B0E05D4BD36D21767960C66D343A3825D44EADB5AAA2C526AFC00D54CAAFA19AA432E3DE63BD1DC314EAD8B71FA19666560265BDE8116566D4AD47C5A411ADC1C6805D7DC3DA711910FEB294409D43A4A2" + "'", str27, "E35461596C6D7B9B8C07CA2A34A4EE31C1B94204F322B3D7FB457676941C0B3663A2D806B1DD79860E250232220D41061E69DC8F03FEC92340E0A2FF985E40E27FFF3CDAECC98456A2CFEDF259AC8D7D5E200D1D4FB0F0F38BE648EFD4B0A88FA3089CBE02976CCB1DE77C40693B39B133AD05033916B5D99395760967F1C89530C5EA6BB74F22EC30424BF568D2467C4EC80C598BA099EBFE8EF790643853B0E05D4BD36D21767960C66D343A3825D44EADB5AAA2C526AFC00D54CAAFA19AA432E3DE63BD1DC314EAD8B71FA19666560265BDE8116566D4AD47C5A411ADC1C6805D7DC3DA711910FEB294409D43A4A2");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-109, 67, 74, 42, -89, 76, 47, -4, -66, 92, 77, -94, -120, 41, -86, -6]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-114, 22, 89, -108, 59, 9, -5, 55, -69, 14, 116, -126, -3, 126, 64, -67]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-96, -92, -6, -53, -76, -25, 102, -26, 25, -73, -78, -33, -60, 100, 126, -45]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[124, 59, -86, 103, -7, -45, -101, -49, -59, -20, 36, -124, 100, -34, 56, 116]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-109, -9, -62, 3, -90, -9, 2, -99, -66, 25, -31, -22, 21, -10, 52, -44, -36, -77, -83, -114, 76, -70, 28, -14, 22, 57, 92, -18, -12, 7, -104, -94, -96, -92, -6, -53, -76, -25, 102, -26, 25, -73, -78, -33, -60, 100, 126, -45]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[19, -66, 33, 37, 47, 9, -28, 9, -56, 117, 15, 61, 78, 54, -8, -97, -99, -14, -122, -12, 37, -90, -116, -37, 56, -75, -32, -73, -73, 102, -29, -23, -98, 7, -61, -54, 124, 20, 124, 44, 18, -105, -4, -94, -38, 49, 55, 32, -23, -121, 109, 92, 37, -106, 33, 38, -16, -35, -28, 118, 8, 125, -26, -47, -77, -2, 85, 67, 75, 10, -55, -11, -98, 26, 12, -75, 7, 90, -113, 37, -74, 53, 94, -78, 63, 14, 109, 2, 125, 106, -93, -56, 75, 58, -116, -126, -96, -92, -6, -53, -76, -25, 102, -26, 25, -73, -78, -33, -60, 100, 126, -45]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[19, -66, 33, 37, 47, 9, -28, 9, -56, 117, 15, 61, 78, 54, -8, -97, -99, -14, -122, -12, 37, -90, -116, -37, 56, -75, -32, -73, -73, 102, -29, -23, -98, 7, -61, -54, 124, 20, 124, 44, 18, -105, -4, -94, -38, 49, 55, 32, -23, -121, 109, 92, 37, -106, 33, 38, -16, -35, -28, 118, 8, 125, -26, -47, -77, -2, 85, 67, 75, 10, -55, -11, -98, 26, 12, -75, 7, 90, -113, 37, -74, 53, 94, -78, 63, 14, 109, 2, 125, 106, -93, -56, 75, 58, -116, -126, -96, -92, -6, -53, -76, -25, 102, -26, 25, -73, -78, -33, -60, 100, 126, -45]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[7, 95, 52, 45, 27, 11, -115, -39, 117, -119, 66, 100, -9, -88, 92, 0, -107, -7, -66, 28, 29, -24, 86, -108, -47, -32, -118, -53, -65, -12, 36, -7, -96, -92, -6, -53, -76, -25, 102, -26, 25, -73, -78, -33, -60, 100, 126, -45]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[92, -50, -87, 29, -14, 18, -87, 113, 4, -20, -36, 28, 94, -111, -28, 84, -99, -87, 95, -113, 123, -80, -92, -127, 48, 10, 78, 47, 119, -104, -21, -3, -96, -92, -6, -53, -76, -25, 102, -26, 25, -73, -78, -33, -60, 100, 126, -45]");
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9E3FA735129C449B99534E5E23A8CD37381E7A83D9BEBA2014B2C5301D9CBF2939A122A8A7ABF168E3D309422D89A40503600C06C72412872F119661B5C91C2BFDDB687C5C90027C4E4E15C34EB35CC5B0D23EEB4FEA44B6705E349738317C8F3FE0B5B4056E29386E3DEF440334A03F", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.Class<?> wildcardClass32 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[116, 10, -71, -21, -78, 33, -112, -53, 77, 118, -36, -44, -101, 106, -98, -60]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[124, 13, 83, 120, -97, -88, 37, -3, 127, 115, -9, 94, 58, 45, 22, -108]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[54, 101, -34, 32, 106, -103, -59, -16, -88, 26, 103, -113, -40, -47, 22, 127]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[103, 57, 76, 76, 57, -92, -71, 96, 43, -125, 35, 68, -128, 14, 51, 31]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-44, 62, -65, -22, 51, 55, 22, -6, -29, -1, 22, 36, -25, 52, 25, -92, 32, 47, 64, 64, 12, 17, -119, 54, -88, -60, 73, 99, -117, -121, -19, 97, 54, 101, -34, 32, 106, -103, -59, -16, -88, 26, 103, -113, -40, -47, 22, 127]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[81, 76, 108, 103, -78, 90, 105, 31, 44, -8, -123, 26, -121, -24, -72, -118, 107, -100, -90, -58, 11, -89, 63, 27, -26, -96, 65, -82, -79, -1, -26, 60, -104, 0, -1, 42, 44, -124, 102, -82, 9, 99, -71, 71, -53, -89, -92, -102, 13, -75, -86, -118, -56, -25, 53, -126, -28, 101, -90, 116, 48, -89, -82, 49, 122, 39, 107, 113, 55, 122, 55, 36, 101, -75, 33, -118, -25, 105, -21, -10, -86, 53, -94, 11, -83, 83, -104, 26, 35, -117, 69, -93, 127, -79, -72, -43, 54, 101, -34, 32, 106, -103, -59, -16, -88, 26, 103, -113, -40, -47, 22, 127]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[121, 29, -105, -53, -119, 115, -87, -45, -92, 73, 96, -117, -13, 35, 106, 32, 84, -59, -39, 39, -8, -5, -36, -46, -49, 15, -99, 36, -86, -50, 102, -86, 54, 101, -34, 32, 106, -103, -59, -16, -88, 26, 103, -113, -40, -47, 22, 127]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[54, 101, -34, 32, 106, -103, -59, -16, -88, 26, 103, -113, -40, -47, 22, 127]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "25E5C998F6EDC03BF85CEF0357D3D3B69B2DE2EAD7B214CB41DE7C872E7C9847786722710499ACE2D3F12B0CFBE1CD2AFFDC6886345043B481A47CD71B2A674561B50C0014A0197AB20480744A3B05AF3B8BAE1FFAEF504ACFAE3F36E054E6C05315818223C7B4FC8ECF68F56C649550464F2089317B0EB580FD19D423329CE58000F98C2A3AA8466E13191B5241EF7FF0F08C42108E13F3F4268D5F5D7FBE614435DFC7785EACF732760DE59ADC728CC74D0B2F31A6F0F12AC5BFB6C661634880903DA48F94EAA90726129D42319FC31FF92C3EA079A303D8178375510D863E3665DE206A99C5F0A81A678FD8D1167F" + "'", str31, "25E5C998F6EDC03BF85CEF0357D3D3B69B2DE2EAD7B214CB41DE7C872E7C9847786722710499ACE2D3F12B0CFBE1CD2AFFDC6886345043B481A47CD71B2A674561B50C0014A0197AB20480744A3B05AF3B8BAE1FFAEF504ACFAE3F36E054E6C05315818223C7B4FC8ECF68F56C649550464F2089317B0EB580FD19D423329CE58000F98C2A3AA8466E13191B5241EF7FF0F08C42108E13F3F4268D5F5D7FBE614435DFC7785EACF732760DE59ADC728CC74D0B2F31A6F0F12AC5BFB6C661634880903DA48F94EAA90726129D42319FC31FF92C3EA079A303D8178375510D863E3665DE206A99C5F0A81A678FD8D1167F");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.Class<?> wildcardClass27 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-109, 56, -82, 21, -37, 105, 100, -108, -110, 10, -72, 45, 120, 64, 56, 2]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[49, -117, -104, 70, 115, 81, 69, 73, -3, -18, -16, -51, -118, -67, -23, 69]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[21, -91, -4, -7, 9, -30, 115, -20, 40, 70, -74, 87, 25, -21, -119, 82]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-32, 50, 125, 33, -20, -62, -108, 16, -77, 26, -80, 63, 96, -37, 42, 51]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-42, 48, 117, -83, -38, -13, 10, -8, 33, -69, 107, 65, -1, -98, 5, 12, 16, 81, -5, 33, -47, 112, -73, 124, 67, 78, -127, 63, -11, -123, -109, 97, 21, -91, -4, -7, 9, -30, 115, -20, 40, 70, -74, 87, 25, -21, -119, 82]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-80, -25, 37, 99, 75, -117, 41, 74, 119, 66, -17, -52, -6, -73, -108, 74, 44, 30, 63, -97, 48, -49, -109, -22, -101, -6, 104, 110, -63, 85, 62, -13, 21, -91, -4, -7, 9, -30, 115, -20, 40, 70, -74, 87, 25, -21, -119, 82]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "B0E725634B8B294A7742EFCCFAB7944A2C1E3F9F30CF93EA9BFA686EC1553EF315A5FCF909E273EC2846B65719EB8952" + "'", str25, "B0E725634B8B294A7742EFCCFAB7944A2C1E3F9F30CF93EA9BFA686EC1553EF315A5FCF909E273EC2846B65719EB8952");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B0E725634B8B294A7742EFCCFAB7944A2C1E3F9F30CF93EA9BFA686EC1553EF315A5FCF909E273EC2846B65719EB8952" + "'", str26, "B0E725634B8B294A7742EFCCFAB7944A2C1E3F9F30CF93EA9BFA686EC1553EF315A5FCF909E273EC2846B65719EB8952");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey39);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey50);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey50);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 102, 12, -69, -4, -101, 94, 101, -97, 28, -100, -119, -90, 33, 88, 25]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[7, -29, -67, 103, -121, 118, 88, -38, 52, 59, 22, -96, -99, 67, 5, -66]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[118, -12, -98, 79, 125, -52, 127, -20, -3, -84, 55, 16, -22, 95, -7, -79]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-31, 103, 95, -73, 42, -104, -46, -48, 118, -77, -106, 57, 2, -104, 93, 11]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-107, 125, -42, 8, -62, 17, -24, -102, -64, -65, -48, -126, -98, -12, -91, -125]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-4, 40, 0, -31, 7, 110, 86, -85, 58, 40, -74, -20, -102, 114, 124, -113]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-79, 22, -43, -48, -103, 80, 77, -2, -108, -121, -50, -19, 16, -122, 15, -50]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-67, 20, 60, -86, -16, -22, 24, 116, -55, -47, -20, -111, 123, -33, 124, 96]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-101, 19, 79, 14, -97, -116, -37, -42, -50, 14, 75, -33, -100, 48, -114, -7, -65, -32, 30, 112, -14, 6, 43, 34, -73, -58, 17, -102, -117, 87, -64, 39, -79, 22, -43, -48, -103, 80, 77, -2, -108, -121, -50, -19, 16, -122, 15, -50]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-7, 9, -67, -90, 119, 83, -100, 41, 117, 90, 55, 39, -50, -90, 75, 31, 95, 74, 29, -50, 88, -94, -123, 77, 12, -36, -74, 58, -50, -120, 116, 30, -79, 22, -43, -48, -103, 80, 77, -2, -108, -121, -50, -19, 16, -122, 15, -50]");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-111, 69, 39, -114, 36, 74, 35, -100, 30, 66, -126, 22, -25, -106, -106, 95]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[30, 119, -101, 23, -79, -113, 7, -57, -96, -111, 78, -82, -109, 118, -20, 61, 95, -27, 90, -84, -23, 41, 74, -27, -112, 11, 126, -13, 62, -49, 108, -110, -9, -120, -27, -117, -53, -115, -78, -56, 60, -67, 94, 43, -111, 104, 70, 84]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-114, 25, -12, -94, 32, -19, -16, -46, 49, -86, -104, -107, -15, -44, 28, 49, 106, -13, -60, 120, -119, -121, 108, -70, 6, -60, 121, 30, 7, -70, 127, -23, 14, -99, -70, -119, 101, 6, 8, 99, -125, -118, -107, 28, -123, 25, -86, -8, -42, -73, 123, -21, -23, 26, -103, -58, -126, -59, -95, 31, -2, 56, 29, 111, -86, 32, 98, 50, -67, 20, 13, 108, 78, -59, -88, 40, -17, 50, -92, -92, 1, 94, 33, -123, 110, -8, -126, 24, -90, 86, 62, 56, -117, 50, 63, 53, -9, -120, -27, -117, -53, -115, -78, -56, 60, -67, 94, 43, -111, 104, 70, 84]");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey36);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey36);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("EAC72EF852CDB6957C3B3337E6AAFD898344A88D77B133A96575F0FEB6CF0963128C98F6465FFE174B01995E525881A246B950010C3B3FFF7E403973C3C9B01F417D856F9374C29863F9E7D0D560FCB83F86A08537994AB45AB171BA1516C64BE9700FFD6717E17102708CE6C175F0C61AF40BDC1F2B4CDC5AB3D06F00B10FC61D7ABB4EDA1D2188273BED2443A77CCCFC395CA3FA9031CE25EAA8E3FE6FC96AE723B2F0F1E0972E129CC50B23C986DD439104F2C841934C4FD047981A7EC8E383A490CDE1F2529B38D0BA929584B94DC2C8A22527897CF13C38B10D6DDB1D0C2D1892F255F35B002F69AEA221C52658", secretKey36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey36);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -80, -70, -115, -39, 127, 34, -116, 62, 64, -50, -124, -84, 104, 94, -116]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[60, 103, -19, -116, 26, -116, 122, -64, -76, 19, -105, 89, -21, 126, -108, -80]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-112, -48, -106, 103, -60, -115, 4, 105, -120, -43, -100, 108, -103, 45, 49, 69]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-46, -90, -113, -37, 26, -81, 38, 95, 112, 3, -51, -6, 69, -23, 32, -106]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[62, -64, -128, 17, -4, 58, -57, 127, 88, -30, 15, -28, 74, -16, -26, -112]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[126, -106, 73, 47, 9, 48, -125, 2, -53, -46, 71, 30, -106, -90, 118, 20]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-53, -72, 45, -88, 74, 122, 44, -70, 84, 110, -77, 68, -40, -71, 90, 82]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-112, 125, -86, -82, 107, -10, 90, -55, -102, 91, 54, -102, 93, 116, -48, 125]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 98, 16, 62, 23, 57, -51, -91, 117, 51, -121, 122, 58, -14, 27, -63]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 98, 16, 62, 23, 57, -51, -91, 117, 51, -121, 122, 58, -14, 27, -63]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[103, 83, 36, -9, -66, -41, 106, 37, -53, 9, 62, -21, -109, 23, -117, 33, -104, -102, -3, -100, 104, 125, 5, 39, -77, 36, -125, 23, 97, 7, 7, -108, -112, 125, -86, -82, 107, -10, 90, -55, -102, 91, 54, -102, 93, 116, -48, 125]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-9, 125, -43, 63, -97, -24, -27, 116, -116, 95, -12, -60, -122, 106, 63, -126, -50, 23, 86, 33, -59, 3, 105, -118, 57, -49, 68, -98, 102, -67, -102, 75, -112, 125, -86, -82, 107, -10, 90, -55, -102, 91, 54, -102, 93, 116, -48, 125]");
        org.junit.Assert.assertNotNull(byteArray44);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey22);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        java.lang.Class<?> wildcardClass34 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[105, -24, 48, -40, -26, -92, -128, 11, -32, -36, 109, 44, 82, -81, 53, 13]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 66, 13, -126, 55, 105, -28, 98, 15, -92, -53, 121, -113, 61, 123, 14]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-69, -127, -33, -102, -2, -72, -30, -75, -95, 86, 101, -115, -15, 37, -29, -112]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-91, -116, -26, 125, -121, -98, 46, 124, -103, -14, -13, 98, -84, -48, -83, -110]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[69, -121, -57, 69, 46, -70, -52, 21, -17, 26, -7, -11, 24, -64, 93, -40, 60, -33, -62, 78, 26, 33, -40, 37, -110, 116, 99, -60, 50, 58, -113, 24, -69, -127, -33, -102, -2, -72, -30, -75, -95, 86, 101, -115, -15, 37, -29, -112]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-44, 125, 30, 109, -68, -45, -20, 22, -35, 111, 104, -25, -16, -124, -86, 97, 124, -51, 37, -1, 6, -125, -61, -117, 103, -112, 2, -120, 127, 43, -98, 25, -69, -127, -33, -102, -2, -72, -30, -75, -95, 86, 101, -115, -15, 37, -29, -112]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-108, 39, 10, -71, -105, -43, -86, -128, -20, -16, -4, 120, 37, -125, 65, -14, 59, 91, 29, 75, -108, 79, -52, -45, -33, -81, 5, -37, 53, -65, 18, -35, 44, -6, -43, 77, 15, 53, -34, 28, 76, 66, 110, -62, -11, -85, -51, -6, 32, 58, 123, -118, 77, -59, -102, -53, -5, -110, -107, -114, 64, 122, -118, 82, -73, 0, -66, -87, -111, -8, 113, 20, -44, 95, 8, 93, -86, -23, 84, 0, -126, -125, -91, 96, 6, 1, -14, 111, -7, -64, 81, 29, 116, 71, -89, 121, -69, -127, -33, -102, -2, -72, -30, -75, -95, 86, 101, -115, -15, 37, -29, -112]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[22, 13, -58, -96, -17, -58, -5, 13, -82, -3, 90, 32, 116, 44, -23, 82, 10, 67, -94, -2, 102, -80, 13, -71, 6, 65, 58, -6, -17, -49, -55, -95, 40, -89, -28, 51, 81, 92, -61, 94, -112, 46, -104, 125, 82, 90, -66, 5, -61, -68, -102, 127, -57, -112, -59, 65, 98, -103, 27, -108, -11, -36, -92, -111, -65, 18, -45, -80, 74, 111, -43, 106, -90, -14, -52, -102, 122, 34, -54, 104, -25, -23, -39, 40, 109, 116, 5, 63, -78, 37, 75, 85, -92, 2, 38, -108, -69, -127, -33, -102, -2, -72, -30, -75, -95, 86, 101, -115, -15, 37, -29, -112]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[33, -13, 38, -30, 50, 93, -54, 94, -104, -22, 107, -51, 57, 9, 68, 15, -71, -70, -128, 5, -68, 4, 102, 8, -19, 127, -80, -80, -110, -4, 117, 119, 72, 66, -102, 67, 51, 84, -120, -117, -93, -57, -22, -105, -55, 111, -125, 68, -126, 55, 39, -51, -28, -58, 99, -83, -94, -20, -32, -36, 27, 28, -46, 103, -11, 112, -61, -110, 108, 84, -13, -105, 80, 17, -24, 39, -60, -53, -53, -116, -122, -49, -79, -49, -5, 32, 112, 13, -63, -36, 46, 8, -49, 20, -18, 64, -69, -127, -33, -102, -2, -72, -30, -75, -95, 86, 101, -115, -15, 37, -29, -112]");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "21F326E2325DCA5E98EA6BCD3909440FB9BA8005BC046608ED7FB0B092FC757748429A433354888BA3C7EA97C96F8344823727CDE4C663ADA2ECE0DC1B1CD267F570C3926C54F3975011E827C4CBCB8C86CFB1CFFB20700DC1DC2E08CF14EE40BB81DF9AFEB8E2B5A156658DF125E390" + "'", str33, "21F326E2325DCA5E98EA6BCD3909440FB9BA8005BC046608ED7FB0B092FC757748429A433354888BA3C7EA97C96F8344823727CDE4C663ADA2ECE0DC1B1CD267F570C3926C54F3975011E827C4CBCB8C86CFB1CFFB20700DC1DC2E08CF14EE40BB81DF9AFEB8E2B5A156658DF125E390");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("60776C49AD5DF687B0C31C9B3F6A1ABA", secretKey5);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[101, 63, 113, 46, -124, -71, -11, -17, 117, -42, -92, -34, 5, 63, 37, -17]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-43, -11, -94, -59, -15, 16, 17, -100, 40, 92, 50, -37, -74, -36, -28, 21, -109, -74, 85, 46, -17, -83, -86, 48, -28, -36, 90, -83, -125, -121, 7, -83, 51, 88, 26, 65, -3, -31, -109, -41, 77, -67, -68, 36, 44, -103, -27, 14]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-22, -54, -55, -31, -37, 76, 125, 42, 111, 94, 2, 75, -48, 43, 38, 61, -127, 96, 28, 37, 76, 76, -113, -101, 11, 124, -39, 42, 40, 23, 104, -106, 51, 88, 26, 65, -3, -31, -109, -41, 77, -67, -68, 36, 44, -103, -27, 14]");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "EACAC9E1DB4C7D2A6F5E024BD02B263D81601C254C4C8F9B0B7CD92A2817689633581A41FDE193D74DBDBC242C99E50E" + "'", str10, "EACAC9E1DB4C7D2A6F5E024BD02B263D81601C254C4C8F9B0B7CD92A2817689633581A41FDE193D74DBDBC242C99E50E");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey6);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey15);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-42, -118, -21, -40, -93, -9, -50, 65, -86, -20, -29, 73, -110, 103, -120, 64]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 108, 94, 14, 119, -54, 76, -114, 5, -116, -120, -89, -34, 39, -119, 72]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 108, 94, 14, 119, -54, 76, -114, 5, -116, -120, -89, -34, 39, -119, 72]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[88, -110, 35, 40, -120, -95, 116, -33, -44, 29, -106, -69, -99, 69, 95, 15]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[90, 3, 84, 5, -111, -33, -12, -19, -29, 115, -63, 71, 90, -90, 124, 71, -51, 62, 79, -74, -108, 107, -120, -104, -73, 108, 55, -128, 1, -29, 37, 98, -42, -118, -21, -40, -93, -9, -50, 65, -86, -20, -29, 73, -110, 103, -120, 64]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, -8, 79, -10, -72, 2, -73, -109, -122, 31, 61, -128, -65, 1, 61, 5, 88, 67, 9, -65, 7, 29, 74, -70, 74, 112, 78, 112, -110, 5, 24, -47, 91, -79, -114, -112, -14, 20, -91, -15, -61, -72, -109, 62, -65, -11, 51, 89, -11, 114, -29, 6, 81, 75, 66, 100, -43, 73, 61, -107, 118, -49, 84, -26, -110, 39, -76, 80, -52, 56, -42, -68, 49, -76, -40, 65, 90, 116, 11, -65, -37, 61, -14, -9, -37, 74, -84, 47, -126, -6, 0, 108, 84, 115, -85, -54, -42, -118, -21, -40, -93, -9, -50, 65, -86, -20, -29, 73, -110, 103, -120, 64]");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-4, -51, -28, -67, -116, -109, -82, 3, 12, -1, 7, -6, 10, -51, 60, 33, 29, 37, 89, 102, 53, 113, 103, -73, 104, 13, -87, -54, -106, -115, -4, 107, -5, -41, 30, -123, 21, -119, -113, 117, 83, -127, -108, 15, -67, 19, -96, -97, -27, 57, 7, 18, 85, 9, -10, 78, -80, -67, -77, -96, 16, 71, 117, -97, 124, -29, 116, -80, -21, 63, 9, 125, -117, -30, -46, 20, 81, 49, -59, -104, 35, 7, -46, 16, 127, 111, -34, 48, -124, 42, -39, -50, -3, -95, -24, 51, 91, -1, -72, -88, -118, -108, -22, 69, -87, -97, -125, 23, -87, -26, 81, 5]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, 113, 83, 56, 16, 95, -127, -34, 30, 60, -3, 0, 100, -64, 58, -111, 52, 72, -12, 27, -110, -10, -101, 39, 49, 106, 85, 28, -120, -99, 94, 58, 91, -1, -72, -88, -118, -108, -22, 69, -87, -97, -125, 23, -87, -26, 81, 5]");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey2);
        java.lang.Class<?> wildcardClass5 = secretKey2.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[57, -115, -111, 125, -66, 51, 26, -15, -6, 67, -36, 25, -101, -106, 50, -47, -76, 40, -18, -123, 30, -97, 41, 105, -71, -57, -50, 123, -10, -111, 18, -109, -121, 119, 46, 84, -110, -69, -126, -26, 26, -5, 44, 28, -115, -92, -66, -48, -52, -38, -114, 84, 16, 70, -27, -38, 68, -10, -88, 9, -27, 112, 55, -15, -15, -66, -81, 7, 93, 31, 107, 23, 103, 126, -46, 2, -31, 39, -80, -27, -30, -122, 67, 32, -90, 14, -100, -46, 122, -59, -69, 47, -82, 85, -100, -25, -19, 7, -24, -85, -95, -52, -38, -113, 108, 92, 59, 87, 123, 78, -118, -33]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[46, 112, -21, -74, -126, -72, -13, 126, 67, 65, 82, -109, -85, 30, 67, 114, -7, -105, 32, -9, -8, -97, 30, -112, 99, -118, 17, 42, 51, 80, 110, -124, -19, 7, -24, -85, -95, -52, -38, -113, 108, 92, 59, 87, 123, 78, -118, -33]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("76B6C9460E19133E83C714B4E6062601", secretKey30);
        java.lang.Class<?> wildcardClass40 = secretKey30.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 86, 10, -61, -27, -42, -42, 10, 90, -18, -126, -43, 68, 48, -128, -87]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[83, 34, -74, -82, -59, 11, 103, 66, 78, 87, -80, 126, -102, -104, 20, -89]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[82, -106, -104, 36, 97, -34, -87, -65, -75, 90, 73, 49, -41, -63, -123, -67]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[110, 83, -83, -25, -107, 114, -68, 76, -32, 121, 88, -5, -46, -25, 15, 59]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-125, 54, 74, -111, 113, 95, -57, 22, 120, 46, -43, 56, -43, 60, 29, 41]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-106, 60, -108, 85, 82, 79, 17, 103, -58, 29, -76, -16, -16, 122, 122, -72]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-6, -23, 99, 15, 120, 24, -62, 100, 61, 25, 91, -44, -93, -28, 106, 95, -32, 44, -89, 44, 16, 64, -71, -111, 61, 91, -26, 64, 48, -10, -24, 57, -125, 54, 74, -111, 113, 95, -57, 22, 120, 46, -43, 56, -43, 60, 29, 41]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-64, -20, 76, 19, -55, 7, -12, 16, 105, -118, 59, -5, -123, 58, 88, 97, -17, 59, 65, 59, 57, -116, -6, -118, 103, -13, -58, -17, -125, -104, 67, 57, -125, 54, 74, -111, 113, 95, -57, 22, 120, 46, -43, 56, -43, 60, 29, 41]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-5, -84, -113, 15, 124, -83, -126, 58, -109, 28, -43, 106, -107, 69, 73, -3, -117, -69, 1, 52, 95, -124, 23, -109, -11, 102, -52, -59, 77, 20, -39, -55, 15, -3, 30, 30, 71, -122, 16, 24, -116, 55, 58, -43, -83, -123, 36, -57, -73, 48, -78, -117, 40, -59, 104, -17, 51, 51, -64, -51, 11, 3, -54, 61, 25, 9, -91, -101, 101, -43, -53, -75, 103, 1, 9, -25, 73, -100, -24, 113, 33, -8, -17, -97, -120, -27, -80, -61, -1, 87, 85, -1, 80, 50, 30, 68, -125, 54, 74, -111, 113, 95, -57, 22, 120, 46, -43, 56, -43, 60, 29, 41]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[122, -86, -95, -27, 109, 48, -54, 111, -112, -123, 54, 68, 101, 47, -51, 71, 72, 108, 18, -12, 95, 108, -71, -68, 46, -119, 29, 58, -122, -127, 115, 47, -125, 54, 74, -111, 113, 95, -57, 22, 120, 46, -43, 56, -43, 60, 29, 41]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey31);
        java.lang.Class<?> wildcardClass42 = byteArray41.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-26, 57, 32, -33, -27, 20, -37, -97, 54, 18, -58, 114, 104, -27, 56, 19]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 1, 74, 97, 58, -81, -30, -57, 20, -35, 44, -22, 40, -55, 113, 43]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-118, 90, -40, 19, 3, -55, 76, -104, 82, -110, -65, 108, -35, -79, -79, 109]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-4, 69, 120, 41, 114, -86, -51, -100, -20, 101, 32, 68, 87, -102, -5, -54]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-57, -8, -87, -98, -81, -24, -72, 22, 2, -98, 16, 119, 22, -8, -101, -119]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-103, 47, 126, 51, 126, -111, 37, -19, 72, 127, -15, -24, -51, 119, -18, -97]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-103, 47, 126, 51, 126, -111, 37, -19, 72, 127, -15, -24, -51, 119, -18, -97]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[96, 87, -45, -81, 72, 20, -127, -128, 14, 71, 91, 62, -61, -70, 81, 40, 98, -112, 116, 32, -69, 64, 51, -7, -34, -28, -102, 114, 27, 43, 36, -68, -57, -8, -87, -98, -81, -24, -72, 22, 2, -98, 16, 119, 22, -8, -101, -119]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-44, -95, -76, -126, -39, -28, -82, -39, 108, 40, 124, -121, 63, -58, 106, -125, -52, 41, 1, -19, 108, 50, -93, 100, -68, -85, -12, 97, 18, 43, -78, -58, -57, -8, -87, -98, -81, -24, -72, 22, 2, -98, 16, 119, 22, -8, -101, -119]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey28);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey36);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey41);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey48);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-75, 115, 69, 37, 118, -43, -50, -9, -101, 15, 119, -43, -22, -124, 18, 26]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 15, 24, -94, -76, -95, -2, 106, -45, -36, -45, -88, -92, -127, 60, -72]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[58, 105, 69, -40, 50, -53, -64, -120, -57, 66, -97, 37, -6, 43, -112, -27]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[83, 4, 66, -27, 67, 15, 79, -111, -5, -121, 114, -103, 85, -119, -108, -114]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[77, -85, -7, -108, 71, 23, -49, 14, -80, 106, -85, -124, -84, -93, -42, 91]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[36, -44, -117, 1, 66, -96, -111, 31, 87, -37, -34, 21, -64, -83, 35, 28]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 85, -119, -3, 97, -93, 31, 105, -39, -14, -95, -87, 84, -62, 90, 48]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, -85, -7, -108, 71, 23, -49, 14, -80, 106, -85, -124, -84, -93, -42, 91]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[44, -106, 49, 52, 5, -43, 58, 97, 3, 65, -29, -13, 34, 64, -77, -48]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, -51, 83, 2, 23, 114, -68, -19, -34, 127, -123, -89, -82, -86, 10, -72, 58, -110, -120, -58, 110, -117, -43, -105, 6, -78, 35, -3, 17, -52, -20, 89, -106, -48, -48, -124, 15, 61, -77, 98, 79, -81, -103, -23, -102, 42, -2, -90]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[73, 93, 51, -92, 47, -72, 80, -118, 20, 38, -26, 121, 56, 93, -110, -31]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-78, 3, 14, -5, 101, 78, 82, -44, -80, 57, -85, -17, 2, -3, 3, -26]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-33, 20, -121, 29, 46, -16, -89, -57, 22, -37, -100, -69, 3, 16, 87, -22]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-33, 20, -121, 29, 46, -16, -89, -57, 22, -37, -100, -69, 3, 16, 87, -22]");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-30, 57, 86, 80, -102, -20, 28, -117, 123, 40, -117, 54, 32, -17, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[101, 57, -34, 48, -116, -34, -49, -113, -4, 106, -70, 73, 127, -94, 73, -66]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 25, -39, 124, -120, 18, -26, 92, 117, 75, 42, 113, 39, -69, 111, -90]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[74, -119, -17, 55, 31, 59, -76, -68, -34, 57, -62, 77, 31, -36, -113, -95]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-75, 45, 68, 82, -96, 100, -80, -65, -86, -16, 54, 95, -38, -101, 93, -84, -57, -85, 28, 82, 122, -6, -29, 93, -111, 114, -10, -44, -49, 89, 109, -118, 67, 25, -39, 124, -120, 18, -26, 92, 117, 75, 42, 113, 39, -69, 111, -90]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-83, 49, -101, -5, 126, 71, 17, 61, 101, 45, -86, -46, -68, -106, -99, -57, 70, 49, 120, -92, 112, -69, -125, -18, -39, -60, -115, -32, -44, 105, -118, -110, 67, 25, -39, 124, -120, 18, -26, 92, 117, 75, 42, 113, 39, -69, 111, -90]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-24, -93, 49, -109, 71, -102, -57, 9, 70, 121, 101, -94, -78, 94, -73, 81, 123, 80, 107, -46, -63, 111, 25, 74, -84, 50, 104, -118, -104, -125, -43, 43, -107, 123, -49, -79, -66, -2, -24, 58, 59, -1, -56, 111, 18, 35, 46, 64, 126, 59, 13, -121, -93, -99, -56, -26, 117, -19, -24, 31, 21, 42, 0, 61, -121, -33, -39, 43, -72, 115, -107, -12, 66, 121, -53, -79, 79, 114, -21, 45, 48, -63, -92, 121, -5, -39, -47, 34, 1, -36, 119, 76, -124, 111, -121, -79, 67, 25, -39, 124, -120, 18, -26, 92, 117, 75, 42, 113, 39, -69, 111, -90]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[75, 32, 38, 4, 125, 45, 46, 118, -115, 76, -110, 18, -55, 81, -35, 55, 70, 41, 84, -119, -40, 121, -86, 83, -100, 6, 37, 11, 18, -10, 28, 7, 67, 25, -39, 124, -120, 18, -26, 92, 117, 75, 42, 113, 39, -69, 111, -90]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-24, -93, 49, -109, 71, -102, -57, 9, 70, 121, 101, -94, -78, 94, -73, 81, 123, 80, 107, -46, -63, 111, 25, 74, -84, 50, 104, -118, -104, -125, -43, 43, -107, 123, -49, -79, -66, -2, -24, 58, 59, -1, -56, 111, 18, 35, 46, 64, 126, 59, 13, -121, -93, -99, -56, -26, 117, -19, -24, 31, 21, 42, 0, 61, -121, -33, -39, 43, -72, 115, -107, -12, 66, 121, -53, -79, 79, 114, -21, 45, 48, -63, -92, 121, -5, -39, -47, 34, 1, -36, 119, 76, -124, 111, -121, -79, 67, 25, -39, 124, -120, 18, -26, 92, 117, 75, 42, 113, 39, -69, 111, -90]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.Class<?> wildcardClass33 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-44, -83, 13, -59, 19, 31, -110, -106, -62, -69, 87, 77, 40, 57, 37, 23]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-56, -46, -52, -83, 90, -84, -9, -54, -123, 89, -7, -2, 53, -20, 58, 113]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[77, 94, -63, -51, 30, 117, -63, -13, -88, -118, 89, -59, -121, 117, -72, 104]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[115, 94, -32, 84, 19, 22, 108, -31, -57, -43, 117, -57, 101, -11, 88, -94]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-42, -124, -99, 83, 122, 87, 20, -91, -37, -19, -104, 96, 43, 67, -52, 121, -44, 10, -12, 100, -64, 32, -82, 28, 67, 68, -90, -24, -59, 38, 98, -7, 77, 94, -63, -51, 30, 117, -63, -13, -88, -118, 89, -59, -121, 117, -72, 104]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-115, 69, 2, 15, 118, -72, -92, 119, 6, -122, 103, -50, -24, -56, 25, -72, -16, 97, 15, -92, -18, -97, -109, 29, 33, -91, 8, 90, 84, 4, -11, -84, 77, 94, -63, -51, 30, 117, -63, -13, -88, -118, 89, -59, -121, 117, -72, 104]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[127, 114, 53, 12, -64, 8, -50, -114, 62, 57, 74, -117, 4, 75, 48, -97, -34, -47, -121, -117, -94, 61, 49, 96, -11, -40, 100, 35, -28, -69, -91, 55, 82, 63, 52, 102, -77, 53, 58, 64, 53, -109, -112, -20, -115, -8, -40, -74, -44, -54, -98, 5, 19, -126, -51, 63, 97, 80, -89, 97, -53, 109, 89, -76, 45, 117, -17, -43, -105, 6, -115, -117, -53, 127, 34, 51, 56, 39, -40, -85, 103, -74, 31, -36, 76, 127, 40, 81, -80, -45, 127, 46, -91, 34, 63, -17, 77, 94, -63, -51, 30, 117, -63, -13, -88, -118, 89, -59, -121, 117, -72, 104]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[56, -69, -66, 45, -127, -98, -12, -105, -72, 23, 1, 44, -112, -45, -54, -96, -126, 46, -103, 44, -90, -49, -65, 126, -59, 116, -44, -2, 97, -43, -124, -55, 77, 94, -63, -51, 30, 117, -63, -13, -88, -118, 89, -59, -121, 117, -72, 104]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-32, 61, 22, -60, 59, -36, -55, 120, -80, -14, -7, 22, -76, -6, 115, 73, -98, 65, 23, -74, -83, 40, 74, 27, -4, 46, -101, 95, 24, -77, 31, 119, -61, 102, -87, 70, -51, 98, -122, -124, 114, 126, 125, 9, -82, -71, -121, -107, 42, -6, -84, -50, -120, 70, -123, 60, 26, 66, 66, 125, -58, -46, 6, 40, 87, 13, -13, -99, -24, -18, -98, -17, -81, -128, 121, -22, 9, -41, 70, -112, -120, 3, 77, -54, 48, -6, 112, 73, 13, 108, 87, 55, -110, 117, -9, -69, 77, 94, -63, -51, 30, 117, -63, -13, -88, -118, 89, -59, -121, 117, -72, 104]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "E03D16C43BDCC978B0F2F916B4FA73499E4117B6AD284A1BFC2E9B5F18B31F77C366A946CD628684727E7D09AEB987952AFAACCE8846853C1A42427DC6D20628570DF39DE8EE9EEFAF8079EA09D7469088034DCA30FA70490D6C57379275F7BB4D5EC1CD1E75C1F3A88A59C58775B868" + "'", str31, "E03D16C43BDCC978B0F2F916B4FA73499E4117B6AD284A1BFC2E9B5F18B31F77C366A946CD628684727E7D09AEB987952AFAACCE8846853C1A42427DC6D20628570DF39DE8EE9EEFAF8079EA09D7469088034DCA30FA70490D6C57379275F7BB4D5EC1CD1E75C1F3A88A59C58775B868");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "E03D16C43BDCC978B0F2F916B4FA73499E4117B6AD284A1BFC2E9B5F18B31F77C366A946CD628684727E7D09AEB987952AFAACCE8846853C1A42427DC6D20628570DF39DE8EE9EEFAF8079EA09D7469088034DCA30FA70490D6C57379275F7BB4D5EC1CD1E75C1F3A88A59C58775B868" + "'", str32, "E03D16C43BDCC978B0F2F916B4FA73499E4117B6AD284A1BFC2E9B5F18B31F77C366A946CD628684727E7D09AEB987952AFAACCE8846853C1A42427DC6D20628570DF39DE8EE9EEFAF8079EA09D7469088034DCA30FA70490D6C57379275F7BB4D5EC1CD1E75C1F3A88A59C58775B868");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey37);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[6, -119, 43, -22, -46, -41, -125, 101, 15, -58, -90, -79, -104, 55, -125, 57]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[71, 106, -7, 40, 103, 60, -17, 72, 97, 92, 41, -59, 116, 51, -38, 86]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-84, -69, -29, 46, 106, 62, -55, 5, 34, -124, -89, -8, -19, 43, -27, 6]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[110, 74, -20, 28, -117, -92, -19, -110, 19, 114, -5, -80, 75, -27, -79, -112]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-120, -93, 88, -84, -54, 25, 44, -122, 111, 100, 124, 97, 124, -15, 121, -103, -3, 27, -78, -90, -38, 31, -45, 125, -93, -9, 102, 5, -46, -101, -122, -11, -84, -69, -29, 46, 106, 62, -55, 5, 34, -124, -89, -8, -19, 43, -27, 6]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-48, -102, 36, 34, 72, 42, 80, -54, -90, -107, 16, 124, 75, 119, 53, 2, -58, 44, 81, 104, -1, -114, 119, -70, 124, -96, -18, -90, 52, 115, -102, -128, -84, -69, -29, 46, 106, 62, -55, 5, 34, -124, -89, -8, -19, 43, -27, 6]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[36, 28, -61, -46, 44, -86, -87, -33, 25, -102, -55, -14, 61, 101, -95, -85, 101, 101, 21, 72, 107, 72, -73, -104, -94, -10, -55, 34, 18, -127, 65, 57, -105, 59, 77, -88, -52, 64, -18, 24, -47, 41, -31, 106, -51, -17, 57, 124, -96, -15, 76, 85, 3, 55, -88, -77, -54, -24, 105, 58, 45, -26, -37, 4, 68, -128, 87, 2, -40, -11, 92, 36, 52, -67, -35, -97, 34, 82, -66, 105, -30, -1, -110, -23, -18, -51, 38, 37, 38, -116, -93, -40, -39, 30, 99, -116, -84, -69, -29, 46, 106, 62, -55, 5, 34, -124, -89, -8, -19, 43, -27, 6]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[72, -59, -117, -122, 7, -52, 15, -65, -94, -65, -35, 69, -4, -68, 77, -56, -28, 21, -17, -50, -49, 119, 101, -50, 124, 61, -57, 21, 7, -42, -19, 50, 78, -30, 74, 50, 44, -57, 16, -120, -67, 67, 46, -54, -14, -80, 20, -10, 79, 109, 75, 88, -116, -30, 117, -114, 98, -85, -2, 102, 107, -22, 110, -69, 86, -25, -70, 15, -108, -13, 4, -68, -57, 21, 113, -78, 73, 39, 47, -107, -112, 110, -44, 67, -59, 119, 77, -111, -106, -106, 6, -33, 65, -121, -82, 46, -84, -69, -29, 46, 106, 62, -55, 5, 34, -124, -89, -8, -19, 43, -27, 6]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[62, 108, 13, 116, 116, 20, -120, 106, 75, -27, 105, 3, 90, 71, -110, -74, 104, 116, -57, 30, 29, 103, 61, -100, 120, 67, -14, -55, -118, 109, 33, -82, -27, 26, -97, -43, 120, -43, -61, -49, 58, 35, -35, 119, 125, 11, 125, 27, -127, 55, -113, 98, 19, -81, 24, -40, 45, 35, -67, -95, 5, 13, 73, -119, 30, -49, -19, 21, -89, -61, 99, -114, 4, 16, -99, -12, -2, 94, -112, -71, -52, 77, 10, -66, -124, -83, -6, -77, 1, -15, -122, 10, 46, 29, -44, 81, -84, -69, -29, 46, 106, 62, -55, 5, 34, -124, -89, -8, -19, 43, -27, 6]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-84, -69, -29, 46, 106, 62, -55, 5, 34, -124, -89, -8, -19, 43, -27, 6]");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-72, 38, -97, 101, 38, 67, 23, -122, 12, -125, 21, -5, 46, 16, -44, -58]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[8, 110, -13, 34, 68, -13, -32, 97, 113, -86, 67, -98, 85, 25, -10, -74]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-106, 58, -82, -20, 89, 10, 27, 123, -59, 125, 120, -13, 38, -42, 10, 5, 111, -56, -4, -19, 20, 67, 118, 103, 43, -105, -58, 127, 20, -2, -70, 51, -72, 38, -97, 101, 38, 67, 23, -122, 12, -125, 21, -5, 46, 16, -44, -58]");
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("EC8EA26633DC04609AE498FE8AC0474D3EA18A86E7F6FA0026F8C9A89A3B73866DB993E4492FED70097622D97501A64A4C7ED826137FDA507962DB468E53D0B4D03A393A40294C080786E80D6274D92AAB2DB57873809F1143E36968F3C4037F320635DF18604CBCE4B94EE2E6451DC9", secretKey8);
        java.lang.Class<?> wildcardClass17 = byteArray16.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-76, 31, -107, 26, 26, 97, -117, 56, 26, -111, 46, 74, 103, 47, -48, -48]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 120, 31, 75, 77, 35, -59, 62, -48, 55, -15, -95, -17, -104, -11, -78]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 120, 31, 75, 77, 35, -59, 62, -48, 55, -15, -95, -17, -104, -11, -78]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, -102, -84, -118, 24, -120, 87, 85, 86, -104, -124, 47, 14, 104, 41, -83]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[13, 120, 31, 75, 77, 35, -59, 62, -48, 55, -15, -95, -17, -104, -11, -78]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[2, 124, 58, -57, 110, -118, 10, -25, -89, -14, 123, 85, 19, 16, -69, -46, -53, 55, 23, -7, -55, -84, 17, 66, 123, -7, 24, -120, 11, 1, -41, 23, -76, 31, -107, 26, 26, 97, -117, 56, 26, -111, 46, 74, 103, 47, -48, -48]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[41, -48, -127, -98, -23, 26, 111, -50, -38, 106, 100, -46, -7, -105, -27, 84, -111, 91, 122, -49, -86, -11, -59, -127, -80, -64, -16, 80, 60, 54, 7, -60, -74, 44, 20, 100, -68, -83, 45, -5, -18, -64, 80, 7, 43, -2, -65, -65, -60, -57, -22, 117, 6, -43, 94, 57, -101, -46, 10, 26, -80, 9, 121, 106, -14, -40, 63, 105, -128, -92, 51, -119, -68, 47, 31, -27, 91, -91, -65, 44, 25, -10, -36, -22, 52, 127, 29, 101, -10, 47, 86, 15, -97, -76, -82, -111, -76, 31, -107, 26, 26, 97, -117, 56, 26, -111, 46, 74, 103, 47, -48, -48]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey33);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey33);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey33);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey33);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey33);
        java.lang.Class<?> wildcardClass46 = byteArray45.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[69, 110, -127, -25, -84, -8, -108, 23, 116, -13, 104, 0, 24, -87, -92, 97]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-104, -110, 125, -38, -18, 68, -72, 84, -36, -54, -70, 24, -48, -105, 98, -20]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[39, -57, -113, -12, 6, -118, 18, 42, 97, -97, 43, 15, 41, -102, -105, 77]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-73, 117, 71, 5, 52, -75, 53, -94, 43, -122, -80, 58, -86, -102, 53, 125]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-49, 127, 9, 95, -40, 74, -100, -97, 122, 126, -70, 62, -67, -112, 63, 29]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[22, 109, 10, 102, 107, -6, 30, 102, -122, 103, 18, 52, -100, -15, 20, 44]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[22, 109, 10, 102, 107, -6, 30, 102, -122, 103, 18, 52, -100, -15, 20, 44]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[79, 60, 53, -5, -119, -128, -42, -112, -25, -6, -69, 76, -20, -10, 65, -124, -126, -61, -34, 70, 50, -17, -29, 107, -112, -124, 110, 33, 43, -87, -88, 10, -49, 127, 9, 95, -40, 74, -100, -97, 122, 126, -70, 62, -67, -112, 63, 29]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[32, -38, 94, -91, -79, 26, 92, -28, 54, 49, -76, 33, 26, 29, -41, -65, -60, 98, 47, -126, -109, 30, -32, 99, 36, -96, 17, -52, -5, 68, -45, -51, -49, 127, 9, 95, -40, 74, -100, -97, 122, 126, -70, 62, -67, -112, 63, 29]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[40, -100, -52, 76, 15, 72, -100, 77, 85, -95, -80, -33, 16, -13, 37, 0, 50, -3, -86, -111, -101, -21, -7, 94, 20, 101, 117, 92, 120, -97, -84, 117, -49, 127, 9, 95, -40, 74, -100, -97, 122, 126, -70, 62, -67, -112, 63, 29]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[29, -72, -89, -81, -75, -116, -28, -117, -125, 110, -34, 28, 106, -57, -84, -81, -52, 25, -28, 116, 106, 94, -109, -34, 55, -99, 125, -125, 96, -118, 85, 87, -87, 28, 89, -118, -3, 56, 56, 54, 53, -16, 65, 31, 44, -102, -108, -8, 29, -33, 30, -116, 27, -95, -57, -106, 56, -71, -36, 98, 1, -13, 53, -125, 57, 102, -99, -19, -116, -21, -77, -67, 77, -59, 83, -125, 70, -93, -18, 33, 41, -28, -75, -81, 122, -83, -95, 90, -63, 84, -113, -94, 24, -2, -114, 7, -49, 127, 9, 95, -40, 74, -100, -97, 122, 126, -70, 62, -67, -112, 63, 29]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[29, -72, -89, -81, -75, -116, -28, -117, -125, 110, -34, 28, 106, -57, -84, -81, -52, 25, -28, 116, 106, 94, -109, -34, 55, -99, 125, -125, 96, -118, 85, 87, -87, 28, 89, -118, -3, 56, 56, 54, 53, -16, 65, 31, 44, -102, -108, -8, 29, -33, 30, -116, 27, -95, -57, -106, 56, -71, -36, 98, 1, -13, 53, -125, 57, 102, -99, -19, -116, -21, -77, -67, 77, -59, 83, -125, 70, -93, -18, 33, 41, -28, -75, -81, 122, -83, -95, 90, -63, 84, -113, -94, 24, -2, -114, 7, -49, 127, 9, 95, -40, 74, -100, -97, 122, 126, -70, 62, -67, -112, 63, 29]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[31, 61, 126, 63, 100, -32, 111, -98, 48, 28, -23, 87, 73, 105, -44, -38, -7, 65, 86, 27, 85, 39, -114, 12, -1, 40, 110, 94, -47, -51, -59, -56, 38, -35, -87, 83, -10, 118, -9, 52, 115, 14, 21, 121, -119, -81, 39, -68, -125, -21, -48, -88, 92, 25, 80, -21, -27, -10, -19, -59, -58, -58, -18, -102, 124, 56, -80, -6, -38, -81, 45, 30, -81, 120, 38, -119, 116, -123, 62, 36, -110, 54, -77, 86, -86, 20, -92, 121, -90, -9, -104, -107, -44, 86, 43, -70, -49, 127, 9, 95, -40, 74, -100, -97, 122, 126, -70, 62, -67, -112, 63, 29]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB05108861568B77067864E393C66A651FA7D65C7972104CEC7664A6D568630EFF7F44008DECFABECC47EF00F1E1F507", secretKey20);
        java.lang.Class<?> wildcardClass25 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-25, -61, -119, 57, -71, 26, -29, -111, -44, -60, 64, -25, -114, 85, -123, 87]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[66, -14, 41, -37, -23, -100, 121, -99, 72, 105, 76, 118, -9, 37, -57, -22, -77, 69, -60, 45, 6, 47, 19, 89, 118, 75, -47, 92, 106, 42, -117, 99, -85, 67, 17, -12, -22, -54, -13, -43, -77, 71, -105, 89, -109, -103, 84, 82]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[53, 103, 116, 46, 54, 97, -110, 27, -122, -72, 32, -22, -84, 2, 55, 49, 24, -75, -103, -35, 98, 92, 76, -19, 101, -98, 22, 7, -51, -84, -71, -67, -18, 15, 123, 55, 65, -63, -94, 115, -98, -4, -30, 118, 127, 118, 9, 102, -95, -14, 97, -111, -42, 25, -128, 49, 28, -36, -88, -20, -51, 110, -109, 81, -74, -32, -34, 59, -36, -12, -33, -21, 36, -119, -99, -23, 122, 118, 68, -101, 21, 24, -114, -98, -7, -30, -26, -108, 84, -95, 11, -63, -50, -35, 52, -64, -85, 67, 17, -12, -22, -54, -13, -43, -77, 71, -105, 89, -109, -103, 84, 82]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[66, -117, 58, -121, -71, -91, 31, 64, -68, -123, 114, 19, 103, 24, -44, -13]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[127, -98, 29, -46, -116, 69, 74, 51, 43, -73, 125, -127, 111, 117, -67, -5]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[127, -98, 29, -46, -116, 69, 74, 51, 43, -73, 125, -127, 111, 117, -67, -5]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-127, -46, 31, -66, -92, -41, -103, 106, 56, 70, 106, -98, 77, 33, -45, -35]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[66, -117, 58, -121, -71, -91, 31, 64, -68, -123, 114, 19, 103, 24, -44, -13]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-19, 103, 7, -88, -11, -61, 10, 9, -52, -123, -94, -11, 112, 26, 110, 19, 22, -28, -22, 84, 56, 22, 100, 25, 44, -110, 45, 46, 12, -20, 57, 87, 119, 33, 99, -57, -70, 58, 93, 53, 24, -86, -112, -32, 85, 48, 46, 119, 111, 121, -18, -103, -21, 57, 80, -99, 93, -42, -105, 98, -103, -1, 24, -78, -71, -15, -92, 30, -39, -101, -98, 61, 23, 91, -99, 44, 15, 91, 80, 100, -43, -50, -60, 87, 64, -69, 58, 124, 34, 89, -100, 108, -27, -42, 102, -83, 66, -117, 58, -121, -71, -91, 31, 64, -68, -123, 114, 19, 103, 24, -44, -13]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-78, -125, -69, 39, -6, -60, -27, 13, -118, 100, 3, -57, -56, -54, 122, -87]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[118, 31, 101, 5, 49, -128, -92, -102, -17, -113, 5, 7, 104, 110, -89, 81, 70, -3, 9, 119, -4, 92, 11, 86, 36, -101, -63, 4, -120, -37, -127, -29, -43, 90, 119, 45, -128, 116, -102, 47, -121, 20, -100, -77, -85, -48, 80, 114]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-23, 18, 56, 50, -26, 22, -37, -59, 45, -126, -83, -63, -121, 60, -102, 29, -113, -52, -75, 101, 3, -63, 73, 83, 37, -54, 50, -9, -13, -14, -32, -108, -74, 57, 86, -105, -12, 20, 114, 89, 109, 106, -104, -50, 107, -111, 116, 48, -106, -94, 78, 30, -113, 51, 0, -1, 85, -15, 29, 75, 55, 14, 114, 42, -51, -79, -31, -116, 15, -125, -79, 30, 13, -35, 5, 4, 2, -74, -82, -100, -103, -8, -102, -114, 49, 39, -56, -20, -15, -117, 26, 89, 28, 44, 103, -89, -43, 90, 119, 45, -128, 116, -102, 47, -121, 20, -100, -77, -85, -48, 80, 114]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[61, -30, -116, -15, 121, -67, -90, 44, -86, 15, -24, -69, -125, -44, -71, 104, -70, 34, 85, -17, 43, -89, 82, 90, 57, -90, 30, -52, 20, -45, 88, 15, 41, 104, 14, 38, 17, 22, 88, 46, -80, 67, -37, 59, -12, -97, 56, 113, 13, 28, 96, -67, -125, -123, 113, -21, 38, 97, -43, 48, -89, -37, 61, 15, 2, -45, -120, -128, -88, -68, 123, 43, -1, -13, -38, 89, 108, -111, 65, 22, -7, 65, 58, 69, -80, -21, 25, -71, 1, -85, 85, -80, -120, 72, -60, 113, -43, 90, 119, 45, -128, 116, -102, 47, -121, 20, -100, -77, -85, -48, 80, 114]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey27);
        java.lang.Class<?> wildcardClass34 = secretKey27.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[12, 109, -21, 58, -67, -66, -55, -37, 107, -8, 74, -51, 48, 27, 109, -74]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[105, -46, 40, -36, 15, -18, 2, -42, 57, -10, 113, 71, -92, 67, 72, 29]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-114, -96, -122, 125, 50, 46, -41, 51, -42, 46, -128, -117, -5, -66, 95, -72]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-59, 11, -36, 6, -31, -29, 101, -58, -3, 76, -105, 55, 6, -75, 114, 5]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[18, 126, 114, 39, -80, 37, -47, -4, 71, -70, 113, 21, -118, 48, 69, -47]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[120, 50, -39, 105, -71, 113, 25, -35, -119, -74, 35, -53, -70, -32, -127, 95]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[120, 50, -39, 105, -71, 113, 25, -35, -119, -74, 35, -53, -70, -32, -127, 95]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-117, 19, -100, 13, 12, -12, -74, 53, -100, -23, -35, 38, 12, 78, 40, 79, 12, -80, -22, 55, -44, -29, 14, -29, 50, -50, -32, 84, -115, 41, 33, -4, 18, 126, 114, 39, -80, 37, -47, -4, 71, -70, 113, 21, -118, 48, 69, -47]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey32);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey32);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey41);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey47);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey47);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        byte[] byteArray68 = new byte[] {};
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray68);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey70);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey74);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey74);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey74);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey74);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey74);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey74);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey74);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey74);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[79, 42, 58, 84, -25, -24, 107, -18, 102, 37, -40, 127, -114, 59, -60, 44]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-119, -109, 105, -41, 82, -50, -90, -116, 65, -68, -30, 78, -27, -52, 97, 65]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-17, -106, 15, 118, 109, 58, -72, -81, 126, -52, 112, -27, 117, -52, -95, -110]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[82, 45, -62, 71, 63, 22, 115, -43, 38, 56, 99, 87, -72, -12, 68, -81]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[43, -123, 88, 34, 127, 114, -75, 83, 68, -126, 17, -88, -14, -116, -127, 4]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-3, -113, 31, -111, 84, 78, 78, -90, 41, 57, 1, 2, 112, -41, -64, 4, 39, 78, -92, -78, 24, 12, -79, -94, 98, -108, 69, -19, -65, -80, 49, -118, 82, 45, -62, 71, 63, 22, 115, -43, 38, 56, 99, 87, -72, -12, 68, -81]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[22, -76, -128, 11, 24, -96, 52, 48, -63, -91, 121, 13, 66, 36, 102, -49]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-36, -117, 118, -95, 58, -38, -72, -106, -66, 106, -86, -106, -109, -3, -92, -9]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[124, -24, 28, -1, -120, -82, -119, 119, 88, 76, 35, 8, -68, 51, 113, 85]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-22, 68, -70, -113, 23, -117, 87, 21, 1, 19, 20, -125, 88, -5, 32, 83]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[43, -124, 3, -48, 105, 91, -47, -24, -109, 89, 41, 127, -39, -110, 124, -16]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[90, -48, 49, -127, -49, 17, -111, -71, 65, -80, -118, 107, -12, 1, -7, -68]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-118, 127, -37, 81, -51, 52, 116, 36, 75, 121, 53, -24, -87, -67, -23, 115]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[64, -71, 92, 63, 16, 86, 103, -120, -16, -98, -40, 38, 115, -110, 35, 116]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[107, 61, 52, -7, 113, -69, 81, 21, 48, -29, 16, 76, -74, -117, 9, 52, -107, -105, 68, -24, 121, 87, -16, -48, -7, 26, 90, -18, 109, 15, -86, 87, -118, 127, -37, 81, -51, 52, 116, 36, 75, 121, 53, -24, -87, -67, -23, 115]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[86, -103, 19, -126, 36, 4, -79, -26, 57, -92, -23, -108, -3, 56, 49, -78, 33, -19, 33, 62, 118, 43, 79, 34, 0, 124, -69, 103, -22, 112, -52, -94, -118, 127, -37, 81, -51, 52, 116, 36, 75, 121, 53, -24, -87, -67, -23, 115]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[7, 93, -64, 94, -63, -65, -93, -5, 125, 123, -81, -22, 94, 113, -18, 47, -78, -114, -34, -96, 62, -124, -79, 65, -75, -41, -123, 14, -45, 104, -10, 27, 91, 85, -66, 22, 124, -89, 79, 74, 67, 105, -1, 37, 35, 31, -40, 29, -116, -48, 23, 107, -7, -70, -74, -104, -103, -5, 85, 24, 74, 118, -122, -101, -76, 34, -49, 123, 85, -62, 7, 38, -124, -93, -120, 87, -77, -9, -60, -29, -89, -124, 117, -125, -106, 123, -17, 75, 45, -122, 119, -95, -100, -78, 66, -23, -118, 127, -37, 81, -51, 52, 116, 36, 75, 121, 53, -24, -87, -67, -23, 115]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-37, -8, 71, -45, -2, 17, -14, 114, 101, -7, -21, 55, 39, 49, -25, -38, -91, 115, -16, -86, -56, 48, -96, 32, -11, -28, -58, -97, 123, -65, 84, 60, -118, 127, -37, 81, -51, 52, 116, 36, 75, 121, 53, -24, -87, -67, -23, 115]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-2, -38, -113, -21, 29, 31, -78, 2, 116, 77, 53, -106, -77, -123, -83, 87, -113, 95, -95, -87, 18, -62, -62, -115, 86, -76, -107, 119, -42, -121, -20, -29, -61, -55, -58, -16, 89, 67, 15, 10, 1, -4, -58, 52, -23, -80, -107, -77, 12, -29, 85, -18, 94, -30, 68, -117, 109, -13, -6, 97, 100, 118, 17, 113, -98, 110, -58, 81, 67, 118, 50, -116, -19, -64, -75, 99, -59, -78, 82, 41, 119, 95, 57, -83, -57, 60, -98, -105, -35, 87, 21, -65, 46, -70, -56, -119, -118, 127, -37, 81, -51, 52, 116, 36, 75, 121, 53, -24, -87, -67, -23, 115]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[64, -71, 92, 63, 16, 86, 103, -120, -16, -98, -40, 38, 115, -110, 35, 116]");
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E07B4BC03CA77CE3B6B1690E9A4B53D1B86B5C5D0EA675A64737A8CF5E3739F7E134859685CD93A14D0ECC62208C220", secretKey41);
        java.lang.Class<?> wildcardClass51 = secretKey41.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-120, -1, -74, 65, -94, -28, 23, -63, -57, 60, -9, -70, -9, 104, 46, 6]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-4, -89, 125, -61, -59, 43, -101, 12, 87, -60, 105, -126, 77, -81, 57, -51]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[99, -111, -108, -31, 65, -12, -122, -57, 84, -109, -42, -52, -29, 123, -77, 17]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[88, -88, 31, -45, -29, 56, -22, -68, 117, 77, -113, 58, -50, -6, 51, 78]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[89, -79, 27, -11, 67, -116, -27, 44, 67, -63, -90, -91, -77, -91, -2, 36]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-98, 19, 120, 23, 25, -81, -80, -110, 84, -85, 6, 47, -14, -30, 76, -61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-98, 32, -127, 117, -71, 99, -28, -93, 104, -87, 8, -101, 113, -39, 66, -30]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-60, 102, 20, 93, 30, 69, 67, -30, -101, 68, -22, -104, -22, 49, -90, 122]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-88, 5, 56, -7, 85, -106, 96, -28, 41, -21, -24, 27, -17, -32, 122, 36, 68, -53, 118, -127, -61, 60, 20, -46, -3, 35, 69, 6, -93, -47, -121, 66, -98, 32, -127, 117, -71, 99, -28, -93, 104, -87, 8, -101, 113, -39, 66, -30]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-35, -124, 115, 29, 66, -34, 121, 114, -12, -46, -22, -88, -79, 100, -91, 3, 121, -89, -87, -124, 94, -96, 36, 94, 33, 69, 3, -19, -20, 15, -52, 121, -98, 32, -127, 117, -71, 99, -28, -93, 104, -87, 8, -101, 113, -39, 66, -30]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-86, -55, 93, -128, -90, 89, -76, 24, -102, 106, -122, 54, -88, -39, 121, -88, -105, -5, 106, -69, 117, -125, 17, -16, -74, 76, 23, 19, -17, -102, 38, -87, -98, 32, -127, 117, -71, 99, -28, -93, 104, -87, 8, -101, 113, -39, 66, -30]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[110, 72, -66, 35, 62, -125, -15, 109, 55, 72, -75, -26, 4, -117, -16, 55, -99, 114, 25, -61, -64, -103, -45, 89, -104, 14, 60, -59, 21, 121, 36, -87, -41, 105, -18, -110, -63, -9, 11, 48, 91, 90, 127, -66, 108, 21, -4, 40, -107, 78, -105, 52, 105, -103, 93, 18, -4, 117, 20, -74, -11, -118, -51, -28, 56, -100, 43, 122, 11, 77, -6, 106, -109, 63, 98, 124, 62, -115, -109, 16, 50, -33, 43, 64, 10, 62, -115, -15, -13, -86, -80, 120, -99, -20, -2, -95, -98, 32, -127, 117, -71, 99, -28, -93, 104, -87, 8, -101, 113, -39, 66, -30]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[2, -48, -118, 63, 45, 13, -105, 53, -59, 83, 100, -43, 55, -79, -12, -105]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[117, -74, -23, -38, 118, 70, 91, 30, -22, 18, -60, -102, -48, -103, -59, -35]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-103, -56, 31, -56, 67, 64, -29, -31, -63, -57, 100, -33, 0, 63, -86, -57]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-7, -115, -44, 115, -26, 86, 41, 47, -3, 83, -70, 87, 30, -27, 96, 107]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-103, 53, 15, 71, 4, -32, -106, 27, 14, 6, 98, -84, 65, 3, 78, 99, 60, 77, 29, 73, -14, -51, -100, 23, 47, -79, 82, 26, -26, 119, 15, -99, -103, -56, 31, -56, 67, 64, -29, -31, -63, -57, 100, -33, 0, 63, -86, -57]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-97, 21, 103, -98, 51, -64, -121, 27, 76, -3, -78, 23, 92, 39, -117, -83, 65, -21, -101, -37, -31, -13, 120, 51, -73, -16, 17, 126, 62, 16, 58, 99, -103, -56, 31, -56, 67, 64, -29, -31, -63, -57, 100, -33, 0, 63, -86, -57]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[95, -37, 50, -46, 33, 33, -77, -72, 98, -61, 10, 31, -120, -97, 42, -35, 72, -117, -23, -79, 12, -107, -34, -99, 31, 33, -114, 52, -83, 26, 110, 24, 66, 113, 62, -8, -30, 65, -45, 121, 40, 87, 109, 104, 88, -114, -104, 94, -81, -119, -27, 4, 63, 51, -95, -4, -6, 5, 93, -113, -53, -72, 62, 62, 92, -35, 92, 16, 75, 61, 30, 89, -44, -17, 29, -38, -18, -118, -65, -117, 8, 6, -7, -110, 88, -11, 64, -108, -36, -42, -10, 71, -7, -49, -28, 73, -103, -56, 31, -56, 67, 64, -29, -31, -63, -57, 100, -33, 0, 63, -86, -57]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[30, 61, -6, -48, 79, 68, -112, 125, -61, 100, -63, -122, 81, 75, -94, -100, -100, 38, -2, 81, -62, -27, 48, -70, -48, -51, -34, -53, 56, -88, -49, -65, -103, -56, 31, -56, 67, 64, -29, -31, -63, -57, 100, -33, 0, 63, -86, -57]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-117, -68, 6, -16, -54, -42, 67, -97, -96, 3, -15, 86, 98, 21, -100, 125, -112, 11, -22, -43, -27, 78, -108, -56, 75, -75, -30, 45, -70, -74, -128, 125, -88, 96, 14, 119, 109, 27, -59, 76, 112, -59, -114, -111, 10, -93, 23, 103, -35, -80, 73, 39, 46, 89, 27, 7, 23, 103, 60, 106, 19, -6, -9, -86, -106, 6, 80, 63, 60, -44, 114, 90, -5, 26, 119, -116, -94, -115, -25, 39, 58, 51, -21, -85, 20, 50, 78, -36, -83, 14, -29, 54, 91, 81, 110, -46, -103, -56, 31, -56, 67, 64, -29, -31, -63, -57, 100, -33, 0, 63, -86, -57]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[93, -103, 29, 119, 119, -125, -2, -10, -126, 120, 79, -84, -14, 90, 13, 80]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-28, 16, 102, -31, -13, 116, 14, -30, 116, -97, -51, -33, -33, 81, 72, 57]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-45, -40, -24, 22, -77, -22, 3, 59, 71, 44, -107, -83, -49, -20, 42, -46]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-82, -9, -22, -14, -95, 88, -88, 22, 103, -7, -68, 23, -109, -110, 118, -54]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[83, 35, -8, 80, 40, -81, 13, -95, -1, -92, -80, 68, 74, 71, 0, 15, 76, 5, 121, 62, 93, 41, 8, 14, 36, 1, -31, 88, -120, 24, -72, 100, -45, -40, -24, 22, -77, -22, 3, 59, 71, 44, -107, -83, -49, -20, 42, -46]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-8, -58, -32, -65, -67, 32, -82, -97, -42, 31, -89, -16, -12, 71, 46, -43, -110, -65, -45, 30, 35, -59, -100, -107, -106, 116, 6, 34, 75, -78, 43, -1, -45, -40, -24, 22, -77, -22, 3, 59, 71, 44, -107, -83, -49, -20, 42, -46]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[92, -121, 61, -58, 53, 98, 63, -26, -128, 82, 31, -48, 125, 94, -123, 93, -108, 97, 23, -35, -44, -44, 102, -51, -29, -91, 48, 21, 69, 70, 27, 96, 118, 7, 61, -68, 91, 48, 112, -60, 90, -97, -62, 89, -33, 65, -67, 61, 8, -32, -22, 37, 86, -108, -74, -56, -69, 105, 86, -113, -118, -55, 119, 65, -61, 96, -87, 81, 75, -58, 46, 100, 88, 5, -37, 87, 88, -9, 73, -23, 9, 40, -32, 69, -119, -65, 5, 44, 40, -70, -59, 46, -38, -17, 0, -121, -45, -40, -24, 22, -77, -22, 3, 59, 71, 44, -107, -83, -49, -20, 42, -46]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[106, 22, 115, -29, 89, 109, 79, -23, -35, 73, -79, -48, -13, 26, -13, -98, -111, 18, -90, -57, -32, 122, 51, 39, -104, 123, -16, -92, 74, 28, 103, -48, -45, -40, -24, 22, -77, -22, 3, 59, 71, 44, -107, -83, -49, -20, 42, -46]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.Class<?> wildcardClass13 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 60, 25, 100, 91, -121, -41, 66, 103, -117, 0, 74, 76, 100, 96, -12]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-32, -69, -16, 2, 19, 35, 78, 115, 36, -53, 87, 22, -53, 116, 85, -30]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-32, -69, -16, 2, 19, 35, 78, 115, 36, -53, 87, 22, -53, 116, 85, -30]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[61, -20, 16, 29, 24, 4, -43, -51, -123, 31, -55, -117, 109, 107, -113, 105]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-32, -69, -16, 2, 19, 35, 78, 115, 36, -53, 87, 22, -53, 116, 85, -30]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "E0BBF00213234E7324CB5716CB7455E2" + "'", str11, "E0BBF00213234E7324CB5716CB7455E2");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "E0BBF00213234E7324CB5716CB7455E2" + "'", str12, "E0BBF00213234E7324CB5716CB7455E2");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey40);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey40);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey40);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("6000978D729A5EAF02789174FCEF78DC19A6A5353FA2EE08001847BF93F672C57842A660B60BA3E3BAFC4CA493DB93BD616BA839F8FC6BCE8F25A5CFF9986984A5A08FB7FA9398912FBF66BA83D5698C9B89FE34ECEA63E7E13593D7BE10CB607921E0CEEC09BCE538EB3873308F1B39", secretKey40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey40);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[83, 96, 85, 15, 72, -48, -7, -108, -116, 21, -6, -114, 42, 7, 22, 56]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-67, 52, -55, 45, -34, 23, -31, -118, 100, 106, 65, -78, -4, -76, -59, 97]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, 107, 101, -65, 118, -98, -53, 91, -92, -108, 85, 94, -25, -118, 36, -31, -73, -69, 104, 102, 53, 55, -127, -71, -51, -17, -44, -81, -106, 16, -106, 112, -63, -83, 107, -41, 9, 51, 61, 40, -22, 76, 81, -100, -76, 88, 110, 91, -42, 92, -30, -84, -57, -95, 33, 79, -5, -125, -91, -75, -91, 87, 106, -19, 40, -85, -98, -43, -37, -69, 58, 84, -31, 39, 111, 110, -114, -124, 38, 3, -71, 36, -11, 125, -123, 86, 116, 14, 77, 57, -70, 23, -92, -121, 35, 66, 83, 96, 85, 15, 72, -48, -7, -108, -116, 21, -6, -114, 42, 7, 22, 56]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-91, -116, -124, -9, -94, 65, 3, -121, 24, -20, 75, -33, 35, -2, 112, -120, -79, 102, 41, 88, 24, 73, 116, 17, 31, -88, 102, -120, -48, -14, -9, 118, 83, 96, 85, 15, 72, -48, -7, -108, -116, 21, -6, -114, 42, 7, 22, 56]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[103, -10, -104, 77, -15, -108, -123, -103, -126, -28, -84, 17, 61, -30, -82, -17, -35, 95, -80, -64, 127, 46, -20, -44, 76, 70, -62, 95, 109, 119, -98, 112, -113, 81, 100, 26, 85, 64, -96, -97, -84, -63, 102, 69, -119, 111, 82, 15, -11, -24, -120, -45, -79, -58, 100, 127, 69, 88, 22, -117, 20, -73, 44, 83, -81, -57, -67, -74, 61, -84, 40, -37, -8, -51, -49, 121, 22, 20, -55, 54, 31, 27, -106, 50, -9, 92, -19, -105, -1, -58, -46, -49, 75, 100, 0, -66, 83, 96, 85, 15, 72, -48, -7, -108, -116, 21, -6, -114, 42, 7, 22, 56]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "67F6984DF194859982E4AC113DE2AEEFDD5FB0C07F2EECD44C46C25F6D779E708F51641A5540A09FACC16645896F520FF5E888D3B1C6647F4558168B14B72C53AFC7BDB63DAC28DBF8CDCF791614C9361F1B9632F75CED97FFC6D2CF4B6400BE5360550F48D0F9948C15FA8E2A071638" + "'", str13, "67F6984DF194859982E4AC113DE2AEEFDD5FB0C07F2EECD44C46C25F6D779E708F51641A5540A09FACC16645896F520FF5E888D3B1C6647F4558168B14B72C53AFC7BDB63DAC28DBF8CDCF791614C9361F1B9632F75CED97FFC6D2CF4B6400BE5360550F48D0F9948C15FA8E2A071638");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-97, -48, 117, -124, -126, 89, 94, 87, -83, 111, 83, 78, 103, 71, -83, -27]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[39, -68, 115, -90, 13, -79, -38, -12, 113, 47, 112, -100, 63, 120, 124, -59]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[32, 115, -40, 32, -128, -83, 98, -38, -124, 85, 45, 98, 115, 26, 44, -70]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[83, -41, -59, -13, 83, 11, 7, -121, -27, -114, -85, 29, 95, 45, -110, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-81, -27, 48, 55, -3, 28, -12, -121, -46, -83, 72, 76, -54, 92, -102, 61, -67, -110, -110, -5, -92, -35, -62, 93, 89, 86, -17, -105, -39, 43, -37, 60, 32, 115, -40, 32, -128, -83, 98, -38, -124, 85, 45, 98, 115, 26, 44, -70]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[24, 37, 72, 24, -72, 116, -53, 74, -73, -18, 29, -96, 65, 78, 59, -45, -100, 12, -64, -81, 56, -39, 18, 116, 98, 125, -57, -75, -125, -56, -65, -9, 32, 115, -40, 32, -128, -83, 98, -38, -124, 85, 45, 98, 115, 26, 44, -70]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[48, -116, 124, -122, 36, -67, 123, -69, -75, -26, 66, -23, -57, 30, 70, -89, -77, 81, -87, 55, -76, -75, -104, -19, -39, -56, 54, -66, -82, -74, -46, 71, 53, 118, 102, 127, 34, 13, 27, 49, -56, 121, 53, -62, 63, -18, 26, -44, 117, 63, -35, 53, 43, -16, -49, -112, -82, 122, 10, -26, -56, 70, -42, -72, 126, 79, -95, 112, -45, 80, -76, 1, -19, -34, -36, -18, 80, -68, 57, 64, -104, -91, 97, -53, 97, 46, -4, -127, 47, -111, 93, -27, -39, 45, 99, -109, 32, 115, -40, 32, -128, -83, 98, -38, -124, 85, 45, 98, 115, 26, 44, -70]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-107, -28, -8, -61, 71, 8, -46, -9, -69, -16, 110, -117, -14, 125, 8, -22, -88, -12, 84, 96, -16, -89, 87, -122, 102, -77, 85, 82, -122, -80, -46, 69, 32, 115, -40, 32, -128, -83, 98, -38, -124, 85, 45, 98, 115, 26, 44, -70]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, -32, -52, -111, -18, -128, -85, 67, 72, 121, -34, -12, -113, -83, -8, -8, -62, 43, -25, 19, 68, 28, -126, -64, -105, -49, -54, 125, -60, -36, 15, 6, -67, -11, 64, 48, 110, 52, -109, 90, 29, -47, 95, 17, -14, 44, -64, -119, 119, 64, 14, 100, 36, -101, 120, -46, -103, 39, -112, 22, 119, 121, 125, -124, -64, -2, -23, -23, 12, -10, -93, -9, 117, 54, -80, 43, -95, 13, 14, 98, 6, 15, -97, -52, -6, -56, 61, -128, 107, -101, -92, -99, 44, -30, -63, 32, 32, 115, -40, 32, -128, -83, 98, -38, -124, 85, 45, 98, 115, 26, 44, -70]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey20);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[52, 30, 6, -71, 126, -34, 49, 18, -75, -13, 34, 123, 7, -104, 115, -77]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[77, 94, -59, -96, -14, 115, -109, 23, -77, -53, 52, 82, -75, -28, -4, 51]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-62, 93, -12, -4, 33, 69, 97, -84, 5, 122, -58, -82, -31, 78, -92, -18]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-20, -48, -86, -22, 126, 68, 110, -1, 40, 78, 14, -34, 17, -8, -87, -126, 95, -47, 50, 23, 65, -10, 53, 14, 85, -78, 118, -27, 22, 35, 74, 113, 31, -59, -24, 49, -38, -67, 33, -115, -5, 28, 36, -107, -13, 69, 16, 2, -22, 23, 22, 64, 12, -28, 28, 35, -78, -42, 49, 113, -107, 76, 110, 96, -46, -29, 76, 113, 87, 14, -88, -39, 38, 90, -24, 85, 111, -63, -66, 84, 64, 121, 76, 86, -50, 96, -34, -86, -57, 72, 96, -59, -75, 59, 124, 52, 77, 94, -59, -96, -14, 115, -109, 23, -77, -53, 52, 82, -75, -28, -4, 51]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-86, -74, -98, 124, 121, 79, 31, 33, -37, 118, -113, 124, -59, 47, -84, 59, -76, 46, 115, 100, -37, -10, -43, 106, 125, 87, -119, -45, -24, 51, -56, -14, 89, -84, 35, -111, -19, -42, 52, -93, -59, 109, 126, -68, 126, 68, -98, 91, 33, -3, -111, -114, -2, 103, 105, 72, -84, -67, -90, -108, -103, 33, 98, 115, -24, 94, -118, 102, -69, 121, 38, -70, 61, -71, 125, -59, -16, 45, 80, 78, -1, 47, -118, 82, 81, 82, 99, -90, 103, 53, 59, -69, 39, -12, 127, -44, 77, 94, -59, -96, -14, 115, -109, 23, -77, -53, 52, 82, -75, -28, -4, 51]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey66);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey66);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("17E0AC8083E38441C3D1C9CB1EA7D68F", secretKey66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey66);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[72, -81, -17, 36, -96, 117, -101, -73, 77, -34, 10, 69, 109, 53, -122, -46]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-65, 124, 0, -107, 8, 26, 38, 77, -57, -39, -82, 48, 61, -19, -119, 62]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-63, -14, 68, 126, -106, -88, -61, 54, -98, -67, 2, 47, -76, 77, 6, 35]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[107, 84, -37, 18, -72, -102, 123, -16, -71, -117, -19, 55, -105, 32, -91, 84]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[34, 102, -60, -91, 73, 48, -106, -44, -11, -30, 3, 27, -94, -28, 18, 99]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[98, -20, -114, 68, 122, -2, 57, 97, 17, 23, -80, -104, 99, 118, 58, -99]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[84, 121, 77, -94, -33, 126, -6, 61, 81, -115, 23, -50, 114, 89, -121, -92]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-45, 109, -2, 118, 108, -3, -123, -121, 59, -40, -105, 79, 63, 120, 30, -76]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[125, 126, -118, 123, -15, -55, -54, -128, -93, -36, 37, 3, -63, 11, -92, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-84, -62, 59, 82, -85, 58, 23, -94, 81, -97, -87, 56, 112, -79, 52, 18]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-121, -80, -111, 113, 125, -89, -44, 42, 116, 67, 38, -12, 109, 62, 31, -41]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[125, 126, -118, 123, -15, -55, -54, -128, -93, -36, 37, 3, -63, 11, -92, 1]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-121, -80, -111, 113, 125, -89, -44, 42, 116, 67, 38, -12, 109, 62, 31, -41]");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[36, 57, 94, -31, -110, 35, -22, 50, 30, -81, -122, -41, -7, 58, 13, -23]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-71, -32, 91, 8, -64, 1, -109, -48, 100, 55, 113, 86, -70, 40, -47, 110]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-71, -32, 91, 8, -64, 1, -109, -48, 100, 55, 113, 86, -70, 40, -47, 110]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-50, 39, -22, -105, 67, -43, -89, 113, 78, 21, 9, -45, -30, -98, -32, -35]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-71, -32, 91, 8, -64, 1, -109, -48, 100, 55, 113, 86, -70, 40, -47, 110]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-48, -15, 46, 55, -107, 117, 101, 98, 39, 57, -121, -25, -43, -98, -9, -6, -120, -41, -45, -68, 1, 98, -31, 43, 125, 1, 27, 45, -123, -60, -93, 120, 36, 57, 94, -31, -110, 35, -22, 50, 30, -81, -122, -41, -7, 58, 13, -23]");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        java.lang.Class<?> wildcardClass25 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[96, -5, 84, 36, -55, -92, -50, 8, 108, -27, 70, -33, 102, 124, 77, -17]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -50, -53, 13, 65, -13, -49, -78, 80, -71, -81, -48, -6, 83, -74, 32]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[13, -23, 7, 80, -80, -88, 107, -99, 5, -10, 97, 5, -102, -9, -1, -6]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-119, -125, -42, 45, -53, -97, -87, -119, -69, 43, 103, -95, -107, 54, -24, 108]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-118, 99, 71, 93, -63, 108, -102, 120, 50, -13, -77, -64, -40, 50, -44, -80, -79, -8, 84, 111, -111, -90, 112, -33, 86, 67, -57, -97, -31, -81, 53, -103, 13, -23, 7, 80, -80, -88, 107, -99, 5, -10, 97, 5, -102, -9, -1, -6]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8A63475DC16C9A7832F3B3C0D832D4B0B1F8546F91A670DF5643C79FE1AF35990DE90750B0A86B9D05F661059AF7FFFA" + "'", str23, "8A63475DC16C9A7832F3B3C0D832D4B0B1F8546F91A670DF5643C79FE1AF35990DE90750B0A86B9D05F661059AF7FFFA");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "8A63475DC16C9A7832F3B3C0D832D4B0B1F8546F91A670DF5643C79FE1AF35990DE90750B0A86B9D05F661059AF7FFFA" + "'", str24, "8A63475DC16C9A7832F3B3C0D832D4B0B1F8546F91A670DF5643C79FE1AF35990DE90750B0A86B9D05F661059AF7FFFA");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.Class<?> wildcardClass27 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-68, 125, -69, -113, -49, 40, -61, -17, 63, 102, 55, 38, 2, 88, 52, -26]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[7, 26, 34, -128, 83, 3, -101, -78, 67, 82, -99, -118, 3, 72, 37, 127]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-20, 114, 107, -68, -22, -1, -32, -119, 118, 90, -28, 105, -35, 52, -90, 67]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, -128, -108, -68, -49, -41, -75, 112, -25, 87, 30, 29, 23, -104, 2, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[4, -11, 26, -21, -28, 71, -61, -88, -117, -52, -6, -31, -89, -91, 4, 95, -85, -4, 82, -126, 22, -72, 57, -7, 121, 103, 94, -51, 64, 90, 109, 127, -20, 114, 107, -68, -22, -1, -32, -119, 118, 90, -28, 105, -35, 52, -90, 67]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0A2FB204EC222C2498A9A3E99BDE76987D8F516A693744E59F4478828F1CC4BD2E3C3D05D765239CEE1814A1B735A76D5678BC9FABDEB9B670B84F7B05A2DA97E1AF4F1B665CFAE6F1E44CC9C0B46D7D16756442100CA0C9C765900644A69238CA9073C81DD61D7C185DFF9B34277859677988D74A948858CA8457E7941DF86632A975F57CA6102544A30E5E563E503AAFE2ACC9A5C5B281EBECB535B8E52908F0536FEF94BB408FEA47E8FC8942BC1CB48BBCAD663DA674D6C79F5A9FA6163F7111B17573BA042F80E5C5067F7407181AE1446FCDAB18ACFA343FF6931222A7EC726BBCEAFFE089765AE469DD34A643" + "'", str25, "0A2FB204EC222C2498A9A3E99BDE76987D8F516A693744E59F4478828F1CC4BD2E3C3D05D765239CEE1814A1B735A76D5678BC9FABDEB9B670B84F7B05A2DA97E1AF4F1B665CFAE6F1E44CC9C0B46D7D16756442100CA0C9C765900644A69238CA9073C81DD61D7C185DFF9B34277859677988D74A948858CA8457E7941DF86632A975F57CA6102544A30E5E563E503AAFE2ACC9A5C5B281EBECB535B8E52908F0536FEF94BB408FEA47E8FC8942BC1CB48BBCAD663DA674D6C79F5A9FA6163F7111B17573BA042F80E5C5067F7407181AE1446FCDAB18ACFA343FF6931222A7EC726BBCEAFFE089765AE469DD34A643");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0A2FB204EC222C2498A9A3E99BDE76987D8F516A693744E59F4478828F1CC4BD2E3C3D05D765239CEE1814A1B735A76D5678BC9FABDEB9B670B84F7B05A2DA97E1AF4F1B665CFAE6F1E44CC9C0B46D7D16756442100CA0C9C765900644A69238CA9073C81DD61D7C185DFF9B34277859677988D74A948858CA8457E7941DF86632A975F57CA6102544A30E5E563E503AAFE2ACC9A5C5B281EBECB535B8E52908F0536FEF94BB408FEA47E8FC8942BC1CB48BBCAD663DA674D6C79F5A9FA6163F7111B17573BA042F80E5C5067F7407181AE1446FCDAB18ACFA343FF6931222A7EC726BBCEAFFE089765AE469DD34A643" + "'", str26, "0A2FB204EC222C2498A9A3E99BDE76987D8F516A693744E59F4478828F1CC4BD2E3C3D05D765239CEE1814A1B735A76D5678BC9FABDEB9B670B84F7B05A2DA97E1AF4F1B665CFAE6F1E44CC9C0B46D7D16756442100CA0C9C765900644A69238CA9073C81DD61D7C185DFF9B34277859677988D74A948858CA8457E7941DF86632A975F57CA6102544A30E5E563E503AAFE2ACC9A5C5B281EBECB535B8E52908F0536FEF94BB408FEA47E8FC8942BC1CB48BBCAD663DA674D6C79F5A9FA6163F7111B17573BA042F80E5C5067F7407181AE1446FCDAB18ACFA343FF6931222A7EC726BBCEAFFE089765AE469DD34A643");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey30);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[125, 2, 89, -20, -36, 37, 65, -44, 78, 105, -120, 58, 102, -10, -126, 78]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-60, -64, -27, 2, 66, -108, 52, -96, 10, 5, 118, 3, -2, 74, -49, -20]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-60, -64, -27, 2, 66, -108, 52, -96, 10, 5, 118, 3, -2, 74, -49, -20]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-86, -67, -124, -3, -76, -19, 93, -13, 3, -101, -98, -66, -32, -119, 94, -79]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-30, -113, -88, -89, -111, 50, -7, 86, -63, 126, 21, -86, 99, 92, 106, -107]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[86, 15, 111, -126, 104, 123, -87, 68, -53, 50, -96, -128, 98, 72, 105, 94]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-32, 6, 102, 5, 27, 106, -39, -23, -59, -23, 17, -77, -110, -46, -25, 11]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-75, 66, 110, 65, -15, 92, 67, -68, -16, 125, 115, 82, -93, 64, -47, -15]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[21, 4, -70, 0, 92, 7, -96, 103, 14, 34, -78, 26, -40, -79, 97, -24, -29, -87, -74, -99, -48, 44, -54, 121, -61, 45, -10, 33, 81, -68, -77, 28, -32, 6, 102, 5, 27, 106, -39, -23, -59, -23, 17, -77, -110, -46, -25, 11]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, -41, -87, -24, 74, -5, -92, 113, -101, 24, -110, 0, 116, -127, 21, -3, -19, -67, 46, -92, 77, -41, -111, 95, -4, 105, -5, -21, -101, -44, 124, 34, -32, 6, 102, 5, 27, 106, -39, -23, -59, -23, 17, -77, -110, -46, -25, 11]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey7);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[121, -57, -117, -28, -3, 122, 60, -54, 17, -93, 96, 65, 41, 103, 73, -115]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-61, 46, 94, -124, 41, 51, 27, -4, -124, -27, -14, 90, 50, -71, 26, 65]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-61, 46, 94, -124, 41, 51, 27, -4, -124, -27, -14, 90, 50, -71, 26, 65]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[118, 75, -27, -87, 34, -87, 36, 87, -126, -95, 100, 72, 49, -95, -38, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[121, -57, -117, -28, -3, 122, 60, -54, 17, -93, 96, 65, 41, 103, 73, -115]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[94, -1, -125, -124, -66, -50, -128, 81, 16, -10, -32, 69, 59, -75, 26, -122, 37, -108, 115, 2, -15, -92, -104, 117, -19, -43, -83, -82, -90, -119, 51, -105, -4, -38, -67, 9, 53, -18, -102, -109, -81, -86, -73, 40, -86, 1, 33, -10, -109, 41, -68, 22, 94, -66, 84, -16, -124, -123, 90, 117, -87, 66, 43, -85, -120, -6, -21, 104, -108, -83, 39, 124, 64, -27, -17, 82, 41, 88, -61, -5, -30, -28, 111, 109, 53, 14, -18, 97, 106, 42, 127, 93, -49, 29, -57, 65, 121, -57, -117, -28, -3, 122, 60, -54, 17, -93, 96, 65, 41, 103, 73, -115]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-66, 73, 1, -96, 49, -112, 98, -114, 99, 11, 95, -46, 91, -72, 12, 123]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[86, -77, 40, -106, -120, 57, -24, 44, 45, -31, -37, -68, -41, 68, -66, -8]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[38, -113, 85, -119, 72, 28, 35, 75, 94, -39, 16, -33, 82, -103, -63, -98, 40, 102, -28, -4, -26, -26, -70, -1, -35, 5, -28, -70, 93, 10, 70, 81, -66, 73, 1, -96, 49, -112, 98, -114, 99, 11, 95, -46, 91, -72, 12, 123]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[89, -110, -57, -39, -16, 98, -68, -74, 19, 117, 61, -102, 25, 39, -5, 44, -72, 113, -124, -112, -77, -93, 68, -103, -39, -70, 96, 77, -31, 7, 56, -63, -66, 73, 1, -96, 49, -112, 98, -114, 99, 11, 95, -46, 91, -72, 12, 123]");
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey32);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey32);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey32);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey65);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey65);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey65);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey65);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey65);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[78, 11, -100, 20, 23, 20, -66, 101, -39, 82, -39, -17, -54, -83, -70, -9]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-90, 76, 58, 14, 41, -44, 119, -64, -57, -53, 91, -123, 49, -39, -52, -72]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-60, 26, -64, 32, 23, 74, 19, 1, 55, -14, 47, 9, -41, 63, -70, 80]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[7, 12, -115, 5, -88, -110, -29, 123, 78, 11, 11, 20, 104, 89, 2, 77]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[31, -97, 29, 101, -72, 39, 90, -9, -106, -44, -128, 54, -58, -72, 52, 15]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[45, -34, -64, -103, -109, 82, -79, -33, 111, -112, 69, 89, 25, -127, 103, -20]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[45, -34, -64, -103, -109, 82, -79, -33, 111, -112, 69, 89, 25, -127, 103, -20]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[124, -65, -128, -118, -12, -7, -82, 110, -100, 3, 29, -58, 127, 12, 71, -115, 80, 79, -108, 78, 106, 117, 0, -79, 50, 63, 66, -13, 40, 126, -16, -36, 31, -97, 29, 101, -72, 39, 90, -9, -106, -44, -128, 54, -58, -72, 52, 15]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-50, 58, -49, 9, -101, -113, -68, 32, -113, -93, 53, 68, 102, -5, 126, 121, 45, 114, -24, -72, 16, -26, 30, 73, -55, 8, -51, 118, 88, -99, -116, 95, 31, -97, 29, 101, -72, 39, 90, -9, -106, -44, -128, 54, -58, -72, 52, 15]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[79, 37, 16, -64, 50, 93, -61, 125, 82, -74, 94, -86, 17, 113, 117, -46, -74, -20, -30, -44, -41, -78, 55, 115, 20, 94, -5, 6, 46, -43, -53, 0, 31, -97, 29, 101, -72, 39, 90, -9, -106, -44, -128, 54, -58, -72, 52, 15]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-124, -120, -16, 122, -26, 59, 83, 94, -19, 21, 84, 3, -21, 25, 74, -19, 111, -57, 33, 56, -72, -128, 49, -127, 99, 79, -88, 15, 64, -80, -119, 124, 10, -69, -34, 18, -69, 77, 48, -74, 78, 27, -8, 61, -7, 124, -118, 121, -77, -33, 65, 30, 117, -58, -93, -43, 105, 91, -20, 35, -36, 42, -85, 122, -27, -46, 19, -62, 115, 117, -82, -24, -87, -26, 120, 123, 52, 104, 25, 101, -126, 125, -75, 54, 76, -87, 63, 106, 125, 114, -107, 79, 70, -68, 39, -32, 31, -97, 29, 101, -72, 39, 90, -9, -106, -44, -128, 54, -58, -72, 52, 15]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[20, 103, 35, 97, 106, 99, -30, -76, -79, 37, 110, -25, 24, 71, -122, -68, 66, 1, -96, 67, -61, -20, 92, 89, -30, 1, -50, 35, 79, -100, -2, -105, 31, -97, 29, 101, -72, 39, 90, -9, -106, -44, -128, 54, -58, -72, 52, 15]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-58, -52, 93, -51, -28, -83, -63, 54, 42, -73, 35, 65, -115, 82, -19, 122]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[23, 101, -69, -33, 28, -24, 6, -27, -85, 83, -34, -57, -24, 79, 7, -31]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[23, -13, 87, -6, 101, -35, 48, -36, -113, 76, 16, -20, -120, -10, -11, -65]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[63, 62, -28, -61, 92, -113, 1, -118, 112, 61, 19, 26, 67, -19, -48, 81]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-45, 96, 96, 22, -107, -79, 86, 16, -31, 29, -123, 13, -89, -55, 72, -56, 116, -103, -81, -27, 78, -53, 69, 115, 41, -41, -88, -48, 4, -115, -112, 118, 23, -13, 87, -6, 101, -35, 48, -36, -113, 76, 16, -20, -120, -10, -11, -65]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[42, -68, 12, 50, -90, -111, -1, -65, -53, -100, 23, 24, 98, 55, -110, 99, 107, 42, -103, -90, 123, -36, -113, -47, 33, -69, -31, -22, 4, 84, 69, 94, 23, -13, 87, -6, 101, -35, 48, -36, -113, 76, 16, -20, -120, -10, -11, -65]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-117, 97, 24, -65, 66, 11, 3, 13, 27, -62, 86, -48, 44, 66, -27, 20, 109, 8, -79, -9, -87, -88, 2, -115, -104, 119, -5, -55, -86, 56, -110, 11, -35, -69, 100, -3, 52, 37, 8, -16, 20, 12, -23, -98, -97, 69, 101, 5, 42, -35, -35, 28, -106, 116, -55, 63, -66, 117, -124, 121, -96, -1, 112, 111, 27, -43, -40, 5, 14, -122, 55, 97, -37, 98, 102, 16, 93, -98, -22, 58, 124, -73, -75, 13, -44, 33, 120, -106, 91, 116, 74, 105, 115, -20, 91, 124, 23, -13, 87, -6, 101, -35, 48, -36, -113, 76, 16, -20, -120, -10, -11, -65]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[75, 30, -33, 123, 94, -69, 59, -36, -16, -104, 110, 42, -32, -124, 77, 17, 86, 92, -55, 13, -123, 19, -91, 65, -15, 98, -87, -81, -89, -20, -98, -12, 109, 8, 13, 100, -12, 52, -53, 86, 64, -111, -113, -54, -116, 58, -33, 39, -120, -13, 111, 105, -128, 76, 122, -27, 87, -103, 38, -104, -30, 28, -35, -126, 29, 8, 104, -125, 51, -77, -107, -123, -70, -107, 76, -94, 124, 36, 6, -119, 3, 115, 44, 29, 34, -52, 91, 95, -45, 110, 99, -103, -128, -74, 37, -93, 23, -13, 87, -6, 101, -35, 48, -36, -113, 76, 16, -20, -120, -10, -11, -65]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[25, -1, 117, -35, 7, -120, 81, 10, 40, -88, 57, 89, -19, 45, 56, 90, 92, -123, -108, 60, 34, 76, 21, 40, -15, 48, 98, -58, 77, -46, 52, 15, 23, -13, 87, -6, 101, -35, 48, -36, -113, 76, 16, -20, -120, -10, -11, -65]");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("F6441EF035CB44DF482D4076E2A2584A09FB6932E41E1A73AACC011A11D436CF6153ACC0BB45F9E81CD68A0E5BDE70C5E98B731602E244B9470D386A4098F20E0DA871E1E1E68188363224699C5B251F769207B9D3E7B513FBF246B3AB276CDE6EDB9EC603A754A6FDFF48C1723737A5", secretKey6);
        javax.crypto.SecretKey secretKey13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey13);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[103, -45, -86, -85, -81, 66, -61, 10, 108, 122, -50, 1, 4, -98, -11, 98]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-40, -87, 7, -91, 8, 110, -71, 104, 71, -128, 109, -4, 67, 121, 67, 81]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-4, 32, -45, 84, 59, -65, 14, -39, -48, 50, -102, -22, 76, -63, 20, 35, 69, 114, 125, 1, 123, -81, -33, -13, 10, -112, 121, -51, -101, 18, -53, 113, 103, -45, -86, -85, -81, 66, -61, 10, 108, 122, -50, 1, 4, -98, -11, 98]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-60, 44, 6, -23, 89, 85, -82, -39, -83, 25, -123, -50, -120, -30, -37, -15, 24, 86, -58, -83, 70, 93, 86, 111, -14, 4, 30, -57, -71, -96, -20, -105, 103, -45, -86, -85, -81, 66, -61, 10, 108, 122, -50, 1, 4, -98, -11, 98]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[121, 31, 38, -119, -1, 12, 40, -2, 51, 10, -81, -71, 70, 100, 5, 12, 108, -111, 48, -53, 93, 32, -108, 37, 109, 81, 119, -9, 110, -111, 100, 124, 103, -45, -86, -85, -81, 66, -61, 10, 108, 122, -50, 1, 4, -98, -11, 98]");
        org.junit.Assert.assertNotNull(byteArray12);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("13D66FE0096DC7013F3EB4E032E54A6475F10E1D9AF7B070C1659ACE164F46DEF42014DBAB5617B00571E3B7971D26F2", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey22);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[126, -72, 110, 92, -79, -28, 0, 76, -41, -58, 16, 4, 114, -106, 124, 106]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[70, 105, -40, -78, -119, -49, -75, 59, -126, -126, -17, 5, -85, -23, -71, 126]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-53, -59, -34, -86, 99, -27, 81, -5, -15, -18, 21, 77, -125, 89, 12, 99]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[91, -84, 66, -12, -67, 8, -113, 35, -82, -10, 5, 28, -39, 95, -83, -103, -62, 111, -21, 67, -21, 50, 93, -72, -92, -53, 41, -79, 72, -107, 98, -14, 126, -72, 110, 92, -79, -28, 0, 76, -41, -58, 16, 4, 114, -106, 124, 106]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "5BAC42F4BD088F23AEF6051CD95FAD99C26FEB43EB325DB8A4CB29B1489562F27EB86E5CB1E4004CD7C6100472967C6A" + "'", str9, "5BAC42F4BD088F23AEF6051CD95FAD99C26FEB43EB325DB8A4CB29B1489562F27EB86E5CB1E4004CD7C6100472967C6A");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "5BAC42F4BD088F23AEF6051CD95FAD99C26FEB43EB325DB8A4CB29B1489562F27EB86E5CB1E4004CD7C6100472967C6A" + "'", str10, "5BAC42F4BD088F23AEF6051CD95FAD99C26FEB43EB325DB8A4CB29B1489562F27EB86E5CB1E4004CD7C6100472967C6A");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "5BAC42F4BD088F23AEF6051CD95FAD99C26FEB43EB325DB8A4CB29B1489562F27EB86E5CB1E4004CD7C6100472967C6A" + "'", str11, "5BAC42F4BD088F23AEF6051CD95FAD99C26FEB43EB325DB8A4CB29B1489562F27EB86E5CB1E4004CD7C6100472967C6A");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[17, 43, 21, -101, 2, 91, 51, -98, 40, -123, -38, 77, 114, -25, -47, 66]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-116, -96, -124, 124, 32, 89, 53, -108, -49, -95, 101, -22, -120, 85, -36, -82]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[7, -126, 53, 54, 42, 96, -65, 31, -123, -11, -103, -4, 82, -4, -104, 69, -114, 121, 77, -30, 119, 115, 32, -122, 63, 74, -14, 43, -109, -37, -120, 98, 34, 96, -97, -74, -69, 45, 2, 56, 61, -38, 78, -56, -110, -103, -46, -7, -116, -126, -33, -107, 99, -67, -13, -87, 93, 20, -24, -82, -15, 44, -4, 7, -100, -44, 114, -14, -55, -2, 99, -67, 54, -10, -75, -50, -66, -47, 94, -36, -30, -123, -115, 113, -123, 42, 54, -11, -125, 43, 5, 125, 110, 87, -47, 30, 17, 43, 21, -101, 2, 91, 51, -98, 40, -123, -38, 77, 114, -25, -47, 66]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[123, -109, 121, 121, 98, -37, -55, 59, -11, 67, -24, 61, -18, 40, 35, 49]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[29, -121, 120, -39, 3, 113, -61, 40, 60, -39, 57, -108, -67, 65, 112, 120, 53, 93, -31, -104, 90, 56, 116, 3, -6, 108, -118, -64, -76, -33, -87, -30, -111, 61, -18, 99, 107, 78, 49, -49, -128, 56, 1, -41, -30, 14, 3, -29, -87, -43, -117, 25, -19, 112, 34, 89, -12, -45, 38, -40, -71, -51, -2, -68, 52, -123, -119, -29, 49, 123, 98, 2, 96, 91, 63, -67, 106, 71, -24, -3, 22, 75, -65, -62, -77, 14, -61, -69, -71, 71, -79, -29, -40, -95, 64, 41, 17, 43, 21, -101, 2, 91, 51, -98, 40, -123, -38, 77, 114, -25, -47, 66]");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey40);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey57);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey57);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey57);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c", secretKey57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey57);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-41, -37, 78, -100, 95, -7, 7, 78, 38, -74, 18, -8, 52, 112, -63, -26]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-21, 100, -51, -120, -38, -93, -14, -96, -105, -32, -93, -42, -109, -49, 8, -80]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[93, -36, 103, 125, -14, 17, -100, -27, 116, -29, -37, 67, 27, 63, -40, 49]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-27, -64, -11, -101, -126, -15, -95, -3, 6, 127, -108, -63, 50, -47, -35, 25]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-65, -102, -127, 69, 40, 51, -47, -27, 4, -114, -103, 9, -5, 29, -102, 106]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[124, -118, -78, 100, 59, -111, 78, 109, -25, -32, 22, 117, -94, -28, -33, 74]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[109, 101, 99, 86, -1, 35, -11, 109, -21, -100, -110, -92, 125, 57, 90, 40]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[98, -18, -128, 105, 4, 67, 57, 8, 113, -103, 46, -5, -25, 58, -52, 112]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[23, 41, 110, 7, 53, 90, 71, -116, -112, 22, 34, -127, 122, 44, -55, -49, -112, 63, 35, 86, -123, 23, 44, 75, -20, -22, -103, -96, 123, -108, 56, -84, 109, 101, 99, 86, -1, 35, -11, 109, -21, -100, -110, -92, 125, 57, 90, 40]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-24, -44, 65, 30, -112, 80, 12, -103, -23, -60, -109, -72, -68, -23, -6, 42, -22, -113, -115, -7, -45, -19, 60, -19, -26, -36, -64, -53, -7, -31, 53, -42, 109, 101, 99, 86, -1, 35, -11, 109, -21, -100, -110, -92, 125, 57, 90, 40]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-73, 104, 42, 61, 22, -50, 98, -46, -27, 105, -73, -108, -50, 100, -5, -92, 21, 10, 36, -127, -16, -31, -67, -79, -8, 30, 39, 78, 93, -126, 87, -112, -57, -64, -5, 40, -34, 40, -87, 63, 127, -89, 24, -78, -31, -91, 62, 99, -105, -80, 108, -3, 55, -125, 25, 26, 14, 1, -111, 57, 26, 73, -28, -16, 9, -77, -94, -110, 23, 94, -44, -2, -31, -91, -82, -50, 106, 14, -85, -52, -111, 86, -118, 24, -58, -22, -89, -12, -47, 42, -37, -92, 72, 16, -70, 4, 109, 101, 99, 86, -1, 35, -11, 109, -21, -100, -110, -92, 125, 57, 90, 40]");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-43, 57, 30, 3, -78, -90, -37, -55, 70, -79, 106, -41, -7, -118, 92, -28]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[35, 106, 22, 8, 54, -80, -79, 32, 105, 88, -88, -57, -126, 32, -125, -81]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[35, 106, 22, 8, 54, -80, -79, 32, 105, 88, -88, -57, -126, 32, -125, -81]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[95, -22, -102, -10, 17, 93, -111, 51, -29, -11, -120, -15, -111, -66, 114, -63]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-43, 57, 30, 3, -78, -90, -37, -55, 70, -79, 106, -41, -7, -118, 92, -28]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[113, 27, -74, -32, -23, -25, -9, -65, 3, 91, 1, 11, 53, 117, 125, 68, -26, 86, -38, 73, -119, 4, 72, -23, -10, 99, 69, -36, 8, 37, 126, -101, 117, -12, -54, 122, -104, -8, -108, -117, 30, 121, -13, -87, 126, -34, 49, 50, 126, -23, -78, -121, -45, 15, 85, 106, 5, -31, -24, -23, -7, 64, 86, -23, -15, -50, 17, -116, -50, -67, -47, -56, -76, 2, 118, -102, -66, -11, -28, -107, -101, 89, 18, 32, 118, -2, 123, 25, 123, 25, 120, 79, 109, 20, -76, 110, -43, 57, 30, 3, -78, -90, -37, -55, 70, -79, 106, -41, -7, -118, 92, -28]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[97, -56, 107, 74, -54, 55, -80, 120, -54, -118, 70, 17, -104, 84, 104, -128, -69, 110, -28, -67, 31, 109, 0, -28, -72, -114, -89, 110, 91, 39, 44, -37, 6, 102, 107, -27, -56, -14, 22, -128, 59, -92, -119, -117, 105, 110, 122, 127, -108, 55, 38, 78, -21, -83, -86, 34, 72, -1, -122, -12, -124, 18, -86, 7, 123, -106, -51, 63, -86, -26, 4, -113, -30, 114, 55, -78, 32, 102, 109, 39]");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey20);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD016B569A2999509F59EE7F094987DD", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-103, -37, -56, 44, -38, 75, 17, 19, 102, 97, 19, 85, -119, -108, -60, 107]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[31, 77, -90, 97, -37, 120, -67, -24, -52, -86, 96, -18, 51, -55, 127, 114]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[58, -26, -124, -26, -4, 68, -107, 85, 40, 10, -54, 88, 99, -50, -33, 33]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[2, -21, -53, 22, 12, -58, 43, -81, -84, -99, -62, 116, 103, 112, -79, -77]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-59, 41, 76, 90, 19, 99, -64, 81, 7, 47, -111, 39, -43, -58, -94, 9, -91, -12, -58, -66, 59, -5, 70, -87, -27, -9, -78, 47, 33, 59, -9, 79, 58, -26, -124, -26, -4, 68, -107, 85, 40, 10, -54, 88, 99, -50, -33, 33]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-19, 117, -20, -37, 120, -83, -40, -10, -9, 102, 51, 43, -24, 9, 100, 84, -57, 37, -87, -98, 112, 47, 10, 100, 41, 31, -70, 17, 94, 0, 2, -21, 58, -26, -124, -26, -4, 68, -107, 85, 40, 10, -54, 88, 99, -50, -33, 33]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-98, -42, 23, 80, -40, 74, -18, -4, -35, 9, 45, -117, 103, 36, -93, 39, 122, 89, 20, -99, -99, -4, 117, -4, -111, -82, -126, 123, -16, 54, -101, 56, 56, 34, -8, -106, 111, -23, -18, 110, -52, -103, -101, -59, -69, -10, -47, 88, 60, -21, 126, -93, 7, -127, -128, -108, -125, -56, -29, 103, -119, -24, 93, -64, -29, -102, -17, 57, 14, 6, 102, -84, 24, -52, -8, 2, 51, 47, 25, -114, -89, -57, -20, 82, -59, -76, -53, 69, 77, 58, 33, -26, 76, -59, 117, -107, 58, -26, -124, -26, -4, 68, -107, 85, 40, 10, -54, 88, 99, -50, -33, 33]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-97, -107, -123, 47, -51, 31, -97, -10, 127, 46, -113, -76, 81, -13, -68, 116, -109, -103, -29, 127, -99, -83, 101, 13, -90, -103, 121, -34, 67, 39, -63, -112, 58, -26, -124, -26, -4, 68, -107, 85, 40, 10, -54, 88, 99, -50, -33, 33]");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[86, -68, 88, 74, -13, -123, 70, -25, 106, 63, 89, 10, 24, -96, 83, -121]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[63, -82, 69, -115, 38, 75, 95, -56, -28, 78, 95, -37, 122, 98, -23, 93]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[63, -82, 69, -115, 38, 75, 95, -56, -28, 78, 95, -37, 122, 98, -23, 93]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[125, -22, -20, 46, -108, -85, 105, -43, 8, 28, -115, 72, -122, -60, 16, 98]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[63, -82, 69, -115, 38, 75, 95, -56, -28, 78, 95, -37, 122, 98, -23, 93]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[79, 113, 38, 107, -84, 59, -80, 76, -100, 81, -28, 44, -59, -58, -51, 102, 43, 118, -6, -23, -127, 93, -69, -122, 89, 81, -120, -25, 16, -78, -24, -87, 86, -68, 88, 74, -13, -123, 70, -25, 106, 63, 89, 10, 24, -96, 83, -121]");
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey2);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey24);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[126, 11, -50, 16, -27, 124, 30, 62, -46, -77, -113, -118, 65, -72, -42, 69, 70, -94, -60, -123, -19, 75, 4, -127, -49, -34, 37, 123, 67, -120, -114, -29, -126, 6, -126, -66, -42, -38, 9, -62, 126, 32, -70, -7, -121, -118, 84, 36, -47, 91, -86, -36, 104, -75, 81, 58, -103, 31, 6, 88, 41, -90, 58, -23, -80, 41, 108, -116, -92, 81, -65, -10, -72, -89, -8, 114, 53, 41, -34, 53, 20, 53, 125, -79, -104, -15, -84, 31, 68, -83, 41, 61, 122, 15, -122, -95, 118, 24, 97, -21, 123, -85, -6, 94, 34, 83, 84, 21, -109, -64, 93, -78]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[60, 38, -19, -90, 84, 20, -30, -84, -103, 56, 84, -47, 75, 109, 39, -102, 61, -43, 92, -79, -31, 54, -22, 6, -92, -78, -19, 7, -108, 82, 104, -118, 118, 24, 97, -21, 123, -85, -6, 94, 34, 83, 84, 21, -109, -64, 93, -78]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[86, -84, -125, 55, -114, -72, 98, -120, 5, -100, -103, -59, 80, 69, 21, -4]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, 4, -70, 42, -118, -51, -80, 70, 117, -65, -119, -74, 58, 68, 69, -54]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[41, -102, -127, 20, -61, 92, -61, 101, 82, 7, -1, 42, -58, -112, 105, -47]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[119, 48, 100, 104, 74, 126, -38, -23, -62, -21, 86, 109, 16, 115, 41, -54]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[125, 36, -77, 96, -50, 9, -12, 107, -23, -9, -29, -81, 45, 116, -127, -6, 97, 85, 51, 74, 120, -116, 9, -63, -71, -5, 105, 121, -62, -47, -84, -14, 41, -102, -127, 20, -61, 92, -61, 101, 82, 7, -1, 42, -58, -112, 105, -47]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[32, -70, 2, -39, -4, 39, -33, -28, -68, -31, -73, -72, 58, 62, -13, 82, -59, -87, 26, -27, -126, 58, 101, -57, 109, 108, 56, 9, -6, -70, -4, -27, -71, 17, -44, 27, 26, -114, -122, 68, 39, 67, 80, 28, -81, -44, -39, -39, -41, -17, 97, -67, -39, -72, -119, -105, 1, -64, -2, 85, -31, -60, -101, -5, 119, -50, -22, 115, -81, -97, -10, 115, -30, 22, -7, 92, -15, 93, -27, -13, -88, 127, 7, -52, -29, -35, -5, 106, -80, 27, -88, 106, -37, 29, -18, 0, 41, -102, -127, 20, -61, 92, -61, 101, 82, 7, -1, 42, -58, -112, 105, -47]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[69, -60, 43, -121, 76, -18, 28, -56, -95, 108, -54, -47, 87, 78, 96, -19, -119, -116, 43, -119, 6, 84, -84, 109, -106, 74, -102, -87, -21, -57, 59, 76, 41, -102, -127, 20, -61, 92, -61, 101, 82, 7, -1, 42, -58, -112, 105, -47]");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey6);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey33);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[73, -76, -83, 4, 90, -98, 83, 38, -111, 115, -15, -20, -4, -93, 10, 98]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[11, 90, -101, -108, -36, -102, -81, 95, 107, -37, 94, 122, 30, 16, -92, -20]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-61, -99, -111, 1, 127, 110, 94, 101, -76, 106, 2, 109, 57, -61, -18, 116]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-28, -10, 53, 19, 112, 26, 84, 5, 24, -13, -87, -12, -110, 125, 42, 58, -95, 97, 28, -70, -104, 7, -107, 59, -116, 84, 80, 30, 14, -10, 123, 66, 73, -76, -83, 4, 90, -98, 83, 38, -111, 115, -15, -20, -4, -93, 10, 98]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[3, 52, -16, -72, -16, -21, 20, -123, 67, -106, -71, -43, -60, -86, -75, -90, 60, 103, -120, -67, 29, -85, 41, 14, 126, 92, 55, -50, -128, 57, 98, 102, 115, 31, -58, -47, -85, -84, 52, -28, 49, -117, -35, -92, -57, 123, -57, 84, -125, -48, 76, -1, -68, 87, -97, 110, -95, -70, 35, 108, 22, -48, 87, 41, -9, -113, 89, -13, 8, 110, -46, -43, 98, 34, 10, -120, 102, 85, 24, -91, -101, -128, -33, -98, -18, 112, -40, 123, 22, 64, -104, -119, -111, -78, 64, 113, 73, -76, -83, 4, 90, -98, 83, 38, -111, 115, -15, -20, -4, -93, 10, 98]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-90, 63, -114, -80, 4, -124, 96, -49, 34, 88, -26, -94, 4, 29, -108, -110, -47, -30, 98, -21, -96, -66, 99, -23, -4, 46, -23, 20, -105, -25, 97, 81, -73, -117, 76, 17, -46, 114, -94, 59, 24, 13, 39, 121, -66, -4, -97, 74, 60, 100, 116, 104, -92, -58, -105, 2, 15, -103, 82, 74, 71, -14, -22, -15, 22, 21, 57, 69, 47, 21, 50, 119, -10, -1, -103, 36, -104, 107, -10, 31, -103, -60, 15, -46, 121, -37, -99, -71, 32, -28, -54, 24, -85, -37, 51, -41, 73, -76, -83, 4, 90, -98, 83, 38, -111, 115, -15, -20, -4, -93, 10, 98]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[109, -6, 95, -109, 19, -78, -1, 109, -79, 19, -66, 58, 76, 111, -47, -119]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[12, -9, 87, -73, 106, -124, 51, -71, 30, -116, 1, 54, -42, -69, 77, -28]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-91, 11, -13, -118, 50, -4, -113, 112, -105, -62, -126, -65, -46, -114, -16, -116]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-124, 104, -52, 47, -94, 28, 30, 15, 6, -97, -18, 96, 52, 37, 123, 86]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[66, 29, 7, 102, -1, 110, 0, -32, -119, 74, -5, 115, -1, -93, 82, -47, 79, 5, -41, 66, -111, -102, -59, -18, 30, 53, 17, 24, 1, -94, -72, 123, -91, 11, -13, -118, 50, -4, -113, 112, -105, -62, -126, -65, -46, -114, -16, -116]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[58, -123, -53, 103, -80, 126, -14, -124, -46, 37, -63, 30, 106, -32, 78, -94, 106, 108, -27, 80, 55, -90, 104, -112, -16, 115, -107, -26, -77, 117, 124, 0, -91, 11, -13, -118, 50, -4, -113, 112, -105, -62, -126, -65, -46, -114, -16, -116]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[96, 22, -10, -72, -113, -100, -74, 73, -51, -40, -125, 47, 29, -7, 85, 79, -86, 105, -86, 73, 31, -58, -86, 20, -57, 70, 120, 125, 40, 96, -90, -30, 19, 28, 119, -94, 82, 63, -103, -42, 39, 50, -38, -65, 77, 1, -71, 6, 56, 125, -118, -102, -117, 57, 122, -74, 83, 93, -33, 82, 97, 79, 7, 12, 27, 118, -94, -10, 25, 4, -96, 61, -8, -39, 47, 72, -9, -50, -95, 96, 105, -113, 118, 84, -94, -77, -41, -103, 40, 101, 58, -64, -99, 114, 16, -65, -91, 11, -13, -118, 50, -4, -113, 112, -105, -62, -126, -65, -46, -114, -16, -116]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[58, -123, -53, 103, -80, 126, -14, -124, -46, 37, -63, 30, 106, -32, 78, -94, 106, 108, -27, 80, 55, -90, 104, -112, -16, 115, -107, -26, -77, 117, 124, 0, -91, 11, -13, -118, 50, -4, -113, 112, -105, -62, -126, -65, -46, -114, -16, -116]");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("1DAAFB903B39AC426EE0EBBB5B8EA339FF6DE65AD6895DB32CDB9E9DC9B2A8DE1A0110CDE63EFA1B4628E19E64B932D2F86ADAD3C92E58420AD7019B8C6799C534B6ADC977BF960688E8D2B071F966E620AC291198850B13E49230BCEA6D76BF0DD2E53B33347CA9E25655AA95C48399", secretKey23);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey54);
        byte[] byteArray60 = new byte[] {};
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey62);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey76);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey76);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey76);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey76);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey76);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E07B4BC03CA77CE3B6B1690E9A4B53D1B86B5C5D0EA675A64737A8CF5E3739F7E134859685CD93A14D0ECC62208C220", secretKey76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey76);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[18, 51, 50, 64, -26, -51, 2, -5, -55, -94, -113, 45, -86, 82, 25, 58]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-17, 84, -85, 55, -105, -3, 80, -57, 57, -70, 117, 78, -11, 48, 47, -40]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[7, 85, -77, 13, -82, 127, -77, -26, -49, 16, -36, 47, -12, -53, 41, -24]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-7, -62, -110, -74, 116, 85, -22, -52, -79, 106, -86, -77, 95, 94, -119, -107]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-80, 26, 53, -51, -93, 4, 119, 104, 114, 46, 65, -27, -56, -18, -110, -43, -27, -85, 105, 99, -98, -113, 81, -20, -76, -14, -4, -48, 123, -49, 19, -6, 7, 85, -77, 13, -82, 127, -77, -26, -49, 16, -36, 47, -12, -53, 41, -24]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[87, 49, 61, -109, -99, 96, -8, 115, -58, -42, 0, -49, 33, -109, 105, -108, 38, -36, -14, 13, 61, 40, -48, -23, 99, -33, -34, 100, 100, 67, -12, 33, 7, 85, -77, 13, -82, 127, -77, -26, -49, 16, -36, 47, -12, -53, 41, -24]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[16, 4, 93, 53, -112, 103, -84, -128, 62, 8, 70, 41, 19, 36, -37, 120, -22, -33, -67, 28, 95, -74, -26, 104, 4, -98, 55, 120, 84, 9, -49, 49, -31, -115, -90, 79, -7, 13, 6, 77, -57, -12, 24, 125, 20, 117, 11, 100, 63, 82, 89, 116, 81, 43, -119, -37, -45, 55, 9, -120, -66, -78, 46, 17, 58, 25, 42, -88, -4, 44, 77, -98, -95, 89, -78, 70, -33, -79, -115, -80, 59, -18, -89, -92, 90, -28, 73, 47, -99, 25, -55, 98, 79, -111, 120, 62, 7, 85, -77, 13, -82, 127, -77, -26, -49, 16, -36, 47, -12, -53, 41, -24]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-76, -118, 36, -121, 102, 55, -69, 14, 111, 28, 85, 78, -29, 60, 44, -76, 52, -41, 44, 83, -65, -93, -6, 70, -17, 115, -6, -33, -35, -44, -9, 20, 7, 85, -77, 13, -82, 127, -77, -26, -49, 16, -36, 47, -12, -53, 41, -24]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-39, -55, 100, 9, 126, -4, 90, -58, 61, 64, 89, -125, 79, 127, -59, -121, 33, -104, -113, 6, 20, 29, -59, 84, -86, 86, -7, -22, -57, -5, -114, 103, 5, -47, -23, -17, -100, -87, -7, -108, -119, 100, -105, -81, 66, 27, -30, -110, -118, -32, -26, 6, 33, 50, 121, 105, 92, -77, 85, 72, 105, 85, -45, 72, 8, -25, -88, 26, 8, -82, 83, -35, 41, 91, 98, -5, 50, 127, 50, -102, -128, -22, 100, 58, 69, -119, -34, 21, 81, 45, -87, -63, 93, -90, -45, 71, 7, 85, -77, 13, -82, 127, -77, -26, -49, 16, -36, 47, -12, -53, 41, -24]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[94, 78, -111, -64, 118, -26, 82, 119, 5, -50, -67, -10, -20, -51, 25, -128]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[71, -24, 104, -31, 120, -29, 76, 127, -101, -66, -10, -124, -91, 20, -111, -47]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-91, -3, -106, -66, 17, -45, 85, 57, -107, 122, 34, 7, -67, 113, -125, 29]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[28, -105, 17, 91, 120, -124, -120, -67, 24, -56, -2, 82, 122, -52, 75, -22]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-7, -66, -73, 56, 41, 99, 61, -125, -41, -29, 14, -116, -43, 116, -92, -18]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[62, -127, 72, -119, 13, -110, 89, -118, 50, 26, 68, -35, -25, -29, 30, -49]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-65, -55, 29, -17, 55, -114, -37, 94, -20, -72, 78, 94, -119, -116, -122, -66]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-108, 79, -37, 51, -106, 86, -11, -45, 85, -31, -6, -14, -69, 93, -40, 113]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-71, 92, -128, 15, -126, 68, 72, 121, 23, -86, -103, -52, 28, -67, 124, -5, 72, 122, -105, 6, 87, -87, -104, -117, 58, 67, 98, 37, 98, 112, 30, 40, -65, -55, 29, -17, 55, -114, -37, 94, -20, -72, 78, 94, -119, -116, -122, -66]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-44, 73, 105, 35, -91, -119, 23, 81, 52, 108, -90, 37, -11, 10, 24, 70, -53, 47, -32, 31, 89, 37, -86, -25, 93, 122, 64, 52, 38, 75, -37, -102, -65, -55, 29, -17, 55, -114, -37, 94, -20, -72, 78, 94, -119, -116, -122, -66]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[87, -55, 22, 49, -58, 63, -94, -26, 71, -48, 99, 5, 74, -43, 39, -80, 112, -123, -89, -30, 101, -63, 76, 0, 105, 33, 111, 75, -33, -66, 8, 40, -65, -55, 29, -17, 55, -114, -37, 94, -20, -72, 78, 94, -119, -116, -122, -66]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-40, 115, 115, 66, 54, -81, -110, 17, -81, -76, 52, 81, -48, -90, -13, 34, 87, -47, -101, 6, 39, 10, 94, 52, -106, 111, -57, -66, 127, 12, 55, -22, 18, -15, -80, -11, -38, 120, 7, 16, -22, -35, 94, -58, 39, 124, 102, 82, 105, -76, 48, 91, -13, 23, 31, -18, 100, -124, -74, 61, -43, 54, -17, -43, -58, 26, 57, 88, 122, 47, -80, -27, -69, 13, 17, -72, 50, 0, 27, 47, 26, 68, 0, 37, -122, 25, -4, -45, 97, 81, -68, 47, -74, -10, -32, 26, -65, -55, 29, -17, 55, -114, -37, 94, -20, -72, 78, 94, -119, -116, -122, -66]");
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("60776C49AD5DF687B0C31C9B3F6A1ABA", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey43);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey64);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey64);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey73);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-24, -80, -93, 111, 109, -27, -19, -107, 56, 17, 102, 67, 124, 55, -74, 70]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, -66, 103, -91, -91, -49, 18, 77, 35, -41, -5, -51, -7, -63, 111, 2]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[84, -54, -45, -1, -104, 50, -10, -7, -118, 65, -18, 17, -41, 76, -43, 37]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[52, 64, 63, 54, 64, -126, -49, -112, -22, -52, -65, -127, 18, 107, -76, -81]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-3, -76, -73, 35, -10, 22, -73, -113, -124, -94, -93, -101, -84, -117, 67, -117, -8, 33, 68, -69, -100, 89, 99, -95, 104, -90, -51, 82, -13, -67, -85, -53, 84, -54, -45, -1, -104, 50, -10, -7, -118, 65, -18, 17, -41, 76, -43, 37]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[106, -43, -103, 103, 91, 16, 74, 100, 94, 105, 77, 105, 26, -106, -11, -64, -42, 15, -123, 35, 27, -76, 126, -70, -102, -87, 109, 44, -102, 76, 39, 88, 84, -54, -45, -1, -104, 50, -10, -7, -118, 65, -18, 17, -41, 76, -43, 37]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[112, 39, -66, -51, -106, 109, -12, -2, 42, 91, 98, -27, -12, -102, -58, 72, 41, 73, 88, -9, -93, 1, 31, -111, 64, 66, 105, -17, -51, 100, -98, -20, -61, 63, -37, 99, -83, -43, -21, 50, 115, -62, 3, -87, -24, 41, -103, 113, -48, 84, -24, -113, 27, 117, 83, -6, 123, -93, 11, 91, 92, 105, 3, -121, -83, -102, 43, -5, 73, -7, 66, 68, -17, -19, -35, 50, -92, -36, -14, 50, 122, 101, -6, 109, -84, -117, 78, 7, 66, -23, 83, 67, -95, -19, 72, -18, 84, -54, -45, -1, -104, 50, -10, -7, -118, 65, -18, 17, -41, 76, -43, 37]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[93, 51, 54, -1, -38, -68, 68, 46, 77, 96, 66, -15, -50, -27, -118, 116, 70, -89, -28, 2, 101, 2, 52, 34, 104, 61, 113, 13, 6, -16, 39, -113, 87, -12, -119, 70, 69, 26, -102, 23, 69, -91, 64, 33, -109, -49, -60, 90, 104, -89, 5, 75, 54, -9, 45, 64, 66, 34, 56, 43, 58, 103, 69, 73, 117, -92, 114, 109, 96, 118, 70, -111, -85, 70, 47, -78, 11, -48, 44, 120, -22, 125, -87, -19, 112, -38, 80, 32, 59, 0, 52, -50, 64, 122, -60, -84, 84, -54, -45, -1, -104, 50, -10, -7, -118, 65, -18, 17, -41, 76, -43, 37]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[106, -110, -103, 50, 114, 19, 18, 55, -54, -78, 47, -115, -59, 98, 110, 86, -74, 100, 8, 55, 41, -118, 82, 58, 30, 105, -47, 80, 2, 55, -126, 5, 84, -54, -45, -1, -104, 50, -10, -7, -118, 65, -18, 17, -41, 76, -43, 37]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[84, -54, -45, -1, -104, 50, -10, -7, -118, 65, -18, 17, -41, 76, -43, 37]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[81, -107, -115, 91, -118, 53, -21, -47, 114, 19, -74, -69, 10, -38, -25, -86]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-83, 106, 98, -104, 73, -97, -118, 23, -77, 82, -67, 36, 2, 71, 112, -64]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-26, -38, 103, -89, 54, 79, -55, 6, 122, -19, 27, -68, -25, -69, 93, -17]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[93, -79, -112, 52, -97, -41, -46, 44, -16, 100, 14, -53, -15, 26, 120, 54]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-71, -91, -106, -69, 23, 76, 63, -118, -119, 81, 8, -60, -27, -16, 33, -53]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[39, 91, 29, 29, -93, 1, 2, -24, -97, -92, -63, -117, 80, 39, -94, 97, 85, 106, 73, 11, 76, 5, 51, -73, 81, -120, 34, 118, -73, 100, -127, 37, 93, -79, -112, 52, -97, -41, -46, 44, -16, 100, 14, -53, -15, 26, 120, 54]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-90, 71, -71, 15, 9, 58, -10, -22, -43, -72, 79, 55, -55, -72, 75, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[42, 112, -65, 12, -109, -22, 34, 127, 38, 116, 40, -51, -126, -113, 31, 40]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-101, -72, -98, -54, -51, 98, 4, -87, 0, 119, -126, -84, 82, -28, 123, -55]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[76, 103, -102, -80, 2, -22, 5, -12, -121, -62, 68, -26, 20, 95, 125, -34]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-61, -71, 86, -36, -107, -109, 27, -118, -42, 50, -68, 73, 18, -110, -57, -60]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-101, -72, -98, -54, -51, 98, 4, -87, 0, 119, -126, -84, 82, -28, 123, -55]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9BB89ECACD6204A9007782AC52E47BC9" + "'", str9, "9BB89ECACD6204A9007782AC52E47BC9");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-84, 54, -34, -35, -22, 60, 0, 87, 62, -49, -95, -106, 52, -13, -122, 116]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 74, 76, 10, -104, -65, 71, 66, -38, 108, -124, 127, 0, 58, 86, -35]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[12, 96, 109, -98, -114, 75, -88, 40, 47, 8, -68, 30, -97, -43, 101, 43]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-83, 118, -40, 25, 73, 79, 2, -94, 60, 43, 79, 84, 66, -118, -93, 99]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[69, 44, -18, 65, -81, 109, 26, 28, 54, 113, -51, 13, -2, 67, 115, -45, -22, 42, 126, -2, 126, 53, 0, 127, 69, 8, 46, 63, -13, 24, 2, 93, 12, 96, 109, -98, -114, 75, -88, 40, 47, 8, -68, 30, -97, -43, 101, 43]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-58, -69, -89, -67, -29, -69, -24, 75, -69, 30, 63, -91, 87, 15, 55, 30, -8, -58, 90, -44, -63, -91, 80, 56, 114, 4, 122, 99, 96, 65, 103, 95, 12, 96, 109, -98, -114, 75, -88, 40, 47, 8, -68, 30, -97, -43, 101, 43]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-106, 29, -16, 108, 85, -119, -71, -24, 63, -67, 99, 22, -41, 14, -37, -54, 7, -116, -98, -30, -73, 89, -50, -92, 101, -57, 26, 92, 86, -98, 81, -73, -36, -65, 56, -14, 93, -75, -96, 7, 86, -51, -36, -111, 2, -121, -50, 49, 84, -67, -99, -81, -26, -36, 8, 81, -59, 42, 61, 18, 78, -116, 15, -19, -108, 27, 48, 125, -4, -14, -106, -80, 93, 63, 84, -95, -25, 112, 63, -59, 3, 82, 13, -44, 10, 127, 50, 16, -104, 14, 24, 66, 31, 31, -97, 43, 12, 96, 109, -98, -114, 75, -88, 40, 47, 8, -68, 30, -97, -43, 101, 43]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-75, -4, -34, -32, -70, 17, 31, -23, -125, 120, -41, 120, 122, -69, -65, 84, -45, 52, -94, -79, 74, 84, 41, -119, 91, 122, 83, 59, 99, 111, -2, -93, 113, -49, 48, -34, 92, -78, 70, 94, 111, 105, -41, 70, -81, -87, 43, -85, -115, -33, -54, -63, -115, 19, -21, 31, -111, -92, 31, -71, -10, 0, 122, -66, 53, -106, -33, 100, -1, -15, -86, -14, 80, -29, -67, 0, -35, -75, 26, 34, 20, -95, 91, -56, 57, -21, -61, 109, 80, 90, -24, -23, 88, 76, 32, -95, 12, 96, 109, -98, -114, 75, -88, 40, 47, 8, -68, 30, -97, -43, 101, 43]");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey6);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey21);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[121, -120, 57, 123, 11, 124, -60, -60, -33, 13, -101, -108, -5, 87, -103, 49]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-87, 78, 49, -58, 37, -105, -40, 112, -50, 126, -97, -99, 7, 13, 20, 19]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-87, 78, 49, -58, 37, -105, -40, 112, -50, 126, -97, -99, 7, 13, 20, 19]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, -87, 121, 110, 8, -11, -7, 47, -104, 45, 25, 118, 81, 74, -4, -60]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[91, 60, 119, -64, -113, -60, 84, -48, 15, -7, -18, -47, -60, 59, 105, -5, -96, 116, 26, -122, -107, -54, -33, -7, 108, -84, -94, -24, -23, 110, 2, -123, 121, -120, 57, 123, 11, 124, -60, -60, -33, 13, -101, -108, -5, 87, -103, 49]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[125, 74, 55, -114, -126, 29, 94, -33, -44, 0, -63, -5, 34, -66, 44, -78, -126, -33, 88, 86, -122, -108, 0, 24, -19, 97, 93, -45, -59, -114, 36, 101, -103, 120, -115, -71, -70, -121, 32, -87, 76, 110, 47, -26, 32, 22, -60, -58, 59, 28, 31, -81, 76, 67, -40, -67, 57, -11, 6, -57, 92, 42, -12, -89, -26, 54, -57, 51, 109, -23, 98, 69, 32, -85, -125, 127, 43, -41, -18, 86, 13, -91, -79, 123, -10, 97, 63, 40, 47, 105, 120, 38, 118, 109, 93, -33, 121, -120, 57, 123, 11, 124, -60, -60, -33, 13, -101, -108, -5, 87, -103, 49]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-115, -65, -1, 31, -25, 56, -73, 73, -85, -50, 27, 81, -44, 89, -19, 50]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-22, 20, 60, -33, 3, 113, -52, 104, 16, 13, -6, 85, 116, 119, 2, 37]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 74, 16, 102, 109, 8, -79, -7, 78, -31, -15, -47, -88, 84, -58, -17, -39, 94, -128, -67, -82, 13, -45, 33, 2, 120, -34, -40, 45, 3, 85, -103, -84, -52, -87, 116, 77, -127, 23, 75, 115, -13, -100, -82, 125, 116, -126, -25, 45, -32, 68, -22, 108, -99, 117, 58, -116, 105, 68, 114, -117, 11, -74, 87, 43, -6, 37, -106, 92, 77, -5, -84, 92, 30, 126, 58, 31, -58, 107, -47, 28, 27, 1, -121, 44, 7, -3, -100, -16, -6, -110, 68, -82, -36, 121, -27, -115, -65, -1, 31, -25, 56, -73, 73, -85, -50, 27, 81, -44, 89, -19, 50]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[73, 111, 32, -53, -46, 122, -24, 40, -74, -36, -46, 95, 19, -75, -44, 103, 113, 58, -91, -68, -43, -31, -54, 5, 91, 79, -43, 58, -7, 29, 87, 70, -115, -65, -1, 31, -25, 56, -73, 73, -85, -50, 27, 81, -44, 89, -19, 50]");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey7);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        byte[] byteArray50 = new byte[] {};
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey52);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey56);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey56);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey67);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey67);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey67);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey67);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7FA568134806C9105C34D583C29871A41AE5CE04D352F794BBBC55C17CC3D7B2E48B2428828EE039A91A06CFBF22DBA03F23A99544AD69867843E16A8BBCB065F997601695DCE4DA9232998E7CFA9275FD14E9B5BE58653BB989CC8C93C323B9A2602029745C486376259619FE42C1DC969C5F23218132538C69A93E2C46029CAFBCB3A325C55A351897A58F95136EEE2494FA973744222FA873EEAD1E15360A868A656A3C665D51EC62012BA7C41A8A5BF8AD314E65E180BA4087E8D6B89D6623982F2B436A6758077463A37F0FFC47E55DE5DFB67D8B3F67F9F6BD7C9678E01B5950A89DB569E40DEBF8146983CC8", secretKey67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey67);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-86, -76, -89, 84, -18, -70, -81, 40, 89, 49, -24, -18, -104, 69, 3, 126]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-96, 107, 113, 6, -9, 69, -108, -100, -90, 9, -53, -109, -112, -53, 97, -56]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-96, 107, 113, 6, -9, 69, -108, -100, -90, 9, -53, -109, -112, -53, 97, -56]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[23, -117, -107, -20, -96, 84, 100, -73, 23, 60, -83, -113, 48, -17, -12, -4]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-96, 107, 113, 6, -9, 69, -108, -100, -90, 9, -53, -109, -112, -53, 97, -56]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[34, 66, 20, 23, 86, 102, -93, -95, 51, -86, 50, -99, -66, -1, 80, -59, 90, -6, 98, -74, -93, -110, -62, 107, -26, 68, -8, 55, 123, -29, -58, 120, -63, 47, 14, 108, -84, 107, -99, 1, -34, -78, 79, -1, 23, 94, 122, 64, 21, -118, 72, -24, -26, -31, 23, -67, 51, 19, 52, -57, 123, 25, -112, 74, 81, -9, 91, 78, 23, -87, -31, 48, -5, 35, 51, 77, 42, 111, -48, 112, 57, 94, 23, -105, -102, -99, 48, 65, -71, 37, -111, 109, -30, -88, 82, 3, -86, -76, -89, 84, -18, -70, -81, 40, 89, 49, -24, -18, -104, 69, 3, 126]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[12, -87, -41, -94, 25, -128, -4, 111, 70, 62, 88, 59, -87, -45, 17, 4, -123, -50, 127, 37, 25, -75, 111, -125, 85, -123, -77, -111, -79, -46, 123, -85, -108, 37, -70, 8, 68, 41, -22, 24, 41, -70, 100, -121, -23, 90, -120, 36, 27, 40, 24, -74, -27, 49, 52, 84, -49, 71, -79, -11, 17, -15, 126, -10, -37, 77, -94, -2, -86, 114, -1, 82, -20, -13, -89, 45, -85, 111, -52, -41, -43, 4, 85, -119, 88, -12, -24, 78, -107, -14, 53, 101, -18, -42, 38, -17, -86, -76, -89, 84, -18, -70, -81, 40, 89, 49, -24, -18, -104, 69, 3, 126]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[92, -35, 121, 50, 121, -115, -64, 116, -28, 84, 74, 115, -65, -119, -84, -91]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-37, 127, -56, 88, 32, -6, -74, 103, 95, -35, 107, 113, -57, -96, 120, -104]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[64, 67, -122, -103, -53, 112, -11, -126, 118, -1, 100, -46, -71, 68, -106, 115]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-75, 56, 49, 93, -114, -66, -62, 94, 55, 126, 100, 115, 21, -115, -80, 45]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-22, -66, 51, 7, 0, -120, 22, 6, -47, 104, 6, -104, 84, -72, 92, -90]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[88, -45, 91, 67, 49, -84, -13, 53, -100, 36, -127, -77, -37, -49, -24, -4]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-46, -90, 87, 35, 17, -116, 59, -31, 19, -18, 101, 19, -86, 55, -55, -73]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-87, -88, 87, -96, 26, 13, -112, -20, 53, 33, -66, 30, -43, -125, -100, 124]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-37, 103, 15, 11, 14, 68, -34, -41, 65, 127, -82, 50, 16, 48, -90, -80]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-14, 118, -71, -31, -80, 47, 3, -25, 106, -31, 54, -1, 73, 123, 120, -79]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-74, 37, 59, 50, -2, 74, 66, 84, 92, 109, 9, 37, 114, 83, 26, 124]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-37, 103, 15, 11, 14, 68, -34, -41, 65, 127, -82, 50, 16, 48, -90, -80]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[31, -101, 13, -38, 116, 119, -84, -91, -94, 32, 62, -21, -45, 124, 109, -93, 78, -113, 105, -22, 58, 10, 73, -15, 87, -16, 75, 36, 62, -49, 11, -89, -37, 103, 15, 11, 14, 68, -34, -41, 65, 127, -82, 50, 16, 48, -90, -80]");
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey66);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, -62, -34, -80, -53, -91, -37, -67, 6, -119, -100, -28, -93, -64, -71, 126]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[28, 81, -17, 49, -46, -29, -78, -127, 10, -47, 113, 62, 76, -84, -82, 28]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-65, 73, -77, 57, 121, 72, -78, -80, 43, 95, -26, -46, 48, 116, -56, 51]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[32, -43, 23, 72, -100, 49, 108, -58, -117, -78, -87, -89, 44, -24, -126, -62]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-96, -73, 57, -102, 76, 28, -65, 62, 59, 113, 62, 37, 73, -41, 58, 93]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-31, 67, -72, 97, -104, -63, 101, 125, 126, 83, 111, 23, 15, 18, 28, -111]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-57, 88, 13, -114, 79, 62, 71, 52, -93, -69, 53, -27, 86, 12, 51, -98]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[5, 62, -107, 22, -73, 45, 53, -62, -87, -53, 25, -2, 72, 10, -40, 5]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-50, 105, 36, 56, 75, -4, -63, 96, -53, -67, 63, 108, 45, -67, 62, 6]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-29, 127, -58, -56, -14, 58, 98, 50, 99, -70, -114, 65, -127, 75, -114, -4]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[30, -2, 110, -111, 79, -48, 35, -35, -125, -40, 88, 22, -32, -9, 126, 80]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-50, 105, 36, 56, 75, -4, -63, 96, -53, -67, 63, 108, 45, -67, 62, 6]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-56, -60, 95, 9, -101, 101, 11, -94, 60, 82, 112, -127, 81, -119, -65, -82, 19, -105, -119, -106, -16, 65, -73, 71, -100, 91, 50, 119, 74, -2, 65, 118, -50, 105, 36, 56, 75, -4, -63, 96, -53, -67, 63, 108, 45, -67, 62, 6]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-85, 109, -96, -21, 9, -71, 56, -124, 74, 51, -41, -94, 59, -101, 99, 93, -54, -74, -91, 71, 99, -59, -110, -120, 22, 22, -107, 16, -2, -13, 108, 89, -50, 105, 36, 56, 75, -4, -63, 96, -53, -67, 63, 108, 45, -67, 62, 6]");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[113, 3, 120, -108, 79, 43, -124, -105, -34, -84, 75, -122, 5, 54, 121, 121]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-34, 54, 24, 18, -123, -66, -84, -101, -70, 45, 105, -34, 107, 7, -4, -29]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[67, -17, 123, 101, 32, -99, 28, 74, 73, 60, -117, -121, 100, 22, -67, -6]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[113, 3, 120, -108, 79, 43, -124, -105, -34, -84, 75, -122, 5, 54, 121, 121]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-72, 1, -24, 39, -31, 67, 26, 9, -97, -82, -35, 22, -2, -122, -22, -88, 92, -28, -44, 116, 98, 77, -79, 98, 56, 104, -81, -118, -16, 124, 100, 0, -128, -49, -29, 62, -17, -90, -123, 38, -104, 44, -93, 120, -16, 19, 49, 6, -100, 67, -97, 42, -14, 114, 53, -89, 7, -6, -125, 71, -10, 44, -119, 59, -121, 44, -57, 28, -17, 117, 106, 108, 116, 91, -99, 2, 44, 78, -23, -44, -55, 77, -21, -93, 116, -119, 83, 28, -128, 49, 5, -71, 105, 39, -96, 58, 113, 3, 120, -108, 79, 43, -124, -105, -34, -84, 75, -122, 5, 54, 121, 121]");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[80, 106, 70, 98, 64, 17, 25, 37, 71, -108, 119, -9, 19, -85, -51, 107]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-23, 81, 26, -102, 65, -22, -116, 26, -40, -125, -127, -128, 88, -83, 35, -2]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-23, 81, 26, -102, 65, -22, -116, 26, -40, -125, -127, -128, 88, -83, 35, -2]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[26, -78, -27, -92, 101, -27, -127, -91, 64, -12, -23, -19, 5, 52, -38, 99]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1AB2E5A465E581A540F4E9ED0534DA63" + "'", str9, "1AB2E5A465E581A540F4E9ED0534DA63");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1AB2E5A465E581A540F4E9ED0534DA63" + "'", str10, "1AB2E5A465E581A540F4E9ED0534DA63");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[66, 109, 91, 126, 65, -76, -76, 33, 21, -126, -92, -101, 70, 74, -109, -18]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[66, 68, -41, 25, 116, 38, -60, -74, -108, -99, -66, -33, 102, -19, -97, -68, 78, 99, 77, 127, 102, 87, -71, -103, -75, 65, -76, 34, -71, -101, 70, -35, -122, -107, -22, 2, 116, -103, 28, 122, 77, 67, 52, -10, -30, -7, -5, -65]");
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey23);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("AB3501159AB7C84C8B6FAA79AF0BAE36", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-90, 40, -82, 31, -44, 18, -113, -106, 12, 7, -44, 39, -14, 41, 23, 126]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-123, 108, -70, -15, -14, 92, 86, -32, 67, 39, 75, 60, -8, -30, 9, 111]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-41, 58, -85, -120, 15, 82, -56, 120, -65, -78, -45, -117, -38, -51, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[71, -100, -90, 89, -107, 45, 0, -88, 57, 33, 118, -14, 115, 125, 21, 60]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[50, -23, 77, 108, 71, -15, -111, -122, 86, 97, -61, 10, -91, -94, 17, -68, 64, -12, -23, -109, 3, -118, 15, 127, -14, -56, -104, 36, -69, -50, 127, -115, -41, 58, -85, -120, 15, 82, -56, 120, -65, -78, -45, -117, -38, -51, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-26, -51, 127, -96, -102, 1, -60, 105, 52, 121, -114, 119, 86, -40, 82, 86, -74, 106, -6, -13, -23, 112, -97, 29, -67, 79, -2, -44, 47, 82, 53, -77, -41, 58, -85, -120, 15, 82, -56, 120, -65, -78, -45, -117, -38, -51, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[125, 106, -2, 107, 79, 124, -65, 92, -83, 90, -55, -59, 42, 93, 97, -58, -128, 69, 105, -83, 21, 66, 101, -80, -6, 47, 11, -57, 66, -51, -27, -103, -122, -55, 29, -101, 94, -8, 83, 56, -126, -39, 65, 88, 122, -79, 112, -65, -96, 124, -31, -99, -95, -58, -27, 34, -82, -54, 31, -70, -114, -23, 61, 42, -96, 7, 23, 110, 74, -10, 70, -109, -19, 10, 29, -61, 43, -14, -114, -28, 123, -71, 47, 97, 16, -15, 18, 42, -18, 65, -83, 8, -9, -102, -82, 73, -41, 58, -85, -120, 15, 82, -56, 120, -65, -78, -45, -117, -38, -51, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-50, -1, -123, -117, 19, -87, -34, -31, 48, -12, -30, 111, 39, -19, 2, -118, 32, -12, -121, 87, -88, -100, 68, 29, -27, 71, -6, 63, -69, -128, -4, 15, -12, -83, 6, 48, 63, -41, -15, 14, 123, -55, -60, 28, -21, -123, -76, -36, -92, 86, -49, 97, 121, -11, 83, 69, -124, 100, -61, 2, -98, 98, -118, 116, -34, -122, 90, -1, 102, 54, 108, 5, -102, -117, -124, -126, 36, 39, 11, -73, 76, 121, -45, -63, -98, 53, -22, -105, -10, -125, 2, -71, 112, -90, -55, -1, -41, 58, -85, -120, 15, 82, -56, 120, -65, -78, -45, -117, -38, -51, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-41, 58, -85, -120, 15, 82, -56, 120, -65, -78, -45, -117, -38, -51, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-15, 62, 112, 34, 4, -100, -115, -99, 85, -128, 73, 70, -48, -63, -94, 8, -116, 8, -84, -12, 43, -82, -58, -11, 84, -63, -29, -64, -44, 30, 4, 21, -41, 58, -85, -120, 15, 82, -56, 120, -65, -78, -45, -117, -38, -51, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-10, 119, 24, -65, 52, -54, 99, -68, -127, 33, -112, 62, 48, 44, -119, 109, -91, 110, 65, 28, -60, 88, 17, -89, -16, -116, 48, 97, -40, -64, 75, -54, -38, -101, -63, -18, -107, -125, -62, 79, 69, 61, 76, -108, -41, -116, 67, 88, -17, 109, 56, 63, 36, 45, -30, -6, -61, -37, -19, 88, -69, 21, -87, 124, 107, 100, 114, 41, 45, -72, 87, 1, -36, 113, 89, -70, 83, 65, 6, -87, -119, -23, 93, -35, 82, 88, -35, 83, -81, -10, -111, -63, 3, -41, -74, 46, -41, 58, -85, -120, 15, 82, -56, 120, -65, -78, -45, -117, -38, -51, 15, 101]");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[5, 25, 10, 41, 91, 60, 81, 108, -31, 0, 90, 52, -7, 16, -46, 104]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-52, -122, 46, 32, 118, -125, 116, 94, -25, 62, -53, 17, -20, -67, -16, -70, 19, -38, 109, -39, -35, -96, 41, 65, 99, 92, -46, -126, 31, -6, 114, 1, 53, 49, 91, 78, 50, 100, -85, -58, -89, -34, 126, 33, -41, -69, 104, 112]");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey44);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey53);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey53);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8F3E57224E55B543E47520B4C6623436D9C5BD0F28897D4CD2E6A1F4CD13D3333455E5233CDF70870BBC1E19C9C927ED43E983DA26206794C0D4844964813D8EE6C470E93789C1AE864B85D5E6C8EF7435352DA89B68342B5AE597960CF1A19769D9D1094A18106C90A5C365D494767", secretKey53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey53);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-52, 30, 118, 113, -128, -28, -75, -43, 81, 71, 7, -47, -3, -89, 87, -34]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-37, 53, 44, 57, 59, -65, 18, 41, -11, -55, 56, -128, -87, -41, -53, 5]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[27, -21, -97, -14, -6, -13, -81, 101, -117, 55, -61, 114, 21, -80, 51, 103]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[58, 89, -21, -60, -40, -72, 8, 57, -31, -10, -23, -17, 83, 72, -61, 39]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[58, -20, 100, 112, 58, 117, -20, -62, 23, -20, -72, 88, 68, 0, -121, -43, 55, -73, 5, -30, -96, -17, -33, -120, 65, 19, -71, -83, -37, -36, 72, -92, 27, -21, -97, -14, -6, -13, -81, 101, -117, 55, -61, 114, 21, -80, 51, 103]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[27, -21, -97, -14, -6, -13, -81, 101, -117, 55, -61, 114, 21, -80, 51, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-104, -121, 120, -107, 126, 123, 25, 52, -108, -65, -128, 4, 121, 40, 23, 84]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-77, 27, -35, 75, -98, 116, -99, 80, 77, 85, 9, 10, 61, -6, 85, 111]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[70, -75, 81, -63, -18, 127, 9, -17, -66, -31, -32, 84, 57, 27, -44, 123]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-46, 30, -125, -91, -63, -90, 65, 51, -43, -128, -15, -61, -122, -65, 123, -73]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[81, -37, -15, 40, 13, 100, 102, -33, -22, -87, 48, 55, -73, -107, -40, -70]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[73, -7, -41, 26, -84, 93, 10, 92, 68, 22, -71, 51, 41, -103, -56, 15]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[73, -7, -41, 26, -84, 93, 10, 92, 68, 22, -71, 51, 41, -103, -56, 15]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, -49, -49, 41, -122, 3, -12, 102, -49, -102, 16, 127, -9, -95, 80, -108, -91, -75, -49, -125, -16, 4, 76, -86, -27, 41, -45, -54, -38, 64, -51, -122, 81, -37, -15, 40, 13, 100, 102, -33, -22, -87, 48, 55, -73, -107, -40, -70]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertNotNull(byteArray60);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("A856F4BB028ED37E42CCF9A0F314FBC195A260BA04EEEF22D305973260944F431BE4FC79E853B7AF60ECDC1555D9124211637AF288C9EC32916D12A203EB5EFA19BE8DB3AB1518F05C443DD81721AF22E81EED89735A10E4AA3A9B09F8438210CA4375536161AC4CDE469F449ACF1A07", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[60, 63, 117, 8, -73, -84, -20, 65, 85, 40, 19, -8, 65, -89, 39, -19]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[121, -11, 109, 18, 65, 32, -88, 76, 11, 119, 95, -80, 8, -34, -59, 16]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[93, -6, -63, 66, 23, -40, 84, 107, -52, -11, 96, 6, 28, 66, 120, -48]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[108, -43, 90, 54, 79, 30, -111, 7, 10, -87, 60, 14, -26, 90, -81, 110]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-83, -94, -4, 65, 95, 35, -102, -31, 120, 45, 24, 107, 41, 82, -38, 83, -42, -6, -111, 19, -108, 14, -128, -116, -94, 108, 33, 108, -125, -102, 95, 32, 93, -6, -63, 66, 23, -40, 84, 107, -52, -11, 96, 6, 28, 66, 120, -48]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[79, 127, 115, 59, -115, -2, -99, -42, -76, -39, 107, -22, 56, 111, 61, -95, 105, 24, 78, -47, -21, 115, -44, -6, -74, -45, -99, -10, 90, -64, -21, 84, 73, -57, 18, 103, -50, 5, 52, 14, -57, 75, 117, 13, 123, 65, -42, -72, -64, 94, -78, -61, -110, 1, -109, 116, -122, -125, 57, 122, 80, -110, 48, -83, 61, 0, -106, 8, -32, -54, 63, -84, -104, 6, 22, 15, 0, 33, 102, 97, 31, 34, -25, -19, 112, 5, 106, 127, -80, -1, 111, 50, 91, -63, -106, -103, 93, -6, -63, 66, 23, -40, 84, 107, -52, -11, 96, 6, 28, 66, 120, -48]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass45 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[37, 19, 96, -117, -106, -108, -73, 94, -28, 29, 101, -111, -94, 124, 97, -97]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[112, -45, -94, 60, -78, -32, 115, -18, 50, -65, -19, -21, 88, -35, -69, -4]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[26, -109, -46, 3, 23, 28, -104, 2, 31, 76, 61, 103, 70, -62, -95, 62]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-18, 62, -60, -125, -9, 38, -21, -107, -5, -96, 29, 40, 7, -48, -85, 41]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[51, -97, 104, -26, -2, 86, -67, -52, -40, -113, -13, 6, 0, 52, 87, 33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-8, 42, 2, 74, 84, -1, 80, -30, 67, 81, 99, 17, -103, 104, -54, 120, 89, -29, 59, -32, 73, -55, 14, -111, -54, 44, 92, -24, 7, -47, 114, 124, -18, 62, -60, -125, -9, 38, -21, -107, -5, -96, 29, 40, 7, -48, -85, 41]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[51, -17, 38, 111, 93, -41, -103, 73, 126, -118, -24, 22, -14, -74, 110, 22]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-89, -114, 44, -112, -31, 118, 102, -37, -71, -27, -102, -72, 52, 103, -12, 77]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[89, 0, 54, -89, -8, 100, 108, -38, 80, 76, 100, -128, 114, -67, -34, 41]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[79, -89, 46, -20, -21, -21, 80, -5, -99, 72, 97, -57, 82, 51, -111, 29]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[61, 28, -21, -105, -42, 113, -13, -54, -127, -65, 98, -101, 15, -60, 88, -70]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-57, 18, -29, -13, 54, 33, 68, -35, 44, 68, -40, -76, 95, -15, 108, -97]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[25, 85, 114, -35, 125, 74, -48, -36, -121, 15, 70, 108, 89, 95, -123, -94, 73, -86, 50, -95, -73, 26, -118, -42, 48, -62, -8, 49, -71, -123, -39, -46, 61, 28, -21, -105, -42, 113, -13, -54, -127, -65, 98, -101, 15, -60, 88, -70]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-23, -25, 124, -29, -89, 57, 34, -21, 105, 125, 74, 87, 123, -33, 5, -68, 11, -33, -74, 111, -128, -127, -108, 109, 42, 125, 44, 9, 88, 96, -76, 33, 61, 28, -21, -105, -42, 113, -13, -54, -127, -65, 98, -101, 15, -60, 88, -70]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-68, -11, 98, -87, 9, -86, -124, 90, 126, -82, -55, -93, 26, 7, 45, 50, 122, 76, 12, 94, -116, 68, 107, 5, 28, 86, 60, -6, 20, 85, 89, -62, 103, -108, -16, -74, -21, -85, 70, -28, -87, 93, -6, 120, 20, -63, -18, -64, -35, 82, -1, 13, -21, 118, -90, 90, 18, -65, 44, 4, -10, -64, -29, 108, -127, 62, 57, -55, -118, 18, -34, -75, 29, -123, 65, -52, -128, 33, -114, -24, -39, 70, 38, -60, -5, -90, 105, 39, -13, -123, 62, 47, 56, -97, 3, 77, 61, 28, -21, -105, -42, 113, -13, -54, -127, -65, 98, -101, 15, -60, 88, -70]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[73, 54, -6, -127, 3, 42, 16, -53, -23, 120, -39, -35, 110, -99, -77, 45, -124, 41, 89, -71, -18, 103, 60, 17, 85, 114, -114, -19, -121, 5, -66, 110, -73, -67, -106, -51, 49, -125, -68, -63, -101, 115, 74, 18, -121, 16, 44, -18, 106, -68, -107, -40, 1, -86, -121, 110, 82, -1, 113, 98, 56, -114, -89, 33, 64, 21, -42, 10, -6, 0, -2, -24, 101, -21, -119, -42, 100, -62, 102, -120, 51, -94, 124, -2, 71, 46, 109, -93, -68, 19, -38, 13, -121, 22, 23, -6, 61, 28, -21, -105, -42, 113, -13, -54, -127, -65, 98, -101, 15, -60, 88, -70]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-95, -66, -95, -123, -28, 27, -109, -125, 18, 45, 27, 40, -89, -9, 59, -114, -54, 73, 9, 109, 86, 62, 100, 45, 46, -44, 21, -80, 66, -49, -106, -65, -19, -105, 70, -74, -37, -93, -73, -111, -1, -103, 9, 18, 118, -92, -13, -26, -56, 73, 69, 96, -13, -115, -22, -30, -66, 116, -112, 102, -15, 30, 34, 60, -98, 68, -75, -112, 82, 83, 74, -17, 8, 56, 112, -84, 12, -48, -113, 92, 66, 50, -94, 35, 14, -26, 13, -67, -15, 11, -127, 118, 105, 125, 93, -5, 61, 28, -21, -105, -42, 113, -13, -54, -127, -65, 98, -101, 15, -60, 88, -70]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[61, 28, -21, -105, -42, 113, -13, -54, -127, -65, 98, -101, 15, -60, 88, -70]");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-89, -41, -45, 102, -126, 74, -29, 15, -39, 124, -72, -102, 52, 49, 3, 78]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[113, -22, -28, -26, -52, -106, -45, -41, 12, 29, 78, 11, -111, -51, -63, -124]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[113, -22, -28, -26, -52, -106, -45, -41, 12, 29, 78, 11, -111, -51, -63, -124]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-89, -41, -45, 102, -126, 74, -29, 15, -39, 124, -72, -102, 52, 49, 3, 78]");
        org.junit.Assert.assertNotNull(byteArray43);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey12);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey12);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey12);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey12);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey12);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey12);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey55);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey55);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey55);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey55);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[113, -20, 78, -29, -49, 77, -47, -85, 11, 22, -94, -6, 87, 106, 99, -22]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-26, -25, 39, -106, 16, 64, -122, 9, 9, -10, -36, 116, 7, 123, -31, -84]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-26, -25, 39, -106, 16, 64, -122, 9, 9, -10, -36, 116, 7, 123, -31, -84]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-121, 78, 75, -4, -116, 19, 63, -47, -18, 61, 122, -24, -76, -52, -70, 49]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-26, -25, 39, -106, 16, 64, -122, 9, 9, -10, -36, 116, 7, 123, -31, -84]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[38, 28, -61, 85, 46, 3, 34, -60, -115, 71, -107, -71, -4, -24, -101, -91, -19, -78, -53, -26, 124, -39, -125, -117, 100, -32, -97, -115, -113, 105, 63, 21, 113, -20, 78, -29, -49, 77, -47, -85, 11, 22, -94, -6, 87, 106, 99, -22]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[126, 36, -93, 85, 97, 22, 30, -118, 15, 82, -68, -22, -106, 71, -49, -114, -106, 2, -9, 69, -42, -126, -98, -107, -108, -112, 123, -38, 36, 47, -49, 58, -71, 55, -60, 117, 17, -13, -61, 39, -53, 13, 92, 37, 85, -70, 50, -64, 34, 28, -22, -93, 5, 98, -6, 56, -123, -42, -112, -79, 62, 106, -29, 116, 88, 39, -33, -67, 21, -75, 66, 117, -35, 119, 104, 38, -16, 8, -85, 3, 57, -76, -64, 33, 117, -100, 88, -29, -91, 1, 28, 76, -88, 53, 57, -19, 113, -20, 78, -29, -49, 77, -47, -85, 11, 22, -94, -6, 87, 106, 99, -22]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-28, 90, -12, -114, 64, -78, 122, 59, -72, -35, -31, 36, 120, -3, -40, 14, 29, 102, -49, 97, -81, 76, -77, -73, -28, 47, 74, 71, -104, 120, -91, -93, -36, -125, -2, 54, -81, -93, 80, -95, -38, -121, 28, -1, 6, 4, 111, -94, -8, 42, 2, 40, -105, 73, 48, -31, 27, 89, -90, 39, 122, -96, 51, -43, -114, 109, -55, 87, -49, -81, 25, 102, -23, 6, 65, 11, 36, -85, 87, 52, 30, -107, 31, 49, -120, 62, -96, -55, -85, 81, 28, 15, -53, -86, 127, 57, 113, -20, 78, -29, -49, 77, -47, -85, 11, 22, -94, -6, 87, 106, 99, -22]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[44, 109, -40, -37, 119, 71, -114, -100, -110, -80, -8, -58, -36, 112, 112, -83, 49, 109, -57, -100, -64, -29, 60, -53, 80, -2, -98, -113, 48, -62, -14, 4, 113, -20, 78, -29, -49, 77, -47, -85, 11, 22, -94, -6, 87, 106, 99, -22]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[113, -20, 78, -29, -49, 77, -47, -85, 11, 22, -94, -6, 87, 106, 99, -22]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-30, 62, -5, -44, -36, -46, 15, 43, 78, 49, -79, -22, -21, -6, -94, 112, 64, -74, 5, 26, -8, -13, 50, -12, -46, -10, -101, 26, 74, -38, 86, 19, 113, -20, 78, -29, -49, 77, -47, -85, 11, 22, -94, -6, 87, 106, 99, -22]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-126, -10, 57, 33, 53, -36, 64, -101, -46, 69, 113, -68, 74, 10, 72, -37]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-102, 10, -12, -45, -105, -69, 16, -95, -9, -47, -109, -22, -99, 11, -100, -86]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-64, 44, -78, -3, 21, 63, 15, -22, 23, -110, 37, -70, -42, 16, -29, -4]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-109, 37, -5, -126, -120, -92, -3, 103, -122, 63, -69, -94, 29, -75, 45, -60]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-71, 123, 37, 55, 86, -40, 52, -39, -104, -92, -38, -36, 101, 104, 69, -13]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-60, 72, 14, -87, 120, -48, 59, -81, 83, -99, 59, 29, -53, 32, -60, -60]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-60, 72, 14, -87, 120, -48, 59, -81, 83, -99, 59, 29, -53, 32, -60, -60]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-109, 31, -57, 41, 11, 7, 123, 109, 57, -11, -110, -82, 47, -61, 2, 65, -119, 21, -72, 88, 42, 98, 123, -116, -8, 7, 52, 1, -53, -63, 99, 37, -71, 123, 37, 55, 86, -40, 52, -39, -104, -92, -38, -36, 101, 104, 69, -13]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey7);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey36);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey36);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey36);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey36);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[35, 70, 83, -52, -20, 2, 82, -66, 29, 35, 7, 92, -23, 46, -99, 2]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-108, 8, -56, -87, -110, -3, -32, -112, -39, -116, -22, -47, -70, 30, 108, -113]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[4, 117, -43, 124, 69, 97, 2, 110, -31, -36, 113, -93, 110, 47, 110, -55]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[35, 70, 83, -52, -20, 2, 82, -66, 29, 35, 7, 92, -23, 46, -99, 2]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[14, 42, -98, 34, -5, 123, -119, -74, 44, 105, -110, 35, 109, -94, -41, -11, -115, 63, 95, 87, -83, 28, 82, -125, 26, 85, -47, -54, -23, -54, 121, -72, 25, -19, -4, 108, 71, -84, -38, -56, -68, 42, 123, -27, 83, -73, -109, -62, -60, 32, -83, 70, -50, 61, -31, 31, 21, -56, -47, -24, -2, 30, -44, -14, 90, -123, -9, 33, -17, 82, -11, 54, -48, 110, 2, -17, 69, 7, 7, -61, -86, 86, 109, 34, 96, 31, 90, -20, 59, 14, -88, 8, 41, -125, -125, 84, 35, 70, 83, -52, -20, 2, 82, -66, 29, 35, 7, 92, -23, 46, -99, 2]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[61, 16, 59, 74, -7, -39, -7, -45, -94, -121, -21, 98, 63, -80, 70, -28, -72, -14, 88, 1, 126, -79, 71, 26, -38, -20, -105, -21, 29, 36, 8, -4, 35, 70, 83, -52, -20, 2, 82, -66, 29, 35, 7, 92, -23, 46, -99, 2]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[105, 20, -38, -52, -117, -58, -52, -24, 72, -29, -24, 25, -78, -109, -85, 19]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[27, -5, 81, 116, 107, 25, -32, -87, -32, 56, 36, -73, -30, -50, -98, 64]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-121, -92, 90, 92, -81, 41, 48, -116, -22, -93, 54, 108, 121, -41, -90, -30]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[98, -17, 108, -28, -87, -96, 26, 108, 85, -120, -77, 12, -40, 113, 120, 18]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-87, 45, -41, -73, 28, 39, -41, 124, -7, 94, -125, 69, -113, 63, 44, -107, -51, 17, 75, 61, 52, 24, 85, 61, -21, 39, 73, -88, 120, 34, -108, -114, -121, -92, 90, 92, -81, 41, 48, -116, -22, -93, 54, 108, 121, -41, -90, -30]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-113, 50, -105, -12, -97, 8, 6, 39, 120, -26, -105, 110, -48, -9, -51, -21, -96, -51, 23, -54, 121, 95, -34, -40, -44, -61, 66, 109, -67, -28, -48, 80, -121, -92, 90, 92, -81, 41, 48, -116, -22, -93, 54, 108, 121, -41, -90, -30]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[55, 47, 125, -45, -85, 52, 110, 102, -16, 25, 64, 4, -56, -74, 48, -6, 119, 99, 72, 78, 45, -100, 37, 40, 115, 0, 45, -115, -6, 117, 102, 100, -74, -44, -89, -70, -30, 34, 49, 76, -34, 6, -81, -128, 116, 37, -57, 61, -24, -96, 98, 108, -26, 108, 1, -77, -85, 47, -45, 41, 23, -63, -104, 46, -39, -90, 73, 36, -50, 65, 45, -57, 118, 41, 29, -1, 43, -30, -54, -90, -78, -43, -116, 8, -76, -107, 40, 13, 120, -104, -100, 75, -92, 64, -95, -111, -121, -92, 90, 92, -81, 41, 48, -116, -22, -93, 54, 108, 121, -41, -90, -30]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-29, 1, 41, -63, -38, -1, 63, -36, 96, -106, 115, 34, 85, 116, -96, 83, -103, -40, 24, -50, -56, 26, 97, -27, -118, -2, 118, 86, -19, -125, 39, -34, -121, -92, 90, 92, -81, 41, 48, -116, -22, -93, 54, 108, 121, -41, -90, -30]");
        org.junit.Assert.assertNotNull(byteArray45);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey40);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey46);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey67);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey67);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey67);
        java.lang.Class<?> wildcardClass74 = secretKey67.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-121, -23, 63, 32, 4, 15, -65, -113, -110, 67, -95, -78, -12, -107, 99, -13]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-124, 76, 99, -113, -15, 36, -2, -21, -125, -30, -12, -109, 94, 105, 48, 83]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[112, 41, 127, -90, 90, -64, -64, 65, 124, 95, -24, 73, 110, -108, -71, -110]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, -124, -5, -7, -55, 51, 71, 59, 85, 120, -104, -47, -21, -24, -49, -6]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-47, -38, -45, 13, 39, 25, 3, 56, 72, 112, -92, -123, 9, -34, 125, -123]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-41, -31, 13, 92, -121, -4, -101, -30, -85, 67, 9, 91, 68, 30, 6, 67, -49, -111, -114, -114, -95, -13, -26, 67, -114, -51, 17, 30, -6, -73, 20, 59, 67, -124, -5, -7, -55, 51, 71, 59, 85, 120, -104, -47, -21, -24, -49, -6]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[24, -112, -26, -102, 62, 23, 75, 0, 1, 45, 119, 0, -6, -104, 81, -17]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[2, -3, -105, -18, -108, -14, -23, -81, 74, -44, -9, 54, 106, 55, -26, -116]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[56, -63, 81, 61, 35, 108, 40, 8, 90, -82, 43, 18, -126, -90, 116, 124]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-22, -116, -105, 38, -68, 115, -8, 64, 5, 12, 53, -39, -126, -38, 110, -93]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-13, -104, -71, 101, 126, -64, 4, 22, 35, -67, -92, 48, -20, -30, -28, -91]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[23, 124, 10, -77, 86, 25, -106, 53, -9, 72, -9, 111, -29, -13, 68, 51]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[84, -69, 116, 62, -1, 100, 96, -109, -102, 108, -97, -118, 60, 98, 100, 73]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, -36, 44, -58, -92, -20, -54, 101, -29, -93, -54, -10, 124, 25, -27, 31]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[63, -30, -116, -79, -119, -84, -113, -16, -58, -61, 44, -32, 19, 120, -108, 126, 43, -127, -30, 48, 59, -109, 62, -48, 125, 70, 62, -24, -73, -27, 45, -124, 84, -69, 116, 62, -1, 100, 96, -109, -102, 108, -97, -118, 60, 98, 100, 73]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey29);
        java.lang.Class<?> wildcardClass38 = secretKey29.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[122, -20, -50, 126, 84, -116, -3, 8, 125, 9, 94, 115, -68, 96, -40, -50]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[117, 4, 56, 57, -115, -53, -96, -44, 70, 5, -37, 85, 54, 108, -11, 89]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-94, -96, 82, -99, -45, 122, 7, 73, -81, -69, -50, -58, -112, -92, 71, 56]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[34, -48, 55, 56, 63, 51, 48, -27, -58, 113, -60, -22, 96, 93, 31, 43]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[71, -27, -43, 123, 67, 7, -63, -26, 120, 97, -37, 69, 28, 72, -15, -78]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-46, 115, 53, -87, -7, 85, 54, 94, -101, -95, -14, 125, -7, -14, 104, 53]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-46, 115, 53, -87, -7, 85, 54, 94, -101, -95, -14, 125, -7, -14, 104, 53]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-22, 9, 76, -4, -73, -67, -105, 32, -11, 67, 117, -86, 81, -106, -30, -63, -120, 84, -112, -110, -43, -36, -57, 101, -10, 92, 83, -85, 74, 127, 26, -85, 71, -27, -43, 123, 67, 7, -63, -26, 120, 97, -37, 69, 28, 72, -15, -78]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-90, 53, 121, 66, 121, 38, -82, -86, -58, -39, 42, 120, 50, 6, -29, 23, -22, -51, 86, -88, 42, 86, -54, 88, 55, 54, -44, 109, -45, -50, -12, -8, 71, -27, -43, 123, 67, 7, -63, -26, 120, 97, -37, 69, 28, 72, -15, -78]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey32);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-81, 33, 64, -124, 16, -74, -26, 48, -55, -102, 62, 29, -4, -30, 109, 108]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-71, -117, 58, -10, -22, -78, 1, -72, -15, -78, 24, 4, -128, -19, 93, -7]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-71, -117, 58, -10, -22, -78, 1, -72, -15, -78, 24, 4, -128, -19, 93, -7]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-81, 33, 64, -124, 16, -74, -26, 48, -55, -102, 62, 29, -4, -30, 109, 108]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AF21408410B6E630C99A3E1DFCE26D6C" + "'", str9, "AF21408410B6E630C99A3E1DFCE26D6C");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[81, -112, 126, 24, -102, 113, 20, 45, 111, 4, -120, -64, -112, 49, -106, -58]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-40, 9, 15, 125, 21, 53, 7, 17, -51, 100, 5, 28, -50, -99, -51, -109]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-39, 63, 47, 81, 21, 34, 2, 10, 22, 106, 20, 78, -12, 87, 79, 44]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[38, 119, 73, -59, 19, -106, 112, 116, 15, -10, -88, 105, -57, -124, -53, 99]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[82, -56, 94, -112, 30, -58, 36, 72, 64, -13, -27, -107, -90, -125, 6, -6, -99, -6, -119, -1, 88, 110, -111, -56, -15, 10, 32, -86, -46, 88, -73, -78, -39, 63, 47, 81, 21, 34, 2, 10, 22, 106, 20, 78, -12, 87, 79, 44]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[33, -32, 69, -121, -2, -9, -22, -74, -25, -40, 67, 77, 79, -19, -106, -127, -65, 18, -97, 47, -37, -82, 116, -100, 125, 74, 25, -51, 37, 64, 70, -75, -39, 63, 47, 81, 21, 34, 2, 10, 22, 106, 20, 78, -12, 87, 79, 44]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-29, 72, -3, -3, -49, -121, -85, -86, 114, 120, 32, 11, -59, 73, -127, -108, -66, -6, -42, -39, 90, 103, 75, 38, 19, 64, -103, -53, 27, -37, -109, -57, -76, -2, 48, -35, 3, -58, -114, 78, 49, -105, 15, 122, -9, -117, 63, -121, -58, 67, 88, 61, -25, -18, -109, 70, -1, -93, 8, 33, 50, -97, 108, -91, -85, -29, 4, 25, 67, -89, 15, 93, 121, -91, 43, 94, 101, -103, 19, -1, -20, 87, 17, -116, 53, -36, 61, 73, 8, -108, -94, 20, 101, 64, -11, -67, -39, 63, 47, 81, 21, 34, 2, 10, 22, 106, 20, 78, -12, 87, 79, 44]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[109, -32, -71, -52, 96, -20, -38, -68, 88, -99, 9, -75, -62, 70, 33, -7, -99, -38, -37, -91, -54, -78, -103, 9, -66, 44, -20, 65, -59, 57, 76, 12, 97, 89, 114, -43, -34, 102, 90, 41, -9, -83, -107, 16, 51, 26, -91, -38, 93, -123, -7, 56, -118, -86, -96, 43, 31, 62, 102, -41, -101, 63, -48, -74, -26, -30, 99, 44, 96, 11, 125, 15, 12, 78, 9, 84, 33, 54, -18, -73, 89, -128, -27, -79, -53, 50, -85, -95, 110, 60, 34, -9, -42, -47, 53, -24, -39, 63, 47, 81, 21, 34, 2, 10, 22, 106, 20, 78, -12, 87, 79, 44]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[72, 49, 63, 65, -99, -58, 121, 50, 6, -20, 72, 86, 62, 100, 47, 76, -112, -41, 106, 126, -39, 81, 96, 126, 119, 82, -32, 121, 106, -39, -127, -70, -39, 63, 47, 81, 21, 34, 2, 10, 22, 106, 20, 78, -12, 87, 79, 44]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-39, 63, 47, 81, 21, 34, 2, 10, 22, 106, 20, 78, -12, 87, 79, 44]");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("9AA4E392DC17BB1C416475F15E3ACD8A5E55C6868B7E8D45A7AFA7270C5449A7B331606F026CDD1F7176A86323B1151A", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey51);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BEBA20EB6E226639B18D711EB33F4341FB0FF3ABB4F555955A1F4A34DCD07DDE673D60E567E40636D2ED65AB40832F7", secretKey67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey67);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-13, -34, 65, 20, 112, 6, -104, -92, -20, 68, -91, -31, 21, -113, 46, -120]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-126, -46, -107, 16, -45, 80, 115, 38, 77, 45, 5, -99, 43, -38, 120, -120]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-2, 43, -11, -88, -38, 103, 110, -123, -30, 9, 113, 78, -97, -104, -128, -58]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-103, -95, -78, 1, 101, 115, 54, -125, 127, 98, 4, 31, -34, 94, -99, -96]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-3, -68, 43, 43, 89, -74, -5, 34, 82, 63, -112, -73, 1, 29, 68, -42]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-100, -111, 8, -24, 76, -6, -111, 14, -64, -115, -60, 4, -30, 60, -54, 80]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-75, -26, -9, 76, -90, 27, 68, -67, -64, 86, -108, -46, -47, -37, 24, -8]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[121, -56, 31, -18, 22, 8, 7, 72, 70, -93, -40, -34, -69, -75, -37, 34]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, -120, 116, 31, 19, -45, 101, -5, -67, 33, 50, 126, -121, -18, 4, 124]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, -35, 104, 105, 44, -42, -21, 86, -120, -20, -97, -110, 33, 93, 5, -105]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-10, -45, -4, -61, 72, 65, 21, -117, 4, 85, -85, 4, 14, 60, 111, -16]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, -120, 116, 31, 19, -45, 101, -5, -67, 33, 50, 126, -121, -18, 4, 124]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[105, 72, 21, 111, -10, 118, -53, -126, -82, 93, -41, 75, -114, -11, -36, 115, 124, 127, 125, -125, -20, 26, 44, 58, 110, -106, -28, -21, -28, -63, 54, 117, 127, -97, -106, -108, -89, -90, -123, -80, 82, -14, 52, -60, -105, -126, 34, 36, 64, -128, -3, 46, -43, -8, -4, 55, 125, -48, 117, 10, -82, -6, 125, -73, 12, 72, -71, -77, 49, -78, -66, 94, 70, -116, -44, 31, 74, -121, -28, -57, -38, 106, 67, 19, 119, -114, 35, 124, -96, -126, -75, -100, -32, 15, -123, 96, -1, -120, 116, 31, 19, -45, 101, -5, -67, 33, 50, 126, -121, -18, 4, 124]");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "6948156FF676CB82AE5DD74B8EF5DC737C7F7D83EC1A2C3A6E96E4EBE4C136757F9F9694A7A685B052F234C4978222244080FD2ED5F8FC377DD0750AAEFA7DB70C48B9B331B2BE5E468CD41F4A87E4C7DA6A4313778E237CA082B59CE00F8560FF88741F13D365FBBD21327E87EE047C" + "'", str59, "6948156FF676CB82AE5DD74B8EF5DC737C7F7D83EC1A2C3A6E96E4EBE4C136757F9F9694A7A685B052F234C4978222244080FD2ED5F8FC377DD0750AAEFA7DB70C48B9B331B2BE5E468CD41F4A87E4C7DA6A4313778E237CA082B59CE00F8560FF88741F13D365FBBD21327E87EE047C");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-117, 10, -52, 111, -4, -102, 34, -39, 48, 24, -52, 28, 12, 80, 119, 91]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[61, -90, 62, -60, -101, 25, 64, -113, 78, 48, -109, 43, 44, 38, -59, 126]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -20, 31, 119, -55, 48, -29, 80, -20, 80, -108, 119, 76, -103, 78, 90, -114, -77, 31, -35, 73, 110, 89, 26, -25, -120, 32, -53, 69, -5, -1, -63, -115, -111, -70, 90, -14, 22, 56, 15, 54, 109, 22, -62, 2, -63, -105, 6, -25, -121, -99, 10, 112, 11, 41, -121, 85, -50, -46, -63, 28, -18, -69, 71, 88, 97, 12, -21, -8, 25, -114, -36, 5, 27, 112, 125, 54, -66, -70, -117, 119, 112, -118, -86, -118, -68, -52, 116, 108, 61, 2, 123, 118, 56, -71, 37, -117, 10, -52, 111, -4, -102, 34, -39, 48, 24, -52, 28, 12, 80, 119, 91]");
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("D7C1DE87806880D3EB8DC40B1AB5421EEDC5A1D206D8942E8633B09A3FFDA257FC38C2C5F14D2725CDE598D0986A6466", secretKey9);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey40);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey40);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-106, -85, 13, -82, 40, 14, -98, 24, -5, 114, -128, -99, -107, 6, 124, 54]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-110, -128, -18, -16, 22, -117, -34, 15, -99, -61, 33, 2, 87, 89, 81, -69]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-110, -128, -18, -16, 22, -117, -34, 15, -99, -61, 33, 2, 87, 89, 81, -69]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[82, 111, -89, 49, 10, -11, -15, -41, -70, -2, -30, -125, -66, -106, -102, -76]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-110, -128, -18, -16, 22, -117, -34, 15, -99, -61, 33, 2, 87, 89, 81, -69]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[55, 12, 26, -127, -32, -90, -99, -24, 92, 56, 47, 8, -61, 28, -67, -112, 39, 44, -32, 120, -62, 94, 120, 108, -54, -8, -39, 106, -57, -29, 114, 100, -106, -85, 13, -82, 40, 14, -98, 24, -5, 114, -128, -99, -107, 6, 124, 54]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-33, 34, -50, -68, 64, 16, 63, 94, 13, -49, 96, -54, 6, -57, -29, 85, 105, -102, -80, -124, 60, -100, 110, 50, -37, -102, 89, 47, -128, 16, 9, 26, -10, -84, 25, -123, -50, 115, -67, -19, -96, 1, 88, 78, -4, -88, -55, -109, -51, 42, 65, 81, -54, -76, -35, -99, -113, -115, -98, -60, 47, 9, -31, 86, 123, 87, 87, -40, -119, -78, 118, -20, -57, -11, -38, 114, -38, 29, -7, 89, 65, 116, 29, -26, 65, -118, -29, -37, -76, 5, -64, 61, -10, 30, -23, 80, -106, -85, 13, -82, 40, 14, -98, 24, -5, 114, -128, -99, -107, 6, 124, 54]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-126, -101, -127, -69, 77, -57, -104, 35, -43, 107, -69, 121, 63, 48, -91, -103, -81, 101, -126, 20, -85, 123, 41, 71, -49, -16, -100, -12, 44, -38, -25, 69, 44, 62, 49, 57, 15, -53, 35, -75, -9, 44, 5, 69, 47, -59, -76, -102, -127, -42, 97, 95, -103, 12, -91, 80, -72, 57, 35, -50, 50, 40, 57, -19, -9, -13, -14, -43, 3, 37, -62, -5, 1, -7, 14, -32, -92, -64, 110, 1, -59, -109, 63, -97, -67, 40, -12, -6, 78, 11, 48, -14, -28, -121, -113, -94, -106, -85, 13, -82, 40, 14, -98, 24, -5, 114, -128, -99, -107, 6, 124, 54]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[29, 37, -72, -59, 113, -73, -102, 69, 111, 113, 17, 36, -93, -48, -49, 88, -107, -96, 35, 112, -119, 83, -107, -118, 98, 104, -122, -113, -65, 34, 121, -15, 22, 50, -105, -85, -103, -70, 125, -93, 119, 3, -30, 4, 59, -62, -56, 72, -87, -128, -106, -58, 25, 2, -12, 118, -66, -126, 106, -26, -11, 106, -99, 77, 24, -18, -33, -82, -109, 65, -44, -106, -27, -50, -38, -13, -107, 94, -10, -116, 41, -124, -102, 71, -85, -93, -13, -124, 99, -22, 5, -124, 71, -16, 55, -35, -106, -85, 13, -82, 40, 14, -98, 24, -5, 114, -128, -99, -107, 6, 124, 54]");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1D25B8C571B79A456F711124A3D0CF5895A023708953958A6268868FBF2279F1163297AB99BA7DA37703E2043BC2C848A98096C61902F476BE826AE6F56A9D4D18EEDFAE9341D496E5CEDAF3955EF68C29849A47ABA3F38463EA058447F037DD96AB0DAE280E9E18FB72809D95067C36" + "'", str19, "1D25B8C571B79A456F711124A3D0CF5895A023708953958A6268868FBF2279F1163297AB99BA7DA37703E2043BC2C848A98096C61902F476BE826AE6F56A9D4D18EEDFAE9341D496E5CEDAF3955EF68C29849A47ABA3F38463EA058447F037DD96AB0DAE280E9E18FB72809D95067C36");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-37, -16, 71, 93, -26, -33, 84, -48, 114, 12, 68, -11, 120, 107, -8, -43]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[59, 43, 34, 0, 34, 41, -30, -25, -100, 40, 121, -124, 54, -113, -66, 52]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-96, 24, 8, -115, 46, 31, 13, -43, 116, 116, 19, 30, -107, -89, -107, 7]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[22, -80, 41, -34, -46, 45, -88, -35, 119, -98, 45, -90, 78, 20, 108, -119, 85, -117, -45, -59, 47, 76, 99, -19, -82, -81, 53, -110, 1, 36, -128, 98, -63, 54, -114, 45, 104, -19, 114, 103, -66, 78, 26, 124, -87, 64, 90, 56, -32, -42, 50, -114, -12, -89, -92, -49, -91, -101, 95, 1, 96, -3, -32, -104, 54, 46, -61, -92, -95, 66, -84, 29, -34, 32, 12, 96, -53, 100, 7, -36, 10, -121, 113, -93, 97, 89, -18, 106, 122, -32, 86, -40, 26, -62, -109, 42, 59, 43, 34, 0, 34, 41, -30, -25, -100, 40, 121, -124, 54, -113, -66, 52]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[28, 34, 127, 78, -21, -23, -60, 58, 70, -103, -114, 10, 115, -7, 73, 115, -9, -103, 37, -26, -89, 61, 92, 49, 35, -79, 110, 63, 76, -39, 114, -29, -81, -30, -125, 116, -92, 53, -105, -115, 71, 72, -63, -63, -66, 105, 10, -7, -13, 97, -105, -3, 49, -16, -50, 57, -79, 26, -95, 61, -122, 4, -102, 43, -111, -34, -80, 92, -43, -44, 33, 85, -85, -69, -70, -42, 83, -75, -36, -82, 122, -36, -47, 26, -62, -95, -64, -82, 39, 83, 47, -102, -70, 31, 116, -83, 59, 43, 34, 0, 34, 41, -30, -25, -100, 40, 121, -124, 54, -113, -66, 52]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("407691AFF933C3C5C4C3507FDC720F14353F74F368E591D565489EFBE5AAF13FB52355301586EAE5DC920779218FDE1C53B8A55E40FE04DB2E20D4400468039CA90BF956635A58E4202F722285A83DDD5DB7716F3345BEE254969C8C61FF6E7616C9DD5F8B41DC04D784057ED8198C7C", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey8);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey29);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey50);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey50);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey59);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey59);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey59);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey65);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey65);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey65);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-50, 43, 88, -96, 77, -78, 14, -24, -81, -70, -95, 18, -93, 40, 113, -44]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[24, 85, -101, -127, -106, -61, 74, 102, 13, -40, 3, -1, 24, 11, -75, 45]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[70, -91, -76, 123, 119, 95, 17, -48, -8, 119, 92, -13, -23, -47, 66, 42]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-50, 43, 88, -96, 77, -78, 14, -24, -81, -70, -95, 18, -93, 40, 113, -44]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-98, -57, 85, 69, -81, 111, -13, -77, -33, -50, 91, -9, 93, 76, 77, -126, 53, 14, 25, -95, -16, 92, 123, 56, 85, -66, 13, 118, -21, 43, 16, -49, 55, 39, -121, 122, 105, -108, 127, 24, 11, 110, -39, -70, -125, 90, -120, 14, -125, -73, 115, -65, -15, 63, -65, 88, 85, 25, -60, 4, -106, -16, 63, -89, 32, -88, -81, 124, -19, -92, 63, 80, 86, -78, 42, 90, 122, -39, -73, 18, -113, 101, -122, 65, -42, 122, -29, -74, 117, -50, -97, -104, 60, -76, -127, 22, -50, 43, 88, -96, 77, -78, 14, -24, -81, -70, -95, 18, -93, 40, 113, -44]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[87, -8, -13, -110, 33, 1, 32, 29, -12, -96, 125, -46, 36, 102, 114, -69, 10, 108, 42, 38, 79, 27, -118, 83, -37, -11, 96, 18, -111, 7, -11, 80, -50, 43, 88, -96, 77, -78, 14, -24, -81, -70, -95, 18, -93, 40, 113, -44]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[49, 13, -73, 64, -100, -93, 90, 17, -48, 60, 71, 4, -56, -76, 88, 50, -109, 110, 118, -128, -116, -109, -36, -65, 72, 41, -9, -108, 87, -20, 59, 118, -50, 43, 88, -96, 77, -78, 14, -24, -81, -70, -95, 18, -93, 40, 113, -44]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 2, -79, -34, 81, -12, -85, -61, 76, -27, 55, -81, -69, -9, 126, -87]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-90, 100, 85, -56, 52, -115, 94, -103, 100, 35, 14, 54, 73, -51, -9, 121]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[89, 38, -27, 40, 57, -18, 54, 87, -75, 13, 123, -17, -31, -5, -23, 53]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[63, -87, 102, -58, -64, 122, -123, -26, -55, 36, -59, -18, -40, 70, -46, -94]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[93, 50, 27, 5, 19, 4, 29, -20, -54, 90, -23, 113, 115, -56, -65, -2]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-10, 29, 50, 67, 119, 116, 110, -95, 77, 97, 82, -47, -4, 116, 33, -37, -61, 107, -35, -76, 38, -99, -28, 44, -98, 79, 80, -22, 30, 114, -55, 58, 63, -87, 102, -58, -64, 122, -123, -26, -55, 36, -59, -18, -40, 70, -46, -94]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[80, -98, 100, 103, -101, 41, 88, 125, 80, -32, 83, -3, -128, -108, -8, -79]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[112, 25, -55, -86, 3, -33, 105, 5, 20, -14, 25, 51, 27, -4, -112, 43]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-14, 83, 110, 67, 56, -46, 41, 42, 80, 108, 57, -85, -21, -76, 36, 49]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[73, 84, 23, 88, -100, 96, -17, 70, -4, -128, -12, -8, -91, -41, -114, 64]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[65, -61, 14, 77, -94, -83, 63, 94, -16, 83, -74, 107, -105, 125, 70, 117, -113, -12, 100, 1, -30, -24, 27, -12, 85, -39, 16, -91, 77, -112, -119, 127, -14, 83, 110, 67, 56, -46, 41, 42, 80, 108, 57, -85, -21, -76, 36, 49]");
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey18);
        java.lang.Class<?> wildcardClass25 = secretKey18.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-28, 36, 15, 21, -97, 66, 121, -15, 118, -2, 89, 12, 22, -75, -25, -90]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[56, -114, 120, 70, -17, -116, -22, 112, 47, -116, -96, 67, 110, -59, -62, -66]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, -20, -92, 29, 120, -86, 41, 39, -92, 30, -103, -126, -29, -96, -30, -114]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-64, 65, -124, -69, -54, -14, -72, 72, 39, 60, -4, 54, 103, 85, -37, -51]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-45, -116, 72, 14, 99, -53, -128, 5, -51, -54, 3, 29, 84, 127, -66, 84, -102, -92, 73, 65, 81, -111, -67, -37, -6, -120, -100, 0, -2, 86, 71, -128, -39, -75, 86, 65, -68, -24, 61, 76, 104, -26, -104, -57, -70, -113, -109, 117, 53, 121, 9, 39, -28, -23, -124, -19, -77, -65, 8, 83, -88, -89, 5, 107, 80, 50, 74, -14, 107, -14, -56, 88, 6, -101, 70, 35, -125, 53, 52, -123, -113, 125, 28, -73, 102, 16, -14, -54, -117, 94, 36, 68, -53, -86, -38, 71, 47, -20, -92, 29, 120, -86, 41, 39, -92, 30, -103, -126, -29, -96, -30, -114]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-90, 21, 114, -20, 91, -83, -69, 11, 53, 28, -70, 37, 17, -109, -46, 86]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[5, 9, -114, 18, -8, 110, -120, 115, 27, 28, 19, -31, -37, 74, -1, 7, -105, -9, -85, 46, 2, 119, -79, -103, 32, -25, -87, -23, -54, 50, 126, -116, -11, 71, -28, -127, -87, 91, -15, -61, 44, -13, 47, 61, 0, 56, 64, -25, 29, -93, -93, -41, 126, -20, 97, 118, 12, 76, -36, -97, -2, -21, 110, -95, -87, -7, 74, -24, 82, -39, -65, 115, -89, 104, 55, -16, 122, 12, 44, 63, -4, 113, -13, -54, 120, 116, -58, -95, 60, -125, 9, 107, -51, -38, 105, -105, -90, 21, 114, -20, 91, -83, -69, 11, 53, 28, -70, 37, 17, -109, -46, 86]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-99, -78, 65, -80, 93, -16, 32, -4, -12, -10, 64, -60, 115, 111, 22, -32, -68, -27, 45, -72, 86, 49, -92, 53, -26, -59, -23, 97, 35, -115, -78, 51, -100, -11, -5, 5, 124, 64, 36, 107, -60, 92, -48, 110, -62, -98, -33, 120, -113, -62, 37, -125, -18, 23, -19, 120, -126, -77, -67, 54, -42, 55, 54, 11, -120, -19, -35, -117, -17, -11, -74, -123, 61, -71, -3, 89, 79, 87, 125, -92, 97, 55, -73, -6, 87, -2, -96, -24, -128, -10, -77, 92, -77, -110, 11, -104, -90, 21, 114, -20, 91, -83, -69, 11, 53, 28, -70, 37, 17, -109, -46, 86]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9DB241B05DF020FCF4F640C4736F16E0BCE52DB85631A435E6C5E961238DB2339CF5FB057C40246BC45CD06EC29EDF788FC22583EE17ED7882B3BD36D637360B88EDDD8BEFF5B6853DB9FD594F577DA46137B7FA57FEA0E880F6B35CB3920B98A61572EC5BADBB0B351CBA251193D256" + "'", str7, "9DB241B05DF020FCF4F640C4736F16E0BCE52DB85631A435E6C5E961238DB2339CF5FB057C40246BC45CD06EC29EDF788FC22583EE17ED7882B3BD36D637360B88EDDD8BEFF5B6853DB9FD594F577DA46137B7FA57FEA0E880F6B35CB3920B98A61572EC5BADBB0B351CBA251193D256");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9DB241B05DF020FCF4F640C4736F16E0BCE52DB85631A435E6C5E961238DB2339CF5FB057C40246BC45CD06EC29EDF788FC22583EE17ED7882B3BD36D637360B88EDDD8BEFF5B6853DB9FD594F577DA46137B7FA57FEA0E880F6B35CB3920B98A61572EC5BADBB0B351CBA251193D256" + "'", str8, "9DB241B05DF020FCF4F640C4736F16E0BCE52DB85631A435E6C5E961238DB2339CF5FB057C40246BC45CD06EC29EDF788FC22583EE17ED7882B3BD36D637360B88EDDD8BEFF5B6853DB9FD594F577DA46137B7FA57FEA0E880F6B35CB3920B98A61572EC5BADBB0B351CBA251193D256");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9DB241B05DF020FCF4F640C4736F16E0BCE52DB85631A435E6C5E961238DB2339CF5FB057C40246BC45CD06EC29EDF788FC22583EE17ED7882B3BD36D637360B88EDDD8BEFF5B6853DB9FD594F577DA46137B7FA57FEA0E880F6B35CB3920B98A61572EC5BADBB0B351CBA251193D256" + "'", str9, "9DB241B05DF020FCF4F640C4736F16E0BCE52DB85631A435E6C5E961238DB2339CF5FB057C40246BC45CD06EC29EDF788FC22583EE17ED7882B3BD36D637360B88EDDD8BEFF5B6853DB9FD594F577DA46137B7FA57FEA0E880F6B35CB3920B98A61572EC5BADBB0B351CBA251193D256");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey35);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey35);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-109, 65, -68, 8, 123, -14, -58, -125, -117, 39, -41, -94, -128, 101, -19, 2]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, -104, -119, -52, 105, -104, 12, 45, -90, -20, 9, -43, -7, 22, 17, 56]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-58, -66, -79, -18, 7, -55, 122, 121, -112, 26, 10, 63, -95, -41, -112, 3]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-121, -35, -46, -118, 56, -100, -10, 89, 3, -35, -54, -124, 80, -98, 103, 19]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-50, 100, 1, -95, -80, 48, -7, 70, 38, -110, 124, -62, 100, 14, 102, -74]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[17, 108, -66, 123, 50, -109, 23, -8, -26, 61, -104, 91, 81, -44, -4, 12]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[17, 108, -66, 123, 50, -109, 23, -8, -26, 61, -104, 91, 81, -44, -4, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[80, 34, -75, 68, 4, 86, 77, -54, -93, 119, 50, 68, -102, 30, 99, 17]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-66, 87, 94, -101, 96, 48, -22, -59, 17, -33, -107, 111, -49, 47, 90, -14]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-66, 87, 94, -101, 96, 48, -22, -59, 17, -33, -107, 111, -49, 47, 90, -14]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[71, 66, -14, -85, 95, 83, -36, 3, 94, -16, -113, -75, -124, -94, -40, 76, -11, 113, -69, -30, 19, -114, -69, -65, -40, -60, -53, -55, 78, 105, -128, -25, 80, 34, -75, 68, 4, 86, 77, -54, -93, 119, 50, 68, -102, 30, 99, 17]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey20);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey57);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey57);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey57);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8F3E57224E55B543E47520B4C6623436D9C5BD0F28897D4CD2E6A1F4CD13D3333455E5233CDF70870BBC1E19C9C927ED43E983DA26206794C0D4844964813D8EE6C470E93789C1AE864B85D5E6C8EF7435352DA89B68342B5AE597960CF1A19769D9D1094A18106C90A5C365D494767", secretKey57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey57);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-73, -48, -3, -3, 27, 7, -107, -78, 90, 85, 101, -123, -17, 38, 46, -90]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-67, 17, 126, -18, -88, -16, -124, -75, -68, -80, -84, -127, -124, 8, 32, -108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-124, 77, -111, 103, 71, 1, 45, 108, 98, -6, -34, -4, -121, -108, -2, 59]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[84, -87, 38, -119, -14, -99, -67, 17, -120, 87, 47, 3, 77, 112, 63, 124]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[102, 32, 24, -22, 114, -109, 42, -86, 124, 15, -84, 123, -98, -75, 96, -105, -89, -98, -104, 15, 95, 35, 27, 106, 91, -124, -46, -112, -108, 10, 120, -50, -124, 77, -111, 103, 71, 1, 45, 108, 98, -6, -34, -4, -121, -108, -2, 59]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-124, 77, -111, 103, 71, 1, 45, 108, 98, -6, -34, -4, -121, -108, -2, 59]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[84, -87, 38, -119, -14, -99, -67, 17, -120, 87, 47, 3, 77, 112, 63, 124]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[102, -34, -101, -128, 28, -34, -87, -41, -14, -85, 5, 56, 75, 3, 79, 76, -61, -93, -9, 72, -105, -39, -58, -126, -22, -44, 59, 19, 36, 107, 55, 49, -124, 77, -111, 103, 71, 1, 45, 108, 98, -6, -34, -4, -121, -108, -2, 59]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[11, 51, 119, 94, 20, -120, -125, 115, 54, -28, -87, -61, -28, 3, -72, -16]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-25, 104, 93, -60, -38, 8, 77, 110, 38, 19, -92, 1, 75, -31, -51, 50]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[75, 35, 30, -3, 87, -52, 108, -122, -19, -64, -73, 39, -46, -39, 115, 57]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-23, -53, -66, -23, 127, 67, 76, 14, -126, -69, -116, -42, -23, -105, 2, 93]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[52, -39, -91, 66, 24, 60, 47, -16, 47, 32, -48, 26, 38, -95, 73, -46]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-16, -97, 89, 75, 89, 87, 56, -99, -94, -107, -39, 82, 127, 75, -72, -61]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-16, -97, 89, 75, 89, 87, 56, -99, -94, -107, -39, 82, 127, 75, -72, -61]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[21, 89, 123, 6, 118, 88, 41, 55, -108, 100, -50, 36, 127, 58, -71, -40, -82, -93, 12, -56, 91, -113, 91, -80, 124, 82, -113, -23, -85, -71, -115, -56, 52, -39, -91, 66, 24, 60, 47, -16, 47, 32, -48, 26, 38, -95, 73, -46]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey52);
        java.lang.Class<?> wildcardClass61 = byteArray60.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[55, 48, -22, -102, -16, -116, 18, -96, -94, 122, 108, -92, 12, 0, 68, -23]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-59, 110, 52, -38, 54, 36, 70, 110, -54, -17, 44, -34, 65, -83, 59, -72]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-120, 102, -50, 45, -106, 58, -27, -121, -62, 11, 117, -92, 106, -56, 104, -58]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[82, 41, -56, 69, 11, -38, 87, -12, 122, 40, 56, -86, -102, -51, -10, -72]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[106, -46, -52, -43, -32, 15, -83, 111, -119, 94, 100, -94, -82, -36, 93, 27]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[30, 100, -46, 111, 109, 100, -58, 6, 46, 125, -64, -60, -5, 102, -19, 32]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-62, 118, 65, 92, 55, -43, 103, 121, -35, -65, 33, 72, 45, -82, -41, 45]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-98, 95, -74, -8, -82, 87, 31, -42, -101, -17, -57, 23, -23, 98, 44, 23]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[35, -112, 34, -51, 3, -36, 62, 42, -78, -72, -62, 3, 39, -27, -59, -59]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[59, -48, 14, -36, -38, 46, 45, 24, 2, 47, 2, -25, 52, -17, -43, -38]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-33, 114, -41, 63, -60, 7, -26, 45, 122, 109, 122, 43, 55, 125, -2, 122]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[35, -112, 34, -51, 3, -36, 62, 42, -78, -72, -62, 3, 39, -27, -59, -59]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[35, 102, 57, 20, 96, 4, -3, -37, 94, 109, 56, 91, 108, 51, 94, -23, -64, 56, -122, -68, -39, -32, -83, 111, 34, 36, -115, 53, -55, -128, -60, 55, 35, -112, 34, -51, 3, -36, 62, 42, -78, -72, -62, 3, 39, -27, -59, -59]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey46);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey46);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey46);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-120, -25, -117, -40, -114, -31, 32, -17, -70, -39, -1, 29, 7, -62, 52, 99]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 58, 69, -25, 47, -3, -97, 54, 32, -70, -122, -114, -24, 63, 93, 66]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-110, -1, -69, 77, 66, 115, -115, 113, 86, 83, 123, 27, 13, 29, -123, -62]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[46, 30, 77, -105, -126, -86, -123, 28, -103, 18, 10, -80, -109, 58, -44, -28]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[127, -4, -8, -67, -5, 122, -34, 114, 8, -82, -6, 44, 127, 24, -112, 11, 97, -80, -80, 86, -62, -108, -104, 113, 10, 89, -55, -4, -49, -79, -93, 17, -110, -1, -69, 77, 66, 115, -115, 113, 86, 83, 123, 27, 13, 29, -123, -62]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-8, -3, -81, 104, -19, -110, 107, -26, 8, -94, -44, -81, -113, -69, -86, 49, 23, 4, 93, -8, -104, -7, 83, -52, 100, 72, 122, 21, 57, -78, -34, -90, -110, -1, -69, 77, 66, 115, -115, 113, 86, 83, 123, 27, 13, 29, -123, -62]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-23, -90, -96, -22, -120, 111, 5, 32, -128, -1, 30, -91, 27, -100, 10, 111]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-63, -98, -78, 62, -37, -80, -120, 42, -70, -3, 49, 117, -63, 96, -86, -90]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[117, 90, 17, 20, 85, 61, 114, 79, 16, 111, -102, 8, 10, -75, -105, -100]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-73, 89, 112, -62, -21, 41, -24, -54, -77, 70, 58, -67, 103, -2, 31, 26]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[104, -100, 84, -67, -53, 115, -94, -76, -52, 62, 29, -72, 71, 16, -7, -51, 121, 97, 6, 51, 113, 126, -114, -35, 71, 12, -95, 43, 39, 42, -74, 11, 117, 90, 17, 20, 85, 61, 114, 79, 16, 111, -102, 8, 10, -75, -105, -100]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-110, -128, -103, -121, 101, -112, -49, 2, 71, -125, -52, 114, 127, 78, 92, 65, 61, -125, 55, -62, -13, 74, 47, -119, -11, 74, 64, -39, 10, -74, -103, -11, 117, 90, 17, 20, 85, 61, 114, 79, 16, 111, -102, 8, 10, -75, -105, -100]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-41, 3, -104, -94, -81, -111, 0, 11, 67, 18, 122, 73, 67, -27, 112, 106, 11, 10, 51, -20, 102, 115, -42, -105, -8, -19, -1, 98, 57, -69, -19, -74, 19, -103, 34, -107, 37, 106, -99, -94, -85, -10, 12, 118, -113, -49, -56, -85, 95, 84, 107, 65, 82, 57, -71, -48, -95, 21, -85, 13, -57, -117, -17, 73, -103, 114, 77, 55, 45, -68, 69, -25, 15, -101, -58, -122, -94, -75, -127, 101, -28, 49, -50, -73, -114, 78, -32, -102, -74, 74, 101, 38, -85, 125, 99, 49, 117, 90, 17, 20, 85, 61, 114, 79, 16, 111, -102, 8, 10, -75, -105, -100]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-41, 3, -104, -94, -81, -111, 0, 11, 67, 18, 122, 73, 67, -27, 112, 106, 11, 10, 51, -20, 102, 115, -42, -105, -8, -19, -1, 98, 57, -69, -19, -74, 19, -103, 34, -107, 37, 106, -99, -94, -85, -10, 12, 118, -113, -49, -56, -85, 95, 84, 107, 65, 82, 57, -71, -48, -95, 21, -85, 13, -57, -117, -17, 73, -103, 114, 77, 55, 45, -68, 69, -25, 15, -101, -58, -122, -94, -75, -127, 101, -28, 49, -50, -73, -114, 78, -32, -102, -74, 74, 101, 38, -85, 125, 99, 49, 117, 90, 17, 20, 85, 61, 114, 79, 16, 111, -102, 8, 10, -75, -105, -100]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-125, -59, -126, 68, 86, -30, -116, 110, -61, 122, 114, -39, 112, 91, 124, -105, 17, -86, -108, -87, 61, -75, -6, 115, -108, 48, -58, -53, -124, 90, 16, 62, -57, -56, 10, -49, -25, -107, 95, 109, -115, 8, -92, -9, -86, -102, 110, 75, -16, 29, -13, -74, -12, 94, 18, -111, -96, 59, -55, 69, -109, -116, -93, 30, -28, -84, 95, 63, 114, -57, -112, 122, 89, 4, -45, -85, -39, 52, -88, -122, 104, -8, 72, -126, 67, 38, 109, -120, -121, -16, -52, -18, -6, -100, 112, -102, 117, 90, 17, 20, 85, 61, 114, 79, 16, 111, -102, 8, 10, -75, -105, -100]");
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("7CA49FB87215185DDB50BA3084C558F36D00F53E952403E977CB3632DE840FE960FDBC24442AAAB8B37E391826BC1C1E87980A92D112094033FD24B876593F2EF6182DB6D31A14F6B8E49CEEC74CA7003F717F754356175B555ECF25F8DE63FBA48E91FA121C2BA2CB8028DB8F7D15CD", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[15, 82, -96, 47, 118, 76, 31, -89, 41, 49, 47, -124, -6, -62, 44, 86]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[11, -71, 4, -85, -60, 8, -114, -56, 113, -70, 31, -72, 29, 33, -61, -100]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[94, -79, 21, 116, -26, -60, -127, -40, 85, 27, 35, 17, 91, 52, -99, 109]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-88, 26, 100, 101, -72, 126, -80, -114, -35, -55, 113, -76, -12, -54, -31, 48, -91, -64, 95, -12, 34, 48, 72, -52, -45, 71, 28, -102, 51, 1, -18, -113, 15, 82, -96, 47, 118, 76, 31, -89, 41, 49, 47, -124, -6, -62, 44, 86]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-66, -37, 93, 9, -113, -91, 98, -67, -37, -22, 101, -127, 49, 110, -27, 13, 53, 126, 48, 33, -81, -48, 37, -86, -86, -86, 18, -98, 87, -102, -119, -98, 15, 82, -96, 47, 118, 76, 31, -89, 41, 49, 47, -124, -6, -62, 44, 86]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, -120, 103, -117, -76, 104, -75, 58, 68, 7, 124, -31, -120, 84, -49, -19, -123, 19, 12, 114, 45, -98, 94, -36, -61, -28, 65, 63, -62, 83, -33, -20, 15, 82, -96, 47, 118, 76, 31, -89, 41, 49, 47, -124, -6, -62, 44, 86]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey18);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey55);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey55);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey55);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey55);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey55);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("76B6C9460E19133E83C714B4E6062601", secretKey55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey55);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[86, -53, -56, -124, 49, -86, -106, 105, -74, -85, 86, -28, -56, -47, 52, -57]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[31, 96, 102, -15, -23, 42, -96, -14, -52, 82, -125, -35, -85, 12, 99, 29]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[16, -37, -106, 112, -60, 38, 16, -87, 91, 122, -118, -30, 85, 6, 97, 20]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-65, -46, -124, -74, 113, 11, 122, 52, 100, -51, 51, -13, 77, -20, -95, 109]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-52, 5, 87, -123, 37, -22, -5, 13, 51, 96, -84, -106, 9, -114, 73, -3, -32, -32, -100, -65, -83, 71, -6, -25, -36, -120, -120, -76, -38, -128, 92, -72, 16, -37, -106, 112, -60, 38, 16, -87, 91, 122, -118, -30, 85, 6, 97, 20]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-113, -96, 46, -83, -1, -8, 60, -106, 119, -50, 111, -96, 119, -5, 8, 103, 2, -87, -7, 43, -12, 105, -100, 3, 85, -94, 58, -87, 116, 118, -74, -112, 16, -37, -106, 112, -60, 38, 16, -87, 91, 122, -118, -30, 85, 6, 97, 20]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[109, -82, 113, -46, -118, -121, 44, 113, 120, -39, 68, 64, 95, -124, -103, 82]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-58, 22, 40, -107, 90, -93, -88, 53, 6, 23, -53, -128, -9, -29, 48, -9]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[102, -101, -8, 74, -13, -24, 123, 86, 28, -86, 116, 12, 114, -100, -19, -30]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[8, 81, -8, -121, -43, -35, -60, -88, -51, 74, -74, 31, -4, 119, 108, 120]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-84, -90, -10, -51, 114, 85, -116, -47, -4, 80, -35, -3, 0, -30, 36, 99]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[126, -21, -36, -84, -71, 1, -4, -1, 110, -3, -69, -105, -39, 96, -47, -15]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-22, -116, -103, 108, -116, 12, -121, -53, -120, -16, 13, 83, 14, -98, -76, 85, -52, -84, -39, -41, -19, -45, 43, 50, -47, -51, -32, 54, -8, -84, -34, -33, -84, -90, -10, -51, 114, 85, -116, -47, -4, 80, -35, -3, 0, -30, 36, 99]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[88, -110, 77, -33, 21, 72, 120, 114, 104, -24, 54, -105, -77, -82, 72, 58, -46, 39, 2, -38, 85, 9, 125, -103, 32, -37, 45, 50, -1, 56, 57, 20, -84, -90, -10, -51, 114, 85, -116, -47, -4, 80, -35, -3, 0, -30, 36, 99]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[96, -28, 40, 39, -15, -6, -104, 41, -31, 59, 122, 32, -33, -128, 86, -56, 12, 52, -13, 79, -63, 16, -88, -74, 13, -31, 15, 110, 73, -16, -57, 3, 107, 116, -82, 23, -104, -81, 52, 61, 37, 102, -30, -11, 43, -35, 90, 4, 84, 56, -2, 93, 104, -62, -26, -120, 83, 105, -31, -50, 15, -125, 32, 116, -101, -23, -105, 99, 10, 122, 97, -87, -77, 68, 107, 5, -48, 6, -58, -50, 90, 70, 43, -73, 22, -42, 119, 79, 104, -118, -98, 119, -94, 68, -79, 59, -84, -90, -10, -51, 114, 85, -116, -47, -4, 80, -35, -3, 0, -30, 36, 99]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[46, -20, 112, -66, 33, 110, -33, 119, 12, -118, -3, -128, -111, 7, -9, 11, 125, 118, 8, 120, 4, 122, 112, 23, 115, -113, 7, -121, 121, 89, 52, -5, -84, -90, -10, -51, 114, 85, -116, -47, -4, 80, -35, -3, 0, -30, 36, 99]");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey28);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey62);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey62);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey62);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey62);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey62);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey62);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey62);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey62);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey62);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-118, -32, -73, -92, 46, 27, 126, -27, -19, -61, 88, 119, -105, 47, 85, -112]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-87, 15, -26, 123, -1, -50, 111, -5, -127, -50, -70, 53, -90, 122, -65, -108]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[17, 51, -80, 89, -74, 81, -91, -70, 18, -89, 75, -40, -108, 64, 99, 115]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[119, 20, -100, -82, -86, -76, -66, -11, 43, -47, -99, -88, -66, 59, -84, -42]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[13, 33, 1, 122, 54, 70, -34, 47, 118, 12, 108, -2, 60, -92, -72, -91]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122, 92, 73, -118, -72, -13, 113, 53, 92, 34, 74, -49, -53, -68, 109, 61]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-122, 92, 73, -118, -72, -13, 113, 53, 92, 34, 74, -49, -53, -68, 109, 61]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-70, -43, -88, 84, -82, -120, 92, 126, -71, -87, 106, -124, -45, -84, -97, 108, -62, 50, 36, -106, 57, -36, 46, 51, 97, -84, 87, -106, -56, 121, -124, 58, 13, 33, 1, 122, 54, 70, -34, 47, 118, 12, 108, -2, 60, -92, -72, -91]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-99, 119, -112, 22, 10, 9, -20, 58, 7, -110, 6, 124, 29, 22, 77, 48, -101, 105, -33, -85, 45, 17, -74, 93, 105, 65, -128, 18, -99, 5, 87, -39, 13, 33, 1, 122, 54, 70, -34, 47, 118, 12, 108, -2, 60, -92, -72, -91]");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9D7790160A09EC3A0792067C1D164D309B69DFAB2D11B65D694180129D0557D90D21017A3646DE2F760C6CFE3CA4B8A5" + "'", str36, "9D7790160A09EC3A0792067C1D164D309B69DFAB2D11B65D694180129D0557D90D21017A3646DE2F760C6CFE3CA4B8A5");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9D7790160A09EC3A0792067C1D164D309B69DFAB2D11B65D694180129D0557D90D21017A3646DE2F760C6CFE3CA4B8A5" + "'", str37, "9D7790160A09EC3A0792067C1D164D309B69DFAB2D11B65D694180129D0557D90D21017A3646DE2F760C6CFE3CA4B8A5");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-32, 46, 78, -59, -29, -17, -29, 76, 78, 92, 94, -74, -117, -105, -110, 52]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-86, 7, 110, 119, 0, 25, 111, 9, 68, 96, 83, 26, -4, -79, -4, -121]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[56, -101, 19, 72, -40, 87, -98, -30, -112, -88, 46, -117, 99, -123, 18, -81]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-127, 64, -102, -75, 66, 46, -77, -49, 86, 116, -127, 42, -22, 10, -105, -121]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-13, 86, 102, 36, -31, -66, -121, 76, 9, 125, 118, -127, -108, -6, 88, -70, -66, 90, 91, -9, -53, -125, -70, 29, 60, 115, 126, -125, -20, 117, -90, -34, 56, -101, 19, 72, -40, 87, -98, -30, -112, -88, 46, -117, 99, -123, 18, -81]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-118, -71, 45, 124, 103, 85, -66, -3, 59, 111, 109, -25, 35, 17, 9, -81, 124, 124, -94, 9, -14, 110, -101, -83, -28, -24, 113, 124, -6, -119, -111, 94, 56, -101, 19, 72, -40, 87, -98, -30, -112, -88, 46, -117, 99, -123, 18, -81]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-22, 52, -16, -85, 67, -45, -24, -119, 68, -56, 44, -75, 29, -31, 58, 93, -5, 22, 110, 109, -70, -111, -7, -116, -43, -124, 102, -125, 93, 63, 21, 92, -19, 20, 9, 82, -59, -69, 97, 25, 69, 33, -73, -124, -15, 55, -51, -104, 112, -76, -9, 52, -10, 56, -42, 85, 69, 122, -44, -66, -9, 74, -56, -64, -12, 98, 73, 86, 117, 10, -125, -120, 123, -51, -11, -38, 9, 56, 14, 12, -52, 47, -83, 97, 95, 111, -53, 91, 58, -6, 31, 110, 74, 100, -119, -24, 56, -101, 19, 72, -40, 87, -98, -30, -112, -88, 46, -117, 99, -123, 18, -81]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-107, -34, -16, 109, -126, -126, -48, -83, 112, -38, 58, -65, 102, -60, 97, -72, 126, 103, 83, -71, 109, -115, -67, 127, -30, -100, 49, 13, 82, 58, -55, -1, 96, -30, -72, -123, -26, -94, -11, 32, -50, 11, -62, 93, 38, -104, -15, -3, 24, 84, 117, -57, -110, 23, -110, 124, -103, -47, 62, -16, 124, -84, -124, -82, 56, 87, 77, 124, 86, 54, 87, -66, 127, 35, -13, 26, -83, -89, 17, 19, 105, -53, -124, -71, 63, 74, 55, -1, -112, 14, -36, -24, 30, -120, -79, 113, 56, -101, 19, 72, -40, 87, -98, -30, -112, -88, 46, -117, 99, -123, 18, -81]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[56, -101, 19, 72, -40, 87, -98, -30, -112, -88, 46, -117, 99, -123, 18, -81]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-49, 58, 93, -107, -58, 90, 41, 48, -71, -29, -1, -29, -77, -86, -73, -53, 119, -85, 23, -76, 43, -61, -21, 127, -9, -89, -68, 39, -57, -51, 111, 39, 56, -101, 19, 72, -40, 87, -98, -30, -112, -88, 46, -117, 99, -123, 18, -81]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[113, -102, 4, -76, -23, 31, -62, 111, 44, 58, 44, 115, 93, 78, 114, 122, 11, 109, 105, -111, -97, -33, 81, -60, -73, -89, 108, 116, 104, -26, -107, -36, 113, 38, -119, -42, -29, 36, 72, -83, -84, -86, -83, -105, -52, -8, 126, 9, 21, 32, -120, 102, 110, -2, -86, -27, -69, 79, -98, 52, 59, -91, -27, -71, -18, 125, -72, -84, -108, -103, 72, -31, -12, -58, -44, -56, 66, -13, 14, 68, 39, -95, -51, 13, 107, -69, -10, 90, 64, 95, -66, -86, -94, -44, 76, -94, 56, -101, 19, 72, -40, 87, -98, -30, -112, -88, 46, -117, 99, -123, 18, -81]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-48, -60, -99, -111, -87, 48, -88, 13, 92, -36, -56, -97, -108, 53, 102, 3, 17, -99, 51, -111, 0, 86, -24, -30, 9, -123, -87, 34, -102, 114, 32, -31, 56, -101, 19, 72, -40, 87, -98, -30, -112, -88, 46, -117, 99, -123, 18, -81]");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey6);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-5, -36, 55, -80, -15, -56, 49, 86, -36, -62, -35, -119, 57, 96, -18, -100]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-71, 45, 114, -86, 94, 61, 62, -100, 109, 82, 114, 65, 96, -86, -72, 43]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-71, 45, 114, -86, 94, 61, 62, -100, 109, 82, 114, 65, 96, -86, -72, 43]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[121, -97, 102, 60, 37, 14, 73, -106, -80, 105, -34, 97, 52, 55, -120, 108, 105, -99, -23, 101, -10, -13, 98, -82, -65, 23, 108, -114, -74, -29, -55, -126, -5, -36, 55, -80, -15, -56, 49, 86, -36, -62, -35, -119, 57, 96, -18, -100]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-50, 2, 58, 57, -88, -53, 22, -97, 75, -101, 62, 58, -110, 96, -46, -65, -47, -66, -38, 94, 20, -55, 86, -64, -3, 109, -98, -15, 78, -22, 4, -113, -5, -36, 55, -80, -15, -56, 49, 86, -36, -62, -35, -119, 57, 96, -18, -100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-19, -59, 97, -62, 98, 13, -105, 9, -34, 18, 2, 11, 40, 1, 26, 3]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-48, -90, -76, 27, -95, 91, 5, 97, -64, -64, -66, -106, 35, -127, -113, 69]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122, -34, 5, 90, -74, -56, -59, 72, 62, 4, 97, -15, 62, 57, 95, 64, -56, 61, 25, -58, -68, -44, 103, 3, -97, -122, 64, -100, -14, 86, -100, -52, -58, -11, 26, -63, 24, -42, -19, 75, -22, 37, -28, -92, 21, 118, 25, -69, -67, 119, -28, -30, 9, 42, 39, -38, -112, -119, -89, -92, -12, -48, -30, 59, -27, 124, -113, 58, -103, -82, -64, -34, -19, 120, -69, -83, 70, -31, -60, -82, -61, -72, -52, -114, -21, 60, 25, -28, -8, 75, -67, 9, 44, -6, 61, -26, -19, -59, 97, -62, 98, 13, -105, 9, -34, 18, 2, 11, 40, 1, 26, 3]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-56, -66, -33, 53, 90, -8, -27, 111, -51, 57, 114, -102, 109, 97, -113, 92, 58, -68, -11, -56, 31, -106, 99, -42, 87, -77, 115, 99, -78, -50, -39, 95, -19, -59, 97, -62, 98, 13, -105, 9, -34, 18, 2, 11, 40, 1, 26, 3]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[122, -3, 79, 0, -29, -2, 56, 97, 74, 102, 58, -7, -80, 30, 98, -82, -19, 73, -117, 95, -17, -68, 56, 81, 12, 113, 4, -71, -30, -99, -122, -128, -12, -90, 0, -128, -30, -45, -100, 22, 38, -65, 26, -91, 2, -60, 22, -89, 17, 75, -37, -44, -28, 58, -29, -103, -34, 85, -49, -33, 101, 98, -123, 32, 25, 36, -55, 102, -49, -40, -8, 100, 105, -100, 3, -122, 30, 55, -38, 71, 63, -92, -98, -106, 38, 115, -96, -85, -45, -99, -118, 103, 115, 71, -102, 67, -19, -59, 97, -62, 98, 13, -105, 9, -34, 18, 2, 11, 40, 1, 26, 3]");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey49);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey49);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey49);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey49);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-95, 11, 93, -38, -46, 6, 45, 100, 54, -84, -117, 39, 11, -98, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[73, -98, 90, -4, 111, -33, -100, -28, 56, 100, 81, -51, 32, -123, 88, -106]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[38, -50, -71, 89, -6, 1, -39, -110, 88, 17, -125, -37, -106, -17, 109, -14]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[8, -80, 92, -39, 102, 15, 49, -11, 103, -20, -63, 119, -125, -54, 17, 45]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-69, -74, 55, -125, -105, 22, -73, -75, 47, -3, -89, 35, 124, -112, -7, 82, -37, 105, -124, -37, 90, 11, 90, 113, -74, 27, 36, 45, 101, -77, 39, 122, 38, -50, -71, 89, -6, 1, -39, -110, 88, 17, -125, -37, -106, -17, 109, -14]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[38, -50, -71, 89, -6, 1, -39, -110, 88, 17, -125, -37, -106, -17, 109, -14]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[8, -80, 92, -39, 102, 15, 49, -11, 103, -20, -63, 119, -125, -54, 17, 45]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-38, 116, -123, -22, -39, -93, -111, 6, -100, -92, -79, 30, 94, -22, 67, 25]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[101, -8, 54, 90, 50, -74, 13, 118, -115, -44, -109, 68, -5, 83, -125, -49]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[37, -127, -43, -50, -99, 93, 115, -5, -48, -69, 84, 30, -13, 41, -19, -67]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-63, 92, -83, 10, -35, -83, 123, -97, 5, 103, 124, -92, -68, 28, 109, 79]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[17, 9, 10, -126, -59, -65, -127, 44, -121, 101, -51, 118, 124, 55, 102, 99, 90, -104, 62, 84, -98, 78, -112, -13, 82, 49, -68, -72, -18, -26, -128, -97, 37, -127, -43, -50, -99, 93, 115, -5, -48, -69, 84, 30, -13, 41, -19, -67]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[52, 36, -18, -54, 32, -73, -6, 71, 78, 111, 82, 36, 12, -62, -119, -117, -1, 109, -47, -57, -12, 24, -77, 54, 71, 64, 77, -36, -17, -88, -23, 11, 37, -127, -43, -50, -99, 93, 115, -5, -48, -69, 84, 30, -13, 41, -19, -67]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-90, 60, 69, 96, -85, 96, 48, 68, 77, 16, -48, 32, -67, 88, 113, -79, -19, 38, 66, 23, 116, -4, -63, -30, -88, -52, -71, -102, 72, 101, 85, -98, -81, -74, -39, -101, 115, 110, -107, -96, -84, 64, -50, -59, -58, -117, 85, -109, 122, 2, -28, -101, 117, 102, -75, 99, -14, 113, 122, 1, -18, -41, -99, -53, -60, 109, 84, -72, 5, -46, -17, 14, 71, -28, -27, -108, 87, 2, 106, 98, 93, 58, -7, -41, 120, 45, -77, -85, -33, 12, -39, -80, 63, -125, 46, 93, 37, -127, -43, -50, -99, 93, 115, -5, -48, -69, 84, 30, -13, 41, -19, -67]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-90, 60, 69, 96, -85, 96, 48, 68, 77, 16, -48, 32, -67, 88, 113, -79, -19, 38, 66, 23, 116, -4, -63, -30, -88, -52, -71, -102, 72, 101, 85, -98, -81, -74, -39, -101, 115, 110, -107, -96, -84, 64, -50, -59, -58, -117, 85, -109, 122, 2, -28, -101, 117, 102, -75, 99, -14, 113, 122, 1, -18, -41, -99, -53, -60, 109, 84, -72, 5, -46, -17, 14, 71, -28, -27, -108, 87, 2, 106, 98, 93, 58, -7, -41, 120, 45, -77, -85, -33, 12, -39, -80, 63, -125, 46, 93, 37, -127, -43, -50, -99, 93, 115, -5, -48, -69, 84, 30, -13, 41, -19, -67]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-75, 70, -11, 94, 37, -125, 34, 102, 97, 107, -23, 22, -11, -108, -39, 109, -78, 59, -112, -66, -52, -117, -112, 42, 119, -128, -103, -121, -58, -92, 107, -107, 22, 18, 99, 106, 32, 25, 112, -63, -45, -101, 120, 116, 82, 25, 28, -124, 6, 81, -103, 48, 48, -76, 71, -21, -34, -124, 9, -67, 28, -48, -46, -127, -13, 95, -94, -86, -17, 95, 48, 3, -34, 83, 104, 68, -78, 55, -128, -83, 66, -50, -65, -89, -35, -88, -57, -88, 17, -52, 40, -113, 76, -73, 96, -98, 37, -127, -43, -50, -99, 93, 115, -5, -48, -69, 84, 30, -13, 41, -19, -67]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-87, 101, -86, -32, -62, 79, -19, 0, -29, 80, -14, -70, 17, 95, -8, 45, -4, -18, -88, -3, -35, 18, 125, 44, 14, 49, -66, -79, -81, -108, -14, 91, 37, -127, -43, -50, -99, 93, 115, -5, -48, -69, 84, 30, -13, 41, -19, -67]");
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("85901A7A07774EF1B30A7D77F78D499830E94396D39F6D0A240A6BA509D22CD00BBA7DCDA4CC37D69BA13844D5AF219C", secretKey22);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-59, -90, 104, 109, 119, 24, 76, -20, -73, -29, 93, -17, -83, 20, -83, -40]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-76, 123, -43, 87, 96, 33, -47, -80, -89, -64, 45, -37, -47, 7, 2, -41]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-50, -115, -56, -116, -117, 109, 77, 26, 58, -128, -33, 64, 89, -76, 125, -17]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[32, -107, 124, 21, 30, 97, 41, 35, -44, -99, -50, 101, 127, 93, 61, -5]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[36, -88, 7, -96, -54, -25, 14, 80, 71, 66, -44, 57, 114, -51, -16, 118, -122, 119, -24, -10, -116, 31, -69, 11, 95, 12, -85, 3, 101, -59, -42, 70, -50, -115, -56, -116, -117, 109, 77, 26, 58, -128, -33, 64, 89, -76, 125, -17]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-50, -115, -56, -116, -117, 109, 77, 26, 58, -128, -33, 64, 89, -76, 125, -17]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[32, -107, 124, 21, 30, 97, 41, 35, -44, -99, -50, 101, 127, 93, 61, -5]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-20, -29, -100, -51, 9, -35, -11, 61, 117, 102, 8, -84, 78, -115, 120, 22, -105, 125, -53, -75, 43, -36, -32, -7, -9, 60, 26, -12, -57, 101, -47, 123, -50, -115, -56, -116, -117, 109, 77, 26, 58, -128, -33, 64, 89, -76, 125, -17]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[91, -14, 96, -22, -108, 67, -73, 84, 115, -34, 64, 82, -22, -97, 41, -115, -67, 31, -105, 74, -18, -116, -76, 6, -122, 62, 70, -10, 12, 44, -4, 85, -70, 10, 93, 54, -20, 82, -80, -116, 45, 125, 39, -8, 56, -42, 117, 13, -60, 38, -7, -127, 42, -5, -81, 16, -45, 58, -73, -101, 21, 94, 93, 51, -109, 71, -46, -41, -72, 116, -21, -108, -2, -9, -43, -108, 75, 78, 97, 114, 27, 18, -126, -21, -13, 65, -4, 84, -30, -70, 71, -31, 102, 98, 13, 104, -50, -115, -56, -116, -117, 109, 77, 26, 58, -128, -33, 64, 89, -76, 125, -17]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-108, 114, 96, -124, 33, 65, 113, -47, 111, -75, 14, -110, 54, 75, -19, -8, -58, -4, 107, -27, 96, 102, -20, 87, 95, -103, -9, -16, 66, -68, 13, -97, -43, 119, 84, -84, 118, 122, 114, 89, 72, 37, 57, -10, -120, 63, 65, 109, 12, 63, 45, 1, -21, -9, -30, -106, 62, 56, 38, 89, -57, 71, -92, -87, -68, -50, -6, -18, -109, -73, -7, 53, 86, -32, 35, -84, 8, -12, 81, 120, -14, -42, 86, 42, 59, 102, -49, -126, 5, 79, -117, -119, -4, 66, -102, 38, -50, -115, -56, -116, -117, 109, 77, 26, 58, -128, -33, 64, 89, -76, 125, -17]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[122, 123, -79, -40, 92, -47, 30, 78, -93, -22, 111, 1, 67, -46, -20, 47]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey10);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey10);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey10);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[31, -14, -39, 99, -38, 71, -118, -59, 62, -95, -67, -43, -109, -82, 16, 18]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, 2, -104, -6, 58, 87, -118, 53, 22, 6, -9, 5, 37, 117, 89, -89]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[85, 2, -104, -6, 58, 87, -118, 53, 22, 6, -9, 5, 37, 117, 89, -89]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[30, -64, 103, -62, -122, 25, -72, -109, -76, 76, -122, 110, 96, 90, -67, -52]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[85, 2, -104, -6, 58, 87, -118, 53, 22, 6, -9, 5, 37, 117, 89, -89]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[23, 31, 36, -9, -124, -85, -43, -87, 74, -75, -10, -100, -96, -26, -21, -4, 127, -95, -46, 5, 108, -18, -46, 91, 114, -122, -3, -111, -42, 56, -37, -18, 31, -14, -39, 99, -38, 71, -118, -59, 62, -95, -67, -43, -109, -82, 16, 18]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-18, 1, -56, -59, -43, -115, 111, 39, 102, -122, -96, 83, 31, 2, -16, -74, -11, 36, -119, -98, 1, -48, -99, -55, -29, -14, -4, -67, 11, -89, 40, -2, 62, 63, -48, -126, 67, -85, -119, 32, -87, 43, -58, 0, 1, 1, 106, -97, 9, 30, -127, -1, 116, 69, -1, 0, -103, -48, 87, 12, 99, -10, -94, -78, -80, 107, 40, -53, -69, -29, -23, 62, 47, 77, 16, -104, -95, 41, 123, -74, -12, 69, 65, 108, -29, 105, -93, -8, 7, -109, -18, -38, -86, -59, 60, -17, 31, -14, -39, 99, -38, 71, -118, -59, 62, -95, -67, -43, -109, -82, 16, 18]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-12, 77, -71, -102, 42, 107, 86, -26, -61, 21, -21, -99, 39, -65, 15, 70, 84, -121, 99, 99, 26, 66, -83, -96, -20, -117, 84, 81, -111, -67, 112, -74, -104, 40, 35, 36, 25, -101, -30, -2, -55, 87, 28, 11, -105, -24, 26, -45, -1, 101, -71, 83, -78, 118, 2, -119, -69, -76, -122, -4, 13, -113, -97, -107, -109, -97, 76, 125, -72, 12, 36, 29, 86, 42, 117, -74, 80, -79, -34, 107, 48, -64, 13, 115, -46, -4, -40, -113, 116, -127, 68, 36, -107, 49, -2, 33, 31, -14, -39, 99, -38, 71, -118, -59, 62, -95, -67, -43, -109, -82, 16, 18]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[70, 75, 44, -101, -58, -113, 105, -82, -53, 5, 52, 95, -1, 28, 35, 76, 99, 19, 14, 82, -22, -112, -27, -80, 1, -69, 121, -69, -99, -87, -59, 101, 31, -14, -39, 99, -38, 71, -118, -59, 62, -95, -67, -43, -109, -82, 16, 18]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[31, -14, -39, 99, -38, 71, -118, -59, 62, -95, -67, -43, -109, -82, 16, 18]");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1FF2D963DA478AC53EA1BDD593AE1012" + "'", str21, "1FF2D963DA478AC53EA1BDD593AE1012");
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey43);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey43);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey67);
        byte[] byteArray73 = new byte[] {};
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray73);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey75);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey79);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey79);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey79);
        byte[] byteArray83 = new byte[] {};
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray83);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray83, secretKey85);
        javax.crypto.SecretKey secretKey89 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey89);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey89);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray83, secretKey89);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey89);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey89);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey89);
        java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey89);
        java.lang.String str97 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey89);
        byte[] byteArray98 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey89);
        byte[] byteArray99 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey89);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-61, -122, 75, -58, 125, -46, 1, -93, -48, 21, 75, -90, -44, 57, -56, -97]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[56, -108, 114, 36, 26, -17, -64, 39, 21, 38, -108, -40, -27, 47, 54, 63]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[39, -122, -32, 92, 16, 70, 37, 105, -41, 3, 94, 122, 92, 22, 7, 56]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-128, -101, 3, 91, 126, -52, 36, -80, 88, -5, 70, 39, 127, -46, 127, -88]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-120, -79, -81, 7, -26, -52, -109, 104, -112, -49, 77, 116, -122, 109, 88, -43]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-29, -4, -26, 46, 69, 29, 48, 86, 40, -14, 59, 93, 67, 25, 105, 77]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-16, 106, -113, 118, 96, 69, -30, -125, 102, -13, -64, 64, 37, -34, 123, -104]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[9, -63, -37, 98, 52, -102, -121, -75, -22, 35, -128, -56, 4, -95, -93, 58]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-47, -26, 1, 104, 32, 36, -31, -116, -90, -127, -111, -31, 127, 50, -64, -11, -98, -99, 127, -115, -48, -59, -99, 48, -81, 21, -116, -46, -95, -9, 71, 42, -16, 106, -113, 118, 96, 69, -30, -125, 102, -13, -64, 64, 37, -34, 123, -104]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, -50, 104, -35, -121, -79, -120, 119, 113, 53, -72, 45, 43, 24, 38, -15]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[124, -73, 44, -84, -107, -104, -90, -58, 27, -42, 61, 123, 93, -125, -117, 125]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[68, -82, 56, 8, -78, -90, 69, 44, -40, -18, 28, -73, 29, 38, 17, 37]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-36, -103, 56, -115, 65, 9, 42, 80, 38, 56, -10, -74, 122, -36, -61, 50]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[107, 31, -38, -98, -127, 74, -79, -6, -39, -3, 94, -36, -90, 35, 101, -119]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[59, 4, -34, 84, -91, -101, -62, 60, 57, -47, 78, -22, 99, -28, -23, 107]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(secretKey89);
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-99, 52, 98, -99, 2, 71, -67, -40, -43, -111, -125, -57, -108, 8, -100, 100]");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-122, -33, -17, 70, -113, -56, 110, -38, 126, 56, -8, 42, -81, 11, 24, -99]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-25, 82, 49, 40, 35, 3, 100, 111, 123, 125, -5, 1, 97, -121, 103, 37, 110, 39, 37, 15, -84, -51, 103, -91, -19, 10, 114, 91, -97, -75, -67, 23, -99, 52, 98, -99, 2, 71, -67, -40, -43, -111, -125, -57, -108, 8, -100, 100]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(byteArray98);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[-25, 82, 49, 40, 35, 3, 100, 111, 123, 125, -5, 1, 97, -121, 103, 37, 110, 39, 37, 15, -84, -51, 103, -91, -19, 10, 114, 91, -97, -75, -67, 23, -99, 52, 98, -99, 2, 71, -67, -40, -43, -111, -125, -57, -108, 8, -100, 100]");
        org.junit.Assert.assertNotNull(byteArray99);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[104, -127, 103, 14, 50, -117, -128, 59, -72, -64, 18, -83, -58, -41, -92, 96, -35, -72, 22, 53, -38, 39, -104, 54, 88, -3, 110, 107, 73, 6, -88, 60, -99, 52, 98, -99, 2, 71, -67, -40, -43, -111, -125, -57, -108, 8, -100, 100]");
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
        java.lang.Class<?> wildcardClass38 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-95, -16, -34, 31, -57, -95, -17, -115, 99, 18, 10, -78, 29, -65, -60, 12]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-109, -101, 101, 101, 70, 116, 71, 75, 96, -4, -14, -17, -22, -28, -32, -30]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-117, 112, -27, 99, -52, -14, -27, -61, 79, 58, -43, 11, 71, -74, -90, 2]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-18, 106, 65, -65, -73, -67, 63, -71, -125, -98, -85, -77, -23, 83, 98, 120]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[19, -56, 59, 67, 26, 53, 2, -36, -76, 9, 10, -57, 92, 86, 84, -94]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[122, 89, -20, 113, -124, 76, -13, -100, -38, 18, 42, 53, 49, 31, -98, 121, 66, 19, 12, -51, 63, -3, 112, 39, 16, -26, -26, -3, 96, 69, 103, -94, -18, 106, 65, -65, -73, -67, 63, -71, -125, -98, -85, -77, -23, 83, 98, 120]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[70, -118, 24, 105, -124, -74, -50, -115, -49, 120, 127, 30, 90, 71, -58, -2]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[102, 122, -37, -68, 2, -33, -76, 121, 38, -60, 101, 90, 71, 21, -17, 122]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[102, 122, -37, -68, 2, -33, -76, 121, 38, -60, 101, 90, 71, 21, -17, 122]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, -118, 24, 105, -124, -74, -50, -115, -49, 120, 127, 30, 90, 71, -58, -2]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "468A186984B6CE8DCF787F1E5A47C6FE" + "'", str9, "468A186984B6CE8DCF787F1E5A47C6FE");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey53);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey53);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey53);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey53);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[61, -19, 51, -93, 126, -4, 80, 109, 87, -36, -95, -8, -60, -4, 98, -14]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[22, 2, -25, 19, 94, -40, 89, 100, 50, 126, 82, -70, 49, -37, -26, -113]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[13, -73, 56, 121, -36, -52, -33, -52, 82, 24, 38, 73, -106, -110, -123, 126]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-39, -19, -30, 91, 54, 43, -16, 90, -34, -117, -29, -82, -126, 58, 52, 45]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-37, 59, -40, 22, -117, 88, -113, 109, -47, -17, 45, 110, -66, -61, 110, -86, 93, 50, 39, -95, 9, -25, -25, -36, 97, -73, -47, -112, -51, -100, 98, 63, 13, -73, 56, 121, -36, -52, -33, -52, 82, 24, 38, 73, -106, -110, -123, 126]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[16, 31, -8, 1, -90, 115, -30, -15, -106, 110, -46, -36, 104, -76, 54, 48, -123, 2, 58, -57, -33, -79, -64, -73, 70, 4, -44, -104, -55, 75, 29, 27, 13, -73, 56, 121, -36, -52, -33, -52, 82, 24, 38, 73, -106, -110, -123, 126]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, -60, -69, 112, -116, -83, 63, -79, -84, 16, 67, 97, -127, 98, 30, -57, 85, -36, -65, 23, -94, -87, 79, 84, 104, -3, 62, 3, -67, -87, -86, 35, 86, -94, 81, -16, 71, 47, 61, -97, -93, -17, 32, 50, 16, 123, 5, -7, 58, 105, 25, 85, -63, 33, -55, -73, -1, -45, -102, 88, -72, 44, -88, -10, -95, -4, 74, -116, -65, -127, 71, -119, -85, 46, -19, 24, 10, -32, -66, -36, 44, -103, -126, -74, -71, -115, 21, 46, -62, 15, -126, -18, -8, 67, 0, 101, 13, -73, 56, 121, -36, -52, -33, -52, 82, 24, 38, 73, -106, -110, -123, 126]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 74, -31, 84, 8, -21, 9, 107, -1, -7, -9, 77, 98, -80, 45, 57, 11, -48, 50, 113, -35, 36, 55, -8, 45, 2, 41, -113, -91, 70, 109, -34, -123, -9, 80, -79, -53, -113, 24, 96, -120, -4, -21, 41, -77, 74, 44, -121, -94, 61, 1, 105, -69, -126, 32, 25, 54, -73, -88, -56, -26, 10, 113, 43, 37, 39, 9, 124, -62, -53, -75, -1, -69, -20, 73, 94, -90, 94, -18, 23, -8, 126, 110, 18, 4, -62, 103, -38, -6, 102, 27, 97, 107, 118, -58, -113, 13, -73, 56, 121, -36, -52, -33, -52, 82, 24, 38, 73, -106, -110, -123, 126]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "594AE15408EB096BFFF9F74D62B02D390BD03271DD2437F82D02298FA5466DDE85F750B1CB8F186088FCEB29B34A2C87A23D0169BB82201936B7A8C8E60A712B2527097CC2CBB5FFBBEC495EA65EEE17F87E6E1204C267DAFA661B616B76C68F0DB73879DCCCDFCC521826499692857E" + "'", str29, "594AE15408EB096BFFF9F74D62B02D390BD03271DD2437F82D02298FA5466DDE85F750B1CB8F186088FCEB29B34A2C87A23D0169BB82201936B7A8C8E60A712B2527097CC2CBB5FFBBEC495EA65EEE17F87E6E1204C267DAFA661B616B76C68F0DB73879DCCCDFCC521826499692857E");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-70, -8, 89, -1, 88, -3, 67, -126, -70, -68, 95, -75, 122, 53, -27, -67]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-89, 87, -113, 7, -22, 96, -20, 4, -122, 45, -99, -41, 42, -82, -119, -111]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[42, -119, -66, 49, -18, -3, -29, -4, 85, -25, -106, -47, -40, 31, -5, -105]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[70, 20, -70, 20, 78, -41, 43, -15, 52, -53, 25, 115, 98, -37, 64, -95]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, -91, -87, -68, 119, -117, -94, -24, -104, -41, -80, -12, 36, -2, 122, -51, -57, 19, -92, -72, 102, 112, -88, 49, 11, 91, -28, 96, 25, -107, -122, 121, 42, -119, -66, 49, -18, -3, -29, -4, 85, -25, -106, -47, -40, 31, -5, -105]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-52, -87, -15, -35, 34, -89, -93, -41, -10, 32, 89, -112, -59, 9, 106, -3, -57, 20, -1, -49, -75, 116, -16, -81, -4, 9, 66, 38, -11, -78, 105, 15, 42, -119, -66, 49, -18, -3, -29, -4, 85, -25, -106, -47, -40, 31, -5, -105]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-51, 100, 21, -128, -97, 4, 61, -22, -4, -128, 52, 9, -64, -24, -32, -93, -106, -29, 36, 116, -51, 117, -57, -116, -84, -40, -106, 116, 91, -83, -98, -29, -51, 99, 23, -94, 40, -24, -59, 121, 112, 115, -118, -89, -94, -103, -22, -74, 19, -105, -6, -49, -57, -94, -39, 65, -85, 37, 101, -58, 36, -53, -50, -71, 14, 101, -54, -120, -76, 64, 122, -79, -79, 59, -51, -32, 38, -46, -95, 51, -107, 80, 13, -121, -50, 40, -16, -70, 7, 68, -57, -95, 21, 51, -11, 78, 42, -119, -66, 49, -18, -3, -29, -4, 85, -25, -106, -47, -40, 31, -5, -105]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-2, 121, 14, -68, -74, 87, 118, 34, -1, 92, 25, -35, -2, 116, -110, 13, -88, -10, -49, -12, 90, -107, -86, -17, -75, -102, 72, 32, -3, -111, 2, 116, 121, 113, -55, -106, 14, 28, 24, 35, -80, -9, 6, -103, 58, 41, -70, 9, 3, 37, 114, 98, -98, -35, -78, 79, -125, 112, -7, -35, -38, -80, -30, -43, 118, 94, -80, 95, 47, 62, 65, -12, -31, 74, 126, 46, -17, 58, 58, -118, -37, 40, -4, 4, 54, -107, 106, 7, -36, 31, -78, 34, 123, -106, 76, -115, 42, -119, -66, 49, -18, -3, -29, -4, 85, -25, -106, -47, -40, 31, -5, -105]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-83, 93, 98, -31, 121, -9, 64, -26, 34, 46, 106, 116, 122, -3, 43, -121, 109, -66, 9, -17, 51, -126, -73, 76, 82, -76, -7, -31, -4, 108, 57, 6, 42, -119, -66, 49, -18, -3, -29, -4, 85, -25, -106, -47, -40, 31, -5, -105]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[42, -119, -66, 49, -18, -3, -29, -4, 85, -25, -106, -47, -40, 31, -5, -105]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-80, 79, -17, -7, -115, 101, -78, -75, 29, 22, -53, -28, -29, 122, 86, 61, -62, -103, -23, 11, 18, -74, 48, 90, -67, 50, -74, 24, -33, 40, 51, -83, 42, -119, -66, 49, -18, -3, -29, -4, 85, -25, -106, -47, -40, 31, -5, -105]");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[66, -66, 47, 123, -111, -26, -60, -112, -5, -89, -67, -82, -108, 97, -94, -74]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[30, -33, -116, 107, -54, 120, 62, 43, 57, -9, 84, -73, 19, 67, -88, -48]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[30, -33, -116, 107, -54, 120, 62, 43, 57, -9, 84, -73, 19, 67, -88, -48]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1EDF8C6BCA783E2B39F754B71343A8D0" + "'", str7, "1EDF8C6BCA783E2B39F754B71343A8D0");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1EDF8C6BCA783E2B39F754B71343A8D0" + "'", str8, "1EDF8C6BCA783E2B39F754B71343A8D0");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey18);
        java.lang.Class<?> wildcardClass25 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[62, -13, 57, -113, -88, -13, 46, -34, 54, -67, 21, -128, 117, 34, -24, 76]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-78, -70, 75, 79, -75, -123, -59, 13, 90, -29, -60, -15, 108, -28, 41, 1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-77, -59, 92, 30, -39, 81, 31, -28, 87, 119, 56, -20, 15, 83, -123, 3]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-27, 89, -42, -31, 86, 65, 38, -73, 72, 40, -75, -108, -124, -66, 104, 112]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[55, 112, -59, 39, 80, -17, -92, -115, -19, -48, 1, 12, 35, -126, -99, -48, 72, 21, 16, 98, -23, 103, 31, -43, 54, -89, 70, -111, -13, -43, 76, 123, -77, -59, 92, 30, -39, 81, 31, -28, 87, 119, 56, -20, 15, 83, -123, 3]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-62, -110, 105, -102, 83, -6, -109, 44, -1, 5, -50, -38, -88, -76, 67, -114, 85, -49, -86, 109, -94, 77, -20, -124, 26, 76, 125, -72, 2, 116, 56, -108, -21, 51, 45, -116, 88, 27, -64, 65, 93, -92, -31, 90, 31, 86, -64, -108, 29, 89, 48, 42, 2, -24, 98, -127, 64, -58, 20, 114, 41, -11, 3, 48, -119, 50, -46, -101, 38, 49, 38, 41, 66, 56, -43, -80, -66, 87, -65, -89, 18, 38, -10, -101, -101, -89, 74, 39, 26, -42, -55, -120, 8, 99, -66, -86, -77, -59, 92, 30, -39, 81, 31, -28, 87, 119, 56, -20, 15, 83, -123, 3]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-88, 114, -89, -20, 106, 19, 115, -101, -34, 4, 78, 92, -48, 17, -119, 113]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[19, -13, -112, -124, -119, 123, -54, -100, -25, -18, 100, -124, 1, 58, -49, 71]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[19, -13, -112, -124, -119, 123, -54, -100, -25, -18, 100, -124, 1, 58, -49, 71]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-88, 114, -89, -20, 106, 19, 115, -101, -34, 4, 78, 92, -48, 17, -119, 113]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey54);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey54);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey54);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey54);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("C7E6D5DA2ED0973D63DD46433A42257BC953CDEDF0FF7BE4F924CB6E0BAC8779AB28809B0A9BCA3160E4D4C68B5246CC884C8F244127610D4FCF26106A28B55CDCC074E0A6C67ABCE19CFE5C790E45E7877EA397E659C994274087AFC6BFF7DBEEF58CC712BB1C750ACF3D0B26A5E7A587A3A5C48052EF2ECBDC522B41E778EC2DFFF63A4AB8ADF521AB9FEE2BC0948A7A96DE58F882B5200D4E8FE2F6C6C0A584FBB791A25C08F335AA0D7F498FE54EDFFC3B507B8A4D85E9B7FB4F8853EA1C3F60C18DBF4EBDBBA1F1A87315CE669595D58F0A25EF33C5C63EE7BC157EED457120495BF6BF33A182441D2A09992F22", secretKey54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey54);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[78, 56, 65, 5, -27, 45, 31, 73, -56, -120, -84, 108, 84, 36, -68, 103]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[41, -97, -72, -118, -50, -7, -60, 8, -89, 30, -27, -51, -49, -41, -85, -92, -17, 52, -100, -31, 23, 93, -57, 117, -77, 59, 52, 96, -72, -55, -39, 25, 96, -84, 51, 65, -89, -5, 110, 74, 38, 0, -21, -100, 45, 46, 53, 86, 100, -104, 124, 94, 13, -127, -95, -36, -64, 14, -31, 103, -55, -35, 117, -57, -17, 107, -72, -112, -48, 73, 97, 45, 52, -121, 98, -65, -125, 122, -48, 30, 107, -110, -47, 32, 55, -11, -25, 23, -114, 58, -26, 115, -64, 126, -41, -122, 78, 56, 65, 5, -27, 45, 31, 73, -56, -120, -84, 108, 84, 36, -68, 103]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "299FB88ACEF9C408A71EE5CDCFD7ABA4EF349CE1175DC775B33B3460B8C9D91960AC3341A7FB6E4A2600EB9C2D2E355664987C5E0D81A1DCC00EE167C9DD75C7EF6BB890D049612D348762BF837AD01E6B92D12037F5E7178E3AE673C07ED7864E384105E52D1F49C888AC6C5424BC67" + "'", str5, "299FB88ACEF9C408A71EE5CDCFD7ABA4EF349CE1175DC775B33B3460B8C9D91960AC3341A7FB6E4A2600EB9C2D2E355664987C5E0D81A1DCC00EE167C9DD75C7EF6BB890D049612D348762BF837AD01E6B92D12037F5E7178E3AE673C07ED7864E384105E52D1F49C888AC6C5424BC67");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[46, -104, -127, 76, 58, -16, 90, 33, -45, 121, 18, 118, -113, -75, -116, 74]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-44, 103, 60, 73, -33, -16, 113, -66, -41, -103, -96, 107, -62, 38, 14, -29]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[27, 7, 10, -10, -27, 48, -3, -22, -22, -49, -4, -35, -89, 48, 100, 46]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-48, 52, 115, -84, 76, -128, 111, 77, -30, 28, -108, -58, -87, -1, -63, 72]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[30, 73, 49, 36, 40, 83, -28, 0, 73, 88, -125, 45, 122, 127, -29, 63]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[66, 115, 83, -29, 114, 61, 16, 6, 41, -126, 119, -101, 16, -103, 14, -60]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[103, 96, 100, 127, -66, -62, 33, -15, 91, -106, -126, -59, 116, -20, 95, -29]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-81, 73, -78, 81, -49, -8, -118, -128, -53, -64, 9, 63, -29, -60, -119, 42]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-113, -119, -124, -45, -49, -73, 3, 112, -22, 99, 83, 58, 114, -109, 77, -34, 68, 69, 47, -8, 20, 55, -50, -4, 72, -101, 23, -33, -2, 28, 35, -2, 103, 96, 100, 127, -66, -62, 33, -15, 91, -106, -126, -59, 116, -20, 95, -29]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-39, 66, 95, -25, -70, 12, -78, 46, -95, -99, 81, 64, -113, 93, -50, -51, 4, -17, -93, -38, -15, 125, -116, -93, 15, -34, 109, 12, 31, 45, 49, 50, 103, 96, 100, 127, -66, -62, 33, -15, 91, -106, -126, -59, 116, -20, 95, -29]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey28);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey42);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey42);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey42);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey42);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-85, 127, -59, 66, -72, -22, 99, 38, 9, -48, 1, 4, 111, -52, -89, -35]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-117, -90, 29, -48, 126, 5, -49, -36, 69, 47, 83, -45, -69, -49, 52, -37]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-6, 13, -124, -43, 110, -40, -27, -27, 38, 75, 87, -67, -86, -73, 77, -13]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[102, 47, 38, -49, -9, 98, -43, 84, 68, 67, 32, -90, 80, 9, -14, -122]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-73, 117, 76, -108, 117, 25, -122, -59, 108, -55, 93, -109, 1, -8, -43, -52]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[104, -4, 107, 11, -61, -15, -128, -63, -107, -48, 123, -108, 22, -79, -17, -77]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[104, -4, 107, 11, -61, -15, -128, -63, -107, -48, 123, -108, 22, -79, -17, -77]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[87, -70, 77, 65, -14, -72, 109, 83, -93, -68, 107, 36, -9, -68, 122, 93, -124, -59, -112, -113, 98, -26, 21, -81, 87, -6, 120, -45, 115, -32, 93, 15, -73, 117, 76, -108, 117, 25, -122, -59, 108, -55, 93, -109, 1, -8, -43, -52]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-101, -128, 90, 55, 118, 33, -53, -76, -62, -52, -116, -74, -118, 88, -90, 62, 87, 79, -125, 83, -35, -6, 117, 61, 34, -120, -70, -96, 61, -94, -128, -87, 106, 119, 102, -70, -95, -22, -67, 40, -87, -63, 47, -20, -99, 51, 98, 69, 16, 55, 114, 116, 37, -61, -95, -25, -54, -84, 86, -19, -34, -89, 66, 9, 55, 101, -13, -31, -21, 20, 5, -66, -93, 70, 117, -53, -122, 36, 42, 33, -43, 31, 117, 43, -41, -110, -21, -53, -116, 34, 91, 50, 123, 77, -116, -41, -73, 117, 76, -108, 117, 25, -122, -59, 108, -55, 93, -109, 1, -8, -43, -52]");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-113, 25, 29, -78, -33, 78, 54, -20, 1, -69, 72, -35, 123, -28, 19, 52]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[39, -69, 65, -56, -127, 110, -69, -3, -97, 13, -8, -36, -50, -74, 104, 30]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-97, 121, -103, 85, 75, -27, -82, -104, -107, -88, -53, -117, -33, 92, 118, 51]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[86, -80, 91, 124, 10, -13, 123, -66, 31, 106, 33, -54, -100, 113, -12, -98, -97, 45, 127, -46, -67, 75, -90, -113, 109, 127, 102, 70, -125, -111, 121, -74, -113, 25, 29, -78, -33, 78, 54, -20, 1, -69, 72, -35, 123, -28, 19, 52]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[33, 75, -40, 5, 90, 86, 94, -117, 70, 23, -79, -47, -36, -7, -16, 60, 78, 118, 103, -34, -53, -105, -101, -48, 98, 108, -88, -88, -94, 80, -37, -35, -79, 68, -14, 48, -33, 70, 53, 114, -46, -85, -111, 118, 15, -31, -47, -33, -65, 71, -18, 6, 1, -20, 33, -80, 24, 120, 120, -64, -14, -42, 31, -106, 49, -121, -53, -122, -97, -32, -39, 107, 122, -119, -38, -49, 65, 107, 41, 0, 52, 22, 9, 31, 68, -91, -106, -127, 107, -36, -83, 117, 71, 104, -100, -72, -113, 25, 29, -78, -33, 78, 54, -20, 1, -69, 72, -35, 123, -28, 19, 52]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[47, 11, -25, -10, -24, -55, -97, 77, 83, 80, 127, -20, -80, 67, -60, -109, -73, -51, 53, -22, -61, -118, 49, 77, 109, -109, -25, 99, 70, -120, -15, -41, 105, 51, -11, -103, -69, 101, 39, 85, 8, 102, 48, -17, -95, -97, -68, -1, -117, -110, -36, -26, -101, -68, -61, -121, -73, -62, -64, -1, 119, 65, 74, 111, -108, -17, 77, 111, 52, 122, 86, 72, 115, -12, -9, -61, 90, -88, -126, 34, -35, 69, -5, -19, 38, 47, -62, -36, 0, 88, 116, 45, 22, -44, 52, 74, -113, 25, 29, -78, -33, 78, 54, -20, 1, -69, 72, -35, 123, -28, 19, 52]");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B881F13A961670B198DC6CA3BB3D560BABA2B7CB718B496F3F1A0E617C15E7C8608322AE7D3EAC88B33D3CF50758BE0D7D64B126FBE6B32A7E20C6D37D78C3E2D70FD810BC544F2EE74BD41E0F5E008535E34AA1C301C96B96E3D7D73880E4FC41AD6A807184069FD259AE7100E08C68", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[124, 114, 64, -121, 110, 94, 74, 121, 29, -123, -87, -84, -73, 18, -73, 72]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-78, -53, 96, 83, 7, 115, -76, -41, -98, -77, 60, 122, 5, 11, -81, 78, 26, -16, 4, 115, -44, 67, -106, 93, 74, 79, 118, 105, -9, 59, 121, -79, 36, 124, 99, 58, -68, 55, 39, 119, 28, 73, 112, -30, -105, -79, 2, -37, 65, 18, 6, 100, -38, 2, 64, -52, 81, -10, -57, -56, 45, -3, -28, 38, 97, 15, -35, -77, 3, -77, 30, 7, 88, -128, -68, 16, -99, 100, 24, -39, 12, 13, -87, -95, 108, 90, -95, -44, 15, -2, -100, -27, 76, -60, 16, -78, 124, 114, 64, -121, 110, 94, 74, 121, 29, -123, -87, -84, -73, 18, -73, 72]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[62, -51, 73, 5, 57, -74, 56, 59, -20, 44, -13, -2, 119, 82, 70, -62, -127, -83, 87, -11, -97, 4, -47, 106, 108, -11, -28, 16, -85, -113, 124, 72, -116, 70, 7, -122, 42, -43, 41, -96, -98, -116, 0, 95, -63, 49, -30, 27, 124, -42, 58, 36, -11, -58, 33, 75, -63, -42, -2, -36, -87, 52, 54, 115, -127, 76, -35, 56, -109, -26, 121, 77, 1, -89, 94, 66, 112, 63, -109, 125, -110, -60, 63, -117, -79, -10, -104, -61, -87, 37, -70, 109, -108, -62, -122, 124, 124, 114, 64, -121, 110, 94, 74, 121, 29, -123, -87, -84, -73, 18, -73, 72]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        byte[] byteArray54 = new byte[] {};
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey56);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey60);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey60);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey69);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey69);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey69);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey69);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey69);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[98, 83, 70, 64, 104, -86, -6, 17, 64, 38, -83, 64, 105, 39, -69, -29]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-125, 43, -31, -23, -1, -57, -18, 98, 5, 1, -62, -75, -27, -75, 25, 92]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-125, 43, -31, -23, -1, -57, -18, 98, 5, 1, -62, -75, -27, -75, 25, 92]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[42, 95, -44, 58, -66, 87, -105, -100, -7, -58, -84, 22, 77, 109, -38, 34, 46, -125, -3, 45, -106, 57, -50, 103, 71, -16, -61, 51, 114, -114, -43, -52, 98, 83, 70, 64, 104, -86, -6, 17, 64, 38, -83, 64, 105, 39, -69, -29]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2A5FD43ABE57979CF9C6AC164D6DDA222E83FD2D9639CE6747F0C333728ED5CC6253464068AAFA114026AD406927BBE3" + "'", str9, "2A5FD43ABE57979CF9C6AC164D6DDA222E83FD2D9639CE6747F0C333728ED5CC6253464068AAFA114026AD406927BBE3");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2A5FD43ABE57979CF9C6AC164D6DDA222E83FD2D9639CE6747F0C333728ED5CC6253464068AAFA114026AD406927BBE3" + "'", str10, "2A5FD43ABE57979CF9C6AC164D6DDA222E83FD2D9639CE6747F0C333728ED5CC6253464068AAFA114026AD406927BBE3");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[25, -110, -12, -57, 62, -44, 66, -107, 5, -111, -58, -127, 71, -5, 26, 69]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[31, -54, -51, 60, 29, -102, 95, 119, -104, 0, -34, -71, -91, -66, -41, -12]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-35, -112, 53, -112, 122, 17, -63, 93, -63, -102, -71, -61, -2, 97, 25, 91]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-44, -101, 82, -61, -109, 60, -68, -71, -119, -46, 120, -96, -55, 95, 126, 109]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-6, 57, 118, -88, 10, 15, 9, -8, -109, -128, -101, 55, -34, -38, 45, -93]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[19, 15, 1, -78, -65, -105, -105, -11, 121, 33, 84, -59, -33, -63, -23, 124]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-88, 81, -72, 90, -124, -125, -98, 61, -2, -123, -40, -28, -13, -109, -107, 32]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[83, 41, 17, 119, -43, 104, 1, 49, 106, -39, -112, 66, -62, 9, 48, 57]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-61, -119, -126, 36, -20, -25, -94, -32, -121, 48, -67, -40, -103, 105, -54, 64]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-86, -82, 32, -62, 51, 10, -67, 49, -77, -51, -123, -73, -90, -110, -68, -114]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-14, -127, -53, 51, 104, -30, 74, -57, 120, -52, -31, -22, -30, 12, -46, 60]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[6, -10, -95, 109, -97, -22, -13, -98, -85, 43, 91, -74, -92, -128, -112, -62]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[6, -10, -95, 109, -97, -22, -13, -98, -85, 43, 91, -74, -92, -128, -112, -62]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-119, -121, 102, -78, -68, -8, 47, -128, -123, -128, -42, -126, -7, 124, -41, 19, -11, 3, -43, 101, -40, -27, -12, -61, 32, 67, -55, -125, -77, -124, -9, 89, -14, -127, -53, 51, 104, -30, 74, -57, 120, -52, -31, -22, -30, 12, -46, 60]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey8);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -49, 102, -101, -8, 97, -27, 65, 45, -27, 43, -71, -48, 43, -17, 94]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-57, -84, -108, 104, -95, 78, 12, -42, -117, -121, -52, 18, -96, 124, -121, 53]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-57, -84, -108, 104, -95, 78, 12, -42, -117, -121, -52, 18, -96, 124, -121, 53]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-61, 119, 62, -88, 58, -76, -104, 16, 48, -39, 82, -14, 1, 27, 17, -56]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, -49, 102, -101, -8, 97, -27, 65, 45, -27, 43, -71, -48, 43, -17, 94]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[74, -66, 62, -31, -29, -113, -36, 71, -123, -49, 28, -70, -24, 33, -90, -102, 75, -61, 0, -9, 75, 100, -24, 124, 40, -118, -90, 106, -3, 81, 121, -120, 101, 99, 110, -28, -103, -14, 17, 29, -97, -83, 47, -2, 44, -36, -22, 38, -53, -51, -29, 94, 109, -121, -95, 112, 106, 52, -121, 96, -126, -21, -81, -8, 69, -91, -37, 87, -29, 104, -47, -16, -101, -96, -24, 25, 58, 10, 117, -90, 22, -49, -117, -105, 31, 26, -64, 63, 103, -80, -13, -111, -21, 115, 2, -71, 10, -49, 102, -101, -8, 97, -27, 65, 45, -27, 43, -71, -48, 43, -17, 94]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-95, -83, -4, 45, 43, 62, -90, -6, -125, -106, 78, -113, -44, -82, 21, 56, 11, 3, 66, -55, 118, 29, -104, 119, 87, 115, 67, -13, -56, 61, -66, 96, 13, -47, 92, -40, -21, 27, 61, 62, -3, -33, 53, 20, 56, -104, 39, -19, 88, -108, -6, -74, 66, -82, -120, -6, 102, 68, -72, 99, 43, 77, -91, -10, 55, 33, -6, 112, -76, 60, -80, -118, -44, -47, -82, 33, -77, -108, -33, -117, 98, 29, -65, -53, -64, 36, -115, 94, 28, 97, -38, -124, 101, 93, 71, -7, 10, -49, 102, -101, -8, 97, -27, 65, 45, -27, 43, -71, -48, 43, -17, 94]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-95, -83, -4, 45, 43, 62, -90, -6, -125, -106, 78, -113, -44, -82, 21, 56, 11, 3, 66, -55, 118, 29, -104, 119, 87, 115, 67, -13, -56, 61, -66, 96, 13, -47, 92, -40, -21, 27, 61, 62, -3, -33, 53, 20, 56, -104, 39, -19, 88, -108, -6, -74, 66, -82, -120, -6, 102, 68, -72, 99, 43, 77, -91, -10, 55, 33, -6, 112, -76, 60, -80, -118, -44, -47, -82, 33, -77, -108, -33, -117, 98, 29, -65, -53, -64, 36, -115, 94, 28, 97, -38, -124, 101, 93, 71, -7, 10, -49, 102, -101, -8, 97, -27, 65, 45, -27, 43, -71, -48, 43, -17, 94]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[127, 118, -54, 120, 83, -116, -61, 72, 10, 33, -50, -93, 70, 48, -86, 45]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey29);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("82EFDBB4BDC7BBAA7C934285235D9C46E7C4C9C7122ECCA3389DB3B589FE25FA73489AA0EE1C5F4E6F1EF6E007FC6ED050E0711F88898A8EF2A5897A2B2CA23957F814C95B70EF471A488379CF190F76452C7DBE8E7540081C69F4A662933CABDC89892557967EC455D5A45D558ADEA73837239AD7A0FAA22CDB75AC141520591AEB4A036B8F40B993F0BA6F834795BC738D68A735FDBB3CA2B0B807F81449603807B15216BCB49B0B6D43AC04AF738702C744B8F8AEE5863D177C069B69111518F8CC628D024AB6F06184CC16D93F52AF40AF42939196F78DB38341E81B81978EC45219C2C953A25B7B657A05741FD7", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[85, -80, -2, -110, 125, -15, 29, 16, -122, -75, 15, 77, -53, -100, -63, -47]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-80, -22, 116, 44, 25, -6, -69, -116, 81, -22, 60, 122, 56, 3, 67, -120]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[78, 110, -41, 100, -69, 27, 107, 115, 12, 118, 43, -104, -55, -21, 99, 47]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, 105, -53, -21, 26, -46, -25, 29, 35, -96, 21, 9, -111, 9, 0, 61]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[6, -31, 29, 36, 91, -125, 43, -55, 44, -128, 22, -109, -79, 6, 67, 42]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[18, 43, 65, -89, 42, -39, 30, -109, 23, -91, -77, 44, 97, -74, 55, 8]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[18, 43, 65, -89, 42, -39, 30, -109, 23, -91, -77, 44, 97, -74, 55, 8]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-57, -69, 24, 64, 22, 56, -73, -111, -14, 92, 119, 112, 95, 106, 22, 43, -63, 101, -127, 121, 4, 24, 73, -128, -89, -57, 0, -64, 78, 34, 36, 118, 6, -31, 29, 36, 91, -125, 43, -55, 44, -128, 22, -109, -79, 6, 67, 42]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-50, -32, 1, -69, -58, 73, 34, -88, 109, -6, 69, 113, 61, -76, 53, 15, -70, -58, 124, -109, -66, 0, 12, 115, 121, 42, -24, 82, -54, 57, 107, 6, 6, -31, 29, 36, 91, -125, 43, -55, 44, -128, 22, -109, -79, 6, 67, 42]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-93, 39, -61, 79, 27, 20, 7, 124, 93, 96, -38, -20, 105, -41, 37, -81]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[24, -74, 88, -52, 45, -87, 101, -18, 41, 35, 102, -118, -86, -71, 0, -93]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[24, -74, 88, -52, 45, -87, 101, -18, 41, 35, 102, -118, -86, -71, 0, -93]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-80, 103, -66, 36, 37, 44, -39, -34, 14, -53, -30, -20, 101, -128, -4, -53, 84, -64, -38, -45, -53, -117, -15, 11, -118, 6, -24, -67, -79, 67, -57, -94, 52, 11, 89, 24, 119, -13, -78, -55, 80, -114, -34, 23, 28, 96, -20, 95, 108, 121, -13, 79, 40, -3, 122, 25, 121, 107, -71, 119, -64, -38, 24, 117, 28, -42, -67, 55, -93, -35, -105, 38, -16, 38, 12, -72, 109, -96, 10, -29, -54, -106, -1, -85, 24, 100, -104, 111, 0, -101, 13, 80, -54, -91, -71, 57, -93, 39, -61, 79, 27, 20, 7, 124, 93, 96, -38, -20, 105, -41, 37, -81]");
        org.junit.Assert.assertNotNull(byteArray52);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey8);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[72, 60, -27, -19, 104, 101, -46, -25, -101, -16, 97, 61, -64, 6, 29, 91]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-111, 91, 64, -124, -108, -1, -24, 31, 7, -91, -71, -124, 58, -46, -120, 121]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[120, 100, 68, 79, -6, -29, 2, 69, 114, 37, 52, 59, -99, -81, 83, -126]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[72, 60, -27, -19, 104, 101, -46, -25, -101, -16, 97, 61, -64, 6, 29, 91]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-53, 20, 27, 95, 24, -5, -13, 19, 116, 119, 64, 38, 13, -21, -70, -29, 38, 0, 93, 100, -31, 68, -104, -52, -22, -22, -80, 20, -16, -14, -61, 125, 72, 60, -27, -19, 104, 101, -46, -25, -101, -16, 97, 61, -64, 6, 29, 91]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-58, -100, 97, 100, -113, 108, -50, -54, 97, 70, 73, -78, 19, -34, -68, 46, 34, 10, -118, -93, 57, 95, 47, -90, -20, 31, 48, -11, 55, 111, 15, 111, 72, 60, -27, -19, 104, 101, -46, -25, -101, -16, 97, 61, -64, 6, 29, 91]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[120, 100, 68, 79, -6, -29, 2, 69, 114, 37, 52, 59, -99, -81, 83, -126]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[5, 31, -32, 125, -95, 92, 23, -21, 52, 123, 64, -23, -92, 104, -41, -64]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[78, 10, -82, 83, 1, 33, 73, 74, -72, -4, 29, -30, 42, -105, -16, 61]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[98, 72, -29, -26, -78, 74, -42, -11, 40, 53, -95, -55, -103, 7, 66, 79]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-97, -16, -94, -55, 88, -74, -106, -110, 18, -27, 115, 75, 78, -33, -16, 78]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[74, -111, -85, 6, 7, -27, 95, 122, 62, -124, -32, 102, 41, 105, 71, -42, -38, 11, 47, -76, 13, 121, 9, -124, -111, 123, 61, -104, 120, 26, -57, 34, 100, 104, -39, -42, -29, 67, -99, 11, 58, -93, 52, -111, 92, 34, -102, 24, 100, -17, 100, -77, -98, 31, 124, -102, -50, 54, -76, 8, -7, -38, -71, 25, 42, 65, 58, 99, -63, -29, -24, -62, 70, -93, 68, 59, -4, -108, -121, -72, -49, 11, 104, -25, -126, 63, -63, 28, -16, -82, -83, 102, 123, 124, -86, 16, 98, 72, -29, -26, -78, 74, -42, -11, 40, 53, -95, -55, -103, 7, 66, 79]");
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey49);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey49);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey49);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[80, -120, 54, 67, 52, -83, 15, -3, -90, -21, -63, 36, 103, -9, 29, 96]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[49, -89, -80, -122, -108, -92, 34, -123, 65, 65, -72, -64, -103, -7, -15, -39]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[17, -41, -55, 54, 46, -2, 99, -93, -18, 7, -119, -121, -54, -20, 85, 46]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[80, -120, 54, 67, 52, -83, 15, -3, -90, -21, -63, 36, 103, -9, 29, 96]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[114, 31, -92, -24, -74, -76, 99, 111, -15, -41, 9, -55, -95, 25, 43, -25, -104, 48, 53, 125, 108, 77, 44, 114, 110, -122, -28, 100, 39, 75, 51, -126, 80, -120, 54, 67, 52, -83, 15, -3, -90, -21, -63, 36, 103, -9, 29, 96]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-72, 18, -102, 84, -51, 5, 90, 54, 2, 10, -112, 87, 103, -10, -28, -94, 15, 22, 14, 91, -67, 120, 22, -31, 102, -72, 46, 115, -126, -98, 73, 32, 80, -120, 54, 67, 52, -83, 15, -3, -90, -21, -63, 36, 103, -9, 29, 96]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[17, -41, -55, 54, 46, -2, 99, -93, -18, 7, -119, -121, -54, -20, 85, 46]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "5D2D236C8F604AC76276C4EF538861F9AC007060C72E8207F242F49B467BF1822A54D0941789C276DD7E4695DE18E12615634F2662E7F27CB2E0CBB5F39613CAFEE9E1790BA5226ADDE1CDCEEE3A1F310F40A2CD672F8DE176E7D9A6AB0532DCDB5BABCE335A7405C57C52B8B1FD15FEC50C6C50E094B612688A0EC189ADAE785086224A4A767D32A08205FB0BBCBFD3B505FC58A60D2B89A6F717F8447AFA184095A9576194320D14F9F959F79020D7DF3B5F650F95657DB9B319653AA2B7935D7E95CA00620DB8792C448E4B8C2D70E6B20C091718CEB726E12A3A446343615088364334AD0FFDA6EBC12467F71D60" + "'", str17, "5D2D236C8F604AC76276C4EF538861F9AC007060C72E8207F242F49B467BF1822A54D0941789C276DD7E4695DE18E12615634F2662E7F27CB2E0CBB5F39613CAFEE9E1790BA5226ADDE1CDCEEE3A1F310F40A2CD672F8DE176E7D9A6AB0532DCDB5BABCE335A7405C57C52B8B1FD15FEC50C6C50E094B612688A0EC189ADAE785086224A4A767D32A08205FB0BBCBFD3B505FC58A60D2B89A6F717F8447AFA184095A9576194320D14F9F959F79020D7DF3B5F650F95657DB9B319653AA2B7935D7E95CA00620DB8792C448E4B8C2D70E6B20C091718CEB726E12A3A446343615088364334AD0FFDA6EBC12467F71D60");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[51, 30, 48, 34, -22, -90, 73, -108, 109, -20, -7, -48, -64, 91, 55, -28]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[15, 17, 11, -11, 67, 24, -42, -53, 123, -55, 50, 58, 93, 91, -60, -67]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-44, 87, -20, 38, -71, 37, -41, -16, -114, 108, -36, 37, -27, 79, -87, 0]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-98, 64, -60, 21, -11, 107, -47, 47, -9, -109, 122, -73, -29, 90, 95, 114]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[120, -39, 75, -104, 37, 35, 11, -37, 16, 67, -121, 102, -93, 31, 36, -85, 75, 8, 52, -81, 45, 53, -14, -44, 8, -14, -88, -2, 104, 86, 58, 49, -44, 87, -20, 38, -71, 37, -41, -16, -114, 108, -36, 37, -27, 79, -87, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-44, 87, -20, 38, -71, 37, -41, -16, -114, 108, -36, 37, -27, 79, -87, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-98, 64, -60, 21, -11, 107, -47, 47, -9, -109, 122, -73, -29, 90, 95, 114]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[50, -84, 88, -104, 121, 33, 63, -70, 120, 80, -30, -6, 67, -88, 116, 18, -115, -66, -76, 59, 58, -48, 76, -83, 46, -51, 96, 120, -4, 87, -55, -87, -44, 87, -20, 38, -71, 37, -41, -16, -114, 108, -36, 37, -27, 79, -87, 0]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-118, -25, 3, -62, -104, -3, -66, 56, 26, 13, -102, 15, -45, 112, 114, 43, -107, 22, -29, 127, -110, 80, 125, -55, 29, 21, -126, -114, -63, -20, -88, 106, -3, 52, -107, -49, 5, -69, -121, 12, 120, -116, -114, 17, -114, 29, -81, 124, -126, 47, 99, 84, -50, -26, 54, -109, -25, -34, -6, 10, -11, -10, -125, -96, -7, -120, 127, -33, 47, 127, -58, 72, -4, 99, -62, 123, 66, 24, -6, -31, 14, -60, 113, -92, -79, 116, -91, 4, -3, -67, 76, -23, -123, 102, -60, 108, -44, 87, -20, 38, -71, 37, -41, -16, -114, 108, -36, 37, -27, 79, -87, 0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("8D634E09060D653DFDBF18A42493EA0992AD7636726F60C637F338FD701AE408BF5D927B2DC53D72797237845E245801", secretKey4);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey17);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey17);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-77, -115, 3, 89, -23, -98, 124, 81, -6, 12, 111, -12, 83, 43, -75, -5, -104, 18, 62, 69, 118, -60, -20, -108, 42, 49, 74, -32, -79, 112, 80, -6, -18, -11, 29, 117, -57, 84, 35, -62, -80, 126, -2, 55, -103, -53, 102, 20, -52, 12, 18, 84, 40, 26, -127, 102, 81, 35, -100, -120, -65, 117, 88, 100, 42, 70, -69, -95, 9, -16, 97, -45, 32, 43, 53, 40, 115, 104, 98, 41, -53, -119, -28, -52, -122, 31, -82, -44, -75, -23, -23, 111, 99, 120, 82, -42, -58, -29, -127, -1, -32, -23, 0, -42, 13, 69, -127, -77, 8, 125, 1, 84]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-62, -110, -128, -56, 126, 30, -25, 59, 51, -36, -128, 110, -18, -115, -13, 83]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-79, 27, 60, -123, 32, -71, 69, 22, -121, -46, 78, 39, -71, -40, -96, 61]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-120, -82, -97, 103, 94, 94, 26, -22, 47, -57, -45, -54, -115, -113, 43, -52, 96, 125, -80, 80, -40, 95, 67, -77, -120, 127, -102, 43, -89, -97, -50, 56, 77, -4, -82, -58, -18, -27, -9, 5, 7, 6, 20, 83, -114, -2, -36, 12, 97, -98, -15, 49, 33, -4, 105, 104, -24, 57, -86, -92, -39, 12, 10, -118, -104, -112, -108, 15, 121, -42, -53, -41, 115, 127, 47, -75, 123, -121, -12, -17, -48, 78, 2, 97, 1, -118, -83, 16, -23, -117, 91, -78, 127, -60, 94, 80, -62, -110, -128, -56, 126, 30, -25, 59, 51, -36, -128, 110, -18, -115, -13, 83]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-23, -42, 30, -116, 64, 18, 85, 83, 53, -11, -72, -18, -6, 91, -14, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.Class<?> wildcardClass12 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[84, -47, -6, -38, 13, 17, 12, 8, 91, -16, -91, 14, -97, -21, 96, 89]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-106, -17, 53, 47, 63, 54, -68, -34, -16, 44, -73, 25, 102, -42, -14, -27]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-79, 32, -98, 53, 110, 45, 45, 102, 73, 55, 100, 114, -79, 93, 120, 6]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-32, -45, -25, 120, 44, 57, -62, -116, -52, -32, 106, 61, 10, -128, -128, 33, 30, -76, 14, 113, 79, -1, 18, -99, 82, -81, 114, -61, -97, 17, -9, -89, 84, -47, -6, -38, 13, 17, 12, 8, 91, -16, -91, 14, -97, -21, 96, 89]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "E0D3E7782C39C28CCCE06A3D0A8080211EB40E714FFF129D52AF72C39F11F7A754D1FADA0D110C085BF0A50E9FEB6059" + "'", str9, "E0D3E7782C39C28CCCE06A3D0A8080211EB40E714FFF129D52AF72C39F11F7A754D1FADA0D110C085BF0A50E9FEB6059");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "E0D3E7782C39C28CCCE06A3D0A8080211EB40E714FFF129D52AF72C39F11F7A754D1FADA0D110C085BF0A50E9FEB6059" + "'", str10, "E0D3E7782C39C28CCCE06A3D0A8080211EB40E714FFF129D52AF72C39F11F7A754D1FADA0D110C085BF0A50E9FEB6059");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "E0D3E7782C39C28CCCE06A3D0A8080211EB40E714FFF129D52AF72C39F11F7A754D1FADA0D110C085BF0A50E9FEB6059" + "'", str11, "E0D3E7782C39C28CCCE06A3D0A8080211EB40E714FFF129D52AF72C39F11F7A754D1FADA0D110C085BF0A50E9FEB6059");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        java.lang.Class<?> wildcardClass33 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-116, 20, 62, 117, 68, 17, 98, 29, 65, -76, 18, 72, -21, 103, 106, -77]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[122, -87, 112, -25, -58, 46, -105, 120, 28, -114, 99, -44, -73, 76, -15, 66]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[91, 89, 51, -12, 90, 92, -21, 116, 89, -68, 14, -47, 125, -18, 39, -74]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[81, -87, 11, 81, -46, -118, -44, 34, -55, -14, -103, -84, 123, 9, 122, 62]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[39, -26, -64, -44, 41, 33, 13, -126, 78, -111, 100, 62, 70, -37, 54, 73, -115, -119, -107, -49, 117, 20, -83, 26, -125, 92, -74, 89, 127, 53, 47, -38, 91, 89, 51, -12, 90, 92, -21, 116, 89, -68, 14, -47, 125, -18, 39, -74]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-97, -109, 58, -5, -12, 114, -22, 121, -89, 2, 6, -74, -70, 67, 31, -16, 106, 54, -9, -91, -47, 95, -126, -102, 111, -50, 29, 102, -83, -39, 62, 51, 91, 89, 51, -12, 90, 92, -21, 116, 89, -68, 14, -47, 125, -18, 39, -74]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-111, -30, 33, -63, -60, 116, 85, -54, -61, -55, -57, -63, -99, -4, -63, 52, -46, 77, -103, 126, 44, -86, 103, -70, 46, 74, -42, 37, -60, 19, -34, -59, 108, 17, -44, 64, -58, 120, -57, 32, 12, -105, -126, -45, -21, 105, 107, -51, 21, -49, 44, 77, -24, -70, 32, -33, -67, 68, 32, -123, 108, 121, -52, -47, 64, -86, -89, 30, -102, 80, 23, -44, 27, -48, -57, -10, 44, 103, 126, -79, 33, -115, -28, 50, 3, -98, 27, 13, -54, -76, -21, 16, 28, -88, -62, -40, 91, 89, 51, -12, 90, 92, -21, 116, 89, -68, 14, -47, 125, -18, 39, -74]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-47, -31, 81, 45, 99, -9, -59, -120, 25, 96, -99, -81, 25, 117, -118, -82, -5, -73, 66, 20, 91, 102, 105, -42, 94, -34, -99, 14, -48, 56, 74, -107, -23, -61, 64, -39, -116, -118, -39, 61, -37, 61, 56, 114, 24, 31, 8, 1, 27, 38, 26, 97, -121, -17, -67, -44, 90, 42, -23, -13, -113, -83, -5, -85, -108, -105, -67, -5, -49, 11, -66, 63, -44, -127, -50, 81, -121, -20, -110, 50, 55, 43, -87, -11, 85, -67, -120, 27, -31, 108, 106, 52, -123, -45, 110, 63, 91, 89, 51, -12, 90, 92, -21, 116, 89, -68, 14, -47, 125, -18, 39, -74]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[30, 90, 71, -67, 95, -29, -80, 20, 109, 102, -126, 127, 22, -113, 55, -26, -34, -64, -14, 32, 27, -90, 33, 82, -16, 65, -111, -46, 125, 99, -8, 77, -71, 111, -122, -19, -59, -86, -110, -56, 8, -34, -63, -117, 114, 44, -28, 65, 124, -28, 26, -37, 45, 67, 25, 125, 33, -38, -61, -34, -60, 52, 67, 125, -65, 21, -57, 112, -71, 60, 31, 125, 55, 99, 96, 46, -53, -98, 90, 112, 67, -18, 26, 71, 127, -91, -82, 49, -57, -102, -2, 125, -94, -82, -110, -7, 91, 89, 51, -12, 90, 92, -21, 116, 89, -68, 14, -47, 125, -18, 39, -74]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[91, 89, 51, -12, 90, 92, -21, 116, 89, -68, 14, -47, 125, -18, 39, -74]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey32);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey32);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey32);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[50, -16, -73, -119, -44, 32, 73, -1, 120, -48, 13, 57, 107, 121, 27, 112]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[16, 57, 112, 58, -81, 3, 111, -82, -70, -2, 118, -76, 38, 41, 46, 117]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[7, -110, -78, 106, -56, 2, 96, 6, 55, 29, -10, 81, 107, -53, -38, -6]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[98, -58, -28, 97, -94, 19, 9, -67, -56, -67, -109, -59, -61, -2, 65, 77]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[92, -100, -64, -94, 109, 25, -76, 102, 5, 83, -35, 126, 65, 3, 111, 123]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-87, 123, 57, -88, -116, -31, 70, -8, 21, 8, -116, -59, 71, 74, 68, 90]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-87, 123, 57, -88, -116, -31, 70, -8, 21, 8, -116, -59, 71, 74, 68, 90]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-87, -40, 70, -105, 100, -4, -72, -73, -93, 5, -97, 101, -111, -37, -105, 127, 10, -123, -47, 86, -73, 34, 127, 57, 14, -49, 72, 37, 44, -5, 37, -61, 92, -100, -64, -94, 109, 25, -76, 102, 5, 83, -35, 126, 65, 3, 111, 123]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-83, -78, 121, -76, -73, -108, 26, 114, 51, 114, 88, -93, -2, -67, -20, 31, -17, -65, 65, -34, 65, 84, 78, -85, 18, -25, 91, -68, -22, 28, -92, -121, 92, -100, -64, -94, 109, 25, -76, 102, 5, 83, -35, 126, 65, 3, 111, 123]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-101, 49, 60, 2, -35, 109, -16, -56, -38, 116, 113, -99, -123, -47, -84, -48, -35, 35, -45, 6, -6, -25, -35, -118, -19, 91, 41, 86, -72, 89, 22, 89, 92, -100, -64, -94, 109, 25, -76, 102, 5, 83, -35, 126, 65, 3, 111, 123]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-69, -44, 78, -7, -84, 22, 119, -105, -120, 114, -111, 22, 24, -109, -72, 44, -127, 8, -69, 40, -127, -69, -36, 83, -116, 44, -42, -107, 38, -119, 14, -105, -30, 4, -87, 74, 67, 8, -113, -90, 29, 40, 10, -7, -20, -119, 67, -10, 29, 98, 65, -62, 112, -106, 45, 46, 40, -111, 1, -53, 121, 32, 2, 64, 15, -15, 118, -12, -17, -17, 68, -10, -110, 69, -58, -123, -75, 121, 2, -60, -78, -4, 83, 70, 103, -38, 18, 7, -126, 124, -108, -74, 63, -45, 122, -41, 92, -100, -64, -94, 109, 25, -76, 102, 5, 83, -35, 126, 65, 3, 111, 123]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[22, 81, -11, -125, 116, 68, -94, -79, 113, -5, -50, 65, 114, 107, -20, 8, -51, 11, -25, 80, 26, 106, -97, 20, 88, -38, 72, -121, 75, -37, 115, -111, 92, -100, -64, -94, 109, 25, -76, 102, 5, 83, -35, 126, 65, 3, 111, 123]");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[63, -29, -73, 88, 12, 109, -27, 17, -2, -102, -80, 110, -58, -71, -24, 118]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[69, -25, -113, -124, 78, 88, -113, 83, 71, -71, -56, 22, -1, -97, 1, 91]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[69, -25, -113, -124, 78, 88, -113, 83, 71, -71, -56, 22, -1, -97, 1, 91]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[19, 59, -44, -47, 63, 28, -73, -101, -12, -98, 87, 74, -105, -112, -8, 85]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[117, 95, 38, -38, 116, -58, -79, 5, 2, -89, -31, -80, 13, 23, 44, -49, 61, 57, 91, 70, 107, -39, 2, -22, -42, 19, 95, -38, 14, 83, 43, -119, -85, -85, 35, -37, -122, -23, -39, 114, 80, 103, -47, 115, -92, -32, -67, -61, 37, 75, -75, 101, -57, -22, -110, 99, 78, -91, -102, -120, 82, -55, 69, -2, -90, -124, 83, 55, -117, -21, 102, -30, 123, 99, -104, 30, 15, 119, -5, -13, -84, 37, -71, 54, -31, -79, -35, -27, -80, -2, 25, -6, 26, -100, 107, 112, 63, -29, -73, 88, 12, 109, -27, 17, -2, -102, -80, 110, -58, -71, -24, 118]");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[110, -53, -1, -44, -38, 11, -12, -74, -2, -88, 125, -34, 108, 59, -39, 74]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[24, 49, 114, 4, -31, 73, 27, -67, -6, -8, -13, -115, 81, 78, 89, -77]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[24, 49, 114, 4, -31, 73, 27, -67, -6, -8, -13, -115, 81, 78, 89, -77]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-53, 3, 75, 11, 76, -27, 61, 43, 91, -126, 97, 46, -62, 126, -7, -56, -123, -106, 91, -127, 101, -90, -121, 0, 119, -74, 99, -9, 57, -127, 79, -21, -124, 61, 51, -27, -4, -84, 72, 103, 16, 21, 84, 17, -11, 116, 78, -111, 122, -8, -83, -72, 32, 43, -59, -30, 40, -74, -40, -96, 40, -77, -68, 88, -89, 71, -17, -59, -97, 69, 114, 24, 19, -121, 4, 101, -96, -50, 62, 52, 116, 63, 22, -82, -31, 53, -17, -28, -15, 65, -38, 115, 74, 35, -104, 29, 110, -53, -1, -44, -38, 11, -12, -74, -2, -88, 125, -34, 108, 59, -39, 74]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.Class<?> wildcardClass26 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[46, -51, -91, -39, -22, -72, 16, -85, -49, 121, -94, -76, 73, -114, -90, -122]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-106, 54, -22, -127, 86, 92, -52, 66, 72, -51, 64, 104, -18, -76, -8, 58]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[52, 124, -105, 48, -19, -69, 74, -70, -111, 25, 86, 59, 10, -82, 17, -118]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-124, -114, 83, 83, 95, 24, 28, -1, 45, -4, 110, -116, 92, -25, 7, -127]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[14, 49, -27, -116, -112, -88, -7, 73, -56, 84, -124, -115, 89, 43, 7, 70, -116, -98, 41, 0, 73, 110, -18, 86, -111, -96, 60, 39, 57, -80, 55, 31, 52, 124, -105, 48, -19, -69, 74, -70, -111, 25, 86, 59, 10, -82, 17, -118]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-94, -32, 112, -121, 68, -21, -26, -82, -96, -123, -64, 20, 96, -3, -57, 66, -58, -15, 21, -94, -65, -8, -9, 24, 57, -60, 127, -86, 4, -67, 103, -5, -84, -31, -15, -18, -62, -1, 89, 93, -37, -50, -7, -81, 95, -57, -13, 125, -59, 83, 115, 126, -114, 16, -56, -103, -65, -21, -14, 83, 13, 0, 117, 21, -37, -52, -5, 111, -24, 49, -118, 53, 78, -7, -104, -96, 94, -63, -110, 42, -46, 62, -114, -1, -56, 78, -4, 11, -84, 22, 102, 84, 108, 106, 52, 112, 52, 124, -105, 48, -19, -69, 74, -70, -111, 25, 86, 59, 10, -82, 17, -118]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "A2E0708744EBE6AEA085C01460FDC742C6F115A2BFF8F71839C47FAA04BD67FBACE1F1EEC2FF595DDBCEF9AF5FC7F37DC553737E8E10C899BFEBF2530D007515DBCCFB6FE8318A354EF998A05EC1922AD23E8EFFC84EFC0BAC1666546C6A3470347C9730EDBB4ABA9119563B0AAE118A" + "'", str25, "A2E0708744EBE6AEA085C01460FDC742C6F115A2BFF8F71839C47FAA04BD67FBACE1F1EEC2FF595DDBCEF9AF5FC7F37DC553737E8E10C899BFEBF2530D007515DBCCFB6FE8318A354EF998A05EC1922AD23E8EFFC84EFC0BAC1666546C6A3470347C9730EDBB4ABA9119563B0AAE118A");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey26);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey26);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey26);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey26);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0101FF" + "'", str5, "0101FF");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-87, 47, 47, -43, -85, 38, -76, -128, -77, 69, -71, -117, 36, -119, 112, -123]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[19, 31, 94, -59, 58, 23, 127, 84, 96, -38, 113, -106, 3, 103, 107, -93]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[125, -70, 6, -122, -84, -27, -87, 94, -56, 126, -108, 21, 77, 103, 58, -116]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-101, 114, -68, 54, 52, -125, 121, 50, 111, 99, -45, -114, 68, -41, -68, 97]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-58, -113, 62, 4, 42, 55, -7, 9, -121, 42, -119, 50, -19, -117, -90, -41, 104, 74, -58, -35, -31, 97, -50, 10, 106, -127, -29, -75, 85, -51, -25, 51, 125, -70, 6, -122, -84, -27, -87, 94, -56, 126, -108, 21, 77, 103, 58, -116]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[127, -23, 31, -85, -71, -85, -56, -92, -127, -63, -94, 10, -37, 91, 18, 122, 6, -96, 101, 60, 21, 43, 85, -65, 89, 21, 19, 38, -46, -122, 3, 49, 125, -70, 6, -122, -84, -27, -87, 94, -56, 126, -108, 21, 77, 103, 58, -116]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[15, 90, 24, 112, 53, 89, -125, -34, -7, 20, -94, -91, 66, -41, -79, -72, 83, -122, 16, 28, 110, -7, 49, 13, -26, 83, -105, 103, 47, 48, 99, 10, 125, -70, 6, -122, -84, -27, -87, 94, -56, 126, -108, 21, 77, 103, 58, -116]");
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey3);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey34);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey34);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-72, -53, 125, 27, 87, -38, -103, -46, 117, 127, -33, -111, 73, -120, 97, 48]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[45, 60, -119, -11, 81, -55, -4, 15, -55, 44, 69, 74, 122, -7, -65, 14]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-107, -90, -42, 107, 10, 89, 15, 8, 111, -5, -35, -4, -13, -98, 34, 39]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[41, 115, -1, 127, -21, -13, 30, 59, -43, -126, 98, -116, 118, -118, 78, 21]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-16, -75, -108, 42, -101, -68, 56, 92, -83, -68, 12, -101, 9, -89, 27, -122]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[71, -51, 24, 27, -22, -24, -36, -15, 121, 75, 3, 41, 101, -93, 46, -95]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[71, -51, 24, 27, -22, -24, -36, -15, 121, 75, 3, 41, 101, -93, 46, -95]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-31, -34, 7, -114, -109, -113, 118, -81, -43, -2, 52, -34, 1, -77, -31, -94, -83, -36, -82, 45, -18, -55, 83, -45, -19, 2, -111, -26, -37, -25, -126, -76, -16, -75, -108, 42, -101, -68, 56, 92, -83, -68, 12, -101, 9, -89, 27, -122]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[60, -27, 116, -29, -17, -35, 61, -19, 27, -63, 39, 75, 13, 2, -60, 47, -31, 17, -46, 15, -76, -81, 37, 0, 61, 12, -114, -112, 7, 19, -63, 3, 1, -73, 111, 4, 78, 63, 14, -66, 23, -77, -18, 70, -115, 50, -93, 37, 28, -58, 35, 46, 38, 121, 38, -82, 27, 98, 7, 39, -82, 1, -92, -32, 32, 81, -40, -52, -93, 55, 118, -84, 35, 18, -117, -15, -11, 105, -79, -83, -2, -37, -86, 109, 15, 114, 96, 26, 45, 51, 76, -30, -124, -118, -23, -115, -16, -75, -108, 42, -101, -68, 56, 92, -83, -68, 12, -101, 9, -89, 27, -122]");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -89, -59, -91, -50, 83, 11, -68, 74, -103, 51, 98, -71, -125, 90, 41]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-95, 5, -63, -24, -121, 95, -107, 14, 63, -60, 13, 60, 28, 113, -101, -80]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-95, 5, -63, -24, -121, 95, -107, 14, 63, -60, 13, 60, 28, 113, -101, -80]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, 59, 16, -124, 61, 12, -34, -50, -75, 50, -69, 32, 33, 11, 17, 66, 3, -31, -103, -88, 68, 91, -82, 72, -52, 116, 108, -29, -9, -1, 123, 16, -1, -89, -59, -91, -50, 83, 11, -68, 74, -103, 51, 98, -71, -125, 90, 41]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[2, -36, 103, 53, -81, -91, -119, 40, 39, 110, -93, 35, 82, 57, 105, -1, -88, 10, -30, -5, -80, -13, -71, -116, 108, -24, 68, 22, 106, -106, -44, 57, -1, -89, -59, -91, -50, 83, 11, -68, 74, -103, 51, 98, -71, -125, 90, 41]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-42, 124, 90, -72, -71, 57, 94, 60, -78, -59, -64, 70, 60, 21, 45, 54, 7, -35, 122, -121, -103, -19, 101, -9, -8, 112, 5, -112, 87, 89, 95, 51, -1, -89, -59, -91, -50, 83, 11, -68, 74, -103, 51, 98, -71, -125, 90, 41]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey42);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey42);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey42);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey42);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey42);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey42);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey60);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey60);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("A34ABCDEF4648FD3FA5FC4E66CB98492D220058F601B939068952EA5EB8D12D70DCC1B1E24F217337BFAE0D78E60A624013527DC5C82EC1A1B19CF0D4F07B2262FC6E4E305C622CDC83799BD97BB31FB", secretKey60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey60);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[85, 44, -78, -111, 96, -48, 78, -79, 58, -87, 22, 37, 77, -88, 31, 98]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[37, -25, -39, 56, -127, -54, -105, 55, -120, -17, -16, -128, -92, 58, 113, -99]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[50, -76, 69, 43, 18, -13, 46, 34, -44, 84, 87, 75, -36, -47, -73, 127]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-87, 73, -120, 107, -124, 80, 50, -22, -73, 61, -73, 66, -56, -86, -29, 113]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-34, 112, -76, -38, -128, 57, -39, -90, 60, -124, 25, 92, 83, -36, -34, -20]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[44, -24, -126, -71, -15, 111, -96, 5, 97, -105, -117, -56, -43, -7, 38, 5]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-44, 3, 72, -35, -33, -16, -65, -85, -52, -41, -114, -77, -76, 19, 73, -24]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 55, -29, -117, -16, 37, -94, -61, 98, -89, 33, 47, 32, 97, -8, 40]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-127, -9, -41, -43, 87, -110, 81, 119, -77, -78, -6, 104, 38, -72, -112, 28, 114, -84, -76, -40, -62, 98, -8, -12, 22, -65, 33, 121, -112, -38, 56, 87, -44, 3, 72, -35, -33, -16, -65, -85, -52, -41, -114, -77, -76, 19, 73, -24]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[21, -27, 46, 2, 122, -88, 115, 28, -18, 65, 49, -49, 75, 89, -42, 118, -5, -33, -5, -103, 64, -4, 120, -99, -69, 68, 23, 74, -66, 38, 41, 84, -44, 3, 72, -35, -33, -16, -65, -85, -52, -41, -114, -77, -76, 19, 73, -24]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[38, -80, -34, -34, -43, -77, -33, 10, 43, 46, -50, 125, -45, 31, 35, -41, 77, 66, 61, -87, 3, 40, -53, 20, -42, -113, 107, 97, 12, 54, -66, -29, -44, 3, 72, -35, -33, -16, -65, -85, -52, -41, -114, -77, -76, 19, 73, -24]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-107, -60, -120, -98, 85, 30, 33, 90, 28, -23, 47, 102, 86, 37, -110, -42, 93, -102, 31, -63, 51, 14, -33, 77, -67, -24, 41, -14, -73, -58, -6, -40, 24, -115, 119, 115, 32, 69, -43, 42, -110, -111, -72, -39, -10, 93, 13, -29, -114, -100, 109, 11, 8, 40, 75, -13, -70, -27, -53, -125, 56, 92, -4, -105, -68, 61, 53, -8, 15, -65, -103, -49, 37, 4, -125, -81, -23, 62, -16, -125, -80, -83, 41, 19, 61, -80, -99, 92, -53, 1, -20, 97, 21, -105, -118, 40, -44, 3, 72, -35, -33, -16, -65, -85, -52, -41, -114, -77, -76, 19, 73, -24]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-19, 74, -102, 95, 96, 59, 119, -84, -117, -118, 82, 64, -16, -7, -71, 22, -89, -41, 13, 7, 31, 81, -68, -25, -23, 40, -121, 46, 92, 61, 58, 113, -44, 3, 72, -35, -33, -16, -65, -85, -52, -41, -114, -77, -76, 19, 73, -24]");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[15, 0, 41, -12, -52, 122, -95, -33, 22, -31, -121, -15, -22, -34, 112, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-27, 34, 9, -13, -89, -125, -103, -23, 10, 90, -60, 7, -75, -56, -1, 33]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-27, 34, 9, -13, -89, -125, -103, -23, 10, 90, -60, 7, -75, -56, -1, 33]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-57, -62, -7, 57, 121, 81, 81, -83, -14, -124, -77, -49, 119, -15, 89, -35]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-27, 34, 9, -13, -89, -125, -103, -23, 10, 90, -60, 7, -75, -56, -1, 33]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-36, -28, 107, -17, 100, -80, 92, 59, -122, -63, -125, -113, -18, -43, 74, -77, -24, 61, -61, -35, -97, -80, 6, -100, -47, -49, 42, -79, -44, -64, 59, 8, 3, 115, 21, 105, -37, -61, 26, 117, 93, 41, -6, 108, -113, -84, -14, -123, -70, -91, 97, -33, -127, 97, -5, 93, 27, -119, 104, 75, 107, 8, 42, 70, 45, -77, 63, -87, 77, -55, 87, 92, 115, -27, -91, 91, 61, -76, -33, 76, 53, 41, 74, -98, 43, 96, 83, 105, 45, -56, 57, -34, -112, 7, -63, -4, -5, -83, 110, 72, 66, -76, -76, -4, -65, 96, 38, -3, 25, 66, -9, 98, -82, 20, -73, -18, 45, -93, 16, 84, 60, 44, 58, 55, -11, -63, 111, -7, 41, -13, 111, 30, 44, 58, 57, 125, 1, -100, 4, -12, -1, -119, 49, -37, 41, -70, -126, 26, 109, 23, -14, -34, -50, 67, -52, 27, -97, 55, -86, -39, 15, 0, 41, -12, -52, 122, -95, -33, 22, -31, -121, -15, -22, -34, 112, -1]");
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey28);
        java.lang.Class<?> wildcardClass36 = byteArray35.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-67, -114, -10, -15, -97, -36, -2, -50, -32, 123, 2, 108, 127, 32, 54, -110]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-60, -13, -78, 20, -69, -15, 82, -70, 64, 75, 63, -124, -71, 91, -123, 17]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-45, 106, 68, 9, -98, -118, -118, 56, 47, -69, 95, -44, -9, 23, 29, -33]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[99, 61, 106, 11, 32, -107, 39, -65, 82, 11, -17, 92, -49, -7, -76, 16]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[43, -22, 127, 2, -30, 1, -107, 3, 15, -20, 119, -34, 48, 75, 9, -5]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-105, -105, 23, -50, 92, -100, -77, 104, -109, -39, 125, -10, 9, 43, 15, -119]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-105, -105, 23, -50, 92, -100, -77, 104, -109, -39, 125, -10, 9, 43, 15, -119]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[125, 49, 87, -101, 65, -88, 31, 115, -10, 18, 79, -103, -101, 1, -19, 90, -78, 121, -31, -117, 30, 119, 22, -27, -14, -18, -101, 85, -59, 8, 14, -50, 43, -22, 127, 2, -30, 1, -107, 3, 15, -20, 119, -34, 48, 75, 9, -5]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[100, -56, -16, 57, 21, 31, 117, -77, -82, -102, 21, 127, 106, -63, 9, 123, -19, -89, -14, 54, 26, 79, 10, -109, -14, 101, -26, -79, -111, -34, 72, -14, -53, -55, 77, -40, 10, 95, -45, 125, -71, -30, 35, -14, 21, 10, 47, -14, 95, -85, 43, -33, 94, 82, 92, -60, 3, -44, 66, 64, -66, -83, -122, -66, 81, -37, -43, -39, -44, 95, -93, -43, 123, -85, -53, -57, -48, 119, -36, -20, 79, 13, -61, 19, -14, -37, 102, 46, 82, -32, 15, 9, 66, -14, -110, 33, 43, -22, 127, 2, -30, 1, -107, 3, 15, -20, 119, -34, 48, 75, 9, -5]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.Class<?> wildcardClass35 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[9, -86, -77, -24, 83, 75, -56, 44, 125, -71, -58, 42, 33, 33, 125, -85]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[121, 67, -125, 68, -50, -24, -74, -38, -108, -126, 53, -32, 53, -51, 13, 83]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-57, 0, 88, -42, 74, -23, 78, 31, -15, 112, 113, -41, 97, -66, 79, 29]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[79, -126, -98, -14, 90, 116, 38, 114, -30, -107, -25, 118, 66, -21, 15, -20]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[110, -20, -104, 81, -12, 42, 59, 12, 96, -51, 34, -67, 103, -76, -57, -86, -66, -49, 62, 12, 24, -15, 111, 20, -51, 80, -101, 70, 48, -15, 103, -30, -57, 0, 88, -42, 74, -23, 78, 31, -15, 112, 113, -41, 97, -66, 79, 29]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-57, 0, 88, -42, 74, -23, 78, 31, -15, 112, 113, -41, 97, -66, 79, 29]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[79, -126, -98, -14, 90, 116, 38, 114, -30, -107, -25, 118, 66, -21, 15, -20]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[71, 16, 9, 1, -123, 100, -88, 66, -52, -7, -41, 112, 125, -58, 73, 35, -7, -14, -108, -24, 0, -41, -82, 3, 112, 61, -24, -89, -37, 92, -92, -9, -57, 0, 88, -42, 74, -23, 78, 31, -15, 112, 113, -41, 97, -66, 79, 29]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[73, -77, -118, 42, -98, 19, 127, -72, -93, 61, -115, 36, 42, 24, -9, 61, -61, 52, 123, -123, -29, 84, 1, -11, 70, -43, -109, -116, -14, -121, 87, 81, 67, 110, 105, 106, 51, -5, 42, 20, 124, 46, -112, -105, 44, -67, 40, -106, -72, -52, -14, 57, 11, 111, -113, 71, -80, 83, -34, -42, -48, 83, -126, 2, 17, -51, 119, 66, -111, -51, 62, -44, 27, -73, 16, -14, -34, -76, 89, -5, -124, 96, -31, 88, -24, -58, 69, -6, -44, -51, 22, 18, -1, -109, 54, -122, -57, 0, 88, -42, 74, -23, 78, 31, -15, 112, 113, -41, 97, -66, 79, 29]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "49B38A2A9E137FB8A33D8D242A18F73DC3347B85E35401F546D5938CF2875751436E696A33FB2A147C2E90972CBD2896B8CCF2390B6F8F47B053DED6D053820211CD774291CD3ED41BB710F2DEB459FB8460E158E8C645FAD4CD1612FF933686C70058D64AE94E1FF17071D761BE4F1D" + "'", str31, "49B38A2A9E137FB8A33D8D242A18F73DC3347B85E35401F546D5938CF2875751436E696A33FB2A147C2E90972CBD2896B8CCF2390B6F8F47B053DED6D053820211CD774291CD3ED41BB710F2DEB459FB8460E158E8C645FAD4CD1612FF933686C70058D64AE94E1FF17071D761BE4F1D");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "49B38A2A9E137FB8A33D8D242A18F73DC3347B85E35401F546D5938CF2875751436E696A33FB2A147C2E90972CBD2896B8CCF2390B6F8F47B053DED6D053820211CD774291CD3ED41BB710F2DEB459FB8460E158E8C645FAD4CD1612FF933686C70058D64AE94E1FF17071D761BE4F1D" + "'", str32, "49B38A2A9E137FB8A33D8D242A18F73DC3347B85E35401F546D5938CF2875751436E696A33FB2A147C2E90972CBD2896B8CCF2390B6F8F47B053DED6D053820211CD774291CD3ED41BB710F2DEB459FB8460E158E8C645FAD4CD1612FF933686C70058D64AE94E1FF17071D761BE4F1D");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "49B38A2A9E137FB8A33D8D242A18F73DC3347B85E35401F546D5938CF2875751436E696A33FB2A147C2E90972CBD2896B8CCF2390B6F8F47B053DED6D053820211CD774291CD3ED41BB710F2DEB459FB8460E158E8C645FAD4CD1612FF933686C70058D64AE94E1FF17071D761BE4F1D" + "'", str33, "49B38A2A9E137FB8A33D8D242A18F73DC3347B85E35401F546D5938CF2875751436E696A33FB2A147C2E90972CBD2896B8CCF2390B6F8F47B053DED6D053820211CD774291CD3ED41BB710F2DEB459FB8460E158E8C645FAD4CD1612FF933686C70058D64AE94E1FF17071D761BE4F1D");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "49B38A2A9E137FB8A33D8D242A18F73DC3347B85E35401F546D5938CF2875751436E696A33FB2A147C2E90972CBD2896B8CCF2390B6F8F47B053DED6D053820211CD774291CD3ED41BB710F2DEB459FB8460E158E8C645FAD4CD1612FF933686C70058D64AE94E1FF17071D761BE4F1D" + "'", str34, "49B38A2A9E137FB8A33D8D242A18F73DC3347B85E35401F546D5938CF2875751436E696A33FB2A147C2E90972CBD2896B8CCF2390B6F8F47B053DED6D053820211CD774291CD3ED41BB710F2DEB459FB8460E158E8C645FAD4CD1612FF933686C70058D64AE94E1FF17071D761BE4F1D");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey22);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        java.lang.Class<?> wildcardClass34 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[115, 30, 40, 32, 105, 69, -87, 125, -58, 121, 54, 77, -63, 11, 124, 52]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-84, -91, 120, -49, 118, -47, -73, -68, 18, -38, -54, 36, -91, -8, 62, 12]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[112, 114, 39, 61, 40, 16, 107, -128, -41, 29, -13, 83, -107, 85, 58, -64]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[96, 39, -1, 84, -8, 94, -127, 5, -90, 97, -8, 57, -120, 93, -100, -100]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-19, 53, 92, 2, 75, 115, -84, 73, -127, 2, -10, -79, 97, -116, -42, -90, 123, 99, -110, 51, -89, 32, -2, -35, -70, 59, -98, -105, 16, -41, -5, -22, 112, 114, 39, 61, 40, 16, 107, -128, -41, 29, -13, 83, -107, 85, 58, -64]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-85, -96, -40, 118, -101, -7, 87, 8, 123, 50, 51, 24, 19, -122, 64, 37, 54, 13, -79, 123, -1, -116, -108, 117, -104, -22, -113, 61, 14, 73, 81, 92, 112, 114, 39, 61, 40, 16, 107, -128, -41, 29, -13, 83, -107, 85, 58, -64]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-82, 13, 73, -102, 123, 88, -123, 38, 86, 97, 8, 110, 121, -64, 79, -109, -56, -27, -39, 98, 120, -102, 94, 64, 116, -79, -20, -60, 77, 31, 29, 91, -115, -95, 82, 119, -80, -121, -43, 62, 126, -88, 86, -25, 64, -52, -36, -78, 91, 74, 34, -23, -21, 106, -8, 126, -82, -104, -95, 76, -122, -74, 26, -64, -100, 122, -25, 15, -23, 21, 86, 102, 0, -81, -120, 112, -47, 113, 97, -81, -106, 89, 81, 95, -13, 40, 112, 121, 8, -25, 25, 104, -95, 126, -16, -100, 112, 114, 39, 61, 40, 16, 107, -128, -41, 29, -13, 83, -107, 85, 58, -64]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[39, -2, -18, -119, 79, -117, 116, -103, -15, 7, 20, -69, -17, 94, 61, -78, -42, 24, -94, -18, 113, -93, -108, -68, -64, -44, -77, -118, 109, -92, 5, 36, 26, -71, 113, -95, 53, -52, 98, 45, 79, 32, -2, -5, -110, 32, 4, -31, 75, 32, -62, 27, 7, -14, 86, -40, -22, -117, 25, 74, 39, 14, 62, -115, -37, 64, -70, 64, 58, 24, 110, -6, 87, -41, -64, 107, 123, 7, 17, -72, -36, 114, 69, 58, 20, -60, -88, -101, 60, 126, 49, 101, -15, 22, 53, -15, 112, 114, 39, 61, 40, 16, 107, -128, -41, 29, -13, 83, -107, 85, 58, -64]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[112, 114, 39, 61, 40, 16, 107, -128, -41, 29, -13, 83, -107, 85, 58, -64]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-13, -77, 50, 90, -88, 50, -1, 50, -2, 123, -124, -105, 103, -21, -10, 112, 108, -69, 46, -63, -72, 86, -82, -17, 62, 95, 112, 86, -50, -27, 46, 72, 112, 114, 39, 61, 40, 16, 107, -128, -41, 29, -13, 83, -107, 85, 58, -64]");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "F3B3325AA832FF32FE7B849767EBF6706CBB2EC1B856AEEF3E5F7056CEE52E487072273D28106B80D71DF35395553AC0" + "'", str33, "F3B3325AA832FF32FE7B849767EBF6706CBB2EC1B856AEEF3E5F7056CEE52E487072273D28106B80D71DF35395553AC0");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[61, -13, -124, 4, 26, 5, -84, -53, 120, 43, -51, 72, 27, -90, -19, -36]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-32, -84, 18, -61, 83, 24, -94, -43, 106, 52, 47, -98, -82, 67, 68, -27]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-25, 28, 63, 15, -46, -20, -116, 64, -118, 53, 120, 0, 87, 64, 82, 56]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-91, -29, 42, 26, -74, 104, -81, -15, -58, -118, -48, -65, 126, -13, -74, -14]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[103, 82, 78, -71, 98, -29, -74, -52, -52, -103, -107, 3, -6, -27, -119, 52, -13, 53, -126, -87, -83, -9, -84, 40, -69, -122, -70, -32, -99, 26, -7, -107, -25, 28, 63, 15, -46, -20, -116, 64, -118, 53, 120, 0, 87, 64, 82, 56]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-11, 40, -79, 48, -42, -10, -34, 119, 58, 1, 70, -112, 95, -121, 90, -56, -118, 85, -115, -3, -109, 19, -41, 6, -59, 80, -115, -27, 54, -1, -52, -112, -25, 28, 63, 15, -46, -20, -116, 64, -118, 53, 120, 0, 87, 64, 82, 56]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[63, 127, 124, 113, -56, 90, -109, 63, 89, -44, -121, 58, -19, 91, 35, 88, -49, -9, -13, 98, 111, -105, 111, -13, -42, -46, -88, 22, -104, 58, -49, -117, -33, -92, 103, -47, -124, 40, 73, -46, -29, 116, 69, -51, 81, -21, 41, 106, -108, 26, -69, 114, -38, -65, 60, 18, 58, -96, 58, 92, -41, 75, -62, 54, -9, 99, 92, -115, -27, -123, 76, 52, -72, -97, -59, 47, 13, 56, -110, 87, 80, 91, -95, 10, 57, -65, 10, -38, -36, 79, -127, 57, -7, -97, 123, -32, -25, 28, 63, 15, -46, -20, -116, 64, -118, 53, 120, 0, 87, 64, 82, 56]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-62, -111, -94, 1, -116, -65, 0, -117, -107, 61, -97, -101, 86, 1, 77, -128, 54, -78, 18, -81, -61, -15, 112, -42, 44, 72, -93, -75, 46, 1, -110, 13, -25, 28, 63, 15, -46, -20, -116, 64, -118, 53, 120, 0, 87, 64, 82, 56]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-128, 95, -111, -27, 74, 31, -26, -127, 0, -22, -40, 97, -102, -91, 54, 4, 5, -22, 111, -102, 34, -40, 35, 126, -48, -76, 115, 38, 16, 67, 61, -82, -26, 92, -59, 123, -40, -25, 87, -123, 110, 84, 83, -12, -19, -39, -77, -91, 17, 37, 103, 103, 78, -94, -1, 119, 54, -114, 43, 35, -40, 4, 26, -122, 89, -18, -31, -98, 17, -51, -78, -78, -30, 80, 104, -62, 100, -98, 86, -103, -94, 6, 110, -27, -10, 98, 100, 20, 105, -71, 80, 76, -38, 71, 115, -20, -25, 28, 63, 15, -46, -20, -116, 64, -118, 53, 120, 0, 87, 64, 82, 56]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey5);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey28);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-125, 44, 115, -128, -120, 38, -69, -54, 37, 89, 86, 35, 3, -72, -56, -5]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-90, 40, 72, 66, 54, 114, -102, -56, 116, -119, 112, 0, -35, -128, -65, 28]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[13, 79, 2, 117, 82, -60, 64, -20, 20, 36, 57, -13, -98, -101, -55, 9]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-103, -86, 26, -28, -22, -61, -106, 52, -92, 99, 64, 7, -58, -95, -85, -37, 7, 118, -36, -67, 104, 84, 0, 48, -88, 87, 41, 23, 6, -104, 123, 38, -125, 44, 115, -128, -120, 38, -69, -54, 37, 89, 86, 35, 3, -72, -56, -5]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[9, 123, -46, 78, 83, -81, 105, -119, -43, -107, 50, -25, 73, -29, -29, 30, 31, -100, 115, -81, 37, 62, 97, 114, 110, 114, -15, -71, 86, 94, 59, 23, -125, 44, 115, -128, -120, 38, -69, -54, 37, 89, 86, 35, 3, -72, -56, -5]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[122, -118, -45, -50, -120, 98, -120, 50, 87, 4, 123, -1, -94, -29, -14, -16]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-56, 3, -28, -29, -31, 39, 94, -107, -102, 102, 60, -88, -93, 31, 3, 96]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[113, -17, 99, -47, -26, -89, -113, 42, 5, -68, -39, -8, 5, 61, -9, 9]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-114, 43, -117, -83, 30, -113, -44, -74, 78, -37, -42, -31, 24, 90, 96, 50]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-34, -97, 3, 4, 41, 63, 30, -1, -53, -77, 119, 55, 23, -43, -42, -87, -33, -30, 64, -71, 104, -124, -75, 27, -108, -70, 81, 49, 45, 79, -98, -29, 14, -115, -87, 80, 61, -87, 39, -96, 30, 72, 71, -112, -58, 76, 26, 118, 18, -73, 79, 103, 12, 22, -30, -42, -110, -53, 12, 95, -33, 85, -12, -79, -103, 53, 31, -13, 33, -39, 75, -27, 115, -105, 83, -86, 100, 110, 125, -101, 14, 67, -13, 57, -42, -111, 90, 19, 111, 106, -49, 85, 47, -8, 82, -39, 113, -17, 99, -47, -26, -89, -113, 42, 5, -68, -39, -8, 5, 61, -9, 9]");
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey20);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey34);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E1967767FBCA9187364B14093D005B637DBE91B2976363574232CE85116F01D166B47891C81BDBC9F77F8848CC39E71474A928EB91D881CDF9EC4DDE7252AA9A435EE1BDE8B240F21A1D1B4FFE75996226C1CD2BD742FFA9ABCF23870D8001A51036471E38BC7ED00A707B277F1A2A85EF0F14916F4C16777ECF2D34D7B4D2FF1AF4CBBADF4C95C01B48726F27A04FD1A7B178BF9E45868E2CA232F29FFDC5E005017B2E23B8CD5D8CC1C102CC4BF9A9F32B22A9F474104BFC0E8CB9863C7DB708EF3F149A810CEEEE2FE64315F32241590357462707D8F48DC82B9D18378750266F61B97521CE0AB6AF87A58E2585C", secretKey34);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-91, 107, -32, 120, -83, 106, 64, -116, 57, -67, -127, -127, -92, -115, 96, -65]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-4, -23, -70, -44, -5, 68, 42, 9, -116, 117, 44, 108, -124, -91, -24, -25]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-68, -19, 18, -25, -93, -64, 124, -1, -54, 60, 6, -126, 85, -34, -100, -37]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[114, -102, 46, -102, 124, -16, 5, -72, -120, -81, -32, 122, -110, 10, 74, -93]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-43, -17, -16, 10, -47, 49, -48, -111, -73, 9, -94, -108, -76, -119, -67, -29, 68, -61, 14, 61, -115, -101, 116, 19, -61, -83, -85, 67, 4, -81, -12, -68, -68, -19, 18, -25, -93, -64, 124, -1, -54, 60, 6, -126, 85, -34, -100, -37]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-96, 117, 8, 40, 12, -94, 117, -78, -118, -65, -124, 40, -37, -89, 28, 104, -74, -70, 100, -124, 20, 36, -123, 107, -72, -51, 126, -94, 94, -45, -17, 87, -68, -19, 18, -25, -93, -64, 124, -1, -54, 60, 6, -126, 85, -34, -100, -37]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-108, 12, -93, -117, -78, -63, 113, 121, 77, 117, 125, 125, -10, 98, -23, -22, 120, -79, -27, -30, -45, 111, 55, 16, -49, 60, -30, 50, -74, -40, 89, 72, -15, 29, 61, -23, 118, -15, -20, -121, 111, -53, -16, 118, -43, -36, 13, -90, 29, 85, -119, 40, -127, -19, -49, -46, -126, 119, -1, -66, -94, 92, -5, 75, -42, 31, 99, 32, 88, -118, 111, 120, -81, -1, 109, -53, -101, 108, 91, 63, -110, -94, -124, -85, 112, -77, -43, 109, -125, 66, -125, 65, -75, 46, 53, 105, -68, -19, 18, -25, -93, -64, 124, -1, -54, 60, 6, -126, 85, -34, -100, -37]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[62, 95, -14, 64, 30, 67, -24, -114, 100, -13, 107, -13, 33, 80, -107, -10, -110, 122, 102, -38, 101, 62, -65, -112, -48, -100, 88, -107, -66, -101, -105, -3, -68, -19, 18, -25, -93, -64, 124, -1, -54, 60, 6, -126, 85, -34, -100, -37]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[78, -9, 109, 24, 92, -126, -41, 97, 72, 126, 95, -76, -94, -78, 8, -6]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-70, 88, 40, 12, 52, -98, 24, 86, 123, 99, 7, 8, -26, 55, -3, -72, -30, 20, 6, -77, 8, 16, -24, 13, 39, -110, 17, 21, -15, 53, -59, -92, 79, -14, -56, 65, 28, -27, 25, -74, 72, 99, -91, 116, 116, -126, 68, 124]");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey58);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey58);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey58);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey58);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[60, -93, -33, 34, -14, -45, 102, 72, 13, 80, 18, -46, -22, 84, 67, -13]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[126, 63, 39, -102, -118, -37, -126, -53, -65, 110, -57, 80, -127, -49, 100, 7]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[25, -5, -23, -20, 56, 17, -90, -35, -83, -43, -11, 34, 17, -108, -113, -43]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-17, 100, 89, -103, 70, 93, -39, -90, -108, 0, 48, -32, 65, 91, 55, 20]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[85, 109, 19, 92, -94, 77, 33, 11, 3, 36, 40, 7, -56, 11, -43, 126]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-60, -22, -61, 65, 25, -73, -6, 102, 44, -104, 8, 30, 78, -100, 26, -111]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-38, -71, -10, -104, 76, -18, 21, -102, -27, -62, 43, 99, 4, -124, -105, -72]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[66, -14, 69, 22, -123, 22, 1, -82, -64, -77, 56, -99, 111, 111, -72, 97]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-23, -6, -94, 80, -126, 25, 88, 22, -52, 82, 0, 28, -110, 107, 94, 97]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[56, 115, 69, 117, 97, -117, 45, 64, 49, 60, -9, 9, 91, 68, 36, 59]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-3, 122, 3, 55, 39, 32, -32, -88, 125, 86, 83, -62, 105, -22, -26, 28]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-41, -77, -18, 72, 45, 59, -119, 111, -85, -82, -57, -51, 94, 12, 26, -89]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-41, -77, -18, 72, 45, 59, -119, 111, -85, -82, -57, -51, 94, 12, 26, -89]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-52, 19, -42, 84, -64, 7, -36, -34, -12, 113, 49, 98, 87, 40, 76, -103, -67, -72, 117, 115, -70, -5, -93, 63, 112, -118, -127, -37, -36, -24, 53, 42, -3, 122, 3, 55, 39, 32, -32, -88, 125, 86, 83, -62, 105, -22, -26, 28]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("73912D453669B7FE81F32940C313724166866F2175F958719DB06EACDD4B5B281CDFE84185F2C4749276BA8BA5DBD8CF2E04DD8ED74819514EFAF9BC4E90AF512FCF0DFE37924499911E8A60792941EBA04320836BF21CEADDDA3D50DE7CD3D4D05E7829B393DF4225B293463740D538", secretKey29);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey38);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[83, -102, -107, 116, -85, -75, -82, 19, 12, 23, 53, -102, 67, -112, 64, 44]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-98, 126, 73, 107, 71, 110, 79, -29, -38, 23, -4, -121, -43, 110, 72, 94]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-88, -87, 0, -6, -113, -78, 116, 116, 114, 81, -75, 40, -92, 77, -123, 36]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-95, -76, 44, -45, -89, 106, 81, 93, 92, 18, -56, 36, -99, 100, 57, 74]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[102, -119, 104, -4, 60, 17, -106, 53, -102, 87, 42, -13, -125, 122, 44, -90]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-61, -86, -124, 44, -84, -98, 64, 76, 115, -2, 68, -10, 114, -89, -59, 54]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-61, -86, -124, 44, -84, -98, 64, 76, 115, -2, 68, -10, 114, -89, -59, 54]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[71, -75, -84, 109, -7, -119, -43, 116, 88, 19, -81, -35, 10, -33, 89, 45, 57, -61, 41, 121, -11, -30, -83, 79, 69, 106, -114, 77, 39, 79, 12, -94, 102, -119, 104, -4, 60, 17, -106, 53, -102, 87, 42, -13, -125, 122, 44, -90]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-72, -96, 29, -101, -25, -12, -110, 11, 11, 4, -51, -81, -79, -83, -82, -59, -68, 109, 121, 71, -13, -31, -7, -25, 17, -4, -2, -118, 110, 6, 3, -102, 102, -119, 104, -4, 60, 17, -106, 53, -102, 87, 42, -13, -125, 122, 44, -90]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(secretKey38);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey46);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey46);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey46);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("1C604D3CCD338D22944C6C4CF4B997A3030197072DC82231F441A1B6CCECC3F353DDF444625888C8C6E87A9597FBF4A8", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-46, 111, 93, 104, -39, 14, -74, 40, 98, 75, 123, 22, 114, -100, -80, -59]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[104, 40, -56, -112, -13, -15, -90, 110, -115, -70, -2, -39, 61, 44, 55, 111]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-11, -3, -83, -49, 40, -106, 113, -19, -45, 56, -36, -51, -101, -5, 42, 38]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-41, -59, -95, 3, -99, -12, 86, 0, 118, 68, 71, 59, -102, -95, 104, 34]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 70, 55, 95, 87, 66, 87, -67, 96, -91, -32, -10, 72, -76, 74, 22, 58, 30, -13, 15, 1, 107, 36, 19, -48, -97, -90, 113, 117, -28, 45, -37, -11, -3, -83, -49, 40, -106, 113, -19, -45, 56, -36, -51, -101, -5, 42, 38]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 70, 55, 95, 87, 66, 87, -67, 96, -91, -32, -10, 72, -76, 74, 22, 58, 30, -13, 15, 1, 107, 36, 19, -48, -97, -90, 113, 117, -28, 45, -37, -11, -3, -83, -49, 40, -106, 113, -19, -45, 56, -36, -51, -101, -5, 42, 38]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-83, -116, 110, -107, 3, 60, 53, 65, 120, -83, 113, 59, -42, 36, -18, -32]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[11, -46, -68, -39, -125, -77, 0, 92, -72, -60, -125, -32, 44, -60, 70, -16]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-95, 89, -98, -106, 8, -31, -78, -31, -51, -120, -48, -49, 67, -30, -77, -28]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[90, 2, -30, -3, 22, 114, 53, 40, 61, -90, 4, 81, -42, -8, 31, -21]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[78, 65, 38, 119, -13, -127, 19, -31, -10, 78, -2, 126, -110, 19, 15, -30, -128, -126, 38, -33, -20, -3, -48, -97, -38, -63, -5, -30, 4, -52, 4, 102, -95, 89, -98, -106, 8, -31, -78, -31, -51, -120, -48, -49, 67, -30, -77, -28]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[27, -124, -71, -55, 75, 37, -116, -56, -126, 82, 24, -89, -51, 33, 65, 8, -65, 15, 31, 91, 103, -41, -109, 1, -27, 110, -128, -34, -102, -29, 64, -4, -95, 89, -98, -106, 8, -31, -78, -31, -51, -120, -48, -49, 67, -30, -77, -28]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-107, 48, -105, 37, -94, 48, -82, 80, -111, -72, -73, 63, -49, 51, 62, 45, 89, 98, 94, 33, -61, -115, -88, -48, -82, 22, -80, 104, -91, -40, 122, -52, 126, 3, 103, -40, -25, -17, -121, -82, -15, -125, 35, -34, -8, -107, 36, 38, -30, 68, -26, -29, -112, -16, -39, -25, 15, 104, 127, 85, -58, -109, -113, -15, -117, -128, -100, 89, 86, 31, 63, 17, -100, -30, -11, -19, -59, 65, -20, 123, -40, -16, -86, 35, 45, -22, 1, 66, 35, 51, -84, 32, -74, -96, 41, -57, -95, 89, -98, -106, 8, -31, -78, -31, -51, -120, -48, -49, 67, -30, -77, -28]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-115, 12, -62, -34, -10, -17, 83, -72, 106, 66, 5, -17, 99, -99, 108, -50, 59, -95, -33, -19, -67, -33, -114, -3, -124, -109, -64, 90, -117, 67, 125, 66, -48, -92, -108, -86, -23, -111, 20, 21, 39, -45, 10, 99, 47, 85, -16, 33, 115, 114, 13, 64, 14, 26, -69, 96, -125, 46, -51, -45, -15, -97, 65, -75, -61, 92, -28, 25, -9, 106, 60, 97, -96, -64, 88, -82, -34, -73, -72, -98, 13, -111, 109, -127, 93, 52, 57, 84, -59, -77, 79, -126, -50, 74, 53, -84, -95, 89, -98, -106, 8, -31, -78, -31, -51, -120, -48, -49, 67, -30, -77, -28]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[127, -27, 54, 78, 47, 104, 99, -5, -76, 122, -113, 44, -98, 93, -69, -18, 11, 119, 79, -37, 114, 83, 24, -67, 86, 28, -123, -105, -10, 119, 125, -19, -97, -82, 25, -3, -92, -28, -82, -24, 80, 82, 103, -68, 42, -48, 104, -17, 19, 10, 83, 39, -119, -66, -92, -43, 46, -48, -71, 78, -30, 56, 52, 74, 109, -91, -68, -29, -120, 13, 67, -59, 22, 90, -128, -109, 17, -57, 86, 124, 59, -53, -92, 53, 3, -105, -44, 86, -114, 84, 99, 26, 56, 83, 48, 3, -95, 89, -98, -106, 8, -31, -78, -31, -51, -120, -48, -49, 67, -30, -77, -28]");
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey33);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey33);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BEBA20EB6E226639B18D711EB33F4341FB0FF3ABB4F555955A1F4A34DCD07DDE673D60E567E40636D2ED65AB40832F7", secretKey33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey33);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[124, 33, -15, 18, -54, 103, 6, -112, 48, -49, -10, -88, 45, -78, 59, -128]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[125, -85, -98, 90, -9, -95, 12, 14, -56, -122, 70, -52, 59, 46, 30, 74]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-103, -1, 57, 32, 114, 53, 35, -2, 58, -11, 58, 31, -66, 61, 58, -3]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[124, 33, -15, 18, -54, 103, 6, -112, 48, -49, -10, -88, 45, -78, 59, -128]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "7C21F112CA67069030CFF6A82DB23B80" + "'", str9, "7C21F112CA67069030CFF6A82DB23B80");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "7C21F112CA67069030CFF6A82DB23B80" + "'", str10, "7C21F112CA67069030CFF6A82DB23B80");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-7, -96, -93, -76, 83, -118, -47, -79, 114, 16, -73, -43, 113, 83, 5, -3]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[99, 14, -46, -74, 101, 71, 105, 48, 117, -81, 106, 83, -99, 92, 57, 117]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-58, -57, -18, -97, -70, 0, -93, 63, -24, 71, 95, 74, 3, -97, 22, -53]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[110, 45, -34, 8, -33, 89, -53, 105, 59, -119, 114, 86, 9, 27, -85, 100]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[58, 51, -32, 106, 76, 85, 28, -3, 43, -55, 19, -126, -44, 33, -117, 58, 11, -45, 45, -57, 124, -72, 105, -5, -53, -93, 40, 74, 54, 121, 64, 75, -58, -57, -18, -97, -70, 0, -93, 63, -24, 71, 95, 74, 3, -97, 22, -53]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[36, 13, 16, -43, -16, -77, -36, 35, 96, 29, -87, 121, 78, 80, -41, -77, -92, 48, 23, -99, 69, -82, 16, 80, 79, -55, 1, -24, 10, 83, 72, -98, -58, -57, -18, -97, -70, 0, -93, 63, -24, 71, 95, 74, 3, -97, 22, -53]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-36, -89, 49, -119, -91, -40, -21, 7, 49, -27, -65, 21, 53, 80, 108, -20, -105, -101, -111, -78, -10, 109, -37, 81, 86, 0, 15, -6, 41, 73, -120, -1, 61, 29, 39, 25, -99, 18, -74, -43, -124, 107, -24, -40, 64, -97, 14, -122, -87, -73, -120, -51, 10, 91, 46, 4, -108, 111, 5, -83, -9, -27, 14, -106, -88, -47, -1, -65, 109, 123, -79, -78, -88, 92, -54, 39, 88, -21, -15, 53, -24, -15, -87, 106, -69, 76, -69, 118, -98, 98, 84, 10, 71, -24, 93, -105, -58, -57, -18, -97, -70, 0, -93, 63, -24, 71, 95, 74, 3, -97, 22, -53]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[14, -116, 19, -18, 72, -9, 52, 101, 3, -30, 118, -94, -68, -75, 104, 12, -72, -88, 16, -121, 35, 64, 101, 67, -88, -85, -86, -128, -64, 26, -126, -20, -58, -57, -18, -97, -70, 0, -93, 63, -24, 71, 95, 74, 3, -97, 22, -53]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-128, 70, -76, 37, -66, -39, -30, -75, -81, -51, -117, 89, -8, 127, 111, 7, 52, 19, -5, -28, 76, 104, 125, -29, 86, -42, -23, -83, -90, -21, 83, 127, 122, 85, 43, 83, -70, 52, -15, 101, -7, -65, -1, -59, -4, -55, 30, 125, 66, 40, 51, 127, -11, 20, 29, -83, 31, 34, 46, 12, -44, -84, -100, -66, 7, 24, 74, 6, 18, 69, -32, 113, -32, 100, -64, 55, 48, -74, 62, -108, -55, -120, -85, -71, -110, 35, -47, 70, -23, 117, 90, 32, -10, 83, -35, -99, -58, -57, -18, -97, -70, 0, -93, 63, -24, 71, 95, 74, 3, -97, 22, -53]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[112, -43, -118, 79, 110, 121, 62, 85, -103, 124, 17, -119, -17, -126, -47, -92, 58, 78, 31, -100, 112, -86, -83, -39, 42, -15, -35, 0, -17, 88, 73, 109, -54, -107, 67, 36, 101, -19, -118, 93, -24, -17, -11, 108, -20, -59, 104, 116, -38, -59, -15, -104, -112, -119, 17, -35, -2, 105, -27, 38, 96, -71, 5, -59, 56, 57, -82, 109, -112, -51, -57, 100, -36, 90, -2, -31, 1, 0, -52, -10, -25, 72, -74, -58, -9, -56, -80, 1, -21, 65, -14, -35, 122, -123, -89, 77, -58, -57, -18, -97, -70, 0, -93, 63, -24, 71, 95, 74, 3, -97, 22, -53]");
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey28);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey36);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey41);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey64);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey64);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey64);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[86, -54, 68, 67, -37, 113, 93, 107, -32, 127, 99, -76, -114, 123, 127, 74]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[32, -123, -14, -54, -115, 40, 54, -124, 104, -61, -91, -123, 81, -47, -86, 49]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-87, 2, -95, 110, -45, -42, 112, -18, 74, -82, -87, 45, 3, -72, -34, 57]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-49, 123, -113, -73, -4, 2, -61, 93, 103, 26, 98, -50, 62, -67, 56, -62]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-19, 25, 51, 9, 85, 89, -110, -118, 92, -96, 47, -76, -87, -13, -95, -81]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[122, 50, 29, 89, 117, -38, -7, 77, 17, -110, -63, 53, -98, 100, 9, 34]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -21, -96, -128, -117, -9, -73, 101, 64, -57, -39, -64, 58, 18, 121, 0]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-19, 25, 51, 9, 85, 89, -110, -118, 92, -96, 47, -76, -87, -13, -95, -81]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[104, -16, 99, -72, -2, -91, 40, 77, -102, 98, -74, 120, -82, -47, 114, -107]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-51, 40, -95, -96, -106, -79, -34, -72, 42, 66, -128, 11, 2, -126, -1, -19, -68, -108, -93, 33, 125, -9, 98, 75, -31, 115, 75, -72, -26, -67, 13, -99, 77, -122, 101, -85, -18, 127, 26, 65, 19, 84, 120, 40, 63, -83, 39, -33]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[125, 71, -57, 18, -53, 7, -77, -122, 108, -49, 19, 29, -33, -70, 120, 47]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-9, 87, -15, -69, 24, -91, 7, -4, -16, -109, -65, 52, 94, 86, -40, 12]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-30, -89, 14, 53, 9, 24, 121, 6, -104, 88, -54, -87, -62, 120, 91, 117]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-7, -117, -41, -35, -111, 99, -78, -77, 76, -127, 12, 36, -89, 51, -127, 73]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-121, 18, -118, -85, -109, -125, 88, 31, -58, -8, -11, -111, -75, -33, 79, -110]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-98, -101, 65, -54, -48, 101, -104, -109, 74, -44, 69, 82, 2, -115, -71, 77, 73, -1, 101, 87, -54, 49, 107, 70, -96, 112, 78, 4, 6, -124, -93, -78, -7, -117, -41, -35, -111, 99, -78, -77, 76, -127, 12, 36, -89, 51, -127, 73]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 50, -78, -76, -91, 35, -37, -76, -10, -33, -50, 43, -47, -5, 34, -26, 91, -29, -22, -18, 19, 117, -124, 30, 11, -112, -70, -122, -99, -82, -100, -113, 29, 108, 123, 100, -63, -104, 57, -63, 70, 65, -25, 124, 15, -22, 50, -111, 15, 121, 72, 91, -79, 13, 61, -95, -80, 125, 115, -32, 63, -5, -125, 55, -67, 36, 13, -33, -94, 41, 65, 90, 118, 64, 76, -126, 34, -113, -75, -63, -41, 30, 67, 0, -9, 46, -22, 80, 21, -82, -5, 44, -38, 32, 101, 79, -7, -117, -41, -35, -111, 99, -78, -77, 76, -127, 12, 36, -89, 51, -127, 73]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-115, 34, 113, -14, -2, 125, -6, 55, -65, -77, 89, 16, 0, -94, 33, -28, 16, 116, 75, -55, -63, -4, -128, 120, 4, -33, 124, 85, -62, 88, 99, -61, -7, -117, -41, -35, -111, 99, -78, -77, 76, -127, 12, 36, -89, 51, -127, 73]");
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD016B569A2999509F59EE7F094987DD", secretKey6);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey34);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey34);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey34);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey34);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[37, 119, -38, -3, -47, 101, -23, 6, -82, -35, -42, -5, 18, -30, -108, -77]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[8, 98, -79, 110, -59, -27, -57, -26, -74, 90, -16, -21, -107, 50, 93, 80]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[8, 98, -79, 110, -59, -27, -57, -26, -74, 90, -16, -21, -107, 50, 93, 80]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[28, 19, 2, 31, -58, -101, 83, -108, 49, 93, -77, 107, 61, -123, 74, 117]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[8, 98, -79, 110, -59, -27, -57, -26, -74, 90, -16, -21, -107, 50, 93, 80]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[77, -94, 14, -21, -102, -35, -89, 66, 72, 117, -84, -94, 64, 31, 119, 48, -48, 111, -97, 114, 82, 37, -26, 36, 7, 120, 7, -101, -114, 8, -78, 61, 37, 119, -38, -3, -47, 101, -23, 6, -82, -35, -42, -5, 18, -30, -108, -77]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[83, 114, -92, 113, -101, 12, 117, -54, 102, 4, -82, -119, 64, 2, 31, 41]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[41, 29, 41, -34, -93, -90, -40, 2, -46, 101, -19, 62, 121, -30, 56, -87]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-79, -42, -93, -67, 82, -55, 105, -26, 81, 111, -79, 110, -125, 75, 107, -51]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[63, 89, -63, -53, 31, 14, 119, -111, -4, -15, -71, 99, 103, -74, -83, -65]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[116, 31, -72, 95, 46, -89, -54, 1, 97, -55, 66, -55, 79, -18, 55, 100, 7, -5, -56, 54, 58, -3, 95, 78, 47, 4, 43, 26, -44, 127, -93, -83, -79, -42, -93, -67, 82, -55, 105, -26, 81, 111, -79, 110, -125, 75, 107, -51]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-95, 50, -37, 116, -13, -16, -121, -70, 62, -45, -13, -58, -94, 85, -120, 13, 5, 4, 72, 77, 95, 19, 21, 35, -123, 12, -42, 100, 105, 56, -36, 36, -79, -42, -93, -67, 82, -55, 105, -26, 81, 111, -79, 110, -125, 75, 107, -51]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -55, -27, -21, -54, -21, 18, 24, 18, -89, 26, -38, -46, 2, 86, -23, -20, -53, 126, -57, 125, 98, 12, -115, 107, 5, -44, -83, 61, 82, 8, 79, -48, 20, -78, -104, -5, 83, 126, -84, 16, 85, -119, 115, -32, -70, -120, -35, -110, -36, 69, 123, 43, -70, 15, -64, -125, -99, 46, -22, 121, 119, -39, -91, -34, -23, -89, -43, -7, -61, -29, -82, 31, 58, 78, -93, -94, 69, 55, 37, 106, 54, -14, 86, 38, 113, 71, -52, 109, 29, -121, -3, 61, 67, -111, 96, -79, -42, -93, -67, 82, -55, 105, -26, 81, 111, -79, 110, -125, 75, 107, -51]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-120, 115, -2, 114, 100, -18, -35, 15, 9, -40, 8, 27, 22, -105, -46, 96, -61, 33, 24, 9, 35, 106, 101, -81, -45, 41, 38, 15, 2, 45, -84, 49, -79, -42, -93, -67, 82, -55, 105, -26, 81, 111, -79, 110, -125, 75, 107, -51]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-66, -119, -107, 28, -16, -43, 37, -85, 99, 70, 34, -77, -81, 95, -79, 70, 115, -81, 4, 75, -24, -4, -114, -82, -44, -64, 16, -103, -81, -66, 126, -26, -79, -42, -93, -67, 82, -55, 105, -26, 81, 111, -79, 110, -125, 75, 107, -51]");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.Class<?> wildcardClass28 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-20, 42, 83, -4, -60, -52, 22, 62, 14, -34, -106, 82, 83, 26, -108, -48]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-63, 82, 100, 40, 29, 24, -53, 15, -121, -103, 105, -116, -117, 48, -69, 127]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[34, -12, 55, -63, -55, 74, -75, 49, 103, -123, 34, -25, 119, 89, -92, 121]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-114, -30, 97, -49, 10, -72, -9, -38, 31, 99, 69, 117, -37, -90, -15, 79]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[93, -76, -88, -87, -19, 79, 77, -51, 22, 79, 0, -31, -110, 45, -77, 82, -117, -14, -4, 59, 13, -46, 72, 12, 62, 75, -26, 115, 116, 35, -114, 24, 34, -12, 55, -63, -55, 74, -75, 49, 103, -123, 34, -25, 119, 89, -92, 121]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[93, -76, -88, -87, -19, 79, 77, -51, 22, 79, 0, -31, -110, 45, -77, 82, -117, -14, -4, 59, 13, -46, 72, 12, 62, 75, -26, 115, 116, 35, -114, 24, 34, -12, 55, -63, -55, 74, -75, 49, 103, -123, 34, -25, 119, 89, -92, 121]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[34, -12, 55, -63, -55, 74, -75, 49, 103, -123, 34, -25, 119, 89, -92, 121]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "22F437C1C94AB531678522E77759A479" + "'", str27, "22F437C1C94AB531678522E77759A479");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey3);
        java.lang.Class<?> wildcardClass6 = secretKey3.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey5);
        java.lang.Class<?> wildcardClass10 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-69, 114, -108, 13, -97, -60, 15, -107, 6, -10, -125, -123, -69, -42, -96, -59]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-121, 66, 33, -115, 124, -105, 87, -10, -113, -32, 31, -81, -53, -89, -49, 120, 3, 14, 58, 73, 26, -112, -88, 21, 98, 112, 70, -49, -12, 78, 32, -29, -34, 78, -21, -56, -74, 55, -13, -63, 76, -14, 21, 103, -56, 79, 6, 65]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-5, 31, -46, -115, 45, 106, -50, 50, -30, 27, 98, -44, -97, 40, 35, 59, -101, -107, -75, 64, -21, 60, 127, 32, 103, 58, -122, 4, 0, -92, -126, -107, -34, 78, -21, -56, -74, 55, -13, -63, 76, -14, 21, 103, -56, 79, 6, 65]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey5);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey31);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-120, 116, -65, 99, -43, 100, -47, 118, 0, 113, 74, 36, 86, 101, 2, -17]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-11, 95, 104, -10, 69, 6, -59, -23, -7, -32, -73, -31, -70, -77, 54, -63]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-11, 95, 104, -10, 69, 6, -59, -23, -7, -32, -73, -31, -70, -77, 54, -63]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-120, 116, -65, 99, -43, 100, -47, 118, 0, 113, 74, 36, 86, 101, 2, -17]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[33, -75, -66, 24, 36, 41, 50, 64, 30, -25, 38, 7, -4, -46, -97, 117]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[61, -110, -9, -43, -58, -12, -125, -10, -4, -90, 62, 63, -60, 15, 75, -105]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-72, -124, -64, -96, -62, -115, 80, -80, -46, -41, 38, 61, 11, -100, -64, 47]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[23, 57, -80, 73, 2, -31, 30, -48, -31, 105, -29, 25, 92, -75, -109, -94]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-105, -45, -56, 28, 121, -23, -3, 67, 95, 9, 58, -14, 68, 8, 93, 46, -84, -116, 19, -33, 116, -34, -72, -45, -115, -70, -20, -90, 31, 2, 22, 54, -72, -124, -64, -96, -62, -115, 80, -80, -46, -41, 38, 61, 11, -100, -64, 47]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[125, -122, -49, -2, -70, 59, 63, 65, -83, 17, -8, 75, 13, 103, -42, -5, -115, -89, -77, 105, 78, 33, 93, 89, -96, -9, 48, -46, 0, 19, 100, -45, -72, -124, -64, -96, -62, -115, 80, -80, -46, -41, 38, 61, 11, -100, -64, 47]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[68, -7, 89, -21, 77, -97, -90, -27, 50, -7, -109, 53, -28, 15, 36, 95, 127, -115, -127, -47, -44, -81, -24, -117, -16, -6, -113, 25, -25, 37, 98, -51, 99, -38, 70, -121, -59, -85, -23, -63, 46, -28, 9, 43, -26, 104, -26, 46, 43, -109, -37, -53, 46, 66, -52, -100, -16, -80, -33, -97, -97, 121, -94, 114, 18, 112, -53, -50, 70, -93, -7, 43, 16, -2, 94, 84, 8, 91, -107, 41, 109, -3, -32, 91, 108, 50, 17, 54, -84, -67, 32, 24, 61, 83, -116, -61, -72, -124, -64, -96, -62, -115, 80, -80, -46, -41, 38, 61, 11, -100, -64, 47]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[20, 15, 51, -55, -24, 40, -82, 30, -34, -89, 65, -42, 8, 109, 23, -63, 37, -108, 113, 11, -111, 118, -30, 59, 13, 97, -61, 37, -32, -103, 42, 63, 21, 20, -117, 5, 58, 2, 82, -86, 107, 7, 27, 105, -124, 22, -127, 67, 109, -117, 77, -91, -81, -107, 27, 78, -24, -25, -121, 110, 67, 83, 47, -8, 85, -10, -50, -69, -64, 82, -41, -23, 7, 62, -22, -107, 121, 116, -32, -80, -101, -96, -20, -7, -95, 114, 85, -102, -105, 1, -77, -50, 43, 41, -60, 76, -72, -124, -64, -96, -62, -115, 80, -80, -46, -41, 38, 61, 11, -100, -64, 47]");
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey53);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        java.lang.Class<?> wildcardClass63 = byteArray62.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-44, 49, -116, 73, -116, 97, 71, -51, 85, -122, 77, -1, 88, -61, 44, -66]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[90, -77, 13, -2, -14, 89, -51, 122, 116, -50, 98, 114, -31, -110, -92, -15]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[45, 60, 38, 54, -37, -22, -48, -29, 33, -74, -108, -76, 121, 76, 122, -119]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[95, 3, -75, 26, -110, 47, 104, 5, -108, 81, 69, -13, -14, 100, -49, -53]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[54, 17, 65, 84, 71, 21, -74, 27, 35, 109, 41, -119, 37, -109, -87, 68]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[120, -44, 98, 79, 41, 84, -109, 24, 113, 96, 14, -79, -112, -42, 17, 89]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[5, -49, -48, -32, -50, -85, -22, -121, -122, 44, 110, -58, 74, 41, -98, 6]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[40, -98, -70, 14, -42, 103, 0, 23, -4, -108, 90, -117, 112, -123, -36, 38]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[27, 3, 93, 1, 7, -15, -81, 92, 63, -93, -21, -50, -72, 113, -55, -36]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-55, -49, 82, -38, -40, -10, -23, -111, -65, -9, 13, 25, 95, -116, 63, -75]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[15, 75, 7, -14, -19, 75, -125, 94, -60, -97, 107, -4, 106, -109, -103, 16]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[27, 3, 93, 1, 7, -15, -81, 92, 63, -93, -21, -50, -72, 113, -55, -36]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-101, 83, 59, 87, -118, -60, -41, -124, -61, 106, -18, -23, 0, -78, -107, 91, 41, 91, -93, 38, -81, 64, 23, -75, -107, 10, 61, 55, -69, 3, 6, 101, 27, 3, 93, 1, 7, -15, -81, 92, 63, -93, -21, -50, -72, 113, -55, -36]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[27, 3, 93, 1, 7, -15, -81, 92, 63, -93, -21, -50, -72, 113, -55, -36]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey26);
        java.lang.Class<?> wildcardClass32 = secretKey26.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-7, 56, -77, 26, 108, 98, -43, 36, -19, 68, 16, -47, -89, 100, -26, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-87, 1, 95, -110, 34, -126, -91, -118, -102, -96, -111, 63, 42, 42, -15, -14]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[77, 1, 82, -104, -72, 108, -19, 27, 45, -85, -24, 117, -57, -84, 69, -12]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[103, 109, -115, -87, -65, 120, -27, 34, 3, -30, -22, 97, 95, -8, 70, 83]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-37, -42, -104, 24, 102, 120, 34, 6, -99, 119, 91, -13, 61, -119, -75, 99]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[2, 53, 1, -10, 31, 34, 8, 122, 65, -51, 96, 88, -85, -80, 42, 83]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[2, 53, 1, -10, 31, 34, 8, 122, 65, -51, 96, 88, -85, -80, 42, 83]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-5, -10, 127, 24, 47, -102, -101, -10, 113, 115, -3, -10, -44, -122, 72, -39, -98, 124, -91, 30, 35, -126, -115, 109, -112, 102, -72, 50, -65, -64, -108, -82, -37, -42, -104, 24, 102, 120, 34, 6, -99, 119, 91, -13, 61, -119, -75, 99]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey20);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey52);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey52);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey52);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey52);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-74, -67, -107, -6, 35, -97, 8, -4, -21, 33, 45, -96, -62, -100, -123, -56]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[44, -69, -36, 126, 111, 63, -57, 114, -82, -111, -123, -47, 34, -120, -75, -110]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-119, -20, 105, 24, 117, -69, 98, 3, 27, -37, 18, -13, -73, -19, 38, -101]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-60, -43, 97, 83, 22, -88, -89, -77, -107, 98, -86, -81, 26, -6, -118, 84]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[15, -32, -125, 13, 18, -52, 14, 61, 48, -88, 106, -126, 125, -28, -91, -70, -29, 32, 95, 35, 51, -33, 7, -77, 118, 77, 54, -39, 5, 18, -44, -42, -119, -20, 105, 24, 117, -69, 98, 3, 27, -37, 18, -13, -73, -19, 38, -101]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[95, -58, -68, 68, 40, -99, 17, 32, -120, -94, 1, 3, -126, -14, 28, 73, -26, 3, -3, 69, 121, 9, -15, 25, -38, -39, -15, 69, -31, -35, -121, -46, 84, 79, 0, 48, -2, 33, -55, 39, -56, -64, -102, -78, -114, 56, 5, -125, 66, -17, 68, -76, -19, 83, 32, -45, -35, -18, 24, -53, -115, 55, 70, -56, -39, 16, 18, -80, -74, 88, -34, -28, 33, 42, 112, 57, 3, -98, 113, 31, 125, 49, 89, 92, -80, -89, -76, -43, -26, -14, 40, 59, -114, -98, -52, -73, -119, -20, 105, 24, 117, -69, 98, 3, 27, -37, 18, -13, -73, -19, 38, -101]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[95, -58, -68, 68, 40, -99, 17, 32, -120, -94, 1, 3, -126, -14, 28, 73, -26, 3, -3, 69, 121, 9, -15, 25, -38, -39, -15, 69, -31, -35, -121, -46, 84, 79, 0, 48, -2, 33, -55, 39, -56, -64, -102, -78, -114, 56, 5, -125, 66, -17, 68, -76, -19, 83, 32, -45, -35, -18, 24, -53, -115, 55, 70, -56, -39, 16, 18, -80, -74, 88, -34, -28, 33, 42, 112, 57, 3, -98, 113, 31, 125, 49, 89, 92, -80, -89, -76, -43, -26, -14, 40, 59, -114, -98, -52, -73, -119, -20, 105, 24, 117, -69, 98, 3, 27, -37, 18, -13, -73, -19, 38, -101]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-109, -22, -123, -61, -80, -99, -33, -21, 2, -71, 29, 4, -16, -39, -42, 98, -18, -9, 55, -2, 67, 110, -37, -113, -77, 40, 42, -109, -8, -43, 113, 22, 23, 122, 121, 23, -28, 73, -32, 91, -122, 87, 9, 124, -53, -72, -17, -114, 4, 52, 86, 38, -118, 23, -79, 51, -87, -60, -104, 116, 23, 1, -56, 4, 89, 76, 94, -9, -23, 80, 105, 113, 91, -15, -87, -112, -62, -28, -80, -63, -36, -81, -96, -1, 118, -27, -43, 107, -51, -93, -59, 27, -8, -105, 60, -87, -119, -20, 105, 24, 117, -69, 98, 3, 27, -37, 18, -13, -73, -19, 38, -101]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-105, 85, 119, 37, 72, -10, -78, 113, -95, 0, -36, 33, 103, 79, -126, 35]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[124, 101, 67, -101, -26, -101, -121, 39, 107, -47, -94, -99, 36, -97, 43, -41]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-46, -43, 47, 78, 78, -2, 87, -45, -121, 43, -60, 19, -75, -29, -63, 8]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[48, -114, 117, -117, -100, 99, 89, 121, -43, 83, -22, -81, -77, -53, 55, 109]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[8, -29, -87, 20, -106, -123, -43, -92, -19, 56, 75, -114, 42, -90, -48, -51, 2, -1, -54, -119, 84, -114, 18, 45, 119, 94, 75, 26, 88, 104, 31, 23, -46, -43, 47, 78, 78, -2, 87, -45, -121, 43, -60, 19, -75, -29, -63, 8]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-127, -84, -123, 119, 115, -104, -110, 53, 124, -104, -84, -29, -102, 7, 76, -59, 55, 81, -52, -33, -48, 95, 97, -98, -110, -127, 66, -2, -110, 39, -44, -62, -46, -43, 47, 78, 78, -2, 87, -45, -121, 43, -60, 19, -75, -29, -63, 8]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-39, -6, -50, 13, 11, 26, -100, 117, -86, 117, 78, -63, -63, -62, -35, -93, -16, -85, -93, 27, -74, 48, 60, 64, -11, -14, -83, 34, 50, -102, 13, 85, 106, 0, -99, 12, 47, 77, -15, -119, 63, 2, -6, -118, 13, 44, 110, 121, -126, -30, -51, -75, -61, 51, 94, -9, 125, 80, 48, -11, -64, 125, -50, -91, 104, 2, 76, 20, -86, -23, 103, -93, -89, -57, -10, -76, -57, 48, -67, 127, -119, 93, 9, -86, -28, 50, 70, -93, -73, 14, 106, 58, -94, -44, -110, 117, -46, -43, 47, 78, 78, -2, 87, -45, -121, 43, -60, 19, -75, -29, -63, 8]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-90, -99, 126, -122, 53, 125, 86, 73, -15, 117, -115, 5, -46, 102, -37, 41, -18, -94, 1, -116, 105, -51, -75, -49, -18, 17, 76, -68, -66, 17, 40, -118, -1, -54, 102, -104, 117, 72, 73, -92, 59, 103, 12, -49, -72, -35, -44, 28, 74, 75, -96, -92, 66, -76, 22, 77, -122, -83, -113, 37, -71, -20, -5, 48, 51, 46, 53, 109, -99, 39, 27, -34, 100, 78, -121, -71, -5, -51, -28, 66, 103, -42, 32, 104, 104, -74, -63, -118, -40, 35, 24, 87, -23, -27, 120, -78, -46, -43, 47, 78, 78, -2, 87, -45, -121, 43, -60, 19, -75, -29, -63, 8]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-46, -43, 47, 78, 78, -2, 87, -45, -121, 43, -60, 19, -75, -29, -63, 8]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-2, 37, -110, -11, 73, 66, -125, 58, 21, 32, 21, -35, -14, -69, -35, 19, 97, -108, 127, -43, 25, -47, -101, -88, 41, -91, -32, 36, 65, 11, 4, 56, -46, -43, 47, 78, 78, -2, 87, -45, -121, 43, -60, 19, -75, -29, -63, 8]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[49, 92, -105, 44, -100, -65, 48, 67, -14, 9, 51, -28, -101, -101, -51, -80, -101, 25, 30, 89, -83, -70, 50, -85, 58, -6, 56, 80, -99, -73, -11, 63, -87, 0, -121, -59, 72, -51, -4, -124, -7, -10, 67, 98, -95, -126, -125, 38, 75, -128, 102, -43, -43, -22, 60, -112, -40, -80, 11, 83, 100, -37, 9, -69, 61, 21, 4, -82, -78, 122, 38, 28, -83, -4, -72, -115, -105, 11, -7, -42, 93, 76, 58, -27, 64, 81, 60, -81, 25, 108, 34, 66, 50, -93, -32, -108, -46, -43, 47, 78, 78, -2, 87, -45, -121, 43, -60, 19, -75, -29, -63, 8]");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("60776C49AD5DF687B0C31C9B3F6A1ABA", secretKey5);
        java.lang.Class<?> wildcardClass10 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-56, 61, 61, -33, -103, -46, 7, 10, 67, 18, -64, 125, -72, -107, -20, 16]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[103, -98, -1, 27, -124, 56, 17, 67, -69, 70, -62, 29, -60, -122, -20, 11, -119, 116, -120, 6, -19, -95, 59, -128, 17, -91, -108, -71, -10, -94, -121, -51, 26, 100, -62, -17, -103, 30, 25, -83, 69, 64, -2, -84, -121, -69, 125, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-78, -21, -27, -32, 44, 55, -70, -81, -73, 51, -121, 48, 7, 67, 78, 47, 55, 125, -102, -27, -98, 113, -2, 29, 26, 23, 69, -123, 95, 56, -75, -59, 26, 100, -62, -17, -103, 30, 25, -83, 69, 64, -2, -84, -121, -69, 125, 0]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey22);
        java.lang.Class<?> wildcardClass33 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[72, 87, 57, -71, 37, -9, 77, 100, 72, -120, 11, -110, 3, 20, -15, -128]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[51, -126, -22, 96, -41, -112, -95, -77, -120, 1, -46, -42, -47, -54, 12, 4]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-31, 92, 89, -119, 19, 14, 89, 56, 19, 84, 94, 26, 102, -111, -27, -82]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-111, 77, -1, -58, 112, -69, -63, -103, 26, 2, 55, 76, -110, -74, -28, 25]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-90, -26, 5, -112, 3, -110, 92, -9, 111, 14, 13, -72, 101, -4, 66, 37, -29, 85, 75, 27, 13, -56, 14, -41, 44, 91, 125, -10, 51, 114, 34, 77, -31, 92, 89, -119, 19, 14, 89, 56, 19, 84, 94, 26, 102, -111, -27, -82]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-96, -29, 71, -31, -108, 68, -126, 61, 125, 4, 35, 24, -58, -76, -5, -69, 29, 109, -122, -74, -44, -89, -14, 83, -58, 41, -80, 118, -72, -96, -34, -57, -31, 92, 89, -119, 19, 14, 89, 56, 19, 84, 94, 26, 102, -111, -27, -82]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[80, 71, -35, -106, -70, 81, -57, 102, 60, -57, -44, -34, -90, -28, 90, -41, -126, -113, 26, -118, -25, 70, -119, -14, -74, 111, -110, 104, -60, 97, 23, 31, 13, -3, 21, -55, -10, 117, 42, 39, -48, -54, -13, -107, -117, -122, -78, -110, 7, 5, 114, 60, -64, 99, 85, -78, -54, -68, 23, -89, 51, 54, -94, -126, -57, -74, -47, 28, -58, -89, 93, -73, 113, -97, -127, 85, -104, -28, -52, -70, -120, 79, 120, -19, 117, -73, -21, -119, -61, -28, -117, 51, 112, 18, -53, 0, -31, 92, 89, -119, 19, 14, 89, 56, 19, 84, 94, 26, 102, -111, -27, -82]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[80, 71, -35, -106, -70, 81, -57, 102, 60, -57, -44, -34, -90, -28, 90, -41, -126, -113, 26, -118, -25, 70, -119, -14, -74, 111, -110, 104, -60, 97, 23, 31, 13, -3, 21, -55, -10, 117, 42, 39, -48, -54, -13, -107, -117, -122, -78, -110, 7, 5, 114, 60, -64, 99, 85, -78, -54, -68, 23, -89, 51, 54, -94, -126, -57, -74, -47, 28, -58, -89, 93, -73, 113, -97, -127, 85, -104, -28, -52, -70, -120, 79, 120, -19, 117, -73, -21, -119, -61, -28, -117, 51, 112, 18, -53, 0, -31, 92, 89, -119, 19, 14, 89, 56, 19, 84, 94, 26, 102, -111, -27, -82]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-28, 18, 26, 87, 122, -17, -9, 46, -95, -126, 0, -40, -106, 120, -96, 53, -30, -109, 57, 3, 111, 83, -30, -10, -29, 76, 73, 117, 44, -75, -101, -49, 40, 104, -61, -39, -114, -113, 63, 81, -115, -77, -5, 120, -44, 81, 38, 117, -121, 110, -71, -66, -9, -59, -39, -123, -89, 77, 114, -119, -34, 123, 75, -34, -4, -100, 96, -84, 35, -85, -123, -43, 100, 41, -48, -88, -101, -38, 95, -49, -74, -40, 31, 90, -100, -61, 3, 46, -107, 4, 4, -95, 49, 73, 97, -69, -31, 92, 89, -119, 19, 14, 89, 56, 19, 84, 94, 26, 102, -111, -27, -82]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[124, 24, -47, -17, -33, 34, -36, -77, 19, -122, 61, 56, 17, -75, 72, 52, 13, -122, -77, -79, -21, 63, 48, -8, 110, 8, -100, -74, 102, -124, -24, 98, -31, 92, 89, -119, 19, 14, 89, 56, 19, 84, 94, 26, 102, -111, -27, -82]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        java.lang.Class<?> wildcardClass61 = byteArray60.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-24, -26, -34, 119, -126, 21, -67, 5, 52, -13, 124, -26, 56, -105, -117, -27]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[80, -17, 112, 122, 71, -80, -22, 111, -120, 62, -46, 64, -21, 51, 104, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[116, -97, 112, 6, -26, 109, 31, 83, 98, -72, -116, -5, 4, 31, -5, 13]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[73, 9, -45, 64, -35, 101, -75, 85, 45, -31, 22, -7, 64, -10, -110, -98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[91, 96, -44, -98, 113, 61, -28, -103, 125, 31, 12, 84, 70, 94, -95, 114]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[44, -57, -71, -43, 48, -62, -85, 20, -84, -90, -1, 35, -85, 100, -94, -47]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-126, 24, -98, -124, -83, 25, -21, -118, 49, 59, 19, -44, 28, 89, -39, 2]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-8, 44, 12, -109, -64, -84, -81, 11, -39, 65, 125, 104, 84, -70, -21, -27]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[115, 84, 67, 87, 90, -17, -1, 27, 21, 6, 44, -13, 58, -98, 114, 107]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[58, 6, 28, -25, -17, -115, 8, 127, 59, -16, 117, 13, -98, 94, -78, -12]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-85, 23, -52, 98, 27, 37, -23, 48, -27, -19, 9, -33, 41, -58, -11, 93]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[115, 84, 67, 87, 90, -17, -1, 27, 21, 6, 44, -13, 58, -98, 114, 107]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[42, 112, -112, -99, -128, 54, 23, 47, 83, 69, -31, 10, 48, -27, 13, 122, -104, -44, -40, -112, 64, -99, -87, 93, -74, -27, 109, 41, -42, 18, -24, 28, 115, 84, 67, 87, 90, -17, -1, 27, 21, 6, 44, -13, 58, -98, 114, 107]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-55, -69, 55, -108, 71, 78, -113, 11, -58, 124, -39, 69, 101, -97, -54, -101, -43, 91, -41, 12, 126, -48, 76, 13, 35, 47, 56, 56, -77, 84, 15, 113, 115, 84, 67, 87, 90, -17, -1, 27, 21, 6, 44, -13, 58, -98, 114, 107]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey87);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey87);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey87);
        java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass97 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-115, 82, 9, 89, 40, 4, 111, -57, 82, 50, 121, 78, 82, -93, 64, -89]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-21, -84, 25, 95, 70, -18, 124, -93, -115, 112, 27, 45, 3, -63, -42, -81]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[50, -122, 61, -59, 105, 8, -126, -82, 99, -40, 1, 12, -40, -106, 84, 36]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-111, 19, -24, 67, 101, 102, -61, -53, 114, 112, -125, 84, 29, -107, 96, -81]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[93, -95, 96, -101, -112, 30, 96, -36, -38, -77, -87, -16, 33, 26, 1, -119]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[84, -11, 91, 103, 19, 115, 91, -52, -75, 71, -14, 107, -125, 24, 31, 123]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[27, -17, -17, 44, -102, 3, -48, -89, -26, -121, -64, -58, -60, 114, -70, -127]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-94, -100, 22, 81, 52, -31, -58, -62, 88, -2, 19, 0, 120, -51, 77, -32]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-11, -25, -60, -88, 111, -100, -52, 113, 97, -61, 111, -24, 115, 43, -66, 38, 47, -84, 107, 111, -15, 127, -118, -92, -54, 23, -6, 98, 39, 89, -105, 126, 27, -17, -17, 44, -102, 3, -48, -89, -26, -121, -64, -58, -60, 114, -70, -127]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[123, 83, -39, 13, -31, -98, 36, 6, 48, -87, 44, 0, 78, 122, -122, 90]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[91, -56, -87, 55, -51, 127, -52, 114, 112, 115, -63, -125, -13, 115, 126, 11]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-64, 90, 49, -60, 43, 48, -2, 121, -26, 53, 83, -52, 99, 113, -91, -88]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[38, 62, -78, -98, 5, -45, -28, -29, 40, -75, -34, 104, 54, 6, -8, 115]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-127, 41, -98, 83, 81, -87, 2, 124, -90, 71, -32, 72, 110, 45, 85, 102]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-99, -16, 13, 50, -14, 102, 67, -70, 125, -14, -28, -27, -119, -24, 17, -61]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-60, -106, -32, 16, 5, -78, -34, -95, 42, 37, 10, 103, -4, -43, -119, -54]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[9, -22, 95, 25, -66, -35, -99, -80, 12, -25, 21, -123, 92, -107, -61, -107]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-34, 3, 48, 125, 100, -33, -6, 25, 111, -41, -101, -94, 121, 36, -89, -86, 82, 108, 42, -72, 107, -7, -49, 61, 103, -81, -119, -48, -3, -117, 6, 125, -60, -106, -32, 16, 5, -78, -34, -95, 42, 37, 10, 103, -4, -43, -119, -54]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey52);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey52);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey52);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-80, -90, 120, -7, -103, -56, 117, 18, 66, -6, -21, -10, -24, -27, -93, 29]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-59, -116, -90, 103, -8, 29, 83, 4, -98, 55, 66, -75, 7, -51, 107, 34]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-12, 37, 73, 54, 33, 27, -76, -117, -88, -126, -67, -41, 47, -92, 88, 55]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-110, -45, 116, -59, -50, 125, 76, -8, -84, -75, -112, -105, 76, -123, -55, -92]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[52, 90, 89, 85, 34, -4, 108, 4, -10, 48, -37, -102, -56, -3, 112, 87, -63, -95, -12, 82, -73, 51, 72, -77, -47, 82, -107, 63, 14, 30, 33, -61, -12, 37, 73, 54, 33, 27, -76, -117, -88, -126, -67, -41, 47, -92, 88, 55]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[117, 109, -9, -89, 23, 109, -58, -50, 82, -21, -51, 56, -95, 103, -106, -72, 92, 110, -61, 13, 111, -93, -34, 29, -100, -12, -21, 99, 37, 42, 116, -72, -12, 37, 73, 54, 33, 27, -76, -117, -88, -126, -67, -41, 47, -92, 88, 55]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-95, -110, 127, -119, -10, 59, 43, 86, 64, 104, -114, 51, -77, -39, 29, 125, -92, -25, -13, 56, -74, 62, -7, -109, -88, 111, 28, -113, 121, -82, -11, 5, -58, 0, 90, 2, 23, 103, -3, -69, 104, 25, -125, -96, 45, -71, -73, 4, -33, 91, -86, 20, -85, -81, -128, 102, -11, 115, 13, 14, 57, -90, -82, 116, -51, -127, 9, -79, -122, 93, 91, 60, -68, 53, -25, -84, 84, -6, 114, 66, -30, 77, -30, 78, -119, 48, 1, -83, 13, 104, -39, 92, -62, 120, 94, -38, -12, 37, 73, 54, 33, 27, -76, -117, -88, -126, -67, -41, 47, -92, 88, 55]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[117, 109, -9, -89, 23, 109, -58, -50, 82, -21, -51, 56, -95, 103, -106, -72, 92, 110, -61, 13, 111, -93, -34, 29, -100, -12, -21, 99, 37, 42, 116, -72, -12, 37, 73, 54, 33, 27, -76, -117, -88, -126, -67, -41, 47, -92, 88, 55]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "756DF7A7176DC6CE52EBCD38A16796B85C6EC30D6FA3DE1D9CF4EB63252A74B8F4254936211BB48BA882BDD72FA45837" + "'", str29, "756DF7A7176DC6CE52EBCD38A16796B85C6EC30D6FA3DE1D9CF4EB63252A74B8F4254936211BB48BA882BDD72FA45837");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "756DF7A7176DC6CE52EBCD38A16796B85C6EC30D6FA3DE1D9CF4EB63252A74B8F4254936211BB48BA882BDD72FA45837" + "'", str30, "756DF7A7176DC6CE52EBCD38A16796B85C6EC30D6FA3DE1D9CF4EB63252A74B8F4254936211BB48BA882BDD72FA45837");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[58, 114, -103, 8, 6, 109, 97, 85, -58, -112, -93, -17, 5, 93, -93, 26]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[117, -113, 39, 8, -52, 23, 58, -105, 125, -98, 111, -61, 22, 121, 116, -81]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[86, 5, 104, 118, 32, 47, -52, 103, 62, -89, -6, -122, 91, -34, 22, -93]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 98, -78, 35, 83, -57, 14, 60, -101, -117, -26, 99, -81, -67, 120, 108]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-92, -23, -64, -106, -121, -52, -123, -116, 62, 117, 7, 74, -97, 13, 31, 116, 28, 78, 24, -110, 120, 12, -48, -61, -89, 84, 114, 11, 98, -49, 123, 95, 86, 5, 104, 118, 32, 47, -52, 103, 62, -89, -6, -122, 91, -34, 22, -93]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-123, -59, 53, -63, -59, 28, -33, -122, 75, 49, 23, -29, -106, -18, -120, 34, -14, 127, -91, 75, 43, 77, 67, 14, -28, 125, -97, -30, -108, -104, -20, -109, 86, 5, 104, 118, 32, 47, -52, 103, 62, -89, -6, -122, 91, -34, 22, -93]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[99, 12, 65, 102, -82, 69, -38, 123, 126, 4, -33, -126, 68, 88, 39, -4, 74, 59, 123, -86, -13, -126, 8, -43, -77, -14, 90, 84, 92, -45, -45, -14, 107, 44, -119, -118, 35, 21, 124, -5, -23, 3, 69, -61, -30, -77, 122, 44, -127, 93, -88, -29, 72, 117, 108, 78, -32, 51, 31, -18, 70, -3, -94, -124, 108, 66, 81, 62, -13, -95, 31, -15, -118, 63, -5, 109, 50, -18, -77, -52, -93, 48, -4, -53, 74, -104, 96, 125, -91, -38, -53, 125, 53, 3, 78, -101, 86, 5, 104, 118, 32, 47, -52, 103, 62, -89, -6, -122, 91, -34, 22, -93]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-21, -25, -80, -5, -100, -12, -32, 15, 69, 5, -108, -127, -6, 94, -118, 80, -120, -13, 55, 120, -60, 96, 39, 108, 118, 98, 100, -102, -107, 21, -25, -119, 60, 120, -3, 125, -37, 22, -56, 15, -120, -92, 67, -59, 125, 34, -124, 35, -57, 28, 115, 25, 95, -29, -89, 116, -82, 59, 61, 41, 19, 124, 33, -4, -80, -83, 24, -63, -101, 15, 45, 100, 29, 54, -114, -36, 2, 15, -10, -90, 5, -45, -86, 63, 119, -73, -73, -112, -24, 101, 69, 59, 113, -96, 61, -107, 86, 5, 104, 118, 32, 47, -52, 103, 62, -89, -6, -122, 91, -34, 22, -93]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-112, 121, -38, -79, -22, -121, 91, -69, -39, 54, 38, -34, -86, 76, -107, -110, -36, -35, 45, -127, -30, -45, -2, -44, 85, 54, -27, -49, -120, -39, 35, 123, 108, 96, -7, -70, -125, -94, 66, -29, 33, 70, -16, -118, -125, 20, -102, 67, 94, 114, 35, 70, -122, 83, 105, 7, -62, -64, -7, -33, -46, 89, -26, 124, 31, 17, 90, -15, -112, -59, -4, -124, -99, -27, -61, -94, -56, -69, -6, -91, -32, -31, 123, 92, 24, 50, -124, 69, -90, 31, -66, -111, 80, -113, -66, 67, 86, 5, 104, 118, 32, 47, -52, 103, 62, -89, -6, -122, 91, -34, 22, -93]");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("F6441EF035CB44DF482D4076E2A2584A09FB6932E41E1A73AACC011A11D436CF6153ACC0BB45F9E81CD68A0E5BDE70C5E98B731602E244B9470D386A4098F20E0DA871E1E1E68188363224699C5B251F769207B9D3E7B513FBF246B3AB276CDE6EDB9EC603A754A6FDFF48C1723737A5", secretKey6);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey20);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[28, 62, -81, 114, 35, 27, -35, -78, 112, -27, 93, -124, 108, -103, -61, 95]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[93, -89, -24, 25, -37, 11, -38, -72, 7, -15, 5, 58, 111, -90, 17, -116]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-126, 95, -94, 92, 111, -69, 67, 97, -18, -87, 16, -88, -127, 82, 82, 126, 95, -28, -93, 51, -119, -127, 127, -20, -100, 94, 39, 69, -19, 92, 117, -51, 28, 62, -81, 114, 35, 27, -35, -78, 112, -27, 93, -124, 108, -103, -61, 95]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[76, 110, -15, 37, -52, -96, -83, 121, 77, 51, -39, 120, 51, -50, -127, 56, -76, -34, 61, 58, -81, 115, -33, 85, -43, 113, -128, -23, -113, 32, 120, -98, 28, 62, -81, 114, 35, 27, -35, -78, 112, -27, 93, -124, 108, -103, -61, 95]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122, -81, 8, 40, -54, -68, -102, 15, -65, -12, 5, 80, -45, 48, 29, 27, -102, -28, -4, -111, -116, -71, 1, 68, -34, -23, -77, -62, -31, -3, 61, -37, 28, 62, -81, 114, 35, 27, -35, -78, 112, -27, 93, -124, 108, -103, -61, 95]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-4, 101, -122, 87, 77, 6, 44, 42, -46, -67, -71, 2, 106, 15, 93, -56]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-124, 69, 36, 49, 27, 12, 32, 48, 4, -51, 49, 67, -106, -122, 33, -101]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-23, 24, 18, -108, 101, 25, -43, -12, -98, -30, -37, -87, 65, -86, 18, -53]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-4, 101, -122, 87, 77, 6, 44, 42, -46, -67, -71, 2, 106, 15, 93, -56]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[54, 51, -32, 95, -97, -110, 113, -57, -8, 39, -55, 84, -40, 116, -70, 45, 21, 18, 63, 113, -14, 112, 123, 104, 37, -15, 3, -52, 99, 33, -39, 89, -4, 101, -122, 87, 77, 6, 44, 42, -46, -67, -71, 2, 106, 15, 93, -56]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, -64, -63, -28, 42, -113, 32, -19, -111, 5, 103, 89, 4, 82, 23, 124, 13, -92, -124, -21, 105, 44, -55, -128, 9, -10, 96, -124, 68, -63, -45, 67, -4, 101, -122, 87, 77, 6, 44, 42, -46, -67, -71, 2, 106, 15, 93, -56]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-23, 24, 18, -108, 101, 25, -43, -12, -98, -30, -37, -87, 65, -86, 18, -53]");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey26);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey26);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey26);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey26);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey26);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("527C1D1D9F2B903634C0E77365CB43228E56A034C689D9E526F6719891815F410CDF0450BC5937FF5BCBF9DA453BC77D", secretKey26);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey46);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey46);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[25, -4, -114, 19, 86, 106, -87, -28, -18, -48, 61, 36, 93, 59, -118, 94]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-105, -103, 47, 111, -79, -13, -106, 57, -10, -17, 13, -112, 127, -8, -16, -49]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-126, -93, -1, 25, 51, 35, -36, -61, -86, 123, -86, 99, 118, 45, 31, 122]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-84, -6, 27, 70, -97, 83, 61, -75, -20, -97, -73, -92, 60, -62, -52, -40]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-89, 75, -110, -63, -95, -2, -102, -101, 8, 71, 77, 74, -12, -108, 108, -45, 48, 104, 119, -79, -126, -78, -45, -93, 22, -12, -115, -28, 11, 43, 22, -56, -126, -93, -1, 25, 51, 35, -36, -61, -86, 123, -86, 99, 118, 45, 31, 122]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-15, -97, 101, 50, -128, -127, 82, 32, -23, 39, -66, 34, -59, 115, -94, -89, 67, -8, 24, 20, 80, 95, -37, -111, 25, 14, -109, 67, 105, 109, -67, 92, -126, -93, -1, 25, 51, 35, -36, -61, -86, 123, -86, 99, 118, 45, 31, 122]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, -27, -104, -44, -62, -102, -14, 116, 30, -76, 81, -80, 33, -101, 120, -77, -13, 120, -65, 85, 113, 95, -77, -91, 2, -66, -56, -28, -60, -125, -44, -100, -70, -127, 10, 22, -73, 21, 127, -103, -40, 113, -117, -37, -42, 35, 51, -7, 80, 58, -87, 60, -16, -91, -104, -3, 118, -26, 86, 38, -120, -21, 117, -14, -25, -2, 20, -39, 94, 63, -25, -60, 9, 41, 40, -1, 34, 54, -34, -76, 14, -82, -73, 68, 27, -37, 107, 98, -117, 33, 94, 88, 59, -103, 50, -59, -126, -93, -1, 25, 51, 35, -36, -61, -86, 123, -86, 99, 118, 45, 31, 122]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, -112, 100, -121, -123, 110, 38, -44, 100, 40, -99, 127, -93, -124, 98, 14, -18, 123, -100, 24, -102, -73, -120, 83, 10, 11, -19, -78, -100, -42, -50, 76, -126, -93, -1, 25, 51, 35, -36, -61, -86, 123, -86, 99, 118, 45, 31, 122]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-75, -119, -117, 6, 71, 2, 43, 73, 53, -116, 25, -44, -18, -45, 5, -59, -95, 36, 43, 103, -6, -97, -111, 87, -54, 18, -4, 45, 89, 85, -83, -91, -76, 59, 39, 117, -125, 112, 116, -55, 81, 119, -51, -109, 52, 43, 26, -43, -20, 78, 100, -25, -34, -109, 117, -11, -27, -113, -50, 77, -19, -15, 58, -21, 79, 33, -84, 103, 102, 71, -8, 110, -120, -62, 47, 36, -62, -66, 97, -76, 68, -10, -60, -84, 87, 14, -94, 60, -44, -2, -109, -43, 68, -49, 30, -68, -126, -93, -1, 25, 51, 35, -36, -61, -86, 123, -86, 99, 118, 45, 31, 122]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-96, -114, -103, -114, -33, -83, -92, -49, -45, -55, 85, -118, -86, 65, -94, -128, 105, 107, 105, 58, 87, -19, -107, -23, 77, -11, -117, -91, -93, -55, -87, -119, -32, 94, -111, 75, -34, -120, 45, -120, -25, -94, 41, -114, -27, 85, -100, -62, -82, -44, 59, -52, 20, 90, -26, 37, 95, 16, -17, 26, 100, 102, -39, -10, 29, 5, 18, 105, -38, -113, 63, 40, -66, -31, 3, -127, 124, 87, -119, -31, -90, 108, -8, -25, 124, -78, 28, -75, -84, -69, 101, 4, 83, 33, 117, -14, -126, -93, -1, 25, 51, 35, -36, -61, -86, 123, -86, 99, 118, 45, 31, 122]");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "A08E998EDFADA4CFD3C9558AAA41A280696B693A57ED95E94DF58BA5A3C9A989E05E914BDE882D88E7A2298EE5559CC2AED43BCC145AE6255F10EF1A6466D9F61D051269DA8F3F28BEE103817C5789E1A66CF8E77CB21CB5ACBB6504532175F282A3FF193323DCC3AA7BAA63762D1F7A" + "'", str38, "A08E998EDFADA4CFD3C9558AAA41A280696B693A57ED95E94DF58BA5A3C9A989E05E914BDE882D88E7A2298EE5559CC2AED43BCC145AE6255F10EF1A6466D9F61D051269DA8F3F28BEE103817C5789E1A66CF8E77CB21CB5ACBB6504532175F282A3FF193323DCC3AA7BAA63762D1F7A");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-13, -98, -31, -99, 117, 114, -77, 73, 98, -45, 37, -41, -41, 101, 116, 79]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-19, 47, 75, 79, 34, 125, -6, -58, -23, 108, 62, 46, -62, -111, -54, 25]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-5, 120, 78, -118, -7, 74, 11, 34, 0, 123, 109, 67, 23, -84, -72, 15]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-13, -98, -31, -99, 117, 114, -77, 73, 98, -45, 37, -41, -41, 101, 116, 79]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[79, -67, 107, 91, -33, 68, -83, 43, 112, -78, 69, 63, 44, -63, -23, -1, -18, 127, -82, 0, 118, 93, 30, 64, -3, 87, 35, 64, 56, -92, 35, 72, -13, -98, -31, -99, 117, 114, -77, 73, 98, -45, 37, -41, -41, 101, 116, 79]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-18, -34, 66, 45, -1, 3, 30, 17, 62, 2, -1, -56, 70, -93, 23, -17, -30, -28, -50, -54, 10, -121, -7, 93, -31, 13, -54, 97, 21, -63, 114, 15, -13, -98, -31, -99, 117, 114, -77, 73, 98, -45, 37, -41, -41, 101, 116, 79]");
        org.junit.Assert.assertNotNull(byteArray53);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey5);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey63);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey63);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey63);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey63);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey63);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-111, -63, 127, 38, -33, -17, -10, 20, 127, 65, -76, -16, 28, 21, -18, 125]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-10, 21, 80, -101, -41, 31, -121, 5, -8, 81, -75, -100, -45, 53, 53, 67]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[46, 10, -106, -38, -95, 122, -77, -41, 4, -111, -100, -126, -34, 26, 13, -82, -90, -87, -66, 123, 36, 93, 121, -47, -109, 48, -116, -59, -110, -14, 111, 105, -111, -63, 127, 38, -33, -17, -10, 20, 127, 65, -76, -16, 28, 21, -18, 125]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-17, -33, 58, 53, 67, 54, -89, -101, -23, 119, -14, -125, -73, -85, -7, -100, 73, -35, -81, -49, 52, -91, -52, -51, -76, -98, 68, -61, 70, -85, 47, 111, -111, -63, 127, 38, -33, -17, -10, 20, 127, 65, -76, -16, 28, 21, -18, 125]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-16, 49, -25, -38, 110, 47, 17, 0, -109, -57, -86, -85, 7, -118, -118, 25]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-91, 125, 78, -57, -91, -113, 113, -28, -118, 13, -106, 24, 48, 48, -10, -35]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[108, -123, 22, -100, 46, -97, -26, -87, 1, 6, 28, -42, -69, -12, 35, 25]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-18, 78, -81, 66, -1, -26, -31, -65, -71, -46, -100, 17, 2, 74, 32, -3]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[35, 121, 100, -75, 58, 5, 28, 35, -23, -69, -19, 2, -36, 107, 18, 73]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[122, -94, 12, -104, -119, 114, -96, 85, 15, -22, -28, -101, 22, 16, -107, 79]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-69, -83, -125, 94, 100, -87, -51, 7, 93, -114, -85, -124, 103, -14, -53, 89]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-68, -23, -60, -83, 127, 15, 23, -64, -43, 57, -8, 51, -8, -26, 109, 12]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-91, -79, -100, -128, 102, 29, -101, 60, 33, -63, 11, -69, 40, -84, 36, 36]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-21, 111, 50, -17, 55, -114, 48, 2, -106, 72, 34, 58, -60, -70, 88, 91]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-22, 108, -79, -104, 33, 92, 0, -44, -34, 29, -115, -54, -60, 54, 115, 31]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-91, -79, -100, -128, 102, 29, -101, 60, 33, -63, 11, -69, 40, -84, 36, 36]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-67, -65, 99, -15, 9, 23, 78, 71, 17, 49, 11, -34, -29, 11, -120, 20, 79, 7, 125, 118, -128, -38, 24, 33, 64, -43, 119, 79, 56, 29, 49, 28, 12, -112, 103, 97, 78, -124, -110, 18, 114, -72, 81, 114, -45, 122, 123, 11, 39, -43, -108, -42, 67, 18, -107, -6, -26, -89, 103, -101, -66, 73, -11, 42, -36, -77, 24, -117, 82, 46, -99, 58, 43, 62, -20, -103, -105, -39, -105, -53, -74, -119, 121, -127, 8, 78, 7, -72, -73, -24, 115, 113, 88, -60, -96, 76, -91, -79, -100, -128, 102, 29, -101, 60, 33, -63, 11, -69, 40, -84, 36, 36]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-128, -112, -2, 88, 109, -30, -75, 119, 39, 82, -52, -65, 122, 45, 57, 51, -37, -4, 116, -47, 89, 64, -65, -21, 27, 2, 54, 17, -91, 49, 121, 76, 30, -59, -28, -68, -75, 89, 90, 0, -72, 99, -30, 61, 26, 32, 37, 102, -85, -95, 0, 119, -68, -88, -88, 30, -112, 3, -101, -74, 54, 97, 7, 44, 92, 21, -33, 56, -124, -120, 51, 96, -119, 104, 111, -100, 77, 82, 118, -101, 66, -65, -116, 50, -19, 91, 108, 79, 81, -35, -97, -6, -11, 79, -83, 105, -91, -79, -100, -128, 102, 29, -101, 60, 33, -63, 11, -69, 40, -84, 36, 36]");
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E07B4BC03CA77CE3B6B1690E9A4B53D1B86B5C5D0EA675A64737A8CF5E3739F7E134859685CD93A14D0ECC62208C220", secretKey41);
        java.lang.Class<?> wildcardClass51 = byteArray50.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-81, 117, 57, -41, -77, -75, 38, 18, -3, -100, -7, -65, 20, 52, 108, -15]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[70, -1, -75, 27, 54, 2, 37, 114, -17, -95, -66, -23, 48, 31, 72, -23]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-31, -26, 43, 32, -75, -103, -72, -49, -75, 8, -52, 63, 88, 24, 51, -74]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[60, -98, 90, 29, 32, -8, -20, -20, 115, 67, -113, -63, 86, -118, -13, 37]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[9, 69, 74, 27, -34, 22, 7, 9, -111, -87, 50, -81, -117, 46, -50, -32]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[34, 31, 122, 12, 85, 73, -21, 38, 45, -104, 95, 37, 45, -72, -51, -33]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[125, -14, 98, 61, 81, -57, -14, -121, -33, 108, 88, 123, 43, 16, -48, 16]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[66, -91, 114, 48, 116, 119, -114, 30, 55, 107, 109, 60, 52, 59, -38, 64]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[42, -108, -103, -115, -5, -119, 37, 36, -8, 47, 70, -84, -91, 21, 107, 113, -123, 123, 88, -39, 82, -62, 44, 122, -37, 42, 62, 57, 3, -97, 45, 41, 125, -14, 98, 61, 81, -57, -14, -121, -33, 108, 88, 123, 43, 16, -48, 16]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-105, 51, 96, 80, 22, -67, -81, -20, 86, 84, -119, -98, 34, -94, 91, 0, 34, 51, 98, 47, -92, 82, 87, 73, -25, -48, -72, -85, -60, -35, 40, 56, 125, -14, 98, 61, 81, -57, -14, -121, -33, 108, 88, 123, 43, 16, -48, 16]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[104, 120, -32, 68, 109, -116, -16, -125, -124, 37, -72, -77, 112, 94, -96, 65, -87, -1, 111, -18, 24, 62, -26, -127, 45, -97, -107, 56, -35, -61, 118, 87, 125, -14, 98, 61, 81, -57, -14, -121, -33, 108, 88, 123, 43, 16, -48, 16]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[112, -7, 45, 46, 48, 15, 113, 1, -43, 65, -45, -19, -117, 48, 116, 112, -116, -97, -77, -115, -100, 35, -7, -43, -93, 100, 105, -25, -10, 88, -96, -53, -33, -122, -93, 73, 114, 75, -98, 12, 94, 97, 14, -52, -57, 83, -49, 127, 27, -77, 76, 10, 69, 36, 24, 14, 119, -40, -83, 52, -117, 52, 97, 104, 36, -71, -12, 118, 14, 57, 108, 11, -75, -54, -43, 106, 7, 93, -58, 31, 105, -107, 27, 8, -63, 72, 34, -17, 20, 97, 44, -15, -81, -64, -56, 10, 125, -14, 98, 61, 81, -57, -14, -121, -33, 108, 88, 123, 43, 16, -48, 16]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey39);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[93, -95, 87, 46, 30, 97, -23, -92, 19, 119, -102, 65, 16, 98, 120, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -58, 120, -20, -32, -30, 84, 115, 104, 48, -69, -73, 46, -111, -96, -81]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-13, -68, -36, 15, -52, 89, -33, -53, 105, -55, 69, -119, -41, -124, -47, 108]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[34, 120, -47, -121, 54, 8, 49, -36, 117, 70, -106, 8, -122, -64, -122, -39]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[79, 23, 48, -31, -118, -2, 44, -97, 107, 48, -6, -48, -13, -93, -62, 24]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-118, -100, 54, 104, -122, -22, 94, -35, 45, -100, -118, 95, 70, -75, -65, 124]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[94, 115, 32, -23, 117, 106, 93, 58, -69, 53, 61, -90, -118, -10, 112, -92]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[48, -29, 106, -83, -3, -72, 105, 122, -23, -119, -4, -5, -113, -121, -115, -48]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[49, 84, -106, -91, 120, 111, 64, 50, -44, 90, -57, -10, 61, -76, 107, 18, -59, 6, -50, -26, -27, -24, 123, -113, -6, 100, 11, -83, 83, -29, -5, -75, 94, 115, 32, -23, 117, 106, 93, 58, -69, 53, 61, -90, -118, -10, 112, -92]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-121, -35, 72, -67, 52, -104, -45, -108, -29, 59, 38, -72, 89, 84, -13, -31, 106, 50, 23, -61, 21, 75, 98, -5, 121, 75, -16, 18, -108, 90, -106, 40, 94, 115, 32, -23, 117, 106, 93, 58, -69, 53, 61, -90, -118, -10, 112, -92]");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "87DD48BD3498D394E33B26B85954F3E16A3217C3154B62FB794BF012945A96285E7320E9756A5D3ABB353DA68AF670A4" + "'", str47, "87DD48BD3498D394E33B26B85954F3E16A3217C3154B62FB794BF012945A96285E7320E9756A5D3ABB353DA68AF670A4");
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("3607647E50ECCCABE8DE03DFAC3EC1AA", secretKey7);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey19);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[89, 46, 21, -17, -75, -24, -30, -92, 104, -63, -31, 35, 92, -56, 19, 75]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-108, 49, -20, 116, 122, -122, 22, 68, -68, -52, -64, -36, -30, -84, 68, 123]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-108, 49, -20, 116, 122, -122, 22, 68, -68, -52, -64, -36, -30, -84, 68, 123]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-4, -110, 122, 127, 121, -45, 94, -125, 5, -88, -70, -69, 75, -73, -16, 90]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 46, 21, -17, -75, -24, -30, -92, 104, -63, -31, 35, 92, -56, 19, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[89, -110, 107, -7, 91, -25, -107, 54, -95, -9, -49, 2, -83, -34, 49, 3, -63, -103, 2, 22, 103, -94, 55, -66, -48, -126, -121, 38, -66, -6, -74, -72, 89, 46, 21, -17, -75, -24, -30, -92, 104, -63, -31, 35, 92, -56, 19, 75]");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[68, -82, -83, 79, 113, 100, 73, 123, -9, -113, 123, -27, -17, -114, -92, -90]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-69, 106, 123, -62, 31, -92, 49, -46, 31, 13, 37, -99, 66, -26, -25, 63]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[12, 97, -18, -34, 77, 87, -37, -72, 103, -123, -7, -105, 82, 33, -73, -15, -45, -17, -122, -12, -68, 19, 26, 2, -123, -94, 74, -34, 58, -93, -35, -29, -83, 17, 36, -8, 127, -91, 32, -19, -112, -33, 125, -103, 122, 12, 74, 111, 84, -19, 90, 35, 97, -71, 6, 24, 101, 55, 109, -102, 121, 3, 1, 107, -64, -85, -77, -127, -93, 32, 100, -123, -96, 96, 67, 1, 22, 21, 24, 22, -34, -90, 2, -29, -106, -31, -119, 122, -13, -95, 20, 27, 27, 111, 65, 2, 68, -82, -83, 79, 113, 100, 73, 123, -9, -113, 123, -27, -17, -114, -92, -90]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-81, -62, 102, -110, -3, 119, -55, 23, -42, 11, -70, 10, 107, -105, 36, 53, -42, 38, 65, -71, 95, -115, -36, -92, -68, 66, -93, 4, 36, 119, -122, 54, 68, -82, -83, 79, 113, 100, 73, 123, -9, -113, 123, -27, -17, -114, -92, -90]");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey47);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey47);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey75);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey84 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey84);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey84);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey84);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey84);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey84);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey84);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey84);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey84);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey84);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey84);
        java.lang.Class<?> wildcardClass95 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[35, -84, -120, 86, 17, -10, 113, 46, -23, -33, -123, -47, 71, -99, 79, 56]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-78, 82, -108, 82, -26, -109, -93, 13, 73, -93, 54, -105, -128, -103, 88, 109]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[53, 73, -125, -100, -127, 112, 53, -118, 26, -41, -104, 117, 1, 67, -43, 80]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[115, 52, 20, 69, -53, -15, -41, 119, 98, -94, -8, -95, 79, 62, 26, 126]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-62, 16, -128, 123, -82, 24, 104, 61, -7, -101, -80, 31, 11, -5, -73, 102]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-87, 61, -120, -28, -31, -9, -39, -39, -30, -117, -44, 65, -74, -106, -95, 68]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-39, -117, 111, -67, 97, -10, -71, 97, 84, 66, -71, 123, 72, 118, -22, -73]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[67, 122, 99, -118, -20, -127, 71, 109, 126, -87, -31, 109, -3, -60, 1, -119]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[103, -114, -7, 57, 109, 105, -85, 93, -38, 24, -9, 68, -56, -74, -8, 103]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-61, -101, 75, -14, -34, -97, -103, -86, -57, -12, -46, -30, 126, 101, 32, -18]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-61, -101, 75, -14, -34, -97, -103, -86, -57, -12, -46, -30, 126, 101, 32, -18]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-73, -106, -105, 0, 25, 32, 2, -56, 26, 3, 68, 31, -57, 36, 62, 63, -64, 84, 90, 84, 122, 125, -19, 126, -1, -99, -53, 9, 59, -121, -10, 56, 103, -114, -7, 57, 109, 105, -85, 93, -38, 24, -9, 68, -56, -74, -8, 103]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[29, 52, 103, -63, 118, -39, -16, -41, 75, -16, -65, 15, -86, -94, -65, -42]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[76, -28, 70, 112, 107, 72, -128, -57, 127, 57, 27, -89, 72, 29, -80, -41]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[4, 77, 52, 101, -115, -89, -117, 13, 71, -125, -121, 50, -121, -112, 60, 33]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[60, 25, -25, 81, -39, 10, 54, 106, -122, 110, 11, 127, -105, 122, -10, 93]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey84);
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[6, -94, -81, -100, 69, -66, -36, -70, -5, -40, -23, -108, 65, 13, 118, -95]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-46, -7, -98, 43, -78, 60, 43, 71, 26, -119, -123, -89, -112, -20, -106, -109]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-46, -7, -98, 43, -78, 60, 43, 71, 26, -119, -123, -89, -112, -20, -106, -109]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[75, 45, -26, 84, 126, 2, 18, 41, 106, -44, 114, 16, -33, -84, -32, -93, 116, 9, 52, -73, 121, -54, -93, 44, 123, -18, -37, -15, 62, -126, 87, 18, 6, -94, -81, -100, 69, -66, -36, -70, -5, -40, -23, -108, 65, 13, 118, -95]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[16, 86, -11, -100, -72, -81, 110, -26, 73, -14, -74, 11, -96, 67, -74, -77, 53, -57, -6, -14, -33, -34, -30, -33, -9, -74, 1, -6, -114, 17, -55, -83, 6, -94, -81, -100, 69, -66, -36, -70, -5, -40, -23, -108, 65, 13, 118, -95]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey47);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey47);
        java.lang.Class<?> wildcardClass54 = secretKey47.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-32, -128, -25, 51, 98, 64, 42, -94, 126, -99, 107, -53, -33, -118, -35, -109]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-122, -76, 67, -19, -1, -19, 84, -115, 3, -126, -109, -41, -30, -40, 37, 73]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-103, 96, 100, -71, -100, -72, -91, -46, -19, -20, 11, 48, 66, -37, 79, 48]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-97, 26, -123, 37, 118, 2, -9, 70, 31, -105, 0, 72, -82, 71, 27, 13]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-110, -81, 70, 65, -72, -37, -3, -72, -46, -24, 62, -39, 54, -92, 60, -38]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[63, -32, -61, -97, 84, -114, -102, 50, 32, 14, -24, -86, 75, 2, -45, -109]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[113, -8, 78, -98, -36, -76, 52, -110, -120, 93, 5, 93, 42, -5, -127, 99]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[9, 30, -95, -107, 108, 41, -31, -108, 14, 75, 73, 55, 108, 63, -48, -101]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, -39, 22, 97, -9, 3, 43, 91, 9, -119, -14, -33, 112, -118, 16, -82]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-9, -8, -30, 80, 3, -19, -101, 33, 42, -63, -108, -96, -99, -14, -54, 122]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-9, -8, -30, 80, 3, -19, -101, 33, 42, -63, -108, -96, -99, -14, -54, 122]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[6, 118, 70, 82, -116, -34, 89, 1, 56, -30, 39, 62, 30, -41, -72, -37, -57, -123, 127, -67, 112, 41, -121, 24, 102, -108, 35, 54, -122, -102, 74, 57, 67, -39, 22, 97, -9, 3, 43, 91, 9, -119, -14, -33, 112, -118, 16, -82]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey9);
        java.lang.Class<?> wildcardClass16 = secretKey9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[107, 44, 37, -112, 69, -125, 84, 16, -65, -4, -86, 28, -26, 13, 52, -51]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-85, -97, -116, -5, 76, 106, -6, -101, -105, -68, 66, 115, -24, -108, 104, -6]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[82, 5, -64, 97, -55, -86, -69, -21, 36, -9, -77, 40, 95, -83, -24, -17, -43, -42, 41, -3, 121, -79, 43, -33, 94, 71, -36, 125, 112, 43, -3, -6, 45, -56, -80, 89, -7, -5, 124, -55, -14, 34, -84, 7, 1, -34, -22, 109, 56, 33, -39, -3, 72, -81, -92, -100, 67, -63, -35, 22, -113, 48, 84, 101, -69, -48, 15, -64, 54, -33, -61, 66, 97, -122, -90, -78, 96, 19, -66, -68, -11, -102, 112, -40, 52, 60, 113, 63, 84, -97, -27, -72, 56, -29, -124, 90, 107, 44, 37, -112, 69, -125, 84, 16, -65, -4, -86, 28, -26, 13, 52, -51]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-46, 21, 59, 59, -101, 15, -2, -42, 108, 83, -30, 75, -52, -2, 41, 108]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey47);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        byte[] byteArray54 = new byte[] {};
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey56);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey60);
        byte[] byteArray64 = new byte[] {};
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray64);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey66);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey70);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey70);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey70);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey70);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey81);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey81);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey81);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey81);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey81);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey81);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey81);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey81);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey81);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-91, 27, 125, 119, 48, 124, 42, -66, 13, -25, 0, -30, 5, -110, 16, -127]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[59, 51, 85, 96, 57, -24, -56, 79, -117, 82, 105, -3, 126, 111, -86, 41]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[127, 40, 70, 125, -34, -20, 59, -36, -114, 86, -96, -99, -88, -90, -51, -10]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-93, 10, -88, -105, 100, -19, 104, -104, 88, -45, -22, -24, -41, -104, 52, -79]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-109, 11, 69, -113, 65, -91, -123, 124, -110, 98, -91, 96, 107, 18, 22, -55, 81, -83, -46, -35, -58, -118, -43, 20, -15, -119, 65, -45, -26, -86, -54, 30, 127, 40, 70, 125, -34, -20, 59, -36, -114, 86, -96, -99, -88, -90, -51, -10]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-41, -57, -54, 44, 10, 108, -52, 74, 55, -114, -124, 29, 91, -20, 81, 56, -123, -118, -123, 23, 17, -26, -51, -42, 27, 27, 63, -85, 119, 121, 104, 118, 127, 40, 70, 125, -34, -20, 59, -36, -114, 86, -96, -99, -88, -90, -51, -10]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "13B85348699BA58AFFC725F219E803531B65316A2EDFB748FE4C23BAFDA1FD83618312228145A09EBEB75358C70F8BA26832B5797E000E04A576E4663F434D3943E29E080C84C10FF910474E06E080A24683A43FD610CE6F6D4EB05A6E3A32D2E8E77B481CEBB258596DABBFD763676068FA40FBE8F53F7A79626DEAFA9DC3B73142B5239702539DC0FC828C4CD9134039CB61F5BDEE33E2CD71D470766ACB0638C0C9CCAB6DD2B4E8169DB6940F0E5CA6B28B35F88EC9E8E1204D2C62CB29950F1CC6A8D12F4836EFFBA3F4140525E431C47DF12A7541B80967F48540653C607F28467DDEEC3BDC8E56A09DA8A6CDF6" + "'", str27, "13B85348699BA58AFFC725F219E803531B65316A2EDFB748FE4C23BAFDA1FD83618312228145A09EBEB75358C70F8BA26832B5797E000E04A576E4663F434D3943E29E080C84C10FF910474E06E080A24683A43FD610CE6F6D4EB05A6E3A32D2E8E77B481CEBB258596DABBFD763676068FA40FBE8F53F7A79626DEAFA9DC3B73142B5239702539DC0FC828C4CD9134039CB61F5BDEE33E2CD71D470766ACB0638C0C9CCAB6DD2B4E8169DB6940F0E5CA6B28B35F88EC9E8E1204D2C62CB29950F1CC6A8D12F4836EFFBA3F4140525E431C47DF12A7541B80967F48540653C607F28467DDEEC3BDC8E56A09DA8A6CDF6");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[91, -106, 53, 115, 64, -80, -58, 27, -13, 73, -103, 111, 22, -87, 65, 89]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[37, 125, 111, 6, 120, 121, 98, -122, 2, -101, 86, 59, -108, -116, -67, -64]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[123, 75, 127, -28, 11, -107, -76, 100, 82, -87, -28, 114, -102, -77, -93, 4]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[115, -115, 82, -126, -47, 97, -2, -71, 42, 26, 103, 70, -120, 103, 15, 29]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-64, 88, 124, -83, -64, -43, 19, -109, 38, -100, 59, -55, -58, 43, -42, 105]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-18, -106, -6, 53, 121, -47, -19, 101, 61, -92, 31, 33, 57, -10, 124, -81]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-44, -63, 57, 83, 44, 49, 66, 45, 65, -120, 106, -39, 91, -66, -75, -106]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[63, -99, -12, 19, 84, -41, 9, -68, -20, 45, 111, -70, -34, -35, 23, 17]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-5, -88, -88, 73, 57, -81, 70, 109, -63, 43, -56, -16, 15, -71, 19, -76]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-3, -30, -13, 38, -91, 72, -109, 90, 3, -3, 71, -44, 3, 17, 96, -46]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-39, 12, -26, -89, -73, 122, -128, 54, -8, 49, 93, -35, 99, 121, 108, 42]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-5, -88, -88, 73, 57, -81, 70, 109, -63, 43, -56, -16, 15, -71, 19, -76]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[41, 51, -24, 75, -1, -60, 13, -120, -119, -46, 33, -8, -54, -109, 59, 4, -19, -45, 61, -62, -64, -105, -35, -127, 98, 83, 3, 2, 106, 76, -95, -86, -5, -88, -88, 73, 57, -81, 70, 109, -63, 43, -56, -16, 15, -71, 19, -76]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-104, -21, -121, -37, -97, -33, 125, 7, -7, 49, 116, 22, 49, -79, 96, -43, -57, -110, -116, -125, -3, 6, -50, -93, -14, -9, -22, -89, 62, 28, 67, 38, -5, -88, -88, 73, 57, -81, 70, 109, -63, 43, -56, -16, 15, -71, 19, -76]");
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7FA568134806C9105C34D583C29871A41AE5CE04D352F794BBBC55C17CC3D7B2E48B2428828EE039A91A06CFBF22DBA03F23A99544AD69867843E16A8BBCB065F997601695DCE4DA9232998E7CFA9275FD14E9B5BE58653BB989CC8C93C323B9A2602029745C486376259619FE42C1DC969C5F23218132538C69A93E2C46029CAFBCB3A325C55A351897A58F95136EEE2494FA973744222FA873EEAD1E15360A868A656A3C665D51EC62012BA7C41A8A5BF8AD314E65E180BA4087E8D6B89D6623982F2B436A6758077463A37F0FFC47E55DE5DFB67D8B3F67F9F6BD7C9678E01B5950A89DB569E40DEBF8146983CC8", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-75, 23, -117, -87, 2, -69, -33, 71, 115, 110, -37, 127, -92, 81, 124, -31]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, 59, 46, -1, 73, 7, 103, 91, 84, 58, 118, -22, -62, -115, 5, -39]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-17, 31, -111, -91, -24, -31, -76, 40, -36, 95, 94, 84, -75, 30, -3, -94]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-103, -12, 123, -69, 55, -1, -123, 95, 88, 32, -53, -4, 120, 82, -26, -57]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[64, 50, -90, 7, 93, -50, 68, 37, -121, 91, -29, 6, -13, 97, -113, 107, 35, 54, -78, -32, 63, -45, 0, 18, -116, 69, -94, -92, -52, -103, -116, -46, -17, 31, -111, -91, -24, -31, -76, 40, -36, 95, 94, 84, -75, 30, -3, -94]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[16, 79, 44, -24, -91, -25, 77, -101, 75, 52, -75, -115, -91, -98, -116, -100, 112, 114, -37, -80, -70, 44, -89, 53, 56, 45, -70, 101, -19, 70, 75, -117, -17, 31, -111, -91, -24, -31, -76, 40, -36, 95, 94, 84, -75, 30, -3, -94]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[90, -99, -57, -24, -87, -98, 53, 85, -2, 64, 64, 111, 60, -77, -29, 120, -86, 82, -58, -128, -59, 3, -46, 1, 46, -48, -81, 0, -74, 22, -17, -23, -65, -18, 116, 37, 110, -47, -120, -34, 61, 45, -43, 87, -27, -93, -94, 27, 91, -70, -73, -104, -59, 78, 14, -10, -42, 8, -33, 10, 30, 76, -78, -76, 112, -89, 75, -71, -7, 46, -121, -25, -106, 73, -87, 4, -43, -9, -66, 46, 60, -116, 8, -119, -111, -105, 100, -22, 110, -33, -100, 0, 125, -3, -83, -63, -17, 31, -111, -91, -24, -31, -76, 40, -36, 95, 94, 84, -75, 30, -3, -94]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[90, -99, -57, -24, -87, -98, 53, 85, -2, 64, 64, 111, 60, -77, -29, 120, -86, 82, -58, -128, -59, 3, -46, 1, 46, -48, -81, 0, -74, 22, -17, -23, -65, -18, 116, 37, 110, -47, -120, -34, 61, 45, -43, 87, -27, -93, -94, 27, 91, -70, -73, -104, -59, 78, 14, -10, -42, 8, -33, 10, 30, 76, -78, -76, 112, -89, 75, -71, -7, 46, -121, -25, -106, 73, -87, 4, -43, -9, -66, 46, 60, -116, 8, -119, -111, -105, 100, -22, 110, -33, -100, 0, 125, -3, -83, -63, -17, 31, -111, -91, -24, -31, -76, 40, -36, 95, 94, 84, -75, 30, -3, -94]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey11);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-75, -57, 117, -11, -95, -24, -90, -62, 113, -7, -121, 35, -2, -49, -101, -4]");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[111, -15, 51, 27, -21, 120, -105, 99, -96, 93, 98, -7, 10, 22, 91, 115]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-96, 108, 50, 61, 79, -77, 76, 96, 104, 68, -40, -57, 37, -66, -24, -59]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-96, 108, 50, 61, 79, -77, 76, 96, 104, 68, -40, -57, 37, -66, -24, -59]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, -87, 37, 104, -12, 16, 26, -42, -103, 43, 15, -17, 37, -62, 56, 42]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[111, -15, 51, 27, -21, 120, -105, 99, -96, 93, 98, -7, 10, 22, 91, 115]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[3, 45, 101, -33, -96, 49, -52, -111, 48, -9, -86, 97, 28, -30, -35, -24, -100, 20, 57, -101, -67, 38, -44, 117, 112, -101, -30, 61, -87, -81, -65, -68, -68, 8, -50, -87, -116, 50, -5, -19, -79, 123, 33, 118, -13, -45, -15, 110, -66, 21, -109, -31, 3, -16, -123, 73, -20, 30, -1, -108, 98, -123, 70, -74, -123, -119, 77, 106, -115, -16, -19, 16, -37, 113, 75, 3, 23, 97, 26, 53, -55, -86, 12, -103, -57, -82, 39, 50, 20, 5, -1, -23, 104, -22, 85, 63, 111, -15, 51, 27, -21, 120, -105, 99, -96, 93, 98, -7, 10, 22, 91, 115]");
        org.junit.Assert.assertNotNull(byteArray19);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[61, 31, -114, -55, 22, -82, -31, 32, 67, -109, -57, -86, -57, -67, 87, 55]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-81, 35, 103, -76, 11, -7, 77, 56, 116, 94, 64, -86, 119, 6, 118, 107]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-78, -13, -112, -57, -82, -127, 119, -37, 46, 113, -83, -116, -61, -42, -24, 43]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[61, 31, -114, -55, 22, -82, -31, 32, 67, -109, -57, -86, -57, -67, 87, 55]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-46, -28, 61, 9, 121, -43, 69, -48, -69, -26, 111, -117, -6, -62, -120, 67, -92, -31, -72, 94, -22, 4, -49, -124, -25, 7, -59, 46, -98, -58, 15, -36, 44, 3, 75, -75, -36, -92, 1, 85, 61, 49, 92, 25, 118, -60, 96, 29, -91, 23, 115, -10, -68, -43, 116, 72, -11, 75, -40, 117, 84, 55, 78, 122, 17, -20, 97, 39, 67, 7, -98, -19, -114, 81, 88, -83, -90, 69, -69, 80, 9, 30, -17, 56, -109, -56, 122, -121, 9, 82, 41, -29, 116, -38, 8, -116, 61, 31, -114, -55, 22, -82, -31, 32, 67, -109, -57, -86, -57, -67, 87, 55]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[4, 126, -56, 104, 55, 52, 82, 99, 64, -20, -37, 48, -39, 94, 29, -68, -47, 1, 38, -83, 8, 4, 106, -11, 116, -124, -75, -2, 41, 4, 7, -100, 61, 31, -114, -55, 22, -82, -31, 32, 67, -109, -57, -86, -57, -67, 87, 55]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        byte[] byteArray80 = new byte[] {};
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray80);
        javax.crypto.SecretKey secretKey82 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey82);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey86);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey86);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey86);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey86);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey86);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey86);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("0A2FB204EC222C2498A9A3E99BDE76987D8F516A693744E59F4478828F1CC4BD2E3C3D05D765239CEE1814A1B735A76D5678BC9FABDEB9B670B84F7B05A2DA97E1AF4F1B665CFAE6F1E44CC9C0B46D7D16756442100CA0C9C765900644A69238CA9073C81DD61D7C185DFF9B34277859677988D74A948858CA8457E7941DF86632A975F57CA6102544A30E5E563E503AAFE2ACC9A5C5B281EBECB535B8E52908F0536FEF94BB408FEA47E8FC8942BC1CB48BBCAD663DA674D6C79F5A9FA6163F7111B17573BA042F80E5C5067F7407181AE1446FCDAB18ACFA343FF6931222A7EC726BBCEAFFE089765AE469DD34A643", secretKey86);
        java.lang.Class<?> wildcardClass96 = byteArray95.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[5, -43, 121, -33, -18, -103, 61, 113, -125, 60, 51, -38, -16, 50, -51, 12]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-69, 95, -124, -127, -92, 53, 97, 37, 55, -36, -34, -107, 86, 111, 21, -11]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-116, -124, -33, -97, -73, -53, -15, -124, -12, 25, 69, 98, -128, 45, 83, -41]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-73, -35, -26, -104, 112, -43, 61, -84, -80, 57, -79, -46, -52, 84, 91, -85]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[49, -120, 59, -25, 15, -38, 114, 10, 69, 85, -3, -101, 125, -52, 22, 119]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-95, 90, -52, 108, -75, 104, 6, 18, 12, 26, -40, -57, 70, -38, 16, -101]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[84, 63, 85, 50, -58, 17, 29, -89, 54, -44, 65, 19, -79, -27, 42, 7]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-22, 8, -12, -10, -70, -127, -15, -98, -51, -121, -84, 1, -13, -40, 26, -79]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-110, 72, -97, -39, -37, -85, 88, 78, 52, -104, -114, -112, 77, -110, -9, -127, -48, 9, 74, 58, 100, 11, -127, 64, 82, 99, 11, -22, 46, 71, -49, -38, 84, 63, 85, 50, -58, 17, 29, -89, 54, -44, 65, 19, -79, -27, 42, 7]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[33, -79, 2, -89, 1, 16, -66, 46, 76, -40, 69, 54, 71, -96, -22, -93]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[15, 26, -44, 113, -10, -118, -41, 91, -119, 88, 45, -118, -118, -38, -103, -42]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-67, -101, 119, -77, 123, 60, -128, -128, -21, 31, -119, -116, -21, -53, -31, 108]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-83, 38, 53, 23, 63, 108, -41, 37, -42, 1, -68, 116, -57, -28, -56, 28]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-23, -108, -38, -6, -6, -93, -27, 19, 56, -14, 77, 12, -26, -17, 32, 77]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-51, -115, -57, -2, 102, -90, 42, 96, -25, -16, -108, -119, 67, -78, 80, 101]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[36, 57, -48, -121, 80, 126, 33, -101, 50, 48, -72, 20, 22, 80, -67, -104]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-120, -73, -123, -114, 118, 116, -61, -28, -27, -117, 63, -4, -8, -112, 106, -30]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-43, -81, -32, 3, 102, -89, 106, 108, 46, 59, 95, 120, 69, -91, -46, -118, 15, 96, -72, -50, -64, 55, -8, -111, -20, -1, -17, -36, -66, -102, 110, 121, 36, 57, -48, -121, 80, 126, 33, -101, 50, 48, -72, 20, 22, 80, -67, -104]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-46, 81, -19, -63, 118, 8, 77, 31, 101, 119, -75, -57, 100, 93, -38, -108, -108, 102, 23, -48, 37, 75, 69, -68, 1, 26, 68, -20, -53, -101, -39, -119, 36, 57, -48, -121, 80, 126, 33, -101, 50, 48, -72, 20, 22, 80, -67, -104]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3C958EAE5BDAA1A3BD060C71944EB0A8534B539AFEFDB79EBDD7ADD12402BF8C30B281A8C4450399314DBDEB5B01CDB0CE81CE5565A8BB5D3EB7E0BBA6E1F4684A32FD476B52A5A71A1A384A30F8D4DC2D074F8AC9F8AEBA957BD34BF36177AFB289109350640BEB720378DCC725B342", secretKey22);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey39);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey39);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey39);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[32, 17, -11, 72, 100, -107, -58, 15, 117, 59, -121, 18, 39, 30, 6, -108]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-118, -43, 69, -122, -101, -90, 69, 118, -92, -122, -72, 37, 0, -66, -98, -110]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-72, -45, -18, 120, 113, -82, -27, 44, 29, 94, 30, -96, -67, -12, -92, -12]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-115, 23, -112, 120, -4, 27, 65, -106, 48, -46, -11, 2, 73, -77, -28, 3]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[20, 119, -16, -110, -126, -10, -17, 102, 65, 115, 10, 69, 42, 9, -127, -70, -102, -124, 124, 79, 46, 66, -40, 118, -96, -25, -32, 42, 1, -126, 86, 60, -72, -45, -18, 120, 113, -82, -27, 44, 29, 94, 30, -96, -67, -12, -92, -12]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[90, 79, -76, 29, -2, -33, 20, -16, -67, -121, -52, 56, -53, 57, -83, 96, -81, 87, 11, 105, -28, 10, -24, -86, -61, 10, -27, -65, -114, -15, 49, 45, -72, -45, -18, 120, 113, -82, -27, 44, 29, 94, 30, -96, -67, -12, -92, -12]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[95, -41, -94, -2, 0, 33, 92, 61, -26, -104, -11, -105, 110, -3, -100, -99, -68, 30, 53, -82, 126, 70, 32, 87, 55, 50, 94, -7, -12, -76, -49, 28, -67, -19, 85, -52, 96, 42, -20, -74, -87, 34, 93, -92, -4, 95, 23, 20, 32, -37, -43, 1, 98, -82, -89, -87, 14, 27, 45, -1, 9, -24, 93, 35, -114, -47, 2, -22, 43, 110, 120, -93, 11, -105, 72, -120, 122, -107, -24, -127, -6, -88, 87, 111, -112, 17, 46, 95, 33, 25, 67, 84, 63, 78, 37, 63, -72, -45, -18, 120, 113, -82, -27, 44, 29, 94, 30, -96, -67, -12, -92, -12]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[123, -53, -102, 68, 13, 87, 24, 72, 121, 81, 44, -9, 84, -41, 24, 39, 14, -44, 104, 65, 34, -72, 42, 74, -81, 76, 4, -6, 25, -92, -15, -95, -72, -45, -18, 120, 113, -82, -27, 44, 29, 94, 30, -96, -67, -12, -92, -12]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-47, 63, -97, 59, 101, -88, -83, -86, -49, -118, -90, -20, 91, -52, -9, -85]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-18, 65, 48, -32, -45, -99, -70, -111, -69, -40, 86, -16, -90, 60, 64, 30]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[48, 63, -94, 78, -46, 47, 55, -1, -32, -51, 71, 10, -104, -84, -93, -72, 98, 51, -57, -37, -77, -24, -79, -116, 117, -26, -78, -19, 27, 107, 69, 63, -15, -106, 9, -93, -116, -121, 73, 14, -110, 106, -61, -112, 32, 58, 46, -60, 38, -1, 125, -98, -40, -87, 19, -79, -89, 71, -11, 41, -6, -91, -100, 32, -78, 33, 95, -31, -65, -128, 67, 57, 19, -30, -101, 40, -8, 61, 45, 34, 100, 106, -77, -46, -54, -15, -58, 37, 40, -113, -82, -89, -51, 101, -15, -30, -47, 63, -97, 59, 101, -88, -83, -86, -49, -118, -90, -20, 91, -52, -9, -85]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-44, 35, 100, 91, -113, -22, -66, -84, 51, 96, 67, 118, 79, 56, 37, -70, 118, 104, 90, -119, -109, 66, 125, -111, -34, -43, 82, -84, -1, 73, -84, -45, -47, 63, -97, 59, 101, -88, -83, -86, -49, -118, -90, -20, 91, -52, -9, -85]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[61, 61, -54, -17, 14, 13, -97, -23, -35, -105, 11, 31, 79, 74, -54, 38, -63, -26, -51, -25, -86, 41, 127, -56, -40, 87, 47, 30, -110, 69, -2, -31, 115, 53, -16, 11, -60, -100, 108, 39, 62, -123, -59, 74, -62, -105, -60, 22, 95, 82, -106, -107, -79, -51, -82, -124, -61, 25, 12, 27, -57, -40, 69, -61, 91, -72, -43, -106, 11, -107, -125, -89, -39, -104, 17, 108, 102, 49, -70, 47, 122, -39, -7, -49, 21, 26, 60, 20, -48, -74, 12, -109, -92, -96, 16, 124, -47, 63, -97, 59, 101, -88, -83, -86, -49, -118, -90, -20, 91, -52, -9, -85]");
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("C718B4A2C36E882A21FF0D9AFADE2A77", secretKey23);
        java.lang.Class<?> wildcardClass35 = secretKey23.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[58, -90, 44, 116, 106, 36, -48, -1, -54, 100, 117, -123, -54, -15, 103, -58]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[2, -15, -70, -85, 38, 77, -61, -9, -39, 96, -48, -95, -107, 103, 4, 88]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[3, -16, -126, 101, 126, 32, 40, -116, 54, 86, 0, 58, -98, 32, 72, 32]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-40, -128, 28, 126, 31, -7, -14, 50, 125, -87, -38, -25, 27, -97, 3, -89]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[13, -124, -4, 10, -102, -54, -127, -1, 39, 40, 108, -6, -116, 98, -95, 36, -7, -73, 47, 41, 74, 59, 33, -79, -2, 7, 82, -70, -127, -41, -66, -65, 3, -16, -126, 101, 126, 32, 40, -116, 54, 86, 0, 58, -98, 32, 72, 32]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-108, 111, 56, -35, -10, 12, 35, -116, -74, -46, 86, 120, 55, -25, -64, 68, -48, -4, -80, -72, -73, -75, -40, -63, -12, -65, 118, -73, 96, -57, 62, -39, 3, -16, -126, 101, 126, 32, 40, -116, 54, 86, 0, 58, -98, 32, 72, 32]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[91, 87, 103, -75, 123, -109, 64, 79, 57, 35, 40, 84, -80, -102, 13, -33, -4, -25, 121, 107, -71, -94, 58, 6, -112, -49, 28, -39, -76, 127, 79, 108, 3, -6, -76, -28, 44, 75, -99, -112, -44, 126, -25, 85, -48, 55, -2, -17, 57, 63, -66, 45, -127, -18, 115, -71, 120, 16, -73, 82, -45, 59, -48, 123, -83, 86, 40, 98, -97, -87, 119, 45, 72, 74, 90, -111, 29, 95, 45, -117, 124, -103, -55, 23, 40, -88, -40, -24, 116, -82, -7, -89, 52, -11, 28, 0, 3, -16, -126, 101, 126, 32, 40, -116, 54, 86, 0, 58, -98, 32, 72, 32]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[5, 22, -35, -2, 126, -31, -63, -45, 53, 104, 19, -92, -15, 53, -35, 73, 110, 63, 67, 34, 63, -2, 94, 65, -17, 59, -61, -2, 60, -103, 5, -84, 3, -16, -126, 101, 126, 32, 40, -116, 54, 86, 0, 58, -98, 32, 72, 32]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[61, 63, 10, -100, 11, -89, -59, 61, 74, 7, -34, -27, 114, -20, 5, -31, 66, 24, 60, 41, 62, -19, -105, -110, 60, -122, -71, -85, 50, -26, -123, 110, -56, -25, 3, -92, -19, -38, -15, -99, 106, 73, 87, 78, 0, -21, -27, 73, 21, 77, -72, -25, -15, -128, -127, -120, -45, 16, -84, -59, 2, -52, -71, -58, 84, -102, -53, -67, 38, -24, 101, -94, 26, 91, -114, -102, 111, -42, 82, -20, 30, 29, -112, -34, 74, 45, 63, 94, -33, 86, 4, 100, 14, 109, -97, -50, 3, -16, -126, 101, 126, 32, 40, -116, 54, 86, 0, 58, -98, 32, 72, 32]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-4, 48, -51, 122, 71, 45, -80, 22, -75, 78, 75, 56, -59, -42, -2, 126, 67, 20, -72, -14, -97, 98, -26, -57, 26, -116, -34, 72, 50, 20, -59, 118, 3, -16, -126, 101, 126, 32, 40, -116, 54, 86, 0, 58, -98, 32, 72, 32]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey68);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey68);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey68);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey68);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("7CA49FB87215185DDB50BA3084C558F36D00F53E952403E977CB3632DE840FE960FDBC24442AAAB8B37E391826BC1C1E87980A92D112094033FD24B876593F2EF6182DB6D31A14F6B8E49CEEC74CA7003F717F754356175B555ECF25F8DE63FBA48E91FA121C2BA2CB8028DB8F7D15CD", secretKey68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey68);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[56, 68, -104, -18, -122, 42, 69, 17, -113, -45, -82, 40, -119, 36, 74, -73]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[112, -23, -78, 74, -13, 13, 71, 21, -94, -110, 65, 79, 115, -122, 84, 48]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[24, -110, 76, -106, -102, -122, 50, -61, -100, -71, -52, -108, -18, 115, 48, 58]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-114, -13, 118, -115, 8, 12, 82, -115, -90, -1, -4, 86, 37, 30, 118, 116]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-34, -122, 114, -99, -21, 86, -59, -71, -116, -31, 88, 87, -16, -57, -22, -10]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-66, 0, 89, 64, -125, 37, -8, 108, 16, -31, -127, 100, 6, -29, 4, -86]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-55, 10, 65, 14, 7, -61, -61, -7, 26, 120, 28, 98, -73, 46, 107, 107]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[82, 24, 68, 17, 107, 63, 107, 89, 48, -10, -80, -113, 127, -99, 1, 49]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-92, -72, 11, 107, -35, -26, -12, 5, -79, 88, -32, -20, 20, 55, -116, 76]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-36, -91, -5, 51, -89, 79, -29, -12, 119, 119, 45, 3, 2, -67, 32, -35]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-69, -39, -66, 90, -116, -114, -17, 84, 1, -37, 85, -90, -89, -62, -93, -31]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-92, -72, 11, 107, -35, -26, -12, 5, -79, 88, -32, -20, 20, 55, -116, 76]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[88, -25, -114, 27, 104, -94, 36, -14, 115, -124, 115, 89, -40, -105, -31, -79, 114, 64, 118, -86, -86, -101, 74, -7, 28, -26, 124, 44, -90, -32, -52, -14, -92, -72, 11, 107, -35, -26, -12, 5, -79, 88, -32, -20, 20, 55, -116, 76]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-36, -91, -5, 51, -89, 79, -29, -12, 119, 119, 45, 3, 2, -67, 32, -35]");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[113, -19, -27, 42, -15, -84, -53, 63, -24, -33, -127, -13, 18, -15, 14, 66]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-56, -35, 3, -86, 106, -13, -31, -57, 9, 88, 80, -46, -103, -73, -99, 111]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[101, -24, -81, -58, -31, 89, -64, 63, 96, 28, 6, 67, -105, -128, -64, 89]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[101, 85, -105, -81, -90, -39, -93, -94, -125, -117, -116, -115, -85, -10, 5, -105, -47, -115, 103, 36, -63, -68, 44, -109, -49, 114, 127, -84, 117, -56, -55, 108, 113, -19, -27, 42, -15, -84, -53, 63, -24, -33, -127, -13, 18, -15, 14, 66]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[63, 113, 40, -32, 81, -126, -39, -85, -13, 106, 98, -19, -20, -43, 4, 94, 69, -31, 123, -20, -21, 14, -115, 6, 22, 112, 36, -52, 114, 49, -74, 95, 113, -19, -27, 42, -15, -84, -53, 63, -24, -33, -127, -13, 18, -15, 14, 66]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[117, -115, 108, 73, 8, -103, -94, 66, -29, -9, -87, -9, -87, 46, 61, -105, -60, -89, -19, 23, -101, 75, -35, -17, 10, 99, 69, 20, -113, 111, -88, -120, 113, -19, -27, 42, -15, -84, -53, 63, -24, -33, -127, -13, 18, -15, 14, 66]");
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        byte[] byteArray80 = new byte[] {};
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray80);
        javax.crypto.SecretKey secretKey82 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey82);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey86);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey86);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey86);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey86);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey86);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey86);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey86);
        java.lang.Class<?> wildcardClass96 = secretKey86.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-122, 78, 15, 68, 87, 123, -75, 39, 38, -109, 91, -82, 122, 92, 100, -53]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[53, -111, -126, 17, 11, -122, 113, 61, -13, -44, -110, 59, 47, -75, -35, -115]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[86, -44, 22, 2, 34, 126, 11, 76, 45, -98, 77, 87, -86, -84, -115, 55]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[115, 67, -22, 50, -88, -61, 86, 87, 29, -66, -116, 35, 102, -26, 87, -52]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[33, -34, -117, -120, -105, 102, -5, 35, -58, 46, 46, -117, 115, 68, 120, 21]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[44, -1, -25, 81, 96, -46, 97, 122, -67, 9, 2, 67, -30, 75, -93, -116]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-29, 17, 63, 100, -125, 14, 34, 59, 114, -79, -45, 96, -38, 126, 73, 34]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-5, 16, 48, -22, 100, 114, -67, 62, 20, 3, 70, 59, -24, 91, -85, 100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-111, -30, 0, 108, 65, 40, -67, -53, -27, 66, -48, 68, 100, 32, -70, -23, 50, 81, 67, 36, 102, 6, 19, 46, -99, -117, 100, 107, -48, 20, 23, -105, -29, 17, 63, 100, -125, 14, 34, 59, 114, -79, -45, 96, -38, 126, 73, 34]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, -56, 119, -105, 54, 20, -67, -78, 6, -29, 72, 21, 62, -78, 106, 95]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-90, -65, -69, -21, -104, 7, -6, -66, 83, -22, 60, -12, 74, -1, -55, 4]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[56, -44, -68, 114, -43, -94, 12, 3, -16, 76, 50, -2, 30, 15, -113, 81]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[107, 67, 68, 30, 41, 64, -107, -79, -1, 70, -85, -102, -124, 110, 26, -121]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[55, 85, -96, 30, -43, -44, 95, 102, 25, -11, 91, -73, 92, -31, -72, 63]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-99, 15, -82, 80, 103, 50, -124, 83, -90, 6, -69, -96, 126, 118, -62, 73]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[24, 72, -53, -127, 24, -3, 103, 100, -124, 107, 48, -11, -47, -8, -19, -104]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[4, -71, 81, -108, -23, 52, -78, -64, 78, -90, 73, -115, -114, 104, -16, -97]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[87, 11, 32, 107, -37, -120, 75, 120, 13, 58, 50, -91, -63, 102, 110, -114, 1, -21, -116, 19, -11, 101, 5, -99, -61, 121, 120, 99, -115, -115, 47, 113, 24, 72, -53, -127, 24, -3, 103, 100, -124, 107, 48, -11, -47, -8, -19, -104]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-78, 9, -19, 122, -57, 103, 99, -27, -54, -5, 68, -86, 36, 21, 106, -68, 108, -82, -63, -26, 41, 65, 75, 107, 95, -98, 77, -38, -4, 108, 53, 19, 24, 72, -53, -127, 24, -3, 103, 100, -124, 107, 48, -11, -47, -8, -19, -104]");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-125, -93, 21, 62, -85, 12, -9, 35, 62, 116, -1, 34, 110, -70, 125, 86, -31, 107, -74, 21, 70, 123, 51, 127, -49, -103, -102, -40, 48, 14, 9, 6, -74, 122, 97, -75, 78, -2, -30, 79, 6, 77, -63, -92, 115, 67, -68, -94, 1, 126, 27, 92, -27, -77, -43, 40, 110, -85, 56, -119, -95, -26, 93, -81, -37, 124, 103, 53, 34, -90, 34, 14, -5, 121, 19, -62, 98, -93, -43, -21, -118, -117, 51, 121, -73, -47, 95, -90, 27, -40, 49, -68, -93, 103, 23, -127, 24, 72, -53, -127, 24, -3, 103, 100, -124, 107, 48, -11, -47, -8, -19, -104]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3C958EAE5BDAA1A3BD060C71944EB0A8534B539AFEFDB79EBDD7ADD12402BF8C30B281A8C4450399314DBDEB5B01CDB0CE81CE5565A8BB5D3EB7E0BBA6E1F4684A32FD476B52A5A71A1A384A30F8D4DC2D074F8AC9F8AEBA957BD34BF36177AFB289109350640BEB720378DCC725B342", secretKey22);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey36);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-93, -109, 29, -18, -122, 69, -59, 68, 98, 37, 36, 63, 32, 36, -90, -26]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-98, -113, -25, -109, -37, -49, -113, -101, 68, -99, 24, -37, -46, -122, 100, 54]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[50, -39, -12, 4, -15, 125, -1, 63, 90, -4, -95, 17, 87, -50, 77, -122]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-73, -59, 94, -110, 60, 35, -92, -95, -128, -14, 120, -72, -89, -91, 85, 57]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-89, 27, 36, 90, 20, -58, 18, -90, 83, -114, 1, 114, 56, 20, -65, -43, 122, -6, -81, 13, 109, -78, -31, -69, -33, -17, -45, 96, -106, -53, 58, 97, 50, -39, -12, 4, -15, 125, -1, 63, 90, -4, -95, 17, 87, -50, 77, -122]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[64, 34, -25, 74, -52, -48, -10, 59, 33, 93, -103, -111, 69, 124, 17, 101, -121, -49, -17, 25, -7, 122, -84, -92, 15, 82, 2, -61, 90, 8, -54, 30, 50, -39, -12, 4, -15, 125, -1, 63, 90, -4, -95, 17, 87, -50, 77, -122]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[38, -74, 32, -26, 6, 49, 65, 18, -109, -22, 26, 124, 83, -93, 64, 41, -84, -64, 19, -41, -6, -4, 2, -117, -50, -114, 102, 29, 120, -122, 59, -51, 113, 88, 14, 87, -86, -48, 53, 13, 5, -125, -95, -53, -63, -110, -74, 99, -50, -76, -112, 25, 23, 80, -127, 8, 34, -78, 23, -27, -25, 62, 77, -120, 90, 12, 10, -67, 39, 25, 107, 59, -9, 76, 9, -116, -16, 17, 32, -89, -94, -15, -61, -116, -14, 112, -108, -112, -74, 93, 106, 50, 0, -18, -53, -87, 50, -39, -12, 4, -15, 125, -1, 63, 90, -4, -95, 17, 87, -50, 77, -122]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-45, -69, 119, 4, 64, 34, -30, -121, 42, -77, 85, 41, 65, -52, -10, -15, 54, 120, 25, -96, 82, 67, 69, -93, -42, -24, 47, 85, -120, -109, 80, -58, 50, -39, -12, 4, -15, 125, -1, 63, 90, -4, -95, 17, 87, -50, 77, -122]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[51, 85, 7, -94, 63, 29, 49, -81, -69, 76, 98, -8, -68, -87, -116, 107]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-96, 126, 104, 85, -100, 86, -4, 84, -111, 76, -105, 14, 126, -95, 12, 50]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-96, 126, 104, 85, -100, 86, -4, 84, -111, 76, -105, 14, 126, -95, 12, 50]");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-14, 82, 57, -107, 57, -23, -108, 37, -94, -116, -64, -125, -1, -2, 122, -94]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-77, -81, 54, -41, -126, 119, 72, -16, 41, -13, 124, 83, 102, -24, -34, -48]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[26, -40, 116, -44, 86, 22, 96, 26, 70, -58, -13, -36, 49, -53, -15, 120]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[53, 105, 15, 111, 42, -105, 18, 13, 61, 85, 83, 117, 33, -89, 53, 106]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-43, -68, 116, -78, -91, 68, 22, -57, 47, -61, 34, -79, 71, 53, -39, -14, 58, -127, 112, 76, 126, 82, -19, -34, -39, 78, -111, -33, 13, -37, 96, 121, 26, -40, 116, -44, 86, 22, 96, 26, 70, -58, -13, -36, 49, -53, -15, 120]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[13, -60, 51, 22, -114, -6, 11, -114, -26, -102, 32, -28, -62, -57, -57, -109, 90, 53, 72, 0, -48, 41, -36, -120, -75, -128, -121, -86, 97, -15, -2, -47, 26, -40, 116, -44, 86, 22, 96, 26, 70, -58, -13, -36, 49, -53, -15, 120]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-40, -66, 95, 1, 36, -107, -82, -51, -24, -61, 2, 103, 25, -21, 43, 58, 102, 90, 46, 114, -43, 70, 84, -69, -36, -119, 71, -112, 30, -69, -28, -3, 45, -90, 28, -32, -115, 112, -74, 78, 55, -77, 44, -9, -42, -31, 47, -15, 15, -32, 47, 6, -113, 50, -118, 39, 11, -88, 26, 88, -28, 40, -72, -123, -33, -34, -114, 112, -87, 45, -103, -104, -89, 44, 41, -33, 78, -122, -8, -68, -45, -59, 41, -81, -91, 5, -17, -102, -109, -73, 48, -64, -107, -26, 79, -73, 26, -40, 116, -44, 86, 22, 96, 26, 70, -58, -13, -36, 49, -53, -15, 120]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-83, 28, -84, -88, -109, 103, -89, -5, -72, -7, 73, 113, 104, -84, 32, 66, -88, -81, 82, 116, 98, -13, 40, 2, 92, 84, -108, -13, -91, 94, -75, -120, 26, -40, 116, -44, 86, 22, 96, 26, 70, -58, -13, -36, 49, -53, -15, 120]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[26, -40, 116, -44, 86, 22, 96, 26, 70, -58, -13, -36, 49, -53, -15, 120]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey11);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey11);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey11);
        java.lang.Class<?> wildcardClass23 = secretKey11.getClass();
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-105, 93, 14, 78, 108, 5, -52, -86, -67, 91, 127, 23, -84, -95, -75, 7]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-77, 69, 11, -68, 49, 30, -13, -71, -59, 118, 67, -6, -39, -97, 59, 54]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-77, 69, 11, -68, 49, 30, -13, -71, -59, 118, 67, -6, -39, -97, 59, 54]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[79, -5, 98, 118, -50, -33, 30, -127, -43, -51, -113, 100, -120, -12, 39, 102]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-77, 69, 11, -68, 49, 30, -13, -71, -59, 118, 67, -6, -39, -97, 59, 54]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-108, -127, -75, 103, -58, -48, -52, -100, -93, -127, -100, -116, 109, -89, -86, 55, -4, 32, 57, -126, 19, 112, -127, -114, 104, 14, 19, -39, 100, 64, 72, -120, -105, 93, 14, 78, 108, 5, -52, -86, -67, 91, 127, 23, -84, -95, -75, 7]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-56, 5, -102, -87, 23, 47, -74, 112, -42, 1, 72, 9, 88, 85, -1, 88, -87, -38, -56, -59, 108, -82, -53, -23, 50, 26, 11, 111, -127, -120, 4, 65, -45, 90, -25, 108, 72, 29, -125, -79, -62, 84, 12, -97, -82, 90, -74, 54, 113, 108, 65, 96, 20, 61, 22, -29, -14, 68, 36, -17, -39, 122, -51, 35, 8, -117, 34, 11, -112, 98, 65, -69, 104, 52, 13, -27, 4, -106, 125, 91, 89, 47, 116, 76, 64, -82, 15, 54, -70, -70, -39, 92, 17, 68, 67, -49, -105, 93, 14, 78, 108, 5, -52, -86, -67, 91, 127, 23, -84, -95, -75, 7]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[44, 30, 41, 42, 24, -83, -11, -20, 98, 71, -35, 98, 6, -17, 40, 26, -21, -75, -29, -47, -50, 20, -28, -37, -5, 95, -8, 72, 61, -3, -71, -62, -116, 122, -120, -58, 26, 30, -111, 115, -78, -93, -10, -4, 82, -51, 82, -128, -90, -116, -128, -45, 72, 87, -49, -125, -25, 31, -92, -34, -109, 127, -117, -91, -43, -62, 125, 54, 111, 31, -98, -22, -101, 125, -25, 76, 74, -3, -52, 66, -95, 116, -65, 48, -100, -128, -112, -2, 80, 96, 83, -106, 14, 64, -61, 32, -105, 93, 14, 78, 108, 5, -52, -86, -67, 91, 127, 23, -84, -95, -75, 7]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-127, 9, 70, 67, -4, 12, 64, 21, 76, 9, 16, -37, -28, -125, -127, -48, 114, 3, -17, 112, -97, 40, -111, 115, 114, 96, 103, -37, 57, -29, 10, -98, -105, 93, 14, 78, 108, 5, -52, -86, -67, 91, 127, 23, -84, -95, -75, 7]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-105, 93, 14, 78, 108, 5, -52, -86, -67, 91, 127, 23, -84, -95, -75, 7]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-75, -44, -7, 61, -86, 113, -99, -128, -84, -78, -103, 74, -111, -115, -11, -96, -76, -93, -25, -121, 16, 80, 45, 93, 28, -89, -123, 35, 27, 67, 106, 25, -105, 93, 14, 78, 108, 5, -52, -86, -67, 91, 127, 23, -84, -95, -75, 7]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        byte[] byteArray0 = null;
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[127, 100, -44, -45, 19, 65, -32, -70, 83, -40, 46, -121, 48, 74, -22, -30]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[127, 110, -48, -8, -2, 106, 27, 32, -63, 42, 29, 103, -18, 100, 4, -53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[109, 86, 82, 77, 65, 92, 30, -83, 15, -121, -107, 86, -26, -93, -65, -124]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[99, -12, -120, -85, -75, -82, -112, -70, 126, 84, -95, -36, -25, -8, -101, 55]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[7, 33, 122, 22, -19, -80, -83, -5, 18, -104, 29, 98, -54, 46, -20, -99, -75, 44, -51, 124, -87, 74, -124, -42, 18, -94, 9, 13, 52, 33, 105, 61, 109, 86, 82, 77, 65, 92, 30, -83, 15, -121, -107, 86, -26, -93, -65, -124]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[48, -127, 110, -116, -37, -21, 52, -61, 108, -17, 32, 92, -111, -34, -104, 65, -108, -94, -108, -110, 10, -115, -61, -111, -3, 42, -31, 0, -33, 62, -13, 7, 109, 86, 82, 77, 65, 92, 30, -83, 15, -121, -107, 86, -26, -93, -65, -124]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-69, -45, -34, 100, 5, 106, 96, 51, 85, 111, -90, -102, 22, 125, 13, -79, 96, -113, -2, 69, -18, -87, 93, -124, -98, -9, 20, 9, 108, 26, 43, -34, 95, 73, 73, 13, -101, -103, -59, 1, -41, -23, -35, -68, -110, 86, 89, 49, 56, 72, 45, -53, -94, -48, 118, -79, -25, -42, -73, -126, -64, 45, 71, -49, 3, -99, 81, -116, 112, -19, 122, -30, 95, 3, 114, -87, -85, 95, -23, -5, 20, -121, -77, 36, 69, -120, -89, -82, -44, -108, 85, 61, 112, 117, -17, 69, 109, 86, 82, 77, 65, 92, 30, -83, 15, -121, -107, 86, -26, -93, -65, -124]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-46, -4, 74, 110, -7, 27, 24, -4, -108, -111, -120, 127, 37, -86, 38, 14, 42, -15, 119, 123, -15, 80, -77, -119, 55, -72, -113, -17, -1, 80, 60, -80, 109, 86, 82, 77, 65, 92, 30, -83, 15, -121, -107, 86, -26, -93, -65, -124]");
        org.junit.Assert.assertNotNull(byteArray31);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey5);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey15);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey15);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-45, -91, -43, 84, 71, -66, -31, 78, 45, 25, -80, 62, 71, 95, -79, -104]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-91, 0, 111, -61, -92, 119, -62, -95, -34, 79, 62, 23, -80, -66, -37, -102]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-91, 0, 111, -61, -92, 119, -62, -95, -34, 79, 62, 23, -80, -66, -37, -102]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-45, -91, -43, 84, 71, -66, -31, 78, 45, 25, -80, 62, 71, 95, -79, -104]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[43, -52, -66, -37, -71, 28, 41, -97, -124, 86, 125, -86, 13, -109, 42, 41]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[93, 21, 113, 34, -128, 93, 83, 35, -21, -43, -5, -102, -16, -31, 49, -116, -61, -81, -42, 4, 27, -42, 59, -80, -60, -123, 51, -100, -34, -122, -72, 102, 119, -49, -16, 31, 6, -82, -25, -124, -20, -57, -27, 66, 78, 19, 75, -97]");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("EACAC9E1DB4C7D2A6F5E024BD02B263D81601C254C4C8F9B0B7CD92A2817689633581A41FDE193D74DBDBC242C99E50E", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[66, -79, 82, -108, 89, -68, 95, 16, 117, 14, -31, 121, -88, 72, -101, -98]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-106, 53, 7, 34, 79, 15, 53, -20, 59, 119, -74, 50, 6, 21, -40, -5]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[121, -65, -85, -91, 104, 32, 105, 117, 25, -65, -10, 19, -46, -89, 63, 78]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-60, 87, 78, 81, 66, 46, -4, -29, 78, -45, 117, -46, 90, -62, -10, 74]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-71, -107, -55, -64, 32, -27, -93, 97, -3, -26, 41, 82, -59, -125, 32, -4, 115, -5, 60, 22, 56, 6, -17, 90, 63, -120, -110, 75, -117, -104, 90, 118, 121, -65, -85, -91, 104, 32, 105, 117, 25, -65, -10, 19, -46, -89, 63, 78]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[44, 6, -126, 115, 102, -101, 54, -113, 36, 119, 106, 29, 91, 7, -21, -83, -54, -96, -81, -98, -126, 82, -112, 64, 92, 6, 37, 6, -123, 95, 2, -39, 121, -65, -85, -91, 104, 32, 105, 117, 25, -65, -10, 19, -46, -89, 63, 78]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-128, -60, 46, 65, 27, -89, -20, -54, 115, -2, 127, 45, -70, -28, -22, -60, -65, -96, -3, 116, 71, 77, 7, -124, -116, 115, 50, -106, -92, 40, -35, 74, -78, 100, 75, 11, 91, -40, 46, 102, 96, -98, -74, 52, 104, -85, -108, 98, 73, 114, -70, -18, 120, 46, 94, -94, 57, -72, -37, -99, -93, -86, 58, -122, -105, 28, 94, 99, 84, -25, 127, -102, 75, -57, 54, -90, 115, -66, -75, -90, -24, -120, 7, 14, -24, 13, -18, 14, -43, -86, 16, 112, 84, -53, -49, -45, 121, -65, -85, -91, 104, 32, 105, 117, 25, -65, -10, 19, -46, -89, 63, 78]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-20, -127, -69, 105, -63, -98, -69, -3, 64, -123, -95, -93, 4, 124, 10, -112, 85, -82, -48, -103, 93, 113, -74, 107, -105, 55, -37, 16, 64, -57, -53, -101, 48, -89, 10, 73, -93, -25, -55, -115, 94, 107, 39, -127, -1, -28, -39, 89, -10, -31, -71, -36, -74, 97, -83, -80, 13, -84, -96, 32, 55, -94, -103, 83, 25, -35, 70, -80, 9, 9, 92, -106, -43, 40, 2, 79, 57, 98, -25, 2, 56, -108, -29, 37, -85, 119, 115, 16, 109, -126, 85, 1, 21, 90, -33, -24, 121, -65, -85, -91, 104, 32, 105, 117, 25, -65, -10, 19, -46, -89, 63, 78]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "EC81BB69C19EBBFD4085A1A3047C0A9055AED0995D71B66B9737DB1040C7CB9B30A70A49A3E7C98D5E6B2781FFE4D959F6E1B9DCB661ADB00DACA02037A2995319DD46B009095C96D528024F3962E7023894E325AB7773106D825501155ADFE879BFABA56820697519BFF613D2A73F4E" + "'", str29, "EC81BB69C19EBBFD4085A1A3047C0A9055AED0995D71B66B9737DB1040C7CB9B30A70A49A3E7C98D5E6B2781FFE4D959F6E1B9DCB661ADB00DACA02037A2995319DD46B009095C96D528024F3962E7023894E325AB7773106D825501155ADFE879BFABA56820697519BFF613D2A73F4E");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey28);
        java.lang.Class<?> wildcardClass36 = secretKey28.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-31, 93, -82, -12, 92, 95, -33, -94, 92, 55, -93, 73, 12, 126, -60, -2]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-51, 29, -75, -124, 59, 30, -106, 89, -1, -21, -72, 95, -1, -7, 71, 72]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-33, -24, 95, -9, -58, -34, 26, 31, -68, -10, 3, -109, 53, 72, -11, 120]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[111, 37, -94, 92, 122, 103, -84, 29, -33, 16, -66, 108, 85, -89, -58, -31]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[28, 84, 73, 5, -5, -106, 109, 79, 2, 19, 113, -125, -112, -51, 53, -97]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[56, -82, -1, 116, 93, 2, 10, 46, -60, 0, -69, 57, 74, 92, -13, -82]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[56, -82, -1, 116, 93, 2, 10, 46, -60, 0, -69, 57, 74, 92, -13, -82]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-56, -5, -119, -47, 5, 12, -110, -48, 73, 74, -49, 60, 118, 19, -23, -111, -75, -36, 44, -10, 102, 46, -29, -44, -112, 92, 53, 41, -104, 35, -78, 23, 28, 84, 73, 5, -5, -106, 109, 79, 2, 19, 113, -125, -112, -51, 53, -97]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-10, 70, -104, 67, 13, -60, 30, -55, 116, -23, 3, 122, 10, 0, 59, -33, 91, 62, 88, -73, -51, -96, 97, -93, 58, -12, -84, -117, 66, 95, -40, 47, 28, 84, 73, 5, -5, -106, 109, 79, 2, 19, 113, -125, -112, -51, 53, -97]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey29);
        java.lang.Class<?> wildcardClass38 = byteArray37.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, -107, 118, 29, 127, 102, -128, -17, 70, -98, -83, -79, -41, 122, 37, 38]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-126, -95, -15, 41, -116, -121, 13, -40, 70, -21, -58, -65, -102, -66, -122, 17]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[70, 37, 111, 52, 102, -77, -18, 7, -92, 33, -56, -10, -24, 10, -26, -92]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[126, 62, -86, -52, -61, 81, 87, -101, -127, 112, 66, -42, 22, -36, 98, -43]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-36, 104, -34, -106, 126, -80, -42, -35, -1, -30, 111, -17, -76, 41, -41, -90]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[2, -39, -82, -6, 98, 8, -121, 64, -4, -30, 119, 92, -88, 7, -47, -38]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[2, -39, -82, -6, 98, 8, -121, 64, -4, -30, 119, 92, -88, 7, -47, -38]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[92, -127, 73, -8, -109, 84, -44, -86, -44, 80, -65, -118, 125, -85, 39, -50, 34, -94, 28, -98, 12, -68, -31, 11, -73, 97, -98, -41, -128, 72, 29, -88, -36, 104, -34, -106, 126, -80, -42, -35, -1, -30, 111, -17, -76, 41, -41, -90]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-117, -50, 78, 124, -89, 58, -14, 0, 34, -95, -102, -77, -12, -122, -53, 106, 56, -29, 50, -20, -70, -32, 27, -93, 110, -15, -67, 85, -90, 123, -9, 113, -36, 104, -34, -106, 126, -80, -42, -35, -1, -30, 111, -17, -76, 41, -41, -90]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[26, -80, -59, -34, 27, -122, 100, -15, 113, -39, 46, 63, 36, -116, -90, 82, -31, 62, 55, 111, 82, -79, -63, -59, 9, -49, -73, -95, 8, 70, -54, -50, -36, 104, -34, -106, 126, -80, -42, -35, -1, -30, 111, -17, -76, 41, -41, -90]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey21);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-75, -106, -94, 86, 36, -117, -88, -54, 80, 69, 62, -50, -58, -98, 79, -19]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-31, -30, -3, -83, 112, -8, 76, 20, -118, 100, 93, 13, 86, -63, -123, -69]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[94, -89, 0, 30, 120, -121, 120, 79, 119, -114, -49, -53, 72, 117, 27, -47]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[112, -79, 83, 72, 21, -86, -25, -44, 82, 68, -75, 72, -18, -23, -114, -93, 14, 102, 107, 57, -50, 112, 9, -58, -118, 104, -44, -1, -121, -19, 3, -82, -75, -106, -94, 86, 36, -117, -88, -54, 80, 69, 62, -50, -58, -98, 79, -19]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "70B1534815AAE7D45244B548EEE98EA30E666B39CE7009C68A68D4FF87ED03AEB596A256248BA8CA50453ECEC69E4FED" + "'", str9, "70B1534815AAE7D45244B548EEE98EA30E666B39CE7009C68A68D4FF87ED03AEB596A256248BA8CA50453ECEC69E4FED");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "70B1534815AAE7D45244B548EEE98EA30E666B39CE7009C68A68D4FF87ED03AEB596A256248BA8CA50453ECEC69E4FED" + "'", str10, "70B1534815AAE7D45244B548EEE98EA30E666B39CE7009C68A68D4FF87ED03AEB596A256248BA8CA50453ECEC69E4FED");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "70B1534815AAE7D45244B548EEE98EA30E666B39CE7009C68A68D4FF87ED03AEB596A256248BA8CA50453ECEC69E4FED" + "'", str11, "70B1534815AAE7D45244B548EEE98EA30E666B39CE7009C68A68D4FF87ED03AEB596A256248BA8CA50453ECEC69E4FED");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[4, -57, 91, -32, -51, 96, 80, -75, 32, -119, -93, -42, 9, 42, -69, 30]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-65, 96, 64, -109, 109, -6, 94, -92, -41, -38, -93, -113, 118, 117, -86, -80]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[53, 103, -35, 91, -99, -107, -53, -94, 25, -43, -26, -13, 50, -15, 86, -19, 80, -29, -27, 83, 106, -53, -2, 25, -108, 127, 50, -34, -98, -68, 111, -51, -35, -52, -1, 109, 22, 57, -103, -84, 99, 72, 12, -52, 73, 97, 26, -100, 88, -30, -114, -45, 72, -82, 4, 103, 67, 8, -33, -16, 44, 8, 124, 11, 38, -93, -84, 101, -3, -14, 47, -4, -107, -30, -125, 36, 98, 118, -95, 14, 109, 91, 33, -18, -108, 100, -43, -122, -88, -40, -105, 29, 84, 30, 88, -2, 4, -57, 91, -32, -51, 96, 80, -75, 32, -119, -93, -42, 9, 42, -69, 30]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 98, -93, -18, 70, -32, -109, 76, 112, 28, 39, -56, 9, 37, 96, 25]");
        org.junit.Assert.assertNotNull(byteArray27);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey51);
        java.lang.Class<?> wildcardClass59 = secretKey51.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-74, 11, -121, -59, 17, 15, -62, -36, -8, 114, 55, 127, 50, -11, -112, 91]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[52, -8, 54, -8, -49, -41, 84, -54, 44, 89, 5, 123, -8, 32, -83, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-123, 107, -9, -45, -10, -116, 38, -122, 80, -31, 18, -11, 13, 28, 109, 48]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[123, -25, -33, 54, -33, -75, 40, 95, 20, -114, 102, -23, -11, 112, 31, -40]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-106, -89, -91, -105, 70, -113, 88, -82, -29, 100, -16, -100, -113, 60, 64, -109]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-6, -10, 0, 24, -40, -54, 5, 39, -18, -35, 91, 19, 18, 76, -19, -112]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-101, -9, -25, -25, -9, -115, -115, 5, -76, 55, -49, 119, 55, 107, 121, -16]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[112, -52, -118, 77, -28, -122, -94, 27, -84, -77, 1, -55, -51, 30, 37, -80]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-95, 1, -117, -12, 119, -71, 59, -12, 31, -53, -90, -90, -29, 115, 109, 58]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-100, -48, 120, 17, 74, -5, 38, 102, -16, 21, 93, -42, 126, 45, -92, 47]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-16, -110, -52, -22, -126, -64, -103, 12, -37, 31, 81, -53, -117, 29, -71, -72]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-95, 1, -117, -12, 119, -71, 59, -12, 31, -53, -90, -90, -29, 115, 109, 58]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey48);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey48);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey48);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey48);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("C7E6D5DA2ED0973D63DD46433A42257BC953CDEDF0FF7BE4F924CB6E0BAC8779AB28809B0A9BCA3160E4D4C68B5246CC884C8F244127610D4FCF26106A28B55CDCC074E0A6C67ABCE19CFE5C790E45E7877EA397E659C994274087AFC6BFF7DBEEF58CC712BB1C750ACF3D0B26A5E7A587A3A5C48052EF2ECBDC522B41E778EC2DFFF63A4AB8ADF521AB9FEE2BC0948A7A96DE58F882B5200D4E8FE2F6C6C0A584FBB791A25C08F335AA0D7F498FE54EDFFC3B507B8A4D85E9B7FB4F8853EA1C3F60C18DBF4EBDBBA1F1A87315CE669595D58F0A25EF33C5C63EE7BC157EED457120495BF6BF33A182441D2A09992F22", secretKey48);
        java.lang.Class<?> wildcardClass58 = byteArray57.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-116, -58, 83, 102, -105, 19, 53, 96, 105, -103, -108, -35, 58, 115, -23, 105]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[51, -43, 21, 20, 39, -64, 14, 78, 55, -90, 125, -74, -105, -10, 5, 79]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-29, -39, -40, 19, -113, -7, 1, 86, 41, -68, 111, -91, 41, -20, 112, 62]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[51, 72, 119, -72, 19, 76, 4, -52, 120, -58, -13, 16, 70, 8, -5, 114]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[27, -34, -36, -18, 72, 63, 10, -26, -112, 18, 10, 99, 67, -104, -41, -77]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-124, -43, -71, -92, -26, -103, 114, -33, -62, 77, 41, -127, 89, -30, 10, 31]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-47, 31, -122, 43, 75, 5, -31, -27, 119, 115, 45, 79, -108, -15, 109, 126]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-68, 0, 102, -38, -38, -76, -95, -19, -68, 66, -67, -109, -107, 0, -93, 119]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[29, -115, 1, -111, 98, -58, 67, -57, -64, -90, 23, -12, -105, 46, -25, -27, 94, -107, -66, -119, 82, 117, -7, -80, 51, -102, 88, -10, 124, -16, 57, 6, -47, 31, -122, 43, 75, 5, -31, -27, 119, 115, 45, 79, -108, -15, 109, 126]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[23, -99, 76, 120, -36, -97, -85, 30, 24, -67, -7, -84, 8, -116, 42, 80, -51, -85, -25, -12, -10, 68, -102, -103, -111, -123, 108, 40, 14, 20, 53, -86, -47, 31, -122, 43, 75, 5, -31, -27, 119, 115, 45, 79, -108, -15, 109, 126]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.Class<?> wildcardClass8 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[88, -83, 6, 53, 70, -101, -43, -11, 110, 122, -60, 110, 17, 28, -84, 84]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[121, -60, 18, -117, -33, 29, -112, 115, -77, 67, -115, -98, -87, -109, 71, 13]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[46, 83, 11, 91, -18, 36, -27, 49, 113, 105, -33, 105, -89, -115, 117, 79, 92, 86, -109, 42, -114, -24, -34, 117, -72, 54, -41, -89, 62, -55, -43, 91, 88, -83, 6, 53, 70, -101, -43, -11, 110, 122, -60, 110, 17, 28, -84, 84]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2E530B5BEE24E5317169DF69A78D754F5C56932A8EE8DE75B836D7A73EC9D55B58AD0635469BD5F56E7AC46E111CAC54" + "'", str7, "2E530B5BEE24E5317169DF69A78D754F5C56932A8EE8DE75B836D7A73EC9D55B58AD0635469BD5F56E7AC46E111CAC54");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[111, 20, 67, 1, -23, -90, 101, 15, -70, -55, -35, -110, 118, -8, -111, -124]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, -80, 71, 5, -110, 80, 39, 111, 29, -66, 124, -109, 3, 5, 86, -59]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-23, 9, -73, -84, 11, -12, 21, -93, -89, -124, -106, -122, 4, 35, -106, 109, 91, 27, -67, -92, -114, 23, 66, 67, -84, 39, 39, 68, 40, -87, -54, -37, 126, 12, -47, 64, -85, 75, -47, 126, 65, 85, 44, 21, 58, -5, 41, -31, -90, -80, -10, -118, 44, -96, -37, 12, -29, -105, -69, -49, 11, -7, -26, -84, -64, -20, -102, -54, -93, -15, 91, 68, 95, 69, -82, 37, 112, 120, -40, -1, 34, 4, 93, 105, 69, 41, 122, 52, 18, 44, -11, 102, -57, -56, 27, 40, 111, 20, 67, 1, -23, -90, 101, 15, -70, -55, -35, -110, 118, -8, -111, -124]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 65, -84, -1, 13, -78, -81, 64, -124, -18, -35, 66, 36, 28, 34, 73, -58, 44, 101, -64, 36, -33, 44, -30, 107, 55, 77, -17, -127, 10, -108, 66, 111, 20, 67, 1, -23, -90, 101, 15, -70, -55, -35, -110, 118, -8, -111, -124]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-108, -62, 47, 9, 40, -93, -42, -103, 124, 113, 84, -59, 64, 7, 21, -4, -65, 66, 32, 13, -71, 103, -56, -109, 4, -64, 121, -78, -20, -64, -91, 112, -64, -23, -95, 103, 43, -26, -61, 113, 26, 76, 53, 62, 38, -122, -14, -59, 22, -70, -19, 43, -22, 18, -97, -16, 65, -60, 127, 32, 3, 52, 4, 41, 11, -10, -79, -47, -122, 7, -19, -101, 84, 96, -39, -97, -10, 100, 120, 121, -60, -92, 36, -103, 36, 54, 107, -120, 30, 111, -94, 68, -72, -90, -56, -89, 111, 20, 67, 1, -23, -90, 101, 15, -70, -55, -35, -110, 118, -8, -111, -124]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-33, -101, -28, 30, -34, -43, 6, -72, -83, -8, -14, -11, -53, -124, 70, -79]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[9, 24, 96, -59, 54, 116, 42, -60, 94, -124, 79, -128, -77, 28, 68, 82]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-98, -123, -72, -33, -111, -21, -63, -110, -113, -74, 80, 92, 67, -82, 66, 31]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-25, -36, -90, -56, -122, 80, -126, 34, -40, -44, 115, -15, -34, -111, -126, -32]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[42, 125, -62, 54, -93, -95, 72, 99, -17, -44, 41, 42, 39, -8, 0, 43, 82, 63, -27, -52, -15, 73, 106, 110, -58, -66, -1, -35, 5, -12, -64, 13, -98, -123, -72, -33, -111, -21, -63, -110, -113, -74, 80, 92, 67, -82, 66, 31]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-68, 87, -5, -53, 106, -82, 67, -72, 99, -105, 9, 115, 8, 25, 90, 86, -102, 53, 34, 46, 92, -11, -59, -67, -101, 45, 39, -9, 83, 15, -121, -100, -98, -123, -72, -33, -111, -21, -63, -110, -113, -74, 80, 92, 67, -82, 66, 31]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-47, 124, 72, -18, -37, 90, -78, -96, 65, -9, 118, 37, -7, 22, -23, 88, 78, 61, 66, 42, 42, 93, 74, 71, -48, -119, 127, 124, -12, -23, -111, -41, 35, -62, -89, 8, -98, 127, 4, 110, 79, 100, -16, 69, -31, -1, 47, -65, -110, 76, 37, -113, 88, -4, 33, 110, 90, -41, -111, -123, -66, 98, 102, 100, 22, 17, -104, 17, 112, 91, -95, -124, 97, -24, -33, 78, -70, -107, -96, -125, 58, -31, -69, 98, 89, 0, 99, 67, 47, -54, 92, 68, -46, -116, 14, -51, -98, -123, -72, -33, -111, -21, -63, -110, -113, -74, 80, 92, 67, -82, 66, 31]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-12, 91, -28, 117, 117, -78, -70, 73, -71, 84, 69, 111, 105, 96, 90, -50, 68, 95, 107, -48, -64, 108, 4, 65, 111, 24, 47, 94, -54, 52, 49, -120, -98, -123, -72, -33, -111, -21, -63, -110, -113, -74, 80, 92, 67, -82, 66, 31]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey50);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey50);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey50);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        byte[] byteArray68 = new byte[] {};
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray68);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey70);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey74);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey74);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey83);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey83);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey83);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey83);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey83);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey83);
        java.lang.Class<?> wildcardClass90 = secretKey83.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[16, -82, 109, 116, 79, -59, 78, -32, -41, -127, -83, 98, 73, 53, -121, -118]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-55, -9, -110, -51, 6, -17, -42, -22, 21, 107, 111, 71, -83, 0, -44, -126]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-12, 67, -56, 72, 121, -104, -106, 69, 7, 122, -19, -64, -127, -64, -41, 84]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[48, 91, 57, 43, 6, 27, -12, -72, -106, 122, -91, -5, 107, 58, 26, 82]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-111, 96, 60, -51, -119, 87, 47, 33, -103, 26, 44, 4, 86, -86, -62, -79]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[12, -34, -71, 95, -55, 126, 20, 32, 45, -55, -83, -110, -1, 68, -76, -80]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[115, -56, -84, -50, -47, -23, -42, -3, 93, 42, -72, -5, 40, -23, -49, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[99, 49, -101, 95, 78, 126, 96, -59, -22, 38, -92, 85, -85, -118, 74, -59]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-56, 99, -69, -93, 54, 7, -127, -128, -42, -51, -127, -4, -15, -55, 90, -23]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[115, 12, -49, 77, 112, -99, -112, -45, -77, 10, 32, 20, 26, 38, 42, 59]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-7, -30, 56, 127, -23, 54, 123, -74, -90, -57, -1, -127, 88, -68, -10, 4]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-56, 99, -69, -93, 54, 7, -127, -128, -42, -51, -127, -4, -15, -55, 90, -23]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[121, -39, -48, -7, 14, 36, 91, 36, -101, 65, 100, -49, -76, -52, 113, -23]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[35, -73, -116, -24, -22, 7, 2, 61, 101, -17, -63, 32, -88, -60, -42, 41]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-90, 126, 104, -77, -27, -79, 27, 93, 103, -15, 51, -94, 103, 25, 101, 69]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-96, 115, -6, 62, 26, -36, 49, 112, -35, -63, 123, 100, 58, -12, -39, 18]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[117, 68, 97, -101, 29, 32, 75, 42, -18, -102, 85, 61, 84, -98, 94, 6]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-24, -94, -54, -34, 7, -69, 5, 46, 82, -107, 10, -96, 54, 100, 6, -2]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-24, -94, -54, -34, 7, -69, 5, 46, 82, -107, 10, -96, 54, 100, 6, -2]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-52, -11, -113, 43, 18, -16, 47, -110, 41, -10, -97, -117, 41, -43, 68, -36, 77, 65, 28, 23, -81, -87, -71, 53, -88, -46, 22, -81, -101, 0, -2, -28, 117, 68, 97, -101, 29, 32, 75, 42, -18, -102, 85, 61, 84, -98, 94, 6]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey3);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-76, 56, -11, -120, 122, 79, 38, 8, -13, -15, -23, -44, -82, 59, 30, 6]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[92, -47, 118, -74, -88, 16, -102, 19, 120, -56, 51, -52, 77, -3, -4, 7, 14, 125, 7, 95, -116, -95, -49, -113, -88, 47, 82, 20, 83, -123, -51, 43, 84, 34, 51, -94, -52, -67, 82, 28, 95, 57, -44, 114, -101, -58, 76, 5, -66, -128, 72, -42, 23, -50, 118, -124, -84, 42, 73, -47, 111, -53, 33, -32, 2, -4, -91, -108, -72, -125, 40, 78, -116, 32, 104, 29, 117, -32, -63, -120, 100, -125, 117, -55, -9, -78, 60, 83, -98, 78, -56, -62, 48, 72, -36, 88, -76, 56, -11, -120, 122, 79, 38, 8, -13, -15, -23, -44, -82, 59, 30, 6]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-44, -103, 33, -85, 5, -32, -125, 82, 101, 82, 25, -48, 121, -28, 82, -57, -98, 4, 48, 110, 58, -113, -46, -83, 54, 34, 106, -79, -67, -70, 98, 97, 42, -68, -123, -78, -100, 33, -74, -120, 42, 81, -115, 83, 71, 38, 89, 4, 90, -60, 73, 126, 107, 47, -30, 24, -111, 90, -32, 49, 115, 127, -103, 40, 70, -54, -18, 70, 0, -39, -60, 74, 94, 72, -125, -34, 47, -46, -25, 86, 37, -22, 86, -18, 71, -99, -72, 35, 126, -55, 37, -47, 74, -22, -112, -74, -76, 56, -11, -120, 122, 79, 38, 8, -13, -15, -23, -44, -82, 59, 30, 6]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E1967767FBCA9187364B14093D005B637DBE91B2976363574232CE85116F01D166B47891C81BDBC9F77F8848CC39E71474A928EB91D881CDF9EC4DDE7252AA9A435EE1BDE8B240F21A1D1B4FFE75996226C1CD2BD742FFA9ABCF23870D8001A51036471E38BC7ED00A707B277F1A2A85EF0F14916F4C16777ECF2D34D7B4D2FF1AF4CBBADF4C95C01B48726F27A04FD1A7B178BF9E45868E2CA232F29FFDC5E005017B2E23B8CD5D8CC1C102CC4BF9A9F32B22A9F474104BFC0E8CB9863C7DB708EF3F149A810CEEEE2FE64315F32241590357462707D8F48DC82B9D18378750266F61B97521CE0AB6AF87A58E2585C", secretKey4);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey14);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey14);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey14);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-103, -43, -104, 24, -34, -14, 102, 116, 85, 111, -74, -94, -120, 78, -39, 37]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "A367823218C78180F0632537AD12124BCF40442591766B6B8000E9F37192CB6C1649AB6FAE8E8F2B44421E87CD3605FD1D12BEC549DA25D39EFC28489128B1C0E02335A368CB7D3AC69485E2CF56F6D89349E8EDE05F2AD6C0C8447ED7775A3C39B48563191517CD27A4B9114369486DAF6C674DAFEB6DB34F420B1E0D7CE0A4C3BFAE2F60390D80FEB99D18D46BB8B7A87F31B8CD1DC7623CDEA7233F2407B7E20A28A0C40897375A36C1FD8F32D90CE292C01480A0381FA1AA7D4EF1ABDEE3C9C6C786B67B83CAAF3CFB99082032D5B7FDFA340AB739C4636C86228AAD7B37D3068DC14C17E316AB5250D20B728129751C11A2E7F5BC4766BA7F5EC168AB765DF83B6F3E1E357401689504DF29A05C54283118303A75DDA73EA344531F6A27ABF64D2D5DCFDAE4790217F66301E51216FCDBD83CA34956C875105B1F9DA869907DC32910110BC5C277DDCADEDD82C44E511AA6F391A87AD77BA65CA9A1707A1DFB911B5B3267C9E87FF32AB9635F78EFCAA937ABA33159C71D3ECA40D1279F383CFAC935DCFE27ABC90C964846985F66E7F348CA68639AC7BCCBEE29F77E957648AC86E95C46A00A05E0E8C8977FD2AF26BAA9B2E27F136CED7939ED1EBD84148A1599F54FDB6B40595DB88500552AB482FCBB1575D48C41EF29BBB3C06A8B6CD300B1482027C55D63C183E26B22AF" + "'", str8, "A367823218C78180F0632537AD12124BCF40442591766B6B8000E9F37192CB6C1649AB6FAE8E8F2B44421E87CD3605FD1D12BEC549DA25D39EFC28489128B1C0E02335A368CB7D3AC69485E2CF56F6D89349E8EDE05F2AD6C0C8447ED7775A3C39B48563191517CD27A4B9114369486DAF6C674DAFEB6DB34F420B1E0D7CE0A4C3BFAE2F60390D80FEB99D18D46BB8B7A87F31B8CD1DC7623CDEA7233F2407B7E20A28A0C40897375A36C1FD8F32D90CE292C01480A0381FA1AA7D4EF1ABDEE3C9C6C786B67B83CAAF3CFB99082032D5B7FDFA340AB739C4636C86228AAD7B37D3068DC14C17E316AB5250D20B728129751C11A2E7F5BC4766BA7F5EC168AB765DF83B6F3E1E357401689504DF29A05C54283118303A75DDA73EA344531F6A27ABF64D2D5DCFDAE4790217F66301E51216FCDBD83CA34956C875105B1F9DA869907DC32910110BC5C277DDCADEDD82C44E511AA6F391A87AD77BA65CA9A1707A1DFB911B5B3267C9E87FF32AB9635F78EFCAA937ABA33159C71D3ECA40D1279F383CFAC935DCFE27ABC90C964846985F66E7F348CA68639AC7BCCBEE29F77E957648AC86E95C46A00A05E0E8C8977FD2AF26BAA9B2E27F136CED7939ED1EBD84148A1599F54FDB6B40595DB88500552AB482FCBB1575D48C41EF29BBB3C06A8B6CD300B1482027C55D63C183E26B22AF");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[99, 38, -51, -80, -43, -33, 5, 120, -72, -56, 11, -61, 119, 5, 68, 105]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-26, -97, 76, -18, 117, -75, -23, 126, 8, -34, 28, -90, 92, 7, 35, 117]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-27, -116, -88, -63, -54, 91, 44, -81, -64, 96, -95, 115, 33, -41, -72, -52, 16, 104, -96, 77, -107, 39, -47, -37, -127, 125, 7, -108, -59, -41, 74, 102, -21, -12, -13, 21, 69, -126, 122, -95, 73, 75, 9, -76, -83, 100, 19, 20, -125, -19, 1, -106, 83, 7, 48, -92, 30, -26, -42, -8, 44, 86, 76, 48, 106, 61, 11, -73, 3, -3, 83, -102, 73, -99, 28, -45, 60, 79, -110, 67, 84, -98, 103, 54, -116, 64, -22, -86, 65, -124, -42, 122, 10, -52, -21, 116, 99, 38, -51, -80, -43, -33, 5, 120, -72, -56, 11, -61, 119, 5, 68, 105]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[94, -50, 49, -108, -97, -49, -64, 12, 123, 25, -89, -21, 4, -60, -56, 91, 118, -4, 93, -27, -64, 35, -20, 93, -34, -29, 9, -13, -35, -65, 122, -11, 98, -92, -26, 12, 124, 94, -11, 86, -95, 31, -53, 30, 11, 122, 106, -74, -110, -47, -118, -30, 0, -53, 51, 65, 88, 8, -14, 100, -121, 123, 88, -110, 94, -104, -71, 99, -33, -20, 90, 14, 77, -87, 33, 74, 49, -75, 60, 87, -6, 83, -18, -39, -88, 81, 121, 70, -15, -52, -11, 43, -61, 73, 3, 45, 99, 38, -51, -80, -43, -33, 5, 120, -72, -56, 11, -61, 119, 5, 68, 105]");
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7FA568134806C9105C34D583C29871A41AE5CE04D352F794BBBC55C17CC3D7B2E48B2428828EE039A91A06CFBF22DBA03F23A99544AD69867843E16A8BBCB065F997601695DCE4DA9232998E7CFA9275FD14E9B5BE58653BB989CC8C93C323B9A2602029745C486376259619FE42C1DC969C5F23218132538C69A93E2C46029CAFBCB3A325C55A351897A58F95136EEE2494FA973744222FA873EEAD1E15360A868A656A3C665D51EC62012BA7C41A8A5BF8AD314E65E180BA4087E8D6B89D6623982F2B436A6758077463A37F0FFC47E55DE5DFB67D8B3F67F9F6BD7C9678E01B5950A89DB569E40DEBF8146983CC8", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.Class<?> wildcardClass30 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-89, 58, 14, -27, -27, 9, -79, -83, 13, 13, -26, -64, 17, 116, 52, -19]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-108, 80, -49, 44, 11, -6, -25, -126, -79, 51, -34, -105, -24, -98, -24, 51]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[62, -24, 70, 68, -60, 1, 23, -80, 104, -61, -54, -118, 117, -25, -40, -122]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-122, 81, -119, 54, -33, 2, 42, -120, 121, 5, -120, -22, 70, 34, -98, 101]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-26, -9, -62, 49, -33, -117, -27, -55, -38, 71, 93, -17, -20, -4, 85, -66, 75, 8, 68, -104, 99, 121, 14, -45, 104, -104, 24, 125, -114, -9, 39, -22, 62, -24, 70, 68, -60, 1, 23, -80, 104, -61, -54, -118, 117, -25, -40, -122]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[21, 65, -87, -119, 126, -35, 88, 71, -114, -75, 3, -53, 77, -80, -80, 24, 97, -39, -39, 67, 72, 84, -2, 13, -46, 36, 69, 37, 88, 92, -36, 10, 62, -24, 70, 68, -60, 1, 23, -80, 104, -61, -54, -118, 117, -25, -40, -122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-66, -49, 112, -122, -68, -125, -24, -43, 30, 94, 10, 58, -68, -100, 33, -51, -104, -80, -56, 84, 43, 94, 3, -20, 91, 107, 22, 111, 6, 9, -35, -57, 32, 98, -87, 73, -110, 66, -76, -19, 61, -126, 124, -94, 123, -20, -11, 113, -44, 19, 60, -97, 94, 39, -96, -60, 35, -21, 123, 4, -124, -10, -93, 21, 97, 120, -102, -91, 39, 77, 34, 34, 53, -61, 84, 9, -51, -116, -100, 90, 32, -62, 113, 84, 30, -102, -78, 50, -72, -126, -95, 0, -12, 48, -32, 36, 62, -24, 70, 68, -60, 1, 23, -80, 104, -61, -54, -118, 117, -25, -40, -122]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "BECF7086BC83E8D51E5E0A3ABC9C21CD98B0C8542B5E03EC5B6B166F0609DDC72062A9499242B4ED3D827CA27BECF571D4133C9F5E27A0C423EB7B0484F6A31561789AA5274D222235C35409CD8C9C5A20C271541E9AB232B882A100F430E0243EE84644C40117B068C3CA8A75E7D886" + "'", str29, "BECF7086BC83E8D51E5E0A3ABC9C21CD98B0C8542B5E03EC5B6B166F0609DDC72062A9499242B4ED3D827CA27BECF571D4133C9F5E27A0C423EB7B0484F6A31561789AA5274D222235C35409CD8C9C5A20C271541E9AB232B882A100F430E0243EE84644C40117B068C3CA8A75E7D886");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[94, -82, -19, 45, -22, 86, -116, -70, 42, -18, -119, 51, 35, 105, -111, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[13, -38, -30, -116, -94, -61, -80, 9, 2, -13, 37, 77, 18, 37, 30, 53]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[13, -38, -30, -116, -94, -61, -80, 9, 2, -13, 37, 77, 18, 37, 30, 53]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[94, -82, -19, 45, -22, 86, -116, -70, 42, -18, -119, 51, 35, 105, -111, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[94, -82, -19, 45, -22, 86, -116, -70, 42, -18, -119, 51, 35, 105, -111, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey85);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey85);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray93);
        java.lang.Class<?> wildcardClass95 = byteArray93.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[91, -87, 0, 26, 49, 16, 49, -80, 97, 102, 109, -98, -46, 30, -108, -103]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-28, -105, 127, 7, 115, 49, 74, 51, 44, 80, 55, -40, -99, -18, 26, 121]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-6, 105, 114, -92, -128, 27, -25, -114, -36, -126, -31, 83, 22, 4, 58, -120]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[32, -84, -106, -4, 68, -58, -12, -19, -33, 29, -110, 70, 95, -5, 5, 37]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-27, 1, -49, 16, 91, -102, 2, -31, 34, 45, 38, -51, 35, 111, -54, -124]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-90, 117, 40, -82, 73, 7, 51, -69, -68, 2, 29, 20, -100, -74, -55, 40]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[98, 123, -16, -71, 82, 36, 5, 74, -12, 38, 82, 125, -107, 123, -114, -3]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[21, 50, -14, 68, -48, 9, 28, 9, 62, -32, 31, -29, 27, 59, 98, 32]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[123, -80, -13, 23, 127, 125, -50, 2, 23, 66, -5, 38, 87, -39, -121, 75, 71, -54, -25, 108, -14, -116, -99, 87, 110, -35, -39, 24, -26, -95, -22, 73, 98, 123, -16, -71, 82, 36, 5, 74, -12, 38, 82, 125, -107, 123, -114, -3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-21, -128, 103, 36, -2, 98, -110, 71, -29, 104, -75, -102, -119, -86, 11, -32]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-24, -97, -22, 105, 27, -66, -59, -80, -49, 105, -46, -56, -112, -97, 79, 57]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-33, 116, -78, 45, -76, -57, -25, -68, 120, -77, -103, 49, -67, 43, 127, 61]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[43, -57, 113, 0, -27, 8, 13, -28, -90, 74, 7, 10, -103, 16, 102, -96]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-42, -42, -112, 70, 83, -57, -21, -54, -14, 41, -82, -96, 27, 35, -91, -90]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[23, 123, -1, -48, -36, 96, -85, 119, 100, 61, -20, -7, -20, 94, 127, -90]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[102, 68, 48, 60, 48, -2, 120, -23, 122, -28, 45, -33, 91, -17, -112, -41]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[91, 76, 74, -47, -82, 36, 26, -2, 40, -102, -20, -2, 43, -51, 31, -127]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-22, -60, 48, 8, -29, 22, 36, -1, -111, -39, 96, -31, 2, -56, 98, -77, 42, -69, -93, -108, -23, -87, -98, -128, -120, -10, -25, -31, 29, 5, 35, -36, 102, 68, 48, 60, 48, -2, 120, -23, 122, -28, 45, -33, 91, -17, -112, -41]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[92, 73, -17, -10, 122, -3, 118, -38, 13, 10, -56, -70, -78, 73, 98, -64, 89, -92, -99, 2, -101, -45, -74, -30, -24, 84, 100, -40, -43, -31, -69, -98, 102, 68, 48, 60, 48, -2, 120, -23, 122, -28, 45, -33, 91, -17, -112, -41]");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "5C49EFF67AFD76DA0D0AC8BAB24962C059A49D029BD3B6E2E85464D8D5E1BB9E6644303C30FE78E97AE42DDF5BEF90D7" + "'", str94, "5C49EFF67AFD76DA0D0AC8BAB24962C059A49D029BD3B6E2E85464D8D5E1BB9E6644303C30FE78E97AE42DDF5BEF90D7");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9EA57995CA41CB4DA82DDC3E1C9D6709", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey51);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, 14, -78, 19, 40, -61, -120, -104, -114, -99, -82, -69, -111, 82, 38, -5]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[36, -44, -102, 78, 77, 15, 119, 112, -82, -105, -88, 113, -63, -57, 42, 127]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-82, 64, 127, 97, 70, 125, -34, 62, -31, -39, 76, 56, 56, 23, -114, 69]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-68, -57, 2, 92, -79, -49, -33, -31, -61, 70, 44, 117, -61, 58, -87, -3]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[96, 64, -3, -111, -118, 72, -51, -1, -31, 109, 13, -117, 127, -36, -28, -39, 44, 87, -66, -90, 88, 67, 69, 111, 108, 97, -44, 3, -107, -20, -127, 103, -82, 64, 127, 97, 70, 125, -34, 62, -31, -39, 76, 56, 56, 23, -114, 69]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[68, -95, 35, 15, -65, -14, 123, -103, -92, 1, -19, 59, -72, 38, -92, -82, -45, 112, -13, -64, 116, 19, -65, 60, 95, 95, 116, -67, -11, -37, 78, 15, -82, 64, 127, 97, 70, 125, -34, 62, -31, -39, 76, 56, 56, 23, -114, 69]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[117, 107, 44, -89, -74, -45, 84, -36, -11, -62, 9, -93, -65, -9, 114, -8, -113, 123, -117, 17, 78, 105, 96, 94, -110, 83, -65, -73, 24, -69, 118, -105, 14, 81, -122, 66, 43, -116, -123, 57, 24, 2, 24, -89, -106, 14, 26, 125, 73, -69, 22, 67, -7, 84, -5, -113, -73, 35, 61, 51, 91, -44, 86, 25, 4, -94, -15, -121, 7, -28, -78, -73, -119, -43, 1, -126, 87, -10, 78, 27, 119, -113, -94, -99, -41, -15, 105, 73, -65, -64, 101, 1, 73, -126, 26, -61, -82, 64, 127, 97, 70, 125, -34, 62, -31, -39, 76, 56, 56, 23, -114, 69]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[20, -126, 66, -69, 80, -85, -26, 10, -74, 36, 31, 29, 50, 69, 81, -78, 10, -21, -68, -76, 1, -34, 80, -104, -49, -32, -44, -18, -90, 24, 26, -51, -39, -14, 26, 77, -111, 23, 10, -61, -120, 118, 73, 2, 50, 28, -24, -125, 47, 38, 120, 6, 42, -79, -49, 29, -75, -40, 47, -103, 14, -113, 5, -17, 45, -112, 10, -29, -11, -4, 62, 119, 88, 48, 25, -4, 20, -76, -53, -20, -114, 81, -91, 9, -66, -127, -22, 46, -86, 16, -34, 8, -5, 79, 16, 60, -82, 64, 127, 97, 70, 125, -34, 62, -31, -39, 76, 56, 56, 23, -114, 69]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[88, -50, 4, 40, 84, 86, -7, -18, 64, 50, 1, -8, -113, -112, -40, 36, 45, -79, 27, 91, -1, 85, 70, 25, 77, -53, 108, -119, 103, -105, -35, 8, -82, 64, 127, 97, 70, 125, -34, 62, -31, -39, 76, 56, 56, 23, -114, 69]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "58CE04285456F9EE403201F88F90D8242DB11B5BFF5546194DCB6C896797DD08AE407F61467DDE3EE1D94C3838178E45" + "'", str31, "58CE04285456F9EE403201F88F90D8242DB11B5BFF5546194DCB6C896797DD08AE407F61467DDE3EE1D94C3838178E45");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[127, 79, 60, -74, 1, -113, -101, 23, 64, -107, -55, 79, -124, -105, 84, -102]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[48, -108, 79, -50, -77, 92, 122, 39, 75, 14, -85, 28, -91, 119, 94, -123]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-56, -80, -108, -81, 118, 14, -125, -123, 112, 82, -114, -20, 43, -89, -123, 55]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -113, -100, 123, -113, -85, -117, 25, 5, -98, 84, 86, -60, 51, 19, 119]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-43, 96, -30, -103, 95, -42, 31, 77, 20, -58, 60, -87, -15, 6, -121, 109, -109, -5, 124, 44, -38, 81, 35, 103, -79, -48, 68, -67, 64, 72, -118, 34, -56, -80, -108, -81, 118, 14, -125, -123, 112, 82, -114, -20, 43, -89, -123, 55]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[51, -21, -94, 9, -78, -101, 10, 122, 107, 102, -37, -17, -31, -63, -26, 23, 121, 101, 37, 28, 107, 67, 74, -47, 93, 49, 108, -37, 111, -114, 19, 115, -42, -51, -113, 28, -105, -124, -83, 107, -58, -84, -71, 28, -56, -101, -36, -121, 71, 124, 12, -67, 24, -31, -110, -65, 1, 90, 88, -15, 57, -85, 7, 45, -83, 35, -34, -59, 62, 64, 98, 19, 59, 15, 38, 49, 43, 9, -98, -73, -76, -115, -51, 86, 115, -52, 31, -32, -65, -78, -65, -110, -41, 39, -102, 43, -56, -80, -108, -81, 118, 14, -125, -123, 112, 82, -114, -20, 43, -89, -123, 55]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("85901A7A07774EF1B30A7D77F78D499830E94396D39F6D0A240A6BA509D22CD00BBA7DCDA4CC37D69BA13844D5AF219C", secretKey22);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey49);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-84, 108, 101, 99, -33, -18, 72, 97, -105, -100, -1, 116, 65, -31, -104, 108]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[81, 92, -95, 53, -67, -77, -84, 111, -102, -52, -3, 43, -97, 90, -84, 12]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[115, -28, -126, -41, 3, 94, -63, 14, -50, -103, 101, -77, -125, -96, 13, 104]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-114, 83, 107, 115, 50, 67, 55, -19, 10, 125, 116, 102, -52, -75, -67, 124]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, -119, -39, 68, -102, -55, 75, -118, 37, 87, -122, 105, 37, 30, -120, 89, -120, -110, -20, 66, 121, -82, -1, -61, -128, 56, -38, 109, 33, 125, -31, 88, 115, -28, -126, -41, 3, 94, -63, 14, -50, -103, 101, -77, -125, -96, 13, 104]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[115, -28, -126, -41, 3, 94, -63, 14, -50, -103, 101, -77, -125, -96, 13, 104]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-114, 83, 107, 115, 50, 67, 55, -19, 10, 125, 116, 102, -52, -75, -67, 124]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[117, 33, 111, -50, -54, -62, 32, -23, 26, 8, -98, 117, -70, -84, 8, 37, 74, -92, -17, -13, 124, 69, 87, -55, -32, -30, 108, -6, -88, 114, -81, 103, 115, -28, -126, -41, 3, 94, -63, 14, -50, -103, 101, -77, -125, -96, 13, 104]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[69, -81, 123, 90, -97, -9, 57, -83, 52, 48, 110, 23, -106, 115, -5, -65, 61, -39, -103, -87, 104, -71, -76, 96, -91, 17, -47, 75, -34, -80, 95, 32, 60, 119, 44, 115, 41, 112, 50, 14, -115, 75, 58, -50, -101, 108, 65, 31, 86, -40, -31, 125, 40, 60, 21, 94, -24, -126, 104, 26, 99, 10, -10, 41, 116, -51, 72, -36, 50, -4, -48, 83, 8, 97, 121, -45, 35, -95, -76, -103, 9, 15, -14, -111, 16, 1, 123, -32, -46, -36, 10, -93, 116, -67, -84, 109, 115, -28, -126, -41, 3, 94, -63, 14, -50, -103, 101, -77, -125, -96, 13, 104]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-127, -109, -128, 7, 69, -88, 96, -122, -15, 125, -107, 107, -2, 39, 127, -85, 90, 76, -7, 124, -24, -56, 123, 42, 125, 17, -90, -96, -109, -79, 90, -37, -57, 94, -41, 110, -60, 2, -37, -12, -56, -22, 102, 127, -22, -119, -76, -16, 105, 27, 59, 38, 100, -99, 76, 23, -97, -31, 45, -67, -122, -61, -38, -70, -91, -35, 115, 82, 23, -87, 37, 104, -60, -99, -123, -35, -64, 127, 30, -3, -109, -125, -6, -127, 105, -45, 7, 109, -126, 67, -111, -95, 13, -108, -13, 66, 115, -28, -126, -41, 3, 94, -63, 14, -50, -103, 101, -77, -125, -96, 13, 104]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-108, 102, -26, -96, -99, 90, 86, 37, -106, 25, 108, 95, 85, 16, -3, 42]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-87, -82, -58, -19, -116, 110, 39, -28, 21, -16, 1, 50, 77, -15, -127, -95]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-87, -82, -58, -19, -116, 110, 39, -28, 21, -16, 1, 50, 77, -15, -127, -95]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey41);
        java.lang.Class<?> wildcardClass51 = secretKey41.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-87, 62, -2, 76, 8, -22, -74, -120, 39, -85, -52, -84, -106, -20, -17, 97]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[108, 124, -110, -78, -88, -32, -69, -18, -63, 56, -49, -60, -59, 49, 33, -31]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-110, -12, -74, 7, -52, -99, -99, -47, -15, -20, -88, -99, -6, 115, -120, 50]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-66, -14, 63, -97, -45, -11, 83, 108, 83, 101, -125, -93, -66, 31, 0, -14]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, -73, -59, -11, -40, -67, -26, 71, 5, -47, 55, 68, 56, 4, 4, 38]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-109, 42, -60, 106, 58, 32, -48, 50, -77, -8, -31, 62, 0, 109, 0, -54]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[30, 2, 9, -42, 53, 78, 74, -11, 102, 67, 18, -42, -85, -7, 73, 21]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-69, -52, 56, -112, 103, -6, -40, -4, 127, 67, -8, 63, 82, 121, -101, -52]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-114, -71, 23, 6, -26, 15, 37, 96, -114, 32, -8, 98, -36, -7, 71, -127, 5, 112, 78, 76, -72, -40, 72, 100, 9, -102, -123, -14, 9, -76, 49, 78, 30, 2, 9, -42, 53, 78, 74, -11, 102, 67, 18, -42, -85, -7, 73, 21]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-73, -56, -89, -89, -101, 102, -90, -18, 69, 85, -1, -127, 60, 7, -117, -61, 21, 96, 61, -61, 71, 51, 53, -32, -55, 18, 53, -82, 10, 105, -10, -86, 30, 2, 9, -42, 53, 78, 74, -11, 102, 67, 18, -42, -85, -7, 73, 21]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey5);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7FA568134806C9105C34D583C29871A41AE5CE04D352F794BBBC55C17CC3D7B2E48B2428828EE039A91A06CFBF22DBA03F23A99544AD69867843E16A8BBCB065F997601695DCE4DA9232998E7CFA9275FD14E9B5BE58653BB989CC8C93C323B9A2602029745C486376259619FE42C1DC969C5F23218132538C69A93E2C46029CAFBCB3A325C55A351897A58F95136EEE2494FA973744222FA873EEAD1E15360A868A656A3C665D51EC62012BA7C41A8A5BF8AD314E65E180BA4087E8D6B89D6623982F2B436A6758077463A37F0FFC47E55DE5DFB67D8B3F67F9F6BD7C9678E01B5950A89DB569E40DEBF8146983CC8", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-21, 53, 2, 108, -104, -18, 106, -116, 38, 5, 85, 99, -127, 104, 116, 107]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[55, 29, -27, 19, 115, 7, -117, -14, -83, -42, -113, 67, -113, 105, 44, -86]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[92, 86, -119, -66, -23, 21, -26, 98, 5, 124, -115, -73, 70, -121, -53, 94]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, -98, -79, -66, -23, -115, 78, -78, -14, 119, -15, 37, -7, 125, 108, 64, -52, 108, -50, -70, -50, -124, 55, 103, 38, -63, 125, 103, 75, -35, -128, -118, -21, 53, 2, 108, -104, -18, 106, -116, 38, 5, 85, 99, -127, 104, 116, 107]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-30, 32, 58, 86, 86, -128, -20, -56, -81, -62, 29, 12, -101, -90, 78, 72, -16, -117, -72, 36, 25, -47, 32, 103, 35, -56, 115, 123, 52, 109, -72, -27, -21, 53, 2, 108, -104, -18, 106, -116, 38, 5, 85, 99, -127, 104, 116, 107]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-118, -128, 37, -17, -92, 7, -72, -10, 20, 94, -119, -121, 45, -51, 7, 80]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-108, 50, -46, 47, -123, 74, -14, 23, 126, 26, -120, -91, 17, 43, 3, -88]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[95, 69, 92, -98, -74, 16, 11, -36, -39, 54, -115, 72, -99, -58, -7, -27]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[82, 32, 61, 100, -57, -29, -102, -12, -55, 125, 92, -38, -81, -57, 71, 93]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-111, -24, -45, -33, 47, 87, 81, 100, 57, 88, -114, 38, 61, -18, 63, -73, 61, 22, 98, -103, 18, 126, -70, 27, -127, 126, 88, 94, 31, -80, -98, -97, 95, 69, 92, -98, -74, 16, 11, -36, -39, 54, -115, 72, -99, -58, -7, -27]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[2, -58, 111, -117, 44, -23, 85, -14, 11, -77, 37, 89, 119, -36, 21, -78, 26, 88, -21, -40, 124, 20, -38, 29, -45, 11, -81, -26, 113, -127, 18, 87, 95, 69, 92, -98, -74, 16, 11, -36, -39, 54, -115, 72, -99, -58, -7, -27]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-93, -33, 44, -5, -18, -106, 69, 9, 13, -121, -85, -98, -45, -100, 33, -77, -96, -125, 25, -48, -112, 74, -43, -1, 101, 31, -75, -57, -71, -52, 44, -10, -25, -126, 15, 105, 30, 6, -89, 18, 16, -23, 24, 45, -8, 34, -18, -104, 73, -123, 5, 99, 84, 17, -9, 70, 90, 18, 44, 114, -90, 27, 118, 2, 20, -72, -83, -58, -97, -92, 89, -22, -28, 1, -30, -2, -127, 59, -71, -46, 70, 74, -88, 113, -114, -92, -13, 93, 124, -97, 69, 18, 82, 102, 108, -74, 95, 69, 92, -98, -74, 16, 11, -36, -39, 54, -115, 72, -99, -58, -7, -27]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-93, -33, 44, -5, -18, -106, 69, 9, 13, -121, -85, -98, -45, -100, 33, -77, -96, -125, 25, -48, -112, 74, -43, -1, 101, 31, -75, -57, -71, -52, 44, -10, -25, -126, 15, 105, 30, 6, -89, 18, 16, -23, 24, 45, -8, 34, -18, -104, 73, -123, 5, 99, 84, 17, -9, 70, 90, 18, 44, 114, -90, 27, 118, 2, 20, -72, -83, -58, -97, -92, 89, -22, -28, 1, -30, -2, -127, 59, -71, -46, 70, 74, -88, 113, -114, -92, -13, 93, 124, -97, 69, 18, 82, 102, 108, -74, 95, 69, 92, -98, -74, 16, 11, -36, -39, 54, -115, 72, -99, -58, -7, -27]");
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey22);
        java.lang.Class<?> wildcardClass33 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-93, -110, -96, 15, 109, -43, -119, 5, 88, 30, -11, 34, -98, 71, -20, -114]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-7, 68, 90, 40, 5, 61, -33, -38, 115, -119, 7, -2, -36, 113, 78, 91]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[20, -47, 100, 7, -80, 61, -73, -100, -121, 115, 13, 20, -6, -79, 85, 115]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[56, 73, 43, -104, -119, -33, 103, 116, 26, -30, -38, 19, 86, 21, -58, -113]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 10, -123, 72, -50, -46, 121, 35, -72, -111, -69, 107, 5, -15, -21, 38, -65, -37, 125, 25, -15, -99, -91, 69, -93, -117, -74, -18, 107, 67, 98, 110, 20, -47, 100, 7, -80, 61, -73, -100, -121, 115, 13, 20, -6, -79, 85, 115]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[25, -23, 48, -55, -40, -51, 31, -18, 21, -13, 16, 25, -105, 109, 40, -9, 24, -30, -116, -52, -44, 122, 87, 8, 1, 21, 78, 84, 89, 35, 43, 60, 20, -47, 100, 7, -80, 61, -73, -100, -121, 115, 13, 20, -6, -79, 85, 115]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-31, -67, -111, 22, 114, -8, 19, -50, -26, 11, 13, 55, 80, -64, 106, 119, 60, -70, -29, -113, -58, 57, 48, 36, -118, 53, 49, -57, -64, 97, 42, -125, 30, 76, -63, -70, -32, -102, -64, -29, 50, 59, 118, 59, 8, -56, -82, 85, -113, 83, 91, -115, 73, 71, -116, 122, -84, 69, -62, -42, -127, -88, 54, -3, -73, 100, 100, 90, 58, -115, 100, 99, -100, 10, -42, -85, 60, -107, -80, -7, 24, 70, -117, 64, -80, -103, 84, 72, -111, -11, -93, 26, 116, -51, -16, -80, 20, -47, 100, 7, -80, 61, -73, -100, -121, 115, 13, 20, -6, -79, 85, 115]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-61, -35, 86, 29, -7, 27, 15, -31, 40, -112, -116, -63, 41, -14, -23, -31, 40, 34, -34, 85, 42, 76, -124, -74, -23, -22, -26, 80, 82, -28, 46, 103, 20, -47, 100, 7, -80, 61, -73, -100, -121, 115, 13, 20, -6, -79, 85, 115]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-31, -67, -111, 22, 114, -8, 19, -50, -26, 11, 13, 55, 80, -64, 106, 119, 60, -70, -29, -113, -58, 57, 48, 36, -118, 53, 49, -57, -64, 97, 42, -125, 30, 76, -63, -70, -32, -102, -64, -29, 50, 59, 118, 59, 8, -56, -82, 85, -113, 83, 91, -115, 73, 71, -116, 122, -84, 69, -62, -42, -127, -88, 54, -3, -73, 100, 100, 90, 58, -115, 100, 99, -100, 10, -42, -85, 60, -107, -80, -7, 24, 70, -117, 64, -80, -103, 84, 72, -111, -11, -93, 26, 116, -51, -16, -80, 20, -47, 100, 7, -80, 61, -73, -100, -121, 115, 13, 20, -6, -79, 85, 115]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[83, -120, -8, 117, 92, 52, -38, 58, 18, -33, 100, 75, 89, -24, -21, -117, -73, 48, 11, -3, -107, -94, 72, -73, 23, 76, -36, -111, 103, -91, 65, 95, 125, 29, 78, -89, -18, -23, 17, -118, -128, -52, -124, -107, 41, 99, -28, -127, -43, -62, 54, -40, -34, 62, -9, 15, -104, 121, -6, -11, -110, -7, 42, -127, 118, 84, 15, 124, -65, 52, 76, -17, -104, 2, -40, -63, -82, 59, -6, 54, 81, 113, 20, -52, 127, 118, 69, -8, -43, -26, -119, 78, 116, -62, -6, 73, 20, -47, 100, 7, -80, 61, -73, -100, -121, 115, 13, 20, -6, -79, 85, 115]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("FACAB6DC355F38E816646A22348692CEA31A178D3B255FDFAFEE3D608B24F62ADA8663FEFB86892CF09E1527BB2E3088483BC4B0B05800D5BBA13DECD9C75BEB271DCBFAD51617FC8C975C9F0C2390A4BE2276225A121CEF51736635ADAB8E4D3F897BE94A7A3DBDB064449705D6225E", secretKey9);
        java.lang.Class<?> wildcardClass17 = secretKey9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-79, 120, -37, 82, 20, -95, -100, -36, 55, 15, 53, -83, -77, 2, 48, 28]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-72, -83, -21, -35, -89, -22, 95, -25, -84, 110, 70, 127, -99, 2, -21, -66]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, -83, -21, -35, -89, -22, 95, -25, -84, 110, 70, 127, -99, 2, -21, -66]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[62, -24, 79, 104, 94, -14, 70, 25, 65, 92, 71, -5, 41, 11, -10, -72, 38, 93, -118, 13, 87, -91, 44, 21, -92, 125, 91, -83, 20, 84, 25, 62, -79, 120, -37, 82, 20, -95, -100, -36, 55, 15, 53, -83, -77, 2, 48, 28]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey47);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey47);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey47);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey47);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey47);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[53, 38, 110, -15, -76, -124, -44, -73, 90, 11, 46, 116, 84, 16, -79, -63]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-122, -1, 86, 5, -95, -37, 40, -115, 53, 33, 88, 66, 36, 47, -59, -40]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-111, -98, 78, 43, -19, -46, -116, 123, -34, 103, 116, 80, -125, -23, -14, -110]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[51, 21, 115, -55, -92, -72, 79, 76, -58, -98, 97, -45, -77, -92, 34, 19]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[21, 38, -64, -99, 0, 82, -76, -27, -46, -127, -71, -49, -58, -27, -44, -99, -4, -14, 76, 17, 14, -76, 13, -97, -124, -69, 103, -25, 10, 51, -20, 28, -111, -98, 78, 43, -19, -46, -116, 123, -34, 103, 116, 80, -125, -23, -14, -110]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[17, -40, -126, -63, 67, -69, 111, -67, 54, -111, 120, 70, 77, -127, -109, -101, -112, 41, 14, 62, 31, -16, 62, -16, 46, 73, 54, -41, -70, -90, 17, -52, -111, -98, 78, 43, -19, -46, -116, 123, -34, 103, 116, 80, -125, -23, -14, -110]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "11D882C143BB6FBD369178464D81939B90290E3E1FF03EF02E4936D7BAA611CC919E4E2BEDD28C7BDE67745083E9F292" + "'", str25, "11D882C143BB6FBD369178464D81939B90290E3E1FF03EF02E4936D7BAA611CC919E4E2BEDD28C7BDE67745083E9F292");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-64, 72, -124, 32, -67, 65, -41, -102, 45, -109, -91, -124, 81, 56, -86, -91]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-43, -47, -108, 56, 122, -34, 35, -75, -42, 79, -116, -16, 24, 108, -59, 8]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[125, 40, -44, -10, -28, -99, -27, -118, -24, 48, -122, -9, -27, -54, 102, -22]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-85, 43, 104, 43, 15, 32, -20, 75, 76, 82, 0, -117, 23, 30, 34, 94]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[64, -51, 74, 52, -83, 93, -4, 67, -90, -116, -116, -62, 109, 63, 127, 120, -21, 56, -86, 16, -35, 92, 56, -86, -17, -43, 87, -98, 103, 8, -78, -36, 125, 40, -44, -10, -28, -99, -27, -118, -24, 48, -122, -9, -27, -54, 102, -22]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-40, 46, 111, -13, 71, -23, 4, 24, 49, 113, 116, 55, -56, -55, -55, -83, 18, 114, -97, 2, -47, 100, 37, -128, -100, -60, -73, 115, 29, -109, 7, -58, 125, 40, -44, -10, -28, -99, -27, -118, -24, 48, -122, -9, -27, -54, 102, -22]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-57, -37, 94, -37, 53, -94, 77, -59, -18, 107, 1, 126, -94, -52, -124, 25, -116, 94, 85, 109, -59, 17, -106, -76, -119, -59, -4, -32, -30, -106, -76, -118, 30, 72, -99, -126, -40, 8, 38, 80, -87, 109, -95, 56, -26, -10, -48, -42, -44, 5, 44, 99, 42, 42, -39, 95, -22, -124, -63, -88, 55, 46, -121, 60, 40, 49, -99, -60, -55, -74, 29, 51, -12, -62, -102, -3, -15, -116, 112, 37, 20, -58, 95, 41, -119, -33, 17, 43, -81, -21, -123, -24, 11, 83, -89, 18, 125, 40, -44, -10, -28, -99, -27, -118, -24, 48, -122, -9, -27, -54, 102, -22]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[72, -61, -108, 57, -11, 19, -36, -27, -46, -104, 36, -120, -12, -68, -98, -114, -57, 57, -45, 92, 9, -13, 9, 1, -71, 121, -34, 85, 102, 58, -65, -46, -128, 81, -119, 25, 119, 48, 50, 100, 22, -117, 57, 63, 54, 111, 84, -70, -19, -79, -116, -128, 99, 99, 27, 14, 66, 27, -8, -45, -119, -89, -8, -5, -94, 61, 122, -35, -110, 116, -102, -83, 50, -28, -53, -43, 80, 46, -59, -35, 61, -128, -85, 84, -83, 17, 97, -117, 35, -38, -85, 45, -60, 22, -56, -23, 125, 40, -44, -10, -28, -99, -27, -118, -24, 48, -122, -9, -27, -54, 102, -22]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[125, 40, -44, -10, -28, -99, -27, -118, -24, 48, -122, -9, -27, -54, 102, -22]");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("7CA49FB87215185DDB50BA3084C558F36D00F53E952403E977CB3632DE840FE960FDBC24442AAAB8B37E391826BC1C1E87980A92D112094033FD24B876593F2EF6182DB6D31A14F6B8E49CEEC74CA7003F717F754356175B555ECF25F8DE63FBA48E91FA121C2BA2CB8028DB8F7D15CD", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("B881F13A961670B198DC6CA3BB3D560BABA2B7CB718B496F3F1A0E617C15E7C8608322AE7D3EAC88B33D3CF50758BE0D7D64B126FBE6B32A7E20C6D37D78C3E2D70FD810BC544F2EE74BD41E0F5E008535E34AA1C301C96B96E3D7D73880E4FC41AD6A807184069FD259AE7100E08C68", secretKey8);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey24);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-64, 49, -91, 37, -27, -108, -9, -9, -99, 121, -93, -27, 25, -38, 70, 109]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[114, 119, -18, -106, -23, -17, -57, 97, 54, -110, -11, -79, -66, -95, -120, 60]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-62, 47, -122, 8, -40, -19, -29, -3, 13, 8, -93, -48, 43, 35, -127, 47]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, -39, 8, 39, 84, 90, -81, -70, -81, -60, 37, 84, 54, 19, -12, 62, 116, 62, -68, 80, -16, 46, -100, -86, -22, -49, 41, 93, -79, -95, 59, 89, -64, 49, -91, 37, -27, -108, -9, -9, -99, 121, -93, -27, 25, -38, 70, 109]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[58, 79, -54, -26, -61, 64, -43, -30, 108, -65, 41, 60, -115, 69, 108, -3, -95, -46, 9, 22, -102, 35, -16, -119, 110, 3, -91, -20, 127, 49, 114, 100, -64, 49, -91, 37, -27, -108, -9, -9, -99, 121, -93, -27, 25, -38, 70, 109]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[2, 10, 80, -119, -8, 18, -52, 3, 36, -73, -9, 34, 34, -111, 44, 20, 125, -117, 100, 34, -81, 77, -63, -67, -115, -34, -57, 8, -124, 1, 58, -124, -64, 49, -91, 37, -27, -108, -9, -9, -99, 121, -93, -27, 25, -38, 70, 109]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-48, 109, 26, -19, 65, -3, -101, 77, -48, 76, -120, 5, -33, 105, -19, 119]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[94, -96, 31, 98, 55, 99, -9, 73, 58, -38, -38, 108, -122, 118, -7, 119]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[94, -96, 31, 98, 55, 99, -9, 73, 58, -38, -38, 108, -122, 118, -7, 119]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[62, -50, 110, 22, 117, 76, -45, 111, 127, -42, -32, 57, 79, 92, -80, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-48, 109, 26, -19, 65, -3, -101, 77, -48, 76, -120, 5, -33, 105, -19, 119]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-77, 74, -61, 4, -7, 1, 32, 17, 92, 123, 84, 83, 115, 3, 88, -21, 79, -19, 120, -55, 113, -61, 102, 65, 2, 9, -123, 1, 100, -8, -47, -115, 70, -61, -47, -84, 80, 99, 90, -91, 104, -61, 23, 30, -82, -96, 24, 109, 16, -126, -90, 20, 41, 124, -84, -8, 99, -107, -6, -94, -12, -34, 51, -68, -43, 63, 36, 13, 64, -3, 118, 48, 31, -124, 101, -28, -14, -3, 16, 82, 23, -60, -104, -113, 65, 27, 17, 54, 120, -107, 57, -67, 120, -97, -14, -52, -48, 109, 26, -19, 65, -3, -101, 77, -48, 76, -120, 5, -33, 105, -19, 119]");
        org.junit.Assert.assertNotNull(byteArray31);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-47, 117, 94, -19, 52, -30, 86, 34, 68, 34, -106, 87, -70, 95, 95, -123]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-68, 94, 6, 33, -81, -126, -105, 64, 80, -74, -125, 90, -43, -97, -40, -110]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-121, 49, -16, 66, 92, 107, 22, -23, -63, 50, -108, 83, -104, 91, 33, -44]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[37, -80, -90, 45, -59, -101, 29, -104, 123, 88, -29, 46, -126, -44, 115, -40]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[126, 40, 47, -121, 98, -102, -14, -8, -72, 118, 80, 49, -70, 69, -98, 103, 6, 25, 111, -86, 56, 112, 58, -17, -109, 47, -87, -128, 120, -96, 9, 55, -121, 49, -16, 66, 92, 107, 22, -23, -63, 50, -108, 83, -104, 91, 33, -44]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-11, -23, -78, -50, -104, 43, -47, 59, 97, 43, 100, -127, -106, -27, -4, -64, 40, 49, 39, 63, 56, -104, 65, 100, 81, -80, -48, -118, 93, 80, 89, -22, -121, 49, -16, 66, 92, 107, 22, -23, -63, 50, -108, 83, -104, 91, 33, -44]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[22, 118, 104, -9, -64, -42, 48, -26, -121, -110, 89, -41, -85, -59, 117, -91, -55, 60, -79, -125, -107, 40, -110, 79, 88, 31, -60, -4, -70, 26, 21, -14, 99, -94, -86, 12, 94, -1, 61, -97, -111, -3, -65, -13, 57, 48, -76, -46, 73, 6, -39, -100, 54, 104, -113, 25, 16, 64, 11, 46, -99, -38, 29, -76, -117, -41, 21, -7, -65, 88, -10, 0, 6, -78, -106, 86, -13, 7, 44, -66, 32, 122, 37, -6, 17, 10, 46, 89, -34, -87, 98, -109, 76, -64, -114, 30, -121, 49, -16, 66, 92, 107, 22, -23, -63, 50, -108, 83, -104, 91, 33, -44]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-123, 10, 124, -23, -37, 64, 93, -6, 119, 77, -99, 24, 83, 28, -84, -92, -83, 23, 93, -97, 0, 75, 91, -69, -37, 62, -49, -119, 15, -75, -97, -97, -121, 49, -16, 66, 92, 107, 22, -23, -63, 50, -108, 83, -104, 91, 33, -44]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-46, -66, -83, -9, -91, 76, 113, -43, 9, 12, -103, 112, -77, -31, 31, -94, -77, 61, -33, 33, 40, -10, 43, -89, -102, 25, -52, 39, 2, 34, 58, 117, -121, 49, -16, 66, 92, 107, 22, -23, -63, 50, -108, 83, -104, 91, 33, -44]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey50);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey50);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey50);
        java.lang.Class<?> wildcardClass57 = secretKey50.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-3, 68, -55, -29, 91, 10, -15, 116, 3, 118, -112, -85, 48, 115, 55, 10]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-91, -112, -75, 104, 95, 59, 83, 124, -104, 0, 95, 76, -84, -36, 79, -44]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[8, -86, -59, -29, 53, -51, -22, 72, 75, -14, -78, -11, 122, 32, 119, -23]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[39, 17, -6, 118, 21, 77, -28, 125, -23, 13, -109, -33, 52, -29, 32, -114]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-52, -119, 98, -124, 64, -63, 32, -60, 58, 6, 3, 27, 55, -35, -14, 47]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-30, -5, 39, -127, 64, -81, -85, 117, -94, -121, 56, 7, -103, 112, -28, 111]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[116, 93, -74, -99, 113, -121, 111, -70, 101, 24, -44, -74, 84, -52, -95, -106]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[113, -10, -91, -81, -118, 17, 115, 79, -96, -119, -120, 19, -90, 45, 119, 33]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[89, -68, -33, 69, -18, -76, 49, -25, 105, -112, 122, -89, -63, -97, -75, 19]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-50, 63, 59, 11, -62, -17, 28, -29, 50, -84, 104, 20, 123, 100, 102, 78]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-19, 77, 1, 107, 41, -27, 92, -85, -108, -27, -89, -80, 31, 47, 105, -56]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[89, -68, -33, 69, -18, -76, 49, -25, 105, -112, 122, -89, -63, -97, -75, 19]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-97, -32, -106, 34, 27, 15, -2, -67, 81, 36, 35, 66, -107, 32, -42, 93]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-66, 115, -52, 17, -78, -84, -52, 7, 34, -109, -98, -11, -93, 102, -119, -53, 36, 22, 36, 119, 58, -61, 97, 99, 115, 65, -18, -108, -66, -48, 89, 57, -80, 2, 21, 115, 21, -63, 51, 25, 100, -19, 104, 49, 125, 77, 106, 27, -43, 99, 40, -109, -29, -21, -42, -4, 12, 99, -75, 85, -102, -113, 65, -88, -28, 10, -59, 68, 126, -28, -125, -70, 75, -86, -70, 50, 118, -79, -50, 96, 81, -1, -91, 66, 36, -115, -37, -8, 118, -32, 70, -121, -80, -18, -45, -86, -97, -32, -106, 34, 27, 15, -2, -67, 81, 36, 35, 66, -107, 32, -42, 93]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "BE73CC11B2ACCC0722939EF5A36689CB241624773AC361637341EE94BED05939B002157315C1331964ED68317D4D6A1BD5632893E3EBD6FC0C63B5559A8F41A8E40AC5447EE483BA4BAABA3276B1CE6051FFA542248DDBF876E04687B0EED3AA9FE096221B0FFEBD512423429520D65D" + "'", str5, "BE73CC11B2ACCC0722939EF5A36689CB241624773AC361637341EE94BED05939B002157315C1331964ED68317D4D6A1BD5632893E3EBD6FC0C63B5559A8F41A8E40AC5447EE483BA4BAABA3276B1CE6051FFA542248DDBF876E04687B0EED3AA9FE096221B0FFEBD512423429520D65D");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "BE73CC11B2ACCC0722939EF5A36689CB241624773AC361637341EE94BED05939B002157315C1331964ED68317D4D6A1BD5632893E3EBD6FC0C63B5559A8F41A8E40AC5447EE483BA4BAABA3276B1CE6051FFA542248DDBF876E04687B0EED3AA9FE096221B0FFEBD512423429520D65D" + "'", str6, "BE73CC11B2ACCC0722939EF5A36689CB241624773AC361637341EE94BED05939B002157315C1331964ED68317D4D6A1BD5632893E3EBD6FC0C63B5559A8F41A8E40AC5447EE483BA4BAABA3276B1CE6051FFA542248DDBF876E04687B0EED3AA9FE096221B0FFEBD512423429520D65D");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-80, -74, -118, 9, -98, 31, -5, -62, 59, -86, -19, 83, -22, 3, 62, 83]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[99, -98, -77, 84, -87, 125, 88, 12, -46, -117, -99, -34, -59, -111, -34, 90]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[23, -72, 83, 40, 117, -111, -73, -11, -83, -19, -53, 82, 95, -82, 87, -62, 13, -21, -85, -19, -95, -67, 81, -56, 82, -118, -68, 119, 4, 48, -100, 35, -80, -74, -118, 9, -98, 31, -5, -62, 59, -86, -19, 83, -22, 3, 62, 83]");
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("EAC72EF852CDB6957C3B3337E6AAFD898344A88D77B133A96575F0FEB6CF0963128C98F6465FFE174B01995E525881A246B950010C3B3FFF7E403973C3C9B01F417D856F9374C29863F9E7D0D560FCB83F86A08537994AB45AB171BA1516C64BE9700FFD6717E17102708CE6C175F0C61AF40BDC1F2B4CDC5AB3D06F00B10FC61D7ABB4EDA1D2188273BED2443A77CCCFC395CA3FA9031CE25EAA8E3FE6FC96AE723B2F0F1E0972E129CC50B23C986DD439104F2C841934C4FD047981A7EC8E383A490CDE1F2529B38D0BA929584B94DC2C8A22527897CF13C38B10D6DDB1D0C2D1892F255F35B002F69AEA221C52658", secretKey30);
        java.lang.Class<?> wildcardClass40 = secretKey30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[99, -66, 126, -86, -85, -33, 21, 94, -122, -29, 91, 102, -120, -128, 114, -21]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-27, 101, -39, -73, 61, -54, 84, 24, 29, 42, 95, -33, -81, 56, -126, 38]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[14, -52, -92, -29, 49, -107, -94, -46, 52, 1, 50, 17, -84, -77, 41, 77]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[80, 82, -33, -54, 65, -2, 16, 39, 34, -88, 53, 81, -6, 19, -101, -19]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-121, 43, -66, 111, -3, -37, 74, -40, 54, 106, 45, -98, 38, 22, 4, -18]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[121, 93, 48, 22, 126, 106, 108, 88, 90, 73, 109, 2, 35, -56, 56, 2]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[121, 93, 48, 22, 126, 106, 108, 88, 90, 73, 109, 2, 35, -56, 56, 2]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[115, -95, 92, -35, 51, 26, 16, -20, -98, -83, 67, -5, 27, 7, 97, -37, -86, 17, 8, -6, -96, -14, -91, -93, -9, -47, -116, 84, 39, -57, -96, 16, -121, 43, -66, 111, -3, -37, 74, -40, 54, 106, 45, -98, 38, 22, 4, -18]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[124, -82, -65, -56, -46, -15, -65, 71, -127, -121, -68, 57, -38, 52, 20, 8, 61, -37, -91, 116, -43, 70, 12, -106, -24, -19, 45, 115, -22, 90, -117, 88, -121, 43, -66, 111, -3, -37, 74, -40, 54, 106, 45, -98, 38, 22, 4, -18]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass24 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-110, 106, 121, -54, 6, -14, 126, 42, 49, 63, 47, 12, 75, 117, -79, -96]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[44, 54, 55, -13, 28, 90, -112, -55, 79, -66, -48, 54, 71, 112, -97, 112]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[44, 54, 55, -13, 28, 90, -112, -55, 79, -66, -48, 54, 71, 112, -97, 112]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-76, -64, -52, 36, -30, 78, 115, -88, -94, -78, -83, 82, 68, -45, -96, 64]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[87, -88, -114, 62, -82, -85, 18, 69, 70, 69, 35, -114, -83, 46, -7, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[117, 79, -95, 59, -13, 75, 9, -119, 14, 77, -123, -119, 80, 16, 107, -50, 65, -3, -128, -88, -99, 83, 106, 127, -112, -13, 111, -103, -40, -40, -97, -19, -21, 23, -76, -54, -80, 47, -16, -24, 29, 1, 73, 62, -85, 108, 63, -42, 125, -30, -80, -19, -54, 100, -26, -79, 46, -9, -125, 57, 13, 52, -28, 3, 98, -41, 16, 31, 121, -122, -10, 47, 89, -13, -47, 85, 46, 50, 80, 38, -41, -34, -98, 40, 57, -1, -41, -113, -90, 63, -89, -116, -63, -52, -24, 25, -76, -64, -52, 36, -30, 78, 115, -88, -94, -78, -83, 82, 68, -45, -96, 64]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[38, -59, -113, -112, 117, -5, 78, 21, -38, 6, 36, 51, 14, -42, 19, -96, -19, -78, 59, -71, 112, 45, -111, -85, 3, -44, -31, 43, -1, -89, -98, -95, -76, -64, -52, 36, -30, 78, 115, -88, -94, -78, -83, 82, 68, -45, -96, 64]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[49, -77, -10, -111, -123, -6, -124, -122, 118, 36, 0, -92, -8, -2, 121, -26, 123, 17, -92, 37, -76, -92, -34, -106, 51, 58, 75, -25, 93, 75, -16, 118, -31, -3, 25, -4, -63, 48, -58, 73, -25, 35, 45, 51, -86, -72, -7, 125, -61, -36, -114, 58, -60, -28, 121, -75, 67, -101, 94, 72, 58, -6, -104, 84, 125, -71, -42, 17, 117, -107, -48, -113, 80, -3, 10, 71, -11, -50, -58, 98, -106, -114, 88, 13, 98, -49, 60, -13, 8, -127, 65, 22, 107, -98, -57, 35, -76, -64, -52, 36, -30, 78, 115, -88, -94, -78, -83, 82, 68, -45, -96, 64]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-102, -20, -39, -101, 34, -111, 53, -112, -91, 46, 81, -41, -61, -73, 35, -11]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-111, -34, 8, 55, -98, -49, 111, -50, -38, 110, 106, 33, 61, 97, 125, -4]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-65, -54, -35, -11, -45, 85, 26, -66, -34, 42, -85, 107, -51, -24, 79, -58, 11, -21, -25, 81, 37, -81, 87, -12, 20, -39, -27, 29, 111, 63, 114, -116, -102, -20, -39, -101, 34, -111, 53, -112, -91, 46, 81, -41, -61, -73, 35, -11]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-95, -102, 113, -26, -51, -43, 80, 12, 76, -89, 43, -72, -88, -126, -37, 22, 80, -47, -1, -108, -123, -45, -119, -90, 118, 104, -1, 5, -101, 37, 5, -72, -102, -20, -39, -101, 34, -111, 53, -112, -91, 46, 81, -41, -61, -73, 35, -11]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E1967767FBCA9187364B14093D005B637DBE91B2976363574232CE85116F01D166B47891C81BDBC9F77F8848CC39E71474A928EB91D881CDF9EC4DDE7252AA9A435EE1BDE8B240F21A1D1B4FFE75996226C1CD2BD742FFA9ABCF23870D8001A51036471E38BC7ED00A707B277F1A2A85EF0F14916F4C16777ECF2D34D7B4D2FF1AF4CBBADF4C95C01B48726F27A04FD1A7B178BF9E45868E2CA232F29FFDC5E005017B2E23B8CD5D8CC1C102CC4BF9A9F32B22A9F474104BFC0E8CB9863C7DB708EF3F149A810CEEEE2FE64315F32241590357462707D8F48DC82B9D18378750266F61B97521CE0AB6AF87A58E2585C", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("3D515EE06FD2B87EB56EDD7A17F930C8C9A116BF7E8E782A6D14839A271125D9B5FC655EC15E6D8300FCA04D3C6D0FED762E5C605835DF03D21B87CED4B3E47704CCC808EE82D5B5C3794D5FA68BB5C1375AB1051056C084515BE83D5CC6B52F53A580EFF2E94059A29ED571243449A3534724152DF435FA7BD77C7FB3D7CF61936D6C263DB7E709A5FFA217F4FDF5F0A114BE8A02B9DFCB1658D1151B041BDFBE90F0F1EA0B760D1F5BB5B4602BE3377B1A950C708A014681E99D334CA283946B78169ABFAB3EA68076DD682DF557CF47210A137DD2F704594CFB5EE4E9001B3D3107A050F8E604ACFE4429DEB1AC96", secretKey5);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey28);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[48, 90, -113, 52, 81, 20, -62, -22, 102, -90, 88, -27, 30, 44, -23, -118]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-95, 48, 54, -101, -27, 50, -98, -56, -44, 14, -69, 23, -48, 124, 88, -12]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[43, 5, 55, 97, 10, -2, 78, 13, 32, 91, 48, -115, -50, 22, -104, 110]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -23, 114, 28, -111, 58, 97, 30, 49, -105, 110, -94, 25, 59, 102, -40]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[24, -37, -43, -48, 20, -73, -90, -47, -82, 36, 15, 76, -10, -88, 32, -50]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[113, 97, 78, 39, 116, -76, 122, 104, 104, 127, 70, 93, -13, -98, 98, 90, 112, 18, -80, 53, -51, -57, 72, -102, -67, 87, 30, -32, -118, 7, -58, 42, -54, -23, 114, 28, -111, 58, 97, 30, 49, -105, 110, -94, 25, 59, 102, -40]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-98, -77, -101, -5, 9, -39, 75, 80, -44, 93, 67, -43, 29, -21, -53, 68, 15, 23, 24, -66, 49, -49, 2, 52, 5, 26, -19, -118, 63, 92, -97, -98, -54, -23, 114, 28, -111, 58, 97, 30, 49, -105, 110, -94, 25, 59, 102, -40]");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.Class<?> wildcardClass16 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[127, 104, 118, -92, -69, 13, 0, -84, -50, 89, -6, -14, -74, 67, 116, 120]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-101, 109, -35, -31, 106, -117, -82, 46, 68, -80, 41, 112, -104, -62, -90, -56]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[18, -10, -108, 66, -74, 62, -44, 34, -105, 81, 26, -8, -63, -107, 19, -17, 99, 11, 39, -37, 11, 22, 22, -16, 122, 74, 24, -73, -39, -123, -96, -31, 23, -112, -61, 76, 111, -47, 81, 23, -78, -47, 114, 19, -15, 7, 104, -2, -18, -76, 12, -65, -128, 27, 41, -52, 29, -52, 74, 78, -28, -104, 94, 118, -89, 13, 93, -52, -119, -13, 58, -70, -36, 65, -74, -32, -20, 117, -21, -104, 14, 19, 17, 119, -111, 113, 37, -32, 7, -58, 13, 88, -99, 24, 25, -59, 127, 104, 118, -92, -69, 13, 0, -84, -50, 89, -6, -14, -74, 67, 116, 120]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[60, 87, -122, 114, -10, 102, -81, 67, 118, -77, 121, 49, 71, -85, -10, -107, 78, 1, 127, 14, -76, 21, -23, -86, 125, 79, 114, -6, 17, -111, 78, 119, 127, 104, 118, -92, -69, 13, 0, -84, -50, 89, -6, -14, -74, 67, 116, 120]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[70, 19, 19, 44, 109, 0, -54, 60, 0, -57, -79, -34, -82, 82, -42, 10, -96, 90, -90, -62, -19, 125, -7, 93, 15, -122, 17, 66, 66, -33, 12, -43, 56, 15, 102, -123, 14, -13, 63, -49, 26, 65, -69, 93, 34, 52, 9, -54, -81, -89, 7, 99, 112, 36, 68, -66, 73, 29, 120, -73, 51, -8, -39, -117, -95, 80, -5, 48, 35, -55, -58, -106, -4, -23, -5, -66, 54, 13, 29, 18, 108, -49, 9, -78, -44, -97, -2, -4, 107, 95, 98, -41, 98, -1, -17, -49, 127, 104, 118, -92, -69, 13, 0, -84, -50, 89, -6, -14, -74, 67, 116, 120]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-101, -88, 32, -43, 45, 102, 5, -23, -24, -82, -93, -103, -65, 91, 34, -46, -35, -107, 11, -72, -64, 101, -103, 104, 1, -91, -113, 113, -55, -120, -74, -118, 127, 104, 118, -92, -69, 13, 0, -84, -50, 89, -6, -14, -74, 67, 116, 120]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9BA820D52D6605E9E8AEA399BF5B22D2DD950BB8C065996801A58F71C988B68A7F6876A4BB0D00ACCE59FAF2B6437478" + "'", str15, "9BA820D52D6605E9E8AEA399BF5B22D2DD950BB8C065996801A58F71C988B68A7F6876A4BB0D00ACCE59FAF2B6437478");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("C718B4A2C36E882A21FF0D9AFADE2A77", secretKey23);
        java.lang.Class<?> wildcardClass35 = byteArray34.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-99, 117, -9, 67, 70, -16, -48, 70, -63, 30, -102, 72, -87, -45, 17, 116]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[80, -94, -61, -79, 53, 103, 51, 90, -116, -69, 39, -44, -23, 46, 105, 107]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-106, -38, -9, 68, -41, 60, -16, -108, -28, 96, -55, 127, -7, -32, 101, 21]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-93, -84, 70, 118, -93, 106, -34, -36, 75, -101, 58, -40, 28, -120, -111, 29]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[5, -85, 28, 101, -65, -74, 23, 14, 39, -120, -22, 5, -110, 7, -97, 119, -53, 2, -71, 25, -104, -70, 125, 21, 77, 85, 76, 59, 12, 52, 3, -51, -106, -38, -9, 68, -41, 60, -16, -108, -28, 96, -55, 127, -7, -32, 101, 21]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-46, -98, 0, 50, -89, 108, -38, -89, 120, 5, -118, -62, 57, -70, 29, -39, 127, -22, 11, -56, 76, 92, 18, -81, -43, -63, 50, 14, -55, -41, 44, 13, -106, -38, -9, 68, -41, 60, -16, -108, -28, 96, -55, 127, -7, -32, 101, 21]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-23, 57, 3, -4, -78, 78, -26, 82, -57, 27, 123, -52, -83, 48, 104, -52, 32, 87, -31, -55, 7, 85, 117, -104, 19, 98, 80, 80, 80, 30, 124, -112, 99, 48, -39, 20, 11, 112, -62, 49, 67, -38, -45, 91, -127, -81, -40, -120, 127, -118, 112, -66, -20, 20, -119, 117, -68, -84, -34, 123, -67, 93, -120, -101, 26, 68, -39, 41, 24, 37, -12, -84, 81, -52, 65, 55, -37, -82, 87, -127, 76, -68, -122, 36, -12, 46, -43, 51, 66, -70, 38, 111, -3, 61, 71, -31, -106, -38, -9, 68, -41, 60, -16, -108, -28, 96, -55, 127, -7, -32, 101, 21]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-21, -125, -105, -64, 49, -96, 29, 74, -20, 101, -122, 17, -38, -117, 73, 80, 63, 76, 49, -38, -21, 2, -107, 119, -75, 29, -75, -75, 17, 119, 115, 64, -106, -38, -9, 68, -41, 60, -16, -108, -28, 96, -55, 127, -7, -32, 101, 21]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[78, 115, -54, 31, -84, 83, 75, 26, 36, 19, -30, 21, 86, -116, -56, 17, -112, -100, 58, -111, 33, 64, 83, -6, -28, -28, 18, 55, 89, 122, 97, -47, -120, -69, 105, 34, -127, -55, 47, -16, -127, -21, 87, -79, 24, 68, 65, -2, -87, 44, -35, -25, 116, 118, 87, -78, 116, -4, -107, 32, 26, 74, 86, 103, -34, 40, -75, -85, 82, -8, -77, -52, -77, 56, 67, 97, 66, 55, 94, 109, 7, 68, -63, 117, -22, -32, 55, 119, -73, 102, 85, -38, 71, -45, 121, -17, -106, -38, -9, 68, -41, 60, -16, -108, -28, 96, -55, 127, -7, -32, 101, 21]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-82, -52, 14, 2, 109, -116, -81, 5, 115, 51, -36, 80, -57, 6, -19, 99, -20, -99, 79, 36, 97, 72, -87, -109, 87, 20, -128, 111, 67, 92, 19, -64, -106, -38, -9, 68, -41, 60, -16, -108, -28, 96, -55, 127, -7, -32, 101, 21]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("244E475790A6CE1C974EDAF81475E5C1E70C1547FB163F8FBF1E96A353D87844A51D2CCD3A3F2E160D006EC3DCE01998", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass5 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 1, (byte) -1 };
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey38);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey38);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey38);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("EAC72EF852CDB6957C3B3337E6AAFD898344A88D77B133A96575F0FEB6CF0963128C98F6465FFE174B01995E525881A246B950010C3B3FFF7E403973C3C9B01F417D856F9374C29863F9E7D0D560FCB83F86A08537994AB45AB171BA1516C64BE9700FFD6717E17102708CE6C175F0C61AF40BDC1F2B4CDC5AB3D06F00B10FC61D7ABB4EDA1D2188273BED2443A77CCCFC395CA3FA9031CE25EAA8E3FE6FC96AE723B2F0F1E0972E129CC50B23C986DD439104F2C841934C4FD047981A7EC8E383A490CDE1F2529B38D0BA929584B94DC2C8A22527897CF13C38B10D6DDB1D0C2D1892F255F35B002F69AEA221C52658", secretKey38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey38);
            org.junit.Assert.fail("Expected exception of type javax.crypto.IllegalBlockSizeException; message: Input length must be multiple of 16 when decrypting with padded cipher");
        } catch (javax.crypto.IllegalBlockSizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 1, -1]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0101FF" + "'", str4, "0101FF");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0101FF" + "'", str5, "0101FF");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0101FF" + "'", str6, "0101FF");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0101FF" + "'", str7, "0101FF");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0101FF" + "'", str8, "0101FF");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-90, -38, 84, 69, 86, 121, 49, 16, -41, -26, -16, 14, 49, -23, 16, -59]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-42, 88, -85, 53, 104, 85, -102, 112, -68, -69, -47, 125, -120, -115, 44, 37]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-105, -95, 23, -90, -46, -26, 17, -112, -24, -78, 34, -121, 89, 120, 108, 23]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-94, -69, 80, -78, 53, -61, -127, 123, 53, -74, 61, -84, 49, -106, 15, 110]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[43, -70, -89, -49, -46, 74, -67, 10, -116, 93, 93, 127, 10, -35, -127, -20]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-119, 37, 120, 92, -68, 16, 35, -97, 96, 80, 80, -47, -69, 116, -81, 127]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-119, 37, 120, 92, -68, 16, 35, -97, 96, 80, 80, -47, -69, 116, -81, 127]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[97, -105, -100, 111, -4, 67, -121, 37, -102, 117, -103, 118, -38, 114, 101, -46, 82, 83, -25, -41, -120, 91, -117, -13, 11, -14, -69, -59, 58, -32, -35, -79, 43, -70, -89, -49, -46, 74, -67, 10, -116, 93, 93, 127, 10, -35, -127, -20]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-120, -48, 46, -48, -57, 13, 8, 25, -110, 70, 11, 14, 105, 8, 79, 91, -89, 70, 105, 59, -81, 19, -3, 112, -110, 35, 74, 25, -93, -104, -23, 52, 43, -70, -89, -49, -46, 74, -67, 10, -116, 93, 93, 127, 10, -35, -127, -20]");
        org.junit.Assert.assertNotNull(byteArray46);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6EA4E116455BC7AF3FB5BF064D6F874CB5F555408DB9AD9F9733DFD99DAC4D7FEEE704EFF20D5601E11B02E83309E581", secretKey7);
        javax.crypto.SecretKey secretKey15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey15);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[80, 61, -18, -21, -77, 69, -45, 33, 110, -41, 28, 117, -98, -60, 52, 70]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-36, -45, -121, 114, 28, -39, -83, -120, -58, 14, 26, -17, -94, 39, 79, 49]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-44, 94, 21, 3, 84, 101, 83, -109, -26, -43, 95, 88, 98, 116, -15, -39]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[80, 61, -18, -21, -77, 69, -45, 33, 110, -41, 28, 117, -98, -60, 52, 70]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-51, 32, 78, -67, 16, -69, -80, 71, -59, -63, -110, -28, 48, -118, -66, -113, 58, 106, -2, 110, -118, -36, -80, -126, 60, -32, 90, 71, 124, 113, -34, 37, 101, -30, 82, 32, -7, -27, 110, 101, 87, 32, 110, -104, -4, 118, -114, 44, 123, 54, -51, 37, 58, 22, -18, 77, -44, 49, -20, -127, -117, 63, -43, 117, -34, -80, -69, -9, 47, 103, 109, 91, 2, 113, 29, -8, 95, -24, 18, -35, 25, -60, 73, 60, -125, -124, 122, 70, 36, 9, 120, -69, -103, -83, -59, -41, 80, 61, -18, -21, -77, 69, -45, 33, 110, -41, 28, 117, -98, -60, 52, 70]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[9, -98, 21, 64, -28, -58, 6, -17, -5, 67, 24, -9, -57, -31, -92, 99, -8, 45, -74, 31, 59, -128, 40, 15, -8, -42, -53, -83, 42, 61, 6, -65, 80, 61, -18, -21, -77, 69, -45, 33, 110, -41, 28, 117, -98, -60, 52, 70]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-50, 19, -53, -53, 100, -19, 114, 73, -10, 51, 55, 12, -59, -49, 65, -80, 122, -8, 116, -63, -127, -18, -11, 67, 112, 110, 7, 102, 27, 55, 18, 94, -86, -87, -94, 18, -67, -72, 26, -82, 94, -41, -72, 7, 109, -9, -73, 110, -45, 54, -74, 67, -17, 2, -117, 125, -47, 18, 86, -65, -3, 75, 34, -7, -82, 66, 73, 87, -79, -103, -1, 52, 89, 66, -42, 56, -49, -87, 61, 56, -65, -19, -125, 59, 45, 87, 104, 106, -102, -8, 89, 91, 0, -51, -29, 102, 80, 61, -18, -21, -77, 69, -45, 33, 110, -41, 28, 117, -98, -60, 52, 70]");
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-20, 60, -14, 56, -114, -96, 104, -70, -35, -52, -13, 89, 13, 37, 34, 35]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[81, -63, 27, 57, -15, 110, 59, 28, 75, -37, 44, 98, 89, -36, 94, 28, -39, -23, 33, 105, -95, 26, 40, 49, 112, 119, 47, -73, -5, -100, -55, -104, -45, 112, -123, -2, -120, 117, 51, -99, -125, 5, -46, 56, -61, -18, 42, 32]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-40, 116, -111, 7, -66, 111, 27, 41, -60, -76, 92, -81, -111, -69, -6, -10, -5, -87, -22, 100, 87, 56, -73, -11, 76, -23, 101, 72, 7, -44, 8, 31, -64, -91, 90, -12, 14, 62, 36, 73, 114, 92, 86, 1, 56, -12, -95, -12, -80, -20, 97, -65, 56, 32, -75, 121, -15, 21, 74, 16, -96, -8, -59, 100, -14, 82, -65, -26, 72, 36, 109, 14, -93, 65, 56, 64, -116, -52, 87, 99, 5, -28, -100, -107, 85, -86, -92, 125, -78, -27, -79, -73, 110, 78, -11, -10, -45, 112, -123, -2, -120, 117, 51, -99, -125, 5, -46, 56, -61, -18, 42, 32]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[109, -89, 33, 55, -48, 35, 95, 61, 46, 45, -125, -122, -76, -76, 37, 74, -42, -46, -92, -41, -9, -62, -117, 40, -84, -116, 120, -10, -28, -22, -89, 61, 113, 127, -87, -54, 37, 46, -71, -32, -71, -97, -98, 23, 98, 20, -95, -92, 24, 74, -127, 97, -65, 90, -51, -11, 113, 21, -100, 72, -46, -114, -6, -68, 57, -108, 96, -35, 0, 6, -45, -54, -59, 117, 113, -9, -44, 4, 30, -98, 61, 23, 24, -25, -93, 83, -88, -45, 36, -104, 18, -98, 105, -55, 91, 43, -45, 112, -123, -2, -120, 117, 51, -99, -125, 5, -46, 56, -61, -18, 42, 32]");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey51);
        java.lang.Class<?> wildcardClass59 = secretKey51.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[122, 2, -66, 82, -2, 82, -94, -111, 63, -32, 97, -15, 44, -113, -6, 38]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, -13, -12, 120, 18, -101, -46, 28, 96, -31, -61, 109, 5, -31, -112, 49]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[112, 23, 83, 99, -49, 93, -25, -63, 63, -14, -36, -75, -32, -35, 84, 115]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-117, 113, -57, -103, -80, 71, -7, 48, 75, -39, -1, -27, -98, 20, 9, -40]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[44, 2, -61, 121, 49, 127, 28, 16, -66, -10, -51, -51, -69, -47, 80, -128]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-89, 100, 106, 30, 104, 75, 59, 120, 11, 16, -117, 79, -99, -103, 112, 99]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-46, 0, -119, 30, -42, -94, -36, 4, -32, -35, -19, -42, 56, 13, 55, 110]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-67, 124, 72, 98, 39, -56, -28, 57, 59, 109, -119, 81, -101, -78, -67, -84]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[59, -55, -68, -82, -76, 39, 114, -80, -86, -19, -7, -36, 28, 96, -45, -13]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[73, -21, -88, -103, 30, -122, 12, -91, 89, 92, 18, -3, -81, -114, -84, 3]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-70, -35, -103, -16, -26, 25, 61, -104, 98, 2, 114, -101, -58, 113, 78, 82]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[59, -55, -68, -82, -76, 39, 114, -80, -86, -19, -7, -36, 28, 96, -45, -13]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-60, -3, 42, -49, -14, 18, -76, -30, 105, 70, 68, 89, 47, 57, 119, -106, 108, -74, -70, 123, 3, 83, 32, -105, 54, -93, -44, 66, 115, 30, 90, 9, 59, -55, -68, -82, -76, 39, 114, -80, -86, -19, -7, -36, 28, 96, -45, -13]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[33, 101, 30, 52, 96, -7, -40, -82, 81, -17, -87, -17, -126, 1, 114, 123]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-51, -59, 65, -44, 110, -119, -64, -77, 19, 86, -39, 118, -84, 35, 50, 44]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 76, -40, 6, 31, 104, 41, -79, -109, 89, 47, 30, 85, 39, 50, -7]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[114, -106, -21, 55, 31, -90, 104, -71, -94, -33, -106, -38, 75, 99, 117, -108]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[73, -39, -92, -14, 86, -70, -87, 50, -27, 52, -14, -102, -8, -90, -20, -55, 102, 121, -81, -8, -1, -20, 101, 116, -36, 16, 65, 11, -54, -52, 124, -75, 1, 76, -40, 6, 31, 104, 41, -79, -109, 89, 47, 30, 85, 39, 50, -7]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[102, 10, 83, -114, -47, -100, 91, 118, -122, -11, 106, -19, -72, 114, 118, 70, 33, -64, -42, 95, -50, 82, 98, -14, -72, 1, -90, -87, -103, 10, 1, -54, 1, 76, -40, 6, 31, 104, 41, -79, -109, 89, 47, 30, 85, 39, 50, -7]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[105, -117, -84, -53, 87, 54, -56, 82, -11, 46, -48, -93, -13, -76, -85, 102, 84, 51, -40, -15, -57, -62, -44, -6, -1, 13, 42, 2, 109, 29, -112, 77, 108, 61, 40, 115, -106, 73, -111, -4, 99, -38, -56, -25, -63, -92, 62, 44, -123, -87, -125, 94, -16, -124, 127, -11, 98, 16, -125, 40, 38, 116, -102, -45, -76, 109, -30, 109, 64, -106, 7, -50, 90, -72, -121, 83, -33, 4, -105, 107, -126, 76, -10, -98, -59, -126, -42, 47, 53, -113, 41, 123, 93, 21, 99, 46, 1, 76, -40, 6, 31, 104, 41, -79, -109, 89, 47, 30, 85, 39, 50, -7]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-44, 88, -71, 16, -75, -54, -118, 98, 91, -61, 121, 44, 86, 45, 81, -112, -74, 109, -128, -82, -111, 120, 98, 87, 64, 81, -107, -68, -45, -44, 98, -94, 69, 53, -93, 32, -97, -95, 84, 97, -12, -25, -41, -18, 43, 12, 29, 42, -104, 73, -60, 17, -69, -128, -81, 11, 50, 59, 74, 24, -122, -5, 2, -115, 99, 52, -45, 44, -80, -17, 120, 51, -55, -97, 10, 76, 66, -125, -22, 89, 75, 33, 104, 19, 79, -49, 19, 78, -121, -78, 65, -126, 126, -82, -108, 85, 1, 76, -40, 6, 31, 104, 41, -79, -109, 89, 47, 30, 85, 39, 50, -7]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.Class<?> wildcardClass26 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-121, 77, 45, -52, -56, -96, 8, -64, 9, -57, 49, -54, -91, 38, -39, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[2, -7, -88, 1, -68, -128, -96, -60, 9, 70, 114, -3, -59, 102, -54, -119]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[48, -53, -26, 83, 63, 10, 45, 31, -101, 126, 14, -123, 27, -88, 103, -79]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[81, 92, -26, -55, -79, -13, -95, 46, -114, 98, 5, -91, 31, -110, 104, 56]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-86, 67, -124, -110, 117, -54, 55, 101, -107, 44, -60, 28, 111, -103, -77, -114, 46, -95, -111, 30, -106, 12, 109, 64, 72, -71, 81, 13, 116, 31, -78, 55, 48, -53, -26, 83, 63, 10, 45, 31, -101, 126, 14, -123, 27, -88, 103, -79]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[66, 11, 29, 73, 42, -71, 42, 50, -79, -108, -66, 127, -82, 77, -103, -32, 62, -78, 60, -23, -97, -95, 90, 113, 37, -91, -59, -119, 32, 36, 38, 44, 48, -53, -26, 83, 63, 10, 45, 31, -101, 126, 14, -123, 27, -88, 103, -79]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "420B1D492AB92A32B194BE7FAE4D99E03EB23CE99FA15A7125A5C5892024262C30CBE6533F0A2D1F9B7E0E851BA867B1" + "'", str25, "420B1D492AB92A32B194BE7FAE4D99E03EB23CE99FA15A7125A5C5892024262C30CBE6533F0A2D1F9B7E0E851BA867B1");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey37);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[76, -5, -107, 120, 93, -111, 38, -88, -67, 27, -6, 13, -60, 68, 88, 110]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[28, 77, -51, -20, 17, 68, -87, -77, 80, -117, -10, 101, 42, 111, -28, -20]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-42, -31, 52, -3, 44, -69, 45, 106, -38, 49, -72, -63, 38, 2, -90, 48]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, -43, 112, -119, -13, 26, -52, -90, 13, 4, -87, 91, 75, 100, 36, 80]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[24, 100, 82, -125, 23, -79, -7, 34, 107, 89, -63, 94, 87, 21, -70, -57, 103, 64, -10, -128, 74, -100, 47, -28, 60, -12, -99, -128, -42, 122, -33, 85, -42, -31, 52, -3, 44, -69, 45, 106, -38, 49, -72, -63, 38, 2, -90, 48]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[60, 61, 8, -64, 79, 10, 125, -106, -33, 113, 33, 58, -36, -64, -35, 11, 51, 59, 98, 84, -27, 10, 93, 115, 93, -9, -128, 90, 0, 62, 112, -91, -42, -31, 52, -3, 44, -69, 45, 106, -38, 49, -72, -63, 38, 2, -90, 48]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[127, 97, 105, -62, -106, -33, -49, -91, 105, -93, -44, -40, 44, -69, 84, -75, -90, 99, -58, 82, -88, 59, -16, 48, 17, -120, -4, -118, -67, -45, -111, 119, -116, 109, 54, 86, 76, 97, 54, 7, 12, 34, 63, 33, 46, 93, -74, -32, 40, -50, -62, 35, 70, 52, 36, -78, -40, -88, 111, 84, 119, 31, 85, -9, 88, -6, -45, 123, 116, -57, 52, 36, 123, 76, 29, -7, -84, 44, 34, -97, 26, -10, -109, 110, -34, 5, 21, 8, -34, -126, 38, 125, 39, -6, 28, 13, -42, -31, 52, -3, 44, -69, 45, 106, -38, 49, -72, -63, 38, 2, -90, 48]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[65, 47, 38, 87, -89, 51, -59, -8, 93, -126, 4, 85, 99, -10, 46, -66, -23, -25, 84, -98, -80, -78, -127, 4, -56, 114, 43, -12, 30, 52, -70, -95, -42, -31, 52, -3, 44, -69, 45, 106, -38, 49, -72, -63, 38, 2, -90, 48]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "412F2657A733C5F85D82045563F62EBEE9E7549EB0B28104C8722BF41E34BAA1D6E134FD2CBB2D6ADA31B8C12602A630" + "'", str29, "412F2657A733C5F85D82045563F62EBEE9E7549EB0B28104C8722BF41E34BAA1D6E134FD2CBB2D6ADA31B8C12602A630");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[25, 91, -95, -96, -83, 74, -127, -10, 93, 93, 122, -92, 51, 30, -69, -66]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[40, -73, -16, 113, -85, 110, 33, 23, -94, 54, -21, -56, -51, -47, -16, 73]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[40, -73, -16, 113, -85, 110, 33, 23, -94, 54, -21, -56, -51, -47, -16, 73]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[15, -52, 80, 31, 14, -45, -42, 116, -30, -65, 87, -87, 42, -85, -25, 119]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[25, 91, -95, -96, -83, 74, -127, -10, 93, 93, 122, -92, 51, 30, -69, -66]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-32, -15, 26, -102, -60, 45, 100, -104, 106, -1, -64, 15, 58, -120, 53, 13, -81, 123, 20, 83, 86, 73, -114, -69, 69, -86, -8, 21, -78, 31, -63, 102, 4, 93, -91, 63, -60, 62, -90, -101, 7, 58, 110, 34, -46, -82, 112, 74, 91, 43, 77, 47, 75, 98, -99, 125, -78, 68, -73, 89, -83, -78, -124, -22, -69, -45, 18, -50, 31, -16, -84, 122, -2, -113, 63, -23, -63, 114, 100, 36, -29, 106, 67, -98, -116, 6, 104, -21, -91, -71, 118, -71, -48, -75, 93, -33, 25, 91, -95, -96, -83, 74, -127, -10, 93, 93, 122, -92, 51, 30, -69, -66]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[11, -74, -117, 122, -107, -105, 39, -113, -49, -37, 56, -67, 22, 1, -39, -109, -101, 110, -85, 91, 104, -45, 97, 110, -4, 36, -39, 61, -12, 84, 108, 50, 3, 103, -122, -67, -41, 39, -8, 76, -102, -26, -15, 45, 116, 4, 118, 52, 80, -4, -45, -88, -71, -116, -87, -15, 8, 52, -111, -13, -115, -117, 35, 39, -9, -2, 53, 29, -23, -122, -52, 47, -93, 31, 96, -115, -24, 88, -100, 45, 86, -17, 15, 116, -111, 18, 24, 85, 81, 77, -14, 7, -92, -24, -82, 115, 25, 91, -95, -96, -83, 74, -127, -10, 93, 93, 122, -92, 51, 30, -69, -66]");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey48);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey48);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey48);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey48);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey48);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey48);
        java.lang.Class<?> wildcardClass58 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[23, -126, -2, -90, 73, 0, 71, -75, -91, -7, 94, -19, 11, 94, 11, -19]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[105, -2, -91, 40, -69, -12, -109, -43, -9, 8, -105, 63, 54, 37, -51, -86]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[37, -60, 98, -119, 76, -7, 10, 121, 43, 31, -112, -117, -28, 109, 13, 6]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[53, -5, 52, -82, -28, 111, 120, 77, -36, -125, 114, -40, -25, 47, -62, -39]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-127, 18, -34, 50, 49, -119, -74, 35, 51, 41, -36, 35, -15, 84, -77, 0]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-40, -65, -80, -117, -72, -43, 44, -6, -78, -91, 53, 114, -67, -78, 68, -56]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-40, -65, -80, -117, -72, -43, 44, -6, -78, -91, 53, 114, -67, -78, 68, -56]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[95, -86, 112, 115, 19, -32, -88, -109, -8, 113, -5, 100, -77, 63, 51, -68, -28, 64, 92, 78, -70, -111, -61, -120, -126, 36, -90, -25, 40, 88, -53, -63, -127, 18, -34, 50, 49, -119, -74, 35, 51, 41, -36, 35, -15, 84, -77, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-77, -57, -62, -8, 19, 94, 85, 22, 6, -105, 125, -61, 125, -10, 81, 98]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[122, -108, -25, 31, 58, 54, 38, -44, -80, -22, 36, -31, 67, 44, -92, -11]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[45, 119, 34, -88, -21, 101, -83, -7, 73, -53, -79, -34, 104, 18, 93, -31]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-77, -57, -62, -8, 19, 94, 85, 22, 6, -105, 125, -61, 125, -10, 81, 98]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[113, 78, 58, 65, 65, 78, 78, -107, -7, 13, -35, -123, -45, 97, 6, 104, 43, 113, -16, 80, 51, 14, -17, 111, -37, -52, 46, -67, 93, 123, 112, 21, -77, -57, -62, -8, 19, 94, 85, 22, 6, -105, 125, -61, 125, -10, 81, 98]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[64, 22, 55, -10, -27, -47, 20, -112, 125, 109, 16, 23, -104, -63, 52, 7, 77, 62, -22, -12, -116, 6, -52, 11, -90, -35, 85, -80, 120, 104, 88, 108, -77, -57, -62, -8, 19, 94, 85, 22, 6, -105, 125, -61, 125, -10, 81, 98]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[45, 119, 34, -88, -21, 101, -83, -7, 73, -53, -79, -34, 104, 18, 93, -31]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[13, 44, 118, 111, -95, 49, 71, 27, 74, 98, -107, -86, -77, 63, 79, -110]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-101, -8, -74, 40, -91, -112, -36, 89, -94, 122, 114, 107, 111, -50, 50, 124]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-101, -8, -74, 40, -91, -112, -36, 89, -94, 122, 114, 107, 111, -50, 50, 124]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[90, -59, 48, 95, -111, -118, -94, -111, -65, -27, -51, 72, 98, -41, -121, 69]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 44, 118, 111, -95, 49, 71, 27, 74, 98, -107, -86, -77, 63, 79, -110]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[108, -64, -25, -86, 117, -24, -84, -52, 102, -2, 72, 3, -19, 106, -81, 13, 65, -54, -97, -102, -84, -46, 77, -38, -58, -4, -43, 114, -24, 62, -98, 114, -115, -128, -1, 102, -63, -49, -7, 28, 37, -52, -122, -114, 108, -88, 42, 21, 72, -113, -92, 70, -126, 105, -37, 28, -103, 88, -113, -16, 2, -67, 60, -22, -81, 77, 31, 89, -125, -82, 82, 49, 88, -23, -53, 22, -50, 65, -94, -44, 121, -22, -60, -30, 39, 97, 56, -39, 56, -30, -109, -120, 16, -6, -77, -96, 13, 44, 118, 111, -95, 49, 71, 27, 74, 98, -107, -86, -77, 63, 79, -110]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray8 = new byte[] {};
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey27);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[70, 85, 13, -104, 35, 8, -59, 96, -28, 18, -59, 82, -14, 9, -109, 72]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-95, 65, 5, -60, 72, -42, 38, -110, -96, 10, 118, 44, 73, 52, -96, -102]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-27, -19, -95, -29, -57, -56, 45, 26, 54, -122, 97, -87, 122, -26, 15, 3, -62, -119, 10, 31, 66, 123, 14, 53, -85, 102, -104, -126, -63, -54, 115, 18, 70, 85, 13, -104, 35, 8, -59, 96, -28, 18, -59, 82, -14, 9, -109, 72]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "E5EDA1E3C7C82D1A368661A97AE60F03C2890A1F427B0E35AB669882C1CA731246550D982308C560E412C552F2099348" + "'", str7, "E5EDA1E3C7C82D1A368661A97AE60F03C2890A1F427B0E35AB669882C1CA731246550D982308C560E412C552F2099348");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[116, 57, -61, 104, -78, 26, 85, 29, 93, 13, 54, 56, -68, -35, -99, -89]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[38, 50, -49, -107, 21, -33, -122, -78, 110, 61, -5, 3, 121, 2, -112, 22]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-6, -16, 18, 101, -67, -37, -8, 127, 18, 98, 79, -23, 90, 36, 8, -91]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-78, -28, -26, -95, -69, 120, 68, -59, -19, -128, -118, -53, -109, 51, -11, -82]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[121, 65, 27, 105, 3, 46, 85, -23, -67, -27, -125, 9, 95, 66, 4, -121, -97, -33, 109, -10, 29, 64, 85, -64, 75, -35, 40, -123, 63, 8, -10, 30, -6, -16, 18, 101, -67, -37, -8, 127, 18, 98, 79, -23, 90, 36, 8, -91]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[85, -60, 93, 24, 59, 126, 87, 98, 74, 62, -37, -41, -27, 13, -14, -31, 89, 82, 16, -82, -64, 91, 14, -25, -59, -98, -91, 120, 14, 105, -9, 77, -51, -57, -15, 96, -69, 87, -25, 96, 77, 78, 96, -86, 29, -100, -80, 83, -13, 76, -34, -90, -51, 113, 94, 15, -122, -5, -97, 14, 78, 86, 25, 75, -78, -39, 120, 118, -79, 57, -54, -121, 73, -42, -95, -98, -59, 46, 4, -56, -83, 99, 91, -38, 25, 65, -95, 73, 7, -57, -70, -63, 18, 76, 111, -124, -6, -16, 18, 101, -67, -37, -8, 127, 18, 98, 79, -23, 90, 36, 8, -91]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey42);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey42);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray50 = new byte[] {};
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray50);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey52);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey56);
        byte[] byteArray60 = new byte[] {};
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey62);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey66);
        byte[] byteArray72 = new byte[] {};
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray72);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey74);
        javax.crypto.SecretKey secretKey78 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey78);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey78);
        byte[] byteArray82 = new byte[] {};
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray82);
        javax.crypto.SecretKey secretKey84 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray82, secretKey84);
        javax.crypto.SecretKey secretKey88 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey88);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey88);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray82, secretKey88);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey88);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey88);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey88);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey88);
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey88);
        byte[] byteArray97 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey88);
        byte[] byteArray98 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey88);
        byte[] byteArray99 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey88);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-4, -9, -59, 46, -77, -100, -60, 51, -118, -25, 97, 93, 78, 81, 72, 8]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[70, -57, 33, -42, -78, -68, -21, 104, 53, 94, -116, -124, -114, -80, -4, 95]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[81, 85, 30, -113, 61, -114, -31, 66, -37, 21, 127, 61, 91, 47, -1, -76]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-126, -84, -125, -96, 20, -98, -50, -122, -49, 108, 65, 34, -112, 79, 112, 93]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-92, -106, -28, 4, -59, -100, -114, -44, -75, 89, -85, -103, -99, -70, -39, -23]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-106, -101, -68, -124, -5, -91, -26, -82, 58, -104, 61, 32, 112, -35, 44, 51]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-101, -69, 94, -20, -107, -56, 30, -19, 94, -96, 77, 85, -124, 90, -83, -59]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[9, -97, 84, 34, 71, 3, 34, 5, -57, 66, -128, -11, 30, 124, -114, 20]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[41, 43, 71, 71, -89, -128, 37, 64, -80, 112, -18, -61, -118, 96, 96, -117, -120, -56, 42, 25, -118, -64, -18, 97, 79, -54, -111, 54, -120, -68, 10, 1, -101, -69, 94, -20, -107, -56, 30, -19, 94, -96, 77, 85, -124, 90, -83, -59]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[69, 17, -100, 53, 112, -8, -23, 40, -59, 69, -83, -83, -35, 114, -75, -74]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[103, -75, 15, -16, 33, -94, -106, 92, 24, -34, -113, -97, -95, 29, 13, 10]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-101, 91, -127, -93, 50, -43, -18, 17, -39, 121, -20, 82, 124, -48, -25, -106]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-120, -86, 9, 118, 3, 123, 123, 13, 40, -101, -52, 72, -113, -55, 71, 78]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey78);
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[6, 72, 111, -107, -38, -125, 92, 78, -87, 59, -125, -35, -109, 12, 44, -10]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[117, 9, -33, 104, -36, -34, -107, 16, 120, 75, 103, 15, -39, 1, -70, -77]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(secretKey88);
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[36, 52, -24, -28, 16, -126, -37, -79, -84, -93, 121, -20, -67, -91, -110, -51]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[96, 110, 6, 75, 61, 96, -93, 96, 82, -52, -120, 38, -120, -121, -48, -15]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[4, 51, 23, -83, 71, -30, -54, 27, -42, -30, 4, -3, -63, 103, 85, 49, 101, -99, -30, -33, -2, -83, 59, 7, 13, 34, -86, -33, -82, -61, 14, -40, 36, 52, -24, -28, 16, -126, -37, -79, -84, -93, 121, -20, -67, -91, -110, -51]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(byteArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[96, 110, 6, 75, 61, 96, -93, 96, 82, -52, -120, 38, -120, -121, -48, -15]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertNotNull(byteArray98);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[-90, 84, 81, 65, 126, 3, -62, -6, -36, -125, -64, -72, 33, 26, 28, 124, -97, -124, 26, -4, -44, -30, -14, -18, 78, 120, 88, 75, -76, -123, 6, 13, 36, 52, -24, -28, 16, -126, -37, -79, -84, -93, 121, -20, -67, -91, -110, -51]");
        org.junit.Assert.assertNotNull(byteArray99);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[36, 52, -24, -28, 16, -126, -37, -79, -84, -93, 121, -20, -67, -91, -110, -51]");
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("79AAC6BADDEE51E806D5C55C344BCE07C014789F446BFB96606CC5F491A4CCBBE53D15D8EA22EB6673FB1293F0E712BB", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, -100, -98, -17, -116, -39, 11, -81, -34, 66, 32, -41, -87, 125, 5, -95]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-80, -11, 121, -63, 122, -128, -87, -65, -127, 61, 23, -70, 118, 80, -62, 36]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[117, 118, 25, -14, 65, -84, -94, -52, 22, 81, -18, -91, 45, -128, 57, -11]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-90, 48, 82, -104, -104, -1, 36, -106, -64, -72, -38, 112, -11, -19, 123, -18]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-118, -57, -127, -34, 100, -99, -100, 50, -70, -91, -50, 61, -2, -117, 59, -17, -48, 43, 65, 80, -7, 89, -18, 30, 111, -118, -96, -64, 94, -100, -113, -125, 117, 118, 25, -14, 65, -84, -94, -52, 22, 81, -18, -91, 45, -128, 57, -11]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-31, 96, 75, 32, -117, -44, -38, -116, -44, 42, 95, 97, 120, -47, 22, -39, -62, -95, 102, -8, 77, -22, 88, -16, 28, -41, 116, 81, 95, 27, -117, 44, 117, 118, 25, -14, 65, -84, -94, -52, 22, 81, -18, -91, 45, -128, 57, -11]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-3, -84, -4, 84, -71, -110, 60, 124, 116, -11, 11, 36, -21, 104, -119, 26, 77, -22, -90, 112, -14, -45, 63, -30, 44, 81, -66, 50, -27, 92, 75, 46, 49, -60, 88, 14, 110, -114, 103, -12, -101, -110, -87, -120, -93, 55, 25, 94, 97, -6, -126, 47, -59, 11, -40, 36, -42, 104, 77, -79, 22, -86, 76, 106, 48, -65, 58, -46, -109, -97, -15, -119, -71, 45, -124, 30, -35, 117, -12, -32, -28, 39, 50, -85, 18, 21, -74, -116, 57, -80, -4, 23, 57, -111, 18, 81, 117, 118, 25, -14, 65, -84, -94, -52, 22, 81, -18, -91, 45, -128, 57, -11]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[90, -17, 6, 54, 26, -1, 38, 86, -52, 118, 40, -34, 64, -103, 55, 100, 75, 60, 111, 79, 61, 1, -116, 68, -27, 66, 106, 105, 109, 82, -50, 23, -109, 14, -7, 62, 31, -89, 72, 27, 7, 106, 51, 12, -85, 66, -96, -56, -85, -61, 71, 115, -110, -105, -104, -22, -126, -45, 75, -47, -42, -103, -10, 84, -57, -110, -71, -82, 33, -1, -55, 67, -88, -40, 91, 78, -103, 37, -87, -12, 81, -4, -25, 115, -40, 116, -101, -123, -57, 117, 1, 73, -62, 83, 71, -73, 117, 118, 25, -14, 65, -84, -94, -52, 22, 81, -18, -91, 45, -128, 57, -11]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey55);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey55);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey55);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey55);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey55);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey55);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey55);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey55);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey55);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, 71, 32, -118, 34, 93, -2, -117, 55, -16, -91, -70, 41, -103, -65, -7]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-78, -46, 120, 78, -114, 106, -9, -16, 61, 124, -74, 17, 94, -28, 76, -105]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[7, -12, 7, 56, 92, -58, -35, -26, 60, 123, 66, 34, -42, 6, -124, 52]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[16, 119, 5, 5, -14, -16, 4, 72, 7, -4, 24, -47, -74, -110, -71, -8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[103, -9, -48, -45, -112, -44, -1, -56, -74, 54, 16, -95, -40, 109, 99, 30, -126, 4, -50, -106, -1, 78, -2, -93, -71, 34, -102, 105, -87, -32, -57, -34, 7, -12, 7, 56, 92, -58, -35, -26, 60, 123, 66, 34, -42, 6, -124, 52]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-83, -99, -33, -41, -29, 57, -115, -118, -92, -86, -128, -97, 28, 13, 35, -87, -51, 109, 35, -102, -49, -27, 67, -5, -127, -114, -66, 59, -37, 57, 111, -69, 7, -12, 7, 56, 92, -58, -35, -26, 60, 123, 66, 34, -42, 6, -124, 52]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-21, -115, 108, -91, -4, -118, -29, -54, -103, 34, 48, -126, 1, 108, 4, 1, 21, 23, 91, 10, 19, -74, -26, 0, 69, 102, 124, -31, 2, -12, -99, -44, -24, -113, -62, -105, -38, -17, -14, 100, 74, 67, -64, -9, 12, -60, -8, 49, 48, 19, 13, 16, -36, 75, -118, -117, 116, 49, 59, -121, 59, -29, 102, 123, 121, 93, -66, -62, -37, -107, 52, 64, 89, -17, 29, 116, -83, -11, -48, 97, 79, 120, -84, -31, -17, -17, -16, 13, 106, -98, 11, 36, 56, 126, -12, -109, 7, -12, 7, 56, 92, -58, -35, -26, 60, 123, 66, 34, -42, 6, -124, 52]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "EB8D6CA5FC8AE3CA99223082016C040115175B0A13B6E60045667CE102F49DD4E88FC297DAEFF2644A43C0F70CC4F83130130D10DC4B8A8B74313B873BE3667B795DBEC2DB95344059EF1D74ADF5D0614F78ACE1EFEFF00D6A9E0B24387EF49307F407385CC6DDE63C7B4222D6068434" + "'", str27, "EB8D6CA5FC8AE3CA99223082016C040115175B0A13B6E60045667CE102F49DD4E88FC297DAEFF2644A43C0F70CC4F83130130D10DC4B8A8B74313B873BE3667B795DBEC2DB95344059EF1D74ADF5D0614F78ACE1EFEFF00D6A9E0B24387EF49307F407385CC6DDE63C7B4222D6068434");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "EB8D6CA5FC8AE3CA99223082016C040115175B0A13B6E60045667CE102F49DD4E88FC297DAEFF2644A43C0F70CC4F83130130D10DC4B8A8B74313B873BE3667B795DBEC2DB95344059EF1D74ADF5D0614F78ACE1EFEFF00D6A9E0B24387EF49307F407385CC6DDE63C7B4222D6068434" + "'", str28, "EB8D6CA5FC8AE3CA99223082016C040115175B0A13B6E60045667CE102F49DD4E88FC297DAEFF2644A43C0F70CC4F83130130D10DC4B8A8B74313B873BE3667B795DBEC2DB95344059EF1D74ADF5D0614F78ACE1EFEFF00D6A9E0B24387EF49307F407385CC6DDE63C7B4222D6068434");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "EB8D6CA5FC8AE3CA99223082016C040115175B0A13B6E60045667CE102F49DD4E88FC297DAEFF2644A43C0F70CC4F83130130D10DC4B8A8B74313B873BE3667B795DBEC2DB95344059EF1D74ADF5D0614F78ACE1EFEFF00D6A9E0B24387EF49307F407385CC6DDE63C7B4222D6068434" + "'", str29, "EB8D6CA5FC8AE3CA99223082016C040115175B0A13B6E60045667CE102F49DD4E88FC297DAEFF2644A43C0F70CC4F83130130D10DC4B8A8B74313B873BE3667B795DBEC2DB95344059EF1D74ADF5D0614F78ACE1EFEFF00D6A9E0B24387EF49307F407385CC6DDE63C7B4222D6068434");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-115, -93, -83, 124, 97, 50, -120, -35, 91, 50, -25, -116, -63, -30, -33, -24]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-79, 54, 15, -76, -94, 76, 95, -100, 51, -2, 109, 125, -45, 96, -103, -1]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-26, 29, -128, 4, 34, 107, 50, -84, -75, -20, -68, 31, 123, 20, -126, 99]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[25, -72, -21, -120, -99, -66, -51, -46, 39, 59, 127, -73, 64, 113, -98, 81]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[49, -28, 6, -93, 72, 10, 16, -115, -39, -86, -33, -117, 34, -20, 64, 83, 65, 101, 8, -50, 15, 40, -16, -17, 108, -95, -117, -46, -58, -112, 72, 2, -26, 29, -128, 4, 34, 107, 50, -84, -75, -20, -68, 31, 123, 20, -126, 99]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-122, -91, -13, -6, -91, 44, -125, 22, 107, 82, 17, 28, 107, 11, -126, 75, 43, 99, 62, -70, 117, 119, 52, -10, -124, -62, -127, -76, 10, 95, 115, -107, -26, 29, -128, 4, 34, 107, 50, -84, -75, -20, -68, 31, 123, 20, -126, 99]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-36, -91, -78, 125, 37, -54, 26, -114, -115, 124, 23, -99, 106, 114, 55, 85, -59, -88, -125, -112, 104, 101, -127, 93, -108, 95, 88, 120, 103, 75, -27, 1, 14, 85, 126, -82, -89, 13, 42, -95, -93, -103, 46, 14, -115, 86, -54, -122, -100, -84, -90, 110, 113, 122, 76, 18, 74, 37, -33, 34, -103, 123, 100, 86, 103, -96, -82, -54, 126, -4, -32, -103, -31, -100, -123, -21, -60, 92, 45, -123, -17, 122, 88, 28, -82, -119, -65, 23, -24, -56, 41, -105, -15, 116, 31, -100, -26, 29, -128, 4, 34, 107, 50, -84, -75, -20, -68, 31, 123, 20, -126, 99]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-21, 18, -76, -21, -68, 69, 85, 66, -50, 21, 73, 76, 68, 115, 20, -67, 39, -42, -58, 27, -104, -63, -48, -14, -70, 56, 71, 100, -97, -68, 72, -24, -26, 29, -128, 4, 34, 107, 50, -84, -75, -20, -68, 31, 123, 20, -126, 99]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[89, -36, 52, 9, 44, -56, -59, -114, -29, 109, -25, -79, 56, -14, -94, -87, 12, -71, -65, -80, 41, 19, -13, 3, 85, -78, -90, -37, -25, -45, 46, -3, 93, 102, -68, -64, -87, -50, 81, -28, -101, 47, -57, 57, -32, -94, -16, -5, 5, 63, 117, -25, 85, 31, 113, 27, 16, 35, -29, -29, 125, -53, 126, 77, -71, 27, 35, 100, -59, 71, 72, 115, 77, -100, -91, -53, 111, 112, -20, 15, -10, 9, 89, -69, -80, -92, 90, 108, 73, 27, 3, 110, 70, 94, -105, 26, -26, 29, -128, 4, 34, 107, 50, -84, -75, -20, -68, 31, 123, 20, -126, 99]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertNotNull(byteArray67);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.Class<?> wildcardClass14 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[93, -46, -10, 90, -41, -2, 87, 63, 16, -42, 42, -57, -71, 118, 68, -34]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-108, 93, 20, -29, -122, 45, -93, -72, 15, -49, 26, -46, 31, 56, 2, -85]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-108, 93, 20, -29, -122, 45, -93, -72, 15, -49, 26, -46, 31, 56, 2, -85]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[59, 6, -7, -97, 113, -85, -14, -118, -27, -20, -118, -57, -11, 18, 69, 64]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-112, -67, -35, 81, 110, -18, -124, 63, -51, 84, 13, -58, 76, 101, -8, -36, -104, 5, 10, -76, 54, -9, -80, 47, -68, -50, 15, 77, -104, 73, 103, -10, 93, -46, -10, 90, -41, -2, 87, 63, 16, -42, 42, -57, -71, 118, 68, -34]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-126, -128, 30, 117, 22, 15, 94, 65, -5, -61, 18, -84, 16, -6, 108, 59, -46, -95, -22, -42, -121, 6, 50, 63, 31, 126, -54, -75, 126, 78, 84, -55, -46, 45, 88, -114, -77, -115, -120, -120, 108, -56, 99, -128, -125, 62, -125, 65, 9, 104, 60, 95, -109, -118, -121, -105, 94, 10, -63, -128, -34, -31, -53, 51, -84, 10, 117, 7, 75, -15, -87, 88, 45, -123, -123, 62, -7, -72, 94, -53, 78, 112, 34, 116, 19, 32, 5, -40, -96, 1, -108, 11, -32, 85, -55, 18, 93, -46, -10, 90, -41, -2, 87, 63, 16, -42, 42, -57, -71, 118, 68, -34]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "82801E75160F5E41FBC312AC10FA6C3BD2A1EAD68706323F1F7ECAB57E4E54C9D22D588EB38D88886CC86380833E834109683C5F938A87975E0AC180DEE1CB33AC0A75074BF1A9582D85853EF9B85ECB4E702274132005D8A001940BE055C9125DD2F65AD7FE573F10D62AC7B97644DE" + "'", str13, "82801E75160F5E41FBC312AC10FA6C3BD2A1EAD68706323F1F7ECAB57E4E54C9D22D588EB38D88886CC86380833E834109683C5F938A87975E0AC180DEE1CB33AC0A75074BF1A9582D85853EF9B85ECB4E702274132005D8A001940BE055C9125DD2F65AD7FE573F10D62AC7B97644DE");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey8);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey37);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        byte[] byteArray54 = new byte[] {};
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey56);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey60);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey60);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey71);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey71);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey71);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey71);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey71);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey71);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey71);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7FA568134806C9105C34D583C29871A41AE5CE04D352F794BBBC55C17CC3D7B2E48B2428828EE039A91A06CFBF22DBA03F23A99544AD69867843E16A8BBCB065F997601695DCE4DA9232998E7CFA9275FD14E9B5BE58653BB989CC8C93C323B9A2602029745C486376259619FE42C1DC969C5F23218132538C69A93E2C46029CAFBCB3A325C55A351897A58F95136EEE2494FA973744222FA873EEAD1E15360A868A656A3C665D51EC62012BA7C41A8A5BF8AD314E65E180BA4087E8D6B89D6623982F2B436A6758077463A37F0FFC47E55DE5DFB67D8B3F67F9F6BD7C9678E01B5950A89DB569E40DEBF8146983CC8", secretKey71);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey71);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("BB0A24C93C719D18515FA134D81BE0B18BFFC347F0028434040FB1A431384C7ECF1259BD45F6E0629C856BE68581671B", secretKey71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey71);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[14, -105, 59, -97, 83, -21, -12, 120, 120, 101, 5, 116, 112, 105, 99, -49]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-107, -102, 16, 62, 65, -56, -8, 33, -47, -29, -107, -10, 115, 17, 8, 104]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-107, -102, 16, 62, 65, -56, -8, 33, -47, -29, -107, -10, 115, 17, 8, 104]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[116, 31, 86, 78, -15, 126, -93, -107, -75, 14, 100, -82, -6, 117, -36, -8, 127, 49, 71, -49, -61, -53, 92, 12, -60, 81, -92, -115, 106, -47, -12, -75, 14, -105, 59, -97, 83, -21, -12, 120, 120, 101, 5, 116, 112, 105, 99, -49]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "95000CC39E9D6343373006DC9A06B486CE151EBAD404550188B3B9DC9F81127BFDA0C09C84D583FEBFCF582673442EA6C92DCD9EA43DC0650BCF9C831E283B4D24C17532A2DCC0224DE91EB050BCA14C179C51BC4CB53C29CA287D1EFF956FB31F8DA71C0905564FCB5ADAF6ABD88EF5F261B476F870D6F48B59FEFE53EC023F576987F1EA42050756E122C53BEFD1CC6B908198F6B25201A407A4FFD3EC63D1B30552CDB80D6C0E9759D9936AD174436DDA0F6B54F2149009797FD6A4E872B43F3C7C380C73B7B14E0400407270DB103AAC48CB0B803F593E1ACF6C7E8C64180E973B9F53EBF47878650574706963CF" + "'", str15, "95000CC39E9D6343373006DC9A06B486CE151EBAD404550188B3B9DC9F81127BFDA0C09C84D583FEBFCF582673442EA6C92DCD9EA43DC0650BCF9C831E283B4D24C17532A2DCC0224DE91EB050BCA14C179C51BC4CB53C29CA287D1EFF956FB31F8DA71C0905564FCB5ADAF6ABD88EF5F261B476F870D6F48B59FEFE53EC023F576987F1EA42050756E122C53BEFD1CC6B908198F6B25201A407A4FFD3EC63D1B30552CDB80D6C0E9759D9936AD174436DDA0F6B54F2149009797FD6A4E872B43F3C7C380C73B7B14E0400407270DB103AAC48CB0B803F593E1ACF6C7E8C64180E973B9F53EBF47878650574706963CF");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "95000CC39E9D6343373006DC9A06B486CE151EBAD404550188B3B9DC9F81127BFDA0C09C84D583FEBFCF582673442EA6C92DCD9EA43DC0650BCF9C831E283B4D24C17532A2DCC0224DE91EB050BCA14C179C51BC4CB53C29CA287D1EFF956FB31F8DA71C0905564FCB5ADAF6ABD88EF5F261B476F870D6F48B59FEFE53EC023F576987F1EA42050756E122C53BEFD1CC6B908198F6B25201A407A4FFD3EC63D1B30552CDB80D6C0E9759D9936AD174436DDA0F6B54F2149009797FD6A4E872B43F3C7C380C73B7B14E0400407270DB103AAC48CB0B803F593E1ACF6C7E8C64180E973B9F53EBF47878650574706963CF" + "'", str16, "95000CC39E9D6343373006DC9A06B486CE151EBAD404550188B3B9DC9F81127BFDA0C09C84D583FEBFCF582673442EA6C92DCD9EA43DC0650BCF9C831E283B4D24C17532A2DCC0224DE91EB050BCA14C179C51BC4CB53C29CA287D1EFF956FB31F8DA71C0905564FCB5ADAF6ABD88EF5F261B476F870D6F48B59FEFE53EC023F576987F1EA42050756E122C53BEFD1CC6B908198F6B25201A407A4FFD3EC63D1B30552CDB80D6C0E9759D9936AD174436DDA0F6B54F2149009797FD6A4E872B43F3C7C380C73B7B14E0400407270DB103AAC48CB0B803F593E1ACF6C7E8C64180E973B9F53EBF47878650574706963CF");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-49, 92, -30, -59, 46, -91, -128, -33, -78, -126, 67, -112, -125, 61, 51, -62]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[73, 51, 19, -127, -125, -102, -5, -93, -9, -24, 17, 31, -28, -53, 113, -103]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-36, -115, 19, -57, -51, -45, -76, -101, 56, 118, -24, 38, 36, -108, -58, 74]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-76, -65, 101, 2, -14, -63, -96, 101, -74, -15, 108, -58, 78, 67, 127, 94]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-33, -80, 14, -98, -86, -112, 7, -37, 8, -97, 9, 44, 86, 12, 83, -17]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[60, 104, -36, 42, 19, 78, -87, 68, -85, -123, 73, -76, 14, 103, -106, -64]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[19, 31, 44, -109, -102, -91, -30, -99, 97, -6, -30, -106, -106, -31, 115, -93]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[93, -45, -25, -103, -79, -94, -107, 53, 66, 54, -1, 113, 3, -71, -74, -90]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[121, 23, 89, -98, 56, 92, 64, 99, -5, -93, -78, 47, -24, -120, -35, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[110, 50, 111, 54, 108, 119, 111, 32, 47, 28, -73, 10, 10, -35, 85, 30]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[52, 51, 45, -118, -43, 124, -66, -85, -116, -92, -11, -118, -12, -85, -23, 118]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[121, 23, 89, -98, 56, 92, 64, 99, -5, -93, -78, 47, -24, -120, -35, -1]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-108, 0, 66, -110, 47, 120, -25, -86, -19, -11, -32, -45, 99, 4, 33, 126, -60, 49, 68, 93, 52, 96, -45, 111, -74, 106, 14, -76, -105, -42, 89, 28, 121, 23, 89, -98, 56, 92, 64, 99, -5, -93, -78, 47, -24, -120, -35, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[121, 23, 89, -98, 56, 92, 64, 99, -5, -93, -78, 47, -24, -120, -35, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[82, -53, 5, -7, -33, 84, -20, -100, 50, 12, 62, 114, -112, 115, 62, 3, -97, -118, 66, -6, -6, 18, -40, 96, 16, 17, -21, -87, -109, 1, -107, -91, -76, 65, -74, 85, 124, 46, -60, 13, -17, 37, 101, -54, 24, -80, -64, -122, -61, -100, -14, 23, -63, 15, -66, -102, 31, 101, 87, 121, 14, 30, 13, -108, -25, -93, -31, -92, 38, 84, -96, -127, 5, -48, 16, 91, 109, 1, -87, -69, 97, -20, -108, 67, -50, 92, 32, -17, -4, -94, -13, 3, -31, -82, -53, 103, 121, 23, 89, -98, 56, 92, 64, 99, -5, -93, -78, 47, -24, -120, -35, -1]");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey33);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey33);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey42);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey48);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey48);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray53);
        byte[] byteArray60 = new byte[] {};
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey62);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey76);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey76);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey76);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey76);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-114, -3, -10, -21, -94, -25, 124, -117, 89, 16, -101, 96, -32, -60, 14, 111]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-30, 57, 96, -55, -44, -33, 25, -79, -17, -118, -49, 36, -111, -59, -65, 65]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-70, 110, -7, 51, 4, -82, 48, -125, -11, 77, -14, 113, 17, -87, -98, 31]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[35, -68, 74, -16, -97, -71, 42, -112, -102, 58, 98, 2, 50, -46, -41, 14]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-56, 35, -105, -33, -99, 78, -69, -72, 55, 82, -86, -52, 101, 122, -99, 8]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[53, -21, -71, -59, -120, -55, 49, -55, -91, 86, -24, 113, -99, -55, -103, -104, 22, -5, -99, -99, 79, -127, 104, -26, -127, 22, -94, -47, 121, 37, 73, -4, 35, -68, 74, -16, -97, -71, 42, -112, -102, 58, 98, 2, 50, -46, -41, 14]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-94, 110, -90, -109, 43, 101, 81, 32, -39, 0, 81, 33, -6, -37, -98, 55]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[79, 78, 23, 11, 35, 89, -128, 97, 30, -113, -16, 78, 36, -124, -65, -47]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-65, -94, 51, -1, -102, 15, 102, 31, 85, 33, 84, -123, 8, 62, -80, 93]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-95, -24, -23, -88, 13, -74, -111, 71, 56, 40, 95, -56, 101, 117, -77, -109]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-92, -76, 28, 100, -105, 2, 124, -81, 52, 86, -4, 58, -64, -109, 95, 6, 117, -42, -94, -127, -112, -44, -95, 95, 110, 12, 64, -127, 40, 2, -42, 74, -65, -94, 51, -1, -102, 15, 102, 31, 85, 33, 84, -123, 8, 62, -80, 93]");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "A4B41C6497027CAF3456FC3AC0935F0675D6A28190D4A15F6E0C40812802D64ABFA233FF9A0F661F55215485083EB05D" + "'", str54, "A4B41C6497027CAF3456FC3AC0935F0675D6A28190D4A15F6E0C40812802D64ABFA233FF9A0F661F55215485083EB05D");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-94, -40, 53, 101, -85, -32, 0, -97, 1, 26, -49, 69, 83, -105, -43, 120]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-46, -47, 100, 73, -38, -127, 122, 85, 106, 53, 28, -97, 1, 12, -58, -77]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-83, -9, -10, -59, 114, -12, 75, 114, -18, 36, 38, 64, 4, 85, -112, -40]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-70, -115, 98, 39, 23, 53, -117, -91, 22, -4, 47, 38, -63, -10, -50, 25]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-97, -2, 16, -41, 62, -58, 20, 45, 48, 63, -88, 62, -60, -55, -126, -109, 20, 62, -107, -20, 107, 85, -21, -83, -118, 27, -8, -73, 61, 4, -85, -32, -83, -9, -10, -59, 114, -12, 75, 114, -18, 36, 38, 64, 4, 85, -112, -40]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-83, -9, -10, -59, 114, -12, 75, 114, -18, 36, 38, 64, 4, 85, -112, -40]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-70, -115, 98, 39, 23, 53, -117, -91, 22, -4, 47, 38, -63, -10, -50, 25]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[110, -83, -39, 107, -31, 84, 75, 32, 89, -27, 89, 99, -29, 42, 2, -17, 98, -56, -19, -1, -94, -114, 122, 48, 70, 22, 79, -6, -99, 55, 41, 98, -83, -9, -10, -59, 114, -12, 75, 114, -18, 36, 38, 64, 4, 85, -112, -40]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-69, 47, -37, -19, 33, -47, -83, -109, -31, -6, -53, -4, -123, -110, -51, -49, 111, 56, 106, 31, -46, -70, -127, -118, 55, 15, 21, 8, 0, 96, -81, -11, -83, -9, -10, -59, 114, -12, 75, 114, -18, 36, 38, 64, 4, 85, -112, -40]");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[41, -109, 20, -56, -28, 51, -87, -55, 9, 106, 27, -57, 45, -90, -25, -54]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[15, -37, 27, -51, 10, 91, 91, -92, 48, -98, -55, 119, 121, 54, -38, -51]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[3, 68, 59, 37, 16, 20, -12, 60, -3, -35, -49, 7, -17, -28, -41, -113, -88, -2, -58, -38, -61, -82, 63, -88, -122, 68, -64, -7, 62, -31, 13, 45, 41, -109, 20, -56, -28, 51, -87, -55, 9, 106, 27, -57, 45, -90, -25, -54]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-99, 101, 21, 63, 0, -37, 7, -118, -65, 111, 37, -81, 12, -125, -75, 51, -92, 94, 79, 31, 80, 50, -60, 117, -91, -124, -44, -120, 26, -38, -34, 37, 41, -109, 20, -56, -28, 51, -87, -55, 9, 106, 27, -57, 45, -90, -25, -54]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey13);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("41A735EEF9CCEAE71F96AB5C1E49E12FE564CCDE22C1C25E62649CDA4E7C1269ACF88FFE5E4B58A92E25A180C9CBC0DE027858C951CD7787F5FD992FA0708ED9E2CE2E14073DD0E4F0D97A9DD20A20C0539C7C6A955A05045D747BD66823402D4EC98F6737E4995D1FF877A6DE9742C256E5B45A32C8AA849EA7A589D0C803C8C4C7479A14517C9A682257C15D3F5419BAD90E329E85A258B74393A829A0A056931AA6E8D75969F8F56D5E5C19553823B207460D73DF40856C021A6EE0EE4A3D724E04F6B6162EF291F8F9FFD0BE6F5DD09F3C444D5F215FBAD9322AC4BCA1297EC1B24C44BF5B5AA807561F71225DCF", secretKey21);
        java.lang.Class<?> wildcardClass27 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-16, 60, -74, -123, 74, -51, 69, 126, 12, 45, -81, -106, -115, 18, 39, -10]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[99, -8, 31, 122, -35, 27, -16, 125, 117, -106, 42, -31, 48, -51, -105, -127, -33, -123, -25, 64, -114, 96, -17, 28, 68, -16, -54, -123, -47, 86, 77, -67, -111, 93, 117, -67, 102, -126, 84, 88, -26, -20, -12, 98, 48, 82, 0, -22]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-27, -35, 84, -95, -126, 100, -103, 114, -18, 72, 17, -70, 47, -62, -119, 41]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[119, -95, -120, 21, -59, -65, 14, -113, -12, -96, -65, 126, -49, -80, 45, 3]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-81, 44, -18, 65, -119, 24, -19, -92, 64, 122, -84, 1, 120, 41, 53, 71]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[44, 49, -57, -49, 75, 99, 35, -106, 12, 72, 63, -77, -70, 55, -18, 101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[9, 59, -98, -74, 70, -117, -47, 35, 39, -77, 50, -11, 4, 113, 123, -117, -123, 13, -2, -103, 78, 101, 3, -9, -88, 44, 80, -10, -112, -120, -40, 92, -81, 44, -18, 65, -119, 24, -19, -92, 64, 122, -84, 1, 120, 41, 53, 71]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-85, 47, 48, -27, 96, 15, 57, -56, -128, 67, -21, -28, -68, -126, 42, 122, 18, -78, -106, -87, -24, -71, 61, -86, -28, 34, 90, 78, 7, -41, 116, 72, -81, 44, -18, 65, -119, 24, -19, -92, 64, 122, -84, 1, 120, 41, 53, 71]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-5, 1, 12, -38, -105, -82, 111, -117, -41, 98, 6, -23, 10, 127, -41, 22, 21, -39, -92, -5, -58, -105, 65, -106, -103, 63, -56, 70, 27, 60, -27, 53, -1, 38, 74, -37, -126, 12, -116, -82, 86, -116, -13, -97, 29, 72, 16, 110, -20, -5, 2, 27, 95, -23, 122, 71, 23, -34, -61, -28, -13, 121, 101, -84, -36, -52, -7, 49, 29, -70, 44, -26, -64, -41, 102, 13, -87, -14, 49, 75, 75, -34, 61, -84, -81, 21, -71, -25, -122, -28, 114, 51, 64, 87, 99, 80, -81, 44, -18, 65, -119, 24, -19, -92, 64, 122, -84, 1, 120, 41, 53, 71]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-57, 121, -7, 97, 38, 2, -30, -38, 52, 2, 104, 127, -34, 82, 58, -105, -47, 22, -6, -45, 41, -83, -38, 30, -8, 109, 32, -80, 81, -109, 4, 84, -15, 97, -32, 5, 115, 107, 6, -39, 84, 50, 30, 16, 82, 91, 118, 60, -83, -115, -114, -108, -83, 22, -99, 63, 61, -71, 110, -124, -89, -102, 93, 82, 85, 83, -4, 77, 49, 46, -47, 33, -115, -98, 78, -20, 75, 35, 103, 81, -29, -82, -62, -89, -117, -33, -75, -111, 62, 117, 39, -23, -127, -48, 90, -79, -81, 44, -18, 65, -119, 24, -19, -92, 64, 122, -84, 1, 120, 41, 53, 71]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-18, 109, 81, 2, -91, -40, 96, -94, -85, 88, 104, 32, 15, 37, -103, 80, -40, 12, -92, -108, 53, 73, -68, -22, -94, -88, 39, -75, -39, 62, -78, -4, -51, 27, -78, 9, 54, -19, -35, 85, 76, 63, 70, -69, -120, -85, -113, 73, 84, 80, 100, 56, 27, -83, 97, 118, -44, -68, -80, -108, 50, 77, 45, -29, 92, 120, 10, 51, 14, 87, 49, -67, -56, 24, 112, -122, 64, -69, 110, -123, 113, -90, -28, 17, 9, 34, 58, 71, 13, -1, 73, 25, 118, 57, -128, -99, -81, 44, -18, 65, -119, 24, -19, -92, 64, 122, -84, 1, 120, 41, 53, 71]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey19);
        java.lang.Class<?> wildcardClass23 = secretKey19.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-13, 63, 5, -5, -85, -113, -118, 124, 39, -118, 47, -24, 73, 34, 103, 26]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, -39, -77, 118, 81, 78, 14, -14, 71, 65, 4, -101, -41, 116, -56, -29, 71, -77, 68, 100, -122, 89, -103, -23, -112, 59, 8, -92, 92, 77, 17, 53, -119, 117, 83, -122, 31, 3, -92, -63, -128, -62, 93, -104, -60, -83, 21, -107]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey22);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-78, -7, 81, 4, 22, -14, 87, 78, 89, 65, -88, 104, -120, -37, -34, -25]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-104, 17, 113, 122, -124, 122, -125, 36, 46, -23, -55, 65, 20, 46, 6, -108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-66, 26, -97, -102, -43, 75, 3, 1, -52, -39, -27, 117, 63, 25, -52, 88, 34, 55, 68, -5, 114, -97, -41, -105, 1, 24, 61, -60, 43, 107, 124, -73, 119, 39, 52, 56, -40, 85, -49, -61, 111, 30, -81, -25, -33, -63, 77, -75, -12, -118, 31, -74, -70, -78, 19, 126, -52, -91, -100, -124, 19, -96, 39, 126, -100, 112, 103, 74, -105, -125, -31, 79, -95, -103, 40, -87, -37, 15, -112, 110, -18, 61, 33, 108, 91, 31, 41, 17, -5, -39, 65, -6, -88, -76, 22, -36, -78, -7, 81, 4, 22, -14, 87, 78, 89, 65, -88, 104, -120, -37, -34, -25]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[76, 120, 93, -50, 78, -62, 103, 44, -103, 57, -41, -121, 37, 13, -123, -93]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "4C785DCE4EC2672C9939D787250D85A3" + "'", str14, "4C785DCE4EC2672C9939D787250D85A3");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[103, -112, 21, -120, -18, 110, 17, -108, -83, -99, 84, 67, -28, -17, -40, -36]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[115, 44, -97, -11, 108, -124, 101, -116, 122, 15, -28, 103, 109, 49, -74, 16]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[115, 44, -97, -11, 108, -124, 101, -116, 122, 15, -28, 103, 109, 49, -74, 16]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-110, 82, 91, -117, -73, 125, 113, -1, -81, 14, 100, 65, 7, -53, 100, -77]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[115, 44, -97, -11, 108, -124, 101, -116, 122, 15, -28, 103, 109, 49, -74, 16]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-9, -120, 10, 115, -51, -15, -10, -9, 66, 50, -18, -117, 29, 119, 69, -6, -122, -115, 44, 96, 54, -9, -56, -10, -26, 35, 50, 116, -69, 59, 47, 99, -92, -23, -122, -107, 5, 89, -7, -86, 62, -22, -56, 59, 62, -57, -85, 1, 7, -39, -117, 10, -37, -96, 3, 92, 50, 52, 67, 20, -92, 80, 46, -13, -73, 24, -23, 48, 112, 28, 12, -16, -36, 97, 14, 66, 109, 101, -31, -28, -32, -107, -15, -79, 70, 62, -108, -93, 96, -67, -43, -123, -32, -96, 69, 68, 103, -112, 21, -120, -18, 110, 17, -108, -83, -99, 84, 67, -28, -17, -40, -36]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[14, 85, 57, 43, 73, -4, -87, 100, 117, 123, 115, 10, -76, -19, -53, -128, 109, 22, 66, -33, -86, 99, 114, 96, 96, -124, -4, -101, -84, 6, -93, 81, 103, -112, 21, -120, -18, 110, 17, -108, -83, -99, 84, 67, -28, -17, -40, -36]");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("05AE8AE4E2D4988BF8BAF3BEC29F196271C6088FBBBA0E57628A68F439FA8BA32E82EA70AC0C8546DF2CA61FF992435487B743933A6E9B416DE0EEB01CEAE9D815FB3275010F48005B2892B3D3B2666D2DAD0F10686547BDD83E5A8C2F7FF3C4157DC8E5A7FC872D09DC8238D6A2E7CE", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey22);
        java.lang.Class<?> wildcardClass33 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-56, -126, -74, -4, -40, 76, 98, 63, 109, -80, 97, -58, -95, -53, 49, -75]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-49, -104, 31, -32, 79, -89, -4, -21, -7, 69, -62, -7, -122, 29, 37, -112]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-61, -107, -112, 42, 3, -55, -73, 101, -39, 59, -59, -121, 29, 12, -21, -41]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[61, -112, 127, -23, -44, -89, 86, 119, 48, -2, 122, 122, 70, -100, -128, -117]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-44, 71, -38, -38, 35, -110, -27, -82, -69, -48, -62, -102, 86, -104, 83, 104, 57, -53, 109, -68, -90, 118, -82, -125, 35, 111, 22, 86, 64, -24, -100, 44, -61, -107, -112, 42, 3, -55, -73, 101, -39, 59, -59, -121, 29, 12, -21, -41]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-91, -48, 31, 93, 24, -91, -42, -53, -71, 70, 103, 51, 125, 95, 102, 120, 96, 6, -65, -122, 5, 46, 5, 109, -25, 105, 69, -66, -79, -102, 60, 43, -61, -107, -112, 42, 3, -55, -73, 101, -39, 59, -59, -121, 29, 12, -21, -41]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-46, 14, -68, -3, -88, 22, 100, 49, -80, 18, 65, 9, -125, 111, -20, -128, -27, 27, -22, -62, -48, -86, 39, -91, -86, -54, -7, 119, 23, -88, -35, -125, -72, -17, 50, -102, -18, -52, -74, -26, -111, -39, -22, 95, 19, -114, 81, 117, -104, 71, -105, -16, -26, 29, 62, 8, -114, 15, -53, 16, -118, -34, -96, -118, 29, 82, -21, 6, 66, 8, 14, -86, -5, 79, -6, -76, 121, 1, -93, -67, 124, -104, 14, -22, -19, -96, 126, -122, 56, -71, 26, -38, -42, -6, -50, -66, -61, -107, -112, 42, 3, -55, -73, 101, -39, 59, -59, -121, 29, 12, -21, -41]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[55, -102, 94, 116, 70, 25, -77, 114, 73, 29, -21, -61, -122, 53, 94, -40, 13, 103, -125, -12, 30, 50, -119, -94, -115, 71, -89, -117, 29, 24, 111, -113, -38, 34, 75, 60, -48, 97, 125, 40, -126, -118, -127, -85, -41, -43, 93, 2, 73, -16, -22, 86, -79, -74, -92, 61, 30, -9, -72, 96, -98, 74, 60, 21, 121, 122, 44, -68, -118, 50, -100, -6, -127, -104, 127, -60, 73, 87, -24, -50, 44, -47, -19, 43, -94, -72, -118, 61, 21, -42, -14, -97, 43, -121, -119, 127, -61, -107, -112, 42, 3, -55, -73, 101, -39, 59, -59, -121, 29, 12, -21, -41]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[11, -54, 52, 72, 121, -117, -63, -52, 118, -120, -123, -85, -31, -39, 29, 85, 112, 94, 93, 113, 113, -8, 2, -39, 34, -83, -113, 125, 7, 44, -101, -121, -36, 106, -36, -87, -36, 117, 30, 26, 71, 57, -84, 84, -49, -16, -117, -125, -99, 65, 90, -128, -124, 127, -29, -9, 118, 98, 74, 121, 3, 21, -80, -13, 55, 49, -79, 51, -106, 9, -104, -69, 92, -17, -79, -33, -91, 78, 19, -121, -4, 108, -37, -112, 111, 123, 31, 110, 5, 14, -82, 122, 32, 100, -23, 3, -61, -107, -112, 42, 3, -55, -73, 101, -39, 59, -59, -121, 29, 12, -21, -41]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey8);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("508380463B279F88BA991D8C01E9AB5E82EA2F47BCDFDF38340DE16537E50CBBBE3C63E0ECF3A695148E403FF490F4BA58670B485C598323585595245B8C6C35D8AFBAB401419C791C4E639E987610A73A69713278CA83CD63054A23B242ACA507B8E14566EB5B8F765839A1B49AAE54", secretKey24);
        java.lang.String str32 = null; // flaky: com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey24);
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[55, -34, 79, 77, 58, 54, 70, 81, 74, -114, -98, -22, 97, 84, 55, 29]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 57, 6, -32, 80, 3, 126, 11, 99, 62, 21, 52, 101, -18, 104, -19]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[74, -12, 93, 81, 108, 66, 97, 1, -48, 74, 22, 99, 125, -80, 70, -125]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[55, -34, 79, 77, 58, 54, 70, 81, 74, -114, -98, -22, 97, 84, 55, 29]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-59, -64, 13, -51, -47, -59, 125, -86, 39, 25, 74, 52, -90, -102, 111, 111, -101, -25, -50, -114, -31, -104, 102, 58, 23, -55, -40, -51, -44, 118, -68, -35, 55, -34, 79, 77, 58, 54, 70, 81, 74, -114, -98, -22, 97, 84, 55, 29]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-90, 13, 82, -114, 124, 122, -107, 37, -44, 18, 126, 53, -31, 112, 65, -110, 3, -121, 8, 10, 3, -63, 65, -9, 31, 107, -90, -40, -50, 113, -103, -32, 55, -34, 79, 77, 58, 54, 70, 81, 74, -114, -98, -22, 97, 84, 55, 29]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[74, -12, 93, 81, 108, 66, 97, 1, -48, 74, 22, 99, 125, -80, 70, -125]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[11, 94, -99, 93, -86, -54, 106, 102, -112, 13, 57, 37, -106, 2, 6, -6]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-101, 27, 67, -108, -11, -105, 113, -113, -72, 105, 19, 100, -107, -48, 122, 107]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-101, 27, 67, -108, -11, -105, 113, -113, -72, 105, 19, 100, -107, -48, 122, 107]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-98, -21, -75, -115, 82, 24, -110, 65, -113, 29, 80, -34, -53, -16, -83, -56]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[11, 94, -99, 93, -86, -54, 106, 102, -112, 13, 57, 37, -106, 2, 6, -6]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\022\ufffd\ufffd\u9297\ufffd\ufffd\ufffdo'{fi\016\ufffd\ufffd\ufffd\ufffdk\026\ufffd\035\ufffd\ufffd\ufffd\ufffdQ$\033\ufffdt\033\u0239\u014c\ufffd\020\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0554\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd#G6\017\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\004\ufffd\ufffd\ufffd\ufffd\u023e\ufffd\ufffd\ufffd\ufffd\ufffd\024\ufffd\ufffd\ufffda\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdF} \037\ufffd\ufffd\ufffdn\003\ufffd\ufffd\ufffd\r\ufffd\ufffd\ufffd\ufffd\ufffd\021\027\ufffd\u058c\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?\\\ufffd\n\ufffd\"\ufffdD\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdk\027Wjdy5\013\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD" + "'", str32, "\ufffd\ufffd\ufffd\ufffd\022\ufffd\ufffd\u9297\ufffd\ufffd\ufffdo'{fi\016\ufffd\ufffd\ufffd\ufffdk\026\ufffd\035\ufffd\ufffd\ufffd\ufffdQ$\033\ufffdt\033\u0239\u014c\ufffd\020\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0554\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd#G6\017\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\004\ufffd\ufffd\ufffd\ufffd\u023e\ufffd\ufffd\ufffd\ufffd\ufffd\024\ufffd\ufffd\ufffda\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdF} \037\ufffd\ufffd\ufffdn\003\ufffd\ufffd\ufffd\r\ufffd\ufffd\ufffd\ufffd\ufffd\021\027\ufffd\u058c\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?\\\ufffd\n\ufffd\"\ufffdD\b\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdk\027Wjdy5\013\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdD");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("D7C1DE87806880D3EB8DC40B1AB5421EEDC5A1D206D8942E8633B09A3FFDA257FC38C2C5F14D2725CDE598D0986A6466", secretKey9);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.Class<?> wildcardClass20 = byteArray18.getClass();
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[118, 64, 84, 49, -12, -26, 28, -71, -94, 89, 91, -8, -109, 25, -102, -10]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-83, 15, -128, 90, -70, -2, 102, -112, 101, 101, 94, 28, 85, -3, 19, 91]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-83, 15, -128, 90, -70, -2, 102, -112, 101, 101, 94, 28, 85, -3, 19, 91]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[25, -109, 41, 81, -4, 37, 113, 9, 62, 80, 122, 53, -112, 90, -125, -45]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-83, 15, -128, 90, -70, -2, 102, -112, 101, 101, 94, 28, 85, -3, 19, 91]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-53, 37, -112, 28, -57, 89, 109, 96, -110, -117, 16, -13, -27, -5, -53, -13, -67, -69, 17, 126, 120, -92, 123, 2, 66, 60, 123, 87, -57, -66, 5, 46, 118, 64, 84, 49, -12, -26, 28, -71, -94, 89, 91, -8, -109, 25, -102, -10]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-33, -66, 125, -93, 29, -7, -82, 63, -25, 73, -100, -27, -94, -1, -99, -112, -59, -119, -65, -16, -88, -126, 72, -124, 79, 42, -50, 52, -3, 83, 19, -108, 77, -6, -60, -98, 72, 40, 116, -106, 37, -97, 112, -7, -84, -74, 119, -46, -28, 116, 101, 29, -83, -50, -38, 72, -57, -30, 49, 6, 80, -73, 78, -80, 26, 32, 73, 5, 51, 70, 40, -95, -120, -55, 60, 105, -92, 43, -109, 21, -97, 35, 84, -33, -48, -58, 35, -109, -46, -14, 100, -96, 56, -97, -46, 112, 118, 64, 84, 49, -12, -26, 28, -71, -94, 89, 91, -8, -109, 25, -102, -10]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[84, 45, -44, -60, 72, 12, 83, -5, -109, -73, -98, -77, 9, 42, -69, 123, -73, -126, 32, -34, 57, -123, 93, 39, -40, -28, -77, 100, -126, -54, 4, 114, 123, -11, 76, -109, 89, 109, -18, 81, -47, 122, 25, -117, -50, 127, -98, -102, -38, 53, 57, -58, -93, -3, -94, 76, -44, -85, 108, -41, 127, -55, 81, -59, 108, 32, -39, 105, 18, 103, -12, -101, 31, 46, -62, 35, 28, 113, 92, 84, -96, 8, 114, 45, -59, -52, 96, -18, -103, -95, -59, -28, 79, -105, 57, -80, 118, 64, 84, 49, -12, -26, 28, -71, -94, 89, 91, -8, -109, 25, -102, -10]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-128, 50, 43, 48, -36, -69, -95, -107, 28, -61, -117, 15, -98, 68, -128, 117, -123, 126, 46, -124, 33, -101, 25, 99, 82, -62, -56, -34, -119, -35, -62, -11, -9, 118, -120, -84, -19, 5, -60, 71, -127, 18, -3, 92, -50, 83, 92, 112, -8, 45, 43, -36, 3, -28, -20, -102, 57, -116, 42, 68, 7, -82, -73, -72, -92, -61, 36, -20, 28, -55, 38, 121, -107, 87, 98, 11, -23, -77, 77, 76, 23, 79, -76, -46, 45, 102, -80, -13, -118, 42, 60, -117, -4, -34, 67, 79, 118, 64, 84, 49, -12, -26, 28, -71, -94, 89, 91, -8, -109, 25, -102, -10]");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "80322B30DCBBA1951CC38B0F9E448075857E2E84219B196352C2C8DE89DDC2F5F77688ACED05C4478112FD5CCE535C70F82D2BDC03E4EC9A398C2A4407AEB7B8A4C324EC1CC926799557620BE9B34D4C174FB4D22D66B0F38A2A3C8BFCDE434F76405431F4E61CB9A2595BF893199AF6" + "'", str19, "80322B30DCBBA1951CC38B0F9E448075857E2E84219B196352C2C8DE89DDC2F5F77688ACED05C4478112FD5CCE535C70F82D2BDC03E4EC9A398C2A4407AEB7B8A4C324EC1CC926799557620BE9B34D4C174FB4D22D66B0F38A2A3C8BFCDE434F76405431F4E61CB9A2595BF893199AF6");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.Class<?> wildcardClass30 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-91, 95, 68, -112, -54, 78, -72, 4, 43, -60, 25, 60, 33, 6, -101, -21]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-125, -18, 44, 123, -101, -9, 36, -84, 77, -119, -119, 51, 114, -108, -78, -92]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-62, 35, 109, -21, 17, 96, 44, 113, 51, 24, -115, -104, 34, 19, 23, 36]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-80, 74, -119, 78, -109, -36, -71, -8, 115, -27, 19, -61, 29, -16, -83, -112]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-26, -22, -63, -16, 23, -111, -50, -89, 122, 119, 0, 20, -96, 26, -14, -91, -18, -125, -85, -82, -56, -95, 15, -51, 103, 14, -38, -17, 105, 31, 21, -109, -62, 35, 109, -21, 17, 96, 44, 113, 51, 24, -115, -104, 34, 19, 23, 36]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-96, 25, -23, 120, 88, -46, -28, -50, -92, -117, -40, -128, 79, -107, 108, 4, 97, -123, -80, 32, -51, 33, -8, 75, 33, -74, -99, -83, 64, 6, 23, -68, -62, 35, 109, -21, 17, 96, 44, 113, 51, 24, -115, -104, 34, 19, 23, 36]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[18, 78, 41, -82, -98, 39, -124, -82, -48, -46, -120, -70, 51, 6, -102, 36, 23, 54, -62, -127, 1, -97, 97, -83, -64, -24, 44, 116, 80, -35, -102, 116, -62, 35, 109, -21, 17, 96, 44, 113, 51, 24, -115, -104, 34, 19, 23, 36]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "124E29AE9E2784AED0D288BA33069A241736C281019F61ADC0E82C7450DD9A74C2236DEB11602C7133188D9822131724" + "'", str29, "124E29AE9E2784AED0D288BA33069A241736C281019F61ADC0E82C7450DD9A74C2236DEB11602C7133188D9822131724");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey27);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey27);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[96, 113, -57, 77, -81, 18, 60, -113, 10, -87, 72, 0, 46, -52, 32, -115]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, -124, -69, 124, -4, -47, 14, 51, -97, 68, 50, 87, 92, 58, -75, -71, -85, 73, 13, -105, 97, 105, 24, -50, -22, 106, -31, 77, 16, 115, 41, 125, -114, 57, 31, 27, -39, 110, 118, 9, 89, 26, -3, 0, -1, -55, 50, 31, 35, -100, 112, 80, 33, 69, 19, 14, -28, -38, -33, 33, -18, -7, -52, 89, -32, -97, -68, -75, -55, 44, -81, -94, 60, -28, 63, -126, -110, 13, 112, 1, 105, 32, 27, 56, -110, 48, -6, -55, -19, 36, 110, 41, -123, 30, 50, 28, 96, 113, -57, 77, -81, 18, 60, -113, 10, -87, 72, 0, 46, -52, 32, -115]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0A84BB7CFCD10E339F4432575C3AB5B9AB490D97616918CEEA6AE14D1073297D8E391F1BD96E7609591AFD00FFC9321F239C70502145130EE4DADF21EEF9CC59E09FBCB5C92CAFA23CE43F82920D700169201B389230FAC9ED246E29851E321C6071C74DAF123C8F0AA948002ECC208D" + "'", str5, "0A84BB7CFCD10E339F4432575C3AB5B9AB490D97616918CEEA6AE14D1073297D8E391F1BD96E7609591AFD00FFC9321F239C70502145130EE4DADF21EEF9CC59E09FBCB5C92CAFA23CE43F82920D700169201B389230FAC9ED246E29851E321C6071C74DAF123C8F0AA948002ECC208D");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-115, -74, -52, -123, -11, 82, -33, -68, 54, 8, 25, -86, -79, -52, -66, -8]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[6, 67, 114, -35, 119, -104, 37, -114, -106, -33, -88, 69, -78, -12, 8, -40]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[64, 21, -61, 107, -72, -57, -42, -114, -52, -39, 117, -1, 117, -13, 77, 106]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[80, -24, 49, -84, 17, -18, 125, 32, -120, -93, 82, -83, -55, -20, -13, -41]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[43, -60, 29, 114, 7, 17, 66, 25, 29, 22, -17, -98, 97, 91, 95, 102, 31, -42, -26, 57, 5, 79, -125, -24, 68, -96, -88, -62, -90, 31, -12, -15, 64, 21, -61, 107, -72, -57, -42, -114, -52, -39, 117, -1, 117, -13, 77, 106]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-83, 114, 10, 90, -98, -62, -37, 94, -45, 112, -16, 109, 28, -112, 101, -4, -66, -88, -89, -4, 125, -31, 50, -26, 110, -15, 38, 28, 12, 63, -127, 55, -106, 5, 4, 20, 41, -24, 23, -3, -38, -15, 127, -89, -100, 58, -125, -43, 83, -2, 58, -40, 89, 83, -29, -107, -58, -71, -103, -10, -67, 86, -118, 90, -116, 14, 56, -69, -79, 31, 109, -113, 56, 94, -109, -61, 37, 121, 73, -46, 90, 114, 108, -62, -116, -78, -127, -97, 117, -75, 21, 42, 126, -20, -68, -26, 64, 21, -61, 107, -72, -57, -42, -114, -52, -39, 117, -1, 117, -13, 77, 106]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[42, 74, -52, 47, -125, 62, -98, 95, -28, 81, -39, 25, -116, 21, 39, 36, 56, -36, 8, 53, 9, 29, -125, 4, 48, 69, -107, 110, -97, -33, 23, 121, 64, 21, -61, 107, -72, -57, -42, -114, -52, -39, 117, -1, 117, -13, 77, 106]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[64, 21, -61, 107, -72, -57, -42, -114, -52, -39, 117, -1, 117, -13, 77, 106]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-88, 42, -22, 98, 120, -46, -2, 12, -124, 87, -58, -51, 52, 47, 119, 40, -59, 119, 9, -106, -122, -66, -62, 97, 84, 44, 88, -67, 30, -12, -37, -75, 64, 21, -61, 107, -72, -57, -42, -114, -52, -39, 117, -1, 117, -13, 77, 106]");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey24);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey24);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey24);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey24);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c", secretKey24);
        java.lang.Class<?> wildcardClass37 = secretKey24.getClass();
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-71, -5, 94, 34, -83, 105, -57, 0, -23, -118, -110, -84, 55, -54, -60, 86]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[62, -31, 91, 113, -125, -45, 43, -45, 2, -85, 104, -51, -8, -118, 75, 3]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-2, 70, -125, -52, -58, -111, -94, -54, -124, -123, -98, -121, -72, 110, -88, 37]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-41, -53, -44, -114, -108, 92, -87, 61, 50, 16, -15, 91, -53, 23, 51, 86]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[19, -68, -25, 95, 55, -119, -14, 4, -119, 8, 11, 75, 22, -100, -95, -22, 53, -89, 18, 114, 54, 47, 15, -128, -49, 104, 110, 121, -65, 39, -125, -108, -2, 70, -125, -52, -58, -111, -94, -54, -124, -123, -98, -121, -72, 110, -88, 37]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[37, 6, -106, -87, 104, -107, -100, -22, 63, 28, -7, -59, 54, -18, -28, -98, -90, 61, -123, 49, -53, 114, 48, 12, 110, 40, -88, -101, -115, -55, -78, -12, -2, 70, -125, -52, -58, -111, -94, -54, -124, -123, -98, -121, -72, 110, -88, 37]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[85, 87, -16, 41, 79, 40, -29, -65, 27, 123, 17, -83, -51, 5, -106, 83, -93, -56, 102, 74, 27, 36, -122, 1, 115, -77, -4, -34, -13, -18, -90, -100, -97, -119, 33, -13, -4, -125, -10, -93, 81, -50, -114, 45, 24, -125, -79, -3, -95, -39, 93, 95, 18, 67, 71, 86, -81, -88, -72, -21, 53, -76, 26, 68, -48, -76, -3, -10, -34, -11, -62, -128, 95, 112, -13, -118, 74, 9, 88, 125, 59, -70, 11, 80, -61, -71, 44, -65, -28, 30, 65, 11, -120, 47, 18, 69, -2, 70, -125, -52, -58, -111, -94, -54, -124, -123, -98, -121, -72, 110, -88, 37]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[9, -22, 56, 76, 83, 60, 51, -120, -96, 18, -60, 81, 62, 32, -120, 8, -12, -118, -128, 15, 23, 126, 86, -93, -112, -66, 54, 27, 30, -5, 86, -20, 34, 11, 47, -54, 52, 119, -48, -70, 60, 30, -44, -56, 14, 119, -66, 76, -20, -123, -26, 59, 23, -23, -83, 114, 57, 9, 110, 21, 56, 69, -7, 64, -68, 20, -91, -92, -30, 11, 75, 91, -128, -54, 29, -22, 3, 86, -77, 3, 73, -77, -115, 86, 105, -49, 116, -58, 68, -40, -120, 116, 14, 105, -41, 28, -2, 70, -125, -52, -58, -111, -94, -54, -124, -123, -98, -121, -72, 110, -88, 37]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-2, 70, -125, -52, -58, -111, -94, -54, -124, -123, -98, -121, -72, 110, -88, 37]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-86, 15, -100, -95, 87, 52, 4, 1, 17, -68, -67, -38, -44, 120, 90, -20, -11, -21, -20, -68, 99, 95, 87, -58, -33, 10, -61, -11, 36, 43, -105, 85, -2, 70, -125, -52, -58, -111, -94, -54, -124, -123, -98, -121, -72, 110, -88, 37]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-43, 46, 99, -114, -55, 69, -72, -23, 97, 23, -116, 89, -125, 12, 26, 98, 21, 22, -88, 125, -15, 49, 108, -116, -77, -66, -14, -9, -112, -52, 53, 22, 67, -80, -24, -72, 46, 43, -8, -106, -42, -60, 101, -50, 76, -73, -56, -125, -41, 96, 101, -47, 84, 35, 2, 78, 47, -21, -24, -28, 25, -102, 13, 90, -28, -67, -52, 38, 55, -87, 3, -14, -73, -69, -91, 121, -91, 118, 41, 71, 67, 83, 3, 50, -26, -82, -12, 17, -27, -77, 14, 6, -50, 115, -83, -104, -2, 70, -125, -52, -58, -111, -94, -54, -124, -123, -98, -121, -72, 110, -88, 37]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[87, 63, 99, 91, -46, -31, -66, 2, 55, 5, -58, 2, 26, -95, -128, 53, 73, -107, -39, -37, 113, -72, 30, -101, 21, -128, 86, 23, -48, -69, -51, -70, -60, 112, 8, -91, 81, -19, 65, 99, 9, -113, 0, 34, -71, -88, 3, -108, -108, 70, 44, 36, 104, -24, 122, 75, -22, -53, 117, 119, 95, -92, -55, -71, -25, 20, -116, -49, 13, -112, 33, 86, -74, 33, -16, -6, 30, 101, 77, -15]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey27);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey27);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey27);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[96, -78, 82, -40, 61, -113, 96, -99, -27, 25, -58, -5, -34, 18, -9, 125]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-40, 80, 50, -5, 82, 53, -5, -61, -35, 67, -76, 114, 29, 98, 50, -37]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[3, -81, -10, -12, -25, -98, -15, 58, -66, -124, 36, 27, -69, -125, 43, -28]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[96, -78, 82, -40, 61, -113, 96, -99, -27, 25, -58, -5, -34, 18, -9, 125]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 82, -37, -76, -101, -43, -50, -81, -106, 73, 5, 4, -20, 41, -110, -75, 102, -75, 36, 47, -96, 98, 39, 31, -17, 56, 100, 34, 112, 7, -55, -14, 96, -78, 82, -40, 61, -113, 96, -99, -27, 25, -58, -5, -34, 18, -9, 125]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[5, -62, 75, 47, -111, 6, 118, 29, -7, -48, 19, -1, -99, 44, 112, 78, 84, 72, -38, 121, -117, -79, 10, 65, -28, 31, 48, -29, 43, -46, 6, 78, 96, -78, 82, -40, 61, -113, 96, -99, -27, 25, -58, -5, -34, 18, -9, 125]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[3, -81, -10, -12, -25, -98, -15, 58, -66, -124, 36, 27, -69, -125, 43, -28]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2140EE6152D4051C10F49F67830BF88E8D709F93E580211AA1F89FF04E14EE81D9F82CDBBBDC13A5FB0496B25CFD1AF8A04639530480AFB3AA9059B38510CA38B105EBD8B7D1D330D5A43C9B7BB61A29E2FB1445F4D8B3DB589732D18B34352CC409EA60992EB480B1A3618364B5788547753816D77A85BA2D96F8AA020C893ACE7EFD2AC13C8464A3448A2D4B73403F21F51C3E993F680FDDC18E9F2D28BAC10DDDF9B9D40B03DC33E9BB206E22E671B3B91243B8E0698510840DDA79C6E48CA03FBCB819FBEDE145639B5411EBAB61D1F9565D389D3215B04F3ACF886E35B760B252D83D8F609DE519C6FBDE12F77D" + "'", str17, "2140EE6152D4051C10F49F67830BF88E8D709F93E580211AA1F89FF04E14EE81D9F82CDBBBDC13A5FB0496B25CFD1AF8A04639530480AFB3AA9059B38510CA38B105EBD8B7D1D330D5A43C9B7BB61A29E2FB1445F4D8B3DB589732D18B34352CC409EA60992EB480B1A3618364B5788547753816D77A85BA2D96F8AA020C893ACE7EFD2AC13C8464A3448A2D4B73403F21F51C3E993F680FDDC18E9F2D28BAC10DDDF9B9D40B03DC33E9BB206E22E671B3B91243B8E0698510840DDA79C6E48CA03FBCB819FBEDE145639B5411EBAB61D1F9565D389D3215B04F3ACF886E35B760B252D83D8F609DE519C6FBDE12F77D");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-4, -106, -121, 19, 126, -99, 16, -69, -75, 123, -125, -59, 52, 74, 12, 59]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-94, -105, 85, 115, -66, 82, 66, -67, -80, -50, 113, 102, -22, 92, -24, 60]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-94, -105, 85, 115, -66, 82, 66, -67, -80, -50, 113, 102, -22, 92, -24, 60]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-88, -72, 53, 74, -5, 45, 47, 126, 31, -11, -118, -97, 35, -87, -76, 26]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-94, -105, 85, 115, -66, 82, 66, -67, -80, -50, 113, 102, -22, 92, -24, 60]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-56, 19, -43, 120, -42, -78, -12, 59, 110, -79, 42, 91, 107, 40, -33, 3, 26, -113, -30, -9, 54, 57, 90, -65, -25, -72, 83, 57, 23, 41, -92, 5, -4, -106, -121, 19, 126, -99, 16, -69, -75, 123, -125, -59, 52, 74, 12, 59]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-69, 1, -19, -12, 42, 21, -28, -118, -16, 71, 53, 101, -101, -47, -74, -44, -21, 19, 39, 62, 25, -96, 8, -62, -69, 124, -6, -99, -34, -15, 20, 90, -120, 112, 49, 100, -22, -108, 54, -28, -99, 45, -31, -124, -113, 112, 66, 95, 25, 37, 100, -21, 44, -1, 62, -96, -61, -18, 53, 36, -20, -25, 4, -85, -2, 43, 59, 21, 9, -109, -105, 75, 102, -34, 61, 56, 122, 92, 127, -102, -104, -38, -1, 13, 107, 1, -9, 103, -124, 12, -25, 73, 55, 17, 22, -36, -4, -106, -121, 19, 126, -99, 16, -69, -75, 123, -125, -59, 52, 74, 12, 59]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-122, 46, 23, -95, -44, 20, 30, 39, 105, 27, 116, 21, 37, 74, 18, -88, 112, 22, 43, -100, -98, -9, 34, 93, -127, -27, 35, -80, 109, 40, 40, 30, 39, 55, 84, -31, 127, -66, -10, 9, 42, -126, -15, 113, -95, 19, -16, -100, -34, 43, 28, 81, 125, -116, 82, -48, 31, -41, -103, 121, 64, -71, -75, 12, 49, 78, -84, 96, 4, -50, -48, -102, -76, -9, -50, 11, 95, -100, -4, 31, -31, 84, -21, -35, -92, -72, 30, -15, 91, -7, 31, -28, -17, 25, 119, -53, -4, -106, -121, 19, 126, -99, 16, -69, -75, 123, -125, -59, 52, 74, 12, 59]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 14, -85, 53, -62, -57, -39, -103, -108, -124, 81, -118, 123, -117, -7, -24, 114, 114, -60, -29, -81, 22, -11, 75, 80, 99, 64, -115, 8, -109, -94, 15, -4, -106, -121, 19, 126, -99, 16, -69, -75, 123, -125, -59, 52, 74, 12, 59]");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey6);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey34);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey34);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey34);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey34);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-102, 38, 0, -16, -14, 23, -41, -57, 62, 121, -8, 33, 107, 20, -36, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-111, 12, 94, -57, -82, -27, 0, 87, -37, -76, -11, 92, 108, 66, -58, -27]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-103, -10, 12, 86, 46, -95, 115, -125, 7, 83, 22, -68, -53, 2, -71, -87, -92, 87, 31, 61, -41, 46, 78, -121, 47, -18, 25, -110, -64, -71, -53, 54, 123, 1, -119, 32, 19, 51, 21, 89, 116, -79, 54, 52, -46, 50, 8, -38, 42, -111, 81, -75, -58, 53, 18, 32, -32, -35, 82, 62, 75, 79, 92, 126, -103, -91, -40, 123, -8, -95, 31, 38, -85, 23, -83, -38, -43, 91, -104, -99, -70, -85, 80, -25, 39, 115, 71, 52, -98, 83, 122, -77, -33, -20, 81, -119, -102, 38, 0, -16, -14, 23, -41, -57, 62, 121, -8, 33, 107, 20, -36, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[84, -81, 16, 105, -100, 1, -78, 98, 29, -38, 44, 80, 65, 113, -110, -126, 19, 94, -123, 2, 87, 28, -98, 101, 114, -5, -70, -66, 83, -32, 94, 88, -102, 38, 0, -16, -14, 23, -41, -57, 62, 121, -8, 33, 107, 20, -36, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[23, -2, 102, -4, 105, -121, 124, -72, 5, -43, -125, -81, -13, 21, -99, 29, -104, 39, -114, 72, -68, 77, 80, -45, -53, 33, 69, -79, -97, 0, -87, 14, -102, 38, 0, -16, -14, 23, -41, -57, 62, 121, -8, 33, 107, 20, -36, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[107, 118, 99, 32, 61, 99, -33, -68, 104, -79, -72, 92, -86, -71, -14, -55]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[25, 121, 112, -77, -3, 52, -19, -10, -117, 94, 70, 112, -51, -77, -34, -75]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, -117, 55, -105, 85, 112, 66, -76, -53, 125, 52, 59, 34, 13, -66, 58]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[125, -8, -125, -56, 14, 2, 35, -59, 118, 92, 36, 73, 58, -124, -17, -2]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 21, 59, 18, 44, -79, 57, -14, -43, 41, -25, 34, 21, 48, -21, 89, -125, -23, -80, -116, 60, -114, -102, 33, -79, -59, 9, -53, 74, -109, 51, -46, 81, -117, 55, -105, 85, 112, 66, -76, -53, 125, 52, 59, 34, 13, -66, 58]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[116, 55, 116, -109, 24, -84, -97, 121, -80, -112, 17, -16, -16, -111, 39, -74, -75, 32, -6, 56, -31, -63, 105, 101, -84, 4, -46, -15, 39, -90, 22, -103, 81, -117, 55, -105, 85, 112, 66, -76, -53, 125, 52, 59, 34, 13, -66, 58]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-81, 61, -65, -33, 89, 70, 107, -62, 92, -87, -77, -89, 14, -26, 33, 114, 51, 79, 9, -23, -86, -101, 120, 42, 22, 93, -66, -34, 120, 95, 3, -124, -128, 19, 10, -22, -7, -26, -124, 78, 49, 75, -125, -92, 86, 41, -37, 76, -73, 116, 31, 48, 112, 117, 10, 103, 32, 2, 23, 73, -77, -61, 45, -2, -75, 96, 108, -121, 44, 97, -58, 67, 57, 17, 55, -101, -1, 49, 53, 85, -97, 117, 67, 5, -106, -101, 67, 120, -98, 49, -12, -12, 54, 34, -13, 76, 81, -117, 55, -105, 85, 112, 66, -76, -53, 125, 52, 59, 34, 13, -66, 58]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[21, -114, -9, -17, -25, -13, -83, 5, -56, -51, -69, 47, -60, 46, -19, -63, -36, -12, -19, 9, -127, -14, -35, -123, 104, 33, 21, 123, -23, -117, -91, 105, -101, 12, 34, 27, -77, 110, 69, 106, -49, 100, 51, 118, 74, -4, 74, 48, 34, 32, 64, 26, 40, 105, -65, 13, 7, -29, 52, -60, 107, -9, -51, 78, 86, -112, 73, -119, 72, 22, -109, 109, 25, 117, 112, -87, 79, 62, 28, 117, -109, -86, -43, 23, -65, 116, 107, 68, -99, -122, 52, 17, 64, -120, -93, 30, 81, -117, 55, -105, 85, 112, 66, -76, -53, 125, 52, 59, 34, 13, -66, 58]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[125, -8, -125, -56, 14, 2, 35, -59, 118, 92, 36, 73, 58, -124, -17, -2]");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        byte[] byteArray67 = new byte[] {};
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray67);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey69);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey73);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey73);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey84 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey84);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey84);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey84);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey84);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey84);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey84);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey84);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[44, -122, 73, -12, -40, 39, 35, -9, -49, -60, 111, -52, -57, -2, 66, -124]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[96, 82, -125, -97, -73, 81, -58, -22, -49, -116, -89, 46, 33, 89, 10, -32]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-9, -125, -10, -39, 0, -86, 95, 70, 11, -50, 52, 52, 25, 80, -71, -87]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[37, -14, 62, -122, 51, 52, -42, -44, -68, 61, -62, -36, 105, 0, -91, -27]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[101, 85, -58, 106, 107, -13, 7, -87, -96, -125, 70, -70, -114, 58, 41, 78, -37, 67, 103, 100, -101, 30, -76, 21, 109, 63, -42, -2, -103, -61, -85, -60, -9, -125, -10, -39, 0, -86, 95, 70, 11, -50, 52, 52, 25, 80, -71, -87]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[82, -111, -63, 92, -103, 93, 108, -104, 87, 110, 96, 46, -27, -84, 89, 113, -31, -42, -63, 67, -119, 123, 31, -74, -17, -84, -113, 79, 18, 113, 104, -92, -9, -125, -10, -39, 0, -86, 95, 70, 11, -50, 52, 52, 25, 80, -71, -87]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-48, 99, -94, -109, -70, 17, 91, -123, -27, -102, -25, -8, -92, -6, 58, -88, 7, 27, -36, -93, -28, -80, -9, -66, 78, -91, -18, 76, -91, -29, 34, -46, -73, -113, -26, -76, 72, -31, -3, -110, 75, -109, -21, -42, 39, -50, -62, -100, -44, 41, 117, -6, 46, 111, 21, -28, 60, 97, 40, 69, -92, 85, -49, -100, -56, -63, -110, -116, -48, 102, 120, 76, -59, 65, 93, -2, 27, -63, 52, 9, -12, -40, 70, 10, -53, 29, 3, -23, -61, -51, 46, 126, 93, -74, 43, -78, -9, -125, -10, -39, 0, -86, 95, 70, 11, -50, 52, 52, 25, 80, -71, -87]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-58, -21, 66, 32, -54, -9, -66, -108, -83, -98, -9, 21, 14, -64, 9, 126, -31, -83, 43, 57, -95, 70, -117, -103, -73, -90, -126, 66, 18, -80, 61, -37, 37, -45, 83, 4, 118, 34, 30, -117, 35, -8, -31, 115, 92, -98, -30, 51, 22, 60, 106, -97, -85, -80, 57, -5, -29, 35, 36, -118, -45, 119, -55, 65, 120, 18, -92, 14, -104, 52, -118, -21, 89, 72, -109, 100, -104, -14, 88, 68, 11, 50, -127, 39, -18, -50, -123, 103, 18, -56, -80, -88, -81, 11, 26, -33, -9, -125, -10, -39, 0, -86, 95, 70, 11, -50, 52, 52, 25, 80, -71, -87]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[78, 115, -1, 25, 119, 89, -65, 8, -55, -22, -101, -55, -36, -22, 91, -117, 13, 12, 123, -102, -35, 89, 20, -101, -109, -4, 50, -17, 116, -3, 10, -19, 88, -59, 105, -13, 112, -12, 48, 65, 27, 70, 82, 51, -85, -34, -117, 60, -122, -19, 72, 103, 1, 58, -75, -93, -117, -33, -55, 81, 36, 23, -35, 86, -24, 71, -103, 83, 93, 95, -58, 8, 105, -104, 69, -23, -63, -53, 15, 1, -98, 98, 8, -29, -83, 26, 22, -14, -54, 39, 43, 12, 37, -22, 19, -114, -9, -125, -10, -39, 0, -86, 95, 70, 11, -50, 52, 52, 25, 80, -71, -87]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-9, -125, -10, -39, 0, -86, 95, 70, 11, -50, 52, 52, 25, 80, -71, -87]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[79, 49, 32, -23, -62, 18, 50, -64, 21, -56, 22, -64, -103, -51, 80, -59]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-107, 2, -8, 84, 10, 57, 34, 53, -8, 89, 67, 54, -62, -122, 60, -93]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-80, 97, -16, 84, -122, 101, 95, -66, -78, 85, 114, 5, 97, -97, 13, 66]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-16, -13, 3, -7, -9, 67, 124, 39, 27, 120, -53, -80, 20, -90, -123, -20]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[90, -17, -122, 114, 43, -88, -123, -96, -61, 29, -103, 102, 5, 31, -97, -19]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100, -22, 10, -53, -84, -64, 15, 110, -46, -83, 25, 122, -46, -40, -101, -55]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[90, -103, -23, 35, 120, -14, -101, 2, 18, 5, -74, -63, 36, -50, -40, -23]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-65, 97, 56, -103, 6, 60, -45, -101, -93, -76, -88, -69, -32, 17, 54, 119]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(secretKey84);
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-34, -50, -117, -19, -45, 35, 115, -4, -43, -71, 76, -29, -116, 71, 45, 32]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[83, -54, -58, -113, -8, -63, -6, -93, -60, 119, 79, 10, -111, 35, 91, -30]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[40, -61, 46, 79, 99, -106, -110, -53, -117, -128, -43, -29, 27, -38, -24, 23]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-34, -50, -117, -19, -45, 35, 115, -4, -43, -71, 76, -29, -116, 71, 45, 32]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-18, 85, 82, -103, -98, -54, -21, 65, -76, 38, 95, 119, 19, -28, 85, 75, -45, 115, 122, -33, 63, 25, -58, 86, -57, -75, 100, -48, 36, -45, 111, -101, -34, -50, -117, -19, -45, 35, 115, -4, -43, -71, 76, -29, -116, 71, 45, 32]");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey30);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey62);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey62);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey62);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey62);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey62);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("85901A7A07774EF1B30A7D77F78D499830E94396D39F6D0A240A6BA509D22CD00BBA7DCDA4CC37D69BA13844D5AF219C", secretKey62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey62);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[96, -99, 118, 17, 59, -21, -95, 32, -23, -4, -73, -106, 18, -94, 92, 101]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-4, -115, 75, 52, -33, 74, -128, -56, -60, -96, -95, 61, -125, 73, 93, -107]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 99, 27, -113, -68, 124, 87, -22, -52, -85, 15, 67, 126, -112, 82, 42]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, -50, -75, 58, -111, -2, 100, 80, 54, -117, -63, 52, -71, -35, -13, -49]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-15, -101, -23, -89, 91, -30, 27, 28, -13, -113, -97, 41, 78, 37, -44, -50]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[43, 44, -43, 77, 35, -7, 99, 127, 15, 107, 90, -11, -38, 25, -118, -42]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-44, 113, 64, 84, -3, 91, 51, 15, -52, 47, -75, -84, -104, -52, -36, 27, 45, -101, -23, 57, 23, 118, -45, 0, 84, -124, 32, 61, 118, -89, 70, 2, -15, -101, -23, -89, 91, -30, 27, 28, -13, -113, -97, 41, 78, 37, -44, -50]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 68, 8, -55, 98, -35, -3, 31, -55, 126, -83, 40, 33, -82, 109, 1, 57, -46, 100, 1, 59, -22, -31, 51, -87, -89, -31, 67, 66, 120, 121, -12, -15, -101, -23, -89, 91, -30, 27, 28, -13, -113, -97, 41, 78, 37, -44, -50]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 103, -35, -114, 80, -25, -109, 93, 97, -112, -32, 94, 111, -54, 72, -59, -53, 105, -6, 30, -8, -113, 79, 30, -17, 26, -33, 32, 89, -66, -86, 68, -114, -17, -69, 9, -30, 118, -127, 20, -114, -128, -122, -117, -92, 84, 67, -118, -69, -20, -103, -88, -95, 33, 77, -76, -29, 121, 18, -121, 90, 58, 96, -65, 1, 94, -2, -71, -127, -7, -75, -121, -6, -36, 84, 34, -98, 99, -2, -48, 102, -113, 42, -112, -89, 87, 74, -38, -77, 91, -78, 19, 87, -36, 78, 115, -15, -101, -23, -89, 91, -30, 27, 28, -13, -113, -97, 41, 78, 37, -44, -50]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[31, -105, 26, 75, 9, 54, -27, 33, 116, -57, -64, 7, -32, -52, 93, 62]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[98, 27, -92, -68, 110, 74, 41, 124, -120, -59, 108, 7, 48, 105, -16, -3]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[108, 63, 70, -97, -97, 46, 69, 5, 118, -43, 78, 121, 4, 8, -96, 46]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[6, 114, -25, -33, -15, -1, -64, -24, 127, -74, -40, 31, 38, 61, 5, -90]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[90, 3, 50, 40, -17, -10, -123, -48, 118, -40, 111, 25, -9, -55, -28, -75, -38, 86, 102, -74, 48, 75, 25, 36, -11, -67, 39, -108, -46, -102, -70, -21, 108, 63, 70, -97, -97, 46, 69, 5, 118, -43, 78, 121, 4, 8, -96, 46]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[108, 63, 70, -97, -97, 46, 69, 5, 118, -43, 78, 121, 4, 8, -96, 46]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[6, 114, -25, -33, -15, -1, -64, -24, 127, -74, -40, 31, 38, 61, 5, -90]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[115, 47, -119, -66, 88, -68, 94, 5, 32, 109, -125, 19, -44, -100, 107, -101, -64, -105, -105, 52, -61, 87, 125, 23, 100, 88, -96, 107, 19, -31, 95, 24, 108, 63, 70, -97, -97, 46, 69, 5, 118, -43, 78, 121, 4, 8, -96, 46]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-71, -116, 126, -69, -21, 20, 10, -106, 99, -104, 83, 111, -79, -9, -123, 32, 66, -106, 54, -112, 115, -127, 66, -79, 106, -88, -58, -53, 26, 103, -113, -78, -41, 29, -53, 108, 72, 19, -119, 85, -61, 115, -29, 60, -57, -85, 122, -51, -103, 80, 15, 23, 31, -58, -14, -118, 87, -57, -1, 82, 108, 81, 103, -63, -126, 47, 124, -127, -18, 15, 96, -94, -73, 110, 70, -58, 36, 117, -88, 77, -16, -18, 71, 91, 6, -71, 0, -103, -54, -65, 10, -85, 31, 35, 89, 100, 108, 63, 70, -97, -97, 46, 69, 5, 118, -43, 78, 121, 4, 8, -96, 46]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[51, 24, -2, 87, 85, -16, 47, 118, 125, 100, 62, 110, -119, 27, -19, -3, 116, -42, 52, -79, 77, -52, -32, 20, 57, -35, 77, -5, -83, -117, 7, 59, -24, 38, 50, 73, 11, 92, -27, -100, 14, -71, -72, 103, 113, -121, -68, -94, -50, -36, -108, -75, -44, 125, -99, -88, 107, 47, -15, 25, -64, -56, 17, -84, -61, -122, 17, 70, 72, -43, 21, -84, -102, 8, -55, 6, 97, -107, 64, -42, -40, -84, 84, 122, 35, -76, 64, 1, 71, -51, -68, -112, 121, 125, 32, 0, 108, 63, 70, -97, -97, 46, 69, 5, 118, -43, 78, 121, 4, 8, -96, 46]");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.Class<?> wildcardClass15 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[49, -120, 45, 121, -87, -105, 77, -123, -51, 109, -94, 105, 72, -81, 94, -68]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[9, 58, 65, 53, -65, 19, 113, -95, -79, 19, -37, -80, -31, -126, 42, 112]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[9, 58, 65, 53, -65, 19, 113, -95, -79, 19, -37, -80, -31, -126, 42, 112]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[89, 31, -71, -45, 17, 84, -66, -27, -59, 93, -110, 24, 90, 70, 45, 75]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[49, -120, 45, 121, -87, -105, 77, -123, -51, 109, -94, 105, 72, -81, 94, -68]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "4041497A300D0780B570DE922B273360743D344C78BE821EA90EE80EAF3B40FA64B50ED228955F5780CEAA767E554F0897F6CC168FBEF75A3EB32D0C1833E4406A0A0BF2164093149B0CD5BF7E9F1088E38DE0998D69A74C583F4B4E6A882744993367B4B2E7854B3C4CE07C47A5002A49003572198256BAC143ADD95B24ADD9FF6176AC6E40F297721251644E04B2E2EF3CBA8A235C10A3FF6336D061F532C6218686A1363C7DDE7A52B9C3254057A27A7D303448D0CD6E8179AFCA6436B0841167EA32255EEBD7ECC1F69989D0A1F294BD46C97AF73DB39BE710DA9D6DC34B31882D79A9974D85CD6DA26948AF5EBC" + "'", str13, "4041497A300D0780B570DE922B273360743D344C78BE821EA90EE80EAF3B40FA64B50ED228955F5780CEAA767E554F0897F6CC168FBEF75A3EB32D0C1833E4406A0A0BF2164093149B0CD5BF7E9F1088E38DE0998D69A74C583F4B4E6A882744993367B4B2E7854B3C4CE07C47A5002A49003572198256BAC143ADD95B24ADD9FF6176AC6E40F297721251644E04B2E2EF3CBA8A235C10A3FF6336D061F532C6218686A1363C7DDE7A52B9C3254057A27A7D303448D0CD6E8179AFCA6436B0841167EA32255EEBD7ECC1F69989D0A1F294BD46C97AF73DB39BE710DA9D6DC34B31882D79A9974D85CD6DA26948AF5EBC");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "4041497A300D0780B570DE922B273360743D344C78BE821EA90EE80EAF3B40FA64B50ED228955F5780CEAA767E554F0897F6CC168FBEF75A3EB32D0C1833E4406A0A0BF2164093149B0CD5BF7E9F1088E38DE0998D69A74C583F4B4E6A882744993367B4B2E7854B3C4CE07C47A5002A49003572198256BAC143ADD95B24ADD9FF6176AC6E40F297721251644E04B2E2EF3CBA8A235C10A3FF6336D061F532C6218686A1363C7DDE7A52B9C3254057A27A7D303448D0CD6E8179AFCA6436B0841167EA32255EEBD7ECC1F69989D0A1F294BD46C97AF73DB39BE710DA9D6DC34B31882D79A9974D85CD6DA26948AF5EBC" + "'", str14, "4041497A300D0780B570DE922B273360743D344C78BE821EA90EE80EAF3B40FA64B50ED228955F5780CEAA767E554F0897F6CC168FBEF75A3EB32D0C1833E4406A0A0BF2164093149B0CD5BF7E9F1088E38DE0998D69A74C583F4B4E6A882744993367B4B2E7854B3C4CE07C47A5002A49003572198256BAC143ADD95B24ADD9FF6176AC6E40F297721251644E04B2E2EF3CBA8A235C10A3FF6336D061F532C6218686A1363C7DDE7A52B9C3254057A27A7D303448D0CD6E8179AFCA6436B0841167EA32255EEBD7ECC1F69989D0A1F294BD46C97AF73DB39BE710DA9D6DC34B31882D79A9974D85CD6DA26948AF5EBC");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("1DAAFB903B39AC426EE0EBBB5B8EA339FF6DE65AD6895DB32CDB9E9DC9B2A8DE1A0110CDE63EFA1B4628E19E64B932D2F86ADAD3C92E58420AD7019B8C6799C534B6ADC977BF960688E8D2B071F966E620AC291198850B13E49230BCEA6D76BF0DD2E53B33347CA9E25655AA95C48399", secretKey3);
        java.lang.Class<?> wildcardClass7 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[59, -107, -67, -94, -99, -4, 20, -66, 46, -107, 52, 113, -58, -25, -25, 74]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[60, -30, -104, 61, -54, -127, -108, -103, 88, 71, -12, -118, 87, -29, -15, 83, 46, 45, 15, -102, -109, 48, -2, -68, -22, -39, -110, -73, -126, -111, 73, -39, 53, 61, 36, -4, -72, -64, -15, -32, -121, 0, -118, -59, 2, -109, 50, -87, -30, -87, 31, -102, 53, -69, -46, -87, 48, -55, 41, -13, -49, -113, -80, 48, -48, 23, 118, 22, 6, 100, -123, 46, -26, -118, 122, 71, -18, 70, -97, 44, 51, 58, -114, -73, 32, -61, 23, -10, -128, -38, -53, -42, 108, -113, -10, 23, 59, -107, -67, -94, -99, -4, 20, -66, 46, -107, 52, 113, -58, -25, -25, 74]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey17);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey17);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey17);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[111, -128, 107, -109, 99, -128, -22, -29, -8, 70, 85, 66, 30, -19, -87, -127]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-76, -57, 61, -49, 5, -46, 21, 69, 64, -7, 100, 79, 83, -41, -32, -93]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-90, -78, -72, 42, -62, 60, -115, 52, 74, 94, -62, -54, 3, 41, 122, -66]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[111, -128, 107, -109, 99, -128, -22, -29, -8, 70, 85, 66, 30, -19, -87, -127]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-70, 41, -27, -95, -88, 33, -28, -99, -105, -70, 45, 121, 32, 114, -40, 16, -39, 46, 122, -117, -56, 33, 79, -77, -26, -7, -18, -68, 34, 72, -72, 16, 111, -128, 107, -109, 99, -128, -22, -29, -8, 70, 85, 66, 30, -19, -87, -127]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[111, -128, 107, -109, 99, -128, -22, -29, -8, 70, 85, 66, 30, -19, -87, -127]");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[106, 80, 98, 42, 60, -24, -110, 50, 39, -61, 29, 119, -84, -108, 104, 126]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[89, 60, 52, 18, 6, -71, -62, -105, -79, -97, -82, 27, 44, 102, -84, 43]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-117, -35, -38, -89, -50, 126, -8, -120, 33, 77, -76, 111, 38, 45, -97, 121, -107, -100, -118, 41, 47, -90, -109, 116, 113, -35, -13, -99, -15, -126, 13, 60, 106, 80, 98, 42, 60, -24, -110, 50, 39, -61, 29, 119, -84, -108, 104, 126]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-72, 77, -20, -91, -83, -74, -8, -111, -86, -48, -42, -79, 106, 3, -63, -12, -126, 79, -91, 93, 64, -28, 95, 99, 91, -5, -99, 27, -86, 6, 36, 103, 106, 80, 98, 42, 60, -24, -110, 50, 39, -61, 29, 119, -84, -108, 104, 126]");
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        byte[] byteArray68 = new byte[] {};
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray68);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey70);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey74);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey74);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey85);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey85);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey85);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[4, -58, -87, -74, -105, 34, -20, -113, -125, -76, 90, -103, -112, -56, 125, -28]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-28, 88, 26, 114, 37, -64, -88, -85, -16, -35, 125, 10, 42, 60, 57, 108]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[6, 55, 55, 90, -79, -25, 96, -42, -116, -97, 54, 23, 54, 85, 71, -101]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-66, -79, 92, -117, 104, -87, -19, 85, 66, 20, -74, -46, -75, -51, 30, 29]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-83, 95, 33, -18, 69, 19, 12, 110, -26, 85, 57, 106, -66, 112, 54, 108, 26, 77, -51, 88, -33, -68, 16, 87, 10, 99, 90, 64, 48, 32, 24, 65, 6, 55, 55, 90, -79, -25, 96, -42, -116, -97, 54, 23, 54, 85, 71, -101]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[6, 55, 55, 90, -79, -25, 96, -42, -116, -97, 54, 23, 54, 85, 71, -101]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-66, -79, 92, -117, 104, -87, -19, 85, 66, 20, -74, -46, -75, -51, 30, 29]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-3, 46, 45, -60, -123, 1, -114, 14, -120, -128, 3, -73, -21, -99, 109, -113, -32, 82, 16, -125, -47, -58, -113, -30, -74, 118, -1, -27, -36, -24, 78, 49, 6, 55, 55, 90, -79, -25, 96, -42, -116, -97, 54, 23, 54, 85, 71, -101]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[20, 80, -38, 74, 97, -116, -80, -70, -63, 76, 79, -11, 40, -99, -115, -82, 34, -18, 114, -26, -119, -115, -22, -42, 110, 45, 22, 5, -69, 37, 127, -58, -59, 92, -18, 96, -75, 40, -38, -23, 4, 110, 92, 66, 43, -119, -73, 12, 123, -76, 6, -122, -48, 21, 100, -101, -108, -68, 10, 75, -68, 18, -62, 20, -127, -67, -29, -46, -58, 102, -120, 17, 56, 90, 109, -24, 26, 30, -28, -94, 15, 8, 107, 59, 24, -11, 25, -112, 61, -26, 76, 51, 111, 0, 99, -7, 6, 55, 55, 90, -79, -25, 96, -42, -116, -97, 54, 23, 54, 85, 71, -101]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1450DA4A618CB0BAC14C4FF5289D8DAE22EE72E6898DEAD66E2D1605BB257FC6C55CEE60B528DAE9046E5C422B89B70C7BB40686D015649B94BC0A4BBC12C21481BDE3D2C6668811385A6DE81A1EE4A20F086B3B18F519903DE64C336F0063F90637375AB1E760D68C9F36173655479B" + "'", str31, "1450DA4A618CB0BAC14C4FF5289D8DAE22EE72E6898DEAD66E2D1605BB257FC6C55CEE60B528DAE9046E5C422B89B70C7BB40686D015649B94BC0A4BBC12C21481BDE3D2C6668811385A6DE81A1EE4A20F086B3B18F519903DE64C336F0063F90637375AB1E760D68C9F36173655479B");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1450DA4A618CB0BAC14C4FF5289D8DAE22EE72E6898DEAD66E2D1605BB257FC6C55CEE60B528DAE9046E5C422B89B70C7BB40686D015649B94BC0A4BBC12C21481BDE3D2C6668811385A6DE81A1EE4A20F086B3B18F519903DE64C336F0063F90637375AB1E760D68C9F36173655479B" + "'", str32, "1450DA4A618CB0BAC14C4FF5289D8DAE22EE72E6898DEAD66E2D1605BB257FC6C55CEE60B528DAE9046E5C422B89B70C7BB40686D015649B94BC0A4BBC12C21481BDE3D2C6668811385A6DE81A1EE4A20F086B3B18F519903DE64C336F0063F90637375AB1E760D68C9F36173655479B");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[91, -12, 6, -69, -103, -76, -98, 113, -52, -71, -10, -85, 41, 70, 119, -80]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[105, 37, 110, 102, -103, -93, -113, 75, -77, -58, 68, -101, 44, -69, 64, 3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[104, -32, 91, 15, 45, -39, 70, -34, -63, 92, -109, 19, 33, 72, 110, -95]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[93, 118, -9, -81, 9, -38, -53, 44, -1, -12, -84, -39, -79, -89, 15, -28]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-77, -27, 53, -68, 27, 94, -86, 104, -125, 103, 93, -119, 45, 88, -30, -110]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-79, 12, -86, 115, 10, 78, -35, 39, 98, -62, -102, 105, 68, -10, -51, 91]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[41, 20, -97, 55, -109, -21, -52, -42, -26, 59, -13, -46, 82, 93, 43, 54]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[97, 99, -65, 84, -49, -72, -3, 74, 14, 94, -127, -16, -52, 79, 32, -8]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[69, -52, -51, -33, -79, 50, -25, 67, 31, 60, -112, -5, -105, -53, -111, 102]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-101, 115, 3, -1, 30, -35, 61, -73, 56, 62, 94, 5, -49, -53, 33, -117]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-127, 102, 101, -69, -124, -6, -8, 97, 75, 125, -3, -114, 69, 102, -44, -22]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[69, -52, -51, -33, -79, 50, -25, 67, 31, 60, -112, -5, -105, -53, -111, 102]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-124, 28, -6, 3, 28, -91, -91, -79, -6, -78, 35, 75, 108, 121, -68, 75, 100, 78, -30, 106, -75, -70, -23, -98, 81, -16, 90, -38, 63, -114, 100, 88, 69, -52, -51, -33, -79, 50, -25, 67, 31, 60, -112, -5, -105, -53, -111, 102]");
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey28);
        java.lang.Class<?> wildcardClass36 = byteArray35.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-106, 80, -33, 52, 80, -95, 20, -65, -111, 7, 58, -52, 6, 94, 56, 43]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[74, -22, 32, -127, 90, -48, 26, 105, -117, -119, -16, -38, -87, -3, -7, -10]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-128, -70, -75, -41, -80, 78, 116, 78, 101, 113, 90, 13, 21, -33, -68, 127]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-26, 16, -32, 46, -5, 70, 61, 94, 26, -28, -84, 86, 87, -120, 2, 120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, -31, -85, 79, -41, -127, -66, -31, -4, 115, -46, -41, -54, -92, -101, -27]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-20, -8, -114, 101, -99, -99, -14, -61, 49, -118, 91, -108, 25, 27, -121, 27]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-20, -8, -114, 101, -99, -99, -14, -61, 49, -118, 91, -108, 25, 27, -121, 27]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-69, 88, 56, -14, -61, 111, 106, 62, -109, 122, 39, 27, -107, 75, 93, -56, 80, -7, 7, -58, -44, 53, 77, 44, 104, -71, -5, 75, -79, -108, 94, -53, -1, -31, -85, 79, -41, -127, -66, -31, -4, 115, -46, -41, -54, -92, -101, -27]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-47, -74, -75, -7, 21, 47, 44, -9, -122, 16, 99, 44, -3, -47, -88, 68, 91, -1, -23, 102, -70, 123, -49, -23, -80, 95, -100, -4, 59, -102, 72, 60, -1, -31, -85, 79, -41, -127, -66, -31, -4, 115, -46, -41, -54, -92, -101, -27]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey7);
        java.lang.Class<?> wildcardClass15 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[88, 111, 3, 100, 98, -70, 72, -11, -96, 92, 98, -82, 77, -50, 96, -86]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-61, -15, 27, -90, -40, 10, -41, -98, 116, -102, -75, 126, 57, 56, 94, -39]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-61, -15, 27, -90, -40, 10, -41, -98, 116, -102, -75, 126, 57, 56, 94, -39]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-104, 54, 14, -41, -15, -85, 16, -123, -106, 8, -35, 111, -21, 99, 43, -64]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-61, -15, 27, -90, -40, 10, -41, -98, 116, -102, -75, 126, 57, 56, 94, -39]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-96, 79, 49, 91, -63, -65, 103, -65, 103, 78, -31, -27, -42, 1, 96, 5, 8, -87, -122, -102, 39, -121, -12, -48, -23, 59, 77, -73, 14, -66, -75, -44, 88, 111, 3, 100, 98, -70, 72, -11, -96, 92, 98, -82, 77, -50, 96, -86]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-116, 89, -76, -127, -73, -4, 14, -48, -121, 84, -53, -63, -73, -43, -22, 70, 93, 109, 73, 9, 92, -84, 65, -106, -50, 44, 20, -37, 53, -75, 22, 43, 88, 111, 3, 100, 98, -70, 72, -11, -96, 92, 98, -82, 77, -50, 96, -86]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey33);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, 89, 39, -7, 85, 38, 19, 70, 110, 100, 66, 119, -35, 34, 115, 118]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-32, -46, 24, -108, 55, 85, -38, 97, 6, 37, 48, 69, -42, 23, 74, 54]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-11, 124, -88, 68, 53, 59, 63, -64, 115, 89, 120, 73, 94, 112, 3, -15]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[41, -58, 51, -47, -52, -20, 118, 126, -49, -6, 11, 99, 119, 71, -8, 20]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[16, -93, -47, 88, 22, 50, 127, 19, -97, 60, 111, 11, 17, -85, 77, 101, -85, 9, -69, -7, 63, -65, -17, 126, 99, -116, -13, 18, -74, 105, 86, -114, -11, 124, -88, 68, 53, 59, 63, -64, 115, 89, 120, 73, 94, 112, 3, -15]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-11, 124, -88, 68, 53, 59, 63, -64, 115, 89, 120, 73, 94, 112, 3, -15]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[41, -58, 51, -47, -52, -20, 118, 126, -49, -6, 11, 99, 119, 71, -8, 20]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[29, -84, 10, 59, 112, -124, -37, -26, 56, 59, -80, 16, -43, 67, -18, -47, -48, -27, 16, 117, -107, -104, -46, -60, 10, 97, 17, 109, 52, 71, 93, -98, -11, 124, -88, 68, 53, 59, 63, -64, 115, 89, 120, 73, 94, 112, 3, -15]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[8, 54, -22, 97, -52, -48, -120, 119, 71, 61, -95, -69, -81, 89, 54, -35, -26, -81, 117, 33, -8, -108, -79, 71, 40, 31, -78, 24, -119, 78, -70, 115, -125, -92, 6, 1, 122, -65, 37, -100, -80, 62, 90, -123, -74, 26, 11, 46, -118, 10, -83, 79, -97, -103, -4, 73, 49, -21, 42, -16, 82, 16, -29, 95, -101, -122, 11, -19, -122, 43, 53, -102, 89, 103, -120, 127, 98, 35, 75, 121, 8, 103, 75, -108, -5, 100, 97, 2, 109, 14, 99, -29, -62, 115, -50, 61, -11, 124, -88, 68, 53, 59, 63, -64, 115, 89, 120, 73, 94, 112, 3, -15]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0836EA61CCD08877473DA1BBAF5936DDE6AF7521F894B147281FB218894EBA7383A406017ABF259CB03E5A85B61A0B2E8A0AAD4F9F99FC4931EB2AF05210E35F9B860BED862B359A5967887F62234B7908674B94FB6461026D0E63E3C273CE3DF57CA844353B3FC0735978495E7003F1" + "'", str31, "0836EA61CCD08877473DA1BBAF5936DDE6AF7521F894B147281FB218894EBA7383A406017ABF259CB03E5A85B61A0B2E8A0AAD4F9F99FC4931EB2AF05210E35F9B860BED862B359A5967887F62234B7908674B94FB6461026D0E63E3C273CE3DF57CA844353B3FC0735978495E7003F1");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0836EA61CCD08877473DA1BBAF5936DDE6AF7521F894B147281FB218894EBA7383A406017ABF259CB03E5A85B61A0B2E8A0AAD4F9F99FC4931EB2AF05210E35F9B860BED862B359A5967887F62234B7908674B94FB6461026D0E63E3C273CE3DF57CA844353B3FC0735978495E7003F1" + "'", str32, "0836EA61CCD08877473DA1BBAF5936DDE6AF7521F894B147281FB218894EBA7383A406017ABF259CB03E5A85B61A0B2E8A0AAD4F9F99FC4931EB2AF05210E35F9B860BED862B359A5967887F62234B7908674B94FB6461026D0E63E3C273CE3DF57CA844353B3FC0735978495E7003F1");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey52);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[121, 28, -114, 108, -100, 93, -72, -10, -18, 57, -113, 91, 23, -19, 79, -38]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-3, 28, -109, -29, -115, -120, -123, 97, -5, 123, 81, 59, -78, 82, 92, 120]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-81, -88, 120, 119, -124, 98, 72, 35, 27, 64, -79, -116, 105, 117, -38, 119]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[121, 28, -114, 108, -100, 93, -72, -10, -18, 57, -113, 91, 23, -19, 79, -38]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-68, -5, -80, 97, 56, 111, 69, 25, -18, -45, -19, 56, -29, 99, 23, -73, -71, 0, -26, 75, -44, 50, -117, -120, 99, 21, -125, 76, -27, 125, -25, 68, 121, 28, -114, 108, -100, 93, -72, -10, -18, 57, -113, 91, 23, -19, 79, -38]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[121, 28, -114, 108, -100, 93, -72, -10, -18, 57, -113, 91, 23, -19, 79, -38]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-86, -13, 72, 10, 24, -23, -47, 6, 45, -128, 79, -66, -49, 109, 2, 15]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[106, 19, 111, 62, 28, 13, 77, -112, 15, 7, -122, 42, -2, 1, 38, 108]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[16, 19, 59, -77, -69, 34, 119, 111, 99, -66, -82, -64, -57, 94, 47, -87]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[123, 44, 44, 100, 37, 106, 44, 85, -63, -112, -54, 122, 75, 110, -90, -122]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[34, -96, -1, -39, -83, -6, 88, 20, 112, 103, 39, 96, -64, -79, 64, 103]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[17, -27, 116, 84, 69, -78, 120, 6, 91, 91, -59, -15, -125, 124, 47, 15]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[67, -89, 15, -76, -54, 1, 77, 84, -61, -53, -41, 61, 40, 41, -64, 85]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-79, 75, -109, 91, 97, -107, -58, 4, 115, 79, -21, 85, -118, 26, 5, -99]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[59, -8, 62, 68, -45, 81, -80, 31, 9, -87, -116, 7, -17, -9, 9, 19, -20, 48, -67, -68, 60, -57, -103, -53, -35, 37, -108, 3, -21, 31, 50, 5, 67, -89, 15, -76, -54, 1, 77, 84, -61, -53, -41, 61, 40, 41, -64, 85]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-79, -70, 87, 108, 47, -38, -38, 35, -125, 29, -127, -39, 57, -60, -73, -106, 27, 1, -76, 95, 58, 8, -86, -120, 106, -107, 104, 21, 6, 31, -25, 118, 67, -89, 15, -76, -54, 1, 77, 84, -61, -53, -41, 61, 40, 41, -64, 85]");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[67, 31, -114, 47, -26, -125, -80, -29, -115, 62, -42, -24, -122, -55, 89, 109]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, -52, 17, -86, -109, -115, 94, -98, 76, 103, 35, -37, 105, 5, -34, 7]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, -52, 17, -86, -109, -115, 94, -98, 76, 103, 35, -37, 105, 5, -34, 7]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-22, -27, 5, 13, -79, -48, -24, 17, 127, 103, -47, 55, 34, 53, 72, -62, 80, -43, 126, -66, -110, 30, 98, 3, 37, -94, 116, 81, -67, 25, 55, -39, 67, 31, -114, 47, -26, -125, -80, -29, -115, 62, -42, -24, -122, -55, 89, 109]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[96, -89, 96, -128, -17, 17, 9, 19, 20, 49, -128, -51, 3, 2, 120, 94, 88, -47, 36, -34, 18, 17, -24, 103, 1, -125, 54, -34, -50, 58, -35, 59, 67, 31, -114, 47, -26, -125, -80, -29, -115, 62, -42, -24, -122, -55, 89, 109]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey53);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[22, -19, 12, 11, 118, 97, -67, 56, 9, 25, 86, 110, 8, -39, 97, 98]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 119, -40, -76, -75, 89, 77, 4, -20, -103, -47, 45, -62, 68, -80, -22]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[114, 6, -4, 91, -49, 111, 55, -109, 116, 106, -80, -107, -10, 77, -49, -73]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-73, -89, -128, 3, 25, 17, 110, 45, 45, 108, 15, -97, -44, 92, 36, 79]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[26, 120, 17, -78, 64, -69, -89, 44, -28, -65, -76, -66, 67, 76, 26, 47]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[108, -54, -33, 120, 2, 48, -28, 64, 90, 75, 59, -72, -40, -127, -41, -64]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[31, -26, -100, 122, -105, 31, 76, 109, 33, 104, -127, -24, -12, 124, -13, -85]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[38, 68, 92, 33, 82, 66, -128, -124, -6, 55, -78, 20, 6, -51, -66, -20]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[120, -56, -28, -34, -92, -62, 102, 27, 96, -12, -47, -19, 119, 98, 9, -33, -43, -58, 5, -120, -32, -125, -49, 72, 114, -29, 91, -88, -113, -41, 28, -103, 31, -26, -100, 122, -105, 31, 76, 109, 33, 104, -127, -24, -12, 124, -13, -85]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-32, -52, 60, 82, -21, -55, -45, -23, 117, -69, -85, -58, -34, 62, 77, -97, -4, 57, 74, 92, 122, 77, 101, -59, -79, 113, -111, 98, 56, -4, 107, -100, 31, -26, -100, 122, -105, 31, 76, 109, 33, 104, -127, -24, -12, 124, -13, -85]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[31, -26, -100, 122, -105, 31, 76, 109, 33, 104, -127, -24, -12, 124, -13, -85]");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 121, 70, -93, 89, -32, 77, 46, -120, 12, 56, -99, 19, -32, 28, -26]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[70, -65, 118, -125, 107, 122, 118, -77, -76, 4, -56, -101, 28, -33, 36, 127, -103, -109, 2, 25, -76, 115, 92, 0, -50, 100, -41, -53, -26, 77, 6, -63, -93, 8, -98, -91, -99, -103, -53, 90, -9, -2, -16, -24, -42, 44, 48, 79]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-75, -45, -27, 16, -105, 44, -105, -48, 127, -124, -84, 67, 81, 77, -52, 21, 14, -39, 9, 58, 58, 14, -48, 123, 10, 97, 10, 2, 25, 82, -37, 120, -76, -29, -85, -26, -104, -113, -10, -81, 9, 28, 91, 117, -63, 106, 67, 70, -8, -83, 82, -63, -112, -123, -101, 3, 107, 81, -61, -21, 31, -57, -58, 33, -89, -55, -123, 22, 4, -21, 33, -64, 53, -52, -75, 46, -32, 105, 11, -104, -108, -20, 9, 62, -26, 110, -46, -69, -107, 89, 33, 95, 30, -50, 10, -38, -93, 8, -98, -91, -99, -103, -53, 90, -9, -2, -16, -24, -42, 44, 48, 79]");
        org.junit.Assert.assertNotNull(byteArray57);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        byte[] byteArray80 = new byte[] {};
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray80);
        javax.crypto.SecretKey secretKey82 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey82);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey86);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey86);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey86);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey86);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey86);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey86);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("0A2FB204EC222C2498A9A3E99BDE76987D8F516A693744E59F4478828F1CC4BD2E3C3D05D765239CEE1814A1B735A76D5678BC9FABDEB9B670B84F7B05A2DA97E1AF4F1B665CFAE6F1E44CC9C0B46D7D16756442100CA0C9C765900644A69238CA9073C81DD61D7C185DFF9B34277859677988D74A948858CA8457E7941DF86632A975F57CA6102544A30E5E563E503AAFE2ACC9A5C5B281EBECB535B8E52908F0536FEF94BB408FEA47E8FC8942BC1CB48BBCAD663DA674D6C79F5A9FA6163F7111B17573BA042F80E5C5067F7407181AE1446FCDAB18ACFA343FF6931222A7EC726BBCEAFFE089765AE469DD34A643", secretKey86);
        java.lang.Class<?> wildcardClass96 = secretKey86.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-125, -27, -34, 89, 80, 104, 4, 114, -25, -13, 20, -49, -96, -34, -23, 83]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-60, 50, 64, -104, 80, -45, 105, 94, -69, 48, -5, 17, -52, -76, 57, -64]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[7, 12, -78, 117, 78, -8, -127, -28, 16, -10, -117, -78, -6, -116, 16, 68]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[69, 19, 17, 55, 50, -89, 107, 109, 107, 14, 100, 107, 75, 124, 84, -17]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-66, -65, 103, 31, -83, 85, 110, -124, -115, -108, 114, 58, 125, 124, -113, -15]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-17, 41, -28, 95, 116, 116, 13, 88, 75, -1, -29, 85, -110, -106, 61, -99]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[38, 58, 42, -125, -75, 97, 64, 80, 34, -46, -75, -9, 109, -83, 26, -40]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[87, -29, 89, -68, -98, 58, 106, -107, -85, -59, 27, -5, -62, -103, -20, 47]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-99, 70, 70, -26, 7, -77, -114, 26, 70, 57, -14, -66, 33, -53, -44, -37, 73, 43, -110, 27, -76, 100, -69, 48, 67, 126, -114, 76, 44, -3, 6, 60, 38, 58, 42, -125, -75, 97, 64, 80, 34, -46, -75, -9, 109, -83, 26, -40]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[35, -79, 4, 84, 117, -18, -112, 66, -29, 78, -8, -63, 16, -34, 108, 101]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-49, -87, 19, 81, -38, 102, -106, -62, -110, 91, 9, 103, -99, 109, -12, 115]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, -85, -2, 91, -69, 86, -51, -7, -33, -128, 118, -82, 1, 106, -90, 87]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[36, -61, -110, 60, -84, 4, -34, 126, -80, 80, -97, -76, -48, 93, -34, 60]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-101, 6, -111, -122, 52, -60, 56, -87, 27, 111, 84, 21, 8, -1, -107, -113]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[78, -87, -13, -27, 28, -33, 87, 82, -52, 5, -127, -35, 9, -5, -85, 110]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-84, 93, -58, 24, 73, 45, -117, -113, 77, 94, -26, 12, 35, 98, -125, -106]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[94, -75, 13, 35, -14, -53, 29, -41, 26, 41, -128, 117, -31, -10, 73, -34]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[23, -13, 5, 71, 39, -120, -44, 3, -50, 101, 54, 37, -127, 66, 109, 66, -126, -128, 31, -84, -85, 115, -50, 98, -99, 110, -103, 22, -32, -45, 0, -28, -84, 93, -58, 24, 73, 45, -117, -113, 77, 94, -26, 12, 35, 98, -125, -106]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-10, -117, -121, -106, -93, -49, -98, -47, 19, 103, 0, 70, 93, 85, 22, -112, -113, 58, -30, 11, 14, 52, 102, -55, -90, -106, -43, -86, -125, -47, -113, -49, -84, 93, -58, 24, 73, 45, -117, -113, 77, 94, -26, 12, 35, 98, -125, -106]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey36);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100, -1, -126, 16, 123, -56, -118, 32, 85, 103, 24, -65, 97, -13, 97, -106]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[37, -82, -35, 90, -113, -37, 45, 92, 39, -59, 91, 10, -123, 32, -66, 39]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[121, 82, 126, -106, -84, 21, -60, -113, -74, 61, 7, -40, 61, 43, -79, -48]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[112, 113, -74, -108, -53, -76, 84, -69, 9, 55, -24, 83, 112, -40, 127, 38]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, -2, -65, 67, -120, 88, -39, 60, 54, 23, -108, -50, -78, -1, 51, 48, 32, 104, -22, 17, 50, -17, 93, 107, 85, 23, -91, -87, 83, 85, 12, -73, 121, 82, 126, -106, -84, 21, -60, -113, -74, 61, 7, -40, 61, 43, -79, -48]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[69, -85, -117, 36, 64, -37, -14, -60, 39, -87, -52, -79, -63, -109, -53, -31, 123, -128, -108, 116, -53, 102, 68, 5, 43, 0, 39, -34, 89, 95, -59, 43, 121, 82, 126, -106, -84, 21, -60, -113, -74, 61, 7, -40, 61, 43, -79, -48]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-109, 24, -94, 18, 53, -96, -14, -52, -63, 80, -112, 65, 20, -102, -48, -103, 31, 1, -51, -94, -48, 94, 111, -94, 81, -74, -40, 85, -46, -43, 71, 29, 63, 82, -43, -69, 34, 2, 122, -69, 58, 88, 84, -60, 101, 111, -48, -97, 14, -12, 27, 121, 16, -72, -56, 6, -55, -14, 88, -115, 52, -3, 117, -34, 64, -56, 40, 118, 3, 87, -91, 75, 40, 104, -47, -43, 2, 7, -15, -54, 54, -97, 42, -120, 120, 74, -59, -71, 93, -114, 63, 20, 48, -8, -16, -88, 121, 82, 126, -106, -84, 21, -60, -113, -74, 61, 7, -40, 61, 43, -79, -48]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "9318A21235A0F2CCC1509041149AD0991F01CDA2D05E6FA251B6D855D2D5471D3F52D5BB22027ABB3A5854C4656FD09F0EF41B7910B8C806C9F2588D34FD75DE40C828760357A54B2868D1D50207F1CA369F2A88784AC5B95D8E3F1430F8F0A879527E96AC15C48FB63D07D83D2BB1D0" + "'", str27, "9318A21235A0F2CCC1509041149AD0991F01CDA2D05E6FA251B6D855D2D5471D3F52D5BB22027ABB3A5854C4656FD09F0EF41B7910B8C806C9F2588D34FD75DE40C828760357A54B2868D1D50207F1CA369F2A88784AC5B95D8E3F1430F8F0A879527E96AC15C48FB63D07D83D2BB1D0");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[126, 40, 78, 1, -37, 106, 56, 61, 75, -81, -96, -33, -78, -4, -85, -26]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[126, -19, 26, 107, -57, 56, 23, -91, 20, -91, -73, 60, -90, 32, 76, -17]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[126, -19, 26, 107, -57, 56, 23, -91, 20, -91, -73, 60, -90, 32, 76, -17]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[126, 40, 78, 1, -37, 106, 56, 61, 75, -81, -96, -33, -78, -4, -85, -26]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[126, 40, 78, 1, -37, 106, 56, 61, 75, -81, -96, -33, -78, -4, -85, -26]");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-49, -85, -8, -63, -101, -1, -2, -122, 37, -68, -113, 27, -30, -9, -17, 46]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[9, -124, 48, 124, 98, 28, -92, 101, -68, -32, 78, -23, 62, -110, 115, 111]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[123, 103, 60, 101, -106, -94, -102, -23, -46, -109, 54, 74, -7, 50, -55, 34]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-26, 103, -101, -4, -72, 43, -91, -85, 59, 62, -44, -98, 84, 100, 118, 7]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[111, 72, 61, 40, -6, 39, -94, 17, 114, 46, -109, -59, -128, -119, -17, -91, 67, -14, -69, -64, 72, 68, 45, 91, 55, -126, 122, 44, -80, 37, -23, -12, 123, 103, 60, 101, -106, -94, -102, -23, -46, -109, 54, 74, -7, 50, -55, 34]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[88, 105, 49, 39, -51, 70, -103, -12, -71, -83, 59, -93, -124, -76, -44, 33, -74, 6, -5, -27, -24, -92, 15, 9, 18, 90, -77, 97, 62, -120, -112, -40, 123, 103, 60, 101, -106, -94, -102, -23, -46, -109, 54, 74, -7, 50, -55, 34]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-88, 92, -128, -84, 10, -10, -53, 63, 26, -55, -25, -122, -88, 65, -100, -124, -96, -35, 112, 67, -28, 59, -76, 45, -126, -69, -81, -79, -99, -122, 2, 123, -25, -98, -51, 55, 115, -15, 7, -116, -57, 87, -19, 107, -28, 99, 125, -93, -11, -70, 8, -115, -87, -102, 95, 112, 51, -37, 125, -30, 4, -28, -27, 108, -56, 2, 117, -23, 9, 90, -120, 44, -40, -25, -101, 18, 26, -107, 23, 59, 20, 87, -112, -107, 122, 116, 113, -40, 19, 50, 84, -88, -106, -126, 39, -46, 123, 103, 60, 101, -106, -94, -102, -23, -46, -109, 54, 74, -7, 50, -55, 34]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-43, -92, 57, -73, -91, 126, 47, 20, -125, -53, -80, -53, -22, 3, 98, -43, -103, -95, 112, 114, -94, 9, 93, -68, 96, -42, 32, 62, 40, -105, 15, 125, 45, 23, 84, 41, -1, -81, -27, -74, 52, 32, 71, -4, 114, 17, 59, 113, -71, -67, -2, -101, 15, 68, -93, 72, 64, 106, -108, -104, -56, 13, 70, -43, -94, 24, 76, -109, 36, -19, 79, -26, 64, 49, -55, 62, 126, -90, 60, 91, 109, -88, -115, -50, 102, -115, -27, 30, -86, -39, -117, 37, 91, 61, -100, 89, 123, 103, 60, 101, -106, -94, -102, -23, -46, -109, 54, 74, -7, 50, -55, 34]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-57, 17, -40, 60, -45, -77, 45, -64, -12, 8, 58, -118, -64, -84, 75, -55, -63, -34, 113, -24, -38, 101, -123, 70, 61, -44, 45, -89, 61, 9, 24, 14, -60, -58, 85, -98, 70, 124, -85, -105, 1, 67, -90, -64, 73, -64, 108, -36, -115, 18, -101, -38, -1, 20, -2, -10, 93, 87, 67, -41, -95, 1, -118, 52, 82, 15, 121, -56, -6, 114, 51, 30, -105, -111, 107, 11, 9, -103, -127, -54, -69, 6, -99, 49, -69, -76, -57, 67, -27, -120, 122, -30, -98, 104, -101, -111, 123, 103, 60, 101, -106, -94, -102, -23, -46, -109, 54, 74, -7, 50, -55, 34]");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[70, 90, -21, -6, 43, -6, 104, 26, -22, -111, -88, -79, 17, -22, -68, 109]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-83, 72, 95, 32, -43, -125, 110, 118, 6, -25, 87, -2, 55, 101, -21, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[87, 61, -62, -72, -5, 104, 92, -43, 51, -24, 122, -48, 67, 85, -110, -108, 79, -89, 54, 104, 120, 126, 104, -45, 60, 123, 67, 73, -84, 64, 122, 70, 111, -109, -100, -87, -44, -25, 29, -80, -37, -93, 83, -57, -115, 76, -34, -114, -16, 11, 49, -90, 123, -79, -51, 4, -12, 82, -80, -26, 52, 2, 55, -104, -107, -91, 46, -40, -98, -110, 28, 107, -4, 53, 11, 67, -92, -6, -117, -39, 117, 111, 48, 80, -115, -107, 61, -42, 89, -107, 24, -30, -11, 83, 8, 52, 70, 90, -21, -6, 43, -6, 104, 26, -22, -111, -88, -79, 17, -22, -68, 109]");
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey43);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey43);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey67);
        byte[] byteArray73 = new byte[] {};
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray73);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey75);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey79);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey79);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey79);
        byte[] byteArray83 = new byte[] {};
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray83);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray83, secretKey85);
        javax.crypto.SecretKey secretKey89 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey89);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey89);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray83, secretKey89);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey89);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey89);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey89);
        java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey89);
        java.lang.String str97 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey89);
        byte[] byteArray98 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey89);
        byte[] byteArray99 = com.thealgorithms.ciphers.AESEncryption.encryptText("F79DE48FFECBC3240EB83BC4F262A429E37ECDF1713013289132C2DCD6E7183A3CB835DC4520DF439A34FCDE5402ADFC4B9F57E2A6461EC417B79C120B77B802CDB8DE874E8E2233FAD2926F66B5A8EAD2D583C56B35B571FA9E68F584EDD9044F253E4254FF191ED61CE27E11C9C85D", secretKey89);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[12, -32, 98, -16, 5, -8, 67, 64, 59, -19, -31, 75, -89, -19, -41, 111]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-92, -112, 119, -82, -2, -37, -106, 110, 32, -94, -12, -106, 14, 37, -88, -73]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[111, -112, -59, -1, -4, -112, 46, -29, 33, 125, -40, -73, 94, 120, 44, -125]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[30, -23, -3, -91, -5, -96, 60, -73, -58, 37, 71, 39, -5, 61, -43, 69]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-45, -28, 100, -93, -9, 52, 126, -4, -47, -44, -61, 93, 117, 126, -87, 37]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-20, 78, -76, -73, -128, -121, -80, -118, 126, 15, 72, 106, 98, 58, 100, 94]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-72, 3, -20, -34, -17, -6, -33, 125, 108, 20, -51, 30, -89, -92, 29, 1]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[115, -4, 34, -78, 79, -61, -40, 30, 102, 110, 57, 101, 103, 44, -32, -128]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-13, 38, 31, 34, -41, -90, -117, 9, 63, -33, -89, -29, 94, 54, -120, 116, 83, -5, 95, -74, -127, 10, 68, 23, 58, -115, -89, 67, 106, 110, -11, -11, -72, 3, -20, -34, -17, -6, -33, 125, 108, 20, -51, 30, -89, -92, 29, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[84, -111, -47, 19, -64, -109, 4, -54, 49, -60, -37, -38, 30, -52, -101, 25]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[102, -80, -37, 25, -45, -62, -122, 62, -114, -97, 103, -74, 123, 106, -68, 96]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-27, -24, -83, 45, 29, -22, 55, -113, -47, -76, -7, 76, 48, -18, -38, -112]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[61, 111, 96, -28, -107, 42, 53, 124, -18, -89, 31, -3, 51, -65, -11, -94]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[65, -45, -8, -100, -79, 47, -69, -84, -105, 96, 20, -104, 94, -93, -30, 66]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-2, 113, -27, -107, 19, 102, -128, 82, 49, -58, 100, -32, -15, -12, -54, -13]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(secretKey89);
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-29, -127, 106, 54, -87, 75, -63, -1, -78, 78, 94, 122, -125, -12, 26, 14]");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-84, -4, 48, -78, 29, -31, -50, -76, 85, 98, 96, -99, -90, 49, -35, -55]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[45, 26, 45, -69, 99, 101, 46, -62, -39, -22, -87, 48, 110, -124, -84, 110, 32, -102, 1, 94, -119, 114, 72, -13, 61, 60, 20, -82, -67, 126, -48, -66, -29, -127, 106, 54, -87, 75, -63, -1, -78, 78, 94, 122, -125, -12, 26, 14]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(byteArray98);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[45, 26, 45, -69, 99, 101, 46, -62, -39, -22, -87, 48, 110, -124, -84, 110, 32, -102, 1, 94, -119, 114, 72, -13, 61, 60, 20, -82, -67, 126, -48, -66, -29, -127, 106, 54, -87, 75, -63, -1, -78, 78, 94, 122, -125, -12, 26, 14]");
        org.junit.Assert.assertNotNull(byteArray99);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey49);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey49);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-89, -116, 20, -128, 49, -103, -103, 94, 13, 60, 94, 53, -36, 88, 51, -106]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[21, 66, 69, 102, 82, 26, -43, 109, -13, -38, 57, 85, 94, -120, -61, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-84, 79, 16, 101, 10, 64, 113, 93, 98, 54, -25, -71, 84, 109, -38, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 108, -6, 105, -70, 74, -31, -114, -5, 81, 70, -128, -17, 16, 66, -123]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-61, 78, -83, 49, -67, -49, 59, 97, -62, 2, -95, 2, 114, -55, 52, 57, -117, 122, 52, -3, 91, 69, -33, 71, 58, -31, 23, -35, 45, -41, -10, 20, -84, 79, 16, 101, 10, 64, 113, 93, 98, 54, -25, -71, 84, 109, -38, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, -19, 76, 83, -89, 43, -32, -62, -97, 120, -31, 118, -97, 16, -105, -127, 94, -63, 58, -121, 53, -107, -128, -103, 127, 43, 68, 15, 100, 94, -81, -98, -84, 79, 16, 101, 10, 64, 113, 93, 98, 54, -25, -71, 84, 109, -38, 10]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[95, 93, -24, 93, -113, -25, -18, 57, 98, -14, 45, 84, -8, 119, -32, -78, -67, -35, -90, -15, 117, -29, -103, -74, 54, 70, -117, 55, -125, -25, 99, -60, -121, -88, 25, 24, -47, -25, 126, -113, -14, -112, 63, -95, -127, 95, -94, -105, 92, -87, 58, 52, -37, 89, 88, -103, 61, 76, 26, 103, 37, 21, 85, 71, 47, -62, 127, -112, -101, 3, -23, 89, -106, 77, 122, -78, -77, -17, -94, 33, -61, -119, 105, -87, 85, -64, 116, -111, 81, 113, -23, 64, -52, -2, 76, -52, -84, 79, 16, 101, 10, 64, 113, 93, 98, 54, -25, -71, 84, 109, -38, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-88, 3, -82, 109, -81, 39, 90, -18, -113, -79, 42, 105, 86, -123, -16, -55, 4, 66, 80, -83, 17, -24, 81, -30, -75, -46, -80, -79, 89, -57, -92, 87, -84, 79, 16, 101, 10, 64, 113, 93, 98, 54, -25, -71, 84, 109, -38, 10]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "A803AE6DAF275AEE8FB12A695685F0C9044250AD11E851E2B5D2B0B159C7A457AC4F10650A40715D6236E7B9546DDA0A" + "'", str29, "A803AE6DAF275AEE8FB12A695685F0C9044250AD11E851E2B5D2B0B159C7A457AC4F10650A40715D6236E7B9546DDA0A");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[29, -56, 35, -51, -67, 7, -39, -97, 79, -82, -83, -49, -30, 97, -47, -8]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B881F13A961670B198DC6CA3BB3D560BABA2B7CB718B496F3F1A0E617C15E7C8608322AE7D3EAC88B33D3CF50758BE0D7D64B126FBE6B32A7E20C6D37D78C3E2D70FD810BC544F2EE74BD41E0F5E008535E34AA1C301C96B96E3D7D73880E4FC41AD6A807184069FD259AE7100E08C68", secretKey4);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("80CAAD0523A095BFDA158F3C4138EAA0947D621EB05C32914E59C9F028BFC63D850601C663F19A2059B09C91605EA61046866EFD3A8DD52B1E6570983B624CA99D76C8B01657CD61C400D6A0307FA4E8B1288B927E88F0C9A4048CFBF4149373823B7B231C64EF4590F82B82DAE827BD", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("08BF3064DB0B47BC34BA25261DCF7F33590435A7F51427EA47A0608B503AF8DEE1EB04A128FF8282F631238DFF31694DDA5D7B26295EE85CD0B24809F434B3E7BF2FEF822B6C4B169DB14B3FCE020B38F8068C0D7E4025904BF38CABA87CAA8E2DE26162417D318C406BF4B78965C17B0A34F2AEA49AB4C573D4D2B60D44DB602ADC801BB713FE0CC0BAFFB74D23BAD20D3C1FEDF6422E7DB22B25BB41EB7F0BC71CC5121D96D35CF7B94725D8BD84CD5DD9547DF6A017A2E07EA16F77DA87425C7042FED4F01982456F6F6093705AA0A6ED8729E33C1EC39674C0A7777E67536C191223E4A9B52F40F97E662932AC5F", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3C5E4EA5B3A8C5696BCD96649E46C781A0128AF793AB6978DD546831988B2BB407EA41E3EC2F429752C739294C24FE74C895EEA8788608C20FED21AC12ACE314A91B2019132305FA931CDDCD08E6C02C7B913C904F4463BA209F3C5E85D6F1716C8861F2704F51A8241E6998AD69C4A", secretKey29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey29);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-33, -93, 112, 118, -7, -119, 112, -7, -78, 67, 96, 126, -22, -55, -106, 63]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-31, 102, -45, 39, -106, 100, 57, 34, -90, 44, 119, -15, -20, 47, 111, -116, 20, 105, 104, 12, 17, 46, 15, -20, 104, 68, 24, 56, -30, -56, -28, 37, 102, -106, 37, 68, 102, -100, -63, -20, -53, -20, -3, 92, 102, -56, -78, 18, -39, -123, -37, 109, -1, 38, -62, 39, 86, -59, -14, 50, 56, -46, 25, -103, -128, 52, 89, -54, 100, -92, -87, 8, 35, 10, -45, 2, 45, -25, -33, 118, 127, -58, 78, 38, -28, 34, 12, 36, -95, 15, 112, 9, -119, -102, 71, 114, -33, -93, 112, 118, -7, -119, 112, -7, -78, 67, 96, 126, -22, -55, -106, 63]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-51, 7, -112, 65, 78, 99, 79, 54, -34, 67, 44, 97, 100, 99, 102, 67, -45, 118, -128, -87, -1, 13, 67, -108, -104, -104, 29, -112, 73, -103, 110, -113, 124, -91, 126, 14, 80, 58, -55, 53, 57, 2, -56, 50, -33, -96, 69, -53, -9, -105, -55, 42, 60, -80, 119, 108, -123, 37, -87, 17, -48, 94, 102, -80, -53, -58, 25, 103, -44, -82, -123, -102, 99, -119, -6, -58, 88, 59, -19, 108, 73, -77, -63, 30, 109, 16, 85, 61, 7, 107, 119, -100, 104, -100, 34, 60, -33, -93, 112, 118, -7, -119, 112, -7, -78, 67, 96, 126, -22, -55, -106, 63]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-80, -53, -37, -30, -2, 94, -6, -29, -106, 52, 39, 117, -76, 107, 23, 107]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[66, -16, -1, 116, 83, 42, 6, 2, 127, -49, -46, -108, -110, 92, -21, 95]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-26, 33, -14, -26, -52, 54, -5, 1, -109, 66, 36, -109, -54, 69, 85, 79]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[88, 50, 38, -54, -67, 16, 19, -37, -45, -49, -24, 93, 87, 56, 103, -85]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[85, 50, 18, 90, 16, 49, 40, -125, -78, -52, 89, 104, 69, 106, 65, -31, 68, 120, -46, 112, -70, -43, 116, -102, -102, 112, -35, -86, -68, 119, -65, 122, -26, 33, -14, -26, -52, 54, -5, 1, -109, 66, 36, -109, -54, 69, 85, 79]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c", secretKey8);
        java.lang.Class<?> wildcardClass17 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[80, -100, -73, -21, 5, 121, -114, -73, -53, 15, 86, 55, 75, -64, 21, -74]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[58, -26, -38, 85, -80, 9, -107, -65, -64, -76, -87, 72, 89, -95, 60, -75]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[58, -26, -38, 85, -80, 9, -107, -65, -64, -76, -87, 72, 89, -95, 60, -75]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-5, -107, 66, -92, 41, 97, 99, 114, 51, 27, 96, 25, 97, 72, 49, -83]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[80, -100, -73, -21, 5, 121, -114, -73, -53, 15, 86, 55, 75, -64, 21, -74]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[17, -118, -103, -28, 122, -89, 96, -63, -41, 96, -53, 69, 81, -90, 74, -46, -115, -73, -24, 115, -51, 12, -4, -97, 19, 23, 56, -114, 35, 6, 125, -105, -105, -75, -94, 127, 69, -40, 41, 90, -119, 61, 118, -80, -21, -113, 75, 2, -71, -113, -71, -69, 18, -70, 52, 58, -35, 67, -17, -74, 111, 13, 116, 112, 19, 16, -85, -97, 53, 6, 124, -86, -55, 33, 82, 89, 31, 105, 69, 110, 114, -26, 43, -26, -14, 103, -81, 102, -53, 122, 57, 119, 7, -80, -67, 73, 80, -100, -73, -21, 5, 121, -114, -73, -53, 15, 86, 55, 75, -64, 21, -74]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-19, 13, 23, 19, 69, 100, -32, -10, -106, 101, -41, 64, -52, -85, 30, 90, -74, 122, 56, -61, 18, -121, -123, -62, 25, -14, 63, -88, -23, 25, -36, -72, 10, 25, 96, 29, -39, 58, -22, -90, 102, 104, 93, 16, 29, -62, 4, -92, -67, -92, 59, -53, 99, 16, 76, 103, -22, -12, -90, -84, 113, -50, 34, 50, -79, -51, 120, -116, -30, -123, 89, 23, 48, -83, -122, 103, 125, -83, -103, -68]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("13D66FE0096DC7013F3EB4E032E54A6475F10E1D9AF7B070C1659ACE164F46DEF42014DBAB5617B00571E3B7971D26F2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey15);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey15);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey15);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[113, 96, -28, 73, 18, -72, -10, 126, 23, -35, -7, 28, -18, -65, -13, -30, -118, 33, 48, -14, 96, -76, 62, 77, -8, -101, 57, -64, 124, 65, -25, 101, 92, -33, 11, 57, -92, 109, -124, 47, 46, -65, -40, 118, 27, -69, -128, -55, -15, 81, 34, -108, 20, -70, 14, 113, -29, -30, -5, 27, -105, 124, 43, 81, 102, -2, 98, -109, -61, -11, -20, 41, -41, -94, 118, 91, 88, -34, 105, 126, -90, 36, -114, -29, -78, 52, 53, 19, 85, -17, 80, -17, 85, -42, -67, 61, -93, 34, 97, 72, -115, 10, -26, -34, 14, -123, 40, -75, 113, -116, -87, -17]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[119, -61, 119, -106, 118, -5, 119, 37, 65, 51, -64, 72, -23, -99, -25, 57, -9, -79, -91, -123, -85, -101, -113, -76, 127, 126, -48, 29, -31, -33, 76, 96, -81, 82, -121, -94, -45, -48, -109, 84, 19, 66, 49, 102, -91, -13, -11, 122, -116, -34, -51, -127, -107, 62, -53, 118, 24, 60, -73, -119, -35, 118, -42, 66, -38, 127, -69, -105, -7, -31, -74, 8, 111, -27, 31, -124, -46, 109, -71, -48, -65, 102, 17, 41, -2, -97, 111, -33, 5, 92, -77, -78, 51, 4, -106, -56, -93, 34, 97, 72, -115, 10, -26, -34, 14, -123, 40, -75, 113, -116, -87, -17]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[86, 43, 106, -62, -101, 65, 16, 111, -61, -115, 4, -45, 44, 29, 80, 102, -48, -65, -37, 37, 71, 42, -73, -103, 72, -24, -87, 44, 101, -81, 32, -116, -13, -54, 69, 70, -116, -115, 87, -114, -109, -6, 27, 41, -97, -125, -98, 57, -103, 54, 23, -127, -74, 75, 19, -123, -112, 32, -50, -62, 41, -10, 26, -30, 67, -29, -25, 36, -36, -87, 93, 113, -37, -49, 30, -124, -9, 49, 47, -5, -111, -80, 120, -85, -90, -113, 54, -79, 24, -75, -104, 10, 41, 74, -16, -102, -93, 34, 97, 72, -115, 10, -26, -34, 14, -123, 40, -75, 113, -116, -87, -17]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[68, 60, -123, -31, -10, -41, -25, 105, 86, -127, -68, 14, -126, -99, 46, -126]");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-26, -8, 99, -35, 98, 84, -102, 85, -80, 85, -103, 20, 62, -9, -18, -20]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[7, -1, -77, 29, -2, 54, 2, 4, -83, 102, 49, 106, -26, 77, -116, -88]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[7, -1, -77, 29, -2, 54, 2, 4, -83, 102, 49, 106, -26, 77, -116, -88]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-34, -20, 91, -11, 118, -120, -39, 20, -120, -43, -11, 82, 40, 76, 104, 65, 44, -82, 127, 83, -98, 119, 3, 67, 106, 24, -87, -70, -50, 26, -104, -117, -26, -8, 99, -35, 98, 84, -102, 85, -80, 85, -103, 20, 62, -9, -18, -20]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-108, 42, 5, 31, -58, 63, -66, 112, -31, -106, 59, 74, -116, -44, 45, -33, 92, 83, 40, -61, 124, -39, -5, 86, 93, -11, 106, -104, -75, -90, -70, 8, -26, -8, 99, -35, 98, 84, -102, 85, -80, 85, -103, 20, 62, -9, -18, -20]");
        org.junit.Assert.assertNotNull(byteArray21);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey19);
        java.lang.Class<?> wildcardClass27 = secretKey19.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-116, -92, 64, -62, 63, -97, 105, -15, -78, 29, -124, 25, 89, 49, -24, 16]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-29, 111, 83, 68, 3, 61, 77, -115, 50, -125, 44, 40, 111, 92, -52, 22]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-128, 118, 16, 56, -110, 91, -94, 32, -44, -68, 63, -33, 123, -113, 77, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-29, 126, 36, 62, 115, -48, 113, 10, -72, 117, -55, -30, -98, 12, 37, 88]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[91, 43, -30, 86, -113, 37, 69, 122, 43, 17, -15, 114, -124, -108, 39, -22, 28, -101, 115, 26, -123, 121, 19, 108, 103, 125, 9, 123, 92, 10, -44, -108, -128, 118, 16, 56, -110, 91, -94, 32, -44, -68, 63, -33, 123, -113, 77, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-19, -81, -2, 58, 109, -127, 99, 6, 88, -103, -74, 52, -42, 94, 50, 79, 54, 12, 22, -53, -51, 0, -115, 7, -94, -88, 40, -17, 83, 119, 24, 109, -128, 118, 16, 56, -110, 91, -94, 32, -44, -68, 63, -33, 123, -113, 77, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-63, 87, 84, 96, 41, 92, 7, 75, -27, 70, -62, -53, -15, 70, -121, -53, 44, 125, 97, -62, 74, -46, -58, -67, -54, -97, 27, -15, -62, 29, 56, 98, -121, -41, -37, 76, 11, -58, -117, 62, -3, 53, 2, -39, 125, -78, 122, -6, -97, -92, 20, 21, -53, 69, 48, 32, 93, -116, 101, -84, 36, 99, -77, 112, 104, 77, 70, 33, -36, 58, -127, -95, 89, 55, -27, -66, 31, 14, 12, -35, -126, -115, -50, -11, 23, -122, 84, 98, 28, -1, -50, -62, 119, -120, -47, 58, -128, 118, 16, 56, -110, 91, -94, 32, -44, -68, 63, -33, 123, -113, 77, -1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey38);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey65);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey65);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey65);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey65);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass75 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[44, -7, -61, 6, 102, -103, 112, 102, 104, 63, 45, -25, 116, -81, 34, -27]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-33, -91, -93, -127, 47, -44, 91, 74, -95, -26, 67, 45, -54, -124, 68, -108]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[39, 73, 37, -78, 81, -111, 58, -123, -103, 63, -93, 7, 10, 70, 35, 104]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-105, 96, -1, 76, -64, 118, 29, 81, -104, 117, 58, -12, -125, -93, 93, 46]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-99, -9, 103, 60, 124, 112, -55, -67, -98, 86, 106, 50, 54, 96, 38, 23]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[92, 77, -114, -71, -110, -90, 13, -43, -13, 94, -8, -23, -110, 63, 40, 8]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[21, 49, -26, -61, -61, 123, 73, -87, -39, -69, 70, -123, 46, -75, 40, -7]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[48, 12, -106, -41, -60, -84, 75, 30, -72, -105, -71, 103, 89, 96, -47, 60]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[119, 66, -118, 53, 11, -74, -119, 35, -31, -49, 94, 126, -52, 38, -128, 94, 34, 49, 55, 79, -48, -4, 46, -27, 72, -72, -46, -25, 28, -27, 99, 46, 21, 49, -26, -61, -61, 123, 73, -87, -39, -69, 70, -123, 46, -75, 40, -7]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-58, -23, 74, 121, -107, 41, 17, -23, 105, 127, 127, 125, -32, 17, 24, 47]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[78, 23, -64, -85, -114, -89, 22, 44, 106, -1, 123, 74, -10, 38, -35, 124]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-53, 60, 39, -33, 1, -59, -41, -93, 112, 104, 78, 108, -103, 19, 8, 65]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[124, -112, -101, -54, 105, -82, -92, 115, -17, 85, -21, 89, 116, 26, 88, -125]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-58, -6, -65, -95, -13, 118, 51, 64, 60, -66, -118, 25, 37, 54, 28, -32, 54, 123, -65, -57, 124, -3, 39, 99, -122, 79, -82, -21, 15, -117, -61, 127, -53, 60, 39, -33, 1, -59, -41, -93, 112, 104, 78, 108, -103, 19, 8, 65]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[71, 73, 106, 61, 121, -84, -76, -42, -71, -26, 94, 1, 93, 8, 30, 26, 54, -19, -126, -110, 17, -49, 99, 93, -31, -78, -114, 35, -44, -13, 98, 52, -53, 60, 39, -33, 1, -59, -41, -93, 112, 104, 78, 108, -103, 19, 8, 65]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[32, -123, 36, -37, 79, 9, -81, 104, 110, 52, 11, -120, 115, -33, -93, 39, -74, -106, -79, 38, -72, 115, 120, -44, 28, 73, -20, 111, -37, -61, 40, -89, -1, 97, 0, -84, -76, 50, -128, 122, -105, 5, -115, -31, -18, 16, -56, 32, 77, -50, -70, -10, -117, 32, -74, -48, 108, -43, 48, -92, -98, 62, -9, 24, 28, 117, -93, -83, 87, 71, 42, 62, -70, 19, -79, 10, 9, -117, -104, -4, -60, -29, 22, -58, -16, 98, -72, -54, 92, -76, -117, -64, -27, -76, -117, 6, -53, 60, 39, -33, 1, -59, -41, -93, 112, 104, 78, 108, -103, 19, 8, 65]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey22);
        java.lang.Class<?> wildcardClass33 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[102, -31, -38, 19, -92, -17, 5, -41, -33, 2, -112, -90, 49, 81, 45, 42]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-50, 72, -6, -15, -54, 9, -86, -87, 57, -101, -91, -114, -125, -85, 86, 49]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-98, -12, 62, -108, -25, 110, 109, 118, -47, 13, -89, -42, 1, 29, 71, -109]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[93, -126, -1, 61, 61, -89, -15, 117, 29, 41, -73, -33, -39, -47, -48, 94]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-7, 121, 118, -19, 66, 29, 103, -63, -40, 89, -83, -15, 5, -10, 102, 1, -21, -57, 71, 105, -104, -39, 117, 20, 98, 113, -47, 90, -126, -102, -97, -7, -98, -12, 62, -108, -25, 110, 109, 118, -47, 13, -89, -42, 1, 29, 71, -109]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[43, 73, -66, 110, 113, 118, -115, -28, 37, 56, -7, 48, 46, 60, -99, 35, -24, 95, 6, 95, 92, -16, -49, 122, 121, -54, -119, 72, 42, -5, 1, 82, -98, -12, 62, -108, -25, 110, 109, 118, -47, 13, -89, -42, 1, 29, 71, -109]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[48, -9, 81, -63, 99, 122, 48, 20, 9, -75, 95, -12, 4, 86, 105, -16, -94, -42, -86, -73, -33, 60, 9, -49, 120, -100, -115, -112, 117, -123, 116, -34, 52, 74, -116, 96, -106, 121, 118, 12, 72, 125, 48, 41, 3, 83, -33, -23, -44, 1, 47, -100, -84, -25, -16, -105, -9, -44, -15, -60, 40, 116, -54, 55, 18, 94, -78, -25, -80, -11, -17, -27, -125, -41, 83, -78, -88, -127, 34, -36, 91, 36, 48, 118, 22, -78, 125, 49, -47, 13, -112, -82, 7, 126, -37, -79, -98, -12, 62, -108, -25, 110, 109, 118, -47, 13, -89, -42, 1, 29, 71, -109]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-38, -33, -93, -28, 61, 50, -26, -111, -112, -93, -83, -86, 81, 64, -114, 81, -37, -77, 86, 25, 17, -81, -103, -64, -94, 106, -40, -23, 126, 51, 17, 59, -98, -12, 62, -108, -25, 110, 109, 118, -47, 13, -89, -42, 1, 29, 71, -109]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-30, -128, 42, 107, -76, -92, -77, -38, -40, 124, 51, -25, -48, 23, -110, 85, -34, 58, -108, 72, -118, 0, 81, -88, 40, 40, -25, 91, -109, 111, -119, -74, 122, 108, -70, 122, 47, 57, 46, -53, -28, -91, 64, 45, 85, 48, -106, -54, 60, -74, 97, -4, -37, 11, -56, 68, -101, -73, -9, -9, -28, -11, 51, 59, 42, 91, -106, 45, -31, -20, -33, 122, 93, 102, 79, 48, 66, -57, -36, 18, 122, -79, -27, 74, -7, -7, 114, -50, 127, 120, 37, 94, 28, 20, -86, -118, -98, -12, 62, -108, -25, 110, 109, 118, -47, 13, -89, -42, 1, 29, 71, -109]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("6EA4E116455BC7AF3FB5BF064D6F874CB5F555408DB9AD9F9733DFD99DAC4D7FEEE704EFF20D5601E11B02E83309E581", secretKey8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[90, -93, -115, -95, -47, -58, 53, -33, 4, 48, 2, 80, 25, 118, 116, -28]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-19, -95, 61, -33, 8, -72, -77, -84, 111, -119, -105, -120, -14, 38, -68, -17]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[31, 122, 109, -53, 39, 36, -93, -58, 33, 73, -108, -124, 41, -32, -35, 102]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[90, -93, -115, -95, -47, -58, 53, -33, 4, 48, 2, 80, 25, 118, 116, -28]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-44, -10, 93, -108, 99, -86, 3, 22, 43, -64, -112, -90, -120, -65, -95, -84, -125, -98, 84, 75, -84, -75, -61, 76, 5, -93, -10, -75, -40, 85, 46, -101, -70, 105, -111, 1, -126, -59, -26, -124, 121, 49, 69, -116, -30, 91, -25, 94, -17, 91, -34, 44, 97, -12, -16, -36, -81, -39, -44, -22, 89, 15, 106, -31, -6, -25, -2, 118, 8, -119, 79, 87, -112, -95, 82, -22, -125, -119, -65, -35, 2, -17, -56, -108, -82, -95, -14, -19, -24, 9, 66, -86, 101, -18, -48, 112, 90, -93, -115, -95, -47, -58, 53, -33, 4, 48, 2, 80, 25, 118, 116, -28]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[60, 39, -48, 88, 61, 65, -104, 106, 37, -9, -52, 115, -34, -27, 20, -70, 127, -32, 75, 74, -34, 105, 15, -57, 63, 3, -82, 12, 26, 119, 17, 7, 90, -93, -115, -95, -47, -58, 53, -33, 4, 48, 2, 80, 25, 118, 116, -28]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[56, 35, 27, -35, -76, -120, 68, -45, 121, -44, 124, 37, 87, 7, 59, -77, 106, 87, -101, -84, 110, 11, -89, -74, 14, -96, 63, 23, -74, 47, -96, -13, -56, -18, 125, 15, 108, 111, -55, 72, 19, -22, 40, -114, -69, 100, 64, 72, 86, 124, 42, -45, 72, 24, -93, 10, 113, 102, 24, -127, -64, -127, 60, 19, -25, -65, -128, -83, 45, 47, 39, -102, 34, 80, 104, 79, -48, 63, -21, 99, 84, 16, 101, 94, -42, 63, 102, -58, 43, -99, 106, 37, -55, -117, 105, 7, 90, -93, -115, -95, -47, -58, 53, -33, 4, 48, 2, 80, 25, 118, 116, -28]");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey51);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey51);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey51);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[12, -121, -76, -25, -110, 67, -128, -3, 21, -90, -17, 125, 124, 89, 119, -5]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[45, 81, 105, 94, -93, 36, -27, 99, -102, -92, 70, -120, 4, -70, 62, -124]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-75, -87, 104, -109, 61, 25, -45, 85, -60, -80, -108, 73, -115, -19, 107, 106]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-111, 115, -1, 94, 72, -21, -96, 7, -11, 33, -13, 36, 36, -62, -93, 5]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[86, 89, 53, 0, 80, -8, -38, 34, -66, -80, 74, 101, 95, -29, -84, 58]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-20, 45, 61, -116, 33, 65, -124, 125, 82, -83, 29, -70, -27, 112, -72, 39]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[105, -73, 64, -90, -114, 5, 80, 116, 110, 38, 89, 26, -99, -122, -89, 88, 95, -62, 57, -63, -92, -49, 76, -11, 113, 124, 87, -28, 71, 100, 92, -10, 86, 89, 53, 0, 80, -8, -38, 34, -66, -80, 74, 101, 95, -29, -84, 58]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-58, -113, -3, -85, 24, 6, -2, 93, 53, -23, 127, 101, 58, -10, 68, 5, -115, 78, -114, 97, -121, 58, -110, -57, -54, 94, -126, 103, 3, 93, 63, -24, 86, 89, 53, 0, 80, -8, -38, 34, -66, -80, 74, 101, 95, -29, -84, 58]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-24, -48, 82, -30, 53, 118, -60, -85, -55, 75, 71, -128, 100, 124, 45, 0, -75, -48, 41, 42, -25, -78, 111, -47, 29, -47, -74, 59, -106, 89, 104, -128, 48, -128, 52, 12, -19, 90, -72, 22, 69, 103, 8, -60, -4, -77, -68, 42, -39, 101, 72, 69, -91, 3, -56, -97, 77, 21, -57, 67, 83, 103, 66, 5, -116, 19, -123, -97, -53, -15, -72, -128, 25, 103, 27, -55, -118, -75, -39, 92, -73, -80, 41, -73, 50, -126, -85, 117, 12, -41, 89, -113, 4, 93, 95, 19, 86, 89, 53, 0, 80, -8, -38, 34, -66, -80, 74, 101, 95, -29, -84, 58]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[86, 89, 53, 0, 80, -8, -38, 34, -66, -80, 74, 101, 95, -29, -84, 58]");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[89, -36, -40, -83, 41, 84, -108, -125, -91, 100, 28, -75, 82, -50, 112, 44]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-35, 4, -82, -83, -10, -76, 78, -6, 110, 29, 77, 29, 31, -32, -122, -100]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-35, 4, -82, -83, -10, -76, 78, -6, 110, 29, 77, 29, 31, -32, -122, -100]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-89, -35, 99, 89, 124, 124, 68, -101, 42, -20, -25, 81, 44, -21, 0, -33]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-35, 4, -82, -83, -10, -76, 78, -6, 110, 29, 77, 29, 31, -32, -122, -100]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-10, 11, -114, 62, -124, -111, -67, -29, -1, 79, 1, -75, -92, -111, 50, -62, -57, -121, -118, -49, -66, 62, 89, -96, -21, 33, -122, 81, 90, -57, 82, 85, 89, -36, -40, -83, 41, 84, -108, -125, -91, 100, 28, -75, 82, -50, 112, 44]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-100, 75, 79, 121, 61, -88, -122, 66, 54, 87, -70, 104, 48, 116, -57, 68, 15, 28, -128, -12, 3, 67, 87, -52, 111, -97, -97, 61, 36, -14, 81, 67, -7, 83, 70, -62, -102, 62, -93, -120, -52, 41, 7, -77, -127, 14, -111, 47, -4, -65, 16, 104, -109, 92, 75, 38, 10, -96, -72, -71, -119, 73, 46, -57, 106, 107, 3, -44, 121, -63, -24, -126, 54, -75, -50, -59, 62, -30, -84, 28, 35, -78, -57, 116, 104, 67, -15, -36, -40, 73, 65, 93, -119, -34, 79, -117, 89, -36, -40, -83, 41, 84, -108, -125, -91, 100, 28, -75, 82, -50, 112, 44]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-76, 17, 49, -75, -97, 27, -72, 102, 48, 98, -120, -48, -95, 54, 8, -44, 113, 66, -88, 19, 39, 49, -95, 70, -22, 56, 7, 1, 66, 96, 28, 126, 42, -91, -9, -110, 15, -88, 49, -100, -29, 27, -111, -52, -101, -86, -49, 8, -87, 56, -78, 101, 41, -5, 31, -102, -48, -38, -121, 24, 36, -84, 70, 56, 108, -24, -1, -107, 31, -66, -74, 14, -4, -6, 54, -70, 2, 119, -21, 1, -11, 33, -89, -126, -16, 18, 57, 10, -101, -93, -88, 31, 125, -78, -21, -103, 89, -36, -40, -83, 41, 84, -108, -125, -91, 100, 28, -75, 82, -50, 112, 44]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-37, -119, -1, -71, 92, 84, 117, 20, -33, 127, -55, -97, -75, -66, 100, 39, 113, -112, -94, -128, 13, 77, 89, -115, -81, -12, 110, -3, 46, -106, -48, -126, 89, -36, -40, -83, 41, 84, -108, -125, -91, 100, 28, -75, 82, -50, 112, 44]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[89, -36, -40, -83, 41, 84, -108, -125, -91, 100, 28, -75, 82, -50, 112, 44]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[28, 56, -56, -89, -69, 52, -47, -40, 37, 28, 56, 55, 5, 95, -7, -34, 48, -92, 122, 110, 3, 6, -113, -21, 106, 63, -38, -123, -101, -115, 46, 40, 89, -36, -40, -83, 41, 84, -108, -125, -91, 100, 28, -75, 82, -50, 112, 44]");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey8);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey39);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey39);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey39);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("F216E19500A2E163BFDB4D468C3AC4C2D82FC555FBD45BC1B385D6A133775C1DE5A763C958D76CA659E0E38F63F9A22B", secretKey39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey39);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-102, -7, 77, 112, -70, -9, -104, -58, -101, -125, -112, -89, 110, 52, -126, -28]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[103, -72, -30, 11, 43, -116, 77, 96, 22, -79, -88, -105, -65, -118, 57, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[103, -72, -30, 11, 43, -116, 77, 96, 22, -79, -88, -105, -65, -118, 57, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[123, 39, 93, 86, -119, -31, -19, -29, 102, 28, -77, -108, 25, -99, -117, -42]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-102, -7, 77, 112, -70, -9, -104, -58, -101, -125, -112, -89, 110, 52, -126, -28]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[121, -55, 79, -76, -85, -17, 29, -82, -107, 33, -101, -53, 122, -4, 35, 100, -69, 21, 39, 112, 1, 121, 61, 24, 67, -88, -9, -85, -75, -26, -15, -95, 36, -18, 59, -124, -121, 2, 108, 77, -93, -30, -1, 19, -68, 86, -47, -19, -54, -87, 115, -89, 124, 101, -1, 100, -92, -40, 59, -12, 93, -42, -44, -102, 118, 14, -97, -26, 106, 71, -6, -31, 48, -32, 9, -19, 109, -59, 54, -109, 16, -26, 24, -3, 6, 73, 52, 94, 75, -10, 55, -16, 25, 94, -84, -53, -102, -7, 77, 112, -70, -9, -104, -58, -101, -125, -112, -89, 110, 52, -126, -28]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-102, -7, 77, 112, -70, -9, -104, -58, -101, -125, -112, -89, 110, 52, -126, -28]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[28, -76, -23, -5, 14, 16, -127, -21, 92, 19, 37, -110, 33, -56, -122, -9, -3, 58, -57, -26, -41, 0, -38, 57, -76, 97, 47, 48, -75, -44, -8, 71, -102, -7, 77, 112, -70, -9, -104, -58, -101, -125, -112, -89, 110, 52, -126, -28]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-92, -9, 75, 94, 126, -25, 106, 59, -38, -40, -35, 35, 90, 52, -9, 71]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[57, 88, 114, 124, 5, -63, -122, -94, 101, -1, -61, -116, -6, -3, -19, 120]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-29, -3, -14, 35, 73, -80, -82, -128, 110, 116, 123, -51, -86, -37, 85, 38]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[13, -104, 69, 117, 85, 108, -74, 61, -17, -101, -120, -123, 62, 109, 121, -48]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-43, -42, 69, 122, -11, -122, 61, 98, 42, 32, 11, -84, 29, -100, 60, -20, -43, 96, 31, 54, -86, -19, -34, -87, -55, -66, 75, -55, -34, -7, -114, 45, -29, -3, -14, 35, 73, -80, -82, -128, 110, 116, 123, -51, -86, -37, 85, 38]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[119, -10, 25, 104, -75, -53, 91, -101, -126, 61, 113, 2, 55, 31, 61, -120, -112, 69, -39, -27, -17, 14, 97, 108, 60, -30, -50, 109, -53, -26, 83, -108, -29, -3, -14, 35, 73, -80, -82, -128, 110, 116, 123, -51, -86, -37, 85, 38]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[73, 106, 102, -107, 69, 41, 42, 70, 96, -64, -113, 121, -48, -116, 27, -37, 81, 102, -10, -7, 73, -94, 114, -71, -29, -54, -12, -78, 26, -37, -112, 124, -120, -51, 109, 98, 66, -124, 29, 100, -109, 89, -72, 89, -62, -128, -126, 43, -99, 44, -35, 61, 106, -23, 14, -114, -59, 59, 0, -49, 90, 11, 11, -109, -14, 98, -37, 20, -53, -55, 54, -100, 109, -81, -17, -90, 75, -26, 114, -32, 104, -118, -35, -60, -70, -26, -56, -73, 53, -109, 80, -11, 114, -64, -121, -61, -29, -3, -14, 35, 73, -80, -82, -128, 110, 116, 123, -51, -86, -37, 85, 38]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[40, -84, -92, 8, 121, 69, -34, 48, -80, 114, -83, 60, -56, -67, -89, 103, -71, 15, 24, 101, -32, 15, 73, -51, 10, -14, -36, 120, -93, -25, -97, -108, -29, -3, -14, 35, 73, -80, -82, -128, 110, 116, 123, -51, -86, -37, 85, 38]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-48, 127, 116, -18, -81, 113, 25, -63, -8, -128, 88, -60, -21, -83, -105, 91, -54, -60, -63, -118, 80, -40, 121, -94, 63, -124, 111, 46, -16, -107, 46, 46, -47, 57, -91, -67, -80, 31, 118, -6, -2, 79, 92, 106, -35, 49, 108, 44, -24, -12, 83, 30, -85, -67, -78, 76, 42, 20, 78, 75, -72, 70, -49, -49, 10, -66, -81, -10, -62, -114, -88, -118, 96, -39, 20, 89, 59, 93, -28, 87, 86, -47, -48, -22, -30, -109, 120, 115, -76, -78, -75, -41, -116, -113, 57, -35, -29, -3, -14, 35, 73, -80, -82, -128, 110, 116, 123, -51, -86, -37, 85, 38]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[64, 2, 86, 75, 30, -25, 109, 95, -55, 31, -8, 60, 120, -113, -87, -87, 49, 14, -127, 29, 38, 97, 53, 43, -52, 109, 65, 50, 3, 74, -36, -115, -32, 46, 106, -77, 101, -74, -6, -122, 28, -30, 121, 109, 95, -67, -43, 2, -58, -86, 8, -49, 22, 49, -22, 79, 94, 68, -99, 46, 86, -3, 124, -19, -44, -126, -104, -106, -86, 74, 92, -98, 89, -42, -61, 94, 121, 104, 2, 118, 76, 29, 97, 38, -8, -8, -33, -94, 40, -81, -34, 101, -7, -102, 38, 28, -29, -3, -14, 35, 73, -80, -82, -128, 110, 116, 123, -51, -86, -37, 85, 38]");
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey9);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.Class<?> wildcardClass21 = byteArray18.getClass();
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[85, -113, 12, 63, 101, 35, -97, -38, -103, -6, -127, -26, 57, -95, 10, 59]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-69, 12, 26, -22, -107, -77, -15, 21, 104, -35, -76, -11, -6, 37, -64, -80]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-69, 12, 26, -22, -107, -77, -15, 21, 104, -35, -76, -11, -6, 37, -64, -80]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[105, -64, 95, -51, -57, 108, -71, 67, -9, -23, -96, -77, -107, 64, -4, 31]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-69, 12, 26, -22, -107, -77, -15, 21, 104, -35, -76, -11, -6, 37, -64, -80]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-39, -79, -74, -52, 64, 49, -20, 103, -74, -1, -100, -90, -124, 121, -59, 45, 58, 51, 78, 14, -44, 4, -118, 82, 49, 60, -38, 45, -16, -77, 29, 9, 85, -113, 12, 63, 101, 35, -97, -38, -103, -6, -127, -26, 57, -95, 10, 59]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[33, 26, -37, -104, 5, 45, 97, -31, 126, 68, 9, -77, 51, 61, 5, 105, -86, 1, -91, 120, 94, -26, -65, 106, 114, -94, 123, -96, 23, 8, 0, 82, -128, -89, 113, 14, 42, -106, -91, 7, 78, -106, 2, -82, 114, 91, -56, 55, -30, -58, 74, 91, -43, -17, -79, 36, -83, -84, 120, 26, -97, -101, -57, 57, 100, 119, -92, -51, -107, 80, 108, 0, 111, -53, 116, 9, -65, 38, 10, -32, -93, 62, 44, -5, 37, 45, -11, -113, 4, -109, 20, 126, -101, 124, 34, -32, 85, -113, 12, 63, 101, 35, -97, -38, -103, -6, -127, -26, 57, -95, 10, 59]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-44, 12, 105, 104, -90, -99, 45, 74, 109, 28, 67, -6, 81, -64, -128, 50, -35, 95, -56, -59, -127, 112, -99, 75, 31, -15, 116, -89, -121, 80, 70, -13, 14, 81, 120, 91, -83, 52, -98, 53, 119, 126, 120, 116, 4, -105, -66, 78, -34, 115, 46, -127, 25, -124, 38, -4, 5, 15, -115, 10, -106, 119, -96, 28, 120, 95, 57, -60, 76, -78, 5, -10, 73, 18, -113, 67, 15, -11, -84, -54, -60, -13, 116, -74, 14, -102, 74, 99, -17, 42, -44, 75, 123, 45, 37, -27, 85, -113, 12, 63, 101, 35, -97, -38, -103, -6, -127, -26, 57, -95, 10, 59]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-17, -123, -105, 52, -53, 83, 84, -121, 112, -86, -128, 107, -110, 83, -91, -44, -49, -109, -74, -101, 88, 53, 105, 84, -29, -5, 126, -15, -117, 16, 115, -102, 85, -113, 12, 63, 101, 35, -97, -38, -103, -6, -127, -26, 57, -95, 10, 59]");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EF859734CB53548770AA806B9253A5D4CF93B69B58356954E3FB7EF18B10739A558F0C3F65239FDA99FA81E639A10A3B" + "'", str19, "EF859734CB53548770AA806B9253A5D4CF93B69B58356954E3FB7EF18B10739A558F0C3F65239FDA99FA81E639A10A3B");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EF859734CB53548770AA806B9253A5D4CF93B69B58356954E3FB7EF18B10739A558F0C3F65239FDA99FA81E639A10A3B" + "'", str20, "EF859734CB53548770AA806B9253A5D4CF93B69B58356954E3FB7EF18B10739A558F0C3F65239FDA99FA81E639A10A3B");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey2);
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey12);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-89, 108, -26, -17, -56, -111, -41, -51, -123, -35, 38, -30, 110, 116, 28, -64, -123, -55, 108, 100, -12, -21, 61, 88, 97, -119, 24, -98, 18, 82, 5, -48, -73, 112, -65, 78, -28, -46, 105, 8, 104, 78, 34, 57, 83, -25, -2, 32, 28, 42, -93, 117, -110, -92, -78, 83, -80, -35, -93, 120, -81, -59, 0, -111, 28, 13, 63, -3, 7, -115, -51, -72, -18, -96, -62, -67, 52, -19, -71, 55, -41, 7, -81, 66, -16, -12, -11, 51, 10, 119, -111, 107, -28, -10, 17, -16, -19, 70, 27, -23, -125, -118, 108, 124, -83, 96, -88, 50, -23, 12, -113, -48]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[66, 76, -58, -61, 102, -9, 67, -45, 65, 88, 61, 93, 29, 103, 122, 114, 123, -128, 19, -46, 90, 19, -101, -35, 64, -23, -23, -47, 15, -103, 82, 120, -19, 70, 27, -23, -125, -118, 108, 124, -83, 96, -88, 50, -23, 12, -113, -48]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-91, 27, -98, 89, 23, -73, 32, 62, 88, -120, 3, 79, -37, -38, 71, 54]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-14, 18, 93, 72, 98, 32, -37, -67, -89, -10, -123, 116, 45, -16, -7, -46]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-14, 18, 93, 72, 98, 32, -37, -67, -89, -10, -123, 116, 45, -16, -7, -46]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-91, 27, -98, 89, 23, -73, 32, 62, 88, -120, 3, 79, -37, -38, 71, 54]");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey50);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey50);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey50);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey50);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey50);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey50);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey50);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[119, -122, 44, -126, 27, 97, 74, 73, 42, -42, 49, -25, 85, -79, -10, -47]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-116, 77, 21, -25, 56, 44, 63, 112, 8, -14, -20, -76, -127, 78, -55, 48]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-127, -9, -34, 60, -78, 33, 46, 43, 3, -124, 52, -110, 50, -12, -78, 51]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[23, 48, 60, -123, 54, -30, 26, 66, -110, -94, 88, -96, -25, 109, 67, -72]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[83, -25, -4, -67, 4, -111, -82, 64, -56, -112, -89, -30, 49, 47, 101, -98, -127, 77, -27, 52, 9, 29, -32, 125, 56, -65, -10, -12, 3, 54, -48, 71, -127, -9, -34, 60, -78, 33, 46, 43, 3, -124, 52, -110, 50, -12, -78, 51]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[83, -25, -4, -67, 4, -111, -82, 64, -56, -112, -89, -30, 49, 47, 101, -98, -127, 77, -27, 52, 9, 29, -32, 125, 56, -65, -10, -12, 3, 54, -48, 71, -127, -9, -34, 60, -78, 33, 46, 43, 3, -124, 52, -110, 50, -12, -78, 51]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "53E7FCBD0491AE40C890A7E2312F659E814DE534091DE07D38BFF6F40336D04781F7DE3CB2212E2B0384349232F4B233" + "'", str25, "53E7FCBD0491AE40C890A7E2312F659E814DE534091DE07D38BFF6F40336D04781F7DE3CB2212E2B0384349232F4B233");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-21, 126, 64, 26, 64, 3, 7, -54, 74, -93, 84, -44, 3, -91, 90, 113]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-98, 26, 118, 13, -69, 5, -7, -95, -113, -92, 25, -111, -44, -43, -126, -90]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 21, 35, 33, 52, 41, -103, 69, -61, -8, 13, -86, -33, -21, -91, 4]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[38, 104, 116, 101, -83, -53, 15, 16, -43, -31, -99, -46, 7, 47, -33, -103]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-13, 87, -70, 102, -2, -47, -45, 124, 12, 89, 29, -97, 24, 25, 124, 62, -66, 67, -107, 117, 94, 108, -39, -122, -85, -87, 108, -112, -40, -103, 43, 21, 10, 21, 35, 33, 52, 41, -103, 69, -61, -8, 13, -86, -33, -21, -91, 4]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[55, -120, 29, -109, -56, 101, 122, 111, 101, -94, -59, 8, 50, -8, -117, -68, -120, 13, -103, 59, 3, -25, -121, -80, 113, 72, -101, 41, -114, 63, 79, -8, 10, 21, 35, 33, 52, 41, -103, 69, -61, -8, 13, -86, -33, -21, -91, 4]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[6, -17, 23, 5, -6, -32, -103, -17, 57, -38, -65, -26, -47, -84, -15, 127, -1, -124, 123, -124, -8, -88, 92, 83, 11, -80, -96, -50, -8, 6, -127, -39, -125, -62, 53, 35, -42, 2, 41, 2, 75, -23, -49, -89, -111, 51, -71, -42, -48, -50, -94, -102, 27, 50, 44, -27, -6, -60, -63, -105, 9, 61, -16, -21, 68, -87, -1, -17, 117, 8, -41, -92, 97, 51, 39, -63, -47, 75, 7, -92, 50, 126, 31, 71, 36, -85, 91, 112, 98, -13, 83, -109, 62, 87, 24, -18, 10, 21, 35, 33, 52, 41, -103, 69, -61, -8, 13, -86, -33, -21, -91, 4]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[106, 63, 68, 40, -120, 118, -18, 75, 57, -58, 27, -101, 91, -105, -58, 61, 45, 16, -60, 27, 69, 55, -43, -25, 82, 40, -69, -96, -120, -91, -43, -87, 20, -16, -7, 42, 83, -104, 48, -56, 19, -7, -99, 78, 30, -24, 64, 113, 68, 45, -27, -75, 12, -98, 73, 23, 22, 17, -124, -68, 7, 73, -2, 51, -94, 26, -8, 13, 41, -27, 87, -13, 2, 35, -29, 36, -70, 99, -53, -5, -100, -97, -42, 33, 16, -114, -87, 72, -46, -45, 105, 54, -30, -46, 83, -31, 10, 21, 35, 33, 52, 41, -103, 69, -61, -8, 13, -86, -33, -21, -91, 4]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 21, 35, 33, 52, 41, -103, 69, -61, -8, 13, -86, -33, -21, -91, 4]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-105, 15, -41, 59, 28, 70, -122, -15, -71, 50, 58, 109, 80, -95, -101, -51, 99, 102, -93, -125, 36, 71, 100, -104, 52, 9, 118, 26, -62, 28, 105, 55, 10, 21, 35, 33, 52, 41, -103, 69, -61, -8, 13, -86, -33, -21, -91, 4]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-12, -59, 38, 68, -46, 123, 84, 77, 99, 27, -99, -106, 119, 27, 5, 53, -71, 81, 106, -45, 101, -90, -72, -45, 102, 126, -94, -67, -107, 113, -79, -88, 37, -125, -94, -48, 96, 5, 59, 123, -47, -3, -64, -112, -82, -116, -62, -76, -77, 58, -109, -57, -62, -108, 87, 18, -108, -18, 46, -9, 99, -66, 51, -16, -64, 4, 54, -113, -125, -99, 94, -10, -9, 127, 6, 109, 45, 41, 67, 22, 69, 62, 68, 55, -60, 118, -109, 36, -115, 35, -11, 53, 69, 49, 32, 40, 10, 21, 35, 33, 52, 41, -103, 69, -61, -8, 13, -86, -33, -21, -91, 4]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-11, -69, -122, 96, 62, -76, 112, 15, -113, 48, 95, 102, 88, -110, -45, 65, 113, -64, -29, -117, -52, -7, 38, 119, -64, -91, 122, 67, 69, -89, -28, 11, 10, 21, 35, 33, 52, 41, -103, 69, -61, -8, 13, -86, -33, -21, -91, 4]");
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("A856F4BB028ED37E42CCF9A0F314FBC195A260BA04EEEF22D305973260944F431BE4FC79E853B7AF60ECDC1555D9124211637AF288C9EC32916D12A203EB5EFA19BE8DB3AB1518F05C443DD81721AF22E81EED89735A10E4AA3A9B09F8438210CA4375536161AC4CDE469F449ACF1A07", secretKey23);
        java.lang.Class<?> wildcardClass35 = secretKey23.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-63, -102, -13, 82, -51, -59, 14, 98, -88, 4, -124, 84, 13, -4, -72, -113]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[78, 72, 28, -55, 57, 92, 21, 10, -53, -119, 1, -70, -21, 86, 67, 56]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[105, -54, 74, -14, -112, 56, 58, 64, 57, 41, 46, -96, -66, 47, 117, -124]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[94, -94, 12, 106, -117, 31, -105, 9, -12, -112, -47, 27, 98, -79, -91, 48]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-59, 89, -80, 122, -117, -11, 67, -71, 56, 88, -119, 115, 30, -23, 96, -22, 77, -47, 23, -117, -1, 54, -35, -87, -23, 20, -44, 120, -87, -111, 62, 71, 105, -54, 74, -14, -112, 56, 58, 64, 57, 41, 46, -96, -66, 47, 117, -124]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-12, 36, -97, -123, -58, 118, -11, 59, 89, 46, -65, -92, 61, 63, 87, -76, 66, 78, -116, -35, 63, -101, -44, 72, -38, -39, -38, -82, 91, -51, -23, -66, 105, -54, 74, -14, -112, 56, 58, 64, 57, 41, 46, -96, -66, 47, 117, -124]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-120, -114, 83, 108, 56, -63, -17, -114, -97, 55, -98, 125, -116, 120, 118, 42, -101, -68, -80, -55, -10, 12, 17, 28, -24, -41, -11, -50, 82, -33, 97, -75, 90, 76, -61, -113, 95, 84, 125, -4, -72, 24, -126, 123, -54, 76, -3, -110, 94, 127, 16, -84, 93, 108, -96, -33, 92, 20, 44, -11, -7, 59, -97, -60, 13, -109, -64, -39, 84, 126, 9, -128, 39, -78, 36, -37, -1, -2, -16, -30, 9, -10, 0, -59, 21, 33, -19, 11, -102, 124, -30, -89, -107, 18, -68, 17, 105, -54, 74, -14, -112, 56, 58, 64, 57, 41, 46, -96, -66, 47, 117, -124]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-31, 86, 63, -74, -93, 89, 100, -65, -49, 62, -65, -72, -1, -12, 43, 126, 88, 66, 42, 112, -48, 118, 124, 127, -35, 118, -97, 84, -102, 121, 125, 58, 105, -54, 74, -14, -112, 56, 58, 64, 57, 41, 46, -96, -66, 47, 117, -124]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-120, -116, -100, 55, -108, 101, 109, -9, 63, 74, 7, 10, -22, 45, -90, -28, -57, -12, 93, 87, 76, 99, -21, -97, 81, -27, 120, -33, -21, -83, 92, -66, 105, -54, 74, -14, -112, 56, 58, 64, 57, 41, 46, -96, -66, 47, 117, -124]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[115, 3, -58, 33, -34, -47, 79, -12, 52, -11, -73, 89, 95, -26, -68, -103, -109, -118, 45, 8, 20, 8, -31, 86, 96, 125, -120, 16, 25, -82, 82, 65, -122, -56, -38, -35, 115, -17, -18, 75, 65, 115, 107, -80, -72, -30, -95, 16, 104, -105, -86, 83, -113, -17, 79, -61, -9, 85, -17, -88, -15, -98, -5, 52, -81, -34, 64, 73, -52, 40, -27, 40, -31, 127, 59, -8, -66, -32, 86, 94, 97, 43, 34, 19, -125, 66, -104, -16, 39, -26, 88, -124, -108, -13, -43, 18, 105, -54, 74, -14, -112, 56, 58, 64, 57, 41, 46, -96, -66, 47, 117, -124]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey41);
        java.lang.Class<?> wildcardClass51 = secretKey41.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-90, 5, 98, 121, 23, -82, 29, 121, 81, -2, -56, 123, -91, 30, 0, 99]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-97, 6, -55, 97, -55, -2, 86, -61, -49, -116, -88, 105, -25, 31, -48, -15]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-14, 14, 124, 70, -51, -73, -104, 56, -32, -99, 29, 97, 48, 37, 14, 25]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-72, -31, -45, -57, 113, 94, 21, -46, 7, -37, -41, -101, 83, 118, -95, 32]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-18, 10, -78, -51, 97, -90, -34, 63, 56, -78, 39, 107, -96, 45, 68, 28]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[114, 33, -70, -125, 94, 32, -4, 68, 111, -51, -113, 2, 45, 98, -102, 126]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-92, 94, 48, -118, 21, 90, -58, -50, 1, 23, -123, -28, -100, -123, 34, -40]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[66, -68, 108, -29, 124, 114, 61, 115, 55, -25, 85, -37, -48, 114, -76, 66]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-69, -123, 105, 109, 74, -30, 25, -58, 38, -31, 47, -62, 110, 43, -55, 43, -30, 67, 101, -83, -10, -109, 25, 79, 24, 108, -76, 13, 110, -104, 111, -85, -92, 94, 48, -118, 21, 90, -58, -50, 1, 23, -123, -28, -100, -123, 34, -40]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-72, 3, 113, 45, -120, -41, -27, 26, 39, 74, -33, 65, 43, 20, -86, -2, -40, -84, 98, -17, 88, 41, -93, 41, -80, -11, 55, 112, -92, 44, -74, -91, -92, 94, 48, -118, 21, 90, -58, -50, 1, 23, -123, -28, -100, -123, 34, -40]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[106, 8, 109, -118, 79, -78, 110, 68, -14, -106, -17, 29, 77, -100, -64, -109, -73, -121, -93, -20, 63, 94, -9, 41, -39, 8, 9, -114, 105, -83, 41, -91, -23, -46, -79, 85, 32, 97, -19, -103, -111, -105, 26, 88, -6, 86, 100, 116, 59, 115, -50, -45, 110, 101, -70, 16, -7, -51, 21, -126, -40, -63, -40, 3, 9, -99, -47, -94, 115, 74, -94, -53, -39, -100, -8, -38, -128, 75, 8, 30, -102, 63, -9, 33, -6, -73, 76, 94, -39, 118, 55, -77, -117, 117, -25, -41, -92, 94, 48, -118, 21, 90, -58, -50, 1, 23, -123, -28, -100, -123, 34, -40]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-82, -95, -29, 16, -72, -78, -28, 82, 3, -115, 56, -26, -95, 98, 54, -67, 105, 11, 84, -59, -68, -20, -28, -41, 95, 35, -25, -51, -65, -66, 25, 65, -42, -88, 66, -127, 92, 79, -11, -126, -30, -29, 113, 55, 111, -53, 81, 42, 86, -37, 99, 113, 80, -6, 118, 124, -128, 106, -18, -127, -98, 14, 42, -31, -23, -6, -45, -56, 127, 33, 127, 100, 89, -94, -55, -15, -90, -15, -120, 49, 20, -53, 90, 16, 0, -9, 69, -5, -58, -92, 26, 16, 95, 125, 108, 11, -92, 94, 48, -118, 21, 90, -58, -50, 1, 23, -123, -28, -100, -123, 34, -40]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-34, 56, -24, 53, -33, 87, -60, -25, -103, -73, 40, -57, 109, -77, 23, -45]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[60, 83, -76, 20, 41, -55, 19, 67, -99, 33, 24, -66, -47, -47, -73, 60]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-34, -9, -45, 124, 127, -104, 16, -40, 9, -44, 17, -87, 106, -49, -29, -31]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[11, -57, -4, -64, 0, -57, -119, 74, -77, 110, -13, 69, -109, 70, -63, -67]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-109, -29, -110, 2, 94, 7, 104, -65, -83, 80, -122, -124, -28, -74, -35, -18, 40, -12, -20, 25, 112, 55, -98, -86, 66, -53, 81, 39, 78, -69, -106, 74, -34, -9, -45, 124, 127, -104, 16, -40, 9, -44, 17, -87, 106, -49, -29, -31]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[70, 37, 22, -91, 39, -22, 65, -10, -30, -31, -45, 126, 126, 2, 5, 48, -48, -122, -52, 10, -123, 16, -40, 59, 85, 107, 28, 17, -70, -47, 72, 49, -34, -9, -45, 124, 127, -104, 16, -40, 9, -44, 17, -87, 106, -49, -29, -31]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[106, -62, 102, -50, -107, 93, 100, -37, -88, 33, 36, 65, -54, -88, -6, -54, 65, -124, 26, -91, -104, 111, 91, -127, -12, -100, -100, 77, 84, -25, -96, 99, -110, 40, -62, -27, 98, 65, -81, -97, 68, -4, -39, -119, 46, -98, 2, 58, 4, -2, 86, 23, -22, 91, -109, -10, 122, 73, 10, -71, 62, -106, 6, -1, 94, 96, 97, 91, -125, 4, -40, -103, -43, 2, -125, 74, 110, -125, -123, -64, 33, -128, 113, 80, -64, -55, -64, -103, -87, 99, 12, 126, 86, -78, -42, -34, -34, -9, -45, 124, 127, -104, 16, -40, 9, -44, 17, -87, 106, -49, -29, -31]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "6AC266CE955D64DBA8212441CAA8FACA41841AA5986F5B81F49C9C4D54E7A0639228C2E56241AF9F44FCD9892E9E023A04FE5617EA5B93F67A490AB93E9606FF5E60615B8304D899D502834A6E8385C021807150C0C9C099A9630C7E56B2D6DEDEF7D37C7F9810D809D411A96ACFE3E1" + "'", str27, "6AC266CE955D64DBA8212441CAA8FACA41841AA5986F5B81F49C9C4D54E7A0639228C2E56241AF9F44FCD9892E9E023A04FE5617EA5B93F67A490AB93E9606FF5E60615B8304D899D502834A6E8385C021807150C0C9C099A9630C7E56B2D6DEDEF7D37C7F9810D809D411A96ACFE3E1");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "6AC266CE955D64DBA8212441CAA8FACA41841AA5986F5B81F49C9C4D54E7A0639228C2E56241AF9F44FCD9892E9E023A04FE5617EA5B93F67A490AB93E9606FF5E60615B8304D899D502834A6E8385C021807150C0C9C099A9630C7E56B2D6DEDEF7D37C7F9810D809D411A96ACFE3E1" + "'", str28, "6AC266CE955D64DBA8212441CAA8FACA41841AA5986F5B81F49C9C4D54E7A0639228C2E56241AF9F44FCD9892E9E023A04FE5617EA5B93F67A490AB93E9606FF5E60615B8304D899D502834A6E8385C021807150C0C9C099A9630C7E56B2D6DEDEF7D37C7F9810D809D411A96ACFE3E1");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "6AC266CE955D64DBA8212441CAA8FACA41841AA5986F5B81F49C9C4D54E7A0639228C2E56241AF9F44FCD9892E9E023A04FE5617EA5B93F67A490AB93E9606FF5E60615B8304D899D502834A6E8385C021807150C0C9C099A9630C7E56B2D6DEDEF7D37C7F9810D809D411A96ACFE3E1" + "'", str29, "6AC266CE955D64DBA8212441CAA8FACA41841AA5986F5B81F49C9C4D54E7A0639228C2E56241AF9F44FCD9892E9E023A04FE5617EA5B93F67A490AB93E9606FF5E60615B8304D899D502834A6E8385C021807150C0C9C099A9630C7E56B2D6DEDEF7D37C7F9810D809D411A96ACFE3E1");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-119, -121, -64, -58, 74, -101, -20, 107, 103, 3, 18, -70, -70, -42, -75, 116]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[122, 34, 54, 36, 93, 65, 46, -70, 4, -30, 96, 81, -12, 55, 35, 65]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[122, 34, 54, 36, 93, 65, 46, -70, 4, -30, 96, 81, -12, 55, 35, 65]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-26, 55, 66, 34, 63, 40, 109, -109, 17, 102, 47, -67, 127, -115, -20, 83, 96, -2, 13, 26, 33, -34, -124, 57, -39, 71, -34, -47, 100, -68, -43, -92, -119, -121, -64, -58, 74, -101, -20, 107, 103, 3, 18, -70, -70, -42, -75, 116]");
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-118, -15, 6, -4, 95, -99, -126, -38, 35, -78, 88, 27, -60, 54, -84, 53]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[32, 38, -106, -123, -39, -90, 96, -13, 19, 77, -98, -90, 60, -49, -115, 73]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-14, 97, 91, 57, -25, -33, 104, -60, 59, -37, -98, 78, -68, 66, -34, -113]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-116, 84, 75, -98, 72, -114, 108, -49, 104, 123, -71, -79, -114, 51, 61, 122, -75, -10, 48, -98, 96, 76, -12, 73, 86, 109, 10, 122, 14, -30, 89, 37, -118, -15, 6, -4, 95, -99, -126, -38, 35, -78, 88, 27, -60, 54, -84, 53]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-61, -39, 42, -83, 118, 96, 22, -36, 120, 7, 66, 48, 112, -47, -45, -54, -126, 44, 100, 75, 53, 106, -17, -40, -70, 117, 50, -28, 28, 110, -34, -85, -118, -15, 6, -4, 95, -99, -126, -38, 35, -78, 88, 27, -60, 54, -84, 53]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[43, -26, -69, 41, 30, -34, 120, 89, -71, -27, 78, 81, -95, -42, -48, -74, -23, 19, -121, -44, -98, 56, -123, -45, 57, 108, 116, 33, 12, -74, 31, 121, -118, -15, 6, -4, 95, -99, -126, -38, 35, -78, 88, 27, -60, 54, -84, 53]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-121, 65, 41, -124, -18, 90, -116, 45, 72, -90, 58, 63, -18, -30, -63, 0, -57, 46, -8, -29, 70, 33, 109, 81, 66, 79, -93, -122, 106, 12, 21, 22, 39, -73, -119, -112, 120, 54, 127, 22, -98, -45, -55, 117, -60, 57, -67, -77, -117, -89, -48, 120, 30, -119, -53, 10, -56, -4, -51, -85, -105, 113, -31, 3, 57, 110, -105, 67, 100, -93, -109, -47, -104, 98, 57, 48, 1, -119, 21, 46, 92, -112, -54, 102, 38, -123, 97, 119, 86, 32, 94, -36, 121, -81, 15, 25, -118, -15, 6, -4, 95, -99, -126, -38, 35, -78, 88, 27, -60, 54, -84, 53]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey7);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey43);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey43);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey43);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey43);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[117, -75, -107, 22, 53, 96, 20, -102, -94, 120, -56, 55, -16, -53, -109, -11]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[80, -15, 115, 127, 113, 125, 119, 52, 61, 32, -94, -106, -121, -10, -80, -72]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-109, 48, -87, 81, 94, 11, 3, -72, -120, -44, -90, 38, 105, 71, 66, 63, 33, 47, 3, -11, -111, -120, 115, -21, -77, -72, -71, 67, 77, -31, -43, 95, -122, 86, 94, -54, 114, -66, -6, -88, -50, 110, -96, -119, 68, -71, 23, -51, -44, -61, 57, 113, -106, 4, -110, -60, -92, -48, -42, -47, -91, 79, 39, 19, 119, 116, -10, -61, 94, 3, -106, 102, -56, -55, 65, -116, -35, -4, 42, 88, 57, -67, -97, -48, 90, -110, 94, -19, 80, 51, -69, -65, 92, -115, -101, 15, 117, -75, -107, 22, 53, 96, 20, -102, -94, 120, -56, 55, -16, -53, -109, -11]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[48, -109, 20, 43, -70, 125, 49, 12, 124, 48, -92, -82, -77, 1, -100, 35, -61, 97, -119, -30, -6, 54, 110, -105, 65, -76, -115, -52, -79, 68, -56, -46, 117, -75, -107, 22, 53, 96, 20, -102, -94, 120, -56, 55, -16, -53, -109, -11]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-36, -119, 38, 123, -95, -74, -28, -3, -86, -81, -106, 63, 10, -80, 22, 102, 47, 63, -22, 19, -102, 3, -83, 0, 40, 61, 54, 92, 68, 36, 126, -66, 16, 123, 17, -71, 31, -107, -33, 7, 125, -121, -54, 118, 5, 65, -12, 20, -54, 8, 36, 62, -112, 30, 126, -113, 99, 24, -16, -121, -121, -18, -5, 30, -75, 120, -58, -79, -1, 61, -16, 96, 22, 106, 106, -9, -43, 14, 24, 85, -14, -99, -110, -83, -36, -115, 40, 76, -11, 35, 97, 4, 76, 2, -94, 116, 117, -75, -107, 22, 53, 96, 20, -102, -94, 120, -56, 55, -16, -53, -109, -11]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-70, -115, -86, 17, 12, 4, -10, 14, -87, 52, -103, -108, 104, 109, -17, -113, 40, 84, 109, -33, 79, -89, -70, 26, 75, 21, -66, 95, -78, -106, 51, 111, 117, -75, -107, 22, 53, 96, 20, -102, -94, 120, -56, 55, -16, -53, -109, -11]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[9, -87, -36, -49, -122, 41, 122, 94, -1, -46, 65, 65, -62, -28, 105, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[55, 63, 114, -34, 91, -69, -55, -20, -73, 36, -68, 113, 28, -121, -120, -93]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[11, 111, 9, -55, 93, 77, -104, -61, -91, 64, -20, -29, 106, -51, 115, -38]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[68, 55, -35, 108, 38, 54, 126, -13, -107, -50, 42, -73, -22, -82, -90, 70]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-113, 1, 90, -94, 64, 94, 46, 40, 100, -3, -75, 90, 63, 64, 101, -8]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[103, -116, -17, -2, 56, 8, 10, 124, 79, -91, 49, 61, 54, 88, 50, -51]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[103, -116, -17, -2, 56, 8, 10, 124, 79, -91, 49, 61, 54, 88, 50, -51]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-110, -61, 1, 59, -66, -43, -115, -48, 2, 32, -114, 83, 40, 57, -120, 103, -56, 53, -112, -102, 54, -47, 60, -22, 110, -84, -94, 125, 14, -67, -86, -121, -113, 1, 90, -94, 64, 94, 46, 40, 100, -3, -75, 90, 63, 64, 101, -8]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-105, 29, -76, 118, 31, 90, 69, 8, -41, 45, -11, -94, -128, 79, 46, 102, 96, 90, 87, -107, 64, -34, 121, -34, 106, 60, -102, 23, 85, 7, -18, 113, -113, 1, 90, -94, 64, 94, 46, 40, 100, -3, -75, 90, 63, 64, 101, -8]");
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass25 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-48, 15, -102, -78, 14, -100, 64, -88, -105, 84, 86, 65, 110, -62, 74, 16]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-24, 124, -15, -44, 11, -128, 16, 84, 95, 34, 5, -81, 70, -38, 61, -57]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-24, 124, -15, -44, 11, -128, 16, 84, 95, 34, 5, -81, 70, -38, 61, -57]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("\006\ufffd\ufffd\t\ufffd\023S\031\ufffd\ufffd}+", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey22);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[29, -119, 25, 120, -42, -1, -77, 54, -95, 41, -18, 83, -79, 5, -85, 32]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[67, 101, 44, 98, -32, 20, 6, 75, 74, -59, -11, 69, 71, 121, -38, 75]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[26, 57, 59, -29, -58, -80, -33, -54, 87, -107, -40, -128, 89, -76, 110, -100, -121, 57, 73, -2, 109, 119, -114, 64, 4, 50, 54, -99, 103, 75, -80, -44, 108, 0, -78, 102, 8, -1, 92, -43, -8, -125, 5, 119, -37, 57, -3, 14, 126, 106, 123, -24, -93, -122, 38, 57, 21, 66, 70, -105, -119, 14, -10, 22, -9, -100, 67, -86, 48, 52, -105, 112, -51, -76, 22, -41, 87, 116, -31, 106, -118, 23, 108, 89, 94, 109, -23, -29, 46, 116, 71, 54, 24, 3, -15, 1, 29, -119, 25, 120, -42, -1, -77, 54, -95, 41, -18, 83, -79, 5, -85, 32]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 37, 114, 29, -61, 8, -61, -94, -88, -62, -65, 108, -88, 122, -14, -123]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "6425721DC308C3A2A8C2BF6CA87AF285" + "'", str14, "6425721DC308C3A2A8C2BF6CA87AF285");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "6425721DC308C3A2A8C2BF6CA87AF285" + "'", str15, "6425721DC308C3A2A8C2BF6CA87AF285");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-68, 29, 30, 20, -17, 10, -90, -96, -17, -76, 106, 14, 115, -109, -94, -127]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-120, -6, 77, -39, -75, -74, 57, -56, -109, 96, 13, -69, 61, -29, -80, -71]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[108, -93, 35, 55, 47, -16, -2, 120, -76, -21, -80, -101, 7, -82, 126, 31, 10, -116, -85, 127, -19, 27, -76, -68, 70, 106, 3, -104, 79, -99, -1, -128, 23, -118, -85, 77, -48, 110, -75, 15, -85, -16, -88, -62, 77, -61, 88, 78, -127, 82, 27, -121, -3, 79, 24, 37, 28, 10, -94, 123, -57, -4, 53, 24, -12, 21, -59, 58, -38, -105, 73, 82, 22, 72, 104, 99, -54, 6, -33, -75, 67, -108, 41, -102, 92, 57, 125, 119, 34, -88, 113, -61, 45, 22, 41, 107, -68, 29, 30, 20, -17, 10, -90, -96, -17, -76, 106, 14, 115, -109, -94, -127]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-14, 15, 53, -100, 119, 81, 52, 91, 27, 36, 79, 32, -61, 8, -81, 21, -52, -63, -55, 43, 125, -22, 83, 11, -34, 24, -3, 88, -75, 60, 87, 106, -68, 29, 30, 20, -17, 10, -90, -96, -17, -76, 106, 14, 115, -109, -94, -127]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[8, -79, 98, -127, 27, -96, 76, -13, 111, -82, -119, -15, -27, -15, -102, -122, -27, 83, 112, -54, -30, 59, 13, 103, 13, 40, -74, -97, -106, 104, 118, 127, 37, -39, 110, 104, -30, 100, 32, 97, 12, 1, -67, 112, -9, -80, -15, 89, 64, -89, -18, -11, -68, 27, 1, 23, -10, 42, -2, 31, 39, 107, -40, -78, 78, 86, -61, 21, -96, 17, 30, -61, 22, 84, -30, -18, -8, 30, -39, 2, 48, 118, 69, -85, -75, 112, -19, -105, -128, -35, 16, -111, 80, 84, 47, -51, -68, 29, 30, 20, -17, 10, -90, -96, -17, -76, 106, 14, 115, -109, -94, -127]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-90, -68, -95, -39, 84, -126, -36, 47, -67, 44, 88, -14, 124, 110, -74, -113, 22, 84, -119, -66, 77, -23, 46, 54, -36, -23, 59, -103, -35, -40, 75, -110]");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E1967767FBCA9187364B14093D005B637DBE91B2976363574232CE85116F01D166B47891C81BDBC9F77F8848CC39E71474A928EB91D881CDF9EC4DDE7252AA9A435EE1BDE8B240F21A1D1B4FFE75996226C1CD2BD742FFA9ABCF23870D8001A51036471E38BC7ED00A707B277F1A2A85EF0F14916F4C16777ECF2D34D7B4D2FF1AF4CBBADF4C95C01B48726F27A04FD1A7B178BF9E45868E2CA232F29FFDC5E005017B2E23B8CD5D8CC1C102CC4BF9A9F32B22A9F474104BFC0E8CB9863C7DB708EF3F149A810CEEEE2FE64315F32241590357462707D8F48DC82B9D18378750266F61B97521CE0AB6AF87A58E2585C", secretKey4);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey32);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey32);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey32);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[119, -6, -25, -42, -67, -41, 76, 104, -61, 121, -73, -47, -12, -92, 43, 37]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[85, 25, -97, -79, -101, -84, -115, -124, -54, 33, 52, 42, -80, -85, 41, 43]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-110, -68, -97, -79, -46, -68, 65, 15, -77, -26, 24, 108, 63, -58, 105, -87]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-50, 83, -97, -2, 121, -87, -106, -53, -117, 99, -4, 53, 6, 19, -54, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-127, -112, -33, 90, 16, -36, 90, -11, -125, -43, 5, 127, -37, -92, -111, 27]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[34, 37, 101, -124, 67, -11, -12, 61, 91, 46, 99, -71, -122, 72, 84, -23, 115, 78, -61, 44, 87, 75, 27, -36, 95, -12, -28, -41, -77, 43, 0, 21, -50, 83, -97, -2, 121, -87, -106, -53, -117, 99, -4, 53, 6, 19, -54, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[73, -74, 83, 1, -45, -4, 82, -68, -88, -103, 32, -36, 8, 108, -108, -76, 71, -115, 50, -85, -10, -18, -24, 98, 19, -4, -17, 12, 84, 39, 14, -75, -50, 83, -97, -2, 121, -87, -106, -53, -117, 99, -4, 53, 6, 19, -54, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-14, 67, -108, 82, 121, -69, -120, 1, -65, 35, -108, 116, 59, -54, -27, -124, 33, -80, 45, -79, 7, -58, 127, 106, 11, 57, -85, -92, -88, 28, 16, 25, -99, 24, -126, -91, -54, -9, 8, -118, 103, -100, 25, 72, -81, 124, -22, -45, 36, -64, -49, 28, 86, 2, -40, 62, 110, -65, -76, -52, -66, 0, 24, -19, -38, 114, 0, -102, 101, 117, -28, -123, -59, -64, -61, -126, -33, 60, -105, -63, 4, 82, 39, -31, -23, 67, -45, 70, -32, -10, 56, 88, -76, -62, -94, 104, -50, 83, -97, -2, 121, -87, -106, -53, -117, 99, -4, 53, 6, 19, -54, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[40, 99, 79, -60, -40, -21, -69, -62, -62, -4, -18, 117, -17, 26, 80, 49, -21, -37, -89, 8, 97, 88, -79, -82, 4, -28, -28, 59, -124, 4, 110, -49, -50, 83, -97, -2, 121, -87, -106, -53, -117, 99, -4, 53, 6, 19, -54, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-14, 67, -108, 82, 121, -69, -120, 1, -65, 35, -108, 116, 59, -54, -27, -124, 33, -80, 45, -79, 7, -58, 127, 106, 11, 57, -85, -92, -88, 28, 16, 25, -99, 24, -126, -91, -54, -9, 8, -118, 103, -100, 25, 72, -81, 124, -22, -45, 36, -64, -49, 28, 86, 2, -40, 62, 110, -65, -76, -52, -66, 0, 24, -19, -38, 114, 0, -102, 101, 117, -28, -123, -59, -64, -61, -126, -33, 60, -105, -63, 4, 82, 39, -31, -23, 67, -45, 70, -32, -10, 56, 88, -76, -62, -94, 104, -50, 83, -97, -2, 121, -87, -106, -53, -117, 99, -4, 53, 6, 19, -54, 0]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[71, -9, 62, 28, -123, -120, -54, 98, -68, 68, 63, 83, 35, -128, 103, -38, -22, -73, -67, -15, -124, 73, -44, 85, -25, -64, 88, 84, -109, -35, 117, 39, 8, -3, -64, 77, -89, 86, 124, 28, -70, -86, 46, 63, -28, -13, 80, -6, 108, 27, -4, -16, 45, 30, 74, -100, 106, -65, 45, 91, -109, 2, 8, 118, 37, -107, 65, -12, 112, -45, -75, -66, -119, -90, -2, -7, 10, -2, 97, 4, 50, 88, 49, -98, -24, 79, -40, -28, -69, 31, -68, -114, -114, 73, -115, -83, -50, 83, -97, -2, 121, -87, -106, -53, -117, 99, -4, 53, 6, 19, -54, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-50, 83, -97, -2, 121, -87, -106, -53, -117, 99, -4, 53, 6, 19, -54, 0]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-43, -10, 23, -36, -11, 47, -10, 71, 121, 114, 98, 76, -99, -60, 104, 31, 42, -96, -94, -67, 54, -76, -32, -7, 47, -121, -31, -63, 25, -18, -69, -127, -50, 83, -97, -2, 121, -87, -106, -53, -117, 99, -4, 53, 6, 19, -54, 0]");
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[111, 98, -18, 121, 127, 91, 17, -10, -94, 17, 52, -40, -90, -80, 49, -6]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-74, -117, -6, 23, -125, -47, 126, 76, -125, -121, 105, 109, 43, -6, -12, 123]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-79, 97, -96, -7, 103, 111, -105, 70, -18, 8, 120, -37, -96, -2, 3, -29]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[107, 28, -73, 83, -26, -53, 103, 109, 67, -33, 92, 61, 64, -102, -72, 118, -120, 46, -3, -55, 28, 65, -20, 127, 46, -93, -21, -39, 90, -98, 50, -15, 111, 98, -18, 121, 127, 91, 17, -10, -94, 17, 52, -40, -90, -80, 49, -6]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "6B1CB753E6CB676D43DF5C3D409AB876882EFDC91C41EC7F2EA3EBD95A9E32F16F62EE797F5B11F6A21134D8A6B031FA" + "'", str9, "6B1CB753E6CB676D43DF5C3D409AB876882EFDC91C41EC7F2EA3EBD95A9E32F16F62EE797F5B11F6A21134D8A6B031FA");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        java.lang.Class<?> wildcardClass15 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[109, -69, -48, 87, -128, 43, -1, -91, 102, 106, 66, -9, -110, -73, 113, 22]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[20, -58, 65, 26, -38, -68, -50, -97, -50, 18, 45, 112, -7, 63, 89, 83]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[20, -58, 65, 26, -38, -68, -50, -97, -50, 18, 45, 112, -7, 63, 89, 83]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[109, -69, -48, 87, -128, 43, -1, -91, 102, 106, 66, -9, -110, -73, 113, 22]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[109, -69, -48, 87, -128, 43, -1, -91, 102, 106, 66, -9, -110, -73, 113, 22]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey3);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey46);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey46);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey46);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-51, 96, 116, 80, 95, 81, -55, -112, -96, 38, 56, 31, -68, 122, -85, 95]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-109, 60, 35, 1, 32, 31, 0, 8, 66, -9, 44, 11, 9, -76, 94, 39]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[61, 106, 121, 56, 113, 49, -60, -35, 106, -114, -26, -122, -101, 9, 96, -82, -27, -19, 21, -58, 69, 117, -98, -51, -60, -3, -86, 42, -1, -20, -90, 103, 23, 114, 34, -90, 38, -98, 95, 126, 65, 112, -16, -82, -92, -16, -125, 123, -43, -80, 1, -32, 17, 29, -58, -25, 17, -84, -48, 96, 15, 43, 23, 109, -54, 24, -7, -40, -111, -119, -90, 71, -65, -97, 4, 21, 19, 40, -128, -70, 20, -100, -54, 39, 57, -105, 39, -28, 26, -60, 45, -84, 36, 93, -126, 27, -51, 96, 116, 80, 95, 81, -55, -112, -96, 38, 56, 31, -68, 122, -85, 95]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[29, -14, 109, 81, 81, 107, 56, -54, -56, -50, -27, -21, -57, -118, -27, 35]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[98, -121, 121, -6, 5, 1, -46, 95, -121, -87, 38, -118, 49, 81, -59, -48]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-67, -84, 84, -96, -94, -66, -40, 82, -34, -38, -52, 71, -101, -97, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[49, 76, -94, 77, 39, -6, 12, 92, -25, 125, -35, -50, -103, -81, 114, -19]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[23, 102, 109, -8, 123, 9, 108, -66, 37, -82, -93, -56, 100, -111, 9, -124]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-23, 52, 97, 97, -94, 113, 123, -32, 19, -13, 91, -6, -121, -77, 22, 53]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[35, 117, -10, -48, 95, 64, -77, -76, 86, 42, -62, -70, -110, 41, -25, 48]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[30, 105, -15, -104, 80, 47, 34, -67, -94, 126, -37, -64, 30, -51, 34, -7]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-114, 59, -90, -95, -19, -51, -69, 61, -69, -1, 64, 43, -66, -50, 44, -122, 76, -80, 58, 120, 8, 54, 76, 115, -66, -85, 51, -121, -118, -60, 51, -16, 35, 117, -10, -48, 95, 64, -77, -76, 86, 42, -62, -70, -110, 41, -25, 48]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-23, -31, 76, -70, -119, -49, 106, 115, 17, 49, -86, 30, -120, 61, 40, -72, -16, -73, 65, 22, 50, 86, 3, -38, -53, 99, 11, 76, 35, -86, -68, 84, 35, 117, -10, -48, 95, 64, -77, -76, 86, 42, -62, -70, -110, 41, -25, 48]");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("BC852F10573BFB3EA459BBCF4C89C3DBD413E1B63A46E3F619320989BEF3CCCC01C9AE48D9635E142E93469B2822DF9576950499ABB9FF7790A445388419C22FE7F5ED261F10A6CE93CE6FCCA72D4E911FCAFD033250E3A80D90E2D68C75C4DD7A44F24529D06692ECE32AD0DAC7E22B", secretKey23);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-40, 66, -96, 48, -47, 40, 28, 18, -58, -92, -14, 115, -4, -82, 23, -83]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[90, -8, -88, 99, -76, -50, 26, 1, -83, 33, 92, -23, -64, 113, 80, 121]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-43, 60, 14, -12, -102, -113, -64, -74, -11, -5, -9, -102, -38, -113, -56, -30]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[40, 115, -113, 91, 98, -125, -113, -75, -69, 10, -63, 111, -68, 95, 101, 64]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-121, 109, 15, -22, -19, 29, 25, -56, -86, -23, 105, 73, 72, -27, 118, -111, -36, -91, -93, -2, -38, -87, 125, -45, -13, -113, 35, 33, 45, 46, 44, 34, -43, 60, 14, -12, -102, -113, -64, -74, -11, -5, -9, -102, -38, -113, -56, -30]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[14, -40, -47, -111, 41, 115, 0, 109, -10, 28, -60, -79, -98, 78, 78, -39, -74, 63, -17, -109, -57, 22, 22, -7, 28, -71, 10, 116, 61, 113, -94, -65, -43, 60, 14, -12, -102, -113, -64, -74, -11, -5, -9, -102, -38, -113, -56, -30]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-4, 60, -51, -85, 125, 89, 44, 30, -9, 52, -36, 81, 122, -19, 25, 64, -116, 36, 29, -127, -59, -52, -92, 59, -118, 3, 34, -85, 76, 87, 70, -25, 87, 23, 29, 20, 96, 75, 94, -20, -82, -32, 73, -85, 28, 2, 84, 16, 55, -107, -61, -108, -120, -17, 78, 78, 56, -86, -91, -120, 52, -75, -18, 74, 59, 122, 56, 113, 117, 30, 36, 92, 109, 0, 9, -101, -25, 122, 61, -124, -34, 22, -89, 8, 32, -19, 115, 6, 93, 18, 52, -24, 55, 126, -13, -51, -43, 60, 14, -12, -102, -113, -64, -74, -11, -5, -9, -102, -38, -113, -56, -30]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-4, 60, -51, -85, 125, 89, 44, 30, -9, 52, -36, 81, 122, -19, 25, 64, -116, 36, 29, -127, -59, -52, -92, 59, -118, 3, 34, -85, 76, 87, 70, -25, 87, 23, 29, 20, 96, 75, 94, -20, -82, -32, 73, -85, 28, 2, 84, 16, 55, -107, -61, -108, -120, -17, 78, 78, 56, -86, -91, -120, 52, -75, -18, 74, 59, 122, 56, 113, 117, 30, 36, 92, 109, 0, 9, -101, -25, 122, 61, -124, -34, 22, -89, 8, 32, -19, 115, 6, 93, 18, 52, -24, 55, 126, -13, -51, -43, 60, 14, -12, -102, -113, -64, -74, -11, -5, -9, -102, -38, -113, -56, -30]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-123, -101, -85, -101, -119, -9, -24, -69, 40, -22, -55, -115, -41, -91, -14, 72, -14, -71, 15, -92, 21, 27, -62, -58, -101, -40, -36, 97, 115, 33, -84, -23, -24, 95, -23, -37, 96, -89, 64, 64, -28, 112, 82, -82, 122, 53, 55, 27, 24, -91, -78, 97, -35, -57, 39, 118, 4, -22, -89, -34, -12, -16, -16, -42, 13, -52, -49, -104, 54, 21, -40, -69, -3, -15, 23, -98, -41, 41, -100, 15, 114, 60, 100, 48, -81, -5, -84, -28, 92, 126, 110, 61, 1, -8, 28, -98, -43, 60, 14, -12, -102, -113, -64, -74, -11, -5, -9, -102, -38, -113, -56, -30]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-35, 3, -25, -70, 105, 18, 91, -57, -7, -23, 22, -39, -15, 109, -73, 53, 116, -128, 9, 3, -54, -18, 11, 46, 49, -77, -62, -91, 55, -31, -128, -120, -43, 60, 14, -12, -102, -113, -64, -74, -11, -5, -9, -102, -38, -113, -56, -30]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1C4BF697A6C72FA5EC1A9B7E031F28994429358F78E66DEBB5B08FB336B9073FCA7BCBE1418C78ED62F018BB2C4ABDE6FBA668FAB1603B96ACD0EDC30F1C3272A715AB5CCE3D6EEC72F6929DDDF62BF2BB38BECFD17E152B17915761D32CE87F6FFA419C5144E3E97EFF4634290F56B7A2CB6F2AD6FD61C67F29A4E1F13CD8446BF19742A02AA3A8DFB5C59A73FC36658C31E2DB9D67722A494AF81F7ED70FDD5575410EE7C77B115C42FA02577C82A0C61B5F112A2ED34DBCFC79565FB2292E1CCF2E986918C58B0A193412091192396092A7E1977997BF5B545518B76889F0D53C0EF49A8FC0B6F5FBF79ADA8FC8E2" + "'", str35, "1C4BF697A6C72FA5EC1A9B7E031F28994429358F78E66DEBB5B08FB336B9073FCA7BCBE1418C78ED62F018BB2C4ABDE6FBA668FAB1603B96ACD0EDC30F1C3272A715AB5CCE3D6EEC72F6929DDDF62BF2BB38BECFD17E152B17915761D32CE87F6FFA419C5144E3E97EFF4634290F56B7A2CB6F2AD6FD61C67F29A4E1F13CD8446BF19742A02AA3A8DFB5C59A73FC36658C31E2DB9D67722A494AF81F7ED70FDD5575410EE7C77B115C42FA02577C82A0C61B5F112A2ED34DBCFC79565FB2292E1CCF2E986918C58B0A193412091192396092A7E1977997BF5B545518B76889F0D53C0EF49A8FC0B6F5FBF79ADA8FC8E2");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey25);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey25);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey25);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey25);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        java.lang.Class<?> wildcardClass39 = byteArray37.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[8, 65, -100, 28, -17, -8, -3, -98, -28, 46, -51, -61, 9, 97, 34, 2]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-11, -87, 4, 90, 55, 124, 5, 112, -109, 1, -89, -34, -30, -25, -69, -76]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-19, 56, -116, 101, -77, 93, -128, 29, -12, 68, 89, -84, -27, -37, -47, 115]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[18, -7, -80, -95, 76, 23, -14, -18, 89, 62, -77, -27, -24, -87, -41, -85]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-29, -1, 67, -16, 28, -33, 7, -34, 121, 64, -120, 9, -29, 8, 104, 109, 104, 85, 67, 21, 105, -118, 79, -11, -26, 52, -40, -89, 114, 19, 62, 78, -19, 56, -116, 101, -77, 93, -128, 29, -12, 68, 89, -84, -27, -37, -47, 115]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[68, 99, 112, 77, 46, -47, -73, -6, -91, 25, -57, -39, 79, 35, 75, 49, -20, -59, -100, -31, -121, -12, -42, 99, -13, 7, 73, -54, -8, -73, 125, -122, -19, 56, -116, 101, -77, 93, -128, 29, -12, 68, 89, -84, -27, -37, -47, 115]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[90, 7, 109, -127, -1, 16, -71, -125, -73, -43, 78, -35, -15, 117, 1, 46, 84, -68, 50, 57, -117, 85, 79, 62, 64, -44, 10, -4, -43, 29, -100, -73, 68, -44, 90, 33, -115, -62, 113, -122, 52, -85, -38, -28, -7, -20, 66, -31, -115, 127, -40, -77, 91, 16, -108, 73, 111, -68, -81, 23, -42, 123, -62, 37, -99, 79, -7, 64, 108, 47, -33, 10, -14, -21, -74, -6, 98, -68, -2, 47, 59, 66, -116, -53, 26, -50, -2, 84, 11, -110, 70, -11, 118, 98, -97, 0, -19, 56, -116, 101, -77, 93, -128, 29, -12, 68, 89, -84, -27, -37, -47, 115]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[124, -53, -71, 31, 26, -58, -54, 57, 54, 75, -84, 21, -79, 102, 47, -64, 37, 4, 10, 103, -26, 1, -123, 125, -79, 7, -30, -50, 40, -124, -100, 23, -19, 56, -116, 101, -77, 93, -128, 29, -12, 68, 89, -84, -27, -37, -47, 115]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[95, 92, 91, 16, 74, 59, 109, 14, -53, 7, 40, 57, 83, -87, 100, 38, -77, 118, 63, 82, -57, -70, 10, 14, 45, -37, -92, 66, -54, 66, -123, 60, 68, 33, 61, -109, -48, -52, 71, -32, -119, -69, -66, -13, -52, -67, -59, 25, -121, -116, -93, 40, 111, 80, -9, -33, 39, 64, 125, -63, -11, 115, -122, -56, -79, -54, 88, -12, -76, 98, -35, -94, -56, -14, -83, 78, 14, 100, 70, -20, 52, -95, -107, 25, -66, -121, -72, -102, -24, 27, 5, 41, -52, 54, -90, -76, -19, 56, -116, 101, -77, 93, -128, 29, -12, 68, 89, -84, -27, -37, -47, 115]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "B742EC799E5C490EEE7CA21BD5D962097DFECE38CCD35D8C2C10DF0D75AE911E425686BC23E64B2C33F59F200BA9F7591A1D2356EDD04ECD742141843E26EE45CCAF5C07307D3F8063E2879A5D747FD0CB1B295BB2123450DCDAA2265C62159048DA9B834843E90CDBAE779AD6775C321C0E53A3A0ECEB7A33EA8CFC6B52394A9A36C41BA253A508D4AABDA00AFA354058A72E1B74D68EA159BD0961610A4E7981DE6967639D0E08BA8EFF929278C66C7AD98E443FEB5F36CB5605FE8FB5DEDD9C807DF5E95BAD347315CB5C0929D9B7E087144637CDB0BA842F741F1C53D6C3ED388C65B35D801DF44459ACE5DBD173" + "'", str38, "B742EC799E5C490EEE7CA21BD5D962097DFECE38CCD35D8C2C10DF0D75AE911E425686BC23E64B2C33F59F200BA9F7591A1D2356EDD04ECD742141843E26EE45CCAF5C07307D3F8063E2879A5D747FD0CB1B295BB2123450DCDAA2265C62159048DA9B834843E90CDBAE779AD6775C321C0E53A3A0ECEB7A33EA8CFC6B52394A9A36C41BA253A508D4AABDA00AFA354058A72E1B74D68EA159BD0961610A4E7981DE6967639D0E08BA8EFF929278C66C7AD98E443FEB5F36CB5605FE8FB5DEDD9C807DF5E95BAD347315CB5C0929D9B7E087144637CDB0BA842F741F1C53D6C3ED388C65B35D801DF44459ACE5DBD173");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("9E3FA735129C449B99534E5E23A8CD37381E7A83D9BEBA2014B2C5301D9CBF2939A122A8A7ABF168E3D309422D89A40503600C06C72412872F119661B5C91C2BFDDB687C5C90027C4E4E15C34EB35CC5B0D23EEB4FEA44B6705E349738317C8F3FE0B5B4056E29386E3DEF440334A03F", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey54);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey54);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("6000978D729A5EAF02789174FCEF78DC19A6A5353FA2EE08001847BF93F672C57842A660B60BA3E3BAFC4CA493DB93BD616BA839F8FC6BCE8F25A5CFF9986984A5A08FB7FA9398912FBF66BA83D5698C9B89FE34ECEA63E7E13593D7BE10CB607921E0CEEC09BCE538EB3873308F1B39", secretKey54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey54);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[58, -115, 118, -37, -82, 35, -102, 2, 119, -86, 115, -71, -82, -91, 61, 90]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[126, -78, 84, 114, 64, 116, -126, -40, 102, 41, -58, -54, 52, 89, 105, -36]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[38, 56, 126, -56, 85, -32, -86, -49, 30, 93, -9, 85, 125, -75, -50, 64]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-105, 91, 80, 48, 114, -8, -122, -35, -52, -54, 123, 72, 126, 82, 37, -79]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[29, 13, -7, -77, -58, 45, 8, -42, -72, -111, -11, -53, 94, 32, -104, -84, -74, 21, 47, -80, 1, -68, 107, -66, -79, -100, 14, 127, -76, 119, -125, -56, 38, 56, 126, -56, 85, -32, -86, -49, 30, 93, -9, 85, 125, -75, -50, 64]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "26A8D85B628380E5BA24410B18F7D7A52CE5146CCD581C5D93DB947A1BDB37EFA6F6514469CA6F978B4CA19BA8C4134694D04ED40DC5C281723865094AAC3AE4B5E8788B3C9A360D65DE0B45B6802716464C154AD5CA12B154B1E9E00D2259D1EF4CC5FB6C01313A894D1CCA3939A31583BCB34171568EA9300A35CD8D1464773BF676FBFDD4B197515AF20F9161F03DE8516EFC996A7802FB3517E19B30267B3AF3368F0E115A859FF2FB46639312759C359A4247121B1E265B65858A8CE4D6DBC288735E6D8F6E361DA5FD8A8C73C40FCD30144E24C2851B0DCB8E02A0834C26387EC855E0AACF1E5DF7557DB5CE40" + "'", str25, "26A8D85B628380E5BA24410B18F7D7A52CE5146CCD581C5D93DB947A1BDB37EFA6F6514469CA6F978B4CA19BA8C4134694D04ED40DC5C281723865094AAC3AE4B5E8788B3C9A360D65DE0B45B6802716464C154AD5CA12B154B1E9E00D2259D1EF4CC5FB6C01313A894D1CCA3939A31583BCB34171568EA9300A35CD8D1464773BF676FBFDD4B197515AF20F9161F03DE8516EFC996A7802FB3517E19B30267B3AF3368F0E115A859FF2FB46639312759C359A4247121B1E265B65858A8CE4D6DBC288735E6D8F6E361DA5FD8A8C73C40FCD30144E24C2851B0DCB8E02A0834C26387EC855E0AACF1E5DF7557DB5CE40");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[117, 40, 60, 0, 16, 45, -40, 4, 39, 5, -73, 67, 76, -106, 70, 14]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-90, -92, 72, 6, -125, -34, -116, -40, 34, -6, 107, -47, -65, -118, 74, 63]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[13, -99, 67, 89, -65, -8, 11, 24, 38, -52, -75, 19, 40, 96, 95, 25]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-17, 5, 6, 47, 100, 100, -57, 70, 21, -57, 27, 90, 23, -89, 70, 3]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-6, 90, -85, -3, 30, -37, 62, 63, -19, -1, -110, -28, 87, -58, -8, 90]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[101, -49, 80, -67, -116, -112, 0, 30, 76, -91, 59, 17, -89, 44, 43, -48]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[101, -49, 80, -67, -116, -112, 0, 30, 76, -91, 59, 17, -89, 44, 43, -48]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-118, 112, 12, -95, -27, -47, -8, -72, -36, -108, 70, 15, -122, -128, 34, 12, 81, 40, -47, 98, 107, 45, -97, 106, 50, -82, 24, 106, 62, -64, -12, 5, -6, 90, -85, -3, 30, -37, 62, 63, -19, -1, -110, -28, 87, -58, -8, 90]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertNotNull(byteArray61);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("195F55C763088D9812854567ECF964A5E2CAB537B47CF7C98BB5619BF7A4EE1300A9BA7D98FE6A536314F4A7E4DF632222091D885922510718CB9C5BB12461092FD2F79D1310A341D506D056EFE756F471DAF6C7742F1EA9A225DA217264771294401BDF9DDDE7766B1446C2F6EC5F2D", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey6);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey34);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey34);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey34);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-65, 48, -56, -4, 112, -62, -82, -26, -53, -27, -38, -51, 7, 49, 94, 24]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 33, -68, 21, 93, -58, -23, 17, 80, -4, -61, -12, 94, -26, -99, -48]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 33, -68, 21, 93, -58, -23, 17, 80, -4, -61, -12, 94, -26, -99, -48]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-19, -31, 110, 65, 1, -86, -82, -101, 31, -100, -28, -77, 12, -59, 36, -18]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 33, -68, 21, 93, -58, -23, 17, 80, -4, -61, -12, 94, -26, -99, -48]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[115, -107, -87, 40, -50, 74, 101, -91, -113, -112, 84, -96, -24, -29, -71, -47, 8, -33, 116, 90, -19, -48, 0, -21, 69, 25, 42, 110, 106, -52, -83, -94, -65, 48, -56, -4, 112, -62, -82, -26, -53, -27, -38, -51, 7, 49, 94, 24]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-105, -92, 91, -49, -65, -87, -14, 42, 42, 27, 13, -4, 23, 110, -117, -35]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-101, -46, 64, -19, -111, 127, -120, -56, 26, 83, 102, 80, 94, -103, 101, -55]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-53, -20, -58, 61, -128, -105, -124, -68, 74, -58, 21, 52, 30, -1, 59, -119]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[59, 72, -119, 124, -14, 30, -42, -1, 12, -24, 27, -62, 14, 123, -18, -35]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-66, -102, -49, -75, -65, 87, 58, -111, 8, 101, 20, 117, -24, -82, 1, -50, -106, -26, 98, 60, 43, -5, 30, 72, 51, -89, -109, 83, 14, 91, -58, 48, -53, -20, -58, 61, -128, -105, -124, -68, 74, -58, 21, 52, 30, -1, 59, -119]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[32, -96, 42, 18, -118, 59, 89, 15, 2, 63, -42, -128, -82, -65, -115, -81, 90, -86, -113, -24, -67, -87, 115, -95, -35, 33, -42, -121, 122, 109, 110, -105, 103, 60, -67, 44, -58, -106, -96, -78, -22, 93, -27, 77, 44, 119, -120, 98, -73, -71, 55, -18, -83, 34, -86, 82, 53, 76, -20, -61, 78, -37, -35, -22, 20, -90, -89, -35, 32, -1, 107, -75, -21, 46, 115, 28, 106, 122, 92, 123, -107, -72, -115, -110, -64, -29, 20, 88, 125, -4, -120, -69, -100, 30, -7, -83, -53, -20, -58, 61, -128, -105, -124, -68, 74, -58, 21, 52, 30, -1, 59, -119]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-100, 11, -90, -114, 53, 55, 97, -41, -15, -26, -28, 25, 42, -72, -120, -79, 33, -23, -115, 52, 119, 21, -97, -115, -53, 83, -89, 50, -128, 76, 101, -49, -53, -20, -58, 61, -128, -105, -124, -68, 74, -58, 21, 52, 30, -1, 59, -119]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-53, -20, -58, 61, -128, -105, -124, -68, 74, -58, 21, 52, 30, -1, 59, -119]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[88, 63, 119, 87, 54, 61, -117, 64, 66, 28, 79, -53, -111, 32, 108, -25, 35, 74, 57, -12, 99, 58, 17, 117, -2, -112, 47, 54, 127, -82, -67, 88, -53, -20, -58, 61, -128, -105, -124, -68, 74, -58, 21, 52, 30, -1, 59, -119]");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey4);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey50);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey50);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey50);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey50);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey50);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-63, 125, 98, -13, -72, -51, 88, -60, -40, 122, 44, -75, -26, 75, 19, 124]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[57, -32, 39, -99, -71, 11, -74, -110, 95, -89, 96, -50, 106, 99, -78, -31]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-27, -93, -87, -78, -12, 104, 40, -1, 24, 111, -113, 0, -51, -99, 88, -123]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[99, -56, -33, 83, 94, 76, -78, 37, 101, 10, 77, -63, 87, -31, -16, -115, 17, -51, 81, 61, -107, 35, -34, -60, -4, 3, 98, -61, 71, 1, 104, 46, -63, 125, 98, -13, -72, -51, 88, -60, -40, 122, 44, -75, -26, 75, 19, 124]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[96, 60, -20, 104, 21, 109, -84, 103, -23, 46, 113, -18, -123, 39, 11, -40]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-52, 47, -60, 0, 83, -11, 24, -106, 7, 92, -5, -87, -46, -21, -10, 7]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[41, 107, -31, 117, 91, -69, 65, -18, -56, 18, -11, 23, -73, -89, 36, -77]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[22, -73, 73, -69, 36, -79, 60, 27, 95, -62, 32, -118, -68, 35, 81, -59]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-35, 47, -103, 0, 20, -50, 117, -109, 4, 53, -24, -84, 36, -34, -50, -6]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[110, 26, 125, -81, 54, 13, -2, 38, 10, -33, -21, -77, -18, 113, 82, -38]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-98, 125, -53, 73, -62, 53, -34, 127, 75, -72, 78, -23, 91, -37, 38, -64]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[22, -27, -15, -120, 75, 112, 101, -5, -58, 21, 26, -19, 26, 14, 103, 26]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-46, 126, 123, 52, -98, -99, 92, -100, -29, 55, 107, 113, -13, 17, -56, -30, -106, -4, 103, 88, 19, 77, -57, 33, -108, 5, -31, 18, 20, 0, -33, 77, -98, 125, -53, 73, -62, 53, -34, 127, 75, -72, 78, -23, 91, -37, 38, -64]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[108, -36, 35, 126, 69, -69, -29, -5, -11, 48, -86, -6, 24, -76, -2, 108, 115, -46, 52, 95, 40, -69, 101, -43, 94, -26, -26, -76, 103, 7, 48, -50, -98, 125, -53, 73, -62, 53, -34, 127, 75, -72, 78, -23, 91, -37, 38, -64]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[50, 84, 36, -83, 63, -12, 39, -109, -23, 15, -25, 87, -91, -63, -123, -64, 2, 63, 121, -28, 72, -78, -66, 24, 80, 19, -59, 76, 102, -52, 98, -43, -98, 125, -53, 73, -62, 53, -34, 127, 75, -72, 78, -23, 91, -37, 38, -64]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[29, -23, 95, 75, -15, -113, 75, -78, -58, -25, -95, 7, 115, 72, -84, 91, -30, -122, 125, 58, 21, -110, 16, -13, 68, 118, 79, 36, -31, 21, 47, 52, -85, -24, -84, -122, 98, -48, -116, -23, -62, -7, -72, -50, -19, 102, 66, 123, 12, -63, 44, 51, 42, 1, -121, 53, 125, 12, 92, -88, 86, -49, -87, -126, 90, -89, 15, 9, -3, 80, -63, -18, -102, -29, 111, -29, 10, 28, 3, 3, -45, 126, 81, 105, 95, 86, 47, -10, 9, -123, -73, 87, -48, 123, -57, 13, -98, 125, -53, 73, -62, 53, -34, 127, 75, -72, 78, -23, 91, -37, 38, -64]");
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("70447D5DCE145759E3388A3CCD89F924989683F0FDC00BC1CD71C230DD56CE0A8ABB73727C24C26EE585EC24104F875360ED0F8E1CFFC0071E3F5CA83405BA4E5607EE0E5CFA6D0A6C16E7A44BE9F8F09A9E2915302B6BBFC02C5CF755CFC6A3734E59D3F3A6901577018ACF3694A981", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("EC8EA26633DC04609AE498FE8AC0474D3EA18A86E7F6FA0026F8C9A89A3B73866DB993E4492FED70097622D97501A64A4C7ED826137FDA507962DB468E53D0B4D03A393A40294C080786E80D6274D92AAB2DB57873809F1143E36968F3C4037F320635DF18604CBCE4B94EE2E6451DC9", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("A81AD6210D7B9E5E8D7CD14D27F602DE76A2D78A0CB6F92EE8EBD2A4EDA3B9B90DF3A1C40BE37077C890EA053E5744CED4009962550F58F42A0764C6BDA8BAB99E9E6291DF104146F21A7A2492F18A783794D5F595A527F58109B2AA785B3CCB1A5E813472A32094E96A488DE2296A4196AF137D1FA63740CD0D70FD217720C3FA017FC27137169C164563FCCFADB2BD087989D056216DE643800569540118EC2D428E696B85F983691BFD9D37CF1547FE529A66CB6F6C538F11A7D6E4094F004BFB9F6D3FE66A4658404D5752E0897F005CC7BB176A4E4FCD31C94077CFB2350F7906F62D5FAA3BF6C60494748F126E", secretKey9);
        java.lang.Class<?> wildcardClass19 = secretKey9.getClass();
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[127, 61, -101, 2, -83, -125, -96, -92, -18, -79, 100, -128, -80, -65, -67, -89]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[101, -114, -111, 40, 58, 53, 98, -87, 63, -48, 119, -37, 18, -52, 67, 80]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[101, -114, -111, 40, 58, 53, 98, -87, 63, -48, 119, -37, 18, -52, 67, 80]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[36, 70, -106, 79, 67, 6, 3, 4, -35, 109, -1, -111, 118, 70, -61, -15]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[101, -114, -111, 40, 58, 53, 98, -87, 63, -48, 119, -37, 18, -52, 67, 80]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[125, -79, -70, 90, 2, 51, -88, 93, 80, -107, -43, 91, 6, -18, 88, 110, -31, -27, 56, -77, 122, -29, -62, 92, -96, 76, -8, 50, 1, 50, -75, 28, 127, 61, -101, 2, -83, -125, -96, -92, -18, -79, 100, -128, -80, -65, -67, -89]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-6, -128, -124, -118, -27, -62, 75, 37, -82, 61, 123, -82, 59, 29, 15, 74, -71, -54, -21, 7, -118, 103, 36, -15, 47, 95, 38, -89, 33, -28, 44, -122, 69, -26, 54, 6, -40, -78, 50, 7, 75, -120, -8, 50, 79, 34, 29, 108, -26, -122, -41, 111, 44, 13, 32, -80, -127, -61, -103, 82, 90, -86, 55, 115, 86, 18, 126, 79, -89, -64, 8, 67, 7, -78, 4, -61, -29, -110, -84, -73, 116, -56, 33, 69, -110, -86, 19, 110, 29, -3, 80, -85, 77, 91, -12, -99, 127, 61, -101, 2, -83, -125, -96, -92, -18, -79, 100, -128, -80, -65, -67, -89]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("8D634E09060D653DFDBF18A42493EA0992AD7636726F60C637F338FD701AE408BF5D927B2DC53D72797237845E245801", secretKey4);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-83, 81, 34, -58, -92, 115, -118, 81, 124, -14, -61, -121, -64, 24, -28, -56, 31, -24, 62, 124, -23, 25, 102, -99, 102, 58, -24, 7, -39, 47, -123, 8, -41, -122, 43, -61, -126, -97, -14, -124, 88, -13, 44, -79, -44, 10, -58, -12, -41, -50, 55, -106, 25, 120, -54, 37, 66, 4, -98, -126, 89, -91, -50, -12, -17, -50, 64, 125, 80, -127, 120, -38, -58, -96, -1, -61, 22, -88, -75, 121, 50, 38, 23, 94, 34, -54, -127, -35, -37, 20, 111, 106, 126, 99, -61, -97, -27, -38, -44, 108, -78, -116, 79, -91, -13, 96, 43, 29, -45, 78, -80, 106]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AD5122C6A4738A517CF2C387C018E4C81FE83E7CE919669D663AE807D92F8508D7862BC3829FF28458F32CB1D40AC6F4D7CE37961978CA2542049E8259A5CEF4EFCE407D508178DAC6A0FFC316A8B5793226175E22CA81DDDB146F6A7E63C39FE5DAD46CB28C4FA5F3602B1DD34EB06A" + "'", str8, "AD5122C6A4738A517CF2C387C018E4C81FE83E7CE919669D663AE807D92F8508D7862BC3829FF28458F32CB1D40AC6F4D7CE37961978CA2542049E8259A5CEF4EFCE407D508178DAC6A0FFC316A8B5793226175E22CA81DDDB146F6A7E63C39FE5DAD46CB28C4FA5F3602B1DD34EB06A");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey4);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey40);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey40);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey40);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey40);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[86, 126, -45, -124, 48, 110, 52, 72, 100, -116, -59, -52, 114, -34, -105, -101]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[15, -3, -108, -95, 71, 26, -74, -65, 49, 82, -112, 102, 90, -57, 9, -95, 119, -58, -81, -55, -2, 26, 121, -20, -119, -87, 72, -12, 82, 37, -57, 125, 56, -72, -51, 124, -21, -73, 104, 92, -31, -6, -58, -9, -63, 85, -64, 67]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[23, -90, -56, -128, -86, 8, -25, 1, -113, 119, 85, 18, 90, 93, 89, -31, 39, 54, 126, -11, -74, -10, -31, -62, -40, 36, -28, -43, 1, -45, -34, -116, 30, -72, -86, -123, -72, 39, -124, -124, 79, 76, 72, 127, -74, -121, 9, -42, 86, 108, -64, 9, -69, -2, 89, 63, 97, -73, 66, 5, -66, -15, 30, -25, -86, 118, 100, -107, -69, 52, -28, -104, 15, -24, -9, 111, 115, 89, -69, -57, 122, 78, -56, 41, 21, -41, 70, 11, -112, 3, -16, 25, -4, -23, 5, 87, 56, -72, -51, 124, -21, -73, 104, 92, -31, -6, -58, -9, -63, 85, -64, 67]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[126, -35, 45, -88, -33, 6, 95, -94, -43, -84, -46, 125, 94, 7, 16, -112]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[42, 12, 34, 75, -16, 116, -61, -127, 46, 11, -102, 108, 81, -71, -69, -69]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[64, 8, 65, 124, 94, -115, 85, -109, 90, 96, 4, -33, 88, 123, -81, -120]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[116, 62, 67, -111, 113, -49, -51, 20, -40, -99, -90, 26, -54, -4, -31, -62]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-89, -18, 77, 47, -120, -95, -114, 53, -35, 91, -40, 17, 121, 68, 76, 14]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-107, -10, 100, -40, -95, -88, 68, 25, 58, -58, 33, -58, -36, 77, 74, 112]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-107, -10, 100, -40, -95, -88, 68, 25, 58, -58, 33, -58, -36, 77, 74, 112]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[23, -42, 10, -124, 125, 112, -111, -53, 116, 110, -12, 121, -41, 124, -76, 32, 88, -70, -112, 9, 119, 12, 38, 115, 10, 69, 111, -97, -97, -11, -62, 8, -89, -18, 77, 47, -120, -95, -114, 53, -35, 91, -40, 17, 121, 68, 76, 14]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-51, 68, 81, -50, 127, 26, -104, -84, 96, -110, 105, -128, 11, -124, -127, -6, -7, 22, -65, 116, 23, -32, -100, 45, -34, -45, -45, -16, 71, -67, 113, 12, -89, -18, 77, 47, -120, -95, -114, 53, -35, 91, -40, 17, 121, 68, 76, 14]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-59, 87, 83, -123, -102, -26, 36, 36, 40, 67, 37, 121, 45, -48, -16, -20, 19, 24, -107, -59, -54, 36, 115, 91, 71, -114, -51, -63, -84, -16, 35, -23, -89, -18, 77, 47, -120, -95, -114, 53, -35, 91, -40, 17, 121, 68, 76, 14]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-8, -5, -97, -121, 29, 50, -20, -87, 56, 78, 51, -64, 12, -62, -128, 73, -65, -35, -53, -67, 7, 38, 82, 92, 83, -15, -14, -38, -89, 109, -104, -72, -4, 32, 51, -13, 113, 79, -36, -2, -112, -51, 12, 61, -105, -103, 12, 105, -117, 91, -116, 119, 77, -42, -21, 46, -60, -54, -97, 127, 32, -64, -42, -53, 89, 5, -10, -27, 18, -111, 117, 11, 56, 59, -56, 107, -39, 75, -90, -19, -57, -111, -113, -81, 85, -30, -3, 124, 93, -71, 45, 123, -104, -46, 63, -24, -89, -18, 77, 47, -120, -95, -114, 53, -35, 91, -40, 17, 121, 68, 76, 14]");
        org.junit.Assert.assertNotNull(byteArray50);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey25);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey25);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey25);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey25);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey41);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[56, 7, -104, -120, 80, -18, -54, -89, 37, 83, 70, -44, 33, 108, 53, -78]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[15, 111, 43, -113, 96, -58, -22, -91, -55, 117, -32, 18, 15, -61, -77, -90]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-124, 69, 109, 84, -18, 118, 7, 103, 41, 44, -29, -86, 111, 20, 106, 24]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[59, 29, -72, 54, 90, -41, 31, 83, -89, -27, 20, 126, 96, 50, 46, 57]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[21, -41, -35, 11, 23, -124, -83, 55, 114, 66, -93, 93, -103, 122, 124, 127, 71, -75, -97, -27, -87, 61, -71, 37, -128, -38, -61, 97, -123, 1, 7, -124, -124, 69, 109, 84, -18, 118, 7, 103, 41, 44, -29, -86, 111, 20, 106, 24]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[23, 23, -22, -17, 126, 12, -85, 101, 32, 66, -52, 40, 46, -107, 95, 66, -70, 23, -105, 125, 33, -59, -44, 88, -37, -76, 47, 37, 97, -47, 11, 19, -124, 69, 109, 84, -18, 118, 7, 103, 41, 44, -29, -86, 111, 20, 106, 24]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-7, 96, 32, -98, 127, -11, 54, 21, -93, 103, 14, -22, -54, 36, 71, -33, -106, -128, -113, -39, 23, 23, 71, 111, 73, 38, 106, -12, 116, -34, -78, 22, 9, -106, -31, 78, 13, -117, -9, 17, 65, -108, 36, -46, -57, -9, 35, -112, -64, 36, 74, 48, 67, -14, 100, -3, 36, 19, -116, -70, 2, -45, 102, -51, 122, -108, 42, -100, -108, 57, -3, -66, 66, -71, -7, -30, 33, 12, -7, -63, 3, -50, -31, 6, -4, -67, 48, -120, -28, -115, 15, -71, 14, 33, 89, 70, -124, 69, 109, 84, -18, 118, 7, 103, 41, 44, -29, -86, 111, 20, 106, 24]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[73, 36, -7, -36, 4, -99, -87, 110, 11, 107, 124, -92, 67, -128, -43, -99, 7, -64, 100, -99, 27, -35, -94, -65, 35, -43, -113, -70, -40, 48, -39, -128, -124, 69, 109, 84, -18, 118, 7, 103, 41, 44, -29, -86, 111, 20, 106, 24]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-123, -103, -26, 0, 124, -7, -116, -57, -50, -4, -36, -58, -108, -74, 120, -65, 12, -75, 92, 112, -38, 41, 50, -93, 125, 62, -97, -51, -19, -78, -17, 74, 124, 1, 23, -92, 92, -31, -117, 53, -19, 120, 123, -95, 121, 61, 98, 95, -73, -121, 63, -60, 47, 72, 16, 9, -54, 97, -92, 125, -25, -102, 7, 118, -126, -77, 35, 126, -54, -104, -98, 95, -50, 119, 17, -1, -47, 79, 16, -19, -62, -11, -10, -120, -31, -128, 26, -94, -37, 78, 57, -111, 91, 90, 34, -120, -124, 69, 109, 84, -18, 118, 7, 103, 41, 44, -29, -86, 111, 20, 106, 24]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-8, -1, -106, -116, -51, 67, 24, -118, -90, 117, 82, -51, 1, 24, 67, -32]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-26, -17, 103, 15, 116, 44, 71, -59, 102, -44, -12, 59, -11, 21, 60, -42]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[125, 26, -55, -50, -14, -101, 42, -39, 17, -76, -61, -36, -2, -110, -127, 37, -14, 83, 31, -30, -111, -94, -41, 101, -16, 93, 41, 4, -100, -10, 88, 72, -8, -1, -106, -116, -51, 67, 24, -118, -90, 117, 82, -51, 1, 24, 67, -32]");
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey9);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[78, 81, -2, -100, 121, 93, 49, -16, -95, 85, -110, -29, 28, 125, -21, 110]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[40, -4, -14, -70, -126, 117, 60, -109, 111, 107, 49, -36, -73, 55, 113, 91, 76, 5, 6, -119, 14, -89, 26, -77, -56, -91, -88, 93, 25, -37, 26, 83, -119, 102, -71, -84, -97, -42, -86, 8, 65, -49, -24, -114, 37, -93, -51, -79]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-80, 35, 70, -81, -43, -23, -37, 37, 99, 76, 126, -38, 88, 72, 96, 56, -105, -68, 26, 110, 24, -7, 26, 19, -109, 111, -2, -34, -100, -56, -30, -19, 16, 102, -122, 44, -118, -84, -10, -87, -10, 12, -15, -48, -62, 55, -39, -60, -108, -85, -38, -29, 62, -68, -109, -76, -125, 24, -79, -62, 55, -98, 7, -9, -18, -33, -6, 85, -72, -1, 109, -34, -100, -53, 67, -119, 36, 57, 54, -75, 62, 76, -54, -70, 124, -118, -70, 7, -81, 32, 123, -58, 30, 76, -103, 37, -119, 102, -71, -84, -97, -42, -86, 8, 65, -49, -24, -114, 37, -93, -51, -79]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "B02346AFD5E9DB25634C7EDA5848603897BC1A6E18F91A13936FFEDE9CC8E2ED1066862C8AACF6A9F60CF1D0C237D9C494ABDAE33EBC93B48318B1C2379E07F7EEDFFA55B8FF6DDE9CCB4389243936B53E4CCABA7C8ABA07AF207BC61E4C99258966B9AC9FD6AA0841CFE88E25A3CDB1" + "'", str7, "B02346AFD5E9DB25634C7EDA5848603897BC1A6E18F91A13936FFEDE9CC8E2ED1066862C8AACF6A9F60CF1D0C237D9C494ABDAE33EBC93B48318B1C2379E07F7EEDFFA55B8FF6DDE9CCB4389243936B53E4CCABA7C8ABA07AF207BC61E4C99258966B9AC9FD6AA0841CFE88E25A3CDB1");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "B02346AFD5E9DB25634C7EDA5848603897BC1A6E18F91A13936FFEDE9CC8E2ED1066862C8AACF6A9F60CF1D0C237D9C494ABDAE33EBC93B48318B1C2379E07F7EEDFFA55B8FF6DDE9CCB4389243936B53E4CCABA7C8ABA07AF207BC61E4C99258966B9AC9FD6AA0841CFE88E25A3CDB1" + "'", str8, "B02346AFD5E9DB25634C7EDA5848603897BC1A6E18F91A13936FFEDE9CC8E2ED1066862C8AACF6A9F60CF1D0C237D9C494ABDAE33EBC93B48318B1C2379E07F7EEDFFA55B8FF6DDE9CCB4389243936B53E4CCABA7C8ABA07AF207BC61E4C99258966B9AC9FD6AA0841CFE88E25A3CDB1");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        java.lang.Class<?> wildcardClass18 = byteArray16.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-2, -72, 32, 117, 35, -48, 125, -96, 92, 83, -105, -105, 110, -37, 52, -15]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-19, -62, 21, -107, 110, 90, -97, 39, -24, 67, 35, 124, 57, 73, 69, 14]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-19, -62, 21, -107, 110, 90, -97, 39, -24, 67, 35, 124, 57, 73, 69, 14]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-80, 111, 22, -27, 120, -98, -52, 72, 51, -23, 75, -56, 127, 121, -28, 30]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-2, -72, 32, 117, 35, -48, 125, -96, 92, 83, -105, -105, 110, -37, 52, -15]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-19, -126, 102, -43, -75, 90, -34, -26, 17, 100, -126, 53, -110, -56, 84, 83, 9, -10, 63, -86, -1, 113, 73, -61, -16, 127, 118, -27, -13, 80, -30, -92, -61, 107, 42, -94, -58, 67, -128, -113, 3, 79, -4, 113, 98, 20, 31, -30, -41, -18, -66, -106, 10, -124, -8, -65, -80, -128, 92, -102, -112, -126, 110, -7, 82, -96, -17, 86, -113, -56, -40, -120, -52, -77, -23, 37, 19, -8, -86, -40, -36, -54, 71, 104, 105, -41, 123, -119, 92, 103, 2, -1, -11, -54, -70, 48, -2, -72, 32, 117, 35, -48, 125, -96, 92, 83, -105, -105, 110, -37, 52, -15]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-2, -72, 32, 117, 35, -48, 125, -96, 92, 83, -105, -105, 110, -37, 52, -15]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-15, -89, 71, -38, 4, -106, -49, 51, 78, -121, -38, 23, -64, -104, 17, -5, 63, -28, -58, 30, -51, -10, -47, 126, 54, -10, 102, -93, 30, 52, 25, 15, -2, -72, 32, 117, 35, -48, 125, -96, 92, 83, -105, -105, 110, -37, 52, -15]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "F1A747DA0496CF334E87DA17C09811FB3FE4C61ECDF6D17E36F666A31E34190FFEB8207523D07DA05C5397976EDB34F1" + "'", str17, "F1A747DA0496CF334E87DA17C09811FB3FE4C61ECDF6D17E36F666A31E34190FFEB8207523D07DA05C5397976EDB34F1");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("BC852F10573BFB3EA459BBCF4C89C3DBD413E1B63A46E3F619320989BEF3CCCC01C9AE48D9635E142E93469B2822DF9576950499ABB9FF7790A445388419C22FE7F5ED261F10A6CE93CE6FCCA72D4E911FCAFD033250E3A80D90E2D68C75C4DD7A44F24529D06692ECE32AD0DAC7E22B", secretKey23);
        java.lang.Class<?> wildcardClass35 = secretKey23.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[21, 103, -28, 117, 12, 53, -19, -62, -113, -72, -3, -10, 15, 116, -36, -100]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-61, 118, -114, -77, -116, 125, -32, 16, 1, 96, -22, -17, 40, -113, -49, -49]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[42, 36, -27, 114, 93, 21, 59, -12, 27, -19, 41, -126, 33, 11, 98, -53]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 92, -53, -107, -17, -24, -3, -76, -59, -79, 19, -13, -23, 77, 5, -40]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[103, -27, 2, -66, -41, 4, 81, 23, -36, 84, -63, 115, 1, 104, 37, -36, 94, 24, -96, 77, 27, -1, 53, -30, 22, 46, 119, 64, -68, 51, -127, 65, 42, 36, -27, 114, 93, 21, 59, -12, 27, -19, 41, -126, 33, 11, 98, -53]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[58, -107, -110, -61, -40, -84, 30, -99, 69, -38, 5, -122, -102, -127, -8, -65, 33, 7, -30, 38, -45, 80, 46, -13, 71, -48, 3, -81, 84, -100, -124, 4, 42, 36, -27, 114, 93, 21, 59, -12, 27, -19, 41, -126, 33, 11, 98, -53]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[127, 71, -116, 40, -104, -55, 93, 110, -123, -30, -2, -35, 98, -116, 9, -87, -56, 85, 9, -48, 92, 67, 62, -94, 14, 106, -17, -69, -118, 40, -118, -36, 100, -18, -27, 115, -37, 24, 111, -80, 19, -70, -121, -41, 71, 107, -80, -1, 75, -107, 86, -107, -18, -37, 54, -3, -18, -52, 68, -114, 8, -93, 6, 74, -84, -16, -121, -103, -16, 104, 47, -128, 85, 98, -89, -94, 11, -102, 15, 1, 123, -56, 118, -31, -44, 84, 76, -116, 123, -29, 11, -98, 77, 94, -121, 71, 42, 36, -27, 114, 93, 21, 59, -12, 27, -19, 41, -126, 33, 11, 98, -53]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[127, 71, -116, 40, -104, -55, 93, 110, -123, -30, -2, -35, 98, -116, 9, -87, -56, 85, 9, -48, 92, 67, 62, -94, 14, 106, -17, -69, -118, 40, -118, -36, 100, -18, -27, 115, -37, 24, 111, -80, 19, -70, -121, -41, 71, 107, -80, -1, 75, -107, 86, -107, -18, -37, 54, -3, -18, -52, 68, -114, 8, -93, 6, 74, -84, -16, -121, -103, -16, 104, 47, -128, 85, 98, -89, -94, 11, -102, 15, 1, 123, -56, 118, -31, -44, 84, 76, -116, 123, -29, 11, -98, 77, 94, -121, 71, 42, 36, -27, 114, 93, 21, 59, -12, 27, -19, 41, -126, 33, 11, 98, -53]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-58, 14, -32, -33, -17, -88, 84, 89, -11, -123, -16, -85, -46, -79, 7, 68, 116, -72, 14, 69, 84, -45, -51, -33, -52, -113, -124, 125, -38, -91, -94, -77, 88, -16, -93, -44, 15, 87, 0, 64, -52, -83, -44, 126, 89, 127, -33, -123, 84, 55, -51, -54, -95, -22, 66, 71, 19, -13, -32, -127, 82, -16, 10, -111, -92, -13, -36, 5, -109, 60, 96, 30, -70, -73, 28, -96, 90, -39, 87, -78, 109, -69, -45, 23, 114, -95, -10, 64, -10, 102, 67, 82, -69, 45, -66, 85, 42, 36, -27, 114, 93, 21, 59, -12, 27, -19, 41, -126, 33, 11, 98, -53]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-84, -60, -84, -33, 127, 26, 53, 111, -73, -94, -102, -90, -5, -76, -97, -24, -60, 84, -59, -58, -16, -76, -127, -56, -41, 52, -119, -105, 70, -1, 82, 90, 42, 36, -27, 114, 93, 21, 59, -12, 27, -19, 41, -126, 33, 11, 98, -53]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("8D634E09060D653DFDBF18A42493EA0992AD7636726F60C637F338FD701AE408BF5D927B2DC53D72797237845E245801", secretKey4);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.Class<?> wildcardClass9 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-35, 46, 23, 28, 93, -15, -90, -1, -124, -44, 14, -30, -55, -6, -20, -112, -72, 29, -116, 34, -92, -80, -75, 104, -95, 117, -79, 49, 58, 62, -86, 77, -41, -69, 98, -84, 71, 26, 73, -32, 103, -90, -22, -75, 33, 84, -50, -73, 118, 71, -56, -126, -26, -59, 53, 56, 84, -99, 19, -22, -119, -51, -45, -37, -54, -31, 18, -35, -106, -15, 9, -121, 21, -126, -62, 32, -32, 81, 54, -26, 31, -48, -111, -33, 82, -20, 120, 0, 48, -4, -15, 18, -10, 29, 22, 6, -117, 63, 9, -68, 26, 25, 44, 81, -88, -37, 37, 45, -26, 37, 34, 90]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DD2E171C5DF1A6FF84D40EE2C9FAEC90B81D8C22A4B0B568A175B1313A3EAA4DD7BB62AC471A49E067A6EAB52154CEB77647C882E6C53538549D13EA89CDD3DBCAE112DD96F109871582C220E05136E61FD091DF52EC780030FCF112F61D16068B3F09BC1A192C51A8DB252DE625225A" + "'", str8, "DD2E171C5DF1A6FF84D40EE2C9FAEC90B81D8C22A4B0B568A175B1313A3EAA4DD7BB62AC471A49E067A6EAB52154CEB77647C882E6C53538549D13EA89CDD3DBCAE112DD96F109871582C220E05136E61FD091DF52EC780030FCF112F61D16068B3F09BC1A192C51A8DB252DE625225A");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey26);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey26);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey26);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey26);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey26);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("527C1D1D9F2B903634C0E77365CB43228E56A034C689D9E526F6719891815F410CDF0450BC5937FF5BCBF9DA453BC77D", secretKey26);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey64);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey64);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey64);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey64);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey64);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey64);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey64);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("82A008D752E3A45596B26C33E29F554E83F6065003FF1D122AD8C015F478E330F37271208FB5C12E1B599A3444304FDD772DB0D68350E9BF4CD1F57FAAF6A00CBC8F958D9F3857B626322949D5DBA82DF33CBC567B98541621CC31239789C28F329E3D2788B861D32A544E44EB9C54BC", secretKey64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey64);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[87, -123, -80, 104, 46, 78, -108, -88, -117, -83, 111, -62, 16, 86, 14, 43]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[16, 5, 36, 120, -61, -21, -65, -42, -91, 1, 124, -1, 106, -109, -6, -17]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[7, -100, 76, 44, 106, -24, 89, 105, 30, 84, -107, -51, -68, -13, 93, -112]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-122, 127, 68, -115, -107, -53, -77, -92, -93, 47, 24, 100, -17, -52, 62, -17]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, -84, 8, -1, -11, 34, 49, 17, 36, -37, -117, -71, 84, -35, 58, 117, -84, -89, 54, 114, -128, 122, 36, 86, -11, 5, 101, -44, 62, 83, 6, -92, 7, -100, 76, 44, 106, -24, 89, 105, 30, 84, -107, -51, -68, -13, 93, -112]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[68, 110, 27, -35, -54, 0, 70, -11, 7, 27, 5, -36, -73, -31, -93, 100, 23, -117, 110, -127, -6, -50, -43, 55, 65, -37, 71, -53, 6, -45, 13, -49, 7, -100, 76, 44, 106, -24, 89, 105, 30, 84, -107, -51, -68, -13, 93, -112]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-89, -24, -77, -78, 4, 102, -50, 15, 0, 6, 101, 55, -22, -17, -48, 119, 23, -74, -90, -82, 111, 118, -110, 50, -15, 36, 37, -17, -99, -112, -124, -45, -2, 76, -95, 88, 121, 82, 115, 34, 112, -46, -52, 64, 112, -114, 52, -84, -73, 25, -104, 105, 1, -3, -121, 112, -77, 11, -68, -83, 120, 125, -84, -63, -56, 5, -92, -91, -58, -63, 46, 5, 33, -50, -75, -29, -82, -108, 97, 9, -52, 30, 62, -67, -41, -53, 13, 4, -113, 0, -14, -67, -73, 50, -101, -67, 7, -100, 76, 44, 106, -24, 89, 105, 30, 84, -107, -51, -68, -13, 93, -112]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-34, 56, 1, 48, -25, 42, 125, -7, 101, 17, 93, -20, 79, -95, -87, -91, -47, 33, -101, -77, -17, 16, -12, -49, 44, 91, 91, -99, 65, -4, -115, 64, 7, -100, 76, 44, 106, -24, 89, 105, 30, 84, -107, -51, -68, -13, 93, -112]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-126, 107, 11, 88, -6, -69, 123, -45, -99, 77, 67, -21, 27, 26, 96, -9, 107, -93, 107, 51, 64, 97, -79, -33, 110, -88, 4, -10, 27, 34, 10, -64, -117, -13, -5, -90, 28, 27, 95, 19, 126, -14, -7, -94, -111, -115, -86, -34, -4, -108, -3, 35, 51, -16, -113, 63, 62, -60, -82, 27, -108, 48, -84, -18, 121, 71, -83, 21, -73, -110, -11, -46, 101, -55, -46, -66, 7, 125, 31, -55, -101, 3, -121, 30, -12, 72, 65, -97, 3, -85, -117, 105, 38, 11, 86, -112, 7, -100, 76, 44, 106, -24, 89, 105, 30, 84, -107, -51, -68, -13, 93, -112]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-35, 81, 57, 11, -2, -2, -19, -16, -88, 3, 116, 55, 115, 111, -39, -105, -67, 63, -12, 116, -49, -42, 18, 63, -50, 127, -104, -3, -124, -93, 4, 68, 21, -80, -126, 91, 54, 28, -42, -106, 80, 6, 35, 107, -116, 66, -20, 60, 84, 68, -84, -12, 11, -79, -25, 126, 104, -127, 57, 82, -48, -116, -70, 62, 20, -75, -71, -35, -72, 118, -44, -48, -90, 27, -11, 104, -127, -55, -87, -40, 7, -100, -87, -125, 73, -66, -92, 67, -64, -25, 87, 17, -86, -106, -95, 67, 7, -100, 76, 44, 106, -24, 89, 105, 30, 84, -107, -51, -68, -13, 93, -112]");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DD51390BFEFEEDF0A8037437736FD997BD3FF474CFD6123FCE7F98FD84A3044415B0825B361CD6965006236B8C42EC3C5444ACF40BB1E77E68813952D08CBA3E14B5B9DDB876D4D0A61BF56881C9A9D8079CA98349BEA443C0E75711AA96A143079C4C2C6AE859691E5495CDBCF35D90" + "'", str38, "DD51390BFEFEEDF0A8037437736FD997BD3FF474CFD6123FCE7F98FD84A3044415B0825B361CD6965006236B8C42EC3C5444ACF40BB1E77E68813952D08CBA3E14B5B9DDB876D4D0A61BF56881C9A9D8079CA98349BEA443C0E75711AA96A143079C4C2C6AE859691E5495CDBCF35D90");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-79, -25, -78, -2, 26, 98, -50, -96, -108, -104, 61, 118, -43, -32, 44, -125]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-120, -39, -14, 93, -7, 51, 83, -37, -101, 64, 44, -81, -18, 107, -49, 82]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-84, -10, 68, -56, 88, -64, 44, -49, 38, 37, -20, 58, 80, 113, -65, -93]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-66, 106, 55, -7, -65, 19, -83, -124, 120, 35, -69, -91, 42, 23, -55, -58]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-122, -109, 19, 32, -105, -91, 43, -58, -101, -17, -77, 106, -43, -127, -14, -28, -83, 56, -66, 8, -89, 106, 107, 109, -112, 109, 0, 117, 5, -80, -86, -122, -84, -10, 68, -56, 88, -64, 44, -49, 38, 37, -20, 58, 80, 113, -65, -93]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-85, 27, -90, -57, -2, 29, 102, -81, 49, 22, -43, 119, -83, 26, 76, 114, 52, 107, 51, 86, 85, -52, 95, -128, 65, -89, -54, -86, 50, 120, 107, -54, -84, -10, 68, -56, 88, -64, 44, -49, 38, 37, -20, 58, 80, 113, -65, -93]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[61, -66, 31, 89, 19, 100, 34, -6, 14, -86, 52, -21, 83, 32, 7, 123, -58, 55, -70, -51, 127, 83, 2, -42, -104, -57, 120, 76, -7, -116, 86, 30, 14, -74, -11, 116, 21, -55, 37, -120, 31, -46, -126, 114, -25, -95, 53, -70, 6, -94, -110, 11, 19, -60, 36, -64, 51, 107, 87, -82, 2, 49, -15, 26, -71, -56, 82, -61, -46, -25, 22, -15, 96, 12, -90, -49, 73, -73, 12, -61, -95, -41, -63, 121, 122, 42, -73, -91, -64, 2, -50, -77, 40, -105, -58, -11, -84, -10, 68, -56, 88, -64, 44, -49, 38, 37, -20, 58, 80, 113, -65, -93]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, -24, 94, 55, 98, 3, -108, 31, 34, -80, -34, -41, 113, -73, 32, -44, -72, -42, -61, 70, 33, -121, -69, -125, 60, -49, -112, 63, 114, -126, 102, 106, -84, -10, 68, -56, 88, -64, 44, -49, 38, 37, -20, 58, 80, 113, -65, -93]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[79, 74, 125, 87, -8, -2, 102, 55, -17, 44, -99, 18, 123, 103, -6, 45, -52, -1, -40, 72, -104, 113, 53, -56, 68, 42, -40, -104, 34, -72, -7, 53, -115, 87, 11, -100, 33, 33, 114, -49, -63, 6, -15, 78, 32, -96, -50, 58, 99, -116, 37, 58, -5, 7, -28, -105, -100, -26, 13, -20, -127, -49, -120, -111, 28, -30, -83, 117, 123, 115, -40, 124, -82, -3, -12, -29, 103, 21, 68, 2, 97, 116, 54, -72, 114, 75, 24, -46, 51, -128, 13, 25, 49, 1, 14, -12, -84, -10, 68, -56, 88, -64, 44, -49, 38, 37, -20, 58, 80, 113, -65, -93]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray76);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey31);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey31);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey49);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey49);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey49);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey49);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("9E3FA735129C449B99534E5E23A8CD37381E7A83D9BEBA2014B2C5301D9CBF2939A122A8A7ABF168E3D309422D89A40503600C06C72412872F119661B5C91C2BFDDB687C5C90027C4E4E15C34EB35CC5B0D23EEB4FEA44B6705E349738317C8F3FE0B5B4056E29386E3DEF440334A03F", secretKey49);
        java.lang.Class<?> wildcardClass60 = byteArray59.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-27, 119, -19, -117, -118, -60, -91, -5, 102, 6, -20, -62, 35, -76, -123, 17]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[4, 49, -6, 80, -74, 125, -23, -2, -16, -51, -67, -76, 19, -52, -101, 86]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[66, 66, 51, 118, 93, -63, 3, 26, 71, 7, 97, -8, -90, -89, -80, 62]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[115, 10, -77, 55, 84, 24, 106, 42, -1, 56, 17, 118, 17, -58, 35, -77]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[72, 44, 120, -93, 29, 111, 0, 116, -64, -16, -51, -98, -20, 24, -112, -119]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[119, -45, -26, 101, 15, 12, 107, -58, -77, -81, 15, 117, 127, 106, -104, -99]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[119, -45, -26, 101, 15, 12, 107, -58, -77, -81, 15, 117, 127, 106, -104, -99]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-8, -100, -109, -17, -115, 104, -106, 102, -8, 5, 3, -122, -28, 17, 1, 34, -88, -38, -86, -18, 108, 14, 65, -55, -121, 80, 64, -71, -1, 2, -83, -119, 72, 44, 120, -93, 29, 111, 0, 116, -64, -16, -51, -98, -20, 24, -112, -119]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[111, 28, -111, -20, -71, -96, -61, 53, 57, -128, 34, 65, -117, -86, 13, -69]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[101, 16, -88, -78, -84, -117, -58, 98, -97, -20, -58, -45, -16, -39, 47, 20]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-23, 50, 126, -59, 54, -39, 80, -127, -106, 102, 107, 73, -70, 51, -82, 18]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[111, 28, -111, -20, -71, -96, -61, 53, 57, -128, 34, 65, -117, -86, 13, -69]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[103, -1, -94, 27, 49, 35, 100, -5, -95, 79, -128, -69, -68, 34, 56, -53, -93, 25, -93, -91, 102, 92, 117, 56, 79, 6, 14, -42, 105, -86, 85, -101, 111, 28, -111, -20, -71, -96, -61, 53, 57, -128, 34, 65, -117, -86, 13, -69]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-10, 89, 108, -59, -66, 111, 69, -92, 90, 72, -46, 25, -24, 93, 26, 0, -33, 96, 22, -63, -43, -81, -96, 50, 92, -33, -13, 83, 68, -17, -28, -49, 111, 28, -111, -20, -71, -96, -61, 53, 57, -128, 34, 65, -117, -86, 13, -69]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-23, 50, 126, -59, 54, -39, 80, -127, -106, 102, 107, 73, -70, 51, -82, 18]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[116, 30, -94, 35, 80, 35, 111, 118, 111, -89, -2, -4, -102, -64, -18, -120]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[12, -104, 122, -57, -37, 75, -108, 101, -61, -117, -68, 60, -56, 14, 59, -77, -11, -92, 54, 86, -124, -21, -1, 11, -30, 8, 87, 30, 31, -6, 79, -120, 32, -97, -61, -37, -8, -52, 56, 61, -112, -26, -61, -102, 45, -114, -72, 88]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[19, -54, 66, -47, -87, 98, 113, 25, 100, -21, -18, -100, 6, -41, 59, -39, -28, 38, 100, -69, 124, 42, 2, 67, 112, 78, -75, 66, 100, -20, -56, 70, -59, 62, 78, 127, 14, 106, 36, 1, 44, 79, 36, -69, 42, -18, -11, 6, 37, -81, -71, -21, -52, -110, -102, 77, -21, -9, 15, -42, 35, -94, -14, -118, -27, 55, -6, 125, 63, -66, -53, -39, 23, 79, 62, 68, -36, -77, -109, 70, 87, 72, 63, -5, 121, -25, -65, 36, 117, 119, -88, -96, 121, 50, 44, -17, 32, -97, -61, -37, -8, -52, 56, 61, -112, -26, -61, -102, 45, -114, -72, 88]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "13CA42D1A962711964EBEE9C06D73BD9E42664BB7C2A0243704EB54264ECC846C53E4E7F0E6A24012C4F24BB2AEEF50625AFB9EBCC929A4DEBF70FD623A2F28AE537FA7D3FBECBD9174F3E44DCB3934657483FFB79E7BF247577A8A079322CEF209FC3DBF8CC383D90E6C39A2D8EB858" + "'", str7, "13CA42D1A962711964EBEE9C06D73BD9E42664BB7C2A0243704EB54264ECC846C53E4E7F0E6A24012C4F24BB2AEEF50625AFB9EBCC929A4DEBF70FD623A2F28AE537FA7D3FBECBD9174F3E44DCB3934657483FFB79E7BF247577A8A079322CEF209FC3DBF8CC383D90E6C39A2D8EB858");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey8);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.Class<?> wildcardClass18 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[88, 43, 91, 47, 1, -27, 117, -9, -18, 24, 55, 94, -111, 98, -12, 32]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-35, 81, -70, -17, 74, -101, 81, 86, -16, -83, -82, 54, 40, 76, 97, -59]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-35, 81, -70, -17, 74, -101, 81, 86, -16, -83, -82, 54, 40, 76, 97, -59]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[90, -12, 117, 77, -2, -7, -31, -18, -41, -119, -89, -50, 103, -34, 91, -48, -81, 117, -124, 6, -64, 118, -108, 120, -23, 50, -78, -68, 116, 15, -116, -40, 88, 43, 91, 47, 1, -27, 117, -9, -18, 24, 55, 94, -111, 98, -12, 32]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "65F80013A85C04F7D9C1891C3082355E24FB36DCC250F6B98A5A7D8C5007C494F76D3AEFA813262F1A5E3279FF63222CA8DF80D70490F1EB679D15DC556AD645A5B1438FEA4A478CB8FE2D97235ABB92EF2F740E1DE7512A3D94B7F9A86A7777524EF42D647ED20B07F7356AAAB6322924B66485B6C722F4A21E853B9B9042B97E46E158060B382C905DFDF924A1152F9039134ED47D0BA264BCA69C94E21EE3624DA334440BDB03D214B29FCCAE238BDA735061F8AC71CBC3B90ACAEC0877D217DFD329F0BAFD76691DABD69E1E3ACC00BB7F11EBE7002B67F158DBEDF1DB98582B5B2F01E575F7EE18375E9162F420" + "'", str15, "65F80013A85C04F7D9C1891C3082355E24FB36DCC250F6B98A5A7D8C5007C494F76D3AEFA813262F1A5E3279FF63222CA8DF80D70490F1EB679D15DC556AD645A5B1438FEA4A478CB8FE2D97235ABB92EF2F740E1DE7512A3D94B7F9A86A7777524EF42D647ED20B07F7356AAAB6322924B66485B6C722F4A21E853B9B9042B97E46E158060B382C905DFDF924A1152F9039134ED47D0BA264BCA69C94E21EE3624DA334440BDB03D214B29FCCAE238BDA735061F8AC71CBC3B90ACAEC0877D217DFD329F0BAFD76691DABD69E1E3ACC00BB7F11EBE7002B67F158DBEDF1DB98582B5B2F01E575F7EE18375E9162F420");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "65F80013A85C04F7D9C1891C3082355E24FB36DCC250F6B98A5A7D8C5007C494F76D3AEFA813262F1A5E3279FF63222CA8DF80D70490F1EB679D15DC556AD645A5B1438FEA4A478CB8FE2D97235ABB92EF2F740E1DE7512A3D94B7F9A86A7777524EF42D647ED20B07F7356AAAB6322924B66485B6C722F4A21E853B9B9042B97E46E158060B382C905DFDF924A1152F9039134ED47D0BA264BCA69C94E21EE3624DA334440BDB03D214B29FCCAE238BDA735061F8AC71CBC3B90ACAEC0877D217DFD329F0BAFD76691DABD69E1E3ACC00BB7F11EBE7002B67F158DBEDF1DB98582B5B2F01E575F7EE18375E9162F420" + "'", str16, "65F80013A85C04F7D9C1891C3082355E24FB36DCC250F6B98A5A7D8C5007C494F76D3AEFA813262F1A5E3279FF63222CA8DF80D70490F1EB679D15DC556AD645A5B1438FEA4A478CB8FE2D97235ABB92EF2F740E1DE7512A3D94B7F9A86A7777524EF42D647ED20B07F7356AAAB6322924B66485B6C722F4A21E853B9B9042B97E46E158060B382C905DFDF924A1152F9039134ED47D0BA264BCA69C94E21EE3624DA334440BDB03D214B29FCCAE238BDA735061F8AC71CBC3B90ACAEC0877D217DFD329F0BAFD76691DABD69E1E3ACC00BB7F11EBE7002B67F158DBEDF1DB98582B5B2F01E575F7EE18375E9162F420");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "65F80013A85C04F7D9C1891C3082355E24FB36DCC250F6B98A5A7D8C5007C494F76D3AEFA813262F1A5E3279FF63222CA8DF80D70490F1EB679D15DC556AD645A5B1438FEA4A478CB8FE2D97235ABB92EF2F740E1DE7512A3D94B7F9A86A7777524EF42D647ED20B07F7356AAAB6322924B66485B6C722F4A21E853B9B9042B97E46E158060B382C905DFDF924A1152F9039134ED47D0BA264BCA69C94E21EE3624DA334440BDB03D214B29FCCAE238BDA735061F8AC71CBC3B90ACAEC0877D217DFD329F0BAFD76691DABD69E1E3ACC00BB7F11EBE7002B67F158DBEDF1DB98582B5B2F01E575F7EE18375E9162F420" + "'", str17, "65F80013A85C04F7D9C1891C3082355E24FB36DCC250F6B98A5A7D8C5007C494F76D3AEFA813262F1A5E3279FF63222CA8DF80D70490F1EB679D15DC556AD645A5B1438FEA4A478CB8FE2D97235ABB92EF2F740E1DE7512A3D94B7F9A86A7777524EF42D647ED20B07F7356AAAB6322924B66485B6C722F4A21E853B9B9042B97E46E158060B382C905DFDF924A1152F9039134ED47D0BA264BCA69C94E21EE3624DA334440BDB03D214B29FCCAE238BDA735061F8AC71CBC3B90ACAEC0877D217DFD329F0BAFD76691DABD69E1E3ACC00BB7F11EBE7002B67F158DBEDF1DB98582B5B2F01E575F7EE18375E9162F420");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey41);
        byte[] byteArray54 = new byte[] {};
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray54);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey56);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey60);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey60);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey60);
        byte[] byteArray64 = new byte[] {};
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray64);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey66);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey70);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey70);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey70);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray54, secretKey70);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey70);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey70);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey70);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[93, 106, 34, -111, 51, -16, -95, 28, -2, 12, 102, 86, -95, -63, 89, -37]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[52, 107, -3, -7, -50, -127, 88, -9, 9, 51, -80, -19, 57, 46, 31, -115]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-85, -1, 61, -76, -8, -5, -11, 11, 82, 31, 71, 68, 115, -13, 125, -55]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[32, -51, -69, 14, 94, 83, -3, -35, 77, -5, -121, -8, 64, 89, -116, 115]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[124, 17, 26, -23, 83, -114, 114, 75, -88, -84, -16, 73, 71, 126, 28, 49]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-68, -108, -92, 10, -48, -6, -63, 81, -79, -33, -67, -97, -97, 20, -15, 31]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[121, -44, -9, -60, -97, -26, 47, 57, 82, 113, -24, 0, -48, -30, 52, 52]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[44, 113, 124, -66, 7, -25, -82, -9, -76, -60, -31, 68, 86, -78, 114, -22]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-77, -122, -5, -125, -25, -127, -107, -17, 121, 92, -11, 65, -3, 126, 4, 109, -53, -106, 5, -80, 3, -64, -111, -123, -68, 83, -19, -115, -67, -49, -96, 101, 121, -44, -9, -60, -97, -26, 47, 57, 82, 113, -24, 0, -48, -30, 52, 52]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-32, 50, 77, -55, -80, 6, -80, -104, 51, 72, -102, -56, -61, -89, 45, 103, 16, -60, -49, 56, 116, -84, 73, -14, -99, -39, 42, 102, -53, -93, -83, 27, 121, -44, -9, -60, -97, -26, 47, 57, 82, 113, -24, 0, -48, -30, 52, 52]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[120, 48, -54, 57, 70, -102, 66, -83, -34, 85, 79, -112, -78, 67, 19, -13, -109, 95, 77, 23, -4, -23, 116, 26, 27, 47, 104, 53, -86, -107, -58, 47, -27, 125, -3, 90, -27, -78, 61, -90, -35, -124, 67, -111, 98, -22, 59, 15, -119, 90, -92, -70, 89, 56, 85, -20, 11, 26, -109, 15, -86, -34, 107, -117, 116, 60, -55, -30, 17, -78, -85, 120, -39, 44, 55, -106, -74, 116, -20, -126, -69, 9, 72, -55, -99, 115, -4, -60, 77, -96, 57, 18, -114, -15, 26, -91, 121, -44, -9, -60, -97, -26, 47, 57, 82, 113, -24, 0, -48, -30, 52, 52]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[68, -8, 43, -122, 81, 34, -123, -73, 112, -85, 98, 2, -108, 17, 75, -110, -30, -30, -46, 0, -82, -55, -105, 0, -26, -40, 78, 84, 51, -66, 56, -21, 121, -44, -9, -60, -97, -26, 47, 57, 82, 113, -24, 0, -48, -30, 52, 52]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[108, 98, -57, 107, -45, -27, -104, -19, 116, 9, 21, 35, 124, 54, 17, -127]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-68, -58, -43, 49, -50, 88, -110, 31, -79, 117, -89, -53, -108, 119, -85, -19]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[112, -18, -13, -91, -115, -125, -52, -56, 93, 34, 5, -101, -102, -49, -63, -24]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-122, 82, 95, 77, 78, -68, -38, 108, 73, -40, 106, -91, 88, 48, -111, 1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[127, 7, -75, 107, 109, 116, -110, -47, 72, 57, -36, 39, -52, -97, -44, -114, 11, 25, -7, -90, 86, -126, -7, -50, 45, -56, 50, -72, -85, -10, -60, -77, 112, -18, -13, -91, -115, -125, -52, -56, 93, 34, 5, -101, -102, -49, -63, -24]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[39, -14, -96, 23, 47, 57, -56, 0, -7, 43, -119, 73, 98, -18, 17, -43, -68, -24, -68, 74, -108, 60, 19, -72, -56, 89, -116, -28, 84, 66, -95, 28, 112, -18, -13, -91, -115, -125, -52, -56, 93, 34, 5, -101, -102, -49, -63, -24]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-91, -9, 5, -54, -99, -66, -58, 13, 13, 35, -122, 15, -38, -111, -18, -36, 16, 118, -122, -65, -116, 83, -85, 126, -114, 49, 127, -5, -42, 105, 95, 108, -1, 75, -60, 74, 104, 101, 64, -83, -69, 68, 101, 62, -58, 41, 13, -88, -16, 3, 59, -95, -19, 17, 19, -96, 82, -72, 28, -88, -13, 88, 74, 90, 22, -7, -84, 70, -62, -71, -116, -106, -78, -39, 74, 54, 63, 77, 57, 68, 115, 5, 13, -122, 124, 14, 102, -48, -62, 107, -122, 107, 23, -20, -4, -68, 112, -18, -13, -91, -115, -125, -52, -56, 93, 34, 5, -101, -102, -49, -63, -24]");
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey17);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey42);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey42);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey42);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[96, -71, 112, 122, 12, 24, -35, -115, -125, -80, 71, 21, 81, -80, 93, -75]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -79, 41, -103, -17, 109, -98, 83, -41, 44, -125, -84, -58, -40, -66, -61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-102, 124, 20, -21, 90, 102, -67, 71, 112, -107, -50, -15, -75, -28, -77, -27]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[71, -42, -101, -42, -32, -94, 111, 78, 97, 125, -65, 96, 108, 99, 83, -126]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-125, -119, 73, 94, -58, -122, -93, 41, -43, 125, -125, -26, -39, 84, -54, -38, 65, -72, 25, -17, 39, 12, 20, 126, 6, -100, 0, 124, 29, -38, -79, 122, -102, 124, 20, -21, 90, 102, -67, 71, 112, -107, -50, -15, -75, -28, -77, -27]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-90, 95, 83, 84, 110, -82, -54, -7, 74, 86, -123, 41, 40, -24, -92, -82]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 126, 11, -73, 23, -5, -10, 26, -66, 6, -2, 95, 92, 39, -15, 56]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[80, -67, -7, -91, -124, 22, -125, 22, 113, 63, 74, -25, -97, -67, -15, 33]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-66, 70, -18, 95, -91, 75, -27, 41, -39, -73, 71, -107, -22, -63, -38, -49]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-102, -65, 86, 11, 63, 74, 28, 95, 75, -19, 115, 100, 117, -126, -64, -19, -17, -11, 45, 59, -95, -8, 5, 60, -40, -54, -97, 80, 8, -81, 56, -12, 80, -67, -7, -91, -124, 22, -125, 22, 113, 63, 74, -25, -97, -67, -15, 33]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[117, -63, -71, -110, -101, -104, 7, 89, 46, -30, -87, -35, -25, -26, -2, 75, 89, -15, 45, -31, -70, 88, -84, 108, 35, -13, 27, -92, 112, -36, 53, -37, 80, -67, -7, -91, -124, 22, -125, 22, 113, 63, 74, -25, -97, -67, -15, 33]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[121, -38, -123, -4, -102, 126, 109, -6, 1, 81, -1, -104, 109, 25, 103, -105, -97, 57, -20, 84, -113, 70, 1, 34, 39, 66, 119, 121, -58, -118, -79, -48, 5, 78, -123, 122, 0, -16, 126, 80, -29, 113, 39, -97, 108, -47, 22, 52, -73, -28, -91, 36, 113, 6, 91, 95, -97, -100, 72, 116, 31, -125, 127, -22, 46, -57, 121, 111, 100, 82, -48, -38, 28, -64, 43, -113, -6, 47, 29, 44, 38, 26, 120, 46, -122, 50, -57, 99, -94, -10, 37, 59, -81, -126, -22, -10, 80, -67, -7, -91, -124, 22, -125, 22, 113, 63, 74, -25, -97, -67, -15, 33]");
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("60776C49AD5DF687B0C31C9B3F6A1ABA", secretKey5);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey61);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey61);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey61);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey61);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-103, 22, -12, 127, 7, 27, 104, -49, -113, 54, 7, 71, 2, -62, 112, 28]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[126, -41, -33, 29, -94, -50, 22, 10, 87, -32, -67, -80, 82, -95, -53, -18, -55, -125, 102, -60, 9, -5, 98, -34, -40, 93, 19, 107, 23, -122, 62, 69, -74, -59, 46, 118, 97, 55, -28, -101, -71, 64, 37, -41, -68, -90, -24, 38]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[106, -6, 97, 117, 77, -89, 114, 114, -41, -70, 20, 21, -59, -128, 76, 61, -54, -45, -39, -103, -99, 112, -74, -100, 93, 96, -83, 26, 24, 35, -79, 59, -74, -59, 46, 118, 97, 55, -28, -101, -71, 64, 37, -41, -68, -90, -24, 38]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -70, 89, 101, -117, -1, 81, 93, -57, 8, 62, -123, -68, 13, -96, 2]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[11, 26, 108, -38, 45, -121, -74, 57, 117, -117, -76, -18, -112, -94, 90, -2]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-59, -4, 74, -90, 78, 42, 78, 94, 113, -123, 59, 13, -73, -77, -41, 59]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-85, 39, -41, -61, 27, -107, 41, -80, -1, 110, 120, 40, -83, -124, 118, 85]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[22, -48, -51, -49, -92, 90, -63, 34, -89, -110, 119, 7, -100, -52, 111, -101]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-95, -72, -122, 1, 74, -67, 67, 58, -85, 44, 19, 71, -53, -110, 77, -87]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[92, -11, -57, 85, 94, -26, -117, 127, -11, -71, -75, 118, 95, 88, 6, -33]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-73, 15, 48, 87, 42, -1, -33, -67, 84, 112, 121, 32, 29, 79, -114, -9]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[5, -48, -109, 105, 107, -49, -111, -61, -86, 59, 80, 22, 15, -59, 40, 26]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-118, 14, -113, 17, 79, -102, 41, 80, -18, -8, -121, -104, 96, 55, -86, -70]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[65, 70, 73, -52, -39, 65, -2, 32, 125, -24, 107, 51, -59, -119, -126, -2]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[5, -48, -109, 105, 107, -49, -111, -61, -86, 59, 80, 22, 15, -59, 40, 26]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey25);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("3CE42DCDDCA9A09603F700CC3C5FC6B39D92013EB80754FD31FDC16574B16F402784AA861AC28BB171F449B8E66E92AF", secretKey25);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3C5E4EA5B3A8C5696BCD96649E46C781A0128AF793AB6978DD546831988B2BB407EA41E3EC2F429752C739294C24FE74C895EEA8788608C20FED21AC12ACE314A91B2019132305FA931CDDCD08E6C02C7B913C904F4463BA209F3C5E85D6F1716C8861F2704F51A8241E6998AD69C4A", secretKey25);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey25);
        java.lang.Class<?> wildcardClass39 = byteArray38.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[50, 12, 51, 32, -61, 31, 119, -79, 88, -126, 33, 84, -23, -95, -102, -29]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-22, 58, 31, -75, -112, -107, -128, -78, -13, -72, 92, 69, -31, 3, -41, 57]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-102, -8, 112, 127, -38, -41, -40, -8, -113, 52, 54, 49, -26, 8, 123, -119]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-11, 7, 53, 126, 14, -91, 68, -96, 31, -104, -76, 32, -24, 18, -122, -36]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[59, 10, 107, 56, 89, -7, -27, -85, -113, -81, -54, 123, 123, 10, -15, 109, 2, -32, -86, -16, -11, -12, -38, 50, 1, -124, -96, -48, 54, -90, -62, 54, -102, -8, 112, 127, -38, -41, -40, -8, -113, 52, 54, 49, -26, 8, 123, -119]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[109, 61, 25, -100, -120, 118, 77, 96, -109, 35, 11, -47, -73, -17, 100, -120, 64, 15, -10, 119, -58, 3, 42, 85, 121, 109, 31, -29, 63, 43, -73, 119, -102, -8, 112, 127, -38, -41, -40, -8, -113, 52, 54, 49, -26, 8, 123, -119]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-61, -104, 96, -9, -103, -104, 44, -12, 66, -102, 64, 90, -4, -114, -20, -64, -107, 71, -106, 28, -2, 54, -32, -39, 35, 97, -64, -9, -22, -90, 88, 7, -22, -60, 125, 85, 92, 51, -15, -4, -35, 91, -115, 39, -112, -79, -105, -121, -105, -47, 31, -108, -61, 102, 32, 39, 120, 101, -90, -90, 87, -30, 114, 22, -54, -31, -113, 125, -82, 13, 124, -19, -94, 120, 41, 92, 103, 67, 106, -37, 67, 46, -46, 123, -80, -71, -119, 98, 48, -63, 4, 103, -38, -99, 75, -67, -102, -8, 112, 127, -38, -41, -40, -8, -113, 52, 54, 49, -26, 8, 123, -119]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-71, -16, 10, -41, -103, -75, -95, 33, 24, 97, 101, 61, 4, 25, 1, 106, -50, 82, -25, -34, 89, 93, -90, 120, 125, -115, -15, 65, 29, -20, -6, 29, -79, 81, 63, -26, -128, 21, 119, -73, -100, -65, -77, 28, -16, -92, -41, -93, 68, 15, -124, 99, -53, -34, 66, 66, 45, -76, -128, -17, -84, 21, -33, -125, 97, -4, -104, -7, -125, -73, -8, 59, 39, -117, -124, -12, 63, 7, -77, -117, -49, 17, 106, -24, 22, -30, -82, -113, 63, 1, -54, -36, -65, -30, 121, -90, -102, -8, 112, 127, -38, -41, -40, -8, -113, 52, 54, 49, -26, 8, 123, -119]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-102, -8, 112, 127, -38, -41, -40, -8, -113, 52, 54, 49, -26, 8, 123, -119]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-39, -83, 56, -56, -98, 4, 71, -2, -94, 117, 45, -47, 45, -111, 19, -121, -27, -96, 39, -76, -17, 14, 91, -12, 49, 62, 13, 34, 82, -26, -101, -66, -102, -8, 112, 127, -38, -41, -40, -8, -113, 52, 54, 49, -26, 8, 123, -119]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-76, -97, -39, 107, 113, 119, 87, 45, -1, -77, -40, -52, -81, -104, 12, -19, -121, 17, -78, -65, -76, 87, -86, 86, -22, 58, 8, 28, 108, -62, -21, -106, -85, -39, 109, 40, -67, -20, 37, -87, 10, 21, 58, 43, 11, 78, -4, 29, 90, -86, 27, -77, -80, 65, 112, 21, -106, 115, 25, 58, 54, -86, 64, 40, 26, 109, 88, -100, 0, -110, 50, -2, -68, 15, 62, -79, -110, 83, -60, 100, 31, -82, -13, 30, -3, 29, 43, -25, 68, -35, 43, 86, -29, -126, -71, 125, -102, -8, 112, 127, -38, -41, -40, -8, -113, 52, 54, 49, -26, 8, 123, -119]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        java.lang.Class<?> wildcardClass33 = secretKey27.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-118, -23, -90, -108, 35, -16, 92, -78, 101, 34, 76, 17, -76, 7, -10, 120]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[71, 99, 83, 13, 43, 89, -68, -124, 73, 17, 86, -8, -49, -35, -31, -128]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[111, -77, 52, 96, 82, 7, 0, -72, 45, 60, 88, -17, -62, 118, 80, 33]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-4, -56, 44, 78, 97, 77, 119, 11, -27, 61, -72, 0, -98, 118, 45, 13]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[31, -21, -68, 122, -21, 54, 36, 8, 37, -97, -23, 52, 65, 27, 114, 80]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[67, 58, -2, 58, -56, 2, -26, 124, 116, 52, -74, -39, 116, -47, 56, -56]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[77, 24, 66, -19, 85, 84, -20, 33, 124, -33, -38, 73, -98, 48, 98, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[31, -21, -68, 122, -21, 54, 36, 8, 37, -97, -23, 52, 65, 27, 114, 80]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        byte[] byteArray0 = null;
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("8D634E09060D653DFDBF18A42493EA0992AD7636726F60C637F338FD701AE408BF5D927B2DC53D72797237845E245801", secretKey5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-48, 3, -73, -69, 66, -73, -16, -32, 114, 51, 19, -105, -123, 78, -109, -12, 103, 66, 54, -104, -105, 15, -126, 9, 63, 68, -87, 51, 42, -62, 21, 72, -70, 124, -17, 15, -53, 37, 96, 19, 27, -121, -111, -99, -73, 112, -123, -84, 113, 118, -65, 53, -71, -79, 49, 109, -62, 6, 6, -100, 94, 38, -122, 105, -13, -28, 40, -100, 54, -67, -71, 24, -2, 107, -81, -61, -20, -16, 80, 70, -118, -119, 29, 127, 89, -59, -94, -127, 45, 34, -8, -86, -55, -20, -17, -122, 62, -98, -12, -28, 11, 38, -76, -66, 7, 62, 104, -104, 95, 13, 74, -24]");
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey13);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey34);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey34);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0B3F770D0055D0086E4D5F34677807F643C52681888CF416427DA1BEF08CAF1787327C11DC64B59CF2B3E256003EC1C5DC733E5C890287207AD99467D8686ED5F4F64B8AFC0545EE2C1DCF50C4F4F9FEE0D707DBA4C46C56651B9B2B97612479DE9281D9476441CF2DE866714363BDAED9F5A8E83701A8E0F6B9F3EA7912686D326EBE4F95BB8136F84EF04DB9499A268ECF8C8E1BCAF3F95D8DE36EAB145B0A3DB211EC704215BD747BEBE3650F3A502E0A3FCC48C59869EB6466C1927E84E5A9F4C8CF836DEA5D92E25D34628563E33B6E89C7BDA68B0745F97FA99F971C7A84969C242F20003AB3BC7589946F98B", secretKey34);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("36EC6B46BA8F99DFC836AE9F7C1209D6232EDCA84F73A911452AACC757062A1097720CE097BB52D31EB54AF449114770", secretKey34);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BCAA06C6342B50E2CE08B64077B04D2FF1675922A997D9BBBE3243D2CA22D9CB6B89D755ACAE7701EBEC577328EA394864235527B65182178EF7828A5D8C1DC61B44752BABAA0D68B6DD7DAD2634BB996ED8F8AAE57943FD013638116FC6956CEBAA98C437493F53027BCD5A307D67D", secretKey34);
        java.lang.Class<?> wildcardClass44 = secretKey34.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-69, -113, -126, 27, 42, -60, 4, 111, 33, 12, -15, 20, -13, -63, -85, -1]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-28, -9, -30, -72, 67, 48, 72, -9, 101, 27, 43, -102, 117, 62, 83, 104]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-14, -19, 111, -53, 92, 48, -72, 17, -69, -30, -35, -2, -53, 24, -89, 80]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-59, -67, 86, -56, -93, 54, -78, 65, -69, -83, -48, 84, 90, 79, 125, -88]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-3, -126, 65, -84, -62, -115, 124, 1, -124, -26, -72, 1, -28, -36, -38, -2]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-17, 84, 30, -70, 18, -60, 17, 102, -88, 15, -50, -64, -2, -114, 88, 5, 107, -70, -117, 41, 125, 75, 24, 34, -106, 82, -95, -116, -74, 109, -108, -75, -59, -67, 86, -56, -93, 54, -78, 65, -69, -83, -48, 84, 90, 79, 125, -88]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-39, -102, -122, -107, -64, -38, -128, -12, 22, -18, -56, 27, 24, 113, 127, 2, -22, 90, -124, 106, -106, 48, -124, 55, -34, -53, -21, -100, 118, 85, 87, 69, 26, 76, 96, -93, -47, 5, -94, 117, -112, 65, -24, -42, 24, -42, -37, -65, -58, 103, -73, 98, 30, -53, -2, -125, -31, -17, -30, 45, -52, -25, 30, -127, -47, 99, -51, -17, 59, -116, -23, 65, -38, -44, -113, -52, 13, 0, 113, 59, 89, -54, 102, 118, 50, 33, 39, -116, 24, 48, 125, -32, -108, -18, 13, 43, -59, -67, 86, -56, -93, 54, -78, 65, -69, -83, -48, 84, 90, 79, 125, -88]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey32);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey32);
        java.lang.Class<?> wildcardClass40 = secretKey32.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-85, 53, -99, -43, -78, 5, -115, -85, -91, -12, 115, 29, -52, 90, -63, 102]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[75, -7, -121, -66, -80, -14, 93, -12, -23, -96, -104, -21, 70, 74, -124, 97]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[75, -7, -121, -66, -80, -14, 93, -12, -23, -96, -104, -21, 70, 74, -124, 97]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-81, 91, -70, 99, -55, 123, -2, 119, 123, 3, -77, 100, 45, 11, -127, 81]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[68, 103, -2, -82, -49, 118, 108, 97, -48, -29, 54, 84, 87, 113, -85, 44]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-16, -49, 100, -1, 44, 30, -11, -11, 77, -88, -18, 85, 1, 115, 50, 32, 37, -115, -41, -63, -11, -55, -63, -124, 44, 34, -18, -33, 43, -93, 85, -112, 27, 71, -93, -101, 14, -102, -123, 78, -29, -34, 100, -94, -62, -30, -86, -120, -41, -72, -105, -46, 47, -95, 23, 87, -20, 126, -54, -5, -61, 33, -121, -35, -3, 8, 80, 82, 109, 61, 0, 106, -40, 10, 13, -4, -53, -27, -27, -72, -81, -100, -98, -74, 33, -78, 14, -71, -123, -77, 86, 97, 120, -85, -37, -109, -81, 91, -70, 99, -55, 123, -2, 119, 123, 3, -77, 100, 45, 11, -127, 81]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-102, -40, 120, 124, 98, -58, -87, -11, -70, -18, -52, 46, -11, 102, 85, 17]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B94B61F93519A201D7C95E222E2DBEBC4F107D1A1FB6C3A0A56E673AB14FB317A106FCD4715B05A1BB4717AE5BC9518DB5EA396FE16503B22B3171CD2210916C33ECD463AA688E462178E59BF97955920F577D5DDB84DFE758C97264EC0EA59EC51ED8EE03C95865298C626D9DA71B7A", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey22);
        java.lang.Class<?> wildcardClass33 = byteArray32.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[69, 67, 77, 52, 48, 127, -67, 122, -112, -45, 84, -65, -40, -105, -18, -37]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-65, 12, -5, 110, -120, -55, -88, 50, 29, -27, 6, -47, 51, 112, -8, -24]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[81, -10, -88, 111, -28, 32, 111, 125, -63, 27, -2, -40, 45, 105, -51, -13]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[83, -71, 46, -27, -50, 58, -99, -120, -105, -104, 71, 37, -33, -80, -123, -109]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[15, 73, 85, 1, 27, -92, 124, 44, 6, -38, 68, -65, -70, 78, 36, 81, -101, 90, -109, 30, 12, 86, -51, 73, -73, -38, -86, 40, 14, -15, -66, 28, 81, -10, -88, 111, -28, 32, 111, 125, -63, 27, -2, -40, 45, 105, -51, -13]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[16, -33, -9, -17, 108, 1, -87, -123, 77, 119, 7, 127, 28, 13, 92, -122, -104, -69, -21, 118, -111, -85, 33, 3, 111, 70, -76, 127, -42, -26, 78, 45, 81, -10, -88, 111, -28, 32, 111, 125, -63, 27, -2, -40, 45, 105, -51, -13]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[21, 41, -18, 31, -113, 31, 7, 81, 6, 61, -96, -11, -114, 58, 97, 36, 26, -9, -86, 100, 78, -79, 118, -112, 10, -37, -63, -116, 111, -25, -24, 97, 94, 126, 115, 87, 78, 70, -66, -14, -40, -83, -98, 38, 65, 64, 58, -88, -100, -127, -6, -89, -21, -46, 10, -98, -3, -107, 45, 21, -60, 84, -5, 46, -50, -41, -108, -84, 85, 122, 71, 100, 89, -102, 34, -88, 69, -74, 15, 56, -22, -8, 38, 65, -125, 18, -52, 121, -1, 99, -100, 38, 36, 119, -19, -59, 81, -10, -88, 111, -28, 32, 111, 125, -63, 27, -2, -40, 45, 105, -51, -13]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[16, -33, -9, -17, 108, 1, -87, -123, 77, 119, 7, 127, 28, 13, 92, -122, -104, -69, -21, 118, -111, -85, 33, 3, 111, 70, -76, 127, -42, -26, 78, 45, 81, -10, -88, 111, -28, 32, 111, 125, -63, 27, -2, -40, 45, 105, -51, -13]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[49, 105, -56, -63, -53, -78, -9, 62, -21, -112, -24, -2, 109, -113, -30, -47, 0, -100, 35, 103, -76, 73, 83, -127, 101, 3, 66, -126, -126, -23, -96, -105, -116, 74, -53, 36, 110, 14, -116, -113, -77, -117, -99, -24, 41, -83, 62, 95, -47, -109, -7, 40, 62, -97, 104, -92, 61, 51, 22, -128, -39, 55, -46, -3, 56, 30, 53, -82, -85, 98, 43, -92, -95, 17, 116, 42, -110, 58, 97, -33, 62, -84, 16, -79, -85, -37, -94, -107, 83, 17, 62, -75, 62, -45, -61, -122, 81, -10, -88, 111, -28, 32, 111, 125, -63, 27, -2, -40, 45, 105, -51, -13]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey41);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey41);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey41);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[46, 60, -70, 11, -41, -76, -103, -41, -42, 11, 36, -73, 24, -20, 106, -70]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[4, -113, -59, 29, 99, 34, 2, -69, 92, 82, 68, -85, -18, 41, -57, 91]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-121, -25, -81, 41, 118, -30, 103, 103, -60, -56, 75, 26, 110, 121, 108, -54]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-39, -91, -115, -62, -112, 37, 76, 12, -91, -32, -72, 21, -38, 20, 3, -86]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[6, -98, -33, -13, -42, 61, -10, -84, -102, -41, 79, -110, 89, -59, -10, 42, 15, 71, 120, 77, 101, 112, 5, 103, -121, -27, -85, -60, -55, 22, -32, -54, -121, -25, -81, 41, 118, -30, 103, 103, -60, -56, 75, 26, 110, 121, 108, -54]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-121, -25, -81, 41, 118, -30, 103, 103, -60, -56, 75, 26, 110, 121, 108, -54]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-39, -91, -115, -62, -112, 37, 76, 12, -91, -32, -72, 21, -38, 20, 3, -86]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[45, 66, 7, -36, 90, -110, 85, 36, 6, -42, 25, -75, 48, -96, -73, 62, 31, -126, -10, -21, -110, -63, -88, -62, 114, -87, 27, -32, 64, -57, -58, 79, -121, -25, -81, 41, 118, -30, 103, 103, -60, -56, 75, 26, 110, 121, 108, -54]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-99, -42, 121, 89, -35, 90, -105, -90, -1, 67, 100, 22, 120, 10, 73, -54, -50, 32, -20, -96, -101, -13, 64, 44, 20, 95, 97, -122, -104, -87, 33, -88, -38, -4, -42, -25, -35, -75, -101, 108, 82, -13, 77, -126, -33, 126, 2, 114, -8, 4, 106, 86, 68, -117, 0, 48, -37, -117, -42, 44, -35, -40, 21, 64, 6, -95, -113, -128, 16, 84, -108, -127, -61, -18, 105, -112, 41, 88, -35, -57, 11, -29, -26, -7, 119, 81, 31, -72, 13, 112, 5, -93, -128, -39, 62, -22, -121, -25, -81, 41, 118, -30, 103, 103, -60, -56, 75, 26, 110, 121, 108, -54]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "9DD67959DD5A97A6FF436416780A49CACE20ECA09BF3402C145F618698A921A8DAFCD6E7DDB59B6C52F34D82DF7E0272F8046A56448B0030DB8BD62CDDD8154006A18F8010549481C3EE69902958DDC70BE3E6F977511FB80D7005A380D93EEA87E7AF2976E26767C4C84B1A6E796CCA" + "'", str31, "9DD67959DD5A97A6FF436416780A49CACE20ECA09BF3402C145F618698A921A8DAFCD6E7DDB59B6C52F34D82DF7E0272F8046A56448B0030DB8BD62CDDD8154006A18F8010549481C3EE69902958DDC70BE3E6F977511FB80D7005A380D93EEA87E7AF2976E26767C4C84B1A6E796CCA");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9DD67959DD5A97A6FF436416780A49CACE20ECA09BF3402C145F618698A921A8DAFCD6E7DDB59B6C52F34D82DF7E0272F8046A56448B0030DB8BD62CDDD8154006A18F8010549481C3EE69902958DDC70BE3E6F977511FB80D7005A380D93EEA87E7AF2976E26767C4C84B1A6E796CCA" + "'", str32, "9DD67959DD5A97A6FF436416780A49CACE20ECA09BF3402C145F618698A921A8DAFCD6E7DDB59B6C52F34D82DF7E0272F8046A56448B0030DB8BD62CDDD8154006A18F8010549481C3EE69902958DDC70BE3E6F977511FB80D7005A380D93EEA87E7AF2976E26767C4C84B1A6E796CCA");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-88, -107, -120, -99, -22, 6, 82, -83, 15, 89, 99, -3, 118, -119, -120, 71]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-23, 34, -3, -96, -126, 22, 115, 114, -55, 101, -75, -122, 1, 68, 74, 6]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-80, 117, 38, -91, -61, -33, -89, -20, 9, 111, 98, 84, -72, -51, 98, -32, 22, -34, -101, -12, 30, -66, 113, -49, 22, -124, 126, -47, -121, 26, 79, 92, 127, -66, -29, -67, 42, 15, 121, -115, 82, 7, -40, 43, 17, -25, 91, -16, -93, 1, 6, 16, 98, -31, 96, 43, -89, -118, 127, 94, -26, -15, -81, -90, 34, 32, -23, 22, 106, 77, 10, -105, -96, 49, -114, -25, -20, -118, 44, -52, 106, 90, -23, -45, 63, 82, 39, 109, -28, -97, -90, 51, -73, 54, -59, -99, -88, -107, -120, -99, -22, 6, 82, -83, 15, 89, 99, -3, 118, -119, -120, 71]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-109, -74, -125, -79, 83, -25, -18, 102, 47, -54, -112, -47, -35, 103, 100, -95, -68, 44, 124, -108, -40, -69, 70, 106, -54, 37, -54, 76, -84, -74, -57, -81, -88, -107, -120, -99, -22, 6, 82, -83, 15, 89, 99, -3, 118, -119, -120, 71]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-97, -28, 100, 24, -9, 124, -109, 54, -29, 92, 127, -116, 30, 31, 122, 117, 74, 100, -11, -29, -66, -10, 11, 13, 3, 2, 60, -115, -69, -17, -83, 42, -73, 2, 44, 124, -74, 76, -40, 94, 14, -124, 90, 44, 51, -35, -66, 83, 41, -118, -55, 98, 74, -29, 97, -112, -54, 36, 27, -91, 34, 90, 35, -58, 47, 2, 51, 20, -118, -69, -124, -89, -88, 1, 84, -10, 115, -112, -72, -47, -100, 56, -95, -118, -95, 115, -106, 5, 83, -88, -69, 67, 58, -15, -58, 39, -88, -107, -120, -99, -22, 6, 82, -83, 15, 89, 99, -3, 118, -119, -120, 71]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-75, -70, -13, -64, 39, 52, -82, -118, -11, -3, 73, -56, -112, -81, 94, 36, 108, 18, -106, 123, -98, 70, 35, -92, -112, 64, -120, 97, -113, 47, 39, -27, -88, -107, -120, -99, -22, 6, 82, -83, 15, 89, 99, -3, 118, -119, -120, 71]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-75, -70, -13, -64, 39, 52, -82, -118, -11, -3, 73, -56, -112, -81, 94, 36, 108, 18, -106, 123, -98, 70, 35, -92, -112, 64, -120, 97, -113, 47, 39, -27, -88, -107, -120, -99, -22, 6, 82, -83, 15, 89, 99, -3, 118, -119, -120, 71]");
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("73912D453669B7FE81F32940C313724166866F2175F958719DB06EACDD4B5B281CDFE84185F2C4749276BA8BA5DBD8CF2E04DD8ED74819514EFAF9BC4E90AF512FCF0DFE37924499911E8A60792941EBA04320836BF21CEADDDA3D50DE7CD3D4D05E7829B393DF4225B293463740D538", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("\006\ufffd\ufffd\t\ufffd\023S\031\ufffd\ufffd}+", secretKey30);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey47);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey47);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey47);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[114, 47, -113, -79, -109, -121, 30, 100, -83, -19, 117, -7, 77, -108, 91, 118]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[52, 112, -66, 82, -60, -110, -8, 40, -70, 8, -104, 17, -103, 9, -127, -93]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-18, -73, -106, 42, 51, -12, -100, -20, -67, -103, 14, 87, 98, -42, 115, -14]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[104, 33, 35, 110, 122, 34, -119, 40, -66, 109, 84, -116, -103, -7, 112, 95]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-6, 3, -97, -112, 57, -87, -95, -83, 76, 70, 47, -98, 80, 34, 9, -85]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-49, 1, 88, 119, -9, 81, 91, 109, -98, -106, 96, 45, -20, -59, 97, -70]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-49, 1, 88, 119, -9, 81, 91, 109, -98, -106, 96, 45, -20, -59, 97, -70]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-61, 67, -32, -44, -15, -114, 2, 61, 66, 5, -49, -104, 27, 105, 110, -25, 98, 52, 49, 66, 15, 61, -10, -16, -71, -3, 116, -128, -110, -4, 68, 95, -6, 3, -97, -112, 57, -87, -95, -83, 76, 70, 47, -98, 80, 34, 9, -85]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-78, 80, -52, 125, -84, 3, -18, 73, 97, 112, 125, 6, -99, 10, -9, 86, 58, 29, -26, 110, 98, -4, -62, 72, 82, 91, -43, -122, 38, -116, 29, -42, -6, 3, -97, -112, 57, -87, -95, -83, 76, 70, 47, -98, 80, 34, 9, -85]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[74, 2, 55, -96, -81, -112, -85, -115, -120, -1, -35, 90, 56, 85, -75, -5, -51, -27, -60, -46, 122, -114, 47, -91, 60, 120, 55, 16, 59, -69, -51, -88]");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-21, -34, 65, -74, -114, 106, 105, -67, 74, -111, 9, 44, 95, 80, 5, 79]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-78, -50, 90, 28, -99, -62, -67, 104, 122, 64, -6, -68, -75, 67, -54, 70]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-78, -50, 90, 28, -99, -62, -67, 104, 122, 64, -6, -68, -75, 67, -54, 70]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-107, -73, 70, 2, 89, 44, 108, -21, 43, -54, -38, 19, 22, -127, -97, 59, -120, 43, 71, -123, 125, -76, -80, 36, 24, 44, -60, -44, -89, 13, -114, 73, -21, -34, 65, -74, -114, 106, 105, -67, 74, -111, 9, 44, 95, 80, 5, 79]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, -19, 46, 58, 55, 42, -40, -77, 107, -77, -14, -126, -55, 50, 54, 125, 17, 79, 27, -95, -55, 85, -1, 13, 33, 117, -64, -48, -5, -69, -61, 10, -21, -34, 65, -74, -114, 106, 105, -67, 74, -111, 9, 44, 95, 80, 5, 79]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-60, -66, 2, -106, 72, -40, 10, 122, -93, 2, -33, 33, 68, -60, -92, 127, 102, -80, 36, -126, 112, -20, 67, 82, 111, 110, -52, -77, 92, 64, 96, -120, -21, -34, 65, -74, -114, 106, 105, -67, 74, -111, 9, 44, 95, 80, 5, 79]");
        org.junit.Assert.assertNotNull(byteArray54);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey41);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey41);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[69, -93, 84, -115, -111, 53, 44, -19, 13, -9, -38, 110, -61, -55, 47, 91]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-66, -9, 35, 69, -32, 114, -14, -76, -74, -120, 23, -98, -52, -69, 19, -64]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[105, 82, 123, -21, -87, 14, -124, -35, 57, -77, 113, -60, -93, 87, -75, 125]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-33, 93, 111, -53, -82, 114, -16, -57, -64, 58, -85, -67, 98, -19, -55, 44]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[49, 33, -11, -59, 93, 124, 5, -60, -81, 8, -64, -80, 29, 72, -30, 26]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-121, -114, -60, 97, 22, 15, 38, 40, -36, 30, 94, -87, -87, -58, -10, 127, 109, 126, -59, -59, 10, 109, 38, 104, 55, -75, 39, 46, 111, 38, 118, 29, -33, 93, 111, -53, -82, 114, -16, -57, -64, 58, -85, -67, 98, -19, -55, 44]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-121, -114, -60, 97, 22, 15, 38, 40, -36, 30, 94, -87, -87, -58, -10, 127, 109, 126, -59, -59, 10, 109, 38, 104, 55, -75, 39, 46, 111, 38, 118, 29, -33, 93, 111, -53, -82, 114, -16, -57, -64, 58, -85, -67, 98, -19, -55, 44]");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("AB3501159AB7C84C8B6FAA79AF0BAE36", secretKey2);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey36);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey36);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey36);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey36);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey36);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-92, 59, -42, 12, 78, -13, -70, 114, -29, -21, 105, 114, 82, -114, 120, 49]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-5, -112, -58, -44, -14, -87, 42, -127, -21, -2, 122, -108, 4, 41, 80, 72, -11, 57, 25, -72, -64, 110, -18, 94, -115, 105, -33, -71, -11, -38, 75, -14, 37, -99, -64, 122, -81, -110, -127, -78, -33, 65, -27, 81, -89, -48, -119, 16]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[124, -5, -6, -48, -10, 20, -96, -78, -37, -55, -74, -119, 43, 48, -30, -110]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[99, -1, 62, 74, 1, -44, -106, -112, -38, -23, 68, -49, 57, -63, 61, -44]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[6, 59, -91, -114, 84, -79, -94, 109, -18, -104, 97, 102, -97, 25, -78, -127]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[63, -75, -9, 116, 18, -6, 112, -31, -29, -3, -20, 66, -96, 27, -96, 91]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-44, 53, 44, -125, 56, 90, 52, -29, -45, -71, -15, 108, -103, 87, 125, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-52, 76, 100, 104, 96, 96, 53, -68, 39, -94, -121, -59, -15, 40, 84, -107]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-52, 76, 100, 104, 96, 96, 53, -68, 39, -94, -121, -59, -15, 40, 84, -107]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-46, 99, 88, 110, 82, -33, -110, -4, -19, 79, 54, -16, 97, -70, 96, 86, 78, 117, 57, 77, 64, 56, -71, 109, -59, 42, 76, -22, 49, 16, -69, 120, -44, 53, 44, -125, 56, 90, 52, -29, -45, -71, -15, 108, -103, 87, 125, 0]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, -102, -24, -12, -98, -91, -35, 26, -122, -23, -96, 120, -1, 31, 68, 97, 118, -97, -64, 3, -83, -111, 19, -103, -116, 42, -88, -24, -119, 113, 19, 112, -44, 53, 44, -125, 56, 90, 52, -29, -45, -71, -15, 108, -103, 87, 125, 0]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[95, 16, -35, 7, -117, 54, 54, 35, -89, 34, 109, -9, 126, 61, 71, -55, -126, -31, -87, -62, -85, -28, 123, 74, -127, -57, 35, -10, -76, -88, -21, 80, -44, 53, 44, -125, 56, 90, 52, -29, -45, -71, -15, 108, -103, 87, 125, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-117, -83, 17, -3, 97, 104, -52, 111, -110, 45, 25, 69, 18, -50, -23, 3, 80, 115, 89, 28, -36, 98, 101, -23, -2, -68, -54, -107, 85, -8, -43, -39, -32, -41, 2, -45, -8, -10, 103, 100, -28, 64, -53, -32, -16, 39, 85, -10, 59, -10, 14, -103, 69, -33, -125, 44, 55, 115, 95, -57, -3, 25, -81, 86, 59, -30, -18, 77, 85, -72, 47, -53, 72, 92, 7, 35, 7, 120, 56, 36, 46, 62, -121, -84, 101, 27, -36, 114, -81, 117, 28, -8, -74, 33, 123, 90, -44, 53, 44, -125, 56, 90, 52, -29, -45, -71, -15, 108, -103, 87, 125, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey51);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey51);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey51);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey51);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-72, 26, 31, 96, -63, -75, 68, -21, -106, 49, 20, 19, -22, -10, -120, 125]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-36, -59, 22, -39, 97, 45, 100, 50, -118, -62, -73, 117, 47, -62, -100, 15]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[91, -27, -41, 76, 43, 46, -6, -95, 53, -52, -16, -35, -51, 110, 45, -97]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-25, 95, 44, -108, 15, -19, 26, 75, 19, -59, 126, -109, -46, 91, 118, -58]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[37, 83, -94, -34, 81, 10, 15, 73, 99, 54, 93, 116, -33, 108, 125, 100, 118, 45, -32, -113, -46, 18, 110, -35, 28, 6, -62, -63, 51, 52, -85, -38, 91, -27, -41, 76, 43, 46, -6, -95, 53, -52, -16, -35, -51, 110, 45, -97]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[31, -7, 89, 79, -6, 66, -49, 29, -75, -69, 3, -104, -1, -58, -52, -70, -27, -27, -45, -52, 0, 86, 29, -25, 37, -95, 116, -28, -100, 20, -102, 39, 91, -27, -41, 76, 43, 46, -6, -95, 53, -52, -16, -35, -51, 110, 45, -97]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1FF9594FFA42CF1DB5BB0398FFC6CCBAE5E5D3CC00561DE725A174E49C149A275BE5D74C2B2EFAA135CCF0DDCD6E2D9F" + "'", str25, "1FF9594FFA42CF1DB5BB0398FFC6CCBAE5E5D3CC00561DE725A174E49C149A275BE5D74C2B2EFAA135CCF0DDCD6E2D9F");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1FF9594FFA42CF1DB5BB0398FFC6CCBAE5E5D3CC00561DE725A174E49C149A275BE5D74C2B2EFAA135CCF0DDCD6E2D9F" + "'", str26, "1FF9594FFA42CF1DB5BB0398FFC6CCBAE5E5D3CC00561DE725A174E49C149A275BE5D74C2B2EFAA135CCF0DDCD6E2D9F");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, -123, -10, -26, -117, 126, 55, -112, 82, 56, 39, 72, 84, -19, 10, -99]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-65, -110, -61, 33, 107, 41, -64, -89, -78, 18, 96, -94, 113, -52, 0, 113]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-79, 111, -107, 0, 49, -71, -3, -1, 44, 31, 63, 75, 57, -109, 106, 127]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-14, -51, -36, 112, 2, -51, 82, -69, 126, -84, 107, -84, 69, -80, 32, -2]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[25, 55, 126, 65, 62, -26, 28, 52, 77, 121, -25, 36, 52, -63, -123, -73, -34, 14, -120, -84, 22, -42, 76, -125, -40, -116, 75, 123, 111, 56, 44, 16, -79, 111, -107, 0, 49, -71, -3, -1, 44, 31, 63, 75, 57, -109, 106, 127]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[4, -123, 4, 69, -26, -119, -111, 9, -52, -43, -87, 76, 96, 95, -6, 98, -69, -125, 63, 4, -84, 0, 19, -20, -97, -48, -71, -123, -104, -52, 12, -74, -79, 111, -107, 0, 49, -71, -3, -1, 44, 31, 63, 75, 57, -109, 106, 127]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[67, 46, -32, -74, 114, 38, 9, -92, -125, -30, -46, 66, 20, 48, -32, -68, -1, 123, 127, -114, -61, -106, -47, 113, 57, 51, 73, -2, -24, -69, -76, -27, 92, 48, -128, 23, 32, 73, -109, 25, 66, 15, 7, -116, -71, -23, -62, 0, 87, 127, 89, -25, -93, 104, -94, -21, 27, -98, -64, -31, 18, 70, -59, 76, -15, -110, 61, -7, -115, -71, -71, 31, 47, -77, -47, -52, -14, -4, -120, -8, -109, 73, -97, -110, 55, 77, 102, 105, -88, -21, 76, -87, -63, 105, -85, 113, -79, 111, -107, 0, 49, -71, -3, -1, 44, 31, 63, 75, 57, -109, 106, 127]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[49, -66, -120, 1, -71, -22, -118, 84, 56, 111, 71, -107, -127, -127, -56, 56, 60, -122, -15, 103, -82, -25, -71, -29, 51, 92, 52, -94, -93, -115, 42, -22, -79, 111, -107, 0, 49, -71, -3, -1, 44, 31, 63, 75, 57, -109, 106, 127]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[67, 46, -32, -74, 114, 38, 9, -92, -125, -30, -46, 66, 20, 48, -32, -68, -1, 123, 127, -114, -61, -106, -47, 113, 57, 51, 73, -2, -24, -69, -76, -27, 92, 48, -128, 23, 32, 73, -109, 25, 66, 15, 7, -116, -71, -23, -62, 0, 87, 127, 89, -25, -93, 104, -94, -21, 27, -98, -64, -31, 18, 70, -59, 76, -15, -110, 61, -7, -115, -71, -71, 31, 47, -77, -47, -52, -14, -4, -120, -8, -109, 73, -97, -110, 55, 77, 102, 105, -88, -21, 76, -87, -63, 105, -85, 113, -79, 111, -107, 0, 49, -71, -3, -1, 44, 31, 63, 75, 57, -109, 106, 127]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[53, -58, 77, 57, -52, 119, -32, -25, 108, -65, 102, 87, -97, 62, -83, 121, -100, -41, -93, -68, -125, -116, 44, -34, -9, 61, 45, -92, 36, 121, 41, -17, 29, 75, -65, -2, 77, 49, 8, 53, 5, -80, -40, 35, -17, -25, 125, 66, -26, 97, 102, 9, -120, 51, 72, 80, -113, 84, -77, 97, -122, -111, -49, -64, -13, 2, 48, 56, 114, 39, -23, -18, 117, -37, -92, 97, -84, 94, 54, -90, 33, -98, -102, -73, -22, -14, -68, 80, -99, -16, -11, -19, 21, 37, 107, 105, -79, 111, -107, 0, 49, -71, -3, -1, 44, 31, 63, 75, 57, -109, 106, 127]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-79, 111, -107, 0, 49, -71, -3, -1, 44, 31, 63, 75, 57, -109, 106, 127]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[23, -90, 127, -126, 27, -47, -78, 4, -43, -69, -111, 101, 71, -12, -2, -31, -28, -73, 20, 20, 38, 10, -21, 111, -69, -72, 41, 83, -27, 66, -31, -85, -82, -98, -118, -96, 76, 121, -89, -109, 47, -21, -88, 17, -28, 102, -105, -117, 86, -98, 109, 49, -111, -70, 18, 51, -81, 57, 32, 36, -97, -17, 15, -61, 114, 83, 4, -26, 80, -128, 55, 7, 56, 57, 39, -58, -95, -88, -16, -126, -51, -25, 85, -57, 48, 64, 94, -41, -8, 55, 33, 8, -107, -41, 74, 19, -79, 111, -107, 0, 49, -71, -3, -1, 44, 31, 63, 75, 57, -109, 106, 127]");
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey30);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[34, -38, 62, 75, -83, 2, 23, 9, -99, 66, 92, -102, 66, -69, 68, 4]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[66, 48, 126, -77, -19, -20, 5, 91, -17, -81, -69, -5, -75, 101, 5, 68]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-50, -123, -118, 107, -100, 119, 63, 93, -32, -120, 114, -51, -106, -44, 124, -45]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[123, -41, 109, -124, 82, 79, 87, -50, -92, 58, -88, 32, -46, 68, -126, 48]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[48, -92, 113, -29, 70, -115, 87, 118, -33, 37, 104, -81, 66, 29, 107, -110, -77, -31, -117, -41, 119, -69, 25, -1, -78, 109, -20, -77, 106, -16, 67, 68, -50, -123, -118, 107, -100, 119, 63, 93, -32, -120, 114, -51, -106, -44, 124, -45]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[48, -92, 113, -29, 70, -115, 87, 118, -33, 37, 104, -81, 66, 29, 107, -110, -77, -31, -117, -41, 119, -69, 25, -1, -78, 109, -20, -77, 106, -16, 67, 68, -50, -123, -118, 107, -100, 119, 63, 93, -32, -120, 114, -51, -106, -44, 124, -45]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-50, -123, -118, 107, -100, 119, 63, 93, -32, -120, 114, -51, -106, -44, 124, -45]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CE858A6B9C773F5DE08872CD96D47CD3" + "'", str27, "CE858A6B9C773F5DE08872CD96D47CD3");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CE858A6B9C773F5DE08872CD96D47CD3" + "'", str28, "CE858A6B9C773F5DE08872CD96D47CD3");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CE858A6B9C773F5DE08872CD96D47CD3" + "'", str29, "CE858A6B9C773F5DE08872CD96D47CD3");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("508380463B279F88BA991D8C01E9AB5E82EA2F47BCDFDF38340DE16537E50CBBBE3C63E0ECF3A695148E403FF490F4BA58670B485C598323585595245B8C6C35D8AFBAB401419C791C4E639E987610A73A69713278CA83CD63054A23B242ACA507B8E14566EB5B8F765839A1B49AAE54", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey47);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey57);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey68);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey68);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey68);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey68);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("85901A7A07774EF1B30A7D77F78D499830E94396D39F6D0A240A6BA509D22CD00BBA7DCDA4CC37D69BA13844D5AF219C", secretKey68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey68);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-67, 112, -70, 66, -124, 42, -84, -40, -98, 63, -90, -83, -120, 77, -118, -55]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-40, 103, 116, -56, -14, 77, -99, -26, 125, -103, 24, 85, -91, 68, -14, -100]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-40, 103, 116, -56, -14, 77, -99, -26, 125, -103, 24, 85, -91, 68, -14, -100]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-70, -6, -86, 41, 4, -56, 87, 2, -74, 1, 12, -117, 101, -64, -73, 120]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-67, 112, -70, 66, -124, 42, -84, -40, -98, 63, -90, -83, -120, 77, -118, -55]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C8908F969ACFA694C2A6DE934AA7C96B5D90553417BF863D406C3018A9E0DF87D839A4C60F048FD6B4727D3F76507405EB59B6DB4055E8A60E846F2DBD38C874E2D9BA91537CDACBB52DB81EF8DC7A78CFDF6295CA32426BF8856515D8BFE45ABA75695D3B8570E3079D43846D1E29DDE113655B0657E99545711FB0DFC66C9BCE7842BABBE4EE50DE37C87889BADA2AEFAA4B50ABC7F1C7828AAF53885370F003EB28EBEB5C503CD5CA31B851069DFC2D32FD3F059FFC470761264919861636BFFE1FC24535AD2D6D797631979923527AEAF640CA7B1696427FEE194EDCD79BBD70BA42842AACD89E3FA6AD884D8AC9" + "'", str15, "C8908F969ACFA694C2A6DE934AA7C96B5D90553417BF863D406C3018A9E0DF87D839A4C60F048FD6B4727D3F76507405EB59B6DB4055E8A60E846F2DBD38C874E2D9BA91537CDACBB52DB81EF8DC7A78CFDF6295CA32426BF8856515D8BFE45ABA75695D3B8570E3079D43846D1E29DDE113655B0657E99545711FB0DFC66C9BCE7842BABBE4EE50DE37C87889BADA2AEFAA4B50ABC7F1C7828AAF53885370F003EB28EBEB5C503CD5CA31B851069DFC2D32FD3F059FFC470761264919861636BFFE1FC24535AD2D6D797631979923527AEAF640CA7B1696427FEE194EDCD79BBD70BA42842AACD89E3FA6AD884D8AC9");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-33, 100, 21, 37, 9, -104, -82, -72, 82, -38, 126, 16, 8, 11, -24, 91]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-8, -54, -67, 21, -96, 44, -36, 68, 88, 111, -65, -16, -76, -92, 10, 18]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[37, -36, -34, -24, 30, -95, 96, 76, 54, -43, 109, -53, 0, -32, -47, -43]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[19, -128, -81, 20, 54, -96, 14, 2, 22, -37, 13, 0, 9, -5, 74, -124]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[124, -53, -103, 111, 77, 62, 98, 62, 9, 15, -12, -105, 51, 7, 80, -45]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[50, 125, -84, -98, -112, 72, 63, -24, 109, -38, -46, -121, 112, -64, 78, 92]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-16, -125, -66, -114, 64, -85, 44, 110, -105, -19, 56, -40, 5, 13, 101, -24]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-41, -75, 106, 22, 75, 1, 31, -126, 44, 120, 12, 96, 53, -51, -122, 59]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[17, -100, 94, -66, -62, -102, 52, -5, -104, 15, -105, -94, 10, -102, -66, -90]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-110, -104, 41, -114, 119, -14, -16, -69, -34, -68, -110, 93, -15, 66, -114, 22]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-110, -80, -27, 52, -48, 91, -9, 41, -89, 81, 98, 7, -63, 17, 13, 68]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[17, -100, 94, -66, -62, -102, 52, -5, -104, 15, -105, -94, 10, -102, -66, -90]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-110, -80, -27, 52, -48, 91, -9, 41, -89, 81, 98, 7, -63, 17, 13, 68]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[14, -92, 70, 59, -61, 108, -105, -4, -69, 43, 127, 34, -35, 70, 56, 83, 26, 94, -78, -83, 66, -1, -83, -23, 44, 95, -114, -61, 84, 13, 26, 109, -64, 18, -98, 25, 12, -73, -51, -111, 101, -21, 73, 16, 51, -83, -112, 117, -55, 95, 91, -93, -98, -117, -98, -79, 104, -18, -31, -101, -110, -28, 103, 125, -33, -115, -33, -21, 85, -107, 18, -2, 11, -58, 93, -13, -81, 9, -29, -87, 77, -14, -2, -116, -51, -2, -24, -6, 52, 37, 123, 126, 55, -87, -103, -44, 17, -100, 94, -66, -62, -102, 52, -5, -104, 15, -105, -94, 10, -102, -66, -90]");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey37);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey37);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[58, 68, -118, 94, -104, -54, -128, 89, 119, -24, 33, 89, 41, -13, 37, 19]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[21, 38, 35, -23, 111, -95, -66, 24, 60, -43, 119, 43, 65, 11, -74, -42]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[125, 52, 103, -10, 51, 126, 58, 122, -16, 69, 28, 76, 57, 88, -15, 89]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-124, 18, -40, 111, 127, -118, 0, -102, -43, -93, 4, -92, -53, 115, -56, 89]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-63, -61, -51, 122, 50, -51, 36, 3, -122, 43, -1, -116, 96, -66, -120, -61, -25, -94, -58, -124, -23, 14, 21, -111, 100, -57, 13, 93, 85, 77, 51, -18, 125, 52, 103, -10, 51, 126, 58, 122, -16, 69, 28, 76, 57, 88, -15, 89]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[93, -26, 44, -48, -113, -24, -51, 58, 55, 103, -12, -39, -122, -24, 85, 0, -45, -71, 68, 75, 126, 3, 67, 122, -87, 86, 93, 117, 86, -55, -32, 80, 125, 52, 103, -10, 51, 126, 58, 122, -16, 69, 28, 76, 57, 88, -15, 89]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[60, -117, -118, 58, -113, -108, 0, 16, -93, 43, 23, -12, -103, 100, 34, -127, -73, 33, -106, -3, -42, 85, -116, -80, -112, 93, 125, -106, 89, -50, 94, -63, -22, -82, 92, -37, 68, 63, -26, 36, -68, 17, 75, 12, 92, 19, -38, -43, 116, 96, 45, -33, -88, 27, -19, 63, 95, -12, 49, -123, 45, 21, 37, -24, 23, -3, -63, -99, 71, 87, 100, -46, 119, -70, -35, 65, 61, -74, 45, -69, 98, -104, 102, -48, 104, 121, -55, 9, -59, 36, -96, 119, 60, -34, 85, 66, 125, 52, 103, -10, 51, 126, 58, 122, -16, 69, 28, 76, 57, 88, -15, 89]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-19, -56, 13, -1, -83, -8, -28, -32, 28, 72, -98, -39, 23, -120, 69, -127, -40, 106, 109, -37, 70, 83, 34, -91, 1, 47, -112, 35, -98, 2, -110, -13, -122, 99, 115, -101, 18, 59, 15, 124, -13, -92, -42, 30, -70, -104, 43, 115, 13, 122, -61, 84, 76, 125, 122, -34, 94, 94, 105, -21, -64, 123, -111, 89, 3, -123, -32, -109, -32, 82, -12, -63, 17, 91, -1, -1, 10, 3, 11, 67, 36, 19, 24, -33, 55, 31, 121, 88, 11, 86, 121, -50, -28, 114, -24, -80, 125, 52, 103, -10, 51, 126, 58, 122, -16, 69, 28, 76, 57, 88, -15, 89]");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-87, 63, -128, 89, 44, -53, -77, 48, -99, 78, 72, -115, 73, 126, 71, 34]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-29, -53, -99, -11, 44, -75, -80, 105, 71, -10, -116, -114, -49, 14, 99, 5]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-29, -53, -99, -11, 44, -75, -80, 105, 71, -10, -116, -114, -49, 14, 99, 5]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[122, -106, 74, -100, -119, -90, 63, -70, 119, 118, 109, 39, -100, -115, 50, 57]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-87, 63, -128, 89, 44, -53, -77, 48, -99, 78, 72, -115, 73, 126, 71, 34]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[109, -117, 88, -33, 68, -45, -8, -73, -60, 19, 41, 108, -37, -13, 104, 20, -60, 124, -63, -53, -40, -7, -84, -76, 59, 8, 34, 35, -51, -5, -101, 15, 126, -50, 107, 50, 1, 105, 40, -82, 84, 87, -57, -51, -23, -65, -66, -90, -128, -47, 94, -127, 49, 8, -87, -31, 9, -67, 69, -114, 94, 103, 21, 72, 102, -86, 64, -69, -20, -112, -115, 9, -117, 29, -35, -116, -24, 112, 45, -17, -97, -42, 114, 77, -46, 52, 106, -22, 75, -41, 123, 97, -66, -126, 15, 47, -87, 63, -128, 89, 44, -53, -77, 48, -99, 78, 72, -115, 73, 126, 71, 34]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[14, 116, 50, -121, -6, 97, 90, -102, 117, -2, 35, -23, -62, 36, -28, -59, -57, -21, 107, 87, -76, -2, 73, 50, -63, 77, -70, -74, -57, 98, -127, -20, 40, -46, 18, 27, 9, -33, -16, 34, 55, 119, -26, 51, 46, -52, 91, -29, -24, 44, 3, -101, -126, 49, -24, -11, -29, 61, 109, -16, 21, 50, 71, 27, 80, -114, 104, 32, -15, 86, -76, 77, -100, 98, -14, 93, -46, 23, 51, -1]");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("A806314C2CB9A1372FCCEFFD537245BAC9B3C26325CA91795027727BD073D1D14C6498FF249C796B64DB7EF9C11DB53A", secretKey19);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey33);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[74, -96, 33, 10, -95, 100, 102, 5, 17, 52, -36, 52, 88, 9, 20, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-119, 16, -25, -73, 109, -12, -72, -29, -75, -96, -124, -46, -128, -15, -123, -45]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-26, -61, 32, 44, 73, 31, 10, -124, 9, -100, 48, -48, 63, -58, 105, -49]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[56, -61, 120, 124, -81, -58, 59, -59, 65, 60, -113, 22, 92, 125, 49, 94]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[8, -90, 87, 38, 44, 123, 74, -19, -111, 20, 0, -40, 9, -24, 12, -67, 40, 85, 9, -111, -99, 116, -76, -99, 119, -118, 40, 81, -46, 89, 37, -76, -26, -61, 32, 44, 73, 31, 10, -124, 9, -100, 48, -48, 63, -58, 105, -49]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[8, -90, 87, 38, 44, 123, 74, -19, -111, 20, 0, -40, 9, -24, 12, -67, 40, 85, 9, -111, -99, 116, -76, -99, 119, -118, 40, 81, -46, 89, 37, -76, -26, -61, 32, 44, 73, 31, 10, -124, 9, -100, 48, -48, 63, -58, 105, -49]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-58, -92, -27, 35, 107, -34, 0, -33, -3, 120, 47, -34, 69, -34, -14, -110, 80, 46, 65, -100, 34, 33, 64, -121, 124, 102, -74, -102, -63, 39, 113, -38, -102, -49, 89, 57, 8, 89, -22, 110, -125, -98, -7, -64, 35, -80, 22, -69, -106, -49, 85, -25, 82, -18, 89, -17, -11, 56, 106, 73, -59, -23, 106, 126, 13, -2, 23, 86, 45, -53, 64, 57, 82, -123, -60, -11, 3, 107, 33, 67, -117, 21, -33, -33, 18, -98, 36, 94, 61, 29, 114, -120, 85, -19, -24, 116, -26, -61, 32, 44, 73, 31, 10, -124, 9, -100, 48, -48, 63, -58, 105, -49]");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[4, 79, -58, 88, 92, 122, 105, -105, 95, 109, 99, 21, 86, -40, 118, -108]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[125, 108, 24, 41, -25, -91, -27, -114, -22, 86, -75, -48, 104, 34, -34, -88]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[125, 108, 24, 41, -25, -91, -27, -114, -22, 86, -75, -48, 104, 34, -34, -88]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-80, -38, 109, 75, -62, 40, -52, 87, -7, -41, -11, 14, 125, 65, -8, 92, 48, 9, 117, 49, 12, -98, 40, 101, 95, 110, -37, -29, 59, 8, 76, 83, 4, 79, -58, 88, 92, 122, 105, -105, 95, 109, 99, 21, 86, -40, 118, -108]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-86, 7, -19, -100, 47, 13, -119, -38, -72, -73, 117, 102, 31, 24, -111, 33, -80, -70, -80, -82, -77, 115, -81, -82, -18, -76, 16, 76, 124, 127, 22, -96, 4, 79, -58, 88, 92, 122, 105, -105, 95, 109, 99, 21, 86, -40, 118, -108]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-91, -55, 53, 123, -18, 16, 31, 3, 67, 116, 78, -72, -113, 125, 96, -49, 63, 21, 65, 69, 91, -8, -42, 10, -91, 43, 73, -68, 7, 32, -70, -80, 4, 79, -58, 88, 92, 122, 105, -105, 95, 109, 99, 21, 86, -40, 118, -108]");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("785D85238EF6058BD3CBAAA7366D7F415A8722502FC5E50082C9918733F9B3B0C8F7350F7CB66869038D210C0114B59BDA9757FAD4C615A36FB13B100BBE29A286D4D18998E6A4BE07D276C9D4699B9281A29F98AE8D4D678FADD8931E0FE4D12898879AC63D43C168E02747B342775F", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[83, 64, 74, 110, 36, 47, 80, 31, 53, 12, -96, 85, -39, 93, 101, 14]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[34, -110, 97, 20, 12, -116, 41, -113, -2, 120, 38, -52, -32, 59, -57, -16]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[25, -3, 102, -54, -50, -85, -48, 68, 46, -86, 94, -78, 103, 78, -105, 103]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-11, -103, 49, 36, 99, -112, 53, -36, 119, 106, 79, -61, 80, 104, -100, -74]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 64, 99, -47, -92, -92, 110, -81, -13, 62, 95, 100, 118, -71, -62, 64, 106, -15, 33, -116, 50, -10, 16, -63, -50, -92, 17, 30, 20, -76, -124, -102, 25, -3, 102, -54, -50, -85, -48, 68, 46, -86, 94, -78, 103, 78, -105, 103]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[93, 7, -72, -82, -76, 28, 14, -110, -70, 87, 69, 15, 72, -127, -70, 44, -23, 33, 30, 36, 127, 26, -12, 26, -33, 126, -128, 68, -19, -23, -98, -9, 89, 18, -106, -70, -43, -77, 115, -86, -76, 116, 28, -87, 123, 118, -93, -50, -13, -57, -5, -6, -108, 62, -2, 62, 113, -44, 16, -47, -122, -65, -72, 17, -99, 47, -125, -72, 15, 84, -1, 94, 85, 17, -68, -108, 83, 25, 86, 126, -52, -52, 1, 43, -100, 15, 6, -5, -20, 115, -64, 15, -116, -55, 46, 95, 25, -3, 102, -54, -50, -85, -48, 68, 46, -86, 94, -78, 103, 78, -105, 103]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[32, 101, 122, -10, -33, -3, 44, 65, -12, -30, -122, 70, 3, 112, 43, -14, 27, -49, -9, -76, -73, -9, 117, 74, -41, 40, -96, -34, 66, 46, 22, 41, 25, -3, 102, -54, -50, -85, -48, 68, 46, -86, 94, -78, 103, 78, -105, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "43BBF5E71C9582E318981907C60170B266FB43B3D3C3498D56F355D829DAEA0D1F95DF3FF4E36878E7B68FDFCB157577A50D5C0FF9C3D2DE512569DFD5322ABA0A590E4CE2EA24EB14F2F20832D47223BD555C118B2D098AB12DA7C9C5C108EBF48ADE0512D9B2F23689B53F7699A334557EE4DA61C9A3A3E265318571F611CEBE59B08FFD84238F69C70B266A9D3DC2090725292443FBE6571CF9AAC68FACCD0FCBE38B0E914523E0C72CCD75E422F47AF318A6586EECD8895250788D87DD16F261288B255BEA6422D586017D14372DE03FC4BC79C03DAB6F5F86ABA24CFE2519FD66CACEABD0442EAA5EB2674E9767" + "'", str29, "43BBF5E71C9582E318981907C60170B266FB43B3D3C3498D56F355D829DAEA0D1F95DF3FF4E36878E7B68FDFCB157577A50D5C0FF9C3D2DE512569DFD5322ABA0A590E4CE2EA24EB14F2F20832D47223BD555C118B2D098AB12DA7C9C5C108EBF48ADE0512D9B2F23689B53F7699A334557EE4DA61C9A3A3E265318571F611CEBE59B08FFD84238F69C70B266A9D3DC2090725292443FBE6571CF9AAC68FACCD0FCBE38B0E914523E0C72CCD75E422F47AF318A6586EECD8895250788D87DD16F261288B255BEA6422D586017D14372DE03FC4BC79C03DAB6F5F86ABA24CFE2519FD66CACEABD0442EAA5EB2674E9767");
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey55);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey55);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey55);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[79, -88, -118, 90, -120, 19, 120, 96, 86, -43, -63, -123, 20, -72, -2, -102]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-40, 80, 26, -29, -57, -28, 46, 82, -115, -11, -118, -9, -5, -79, -7, -53]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[109, 33, 44, -37, 3, -53, 106, -38, -110, -126, -108, 44, 123, -79, -79, 81]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[43, 11, -79, -7, -105, 70, -23, -43, -87, -93, -122, 15, -106, -34, -34, 67]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-118, -114, -28, -7, 67, 40, -116, 82, 24, 121, 26, -11, 41, -86, -21, -33, 10, 55, -20, 92, 116, 92, 112, 65, -83, 111, -103, -42, -7, -63, -61, -40, 109, 33, 44, -37, 3, -53, 106, -38, -110, -126, -108, 44, 123, -79, -79, 81]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[123, -92, 122, -103, 17, 125, 49, -126, 79, 122, 99, -34, 109, 91, 19, -106, 46, -35, -3, 125, -107, 5, 30, 100, -58, 59, -21, -55, 61, 49, 39, -91, 109, 33, 44, -37, 3, -53, 106, -38, -110, -126, -108, 44, 123, -79, -79, 81]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "A2920B3F11965E1625ABEA65FD9166181FAE16A68675AB4552C9A816695094ED2D2212DED1AA46C9CA3E968883333513964E987BABB1F68D6784A2DBF8416B55D3B6126466FEB87039C646E606B8C8951C8E68B8B4C246796BE7E0488CADFCE79688A1463FA594849D03AB296BCAF8660630ED248645EBE53693E27FB3FA47F4805CCCA1E4F43E428EB4A9AFCA0F17B77404584EB65FDC54C249C0EE91CA7AE9EFDAD0D8B46ADCB69D887CD5838340BD68DD3650B5DAAD958BC275E9327E78BC0CC0426FC86EB0DB128F5E0646E483615DFAF138830D5D12E7E89DA2BE0303C66D212CDB03CB6ADA9282942C7BB1B151" + "'", str27, "A2920B3F11965E1625ABEA65FD9166181FAE16A68675AB4552C9A816695094ED2D2212DED1AA46C9CA3E968883333513964E987BABB1F68D6784A2DBF8416B55D3B6126466FEB87039C646E606B8C8951C8E68B8B4C246796BE7E0488CADFCE79688A1463FA594849D03AB296BCAF8660630ED248645EBE53693E27FB3FA47F4805CCCA1E4F43E428EB4A9AFCA0F17B77404584EB65FDC54C249C0EE91CA7AE9EFDAD0D8B46ADCB69D887CD5838340BD68DD3650B5DAAD958BC275E9327E78BC0CC0426FC86EB0DB128F5E0646E483615DFAF138830D5D12E7E89DA2BE0303C66D212CDB03CB6ADA9282942C7BB1B151");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[110, -4, 9, -81, 107, -85, -117, -12, -53, -124, -60, 31, 92, 62, -4, 46]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-113, 62, -123, 95, -118, -47, -35, -74, -120, -116, -105, 86, 42, -27, -103, 120]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[121, -6, 27, -8, -102, -12, -38, 12, 62, -81, -67, -23, 87, 5, 71, -100]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[122, -46, 122, 124, 18, 101, 89, -126, 89, 73, 30, -119, -13, 96, 86, 47]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-51, -83, 9, -55, -115, 104, -93, 98, 77, -34, -8, -47, -91, -84, 2, 22]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-111, 19, 85, 95, 120, -118, 63, -102, 45, 67, -122, 125, 45, 121, 51, 35]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[21, 67, -20, -56, -88, 30, -100, 98, 15, -55, -128, -33, 90, 89, 57, 102, -121, 69, 95, 60, -11, -56, 100, -46, 72, 124, -64, -48, 79, 46, -101, -70, -51, -83, 9, -55, -115, 104, -93, 98, 77, -34, -8, -47, -91, -84, 2, 22]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey23);
        java.lang.Class<?> wildcardClass35 = secretKey23.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[56, -105, 34, 121, 95, 43, -109, -19, -59, -1, -102, -18, -56, -109, 8, 9]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-19, 73, -28, -122, -2, 4, 116, -2, 66, 71, -98, -128, 124, -101, 24, -91]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[95, 95, -98, 15, -2, 119, -92, 75, -44, 96, -113, -34, -74, 107, -11, 30]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[48, 83, -2, 17, 112, -3, -5, -77, 34, -22, 123, 86, -48, -101, -35, -66]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-83, -13, 32, 39, 62, -4, 77, 112, -113, 63, 21, -18, 28, -35, -115, -88, 123, 44, -63, -113, 44, -31, -22, 90, -28, 33, 30, -101, -61, 65, -111, 76, 95, 95, -98, 15, -2, 119, -92, 75, -44, 96, -113, -34, -74, 107, -11, 30]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-117, 120, 76, -22, 92, -128, 57, 69, 85, -38, -41, 35, 23, -121, -58, 115, -93, 1, 108, 31, -128, 21, -116, 61, 63, -120, 21, 68, -11, -111, -43, 114, 95, 95, -98, 15, -2, 119, -92, 75, -44, 96, -113, -34, -74, 107, -11, 30]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-93, -36, -32, 26, -120, 5, 35, -19, -103, 92, 36, -97, 120, -103, -114, -61, 111, 117, -56, -22, 111, -55, 49, 108, -79, 23, -59, -47, 60, 76, 68, -117, -83, -86, 29, 127, 40, 23, 127, -63, -110, 45, -37, -110, 103, 53, 88, -40, 102, 73, -107, -116, 49, -23, 28, -66, -15, -53, -18, 4, -18, -102, 115, 70, -43, 23, 6, -69, 60, 17, 88, 40, 16, -73, -65, -65, -24, -10, 27, 96, -52, 10, -109, -20, 93, -104, -50, -3, 84, -93, 94, -110, 106, -43, -6, 126, 95, 95, -98, 15, -2, 119, -92, 75, -44, 96, -113, -34, -74, 107, -11, 30]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[92, 78, 46, 105, -76, -84, 64, 68, 51, 2, -121, -20, 69, 65, 10, -26, 45, 103, -125, -19, 97, 40, -39, 13, -62, 103, -49, 98, 127, 110, 37, 95, 95, 95, -98, 15, -2, 119, -92, 75, -44, 96, -113, -34, -74, 107, -11, 30]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[119, -52, -86, -28, -42, 44, 50, -76, 9, -25, -21, -106, -36, -75, 88, 102, 37, -94, 112, -6, 98, 103, 18, -57, -3, 97, 64, 68, 98, 123, 48, 60, 86, 18, -125, 55, 105, -24, 96, 63, -80, -63, -95, 110, 34, -76, -69, 62, -22, -40, -39, -96, -24, -3, 83, -67, 85, 28, -74, -89, 20, 94, 3, -37, -88, -41, -29, 59, 64, -9, -36, 29, 93, 35, -105, -120, -54, 13, -65, 125, 101, -25, -22, 82, 76, -82, -17, 34, -45, 108, 27, 48, 70, 126, 0, -27, 95, 95, -98, 15, -2, 119, -92, 75, -44, 96, -113, -34, -74, 107, -11, 30]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[27, -104, -115, -56, 119, 78, 37, -125, -60, -106, -64, -7, 79, 95, 24, -118]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-8, 100, 13, -31, -16, -71, -95, -3, -9, -72, 90, -49, -17, -119, 111, 61, -19, 74, -103, -1, 49, 68, -46, -120, -25, -57, -80, -24, 78, 107, 64, 10, 95, 95, -98, 15, -2, 119, -92, 75, -44, 96, -113, -34, -74, 107, -11, 30]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E1967767FBCA9187364B14093D005B637DBE91B2976363574232CE85116F01D166B47891C81BDBC9F77F8848CC39E71474A928EB91D881CDF9EC4DDE7252AA9A435EE1BDE8B240F21A1D1B4FFE75996226C1CD2BD742FFA9ABCF23870D8001A51036471E38BC7ED00A707B277F1A2A85EF0F14916F4C16777ECF2D34D7B4D2FF1AF4CBBADF4C95C01B48726F27A04FD1A7B178BF9E45868E2CA232F29FFDC5E005017B2E23B8CD5D8CC1C102CC4BF9A9F32B22A9F474104BFC0E8CB9863C7DB708EF3F149A810CEEEE2FE64315F32241590357462707D8F48DC82B9D18378750266F61B97521CE0AB6AF87A58E2585C", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("3D515EE06FD2B87EB56EDD7A17F930C8C9A116BF7E8E782A6D14839A271125D9B5FC655EC15E6D8300FCA04D3C6D0FED762E5C605835DF03D21B87CED4B3E47704CCC808EE82D5B5C3794D5FA68BB5C1375AB1051056C084515BE83D5CC6B52F53A580EFF2E94059A29ED571243449A3534724152DF435FA7BD77C7FB3D7CF61936D6C263DB7E709A5FFA217F4FDF5F0A114BE8A02B9DFCB1658D1151B041BDFBE90F0F1EA0B760D1F5BB5B4602BE3377B1A950C708A014681E99D334CA283946B78169ABFAB3EA68076DD682DF557CF47210A137DD2F704594CFB5EE4E9001B3D3107A050F8E604ACFE4429DEB1AC96", secretKey5);
        java.lang.Class<?> wildcardClass10 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-108, -34, -102, 104, 37, -50, -62, -33, -95, 32, 70, -45, 1, -96, 125, 47]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("5BE3AD81AC86AE84C22517372486A489918589D0DBC7ECAED1006648A223971B966743929EA59610FAEE030703A85C3A130FCD452D9E59B914D26CD76B4FFEBB3F60CAEDC804ECE26CA0624FAA2F068C4FBE0E21DFF29A93D6EA619ED09D32C62986D8A946B45B94BB0CF5B9649A52C0", secretKey9);
        java.lang.Class<?> wildcardClass19 = secretKey9.getClass();
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-3, 70, 94, 106, 61, -105, 25, -98, -27, 86, 58, -80, 20, -93, 5, 33]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[41, 99, 58, -7, -121, 12, -93, -45, 61, -35, 24, -96, -79, 106, -111, -12]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[41, 99, 58, -7, -121, 12, -93, -45, 61, -35, 24, -96, -79, 106, -111, -12]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[102, 71, -85, -72, -40, -2, -54, -34, -108, 118, 85, 119, 59, -48, -30, 103]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-3, 70, 94, 106, 61, -105, 25, -98, -27, 86, 58, -80, 20, -93, 5, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[95, -9, -46, 124, -126, 61, -73, 17, -57, -51, 72, -49, -86, -83, 93, -46, -22, -50, -73, 37, -79, 1, 86, -71, -20, -125, -11, 44, 69, -59, 115, -117, 127, 66, 12, -32, 47, -32, -79, -51, -34, 7, -78, -37, -125, 90, 72, -41, 53, 113, 83, 97, -73, 54, 109, -7, 116, 19, -121, 102, 35, 74, 107, 115, -37, -41, -92, -34, 73, 67, -5, 8, -13, 100, 107, 26, -96, 29, 29, 28, 108, -52, -40, 8, -80, 43, 12, -26, -77, -99, 124, -18, 71, -128, -7, -49, -3, 70, 94, 106, 61, -105, 25, -98, -27, 86, 58, -80, 20, -93, 5, 33]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-3, 70, 94, 106, 61, -105, 25, -98, -27, 86, 58, -80, 20, -93, 5, 33]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-48, -93, -101, 72, 36, -23, -116, -80, 56, -120, -74, 22, -76, -102, 33, 38, -14, 100, 42, 17, -127, 30, 10, -21, 113, 83, 125, 31, 96, 115, -69, 45, -3, 70, 94, 106, 61, -105, 25, -98, -27, 86, 58, -80, 20, -93, 5, 33]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey31);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        java.lang.Class<?> wildcardClass43 = byteArray41.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-103, -87, -58, -82, -37, -91, 32, -85, 80, 13, 89, 42, -62, 64, -80, -117]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-83, -57, 48, -117, 69, -115, 6, -11, -18, -22, 117, -4, 6, -55, 122, 46]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-67, 24, -50, -93, -42, 71, 114, -114, -88, -102, 68, 72, -7, -14, -52, -13]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-122, -30, 115, 119, -126, 123, 19, 19, -7, 70, 44, 22, 10, -9, 16, 25]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-12, -40, 97, -1, 49, 58, -19, 21, 13, -26, 82, 56, -63, -61, -49, -81]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-34, 3, 42, 100, 40, -70, 116, -65, -90, -74, 26, -85, 106, 118, 50, 98]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-34, 3, 42, 100, 40, -70, 116, -65, -90, -74, 26, -85, 106, 118, 50, 98]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-43, -72, 14, 105, 44, 91, -102, 82, 50, -72, -103, -58, -13, 66, -69, -110, 30, 59, -60, 89, -108, 77, -58, 120, 90, -122, 73, -121, -77, -6, 3, -52, -12, -40, 97, -1, 49, 58, -19, 21, 13, -26, 82, 56, -63, -61, -49, -81]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-73, -9, 78, -51, -28, 41, -127, -62, -123, -16, 108, -96, -96, -119, 109, -14, -63, 65, 70, 14, 121, -106, 16, 13, -11, 21, -30, 107, -102, -50, -89, 18, -12, -40, 97, -1, 49, 58, -19, 21, 13, -26, 82, 56, -63, -61, -49, -81]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-100, -23, 26, -93, -76, -15, -45, -31, -118, 30, 86, -30, 103, 109, -14, 28, -100, 125, 81, -113, 15, 80, -13, 49, -35, 37, -102, 46, -35, 90, 23, 28, -12, -40, 97, -1, 49, 58, -19, 21, 13, -26, 82, 56, -63, -61, -49, -81]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[20, 89, 18, -125, 2, 36, -108, 12, 20, -24, 38, 125, 79, 121, -57, -18, 92, 13, -46, -81, -107, 111, 115, 12, -97, 112, 76, 82, -95, -68, -102, -9, 125, -122, -23, -88, 39, -16, 76, -128, -56, 22, 32, 30, 18, -82, -44, -58, -89, 11, -81, 33, 14, 4, 37, 116, -85, -33, -56, 6, 99, -45, 0, 42, -60, 51, -104, -89, -67, -29, 39, 105, -62, -9, 80, -35, 33, 2, 14, -127, -32, -40, -44, 123, -107, -119, 31, 80, 55, 3, -56, -46, -45, -5, 20, 94, -12, -40, 97, -1, 49, 58, -19, 21, 13, -26, 82, 56, -63, -61, -49, -81]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "7FE4EB7523729B0BFE27913E2EACA17C6625C848FD52F5DA22EB092B60DCFB83ADF34A6B5C268633D9A7F6CD3E539B6B1B9C3EDE5B674A03390532FB42BE893F5EDF520756F490A1AB10063D6E12E093CAEF258A42593AD329BDC542C581C5DDA37C304B32AE432C44739B724500C10C9C05AECA9CD8C89B670A44F8311353F9BBDD4249586DFE7B8C939676158620EA2FA2C912B89FB87FE5D14E31B0159EBBAB92CE4520822150628E7C23AF99ACA37C58BDCC0BD730BD047A70E69A38626872DDFE8DFDDAC4467F06E95C9190CA45B415F5D5BFB587B2D210027E84F64AF3D6A34FC0E75F2487C2D65EB121B1B8C775D0754A985D3C1D46AECD846EA6B198BA51D2A9440427F4F0837A0F424ABE261B789F5CD6441F7E8149FABA23E945D7E30EB083F62AB5D4A1EC2A4C7AAE673928D4A23A33F377AACFABB2ED9F5E867F6B72C11696C749173893EE7DB67D992E585485B66341036F2889EA969DB98B3507AA6DE0DE5D0CF12489BC84BD68E501F8E6FF9FD142F17A883A9165DA377C3E52E63826C1A1F824D9692A7B45DDB373B9440CD340963EC690E873B3076B86776594D7BC5D8CF93356B26570DA1D95F6B22DA030C10E690E7F10FAC53C151B8C497EAB7A44C9FAC871D9A964D24603B63DD9350D3277E41EEDE9BD7A149D3B5AF4D861FF313AED150DE65238C1C3CFAF" + "'", str42, "7FE4EB7523729B0BFE27913E2EACA17C6625C848FD52F5DA22EB092B60DCFB83ADF34A6B5C268633D9A7F6CD3E539B6B1B9C3EDE5B674A03390532FB42BE893F5EDF520756F490A1AB10063D6E12E093CAEF258A42593AD329BDC542C581C5DDA37C304B32AE432C44739B724500C10C9C05AECA9CD8C89B670A44F8311353F9BBDD4249586DFE7B8C939676158620EA2FA2C912B89FB87FE5D14E31B0159EBBAB92CE4520822150628E7C23AF99ACA37C58BDCC0BD730BD047A70E69A38626872DDFE8DFDDAC4467F06E95C9190CA45B415F5D5BFB587B2D210027E84F64AF3D6A34FC0E75F2487C2D65EB121B1B8C775D0754A985D3C1D46AECD846EA6B198BA51D2A9440427F4F0837A0F424ABE261B789F5CD6441F7E8149FABA23E945D7E30EB083F62AB5D4A1EC2A4C7AAE673928D4A23A33F377AACFABB2ED9F5E867F6B72C11696C749173893EE7DB67D992E585485B66341036F2889EA969DB98B3507AA6DE0DE5D0CF12489BC84BD68E501F8E6FF9FD142F17A883A9165DA377C3E52E63826C1A1F824D9692A7B45DDB373B9440CD340963EC690E873B3076B86776594D7BC5D8CF93356B26570DA1D95F6B22DA030C10E690E7F10FAC53C151B8C497EAB7A44C9FAC871D9A964D24603B63DD9350D3277E41EEDE9BD7A149D3B5AF4D861FF313AED150DE65238C1C3CFAF");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey3);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey12);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("60776C49AD5DF687B0C31C9B3F6A1ABA", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[118, -44, -24, -53, -46, 52, -12, -103, -69, 42, -17, -100, -57, -70, -5, 37]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[36, 14, 38, -54, 65, 31, -105, 41, -103, 28, -68, 61, 69, 71, 66, -52]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[126, -92, -39, -119, -51, -112, -30, -39, 17, 91, -41, 65, 29, 58, 121, 21, 120, 16, 50, -17, -120, 92, 122, -1, 80, -124, -109, -96, 67, -88, -45, 66, 118, -44, -24, -53, -46, 52, -12, -103, -69, 42, -17, -100, -57, -70, -5, 37]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-57, 20, 51, 70, -18, -43, 7, -74, -128, -99, -118, -71, -83, -90, 56, -18]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[102, -113, 81, -61, 96, 34, -65, -73, -97, 21, -34, -13, -95, 18, 86, -106, -47, 22, -12, -73, -69, 37, 80, 47, 97, 46, -73, -29, 121, -67, -44, -18, -53, 98, -118, 45, 58, -122, -28, 90, -64, 31, 8, -123, 13, -128, -37, -90]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-13, -80, -33, 47, -118, -13, 109, -3, 32, -9, -6, -61, -99, 81, -64, -9, -108, -86, 2, 11, 99, 87, 95, 108, -70, -34, 125, -68, 84, -69, 4, -58, -53, 98, -118, 45, 58, -122, -28, 90, -64, 31, 8, -123, 13, -128, -37, -90]");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey33);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0B3F770D0055D0086E4D5F34677807F643C52681888CF416427DA1BEF08CAF1787327C11DC64B59CF2B3E256003EC1C5DC733E5C890287207AD99467D8686ED5F4F64B8AFC0545EE2C1DCF50C4F4F9FEE0D707DBA4C46C56651B9B2B97612479DE9281D9476441CF2DE866714363BDAED9F5A8E83701A8E0F6B9F3EA7912686D326EBE4F95BB8136F84EF04DB9499A268ECF8C8E1BCAF3F95D8DE36EAB145B0A3DB211EC704215BD747BEBE3650F3A502E0A3FCC48C59869EB6466C1927E84E5A9F4C8CF836DEA5D92E25D34628563E33B6E89C7BDA68B0745F97FA99F971C7A84969C242F20003AB3BC7589946F98B", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("36EC6B46BA8F99DFC836AE9F7C1209D6232EDCA84F73A911452AACC757062A1097720CE097BB52D31EB54AF449114770", secretKey33);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey48);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey48);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey48);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-10, 31, -17, 122, 0, 12, 63, -115, -65, -87, -57, 47, 119, -73, -124, -67]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[62, 72, 53, -6, 57, -36, -102, 40, 122, -86, -107, 108, 12, -41, 60, -114]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[5, -103, -6, 69, -62, 125, 11, 126, 37, 34, -98, 69, 40, -117, 30, -125]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[121, -32, 21, 109, 3, 119, -96, 41, 123, 23, -31, -63, -122, 5, 102, 15]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[32, 81, -66, 98, -75, -109, 121, -19, -92, -102, -39, 103, 68, -70, -60, -82]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[52, -47, -72, -69, -122, -60, 82, 102, 101, 77, -46, -88, 19, 75, 121, 10, 100, 58, -124, 3, -52, -103, 7, -55, 105, -114, -45, -19, -1, 18, -103, -125, 121, -32, 21, 109, 3, 119, -96, 41, 123, 23, -31, -63, -122, 5, 102, 15]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[99, -90, 27, 42, -101, -108, -19, 100, 125, 47, -91, -33, -106, -55, 49, 42, 8, 102, 83, -46, 66, -38, 95, -17, 108, -49, -126, 74, 39, -53, 1, -127, -64, 114, 72, 76, 117, 21, -62, -105, -23, 89, 116, 116, 41, 15, 3, 16, 16, -39, 36, 59, 71, -61, 42, -96, 53, 92, -90, 71, 20, -88, 32, -12, -126, 41, 62, 58, -73, -61, 4, 17, 48, -74, 45, -117, -56, -112, -67, 4, -22, -121, -68, -4, 50, 28, 78, -99, 24, 21, 48, 105, -103, 100, -124, 64, 121, -32, 21, 109, 3, 119, -96, 41, 123, 23, -31, -63, -122, 5, 102, 15]");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-55, 63, -65, -58, 1, 6, -22, -79, 8, 78, 13, -62, -8, -52, -6, 122]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[73, 82, -2, 95, 5, -49, 103, -55, -82, 20, -115, -81, 76, -14, 122, 2]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[39, 101, 24, -47, -38, 99, -72, 64, 13, -5, -109, 93, 89, 10, 82, 107]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-55, 63, -65, -58, 1, 6, -22, -79, 8, 78, 13, -62, -8, -52, -6, 122]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[126, 21, 24, -89, -49, -98, 56, 63, -64, -5, 36, 88, 35, -90, -85, -28, 36, -28, -30, 58, -5, 75, 47, -33, 56, -69, -2, -7, 20, 83, 82, 117, -55, 63, -65, -58, 1, 6, -22, -79, 8, 78, 13, -62, -8, -52, -6, 122]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-55, 63, -65, -58, 1, 6, -22, -79, 8, 78, 13, -62, -8, -52, -6, 122]");
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey5);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey63);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey63);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey63);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey63);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey63);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[80, -63, 101, -42, -87, 109, 84, -34, -23, 32, 34, 10, 120, 2, -22, -73]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[14, 5, -32, 25, 41, 36, -21, -59, 14, -33, 83, -18, 101, 115, -123, 85]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-4, -124, -51, 112, 40, 67, 4, 31, 90, -126, 10, 58, -42, -106, -80, -86, 11, 105, 28, -10, 60, 22, -114, 87, 31, -91, -88, 24, -59, -91, 10, -56, 80, -63, 101, -42, -87, 109, 84, -34, -23, 32, 34, 10, 120, 2, -22, -73]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[68, -121, 71, 81, -11, -1, -58, 84, -16, -58, -122, 119, -93, 16, 29, 79, 16, -32, 112, 99, -115, -3, 86, -24, -71, -50, 74, -32, 116, -36, -3, 17, 80, -63, 101, -42, -87, 109, 84, -34, -23, 32, 34, 10, 120, 2, -22, -73]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[80, 104, 117, 64, 75, 21, 51, -108, -34, 47, -128, 66, 78, 80, 52, -57, -13, 107, -111, 95, 11, 99, 112, 3, 57, -113, 66, -108, 89, 85, -83, 6, 80, -63, 101, -42, -87, 109, 84, -34, -23, 32, 34, 10, 120, 2, -22, -73]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[87, 28, 86, -86, 1, 27, -108, 123, -47, -42, -86, -24, -5, 94, -14, 58]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[69, -29, 17, -96, 107, -39, -27, -49, 106, 95, 36, 22, -112, 70, 1, 67]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[22, -26, -3, -45, -98, 12, 127, 99, -62, -106, 91, 118, 113, 71, 94, -16]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[111, 116, 64, -51, 19, 78, 62, 108, 17, -101, -17, 31, 40, -22, -116, 104]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[4, -8, -91, 64, 93, -105, 5, 115, 100, 82, -126, -24, 34, -22, -120, -65]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[81, 80, -25, -37, -122, -3, 127, -42, -114, 96, -25, 20, -83, 121, 45, 48]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-122, -4, 116, -61, 65, 1, 88, 6, -37, 48, -4, 116, 125, 108, 53, -55]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[73, 120, 27, -45, -74, -44, 126, -118, 39, -66, -57, -81, -97, -9, -108, 49]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-71, 66, 92, 111, 86, -21, 91, 12, 48, -37, -111, 32, 67, 49, -128, 26]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-31, -35, 84, 108, -57, 25, 39, 118, 33, 29, 67, -63, 93, -36, -104, -39]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-42, -117, -45, 18, -11, 24, -87, -48, 71, 71, -54, -120, -62, -46, 18, -19]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-71, 66, 92, 111, 86, -21, 91, 12, 48, -37, -111, 32, 67, 49, -128, 26]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[37, -75, 49, 33, -22, 32, 3, -57, -100, 8, -47, -93, 95, 6, 99, 51, -70, 25, 72, 126, 13, 104, 4, -88, 43, -92, -87, -80, 61, 28, 21, -66, -71, 66, 92, 111, 86, -21, 91, 12, 48, -37, -111, 32, 67, 49, -128, 26]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-31, -35, 84, 108, -57, 25, 39, 118, 33, 29, 67, -63, 93, -36, -104, -39]");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey9);
        java.lang.Class<?> wildcardClass19 = secretKey9.getClass();
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-8, -115, -67, -115, 65, -27, 22, -72, -22, -109, -91, -91, -11, 75, -51, 24]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-127, 42, 19, 1, 60, 81, -80, -83, -51, -17, -85, 58, 55, -79, -40, -122]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-127, 42, 19, 1, 60, 81, -80, -83, -51, -17, -85, 58, 55, -79, -40, -122]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-112, 112, -39, 11, -57, 4, -56, 15, 60, 40, -93, -109, -77, 112, -80, -117]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-127, 42, 19, 1, 60, 81, -80, -83, -51, -17, -85, 58, 55, -79, -40, -122]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-92, 110, -43, -10, 22, 31, -28, -1, -76, -4, 101, -21, 7, 42, -89, -57, 49, -120, -29, 50, -87, 120, -58, -31, -102, -117, -83, -76, 20, 85, -106, -77, -8, -115, -67, -115, 65, -27, 22, -72, -22, -109, -91, -91, -11, 75, -51, 24]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-51, -15, -71, 53, -72, 1, -38, 41, -93, -49, -45, 33, -14, 62, -69, -45, -61, 19, 9, -82, 102, 21, 38, 85, -42, 104, -95, 31, -110, -69, 79, -33, -12, -90, -46, -63, 16, 121, 102, -105, -32, -5, 110, 80, -115, 28, -58, -91, -2, 61, 112, -64, -72, 117, 81, -7, 6, -125, 50, -101, 23, -42, -114, -99, -30, 26, 111, 47, -108, -121, -68, 123, -24, -18, -43, -15, -83, -68, 10, 83, 109, -128, -114, -79, 113, -40, 119, 16, 124, -113, 92, -123, -40, -3, 40, -61, -8, -115, -67, -115, 65, -27, 22, -72, -22, -109, -91, -91, -11, 75, -51, 24]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[124, -117, -37, -44, -110, 55, 113, 73, -90, 65, 121, 42, -54, 105, 125, 39, 49, 60, -97, -123, 38, 44, 10, -14, 97, 49, -4, -88, -124, 71, -70, 103, -27, -92, -75, -77, 86, 102, 31, -104, -128, 5, -120, 35, 42, -6, 67, 87, -66, -106, 54, -84, 39, -112, -71, -52, -91, -3, -20, -16, 115, 110, -48, -90, 45, -85, 89, -31, -64, 33, -114, 104, -15, -31, -60, 92, -69, -119, 64, 101, -71, -77, -28, 22, -21, 66, 78, -24, 39, -110, -6, 12, -56, -95, 106, 110, -8, -115, -67, -115, 65, -27, 22, -72, -22, -109, -91, -91, -11, 75, -51, 24]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey7);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        java.lang.Class<?> wildcardClass13 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[34, -116, -107, 89, 93, -37, 74, -1, -83, -31, 68, 98, 81, -94, -8, 6]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[19, -67, 97, 108, -50, -118, -116, 18, 77, -76, 23, 82, -126, 33, -78, 93]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-115, -114, 117, 79, 76, 59, -73, -63, -45, 47, -98, -54, 104, -110, 89, 68, 8, 89, -36, 1, 50, -58, 8, 27, -127, -23, 104, -84, -124, 30, 42, -69, 95, 110, 93, 79, -21, -19, -21, -86, -109, -86, -104, -28, 31, 78, -32, 62, 26, -12, -102, 9, -90, 102, -126, -11, -81, -23, -104, 56, -105, 7, -33, -33, 36, 51, -56, -9, -84, -51, 59, -110, -86, -84, -25, 117, -88, -107, -110, -78, 15, -24, 124, -72, -120, 85, 4, -21, 70, 3, 9, 90, 76, -67, -121, 37, 34, -116, -107, 89, 93, -37, 74, -1, -83, -31, 68, 98, 81, -94, -8, 6]");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8D8E754F4C3BB7C1D32F9ECA689259440859DC0132C6081B81E968AC841E2ABB5F6E5D4FEBEDEBAA93AA98E41F4EE03E1AF49A09A66682F5AFE998389707DFDF2433C8F7ACCD3B92AAACE775A89592B20FE87CB8885504EB4603095A4CBD8725228C95595DDB4AFFADE1446251A2F806" + "'", str12, "8D8E754F4C3BB7C1D32F9ECA689259440859DC0132C6081B81E968AC841E2ABB5F6E5D4FEBEDEBAA93AA98E41F4EE03E1AF49A09A66682F5AFE998389707DFDF2433C8F7ACCD3B92AAACE775A89592B20FE87CB8885504EB4603095A4CBD8725228C95595DDB4AFFADE1446251A2F806");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey42);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey42);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey42);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey42);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("71361A12256361BBCC09C90E8832C48F2E05C63EBAAB62BF2BBE83963CF6168AC7A3A108EEF7F5DE636185D0E16AF6EA", secretKey42);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey42);
        java.lang.Class<?> wildcardClass53 = secretKey42.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[88, 99, 11, -124, -42, 11, 99, 127, -17, 108, -1, -87, 26, -37, -28, -35]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-42, 111, 85, -39, -92, 11, -127, -68, 53, -43, -121, -74, 123, -67, -119, 100]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-15, -29, 125, -19, 69, -37, -21, 80, 48, -100, -99, 121, -125, -69, 49, -58]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 2, 112, 22, 12, -9, 125, -9, -127, -46, 57, 99, -57, -8, -26, 83]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-126, 54, -75, 120, 52, -74, 67, -50, -41, 39, -128, -12, -105, 31, -127, 122]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[31, 85, -24, -9, -15, -74, -70, 55, -11, -38, 17, 4, 33, 1, 5, 31]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-94, 46, 86, 73, 62, 68, -23, 58, -101, -38, -101, -64, -2, 52, 51, -15]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[13, -62, 126, 69, 111, -118, 98, 52, 102, -20, -64, -84, -22, -31, -118, 90]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[113, 98, -108, -94, -54, 71, -47, -12, -109, -99, 82, -119, 38, -50, -17, 115, -3, 57, -18, 84, -29, 48, 44, -92, 14, 64, 50, 41, 69, -18, 68, -59, -94, 46, 86, 73, 62, 68, -23, 58, -101, -38, -101, -64, -2, 52, 51, -15]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-49, 23, 104, 87, -39, 92, -49, 77, -41, -88, -20, 47, -54, 78, -9, -59, -2, -22, 97, -34, -109, 33, -87, -86, -28, 59, 10, 98, 25, -13, 35, 80, -94, 46, 86, 73, 62, 68, -23, 58, -101, -38, -101, -64, -2, 52, 51, -15]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[103, -21, -107, 101, 125, -23, -62, 26, 62, 10, 5, -53, 0, -46, 63, 65, 29, -3, 39, -92, -84, -100, 38, -93, 33, 107, -62, -41, -91, 97, 43, 118, -94, 46, 86, 73, 62, 68, -23, 58, -101, -38, -101, -64, -2, 52, 51, -15]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-31, 127, 42, -92, 32, -68, -106, -66, -112, 100, -107, -42, 44, 80, -16, 48, -52, -48, -102, 105, -40, 60, 38, -96, -34, 99, 19, 125, -119, -21, -86, -103, -39, -71, 41, 113, -68, 30, -118, -79, 43, 81, -72, -71, -120, 72, -94, 115, 124, -13, -105, 75, -35, -67, -47, 42, -79, -113, 95, -116, -21, 69, -112, -128, 17, 63, -89, -23, -7, 102, -61, -52, -30, 10, -12, -97, 27, 121, 20, -41, 28, 24, 3, -30, 112, -89, -109, -68, 80, -122, -61, -59, 38, 6, 111, -99, -94, 46, 86, 73, 62, 68, -23, 58, -101, -38, -101, -64, -2, 52, 51, -15]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-3, -28, -45, 71, 118, 104, -90, -43, 60, 83, 92, -127, 113, -99, 98, -48, -36, -65, -61, 24, 14, 39, 39, -65, 55, -14, -78, -3, 53, -45, -111, -27, -94, 46, 86, 73, 62, 68, -23, 58, -101, -38, -101, -64, -2, 52, 51, -15]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey21);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey51);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-104, -66, -92, -114, -93, 65, -68, -55, 30, -111, 107, -29, -124, 29, 126, -34]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-76, -118, -25, 20, 123, 70, 85, -5, 99, 15, -50, -12, 43, -45, 17, -118]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-34, 44, -5, -21, -102, -66, 108, 29, 48, -51, -36, -61, -21, 108, 124, 78]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[49, 62, -48, 99, -67, 7, 119, 63, -124, -52, 87, 112, -92, 60, 19, -77]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[90, 107, -105, -82, 17, 46, -93, -75, 114, 16, -6, 103, -97, 68, -108, -95, -60, 21, 35, 10, -113, 22, 104, -34, 26, -109, -48, 125, 22, -23, 56, -45, -34, 44, -5, -21, -102, -66, 108, 29, 48, -51, -36, -61, -21, 108, 124, 78]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-12, 72, 56, -110, 7, -67, 15, -30, 54, -47, 43, 105, 67, 114, -125, -58, -43, -47, 17, 87, 71, 55, -85, -106, 50, 24, 26, 123, 118, -42, 21, -110, -34, 44, -5, -21, -102, -66, 108, 29, 48, -51, -36, -61, -21, 108, 124, 78]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, 0, 13, -119, -31, -7, -121, -30, -26, -119, -96, -46, -58, -12, 47, 108, -25, -102, 66, -10, -77, -106, -27, -50, 23, -21, -18, -23, 32, -4, 119, -51, -63, -45, -5, -40, 71, 78, -23, 84, -117, 28, 88, -35, -46, 12, 37, -100, 116, -64, -50, 39, -61, 67, -95, 123, 37, -72, -5, 120, -61, 126, 67, 55, -109, -119, 5, -42, 11, -62, -37, -51, 82, 54, 75, -128, -18, -107, -79, 20, -22, -70, 10, 33, -46, -123, 87, 47, 100, 89, 54, -106, -12, -80, -78, 44, -34, 44, -5, -21, -102, -66, 108, 29, 48, -51, -36, -61, -21, 108, 124, 78]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-29, -94, -32, 108, 26, -60, -66, 115, -4, -46, -15, 6, 88, 58, 120, -22, -82, -120, 71, -99, 32, 76, -111, 60, -63, -112, -27, -63, -72, -55, -127, -119, -103, -3, -111, -86, -94, -96, 102, 105, -101, -40, -36, -33, 100, 95, -37, -27, -110, -117, -103, -72, -56, 104, 17, 104, -109, 6, -66, -4, -112, 119, -86, 100, 0, 71, -14, 86, -27, 118, 7, -64, 99, -122, 22, 45, -57, -32, 9, 44, -10, -100, 111, -80, -118, 126, 4, -69, -53, 75, -67, -77, 41, 63, 31, -80, -34, 44, -5, -21, -102, -66, 108, 29, 48, -51, -36, -61, -21, 108, 124, 78]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, -12, -23, 124, -3, 3, -74, -21, 98, -76, 13, -38, -48, 110, 105, -33, 78, 3, 26, 18, -71, 96, 107, 83, -47, 40, 5, -46, 87, -99, 84, -84, -34, 44, -5, -21, -102, -66, 108, 29, 48, -51, -36, -61, -21, 108, 124, 78]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -97, 56, 78, -15, -51, 70, 50, 33, -84, -61, 21, -73, 101, -93, 56]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[44, -47, -13, 109, -7, 61, 105, 98, 75, -107, -42, -50, -72, 127, -61, -22]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[122, -73, -8, 95, 114, -91, -43, -53, 76, -13, -22, 123, 98, 52, -17, -115]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-9, 11, -38, 32, 30, -18, -49, -58, -62, 115, 104, -64, 35, -39, -88, 55]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-46, 8, -78, 48, -72, -78, 27, 47, 70, 94, 19, -99, -80, -94, -73, 6, -44, -18, 118, -87, 60, 42, -20, -121, -117, 27, 74, 25, 63, 58, 47, -44, 122, -73, -8, 95, 114, -91, -43, -53, 76, -13, -22, 123, 98, 52, -17, -115]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[122, -73, -8, 95, 114, -91, -43, -53, 76, -13, -22, 123, 98, 52, -17, -115]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-9, 11, -38, 32, 30, -18, -49, -58, -62, 115, 104, -64, 35, -39, -88, 55]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[118, 14, 21, -45, 113, -59, -53, -39, 67, 37, 109, -126, 10, 70, -34, -109, 19, 30, 21, 33, 122, 111, 112, 48, -75, 44, 99, 118, 70, -59, 59, -106, 122, -73, -8, 95, 114, -91, -43, -53, 76, -13, -22, 123, 98, 52, -17, -115]");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("A806314C2CB9A1372FCCEFFD537245BAC9B3C26325CA91795027727BD073D1D14C6498FF249C796B64DB7EF9C11DB53A", secretKey19);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[43, 109, -115, -108, 62, 106, 117, -52, 76, 123, -35, 19, -111, 91, -49, 99]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, -90, -6, -15, -96, -100, -59, 85, -87, 28, 78, -68, -77, 71, -38, 37]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-84, 95, -102, 101, -3, 75, -102, 38, -40, -75, -21, 17, 16, -95, -27, 77]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[93, -16, -95, -97, 22, -60, 111, 80, -44, -125, -66, 45, -109, -37, 35, -15]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-79, -96, 43, -85, -105, -114, 126, 96, -51, -18, 24, 64, 80, 34, -44, 31, -108, -47, 2, 22, 108, -121, -51, -48, 98, -92, -120, 80, -101, -58, -120, 121, -84, 95, -102, 101, -3, 75, -102, 38, -40, -75, -21, 17, 16, -95, -27, 77]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-79, -96, 43, -85, -105, -114, 126, 96, -51, -18, 24, 64, 80, 34, -44, 31, -108, -47, 2, 22, 108, -121, -51, -48, 98, -92, -120, 80, -101, -58, -120, 121, -84, 95, -102, 101, -3, 75, -102, 38, -40, -75, -21, 17, 16, -95, -27, 77]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[120, -42, 96, -58, -98, 107, 117, 39, 53, 122, 96, 54, 18, 60, -15, 26, -76, 61, 15, -3, -23, 107, 76, -96, 77, -46, 59, -11, -83, 124, -2, 35, 99, -41, -59, 36, 12, 44, -6, -110, -76, 61, 27, -2, 41, 57, -62, -58, -103, -88, -72, -22, -62, -63, -122, -42, 57, 64, 41, 19, 87, -52, 93, 102, 91, -7, -28, 86, 65, -49, 92, 71, 66, -33, -13, -46, -90, 11, -30, 121, -1, -69, -77, -38, -24, -34, 121, 112, -66, 112, 25, -34, 127, -5, -6, 92, -84, 95, -102, 101, -3, 75, -102, 38, -40, -75, -21, 17, 16, -95, -27, 77]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("2D448606FF59F76CCE760600D625BD3C92E51738D5D34B98EBBB61ABC9DFBCD7B5243C0677C07802A9880D5601319C43", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[108, 122, 104, -77, 11, 28, -10, -23, -65, 29, -86, 117, -92, 74, 46, 81]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-62, 112, 118, 52, 103, -35, -90, 12, 92, -97, -72, -72, -35, -25, -103, -77, -68, 25, -23, 98, -58, 21, 72, -6, 70, 5, 94, -115, -41, 88, 118, 111, 96, -31, -19, 33, 125, -105, 35, -48, -72, 58, 7, -81, 78, -87, 20, -27]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "C270763467DDA60C5C9FB8B8DDE799B3BC19E962C61548FA46055E8DD758766F60E1ED217D9723D0B83A07AF4EA914E5" + "'", str25, "C270763467DDA60C5C9FB8B8DDE799B3BC19E962C61548FA46055E8DD758766F60E1ED217D9723D0B83A07AF4EA914E5");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[23, 104, 116, -100, -95, 7, 10, -119, 34, 96, 87, -123, 70, 55, -103, 24]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[78, -100, -59, -4, -67, 23, -91, -108, 54, -85, -42, -74, 124, -102, 104, 120]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[78, -100, -59, -4, -67, 23, -91, -108, 54, -85, -42, -74, 124, -102, 104, 120]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-59, 81, -59, 51, 23, 85, 24, 89, 79, -10, -43, 82, 105, -111, 101, -66, -39, -50, 116, -85, 3, 20, -51, 64, 66, -91, 12, -112, 67, 14, -47, -122, 120, -64, 121, -128, 83, 89, 47, 77, -48, -28, -110, 12, -88, 54, -39, 80, 48, 38, 66, 30, -125, 42, 46, -50, -87, 17, -123, -9, 43, -20, 55, -11, 38, -43, 112, -98, -54, -110, 43, 70, 61, -111, -34, 29, 127, 125, -34, -40, -61, 7, 35, 76, -105, -13, 15, -117, 44, 118, -104, 122, -37, -2, -46, 118, 23, 104, 116, -100, -95, 7, 10, -119, 34, 96, 87, -123, 70, 55, -103, 24]");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B94B61F93519A201D7C95E222E2DBEBC4F107D1A1FB6C3A0A56E673AB14FB317A106FCD4715B05A1BB4717AE5BC9518DB5EA396FE16503B22B3171CD2210916C33ECD463AA688E462178E59BF97955920F577D5DDB84DFE758C97264EC0EA59EC51ED8EE03C95865298C626D9DA71B7A", secretKey21);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey55);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey55);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey55);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey55);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey55);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey55);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey55);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey55);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[115, 21, 123, 34, 27, -124, -104, -47, 12, 79, 28, -7, 83, -70, 94, 20]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-17, 69, -27, -122, 11, 104, 47, 97, -87, 67, -119, -124, 71, -122, -14, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[111, 58, -14, -37, 118, 74, 24, -127, -34, 69, -15, -16, -81, -22, 12, -23]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-27, 63, -100, 41, 118, 107, 105, -94, 24, 41, -21, 11, 101, 48, -3, -16]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[29, 69, 91, 104, 78, -68, -92, -3, 86, 10, -107, 71, 20, -53, -34, -8, 71, 83, 96, -128, 94, 97, -12, -97, -127, -87, 108, 79, 28, 116, -22, -74, 111, 58, -14, -37, 118, 74, 24, -127, -34, 69, -15, -16, -81, -22, 12, -23]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-122, 61, 66, -102, 0, -20, 111, -91, 38, 50, 36, -4, 96, 104, 28, -17, 55, -72, -7, -50, 65, 94, -30, 84, -28, 40, 78, -50, 11, 4, 17, -107, 111, 58, -14, -37, 118, 74, 24, -127, -34, 69, -15, -16, -81, -22, 12, -23]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[12, -6, -46, -107, -36, -81, 3, -51, 88, -24, 34, -6, 99, 16, -44, 43, -95, 95, 17, -10, -104, -98, -57, -56, 77, -81, -92, -107, -76, -46, 63, 86, -22, 121, -73, -97, -46, 8, 123, -50, -111, 54, -122, -51, 31, 29, -99, -72, -43, 124, 90, -68, -6, -1, 6, 85, -71, 3, -25, 42, -43, -109, 15, -90, 80, 122, -88, -31, -26, -11, -9, 14, -4, -99, 81, -39, -76, -112, 108, 68, 23, 19, 41, 6, -93, -97, 68, -18, -48, -128, -56, -31, -19, -56, 91, -10, 111, 58, -14, -37, 118, 74, 24, -127, -34, 69, -15, -16, -81, -22, 12, -23]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122, 61, 66, -102, 0, -20, 111, -91, 38, 50, 36, -4, 96, 104, 28, -17, 55, -72, -7, -50, 65, 94, -30, 84, -28, 40, 78, -50, 11, 4, 17, -107, 111, 58, -14, -37, 118, 74, 24, -127, -34, 69, -15, -16, -81, -22, 12, -23]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-14, -42, -4, -71, 121, -70, 124, -18, 73, -12, -81, 81, 117, 26, -54, 70]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[84, -4, -79, -47, 103, 0, -90, -42, -15, 100, 75, -27, 118, 74, -46, -18]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[76, 75, 26, -26, -27, 119, 0, 58, -72, -35, -114, -125, -15, -2, 96, -23]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-106, -82, -86, -117, 77, 5, 100, -66, 100, -37, -62, -40, 98, -68, -115, -82]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[54, 76, -101, -75, 61, 72, 75, -116, 16, 53, -76, -7, 52, 0, -82, -106, -69, -42, 3, -85, -24, 73, -60, 82, 38, -50, -104, 89, 96, 5, 113, -18, 76, 75, 26, -26, -27, 119, 0, 58, -72, -35, -114, -125, -15, -2, 96, -23]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[66, 65, -35, 102, -107, -34, 13, 32, -41, 122, 18, -108, -37, -104, -24, 109, 12, 101, -59, 69, 95, -55, -126, 84, -98, -54, 106, 83, -61, 116, 97, 37, 76, 75, 26, -26, -27, 119, 0, 58, -72, -35, -114, -125, -15, -2, 96, -23]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[99, -113, 113, -125, 71, -94, 59, -85, 5, -16, 83, -29, -22, -44, 62, 67, -74, -59, -57, 70, 113, -47, -66, 91, 59, -127, -59, 29, -96, -115, -95, 77, 3, -52, -30, -11, 35, 88, -27, 115, -25, 100, 0, 90, 4, 40, 59, -90, -8, -78, 3, 10, -73, 48, -16, -90, -11, 0, -25, 81, -17, -20, 22, 1, -59, 114, 111, -68, -63, 85, -60, 122, 124, 116, -59, 11, 66, 98, -97, -59, 73, 58, -92, 58, -50, 74, 48, 19, 77, -92, 43, 51, 20, -30, 109, 111, 76, 75, 26, -26, -27, 119, 0, 58, -72, -35, -114, -125, -15, -2, 96, -23]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-70, 124, -68, -116, 114, 16, 102, 106, -75, 68, -90, 77, -97, 104, 97, -109, 121, 20, -25, 123, -32, 53, -112, 87, -12, 115, -6, 91, -27, -122, -86, -68, -126, 34, 82, 76, 92, -63, -40, -56, -5, -75, -56, 93, 23, -16, -125, -34, 91, 62, -50, -72, -44, 117, 18, 110, 14, -73, -1, -112, 126, -34, -64, -116, -2, 117, 108, 26, 24, -30, -33, -117, 116, -4, 83, -57, 95, -71, 104, 67, 98, -66, -6, 64, 35, -64, -113, -69, -104, -124, 11, -13, 117, 86, -128, -76, 76, 75, 26, -26, -27, 119, 0, 58, -72, -35, -114, -125, -15, -2, 96, -23]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[76, 75, 26, -26, -27, 119, 0, 58, -72, -35, -114, -125, -15, -2, 96, -23]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-66, -117, 79, 77, -123, -29, -35, 40, -15, -116, 48, -100, -24, -111, 92, 47, 67, -12, 70, -62, -84, -7, -124, 82, 118, -83, -2, 101, 77, 105, 37, -82, 76, 75, 26, -26, -27, 119, 0, 58, -72, -35, -114, -125, -15, -2, 96, -23]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-99, 6, 7, -87, -30, 99, -120, 63, -42, -101, -29, 76, 40, -116, -2, 117, 105, 73, -65, 32, -78, 8, 94, 54, 37, 124, -32, -6, -31, 16, 19, -82, 25, -60, -5, 1, 70, 18, -35, -2, -121, 106, 9, -127, 101, 50, -59, 108, -3, 114, 4, 82, -75, 107, 13, 73, 68, -79, -34, 38, -87, 58, -121, -100, -117, -57, 127, 26, -21, -53, 105, -5, 126, -44, -124, -88, -90, 92, -15, -38, -52, 8, 43, -48, 16, 61, -99, 85, 115, -61, 32, 77, 54, -27, 34, 23, 76, 75, 26, -26, -27, 119, 0, 58, -72, -35, -114, -125, -15, -2, 96, -23]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[50, -83, 33, 122, -116, -112, -115, -92, 73, 71, -95, 49, 112, -98, -47, -120, 98, -71, -38, 5, 47, 45, -109, 41, 123, -120, 72, -75, 39, -54, -33, 50, 76, 75, 26, -26, -27, 119, 0, 58, -72, -35, -114, -125, -15, -2, 96, -23]");
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("08DC12D9E6A5214898677E15A6451D6313D4B28A9D6BF0997D27726BE7B2D07623B6D106FC32C527EFFC8346C4560091BFCCBBF0CC4DAF4E4E78571684EF855D7220ACD40569F179CDE5A000DDB612EC286F985DFA61EBE426A74075BF31AE8F7018B3497265C7A7BBFEA264D32B5C75E6410A94526F0960614075FF15988D7B2F01CE83A08EE772A47D564F4B3D9874CB2BCC73E4D1BC8BD40BADCF9E361FA2D4D6D4B494C90361FCEF250E7D59B6AF91B67BBE408523A69CA6BF86A0FBA337F311A19B76A339983B1703B89596745AF1D940F9D6E930BD4F1E7C466C9310680440217468EEB032F1255538DA6405CA", secretKey7);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey36);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey36);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey36);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7FA568134806C9105C34D583C29871A41AE5CE04D352F794BBBC55C17CC3D7B2E48B2428828EE039A91A06CFBF22DBA03F23A99544AD69867843E16A8BBCB065F997601695DCE4DA9232998E7CFA9275FD14E9B5BE58653BB989CC8C93C323B9A2602029745C486376259619FE42C1DC969C5F23218132538C69A93E2C46029CAFBCB3A325C55A351897A58F95136EEE2494FA973744222FA873EEAD1E15360A868A656A3C665D51EC62012BA7C41A8A5BF8AD314E65E180BA4087E8D6B89D6623982F2B436A6758077463A37F0FFC47E55DE5DFB67D8B3F67F9F6BD7C9678E01B5950A89DB569E40DEBF8146983CC8", secretKey36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey36);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-110, -85, 64, -48, -24, 97, 111, -108, 27, 50, 79, -69, -68, -60, -53, -26]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[33, -10, 34, 83, 25, 24, -109, 70, 31, -78, -122, -85, 3, -124, 47, -76]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-22, 57, -4, -45, -47, 7, -127, 99, -77, -36, -57, -23, 112, -108, -100, -40]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-110, -85, 64, -48, -24, 97, 111, -108, 27, 50, 79, -69, -68, -60, -53, -26]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, -83, 108, 108, -41, 84, -66, -19, -90, 89, -99, 105, 51, -109, 109, -35, -54, -6, 122, 30, -120, -36, -82, -111, 54, 93, 60, -56, 17, 45, 88, -38, -110, -85, 64, -48, -24, 97, 111, -108, 27, 50, 79, -69, -68, -60, -53, -26]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-96, -44, 30, -113, -51, -6, -119, 113, -102, 29, 121, 18, 26, -103, 73, -78, -107, 74, -70, 74, 32, -11, -128, -81, -112, -82, -68, -75, 85, 10, 53, -22, -110, -85, 64, -48, -24, 97, 111, -108, 27, 50, 79, -69, -68, -60, -53, -26]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-49, -128, 127, 68, 6, -128, 64, -26, -7, -100, 77, 109, 70, -13, 39, 103]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-27, 118, 96, -84, -37, 23, -83, -121, -33, -28, 5, -89, 32, 61, 90, 58]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[67, -105, 6, 110, 97, 85, 67, 45, -59, 70, 82, -107, -1, 49, -71, -128]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-109, -58, 110, 125, 100, 55, 27, -17, 100, 77, -120, -127, -12, 122, 118, -28]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[116, -35, -46, 84, 62, 89, 18, -46, 126, 13, 122, -128, 88, -7, 123, -54, 42, -65, 63, -4, -79, -64, -92, 4, -99, -21, -68, 82, -29, -124, 117, 117, 67, -105, 6, 110, 97, 85, 67, 45, -59, 70, 82, -107, -1, 49, -71, -128]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-50, 39, -110, 72, -122, 66, -18, -20, -14, 39, -15, 47, -73, 37, 34, -81, 15, 42, 100, -6, -75, 64, -13, -111, -76, -40, 121, 90, 46, -80, 65, -96, 67, -105, 6, 110, 97, 85, 67, 45, -59, 70, 82, -107, -1, 49, -71, -128]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[118, 31, -12, 58, -123, 55, 109, 59, 0, 117, -121, -117, -68, -89, -2, 111, -98, 71, 37, -45, 20, 117, -60, 98, -71, -3, -116, -36, 79, 44, 41, -4, -108, -2, -71, -127, 42, 125, -56, 63, -10, -10, -46, 108, 114, -40, 103, 96, 94, 111, 48, -97, -102, -100, 94, 44, -9, 51, -95, -62, 41, 56, -69, -9, -67, -13, 51, 77, -111, 79, -62, -37, -54, -96, 36, 82, 82, 75, 75, 88, -34, -37, -62, -61, 2, 118, -20, 30, -39, -38, 62, -53, 20, -78, 97, 77, 67, -105, 6, 110, 97, 85, 67, 45, -59, 70, 82, -107, -1, 49, -71, -128]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[118, 31, -12, 58, -123, 55, 109, 59, 0, 117, -121, -117, -68, -89, -2, 111, -98, 71, 37, -45, 20, 117, -60, 98, -71, -3, -116, -36, 79, 44, 41, -4, -108, -2, -71, -127, 42, 125, -56, 63, -10, -10, -46, 108, 114, -40, 103, 96, 94, 111, 48, -97, -102, -100, 94, 44, -9, 51, -95, -62, 41, 56, -69, -9, -67, -13, 51, 77, -111, 79, -62, -37, -54, -96, 36, 82, 82, 75, 75, 88, -34, -37, -62, -61, 2, 118, -20, 30, -39, -38, 62, -53, 20, -78, 97, 77, 67, -105, 6, 110, 97, 85, 67, 45, -59, 70, 82, -107, -1, 49, -71, -128]");
        org.junit.Assert.assertNotNull(byteArray45);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-38, 70, 38, 70, -85, -16, -109, -124, 60, 92, 109, -85, -117, 74, 116, -110]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-90, -87, 1, 31, 27, -94, -86, 125, 60, 102, 89, -70, -14, 89, -47, -60]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-41, 83, -22, 9, 24, 98, 88, -56, -30, -94, 7, 102, -98, 49, 59, -27, -62, -105, 112, -119, 76, 4, -27, 78, -3, -28, 89, 1, 26, 114, -88, 37, -38, 70, 38, 70, -85, -16, -109, -124, 60, 92, 109, -85, -117, 74, 116, -110]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[49, 114, 81, 45, -26, -84, -10, -113, 77, -109, 114, -104, -54, -31, 54, -113, 100, -120, 65, 75, -79, -53, -48, -40, -76, -100, 51, -42, -13, -90, -29, 60, -38, 70, 38, 70, -85, -16, -109, -124, 60, 92, 109, -85, -117, 74, 116, -110]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey25);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey25);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey25);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey25);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        byte[] byteArray55 = new byte[] {};
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray55);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey57);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey61);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey61);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey70);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey70);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey70);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey70);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey70);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey70);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey70);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey70);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey70);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey70);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[8, -82, -76, -127, 3, 75, 104, 20, 30, 92, 39, -51, 105, 109, 47, -31]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[108, 13, -61, 42, -103, 13, 4, -123, 9, 10, 105, -27, -61, -83, 50, -114]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-128, 112, -24, 64, -42, -12, -33, -2, 37, 111, -3, -104, 43, 103, -21, 109]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-25, -50, -54, 85, 17, -81, 44, 126, -98, -71, 12, 91, 65, 68, -103, 22, -64, -71, -102, 72, -69, -58, 85, -5, 126, -116, -12, -107, -32, 33, 112, 117, 78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[38, -61, -28, -1, -123, 38, -19, 58, 120, -81, -50, 124, 3, 109, 68, -77, 11, -73, 14, -52, 13, 115, -108, -93, -19, 68, -34, 10, -23, 86, 12, 40, 78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[97, 20, -75, 72, -31, 28, -31, 57, 79, 68, -79, -60, -60, -121, 85, 0, -43, 71, 118, 120, 114, -43, -28, 42, -21, 80, -81, -46, 27, -78, 82, -58, 66, -22, 81, 40, 15, -38, 119, -89, -66, -89, -24, -12, -121, 123, -34, 26, 73, 111, -36, -72, -104, -112, -115, -26, 127, -87, 101, -17, 108, 7, 12, -21, -111, -82, -126, -22, 108, -58, 9, -125, 73, -45, 72, -12, 84, 78, 9, -67, 64, -33, -81, -25, 112, 95, 65, -49, -108, -126, -4, 57, 91, -94, -40, 119, 78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[83, 76, -48, 117, 0, 113, -68, -24, 26, -75, -110, 78, -127, -82, -44, -98, 97, 44, -46, -43, -12, -68, 72, 91, -84, -48, -99, 37, 117, -32, 92, 65, 53, -9, -54, -70, -123, 66, -50, -84, -41, -56, -53, 81, 39, -56, 51, 115, 119, 85, -105, 5, 73, 81, 42, 5, 0, -32, 37, -15, 67, -89, -125, 5, -31, 6, 77, -126, 66, -37, 115, 96, -11, -56, 88, 31, -32, 71, -2, -62, 122, 116, -8, -37, 28, -34, -13, -127, 57, -58, -54, 106, 122, 16, -107, -12, 78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-24, 103, 2, -38, -64, -78, -3, -57, -54, -95, 62, -91, -118, 58, 106, -60, 35, 106, -7, -11, -93, -71, -103, -98, 43, 112, -32, -11, 49, 85, 123, -12, 78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-113, 117, -90, 1, -81, 48, -64, -96, 67, 49, -54, 44, -59, -11, -111, -72, 58, 93, 113, -26, -122, -4, 112, 45, 84, -56, -128, 100, -23, 66, 48, 100, 101, -69, -1, 44, -50, 125, -127, -125, -67, 13, 106, 107, -1, -81, 64, -62, -112, -82, -81, -10, -26, -38, 30, 111, -93, -24, -58, -75, 25, 118, 40, -117, 48, 88, -125, 93, -70, -16, 117, 125, -99, 55, 121, 113, -87, -4, 27, -18, 50, 92, -28, 42, 39, -70, 58, -51, -88, -120, -70, 123, -87, 102, -107, -125, 78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[77, 98, 30, -26, -115, -114, -28, -27, -122, 70, -74, 108, -91, 26, -91, 121, 72, 42, -11, -83, 116, -15, -7, 69, -71, -100, 17, -28, -121, 25, -20, -118, 78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-45, -59, -45, 51, -45, 16, -100, -17, -54, 19, -34, 49, 28, 18, 61, 117, -72, -31, -34, 96, 90, -4, -19, -118, 91, 14, -92, 64, 88, -99, -89, -83, 78, 54, 3, 31, -119, -118, 59, 106, -39, 67, 70, -119, -55, 98, 126, 57]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[96, 47, 94, -125, 51, -2, -120, -98, -104, -36, -28, -31, 69, 11, -90, 48]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-95, -125, 123, -105, -100, 87, 61, -29, 114, -17, 12, -98, 7, -12, -94, -63]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[14, -122, -34, -95, 31, 115, -28, 106, 11, -38, 38, -108, -49, 118, -36, 68]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, -44, -56, 105, 63, 119, 18, -8, 14, 109, -111, 17, -82, 2, -67, -113]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-96, -127, 16, -77, 89, 3, -117, -97, 51, -84, -98, 110, 23, -80, 13, 58]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-67, -7, -58, 37, 123, -78, 10, 2, 40, 114, 115, 10, 61, 99, 98, -113]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-67, -7, -58, 37, 123, -78, 10, 2, 40, 114, 115, 10, 61, 99, 98, -113]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-10, 6, 69, -95, -124, -27, -40, 20, 58, -26, 122, -1, 94, 49, 123, -109, -30, 64, -66, -91, 103, 103, -87, -86, 22, 26, 26, 111, -10, 81, 108, -41, -96, -127, 16, -77, 89, 3, -117, -97, 51, -84, -98, 110, 23, -80, 13, 58]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[57, 111, -52, 95, -22, 19, 34, -62, -66, -68, 6, -78, -84, 43, -42, 117, -123, -12, -10, -90, 81, 6, 3, 81, 63, 41, 107, 38, -117, -119, 117, -63, -96, -127, 16, -77, 89, 3, -117, -97, 51, -84, -98, 110, 23, -80, 13, 58]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[4, -124, -47, 49, 27, 90, 83, 42, -52, -58, -31, 112, 117, 120, -87, -113, -64, 126, -5, 67, -123, -12, 101, 101, -37, 36, 99, 54, 19, 105, -10, -105, -96, -127, 16, -77, 89, 3, -117, -97, 51, -84, -98, 110, 23, -80, 13, 58]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-91, -3, 49, -83, -69, 50, -79, -25, 107, -95, 124, -36, 44, -86, -108, 81, -127, 82, -90, 98, -61, 127, -82, -104, -27, 97, 121, -35, -55, -78, 21, -73, 127, 92, 1, -76, -61, -26, -116, 10, -73, 103, 90, 66, 87, 89, -15, -18, -2, 62, 39, 45, -45, -10, 72, -50, 88, -67, 2, 110, -23, 88, 101, -104, 85, -123, 52, -103, -63, 58, -33, 67, -61, 3, 113, -90, 127, 73, -15, 36, -118, -40, 80, -81, 1, 94, -85, -92, -101, -2, -85, -124, 38, 47, 29, -81, -96, -127, 16, -77, 89, 3, -117, -97, 51, -84, -98, 110, 23, -80, 13, 58]");
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey32);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey32);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[119, -50, -19, -7, -72, -121, -88, -7, 82, 76, 97, 16, 61, 111, 77, -59]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-8, 105, 39, -6, -54, -80, -106, -2, 90, -94, -53, 67, -85, -104, 16, -63]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-20, -100, 116, 42, 83, 84, -53, -43, 51, 42, 24, -51, -111, 85, -114, 3]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[63, -68, -3, 125, 48, -101, 104, -25, -92, -87, 54, 7, -95, -69, 91, -23]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-29, -61, -23, -113, 32, 41, -74, 51, 104, -75, -103, -83, 109, -47, 94, -37, 22, -18, 97, -29, 41, 6, 16, 73, -100, 117, 79, 66, -35, -81, -66, -34, -20, -100, 116, 42, 83, 84, -53, -43, 51, 42, 24, -51, -111, 85, -114, 3]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[118, -38, 125, -48, 46, -70, 51, 13, -124, 58, -95, -7, -94, 119, 84, -30, -62, 92, -87, -124, 96, 48, -17, -116, -116, 25, 34, 39, 30, -81, -62, -61, -20, -100, 116, 42, 83, 84, -53, -43, 51, 42, 24, -51, -111, 85, -114, 3]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "76DA7DD02EBA330D843AA1F9A27754E2C25CA9846030EF8C8C1922271EAFC2C3EC9C742A5354CBD5332A18CD91558E03" + "'", str25, "76DA7DD02EBA330D843AA1F9A27754E2C25CA9846030EF8C8C1922271EAFC2C3EC9C742A5354CBD5332A18CD91558E03");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "76DA7DD02EBA330D843AA1F9A27754E2C25CA9846030EF8C8C1922271EAFC2C3EC9C742A5354CBD5332A18CD91558E03" + "'", str26, "76DA7DD02EBA330D843AA1F9A27754E2C25CA9846030EF8C8C1922271EAFC2C3EC9C742A5354CBD5332A18CD91558E03");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[74, 46, -31, 41, 46, 87, -79, 122, -64, -34, -34, 94, -65, 35, -119, 74]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[39, 51, -80, -86, -51, -115, -6, 3, -56, 4, 102, -28, 11, 123, 123, -30]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[84, 43, -71, -121, -103, 80, 47, -9, 78, 116, 80, -111, 47, -13, 63, -34, -127, -41, 72, 25, 40, 3, 44, -6, 16, -121, -26, -39, 32, -52, 109, 123, 74, 46, -31, 41, 46, 87, -79, 122, -64, -34, -34, 94, -65, 35, -119, 74]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[98, -53, -107, -19, 29, -122, 48, 24, -68, 5, -39, -63, 80, 102, 124, 75, 47, 36, -21, 56, -102, -109, -59, -7, 51, 100, 88, -73, -16, 106, 46, 99, 74, 46, -31, 41, 46, 87, -79, 122, -64, -34, -34, 94, -65, 35, -119, 74]");
        org.junit.Assert.assertNotNull(byteArray37);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey33);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("B94B61F93519A201D7C95E222E2DBEBC4F107D1A1FB6C3A0A56E673AB14FB317A106FCD4715B05A1BB4717AE5BC9518DB5EA396FE16503B22B3171CD2210916C33ECD463AA688E462178E59BF97955920F577D5DDB84DFE758C97264EC0EA59EC51ED8EE03C95865298C626D9DA71B7A", secretKey33);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey33);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-32, -89, 122, 98, 18, 78, -89, 76, -111, 49, -114, -50, 92, -10, 66, 41]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[91, 69, 31, -81, 88, -89, 107, 41, -84, -37, 98, 123, -105, -24, 11, 35]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[91, 69, 31, -81, 88, -89, 107, 41, -84, -37, 98, 123, -105, -24, 11, 35]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-32, -89, 122, 98, 18, 78, -89, 76, -111, 49, -114, -50, 92, -10, 66, 41]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-32, -89, 122, 98, 18, 78, -89, 76, -111, 49, -114, -50, 92, -10, 66, 41]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[53, 60, 38, -6, 91, 102, -126, 14, -103, 0, -96, -96, 73, 96, -17, -97]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-85, 16, 108, -117, 58, 10, 37, -105, 111, 21, -23, -23, 21, 51, -100, -97]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-48, -7, 61, 67, 67, 6, -78, 87, -16, -52, -30, 93, 92, -105, -18, 23]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-109, -24, -37, 57, -100, -35, 0, -80, 58, -61, 38, 102, -15, 19, 19, 89]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-58, 41, -3, -46, -24, 6, -101, -35, 70, 66, 56, 103, 101, -60, 34, 61, -67, -24, -74, 24, 15, -54, 77, -83, -100, -90, -24, 96, 0, -57, 81, -89, -48, -7, 61, 67, 67, 6, -78, 87, -16, -52, -30, 93, 92, -105, -18, 23]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-70, 48, -110, 72, -103, -76, 104, 82, -54, -45, -56, 127, 83, 19, 127, 77, -107, -94, -88, 94, -71, 70, 127, -101, -22, 93, 108, 118, 57, -22, 64, -35, -48, -7, 61, 67, 67, 6, -78, 87, -16, -52, -30, 93, 92, -105, -18, 23]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[73, 37, 34, -110, -23, 107, 52, -77, -94, 35, -110, 44, 90, -56, -21, 48, 62, 83, -22, -18, 80, 94, 96, -108, -89, 91, -39, -50, -44, 10, -31, -9, 122, -1, -28, -111, 124, 9, -19, 76, 2, -115, -77, -96, 26, 115, 10, 0, 106, 117, -59, -44, 7, 116, 62, -35, 86, -77, -6, -102, 124, -111, 122, 127, -87, 55, 94, -14, -14, 120, -10, -76, 87, 108, -8, -25, 68, -96, -23, 13, 44, 114, -101, -44, -31, 91, -31, 42, -98, 66, -106, 97, -36, -65, -33, 57, -48, -7, 61, 67, 67, 6, -78, 87, -16, -52, -30, 93, 92, -105, -18, 23]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-70, 48, -110, 72, -103, -76, 104, 82, -54, -45, -56, 127, 83, 19, 127, 77, -107, -94, -88, 94, -71, 70, 127, -101, -22, 93, 108, 118, 57, -22, 64, -35, -48, -7, 61, 67, 67, 6, -78, 87, -16, -52, -30, 93, 92, -105, -18, 23]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[62, -23, -59, 121, 45, 105, 58, -63, 18, -41, 45, 3, 51, -107, -107, -25, -103, 109, -103, 117, -73, 127, 57, -85, -80, -34, -15, 19, 125, -8, 32, -56, -15, -75, 50, -81, 56, 108, 120, 121, 60, -42, -126, 38, -121, -18, -78, -43, 62, 52, 104, 53, -82, -40, 47, -34, -23, 30, 20, -19, 89, 15, 39, -69, 39, 100, 96, 19, -58, 2, 88, 100, -127, -37, -107, -79, -111, -117, -68, 12, -86, 90, 84, 0, 85, 28, 19, -85, 49, 116, -105, 7, -75, -105, 20, -78, -48, -7, 61, 67, 67, 6, -78, 87, -16, -52, -30, 93, 92, -105, -18, 23]");
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey87);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey87);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("209E003085452FC4D86174A298060301FCD8DE7B705123BF49141C77BB45E507DDD2E2A4996D840CCA443E7D0ADACB6E61094F5D99EFE5CE43CBB4175401656B7C0C7E60E0C13950841CD1A942007DFE23711AFCAA9C5C9A6AD75F47EB2BE5149CE3361DB78907001075E89B56CE47C7", secretKey87);
        byte[] byteArray97 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey87);
        java.lang.String str98 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray97);
        java.lang.Class<?> wildcardClass99 = byteArray97.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[110, 23, -94, 52, -7, 7, -87, 87, -8, 98, -117, 69, -56, 16, -87, -13]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-66, -6, 51, 90, -56, -49, -56, -106, -113, -28, -22, -118, -113, -103, -118, 126]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-111, 21, 85, 102, 91, -40, 103, 126, 22, 94, 6, 9, -51, 66, -67, 34]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[96, -64, -54, -118, -36, -13, -2, 120, 31, -16, -105, -23, -11, 11, -104, 120]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-82, 60, -54, -50, -26, -80, 123, 104, 92, 76, -36, 98, 91, 24, -12, 68]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[29, 85, 91, 25, 81, 81, 60, -104, 3, 115, -110, 20, 51, 71, -91, 94]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[44, 23, -31, -65, 21, -81, 15, 87, 2, 17, -127, -47, 66, -69, -40, 95]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[72, -3, 80, 12, 71, -113, -54, 89, -23, 71, 31, -106, 6, 62, 42, 49]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[56, -30, 112, -124, 82, 12, -104, -72, 40, 43, -19, 41, 5, 89, -10, 13, 41, -36, -12, 13, 49, 46, -80, 1, 8, 72, -104, 89, -116, -104, 71, -83, 44, 23, -31, -65, 21, -81, 15, 87, 2, 17, -127, -47, 66, -69, -40, 95]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-72, -72, 65, 27, 114, 53, 103, -96, 64, -80, 124, -54, 42, -27, 25, 11]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[60, 32, 114, 8, 28, 43, 95, 9, -116, -26, -118, 108, -96, 59, -57, -101]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[12, 51, -76, -89, -35, 107, 74, -12, -38, 32, -19, 78, 13, -3, 8, -18]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[106, -122, -76, 105, 91, -121, 114, -65, -23, 80, 114, -13, 20, -68, -95, -77]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-92, -9, 60, -33, 37, -48, 109, 44, 79, 72, -13, 98, 58, 10, 49, -78]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[33, -59, -24, -80, 53, -48, -68, 97, -38, -5, -57, -49, 7, 107, -105, 94]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[93, -22, -43, -95, 11, 59, 48, 93, -22, -74, 45, 64, -5, 78, 116, -112]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-18, 32, 15, -29, 8, 35, 58, -49, 24, 5, -55, -29, -8, -55, -120, 40]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-66, 108, 4, 53, -35, 3, 68, 100, -17, -72, -93, -60, 72, -67, 37, -118, -94, -97, -91, 55, -72, 20, -16, 93, -123, 10, -12, 37, -111, 24, -21, -20, 93, -22, -43, -95, 11, 59, 48, 93, -22, -74, 45, 64, -5, 78, 116, -112]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-18, 32, 15, -29, 8, 35, 58, -49, 24, 5, -55, -29, -8, -55, -120, 40]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertNotNull(byteArray97);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[-94, 16, 115, 44, -52, 39, 43, 28, 65, 58, -29, -59, 26, -28, 121, -31, 114, 23, -9, 48, 81, 115, 58, -115, 115, 45, 31, -55, -109, -54, 37, 18, 93, -22, -43, -95, 11, 59, 48, 93, -22, -74, 45, 64, -5, 78, 116, -112]");
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "A210732CCC272B1C413AE3C51AE479E17217F73051733A8D732D1FC993CA25125DEAD5A10B3B305DEAB62D40FB4E7490" + "'", str98, "A210732CCC272B1C413AE3C51AE479E17217F73051733A8D732D1FC993CA25125DEAD5A10B3B305DEAB62D40FB4E7490");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        java.lang.Class<?> wildcardClass13 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[103, 41, -123, 34, 42, 49, -53, 4, -127, -24, -37, 12, 18, -107, -62, 37]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[9, 42, -25, 56, -65, 102, 7, 98, -121, 18, -92, -38, -42, -119, 50, -117]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[9, 42, -25, 56, -65, 102, 7, 98, -121, 18, -92, -38, -42, -119, 50, -117]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[103, 41, -123, 34, 42, 49, -53, 4, -127, -24, -37, 12, 18, -107, -62, 37]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey48);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey48);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey48);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey48);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey48);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey48);
        java.lang.Class<?> wildcardClass58 = secretKey48.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-121, -22, -21, -105, -98, 16, -115, 114, -32, -27, 44, -103, -64, 70, 43, 73]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[84, -109, -85, 102, -40, 89, 122, -25, 78, -121, -54, -23, 3, -17, -95, 41]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-78, -93, 118, 42, 118, -18, 86, -127, -118, 97, -54, -17, 96, -114, 41, -90]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-23, -64, 13, -24, 22, 5, -10, 127, 34, -69, -128, 19, -109, -61, -53, -97]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-124, 122, -32, -115, 37, -7, -11, 97, -91, -51, -110, 109, 57, -57, 72, 35]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[85, -60, -3, 41, -5, -46, 121, -13, -49, 15, -41, -108, -80, 121, 30, -114]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[85, -60, -3, 41, -5, -46, 121, -13, -49, 15, -41, -108, -80, 121, 30, -114]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[80, -33, 103, 11, 13, -76, 48, -87, 46, -56, -49, -11, 15, -123, -34, 22, -70, -31, -83, -112, -7, -49, -82, -54, 50, -1, 2, 115, 88, -36, -122, -119, -124, 122, -32, -115, 37, -7, -11, 97, -91, -51, -110, 109, 57, -57, 72, 35]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[13, -20, 83, 76, -5, -56, -6, 116, -36, -83, 93, -75, 127, 73, 119, 50]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[75, 73, -53, -84, -41, -9, -41, 5, 7, -73, 16, 78, 35, -30, 42, 27]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[98, -78, -78, 116, 21, -21, 24, 79, -51, -90, 122, -23, 4, 89, 43, 84]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[13, -20, 83, 76, -5, -56, -6, 116, -36, -83, 93, -75, 127, 73, 119, 50]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-111, -57, -2, -125, -35, -68, -96, -128, 37, -91, 110, -99, -86, -96, -33, -99, 110, -33, 92, 40, -111, -97, -35, 89, 8, -13, 4, 32, 8, -2, 19, -80, 13, -20, 83, 76, -5, -56, -6, 116, -36, -83, 93, -75, 127, 73, 119, 50]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[57, -95, 40, 25, -121, -89, 59, 97, -86, -75, 87, 4, -89, 97, 54, 28, 106, -17, 26, -112, 2, 58, -108, -63, -11, 84, 116, 108, 27, 41, 84, -25, 13, -20, 83, 76, -5, -56, -6, 116, -36, -83, 93, -75, 127, 73, 119, 50]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[98, -78, -78, 116, 21, -21, 24, 79, -51, -90, 122, -23, 4, 89, 43, 84]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-120, -54, 101, 26, -80, 41, 3, 29, -69, 12, -64, 1, 46, -120, -110, -63]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-99, -95, 3, 124, -54, 12, 119, -32, 13, -127, 111, 32, 113, 78, -26, -9]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-99, -95, 3, 124, -54, 12, 119, -32, 13, -127, 111, 32, 113, 78, -26, -9]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-118, 44, -81, 116, -93, -72, 82, -58, 100, -106, 101, 6, 89, 108, -120, 113]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-120, -54, 101, 26, -80, 41, 3, 29, -69, 12, -64, 1, 46, -120, -110, -63]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-89, -93, 59, -26, 114, -111, -59, -8, 5, -12, -13, -128, 95, -68, 96, -57, -113, 110, -37, 84, 59, -18, -25, -86, 23, -90, -43, 44, 112, -116, -79, -22, 74, -95, -1, 83, 109, -91, -24, 109, -94, 66, -108, -6, -55, 21, -33, 93, -125, 42, -72, -91, -40, -42, 102, 22, 62, 57, 46, 34, -113, 35, -83, -103, -69, 55, 62, -91, -73, 8, 119, -98, -63, -106, -58, -49, -60, 37, -84, -56, 97, 10, 5, -123, -61, -86, -42, -91, -87, 96, -83, -35, -73, -56, -46, -102, -120, -54, 101, 26, -80, 41, 3, 29, -69, 12, -64, 1, 46, -120, -110, -63]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-80, -89, -81, 67, -98, 40, -99, -43, 110, 18, -26, 96, 34, 34, -66, 35, 26, -76, 46, -12, -60, -23, -70, -4, 121, -7, 125, 93, -105, 64, 115, 12, -7, 73, 103, -110, -63, 8, 106, -38, -108, -102, 8, -120, -84, -98, -69, 15, 67, -69, -67, -41, 1, -31, 127, -44, 70, -21, -101, 54, -128, 31, -5, 69, 52, 31, 30, -29, -69, 65, 81, -96, -37, -51, 7, 120, 75, 126, -70, 12, -30, 111, 59, -127, -35, -84, -117, -9, -121, 25, 69, 57, 104, -25, -14, 92, -120, -54, 101, 26, -80, 41, 3, 29, -69, 12, -64, 1, 46, -120, -110, -63]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "B0A7AF439E289DD56E12E6602222BE231AB42EF4C4E9BAFC79F97D5D9740730CF9496792C1086ADA949A0888AC9EBB0F43BBBDD701E17FD446EB9B36801FFB45341F1EE3BB4151A0DBCD07784B7EBA0CE26F3B81DDAC8BF78719453968E7F25C88CA651AB029031DBB0CC0012E8892C1" + "'", str15, "B0A7AF439E289DD56E12E6602222BE231AB42EF4C4E9BAFC79F97D5D9740730CF9496792C1086ADA949A0888AC9EBB0F43BBBDD701E17FD446EB9B36801FFB45341F1EE3BB4151A0DBCD07784B7EBA0CE26F3B81DDAC8BF78719453968E7F25C88CA651AB029031DBB0CC0012E8892C1");
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey16);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey16);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey16);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass26 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-50, 43, -39, -102, 44, 107, -65, 0, 0, 13, -24, 97, 91, -45, 113, -20]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[110, 110, 16, -23, -21, -17, -95, 80, 20, -109, 40, 126, 20, -26, 49, 42]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[110, 110, 16, -23, -21, -17, -95, 80, 20, -109, 40, 126, 20, -26, 49, 42]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[84, -31, 80, 38, 115, -9, 94, -112, 30, 87, 21, -112, -99, -46, -105, -47]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[110, 110, 16, -23, -21, -17, -95, 80, 20, -109, 40, 126, 20, -26, 49, 42]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-44, -80, -74, 35, 57, -6, 52, -41, -35, -40, 68, 64, -47, 125, 8, -18, 37, 87, -74, -117, -81, -61, 81, 127, 58, -36, -36, -79, -85, 47, -1, -96, -50, 43, -39, -102, 44, 107, -65, 0, 0, 13, -24, 97, 91, -45, 113, -20]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-51, -65, -26, -118, 58, 68, 16, -30, 102, -79, 79, 111, -38, 9, 104, 20, 12, -115, -1, 120, 97, 88, 52, -42, -44, 70, 55, -20, 16, -17, 18, -115, -59, 26, -7, 127, 14, -12, 30, -17, -65, -102, 106, 93, -43, -104, 7, -41, 18, -63, -102, -75, 121, 59, 7, -93, -62, -107, 116, 115, 126, 68, -23, 27, -22, 33, -4, -128, -122, -117, -36, 10, 4, -51, -126, 41, 108, -48, -47, 31, 50, -126, 64, -32, 51, 1, 83, -100, 49, 9, -74, -83, -45, 13, 124, 2, -50, 43, -39, -102, 44, 107, -65, 0, 0, 13, -24, 97, 91, -45, 113, -20]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey8);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey37);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey37);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey37);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey37);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("5E70449D6421CAEB91673C96292BEBCB9BDBB7394DC92ECF00A02B3F91A328B59F5BC268D6B123B8CA71B01119CC2776", secretKey37);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-29, -4, 91, -77, 13, -27, -102, 91, 6, 107, 51, 43, -46, -122, 107, 55]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-77, 71, -86, 25, -17, 122, -80, 96, -93, 14, -14, -122, 41, -12, -2, 114]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[103, 97, 69, 78, 75, 90, 84, 43, -128, -106, -47, 30, -72, -38, 75, 4, 16, -4, 17, 92, 21, -126, 47, -21, 29, -85, -44, -21, 69, -120, -54, 47, -64, -16, -27, -69, -34, 4, 92, -21, -60, -116, 112, 80, -52, -127, 12, -62, -69, 59, 16, -18, 4, -63, 75, -67, -92, 20, 123, 1, -78, -127, 98, 56, -81, -56, 52, 62, -60, 92, 100, 41, 17, 63, 101, 12, -95, -75, -78, 104, 91, 111, 65, 2, 46, 84, -123, -30, 112, 97, 47, -103, -31, 65, -57, -23, -29, -4, 91, -77, 13, -27, -102, 91, 6, 107, 51, 43, -46, -122, 107, 55]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[48, 11, -66, -50, 17, -112, 116, 52, -78, 82, 35, -5, 19, 76, -61, 119, -58, 25, 87, 115, 51, -101, 20, -112, -21, 122, 18, -68, -127, -116, -43, -85, -29, -4, 91, -77, 13, -27, -102, 91, 6, 107, 51, 43, -46, -122, 107, 55]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "300BBECE11907434B25223FB134CC377C6195773339B1490EB7A12BC818CD5ABE3FC5BB30DE59A5B066B332BD2866B37" + "'", str14, "300BBECE11907434B25223FB134CC377C6195773339B1490EB7A12BC818CD5ABE3FC5BB30DE59A5B066B332BD2866B37");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-115, 25, -105, -19, -38, -43, 6, -1, -8, 110, -44, 122, 66, 68, 54, -8]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[19, -72, -121, 59, -59, -51, -122, 42, -43, 5, 71, 9, 93, 71, 111, 15]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[23, 119, -101, 12, -92, -74, 14, -59, -2, -5, -86, 77, 119, -60, -51, 8]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-101, -13, -74, 11, -104, 17, -16, -51, -16, -53, -64, -48, 72, 41, 23, -115]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-95, -91, 19, 16, -38, -39, 29, -113, -11, 29, -120, 61, 100, 60, -61, 63, 30, 52, 108, -89, 59, -76, 94, 43, 72, 33, -112, -51, -35, -34, -75, -72, 23, 119, -101, 12, -92, -74, 14, -59, -2, -5, -86, 77, 119, -60, -51, 8]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 81, 35, 30, 50, -126, -13, 79, 16, 29, -85, 49, 80, 114, 58, 16, -60, 74, -5, 31, 66, -93, -94, 84, 126, -68, 25, 97, -93, -69, 18, -27, 23, 119, -101, 12, -92, -74, 14, -59, -2, -5, -86, 77, 119, -60, -51, 8]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[92, -19, -48, 59, 115, 120, 125, 35, -56, -22, 120, -99, 13, 11, -103, -70, 44, -87, -14, -77, -63, -118, 89, -46, 6, -126, 121, 76, 17, 106, -66, 90, 12, 89, 123, 40, -110, 48, -75, 63, 44, 71, -13, -95, 67, 71, -58, -61, 100, -74, 73, -2, 68, 68, 52, 108, 95, 46, -74, 46, 29, -34, -61, -111, 24, -87, -109, 5, 41, 35, -50, 86, 59, 105, 21, 29, -11, 10, -121, 114, 100, 106, 107, -26, 60, -45, 102, -7, 41, -39, -125, -87, -60, 104, -17, 109, 23, 119, -101, 12, -92, -74, 14, -59, -2, -5, -86, 77, 119, -60, -51, 8]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[125, -23, -104, 5, 40, 66, -80, 36, 126, -24, 10, 64, -52, -118, -53, 82, 100, -60, 74, 29, 96, -90, 111, 88, -26, -67, -85, -117, 4, -53, 115, 83, -22, 90, 61, 65, -100, -118, 119, -103, -110, 52, 87, 72, -20, 57, -48, -2, 12, -49, -10, -110, -70, 91, 76, 0, 119, 12, -116, 107, -46, -78, -25, 2, -77, 123, 34, -100, -72, 102, -82, 26, -77, -20, -46, -62, 125, -91, 75, 44, 103, -95, 92, 122, 90, -62, -71, -59, -102, -46, -9, -16, -52, -32, 32, -89, 23, 119, -101, 12, -92, -74, 14, -59, -2, -5, -86, 77, 119, -60, -51, 8]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[6, -12, 122, 1, -33, 118, 19, -59, 15, 47, -21, -38, 106, -12, -71, -65, -81, -42, -98, 42, 107, 62, -102, 28, -59, -113, 71, -42, -35, 4, -4, 3, -6, -61, -108, -93, 75, 108, 71, -78, -87, -113, 127, 18, 56, 94, -113, -77, 34, 82, -100, 111, -72, -77, -63, 43, -31, -46, -7, 4, 89, 120, -95, 53, 95, -81, 50, 53, -5, 48, 18, -52, 29, -16, -67, -25, -71, -2, 53, -119, 10, 12, 23, 52, -13, -65, 3, 58, -46, -106, -115, 19, -44, -60, 11, 94, 23, 119, -101, 12, -92, -74, 14, -59, -2, -5, -86, 77, 119, -60, -51, 8]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[23, 119, -101, 12, -92, -74, 14, -59, -2, -5, -86, 77, 119, -60, -51, 8]");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-48, 108, 73, 44, -76, 28, -14, -112, -90, 88, -53, -104, -114, 79, -24, 50]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[117, 53, 27, 83, -26, -43, -23, -89, 117, -60, 93, -82, -72, -124, 105, -97]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-4, -20, -9, -123, 61, -42, 23, 54, -106, -62, -126, 61, 35, -56, 6, 127, 97, 23, -100, -105, 73, 35, 87, 37, -88, 118, 82, -110, -92, 13, -107, -6, -48, 108, 73, 44, -76, 28, -14, -112, -90, 88, -53, -104, -114, 79, -24, 50]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey41);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey41);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey49);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey54);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-119, 107, -51, 112, 72, 20, 77, 26, -92, -34, 87, 49, -84, -30, -117, 71]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[103, 79, 57, 64, -77, 27, 83, -106, 22, 102, -11, 24, -128, 65, 108, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[103, 79, 57, 64, -77, 27, 83, -106, 22, 102, -11, 24, -128, 65, 108, -1]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-24, 85, 88, 67, -28, 55, -125, 86, -7, 53, -82, -26, -86, 63, 98, 93]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[103, 79, 57, 64, -77, 27, 83, -106, 22, 102, -11, 24, -128, 65, 108, -1]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "674F3940B31B53961666F51880416CFF" + "'", str11, "674F3940B31B53961666F51880416CFF");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "674F3940B31B53961666F51880416CFF" + "'", str12, "674F3940B31B53961666F51880416CFF");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-59, 84, -101, 29, -78, 70, -126, -89, 74, -125, -72, 17, 95, 78, 90, -67]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-12, 21, -49, -46, 2, -95, 73, -49, 97, -94, 52, -101, 47, 82, -101, 46]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[80, 43, 103, 118, 125, 30, 50, 47, 104, -30, 29, -39, 33, -74, 71, 96]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-70, 24, -59, 72, -24, 101, 84, 87, -57, -85, 60, 110, -116, -66, -105, -116]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[44, 47, 89, 74, -122, -87, 42, 71, -109, -122, 123, -71, -42, -100, 32, 103]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-79, -44, 123, 46, 106, -115, 22, -20, 29, -120, 1, -82, 90, -63, 18, 15]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[84, -109, 120, -93, -90, -59, 47, -3, 63, 41, 45, 13, 81, -119, 42, -67]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[44, 47, 89, 74, -122, -87, 42, 71, -109, -122, 123, -71, -42, -100, 32, 103]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[74, 44, 115, 15, -34, 102, 113, 111, -27, -34, 10, -92, 53, -79, -53, 25]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[80, -23, 110, -66, 41, -10, 7, -76, -127, 36, -95, 76, -34, -117, 67, -85, -127, 60, -88, 92, 29, 23, -91, -115, 98, 125, 11, 84, -11, 18, -74, 64, -94, 14, 82, -107, -109, 87, -87, 49, -10, 48, 109, 40, -19, 14, 73, 127]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-63, -13, -64, 81, -124, -125, -35, -119, -77, -45, -57, 126, -128, 56, 50, -90]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey30);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass40 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, -9, 9, -114, 111, 88, 88, 109, 65, -1, 73, -12, 2, -2, -7, 115]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-113, -33, 105, 94, -59, 66, 18, -15, 124, -74, 105, 30, -87, -21, -63, -36]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-84, -43, -4, -44, 57, 17, -26, 40, -14, -19, -89, -69, -22, -37, -93, 125]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-13, 65, 0, -33, -3, 71, 51, -91, 2, -88, 56, -81, -70, -65, 30, -101]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-44, 17, 71, -99, 105, -35, 9, 75, -95, -11, -105, 37, -115, -29, 22, 5]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[46, -48, 80, 0, -21, -120, -86, -108, -125, -64, -41, 46, 115, 2, -60, -95]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[46, -48, 80, 0, -21, -120, -86, -108, -125, -64, -41, 46, 115, 2, -60, -95]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[91, 53, 11, 99, -51, -40, -112, 21, -66, 3, -30, 40, -118, 101, -82, 59, -119, -52, 40, -26, 112, -18, 30, -88, 20, 0, 64, 4, 69, -40, -20, 30, -44, 17, 71, -99, 105, -35, 9, 75, -95, -11, -105, 37, -115, -29, 22, 5]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey38);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey38);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[5, -53, 25, 64, -116, 40, 19, -4, 87, -124, 107, -36, -41, -58, 50, 28]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-96, 116, 35, -12, 42, -23, -53, 126, 72, 57, 88, 4, 36, -79, 114, 19]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-63, -26, 87, 14, -111, -96, 102, -56, 75, -96, -68, -117, -70, 50, 107, -65]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[8, -83, 37, -49, -82, 72, 125, 27, -113, -21, 121, 101, -120, 12, -14, -5]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-16, -59, -4, -59, -48, -42, 39, 39, 104, -95, -63, 43, -27, -78, 34, -95, 17, 107, -124, -90, 118, -124, 117, 40, 11, 60, -43, -11, 117, -53, -9, 79, -63, -26, 87, 14, -111, -96, 102, -56, 75, -96, -68, -117, -70, 50, 107, -65]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-47, -103, -59, 49, -39, 81, 40, 51, 116, 29, -9, 38, 77, 82, 56, 18, -52, 102, -58, 67, -108, -75, 123, 69, 87, 109, 2, -56, 38, 61, 55, 7, -63, -26, 87, 14, -111, -96, 102, -56, 75, -96, -68, -117, -70, 50, 107, -65]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[103, -86, -81, -74, 39, -97, -79, -70, 74, -34, 73, -50, 36, -32, -95, -64, -80, 42, -93, -104, -50, -125, -80, 76, 30, -110, 5, -70, 57, 95, -18, 42, 67, -105, -78, 33, -92, -62, -4, -25, -8, 120, 84, -93, -51, -16, -35, 56, 102, -125, -88, 37, -16, -54, 7, 82, 28, -31, 105, 115, 85, -74, -90, -68, 109, -82, -64, -29, 63, 24, -106, 81, 86, 4, -44, 40, 30, 18, 10, -121, -91, 116, -96, 9, -70, 61, 42, -17, -63, 44, 110, 20, 59, 122, 115, 69, -63, -26, 87, 14, -111, -96, 102, -56, 75, -96, -68, -117, -70, 50, 107, -65]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "67AAAFB6279FB1BA4ADE49CE24E0A1C0B02AA398CE83B04C1E9205BA395FEE2A4397B221A4C2FCE7F87854A3CDF0DD386683A825F0CA07521CE1697355B6A6BC6DAEC0E33F1896515604D4281E120A87A574A009BA3D2AEFC12C6E143B7A7345C1E6570E91A066C84BA0BC8BBA326BBF" + "'", str29, "67AAAFB6279FB1BA4ADE49CE24E0A1C0B02AA398CE83B04C1E9205BA395FEE2A4397B221A4C2FCE7F87854A3CDF0DD386683A825F0CA07521CE1697355B6A6BC6DAEC0E33F1896515604D4281E120A87A574A009BA3D2AEFC12C6E143B7A7345C1E6570E91A066C84BA0BC8BBA326BBF");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[46, -49, -52, -16, 116, -76, -74, -47, -40, 62, -55, -6, 48, -81, 24, 16]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[119, -100, 94, 58, 112, -123, -60, 70, 59, 122, -60, -95, -77, 2, 68, -109]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[119, -100, 94, 58, 112, -123, -60, 70, 59, 122, -60, -95, -77, 2, 68, -109]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[86, 42, -114, -19, -37, -15, -40, -18, -16, -63, -56, -44, 84, 70, 25, 121]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[46, -49, -52, -16, 116, -76, -74, -47, -40, 62, -55, -6, 48, -81, 24, 16]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[93, -42, 90, 71, 87, -88, -115, 36, -48, -102, 62, -13, 30, 43, 27, 34, 99, -121, 94, -68, 6, 45, 93, -62, 80, -16, 42, -65, -17, -5, -71, -30, 69, -23, 36, 106, 105, 1, 84, -94, -95, -72, -34, -52, -126, 62, 16, 77, 43, -110, 75, -59, 53, -97, 20, 66, 17, 118, -8, -87, -3, 88, -6, 38, -87, -48, -84, 20, 29, -4, -107, -1, -60, 40, 25, 79, 127, 39, 97, 74, 123, -115, -119, -6, -71, -59, -74, -87, 19, 72, -61, 24, -100, 119, 65, 20, 46, -49, -52, -16, 116, -76, -74, -47, -40, 62, -55, -6, 48, -81, 24, 16]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[46, -49, -52, -16, 116, -76, -74, -47, -40, 62, -55, -6, 48, -81, 24, 16]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-118, -92, 123, 115, 26, 83, 18, -55, 50, -42, -39, -16, -11, 62, -34, 101, -95, 97, 11, 116, -90, 40, -9, 26, -126, 34, 115, 104, 93, -116, -127, 1, 46, -49, -52, -16, 116, -76, -74, -47, -40, 62, -55, -6, 48, -81, 24, 16]");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        java.lang.Class<?> wildcardClass24 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-69, -102, 107, 38, -6, -17, 47, -59, 94, -43, -97, -52, -60, 68, -105, 97]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-23, -119, -104, -3, -12, 15, 84, 76, 12, -120, -11, -52, 95, -63, -21, 105]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[62, -85, -98, -35, -100, -5, -31, -52, 35, 32, 17, -79, 95, 16, 101, -95]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[30, 3, -3, -80, -34, 105, -116, -40, 98, -104, 11, 50, 43, 116, 48, -118]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-56, -32, 23, 93, -120, 4, -123, -40, 82, -19, 110, -118, 105, 110, -14, 112, 76, 46, -101, -68, 4, -34, 67, 50, -44, -58, -77, 98, -50, 127, 54, -18, 62, -85, -98, -35, -100, -5, -31, -52, 35, 32, 17, -79, 95, 16, 101, -95]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "C8E0175D880485D852ED6E8A696EF2704C2E9BBC04DE4332D4C6B362CE7F36EE3EAB9EDD9CFBE1CC232011B15F1065A1" + "'", str23, "C8E0175D880485D852ED6E8A696EF2704C2E9BBC04DE4332D4C6B362CE7F36EE3EAB9EDD9CFBE1CC232011B15F1065A1");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("45AC629B1599BBF8D6F5594B877D8B4BBCC89E2C3891435E151277E3E4290D327B77DE9F3AAF37E4922662EB2FEB94DF", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.Class<?> wildcardClass30 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-2, 79, 123, -27, -82, 0, 29, 55, 89, -102, -124, 61, 41, 71, 79, -49]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[113, -72, -72, -91, -114, -46, 54, 112, 50, 2, 12, 104, -23, -47, 75, -4]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-111, -24, -43, -50, -110, -113, 122, 58, 60, 29, 49, -77, -74, -57, -116, -122]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[127, -33, -85, -79, 115, -9, -54, -93, 68, 25, 47, -21, -112, -78, 51, -94]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[32, -95, -74, 16, -75, -81, 26, -52, 45, -46, -32, -12, 91, -110, -54, -6, 73, -31, -26, -120, -121, -27, -119, 106, -59, 98, -56, 26, -125, 123, 12, 109, -111, -24, -43, -50, -110, -113, 122, 58, 60, 29, 49, -77, -74, -57, -116, -122]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[123, -76, 40, -47, -124, 103, 108, 101, 27, -84, -111, 48, 67, 94, 48, 67, -74, 33, -100, -17, -110, 29, -94, -55, -28, -96, 27, 26, -94, -56, -121, 40, -111, -24, -43, -50, -110, -113, 122, 58, 60, 29, 49, -77, -74, -57, -116, -122]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-60, -23, -6, -1, -81, -81, -116, 101, -3, 83, -40, -41, -28, 97, 63, -127, 64, -62, -77, -106, 46, -63, 39, 101, -116, 96, 28, -44, -56, -25, 45, 119, 41, 61, 108, 38, 40, 87, 0, 71, -15, -81, 100, 75, 110, -70, 23, -67, -55, 66, -33, 71, -29, 45, -51, 102, 79, 31, 60, -54, -113, 65, -57, 13, 113, -17, -74, -128, 17, 44, -49, -68, 11, 27, 70, -11, 111, 117, 13, 39, 9, 97, 121, 55, 73, -14, 83, 7, 6, 121, 53, 19, 58, -121, 64, -38, -111, -24, -43, -50, -110, -113, 122, 58, 60, 29, 49, -77, -74, -57, -116, -122]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[115, -121, 108, 14, 102, 9, 101, -36, 17, -51, 53, 51, 15, 28, -15, -118, 94, -120, 62, -19, -15, 109, 41, -95, -31, 50, 8, 110, 41, 112, -102, -109, -37, 122, -67, -92, 1, 121, 118, -108, 94, 0, 118, -24, -96, -80, -124, -113, 124, 3, -67, 39, 80, 37, -24, -60, -61, -105, 118, -112, 79, -89, 88, -5, -51, -14, -97, 127, 44, -104, -54, -68, -13, -126, -91, -9, -29, 30, 15, 101, -33, -20, -124, 6, 23, -88, 104, -13, 62, -111, 6, 2, -51, 52, -20, 78, -111, -24, -43, -50, -110, -113, 122, 58, 60, 29, 49, -77, -74, -57, -116, -122]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "73876C0E660965DC11CD35330F1CF18A5E883EEDF16D29A1E132086E29709A93DB7ABDA4017976945E0076E8A0B0848F7C03BD275025E8C4C39776904FA758FBCDF29F7F2C98CABCF382A5F7E31E0F65DFEC840617A868F33E910602CD34EC4E91E8D5CE928F7A3A3C1D31B3B6C78C86" + "'", str29, "73876C0E660965DC11CD35330F1CF18A5E883EEDF16D29A1E132086E29709A93DB7ABDA4017976945E0076E8A0B0848F7C03BD275025E8C4C39776904FA758FBCDF29F7F2C98CABCF382A5F7E31E0F65DFEC840617A868F33E910602CD34EC4E91E8D5CE928F7A3A3C1D31B3B6C78C86");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey29);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey29);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey37);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey42);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey42);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey42);
        java.lang.Class<?> wildcardClass47 = byteArray46.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[124, -117, -51, 69, 28, 41, -126, -25, -48, 67, 102, 123, 70, -58, 70, 8]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-121, -40, -28, 23, -113, 50, -5, -37, -22, -122, 68, 50, -47, -75, 3, -104]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[94, -9, -79, -31, 59, -48, 123, 115, 25, 84, -46, -23, 41, 45, 48, -27]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[94, -99, 10, -55, 65, 29, -108, 121, 73, 10, 94, 31, -69, -42, -38, -98]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[106, -22, -85, 63, 97, 98, -8, -41, 79, -89, -54, -48, -42, 51, -23, 94]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-85, 11, -37, 77, 98, -85, -78, 99, 0, -46, 35, -23, -58, -47, 69, -124]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-91, -111, 18, -117, 30, -1, 87, 42, -13, -11, -13, -91, 83, -3, 80, 59]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[106, -22, -85, 63, 97, 98, -8, -41, 79, -89, -54, -48, -42, 51, -23, 94]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[54, 62, -17, 46, -24, 17, -104, -57, 105, 23, 32, 9, -89, 99, 41, -46]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-62, -18, -68, 25, 68, -13, -79, -28, 72, -98, -4, -30, -23, 112, 104, -13, -87, -26, -25, -101, -40, -81, -79, 14, 14, 89, -8, -122, 74, -68, -112, 76, 64, -42, -15, -107, -93, -16, 7, -84, -68, -101, -22, -64, -125, 48, -98, 106]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-62, -125, -100, -20, 38, -57, 34, 15, -45, -51, 81, 3, -27, -123, 126, 116]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-69, 22, 124, -123, -48, -15, 110, 39, -61, 3, -100, 94, 0, -48, -45, 9, -59, -103, 79, -105, 15, -44, 126, -128, 49, -55, 89, 9, -64, 40, 114, -74, 9, -57, 103, 4, 69, 90, -103, 11, -33, -113, 58, 73, 107, 93, 11, -108, -9, 17, -18, 102, 51, 27, -123, -119, -124, 26, -104, 111, -118, 89, 87, 122, -100, 26, 63, 53, -122, 108, 127, 65, -75, -63, 50, -119, 13, 41, 7, 121, -44, 118, 56, -11, 28, 54, 96, -112, -17, 0, -59, 23, -12, -88, -19, -71, -62, -125, -100, -20, 38, -57, 34, 15, -45, -51, 81, 3, -27, -123, 126, 116]");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey62);
        byte[] byteArray66 = new byte[] {};
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray66);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey68);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey72);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey72);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey72);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey72);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey72);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey72);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey72);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey72);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey72);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey72);
        java.lang.Class<?> wildcardClass83 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[68, 48, -2, -19, -6, 61, -51, 75, -4, 9, -108, -122, -104, -59, 17, -87]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[41, 92, -1, 126, -125, -1, -54, 98, -45, 43, -116, -16, 114, -53, -71, 80]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-74, -22, 86, 127, 40, 110, -99, 86, 121, -70, -121, -20, -128, 83, -114, -6]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[86, -100, 22, 127, 100, 85, -12, 2, -19, -77, 98, 25, -5, -37, -73, 93]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-82, -111, -128, -59, -111, -22, 116, 13, 87, 55, -75, -80, 78, 63, -110, -121]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-101, -99, 8, 12, 32, -121, 66, -48, 90, 28, -83, 70, 34, -15, 17, -11]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-101, -99, 8, 12, 32, -121, 66, -48, 90, 28, -83, 70, 34, -15, 17, -11]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[28, -74, -93, -67, 45, -39, -90, -124, 107, 101, 81, -83, -116, -4, -104, 65]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[89, 92, -96, 127, 110, 102, -82, -4, 109, 34, 65, -103, 72, -108, -58, -9]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-122, 102, 81, 109, -42, 50, -26, 24, 24, -104, 83, 32, 0, 73, 119, -121]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[34, 120, 115, 13, -37, -13, 67, 25, 59, 48, 86, -99, -72, 116, 45, -11]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[81, -72, 46, -56, -58, -42, 119, -111, -2, 7, -91, 12, 12, -78, 104, -27]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-101, 73, 1, 12, 38, -35, 92, 106, 48, 16, -71, 65, 84, -11, -116, -6]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-84, -61, -87, 10, -41, -123, 27, 117, 102, -53, -62, 112, 78, -26, 68, 104]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[18, -57, 96, 93, 32, -79, 70, -72, -57, 127, -40, 98, -127, 40, 38, 26]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[50, -93, 38, 9, -34, 4, -65, 24, 96, 102, -96, -29, 107, -116, -61, 57, -111, -89, 106, 117, -10, 117, 114, -55, -31, -96, -97, -18, 72, 42, 102, 83, -84, -61, -87, 10, -41, -123, 27, 117, 102, -53, -62, 112, 78, -26, 68, 104]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-64, -13, 62, -123, -6, 126, -76, -107, 82, 7, 107, -116, 107, -76, 106, -88, -43, 8, 65, -23, -88, -116, -44, -43, 61, -40, 104, -47, 126, 69, 88, 71, -84, -61, -87, 10, -41, -123, 27, 117, 102, -53, -62, 112, 78, -26, 68, 104]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-36, -18, 49, 52, -60, 59, 7, -32, 54, 41, -13, 118, 66, -102, 98, 2, -96, -21, -43, 89, -53, -2, 16, 36, -22, 27, -116, -51, 87, 69, -100, -17, 23, -33, -41, -16, 29, 73, 63, -107, -5, -122, -105, 104, -1, 86, 18, -36, -128, -104, 95, 16, 78, -118, 118, 16, 60, 46, -109, 96, 30, -31, 113, 45, -101, -48, 1, -107, -67, -46, -77, 74, 108, -84, -17, 11, -104, -57, 33, -59, -93, 76, 41, -66, 115, -64, -87, 59, 81, 123, 84, 110, -62, -65, 81, -117, -84, -61, -87, 10, -41, -123, 27, 117, 102, -53, -62, 112, 78, -26, 68, 104]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-33, -75, 48, 22, 118, -117, -117, -29, -58, 126, -30, 54, 124, 101, 8, 110, -10, 96, -10, -102, -98, -78, 41, 27, 27, -83, -15, 88, 59, 117, 62, -115, -84, -61, -87, 10, -41, -123, 27, 117, 102, -53, -62, 112, 78, -26, 68, 104]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey32);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey32);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey41);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey47);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey47);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        byte[] byteArray67 = new byte[] {};
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray67);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey69);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey73);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey73);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey73);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey73);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey73);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey73);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("9C05642F602761962E462CE92CE6ECDACB9DB5A73B65CEC8DBA6F5DAFDCC6512D4828F0AF788FCDA23024D860C346B3A6801F7867EBD7155E31C44B70C64FDB66F9AA0A04F2C8EB79E6BB6236A4C7ECC316F47D455895810C5387C812311907DEE8264D30E65861CCF889E6DD97B6B22", secretKey73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey73);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-3, 64, -60, 61, 9, -61, 96, 49, -78, 108, -126, 100, -88, 92, -59, -29]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[92, 5, 34, 68, 6, -24, -22, 100, -37, 21, 79, -105, -80, -48, -84, 97]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-15, -24, -97, 43, -55, 90, -5, -91, 95, 8, -24, 124, 27, 25, -58, 33]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[67, -75, -66, 41, 60, 66, 75, -71, -99, -88, -40, 84, 34, -38, 112, -96]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-100, 126, 127, -29, 102, -29, 64, 22, -49, -126, 11, 8, -1, -51, -72, 85]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[81, -69, 59, 90, 52, -123, 16, -20, -50, 73, 62, -43, 63, 57, -22, -69, -25, -84, -125, -113, 74, 120, -77, -122, -69, -86, 84, 9, 105, 14, 104, 8, 67, -75, -66, 41, 60, 66, 75, -71, -99, -88, -40, 84, 34, -38, 112, -96]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[8, -42, 33, -88, -113, -37, -120, -2, -96, 116, -87, -52, 127, -6, 102, -62]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[64, -128, 102, -66, 116, -121, -19, 18, 29, 115, 1, -11, -106, -128, 31, -116]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[50, 5, 50, -101, -4, 77, 63, 6, -59, 92, 72, -99, 24, -31, 55, -52]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[95, -123, 71, 115, -51, 0, 16, -39, 101, 77, -102, 0, 41, 32, 49, -97]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[119, 13, 124, 70, 79, -9, 92, -33, 17, -51, 25, 7, 1, 73, -45, 32]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-105, 40, 108, -122, 2, -121, -121, 127, -97, -36, -12, 109, -11, -7, -105, -49]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-75, -86, -66, 29, -105, 105, -49, 122, -45, -67, 111, 4, 35, 57, 117, 80]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[22, -70, -38, 116, -39, -34, -80, -74, -127, -14, -47, 46, -46, 71, -9, 52]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, -19, 39, 123, -75, 122, -20, -108, 1, -53, 96, 88, 63, 45, 49, 45, -41, 26, 109, -113, -119, 113, -9, 25, -93, -101, -67, -94, 71, -94, 41, -15, -75, -86, -66, 29, -105, 105, -49, 122, -45, -67, 111, 4, 35, 57, 117, 80]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[39, -18, 99, -57, 13, -17, -78, 80, -49, -120, 45, 1, 13, -95, -111, -85, -119, -94, -19, 30, -123, 52, 20, 27, -22, 112, -82, 9, -70, 24, 34, -112, -75, -86, -66, 29, -105, 105, -49, 122, -45, -67, 111, 4, 35, 57, 117, 80]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[110, 124, -53, -119, 121, -101, -83, -40, -53, -55, -30, 71, -21, 76, 61, -109, -70, 76, -122, -55, -60, -114, -94, -59, 11, -111, 97, -43, -1, -9, -79, -38, -113, 15, 49, 92, -87, 33, -39, 112, -42, -112, 26, -112, 55, 29, 104, 75, 34, -127, 82, 71, -93, -45, -91, -31, 13, -63, 69, -106, -8, -32, 32, -76, 65, -21, 3, -54, 45, 54, 119, -7, 105, -7, 66, -5, -61, 79, 38, -62, 116, 26, -113, -109, 64, -103, 38, 96, -117, 5, 93, 3, -29, -67, 98, 2, -75, -86, -66, 29, -105, 105, -49, 122, -45, -67, 111, 4, 35, 57, 117, 80]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-13, -8, -71, 13, -95, -70, -112, -18, -34, -14, -74, 36, -120, 21, -6, -54, -85, 11, -5, 0, -121, -13, -115, 97, -53, 22, -21, 96, 116, 1, -83, -15, -12, 86, -18, -6, -124, -28, 57, 94, -95, 27, 25, -30, 9, -127, 22, 123, 10, 64, -54, 23, 47, 94, -50, -111, -77, 94, 1, -83, 112, 1, -19, 62, -56, 120, 126, 25, -25, -10, -18, 32, 117, 82, 36, -49, -23, 51, -37, -36, 15, -18, -65, -56, -110, 104, 95, 93, 105, 44, 33, 73, 81, -26, -103, -124, -75, -86, -66, 29, -105, 105, -49, 122, -45, -67, 111, 4, 35, 57, 117, 80]");
        org.junit.Assert.assertNotNull(byteArray82);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey3);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey13);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey13);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey13);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey13);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[126, -64, 127, -34, -17, 86, -91, 54, -69, -23, -82, -45, -100, -83, 124, 3]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[110, 15, 71, -11, 98, -80, 35, 109, 108, 13, -4, -115, 107, -53, 31, -5]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-74, -61, -72, 58, -38, 48, 78, -65, -75, -89, -84, 58, 86, -49, 116, -30, 101, 88, -6, -89, -50, -53, 90, -19, -19, 123, -111, -64, -14, -37, 43, -74, 126, -64, 127, -34, -17, 86, -91, 54, -69, -23, -82, -45, -100, -83, 124, 3]");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-37, -70, -10, -32, -54, 76, 80, 122, 44, 16, 92, 91, -73, -65, 87, 19]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-114, -98, 69, -42, 80, -13, -22, 83, 91, -40, 37, 42, 11, 103, -30, -13]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[15, 28, -62, -1, -108, -83, 75, 62, -99, -30, 104, -79, 121, 15, -61, 55, -125, -30, -91, 34, -69, 36, 44, -116, -80, -93, 121, -30, 15, -28, -98, -72, 95, 56, -20, -16, 39, -34, 22, -16, 82, 2, 58, 82, -35, 46, -124, -81, 115, -20, 14, 93, 70, -111, -122, 27, 48, 99, -80, -113, 29, 56, -105, 23, 42, -79, -76, 116, -48, 63, 110, 91, 22, -13, 70, 57, 36, -61, 16, -14, -26, -2, -128, 9, 6, 43, 109, -21, 102, -83, -58, 66, -127, 87, 8, 28, -37, -70, -10, -32, -54, 76, 80, 122, 44, 16, 92, 91, -73, -65, 87, 19]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[102, -67, -79, 114, -86, -65, 28, 103, -79, 23, 65, -68, 97, 52, -15, -110, -57, 14, 60, 114, -29, 23, 61, -116, -118, 25, 21, -39, -43, -72, 98, 56, -37, -70, -10, -32, -54, 76, 80, 122, 44, 16, 92, 91, -73, -65, 87, 19]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-52, -38, 69, -103, 78, 20, -22, 73, 58, -18, 36, -104, 95, 39, -74, 67, -4, -56, 32, -14, 123, 107, -55, -71, 21, -64, 86, -77, -68, -21, -64, 80, -37, -70, -10, -32, -54, 76, 80, 122, 44, 16, 92, 91, -73, -65, 87, 19]");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("C718B4A2C36E882A21FF0D9AFADE2A77", secretKey21);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey58);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey58);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey58);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey58);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey58);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey58);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey58);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("527C1D1D9F2B903634C0E77365CB43228E56A034C689D9E526F6719891815F410CDF0450BC5937FF5BCBF9DA453BC77D", secretKey58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey58);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, 62, -30, -116, -84, -65, 94, 57, 18, 18, 86, 88, -107, 112, -64, -126]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[14, 103, -127, -61, 71, 20, -75, -76, -117, 74, 4, -119, -85, 48, 10, -15]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[60, -57, -54, 22, -68, -125, 17, 125, -22, 90, -71, -119, 9, 110, -75, 60]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-93, 12, 83, 61, -115, -56, -66, 36, -35, -28, 120, -33, 112, 74, 30, 8]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-42, -58, -24, 14, -115, -22, 52, -74, 36, 121, 41, -72, 1, 76, 43, -80, -61, 8, 33, 37, -2, 74, 71, 96, -102, -74, -92, 75, -10, -114, 108, 80, 60, -57, -54, 22, -68, -125, 17, 125, -22, 90, -71, -119, 9, 110, -75, 60]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, -68, -35, 108, 120, 35, -2, 126, 123, -12, 83, 14, 6, -72, -96, -104, 19, -88, -23, 48, -49, -23, 39, -11, 9, -26, -51, -25, 51, 16, 43, 49, 60, -57, -54, 22, -68, -125, 17, 125, -22, 90, -71, -119, 9, 110, -75, 60]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 12, 64, 78, -41, -106, 127, -50, 71, -75, -20, -49, 80, 41, -117, 42, 18, -98, 122, -17, -84, 97, 93, -11, -49, -103, 121, -25, -15, 60, 111, -109, -104, 44, 56, -119, 42, 108, 55, 13, 71, -33, -62, -77, -43, -106, 102, 64, -98, -109, 1, 45, 89, -113, 14, -98, -34, -113, 126, -89, 71, -43, 93, 60, 73, -128, 35, 17, 58, 96, 82, 62, -16, -121, -66, 120, -119, -73, -91, 84, 100, -60, 12, 10, -119, -78, 90, 65, 45, -70, 94, 89, 105, -19, -113, 67, 60, -57, -54, 22, -68, -125, 17, 125, -22, 90, -71, -119, 9, 110, -75, 60]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-71, -105, 107, -22, 5, -121, 42, -83, 41, 78, -50, -86, -115, 2, 0, 73, 76, 59, 70, 70, -10, 59, -29, -29, 0, -126, -8, -113, -73, 88, 10, 11, 28, 126, 93, -116, -106, -78, 96, -54, 7, 98, 80, 44, 31, 13, 72, 38, 117, -67, -101, 25, -90, 59, -69, 74, 3, 5, 45, -128, 2, -25, -38, -15, -68, 127, -18, 20, -28, 93, -23, -47, 117, 76, -65, 79, -61, -5, 39, 65, 52, -8, -80, 37, 59, -48, 102, 116, -103, 127, 24, -78, 22, -38, -4, 103, 60, -57, -54, 22, -68, -125, 17, 125, -22, 90, -71, -119, 9, 110, -75, 60]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-26, -6, 15, -112, 108, -97, -122, 83, -43, 68, -32, 73, 21, -44, -14, 95, -6, -105, -33, -5, 108, -36, -16, 127, 103, -104, 86, -56, 87, 50, -93, -12, 60, -57, -54, 22, -68, -125, 17, 125, -22, 90, -71, -119, 9, 110, -75, 60]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "E6FA0F906C9F8653D544E04915D4F25FFA97DFFB6CDCF07F679856C85732A3F43CC7CA16BC83117DEA5AB989096EB53C" + "'", str31, "E6FA0F906C9F8653D544E04915D4F25FFA97DFFB6CDCF07F679856C85732A3F43CC7CA16BC83117DEA5AB989096EB53C");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[49, -61, 55, 12, 18, -30, -33, 98, -72, 11, 34, -116, 121, -49, 110, -65]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-117, -9, -81, -63, -93, -84, 124, -117, 89, -94, -11, 31, 48, 8, -36, -45]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-40, -43, 28, -81, 101, -102, -59, 56, -11, -87, 38, -53, 30, -31, -39, -92]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[65, -118, 26, -76, -26, -75, 21, -100, 94, -77, 99, -10, -47, -109, -65, -85]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-3, 39, 91, -39, 70, -39, -92, 42, -54, 8, -93, 83, -30, 92, 95, -79, 37, 87, 42, -70, -40, 82, 1, -88, 36, 48, 83, 15, -28, -51, 93, -6, -40, -43, 28, -81, 101, -102, -59, 56, -11, -87, 38, -53, 30, -31, -39, -92]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[76, 102, -82, -37, -13, 62, -112, 119, -26, 98, -93, 117, -7, 74, -118, 44, 127, 81, -45, 124, -35, 123, -92, 28, 50, -105, 119, 64, -127, 9, -35, -69, -40, -43, 28, -81, 101, -102, -59, 56, -11, -87, 38, -53, 30, -31, -39, -92]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[34, -105, -63, -54, -56, -87, 83, 80, -115, -3, 11, 62, -101, -18, 58, -115, -97, 0, 59, -99, 89, 36, 96, 1, -43, 32, -21, 31, -55, -16, -106, -127, -27, 33, 104, 91, -96, -98, -110, -50, 11, 51, 13, 104, 74, 124, 90, -112, -94, 17, 85, -94, 112, -24, 10, 17, -72, -15, 78, 49, 26, 41, 8, -128, -48, -110, 20, 21, -102, -80, 19, 103, 75, -66, -44, -126, 20, -112, -98, -107, -53, 41, -63, 51, -92, -21, -2, 92, -33, -50, 123, 102, 26, 20, 98, -18, -40, -43, 28, -81, 101, -102, -59, 56, -11, -87, 38, -53, 30, -31, -39, -92]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[28, 44, 51, 80, 116, 93, -30, -118, -76, -92, -120, 61, -115, -61, 24, 61, 119, -120, -48, 47, 101, -9, -90, 11, 57, 3, -82, 79, 13, 59, -107, -121, -40, -43, 28, -81, 101, -102, -59, 56, -11, -87, 38, -53, 30, -31, -39, -92]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[25, -92, 44, 53, -104, -105, 11, 33, 120, -6, 52, 124, -52, -23, -96, 84, 64, -84, 111, 81, 79, -33, -121, -92, -125, 78, 74, 111, 76, -73, -18, -9, 57, 115, 87, -102, 40, -20, 38, 55, 54, -20, -119, 83, -76, 88, 124, -25, -127, -65, 77, 8, 23, -123, -116, 116, -49, -21, 46, 50, 75, 84, 92, 17, -62, -94, -86, -51, -14, -127, 49, -50, 23, -24, 83, 15, 23, -79, -49, -128, -17, -17, 124, 101, -85, -118, -85, -98, 84, -91, 23, 23, 44, -92, 1, 3, -40, -43, 28, -81, 101, -102, -59, 56, -11, -87, 38, -53, 30, -31, -39, -92]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-104, 13, 102, -7, 9, -34, 5, -122, 36, 103, -12, 39, -33, -81, 95, -82, 33, 81, 114, -112, -112, 23, 61, -93, 53, -50, -28, 76, 65, -57, -6, -40, 100, 32, -127, 37, 125, 84, 1, 37, 34, -107, -68, 89, 101, -60, -100, 22, -31, -9, -84, 9, -38, 127, 118, 109, 5, 92, -34, -89, 83, 17, 39, -92, 107, 96, -48, -125, 123, -118, 36, -7, -90, 75, -116, 63, -98, -104, 126, 107, 124, 104, -106, -43, 37, 55, -110, 2, -73, 50, -126, -106, -38, 19, -99, -50, -40, -43, 28, -81, 101, -102, -59, 56, -11, -87, 38, -53, 30, -31, -39, -92]");
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("AED7C7F791A61E5F13462501CB22D8D758829B3407B443FEAF277C8FAD96EADE119D944514F95F365072B7875E169B8F", secretKey8);
        java.lang.Class<?> wildcardClass17 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[77, -15, -35, 93, -91, -110, -25, -28, -28, -36, -65, 69, -30, -97, 124, -103]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-52, -21, 33, 56, 19, -19, 71, 76, 53, -20, 94, 121, -102, -2, -11, -123]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-52, -21, 33, 56, 19, -19, 71, 76, 53, -20, 94, 121, -102, -2, -11, -123]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[5, -46, -78, 86, -36, 88, -85, -104, -119, -63, -89, -87, 40, 107, 82, -22]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[77, -15, -35, 93, -91, -110, -25, -28, -28, -36, -65, 69, -30, -97, 124, -103]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-17, 46, -77, -94, 32, -41, -61, -37, 108, 4, -107, -69, -55, 124, 69, -60, 123, 35, 81, -17, -97, -91, 79, -99, 24, 118, 24, -100, -98, 123, -95, -33, -80, 83, -83, -95, -110, 94, 25, -126, -67, 66, -113, -9, 105, -100, -116, 120, 27, 29, -82, -76, 49, 56, -9, -60, 29, -86, 69, -87, -46, 67, -65, 22, 72, -41, 112, 127, 65, -76, -96, -8, 117, -44, 111, 39, -99, -124, -119, 118, 39, 98, 23, -45, -124, 102, 79, 6, -70, -41, 17, -17, 111, 4, 54, -97, 77, -15, -35, 93, -91, -110, -25, -28, -28, -36, -65, 69, -30, -97, 124, -103]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[53, -102, -104, -103, 127, 50, 50, 13, -99, -44, -47, -49, 2, 32, 92, -22, -59, 51, 108, 77, 56, 32, -6, -40, -30, 68, 115, -92, 76, 19, 0, 68, 34, -84, -15, 71, -70, 79, -47, -92, 12, 98, -97, 21, 5, -29, -24, -57, -73, 127, 41, -48, -57, -37, 93, 65, 80, -93, -125, 99, 47, -128, 91, 65, -10, -99, 104, 73, 82, -104, -93, 61, -39, -67, -49, -31, 39, 45, 39, 87, -25, -70, 108, -3, -36, -45, -51, -27, 64, 53, -106, 11, -7, -6, 61, -109, 77, -15, -35, 93, -91, -110, -25, -28, -28, -36, -65, 69, -30, -97, 124, -103]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-32, -62, -93, 115, -6, 51, 89, -11, 110, -89, 56, 99, -17, -15, -76, 49, 99, -13, 52, -57, -68, -64, 6, -84, -107, 111, -112, -54, 0, -58, 77, 6, 5, -113, -44, 80, -102, -97, 99, -16, -102, -56, -24, 59, 102, 40, -81, 115, -103, 62, -7, -26, 66, 33, 72, 24, -109, 18, 72, -93, 108, 87, -89, -12, -94, 46, -75, 118, 82, 64, 63, 81, -82, -56, -52, -36, -4, 45, 24, 31, 60, -76, 76, -95, 75, 99, 12, -1, 126, -47, -7, 41, 48, 69, 127, -75, 77, -15, -35, 93, -91, -110, -25, -28, -28, -36, -65, 69, -30, -97, 124, -103]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("52696310ADD28E1667E6565DC116B83F5DF948E152A02AAA3CFBBA2B1C358E4FCBE2B3C9BBA3A4850771B8B9790C304C2E0DDC6FCE659A1BC204938C1080728FB6EDA1FEC499F333482DE8CB36B67EC018FACA2F1C10997B5EB7C8A105FCCF7245607B62F6520A59A7A3EBC09AFC0B5D71A677453F228EDD8D66D30730D144EF2055BEA2EC9238C7532B8DB24649E9F02E261CC98E1B00A0787CB5B69241482382D31249E22E3CD3438C1B16E4A04526F2929E0D071D14831608E2E6AA582C5E0F268A0623ECCF5E9E7B9E98553173DBDF2C44C8ED46A2279484A6CC8564C461FEC8D71069186B62CAD51691E5902F24", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("8D634E09060D653DFDBF18A42493EA0992AD7636726F60C637F338FD701AE408BF5D927B2DC53D72797237845E245801", secretKey4);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey37);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey37);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey37);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey37);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey64);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("9E3FA735129C449B99534E5E23A8CD37381E7A83D9BEBA2014B2C5301D9CBF2939A122A8A7ABF168E3D309422D89A40503600C06C72412872F119661B5C91C2BFDDB687C5C90027C4E4E15C34EB35CC5B0D23EEB4FEA44B6705E349738317C8F3FE0B5B4056E29386E3DEF440334A03F", secretKey64);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey64);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[15, 43, 62, 103, 119, -70, 51, 53, 77, -111, 91, 119, 67, -48, 102, 51, 124, 62, 64, -28, 10, 13, 16, 21, 108, 116, -109, -60, 80, -12, -122, 60, 56, 4, -83, 55, -48, -110, -93, 8, -127, -117, 64, 92, 117, 3, 35, -120, 77, 47, 5, 98, 78, 114, 69, -112, 59, 27, 25, 38, -26, 121, 99, 115, -103, 118, 52, 108, 126, -3, -84, 116, 122, 18, -39, 39, 121, 82, 81, -4, 2, 45, -33, 84, -49, -80, 10, 73, 106, -121, 104, 25, 38, -18, -23, -89, -28, -36, 109, 54, 65, -85, -86, -56, 11, -1, 31, -57, 60, -16, -3, -115]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-64, -106, 29, 89, 22, -5, -81, 44, -68, -21, 20, -99, -24, 22, -47, 44]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-4, -111, -91, -117, -110, 120, -59, -43, 12, 112, 58, 52, 42, -73, -48, -86]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[78, -77, 15, 32, 79, -88, -106, 15, -118, -115, 17, -1, 71, -85, -21, -21]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[43, 102, 1, -116, 37, 87, 89, -48, -55, 121, -79, -24, 46, -123, 126, 21]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[39, -33, -123, -88, 37, -15, 18, -93, 37, 26, 62, -33, 27, -104, -117, -113]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[119, -24, -75, -64, 23, 122, -87, -118, -11, 18, -75, 63, 54, 103, -30, -97]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[57, -107, -78, 30, -122, 82, 26, -72, 43, 57, -124, -49, 59, 57, 92, 125, -123, -82, -98, 29, -4, -26, 62, 73, 2, -122, 4, -72, -88, 59, -59, 99, 39, -33, -123, -88, 37, -15, 18, -93, 37, 26, 62, -33, 27, -104, -117, -113]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-11, -73, -54, 44, 47, 20, -9, 126, 122, -57, -87, -98, -105, 54, -47, 17, 74, -76, -124, -72, 20, -94, 76, 70, 122, -113, -127, -99, -15, -121, 62, -111, 39, -33, -123, -88, 37, -15, 18, -93, 37, 26, 62, -33, 27, -104, -117, -113]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[41, 51, -101, 48, -79, 62, -58, 95, -104, 41, -3, -69, -97, -76, 107, 123, -31, -90, 32, -100, 81, 117, -76, 96, -36, 43, 47, 4, 75, 55, -78, 10, 31, 3, 96, -43, -113, 96, 93, 51, -37, -91, 5, -51, 66, 23, 45, 87, 59, -99, -123, -49, 118, 87, -51, -5, 26, -35, -39, -10, 85, 25, -13, 31, 99, 19, -100, 0, 88, -72, -77, -89, 2, -105, -53, 42, -112, 35, -127, 124, -72, 59, 27, -68, -106, -57, 95, -13, 73, 108, -56, -61, -86, 31, 107, -64, 39, -33, -123, -88, 37, -15, 18, -93, 37, 26, 62, -33, 27, -104, -117, -113]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-84, -95, 102, 96, -117, 18, 26, -122, -124, -109, 74, 61, 62, -6, 61, 88]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-93, -70, 0, -116, -18, -83, 18, 85, 66, -92, -80, 72, 119, -50, 1, 113]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-93, -40, 46, -116, -68, -38, -37, 102, -40, 127, -75, -76, -24, 33, 96, 92]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[12, 66, -6, -55, 47, -62, -4, 122, 67, -116, 92, 4, -36, -125, 49, 92]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[43, 41, 73, 45, 24, 93, -43, -11, 42, -33, 118, 23, 124, 111, -18, 29, 101, -75, -68, 43, -87, 0, 98, -105, 11, -115, 32, -85, 55, 78, 85, 107, -93, -40, 46, -116, -68, -38, -37, 102, -40, 127, -75, -76, -24, 33, 96, 92]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey12);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey12);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey12);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey12);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey12);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey12);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey30);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("6DAC8750C5C2768296853999EA9F9475D71E1F08FDD67496FD60C8EE53EFAA519E0A11D7CB91939C07D60B0D78EACD34D2BD4A9BA8B04C66199A6A0ED9ED634054242FD8B063F6695B9E81C7783D7CDF24F0C346A5E5C3C09AE563846CCD34F74F1F80504E4E2EE93F71126C8D21E032", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-127, 19, -111, -1, -110, -41, -100, -92, 41, 38, 61, -51, 62, 72, 90, 121]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[60, 100, -61, 115, 34, 42, 78, -120, -30, -75, 75, 28, -49, -75, -4, 24]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[60, 100, -61, 115, 34, 42, 78, -120, -30, -75, 75, 28, -49, -75, -4, 24]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[121, -7, 85, -57, 101, -16, -73, 48, -50, -54, -103, 21, -103, 77, -4, -104]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[60, 100, -61, 115, 34, 42, 78, -120, -30, -75, 75, 28, -49, -75, -4, 24]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-106, 54, 126, 89, 98, -81, -97, -70, 0, -94, -52, -73, 85, -68, -92, -65, -4, -36, -100, 6, 52, 5, 12, 108, 38, -106, 93, -46, 5, 82, -21, -25, -127, 19, -111, -1, -110, -41, -100, -92, 41, 38, 61, -51, 62, 72, 90, 121]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, -97, -20, 26, 17, -123, -46, -52, -16, 96, 33, -66, -24, 126, -79, 120, -30, 94, 75, 20, 116, -62, 107, -61, 95, -15, 88, -12, -97, 120, -33, -101, -77, 71, 36, -26, -14, -111, -119, -42, -15, -1, 119, 46, -62, -103, 43, 59, 28, 97, -97, 5, 76, -84, 41, 79, 41, -80, 67, -123, 51, -88, -74, 18, 100, -36, -98, 21, 108, -85, -51, -48, 87, -49, 126, 127, -1, -30, 37, -118, -59, 125, -125, 125, 81, 93, -92, -25, 51, 49, -128, -51, 36, 117, -12, 96, -127, 19, -111, -1, -110, -41, -100, -92, 41, 38, 61, -51, 62, 72, 90, 121]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[28, 10, -43, 120, 105, -101, -60, -106, 121, 107, 27, -21, 74, -69, -11, 92, 59, -35, 93, 113, 115, 120, 5, -41, -87, -100, -110, 29, -69, 84, 70, -102, -76, -38, 30, 21, 44, -127, -79, 77, -99, -17, -32, -77, 58, 1, 45, -77, 25, 61, 39, 87, -82, 50, 113, -111, 45, -83, -126, 96, -102, -63, -54, 54, 126, 116, 98, 40, -20, -59, -55, -41, 73, 53, -108, 76, 28, 106, 119, 36, -90, 114, -80, -71, 7, 21, -102, -92, -96, -105, -49, 101, -103, -53, -127, 88, -127, 19, -111, -1, -110, -41, -100, -92, 41, 38, 61, -51, 62, 72, 90, 121]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-75, -105, 89, -37, 12, 11, -63, -102, 45, -85, 56, 48, 22, 65, -125, 68, -69, 123, 124, 40, -65, 78, 105, -90, 72, -34, -21, 39, -29, -83, -9, -8, -127, 19, -111, -1, -110, -41, -100, -92, 41, 38, 61, -51, 62, 72, 90, 121]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-127, 19, -111, -1, -110, -41, -100, -92, 41, 38, 61, -51, 62, 72, 90, 121]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-37, 53, 121, -71, 13, -115, 119, 123, -125, 116, -55, -70, 46, -98, 43, 27, 16, -56, -10, 103, -6, 124, -118, 21, 26, -77, 26, -66, 98, 96, -19, 125, -127, 19, -111, -1, -110, -41, -100, -92, 41, 38, 61, -51, 62, 72, 90, 121]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DBB1CC1C62D5CCCC08D77700C60194CF1D05A0436B7BA237B5E0316574222D4278962580A24C362AC514E69E650C3808E8CB8C5EBF13205B8306A35F886C8F4BB6FBFBD7BB5005302ABFF35C2C6AC2E5C81D62143F6A2B71BE76FBB9CCCE9FC96BBEE7FC0754CDC7B09B7CFED61930F11E46689B74D7E2E0FD9DB2C473317AB6C9AF72369466434B772DBE9607971747B06A67F8367AD4A04CF6267F2A37E0AD3460747113DD171AE23D28ACCC5F6F5246E5BEB12DB52C156F0045751567B5D6FD15B3170CA36A10C3FC6AB2D508EEE44FD5C9D0CC6BF3E95D636D0A5907E511811391FF92D79CA429263DCD3E485A79" + "'", str25, "DBB1CC1C62D5CCCC08D77700C60194CF1D05A0436B7BA237B5E0316574222D4278962580A24C362AC514E69E650C3808E8CB8C5EBF13205B8306A35F886C8F4BB6FBFBD7BB5005302ABFF35C2C6AC2E5C81D62143F6A2B71BE76FBB9CCCE9FC96BBEE7FC0754CDC7B09B7CFED61930F11E46689B74D7E2E0FD9DB2C473317AB6C9AF72369466434B772DBE9607971747B06A67F8367AD4A04CF6267F2A37E0AD3460747113DD171AE23D28ACCC5F6F5246E5BEB12DB52C156F0045751567B5D6FD15B3170CA36A10C3FC6AB2D508EEE44FD5C9D0CC6BF3E95D636D0A5907E511811391FF92D79CA429263DCD3E485A79");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-61, 124, -50, -102, -34, -84, 21, -98, 25, -55, 33, 40, 63, -121, -56, 24]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[14, -77, 108, -23, 55, -101, -93, 82, 6, 61, 74, 0, -116, 10, 69, -101]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[33, -121, -122, -54, -68, -91, -26, 45, -103, -7, 15, -47, 32, 62, 31, -74, -118, 72, -32, -23, 80, -76, -24, 80, 55, 17, 45, 101, 77, 63, -57, 67, -61, 124, -50, -102, -34, -84, 21, -98, 25, -55, 33, 40, 63, -121, -56, 24]");
        org.junit.Assert.assertNotNull(byteArray34);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey13);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-79, 89, 63, -21, -118, 11, -25, -127, 25, 35, -14, 87, 84, 1, -59, -123]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[95, -76, 5, -105, 25, 19, -57, -118, -4, -81, -41, -85, 4, 71, 116, 58, -118, -76, 0, -118, 3, 101, -45, 104, 86, -3, 37, 77, 90, 59, 102, -91, -52, -78, 106, -103, 119, -81, 103, -108, 112, -18, 62, -87, 55, -113, 81, -92]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-52, -78, 106, -103, 119, -81, 103, -108, 112, -18, 62, -87, 55, -113, 81, -92]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CCB26A9977AF679470EE3EA9378F51A4" + "'", str27, "CCB26A9977AF679470EE3EA9378F51A4");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CCB26A9977AF679470EE3EA9378F51A4" + "'", str28, "CCB26A9977AF679470EE3EA9378F51A4");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-96, -116, -56, -1, 100, 61, -67, -84, -119, -22, -72, 21, 101, 17, -83, 92]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-5, -62, 62, -17, -44, 120, -49, -9, -8, -115, 45, -94, 29, 84, 126, -10]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-5, -62, 62, -17, -44, 120, -49, -9, -8, -115, 45, -94, 29, 84, 126, -10]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-28, 34, -18, 68, 46, 0, 7, 35, 28, 78, 69, -37, -102, 112, -67, -72]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-96, -116, -56, -1, 100, 61, -67, -84, -119, -22, -72, 21, 101, 17, -83, 92]");
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey61);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey61);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey61);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey61);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[7, -20, 36, 49, 89, -103, 19, 29, -64, -83, 61, -66, -73, -61, -115, 66]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[25, 22, 1, -36, -24, -10, 22, -7, 46, 67, -28, 18, -32, 53, -75, -89]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[25, 22, 1, -36, -24, -10, 22, -7, 46, 67, -28, 18, -32, 53, -75, -89]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "191601DCE8F616F92E43E412E035B5A7" + "'", str7, "191601DCE8F616F92E43E412E035B5A7");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "191601DCE8F616F92E43E412E035B5A7" + "'", str8, "191601DCE8F616F92E43E412E035B5A7");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "191601DCE8F616F92E43E412E035B5A7" + "'", str9, "191601DCE8F616F92E43E412E035B5A7");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-119, -72, -105, -108, 23, -83, -14, 80, 59, 43, -33, 93, -1, 45, 109, -110]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 35, -17, -8, -88, -45, -96, 90, -85, -75, 90, 46, -2, -117, 50, 77]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[89, 24, -33, -73, 81, 60, -86, 38, 65, -37, 126, -68, -126, -115, -31, 80]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[73, -62, -70, -52, 78, -47, -114, 85, -6, 98, 7, 89, -42, -70, -8, 97]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-90, -20, 64, -58, 11, 77, -107, -48, -91, 1, -121, -54, 83, 27, 12, 124]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-38, -43, 112, -66, 36, -22, 91, 117, -73, -86, 18, -81, -55, 6, 99, -102]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[109, 16, -63, -15, 83, -20, 85, 33, -123, 112, -56, -109, -43, 6, -112, -98]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-88, 0, -111, -66, 104, 7, 124, 51, -30, 29, -74, -93, 50, 44, -48, 105]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-46, 26, -57, 0, 58, -72, -87, -20, -110, -21, -128, -114, -128, 86, -45, -109]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-67, -90, -24, -24, 37, 39, 13, 19, -93, -81, -74, 2, 119, 58, -115, 71]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-62, -41, 10, 6, 101, 0, -3, 69, 74, -88, 26, 103, 65, 89, 39, -124]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-46, 26, -57, 0, 58, -72, -87, -20, -110, -21, -128, -114, -128, 86, -45, -109]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        java.lang.Class<?> wildcardClass63 = byteArray60.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-83, 34, -122, 76, -28, 37, 113, -84, 89, -98, -89, -55, 101, 51, -53, -92]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 31, 108, 99, 112, 52, 9, 111, -99, -14, -104, 18, 2, -126, 66, 106]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-68, 68, 103, -83, 11, 125, 47, 35, -37, 104, -65, 109, 92, 42, 58, -58]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-100, 115, 63, -62, 6, -118, 93, -112, 10, -98, 65, -3, 21, -13, -61, 24]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-26, 8, -77, -9, 16, 0, 47, -30, 11, -29, 94, 68, 14, -27, 124, 36]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-83, -56, -18, 53, 103, -67, 18, -94, -9, 31, 8, -42, 40, -42, -1, 0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[98, 100, -48, -101, 22, 14, -2, -121, -86, 66, 26, 32, 119, 68, -123, -10]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-114, 60, -19, -35, 126, -35, -113, -28, 24, -38, 67, 120, -50, 77, 21, 122]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[101, 15, -74, -88, -83, 116, -125, 55, 61, 53, 13, -77, 12, 106, 99, 113]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-29, 11, 82, 88, -97, -57, -115, 102, -82, 113, -41, -51, 32, 87, 64, -67]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-65, 93, -94, -69, 70, -28, -9, -11, 33, 16, 29, 65, -118, 119, 52, 6]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[101, 15, -74, -88, -83, 116, -125, 55, 61, 53, 13, -77, 12, 106, 99, 113]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-8, 114, -58, -22, -113, -65, 32, 27, -39, 21, -112, -21, -19, -78, 62, -107, -16, -19, -107, -95, 13, 68, 39, 115, 79, -18, 69, 54, 126, -108, 119, -62, 101, 15, -74, -88, -83, 116, -125, 55, 61, 53, 13, -77, 12, 106, 99, 113]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-29, 11, 82, 88, -97, -57, -115, 102, -82, 113, -41, -51, 32, 87, 64, -67]");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "E30B52589FC78D66AE71D7CD205740BD" + "'", str61, "E30B52589FC78D66AE71D7CD205740BD");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "E30B52589FC78D66AE71D7CD205740BD" + "'", str62, "E30B52589FC78D66AE71D7CD205740BD");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.Class<?> wildcardClass61 = secretKey52.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-110, -79, -81, 118, -26, -39, 66, -2, 13, -52, 66, -51, 45, 83, -31, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[55, -106, -33, -7, -13, 126, -52, -63, 123, 121, 49, -123, 1, 60, 83, -50]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[54, 77, 62, 111, 113, -11, 38, 44, 103, 126, -49, -51, -21, 116, 41, 20]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-5, -7, 69, 22, 29, 5, -121, 96, -104, -61, 21, 33, -52, -112, -78, -48]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-75, 126, -106, 51, 5, 56, 36, -39, -55, 9, 84, 70, -37, 90, -126, 0]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[86, 116, 20, -127, 109, 73, 45, -80, -123, -10, 58, -101, 61, 89, -75, 12]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[111, 52, -74, 72, 7, 2, -64, 31, -92, -89, 89, -56, -79, -38, -10, 88]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-116, -19, -121, -67, 94, -53, 7, 78, -88, 122, -122, 2, -10, 98, -78, 76]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[8, -21, 95, -18, 82, -120, -14, 30, -4, 63, 68, 96, -83, -36, -81, -62]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-87, 114, 56, 123, -73, 123, -94, 38, 44, 82, 15, 8, -114, -66, -13, -121]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-98, 108, -95, -56, 67, 102, 78, -7, -12, -8, 66, -33, -128, -44, 120, 126]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[8, -21, 95, -18, 82, -120, -14, 30, -4, 63, 68, 96, -83, -36, -81, -62]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[30, -63, 52, 44, 96, -8, -40, -53, 20, 123, 106, 53, 111, 43, -101, -13, 17, -70, -78, -123, 55, 29, -59, 3, -82, 107, 13, 74, -107, 96, 41, 46, 8, -21, 95, -18, 82, -120, -14, 30, -4, 63, 68, 96, -83, -36, -81, -62]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-87, 114, 56, 123, -73, 123, -94, 38, 44, 82, 15, 8, -114, -66, -13, -121]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey18);
        java.lang.Class<?> wildcardClass25 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[44, -26, 127, 28, -51, -14, 64, -26, -79, 17, 110, 4, 82, -113, 31, -126]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-111, -29, 126, -11, -108, -85, 70, 69, 97, -42, -38, 69, 75, -81, 7, 105]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[83, -16, 106, -98, 13, 124, 43, -87, -111, 43, 11, -14, 59, 73, 81, 79]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-102, 43, 127, -27, -80, 105, -28, -66, 91, 74, 59, -65, 82, 9, -44, 87]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-60, 105, -55, -101, 49, -17, -60, -96, -48, 7, -12, -24, 94, 21, 72, -70, 23, -58, -95, -127, -23, -74, -98, 122, 71, -51, -96, 30, 58, -23, -27, -106, 83, -16, 106, -98, 13, 124, 43, -87, -111, 43, 11, -14, 59, 73, 81, 79]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[107, 81, -24, -91, -83, -106, -71, 52, 88, -16, -89, -96, 73, -26, 31, 52, -55, -56, 25, 22, 19, 9, -101, -64, 42, 77, 115, 79, -80, 84, -32, 12, 83, -16, 106, -98, 13, 124, 43, -87, -111, 43, 11, -14, 59, 73, 81, 79]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey38);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey49);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("FD28D510F4998FA5EE33D9EED961935F", secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey49);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[27, 65, 86, 21, 32, -80, -36, -63, 103, -33, 40, 110, -89, -60, 116, -119]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[126, 63, 108, -99, -101, 66, 11, 80, -97, 84, -108, -41, -99, -55, -38, 105]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[63, -121, -116, 105, -60, -78, -76, 120, -18, -82, -34, 123, 44, 10, 69, -83]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-66, -92, -16, 91, 41, -115, 37, 32, 107, -66, 53, -103, 125, 107, 116, 80]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[96, -63, 97, -6, -57, -63, -83, 80, 51, 116, -62, -122, 112, -69, -110, -14]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-19, -32, -19, 122, 16, 39, -64, -6, 10, -77, -32, 80, -33, 89, 20, 107]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[108, -109, -102, 63, 84, 8, 113, -112, 51, 47, 5, -115, -121, -95, -21, 52]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[29, 36, -88, 73, 117, -20, -1, 25, -86, 104, 32, 61, 34, -6, -86, -9]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-67, 113, -28, 27, -59, -54, -36, 92, -36, 63, 31, -4, -15, 102, 109, -103, 115, -125, 105, 12, 51, 103, 41, 74, -119, 62, 98, 66, -108, 67, -45, -49, 108, -109, -102, 63, 84, 8, 113, -112, 51, 47, 5, -115, -121, -95, -21, 52]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[28, -15, 46, -86, -34, 19, -94, -33, 87, 32, -75, 73, 118, -116, 9, -74]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[9, -60, -65, -20, 35, 127, 13, -120, -103, -104, -90, 114, 119, -6, -88, 100, 10, -74, -39, -23, 90, -57, -36, -65, -91, 32, -97, 57, 38, 76, 89, -48, -77, -2, -79, 20, 118, 118, 19, 123, 96, 36, -31, 44, 116, -8, -97, -59]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey33);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0B3F770D0055D0086E4D5F34677807F643C52681888CF416427DA1BEF08CAF1787327C11DC64B59CF2B3E256003EC1C5DC733E5C890287207AD99467D8686ED5F4F64B8AFC0545EE2C1DCF50C4F4F9FEE0D707DBA4C46C56651B9B2B97612479DE9281D9476441CF2DE866714363BDAED9F5A8E83701A8E0F6B9F3EA7912686D326EBE4F95BB8136F84EF04DB9499A268ECF8C8E1BCAF3F95D8DE36EAB145B0A3DB211EC704215BD747BEBE3650F3A502E0A3FCC48C59869EB6466C1927E84E5A9F4C8CF836DEA5D92E25D34628563E33B6E89C7BDA68B0745F97FA99F971C7A84969C242F20003AB3BC7589946F98B", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("36EC6B46BA8F99DFC836AE9F7C1209D6232EDCA84F73A911452AACC757062A1097720CE097BB52D31EB54AF449114770", secretKey33);
        java.lang.Class<?> wildcardClass42 = byteArray41.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-111, 106, 39, 67, 11, 9, 8, 80, -91, 120, 31, -29, 125, 37, 13, 48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[33, -33, -24, -81, 29, 47, 81, 43, 42, 106, -21, -56, -14, -112, -120, 39]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-91, -5, -79, -95, -1, -59, -14, 40, 78, 5, -54, -104, -45, 21, 22, -4]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-30, -58, -26, 105, 94, 85, -56, 10, -2, 107, -75, 95, -83, 86, -51, -17]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[59, 67, 99, -69, 4, 99, -108, 30, -72, 88, -13, -88, -18, -77, -27, 13]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-11, -110, -14, 123, 60, -67, 127, 106, 109, -11, -16, -63, 52, 105, -96, -20, -2, -65, -58, -81, 62, -111, 45, -93, 60, 34, -33, 35, 95, -30, -113, 47, -30, -58, -26, 105, 94, 85, -56, 10, -2, 107, -75, 95, -83, 86, -51, -17]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[81, 95, -65, 15, 127, -117, -2, 52, 24, 56, -123, 97, 65, 6, 75, 97, 111, 50, -39, -92, -7, 73, 50, 120, -33, 127, -48, -11, 104, -41, 14, 37, -86, -93, -102, 94, 97, 76, -66, -51, -41, 53, 23, -17, 53, -108, 5, -97, 23, -72, 38, 45, -51, 36, 124, 109, -112, 14, 116, 81, 94, -83, -98, 115, -73, -30, -119, 23, 29, 64, 26, -18, -30, 1, -2, -18, -33, 49, -20, -53, -71, -2, 58, -19, 108, 58, -68, 100, -28, 86, 14, 86, 92, 36, 118, 22, -30, -58, -26, 105, 94, 85, -56, 10, -2, 107, -75, 95, -83, 86, -51, -17]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.Class<?> wildcardClass12 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-23, -84, 47, 52, -80, -44, -51, 24, -32, 9, -70, 47, 5, -91, 58, 109]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[31, 110, -97, -90, 112, -115, -101, -88, -10, -87, 11, 60, -124, 24, 73, 28]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[18, -35, -34, -75, 102, 41, -50, 58, 124, 110, -28, -110, -27, -103, 40, -77]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-23, -84, 47, 52, -80, -44, -51, 24, -32, 9, -70, 47, 5, -91, 58, 109]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[50, -45, 121, -43, -72, 120, -120, 94, 20, -47, 33, 115, -7, -76, -10, -2, 80, -36, 86, -39, -127, -6, 21, -66, -92, -30, -50, -27, -39, -122, -47, -6, -23, -84, 47, 52, -80, -44, -51, 24, -32, 9, -70, 47, 5, -91, 58, 109]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32D379D5B878885E14D12173F9B4F6FE50DC56D981FA15BEA4E2CEE5D986D1FAE9AC2F34B0D4CD18E009BA2F05A53A6D" + "'", str11, "32D379D5B878885E14D12173F9B4F6FE50DC56D981FA15BEA4E2CEE5D986D1FAE9AC2F34B0D4CD18E009BA2F05A53A6D");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey47);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey47);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey75);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey84 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey84);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey84);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey84);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey84);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey84);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey84);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey84);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey84);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey84);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey84);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass96 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, -109, -119, -79, -110, -103, 80, -104, -49, 86, 96, -46, 108, 47, 61, 88]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-101, 46, 35, -6, 31, -10, 58, -37, 120, -125, -15, 78, -11, 117, -31, 44]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-41, -19, 61, 108, 100, -25, -34, 100, -108, 52, 108, -14, -34, -67, -47, 69]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-115, -102, 74, 126, 2, 119, 57, -31, 110, 53, -6, 39, -69, 10, -9, -112]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-102, -53, -66, 0, -109, 103, -105, -108, -94, -38, 31, -89, -60, -13, -91, -32]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-4, -34, 102, 22, -54, -92, -97, -19, 75, -38, 63, -1, 46, -6, 41, 45]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[34, 108, 63, 84, 82, -4, 124, 41, -32, 73, 95, 31, -47, 104, 58, -27]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-109, 50, -15, 109, 49, 3, -75, 105, -26, -84, 32, -61, -69, -93, -14, 39]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[107, 95, -55, 65, -66, 46, -101, -83, 68, -109, 10, -110, 50, 106, -86, 32]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-111, 45, 25, -124, -1, 107, -13, -79, 25, 30, 4, 112, -87, 6, 96, -85]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-111, 45, 25, -124, -1, 107, -13, -79, 25, 30, 4, 112, -87, 6, 96, -85]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[124, 104, -31, -104, 58, -4, 111, -108, 115, -124, -61, 20, -124, -122, -36, -99, 29, 66, 57, -62, -86, -75, 14, -28, 116, -38, 102, 107, -2, 114, -32, -18, 107, 95, -55, 65, -66, 46, -101, -83, 68, -109, 10, -110, 50, 106, -86, 32]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 45, 68, -74, -51, 24, -26, -30, -67, 3, 111, 107, -11, -47, 21, 30]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-40, -92, 97, -22, 11, -104, 117, 17, 64, -117, -115, -92, -9, -24, -58, 52]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-55, -16, -116, 99, -50, 70, -83, 49, 84, -127, -35, 68, 55, 124, 82, -121]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[31, 60, 123, -68, 49, 43, 106, 76, -55, -25, -31, 81, -127, -98, 101, -93]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey84);
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[2, 46, -127, -109, 23, -42, -67, -26, -94, -67, 31, 123, -35, 63, -110, -64]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[49, 122, 37, 30, -35, -58, -18, -66, -29, 25, 83, -105, 70, -13, -61, 82]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[49, 122, 37, 30, -35, -58, -18, -66, -29, 25, 83, -105, 70, -13, -61, 82]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[66, -82, 47, 104, 66, -66, -47, 27, 9, 11, 114, -109, 105, -93, -102, 21, -122, -99, 30, -58, 68, 10, -22, 56, -24, 22, -3, -67, -58, 125, 82, 101, 2, 46, -127, -109, 23, -42, -67, -26, -94, -67, 31, 123, -35, 63, -110, -64]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[8, 28, 41, -89, -73, -70, 12, 85, -100, 14, -111, -37, -47, 73, 50, 93, 87, -19, -39, 55, -103, 126, 41, 77, -49, 44, -3, -58, 27, 125, -128, -95, 2, 46, -127, -109, 23, -42, -67, -26, -94, -67, 31, 123, -35, 63, -110, -64]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey54);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey54);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey54);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey54);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("BD668A117D0313E58D1FFC562B6A9CE30E3C6561CE8F23362E4F050812CAAB0AC573ACF2D00DCFEE4AAE999B0D95269229E380BEBD15F4773B391955C417414A52E82F97D9F11CCAD3C54C412C4002F8819B1FB98BFCA10CEAFF4656CFD87A8004FCA05D2E7BF6C8724A4B9D69214A6A", secretKey54);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray64);
        javax.crypto.SecretKey secretKey66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey66);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-107, 83, 88, -30, -106, 68, -65, -123, -120, 120, 93, -26, 16, 3, -51, -122]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[59, -75, 90, -28, -69, -54, 49, -127, -29, 4, 77, -50, 99, -79, 27, 11]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-85, -1, 37, -76, 7, -68, -74, 18, 87, -87, -44, -94, -35, -47, -17, -66]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, -124, -84, -82, 127, 123, 41, -80, 64, 0, -15, -61, 124, 14, 120, 7]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-105, -50, 56, 74, 120, -94, -38, -39, -42, -2, 65, -74, 104, 29, 43, -12]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[49, 104, -80, 58, -128, 103, -113, 44, -70, 115, 108, -125, 97, 6, -44, -41]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[83, -25, 37, 53, 13, -1, -21, -97, 86, 65, 75, 10, -80, 36, 101, 119]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-20, 71, -33, 34, -80, -96, -124, 110, 58, -95, -107, 18, -70, -75, 100, 16]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-77, 2, 71, 25, 87, -48, 77, -119, -41, 33, 89, 58, 77, -15, -85, -7]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[107, 28, 114, 116, 32, -63, 77, 30, -90, 117, -60, 16, 17, 16, 86, -11]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[37, -112, 74, -120, 95, -81, 58, -94, 84, 89, 109, 104, 56, -61, -9, -76]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-77, 2, 71, 25, 87, -48, 77, -119, -41, 33, 89, 58, 77, -15, -85, -7]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-19, -78, -21, 99, -8, 92, -8, -87, -16, 103, -115, 58, -45, 59, -70, -44, -64, 64, -49, -72, -87, -5, 76, 72, 31, -54, -25, 44, 120, 94, 78, 106, -77, 2, 71, 25, 87, -48, 77, -119, -41, 33, 89, 58, 77, -15, -85, -7]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-77, 2, 71, 25, 87, -48, 77, -119, -41, 33, 89, 58, 77, -15, -85, -7]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "5DDC9B654D03CDAB1E7D69114FBDB4022224C25BCDEB42D2E9AE76C532948C6EB3E8EB948781C7700847FA522944F0544B6459919FF8A7D7B86129F0D061AB4D6E87FEFF59EAC31CE720EFC7057610D78B6B3CF0B6A9272D8C96E888B0649399A180C72A07122116F060CA6156845DBC695E26BADF7DC9C4AEF3AE1BDB24EFF685024777E5F9D4430E5F40FA4C4D2734DE1E89019808B3F205FA3A1E70C0B8564471CF865FD16B4524664D4D23097CAD13075FDD08A0209FD6213001F6A1F294A9CB205F328733FB5ACDFCF47EA3055BBA0C7233FE573DC6F21E9D6810D50C73B302471957D04D89D721593A4DF1ABF9" + "'", str65, "5DDC9B654D03CDAB1E7D69114FBDB4022224C25BCDEB42D2E9AE76C532948C6EB3E8EB948781C7700847FA522944F0544B6459919FF8A7D7B86129F0D061AB4D6E87FEFF59EAC31CE720EFC7057610D78B6B3CF0B6A9272D8C96E888B0649399A180C72A07122116F060CA6156845DBC695E26BADF7DC9C4AEF3AE1BDB24EFF685024777E5F9D4430E5F40FA4C4D2734DE1E89019808B3F205FA3A1E70C0B8564471CF865FD16B4524664D4D23097CAD13075FDD08A0209FD6213001F6A1F294A9CB205F328733FB5ACDFCF47EA3055BBA0C7233FE573DC6F21E9D6810D50C73B302471957D04D89D721593A4DF1ABF9");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E1967767FBCA9187364B14093D005B637DBE91B2976363574232CE85116F01D166B47891C81BDBC9F77F8848CC39E71474A928EB91D881CDF9EC4DDE7252AA9A435EE1BDE8B240F21A1D1B4FFE75996226C1CD2BD742FFA9ABCF23870D8001A51036471E38BC7ED00A707B277F1A2A85EF0F14916F4C16777ECF2D34D7B4D2FF1AF4CBBADF4C95C01B48726F27A04FD1A7B178BF9E45868E2CA232F29FFDC5E005017B2E23B8CD5D8CC1C102CC4BF9A9F32B22A9F474104BFC0E8CB9863C7DB708EF3F149A810CEEEE2FE64315F32241590357462707D8F48DC82B9D18378750266F61B97521CE0AB6AF87A58E2585C", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey5);
        java.lang.Class<?> wildcardClass10 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-97, -15, 64, 114, -104, -50, -51, -66, 115, 39, 16, -99, -62, -13, 102, 23]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[125, -13, 34, -54, -97, 18, -44, -85, 13, -114, 3, 48, 95, -108, 34, -69, 46, -26, 117, -121, -26, 119, 2, 100, -67, 98, -128, 75, -90, -76, 69, -12, -65, 82, 114, 49, -68, -7, 51, 53, 118, -87, -29, -22, 104, -88, 82, -55]");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey19);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey49);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey49);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey49);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-50, 37, 6, 2, 33, -40, -126, 15, 118, 124, -107, -97, -67, -11, -80, 42]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-114, -64, 22, 75, -7, -117, -79, 104, 37, 35, -26, 14, 26, 51, -111, 94]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[29, 36, -13, -90, -30, -57, -94, 73, 109, 6, -125, -115, -24, -77, -36, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[119, 25, 90, 16, 54, -39, 41, 116, 4, -44, -103, 12, 17, -94, -50, 8]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-105, 100, 7, -65, 109, 38, -14, -127, -122, 23, 7, -33, -75, -11, 45, 29, -119, 9, 72, 81, -74, 60, -109, 32, 105, -41, 75, -43, 4, -84, -96, -127, 29, 36, -13, -90, -30, -57, -94, 73, 109, 6, -125, -115, -24, -77, -36, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[13, -120, 8, -94, -11, 69, 116, -53, 29, 70, -12, -90, 107, -72, 82, -126, -126, 25, 110, 1, -107, -70, -28, 118, 62, -55, 73, -81, -114, 108, -23, 23, 29, 36, -13, -90, -30, -57, -94, 73, 109, 6, -125, -115, -24, -77, -36, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-101, -3, 110, -4, 67, 50, -1, -128, 99, -24, -85, 103, 17, 68, 49, -58, -94, -61, -58, 80, -15, 52, -83, 72, 28, 97, -30, 42, -125, -22, -13, -90, -73, 43, -47, 126, -92, -62, -118, 19, -126, -2, 48, 65, -113, 61, -84, 18, -25, -100, 47, -1, 23, 45, -61, -8, 15, -44, 29, 63, -52, -36, 81, 100, -111, -128, 24, 74, -102, 40, 104, 108, 2, 93, 29, -44, 12, -43, -86, 40, 113, -50, 95, -72, 96, 31, -100, -58, 117, 49, 6, -15, 50, -95, -113, 108, 29, 36, -13, -90, -30, -57, -94, 73, 109, 6, -125, -115, -24, -77, -36, 0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-55, 54, -86, 96, -61, -2, 2, -92, -46, -44, -59, 74, 99, 19, 69, -123]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-38, 74, 65, -117, -51, -97, 24, 115, 111, -82, 43, -56, -23, -46, -3, -3]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-19, 118, 91, 15, 103, -90, 7, -112, 49, -122, -87, -50, -68, -37, 9, 115]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[119, -86, -59, 61, -116, 3, 10, -62, -58, 103, 93, 117, 107, 46, -40, -70]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-31, 59, -9, 63, -42, -97, -42, -58, 17, 57, -109, -89, 23, 31, -94, -36, 79, -71, 122, -52, -102, 5, -48, -108, 76, 4, 115, 31, 1, -48, -113, -33, -19, 118, 91, 15, 103, -90, 7, -112, 49, -122, -87, -50, -68, -37, 9, 115]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-84, -41, 88, 17, 8, -61, -72, -44, -96, -41, 1, -59, 46, 30, -33, -82, -62, 60, -79, 9, 44, 24, -16, -71, -71, -61, 80, 113, -3, -8, 75, 96, -19, 118, 91, 15, 103, -90, 7, -112, 49, -122, -87, -50, -68, -37, 9, 115]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[68, -45, 122, 20, -58, -78, 115, 7, -99, 15, 58, -87, -91, 71, 98, -90, 26, 59, 67, -35, 86, -11, 11, 104, 125, -112, 55, 82, -114, 46, 38, -67, -66, -47, -98, 57, -31, 51, 0, 77, 20, 117, -14, -99, 66, 107, -54, -73, 3, 22, -83, -30, -10, -3, 41, -31, 104, 60, -100, 106, 99, -78, -80, -63, 53, 54, -25, -46, 111, -37, -29, -81, -127, 16, 111, -43, -65, -81, 112, 105, -112, -50, 27, -128, -107, -120, 124, 105, -119, 97, 109, 90, 79, -21, -117, 50, -19, 118, 91, 15, 103, -90, 7, -112, 49, -122, -87, -50, -68, -37, 9, 115]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-103, 1, -37, 16, 107, 35, 107, 4, 113, -46, 36, 3, -128, -67, -119, -49, -62, -52, 17, -128, 2, -50, -59, -28, -52, 100, -86, -14, -57, 33, -13, -1, 67, 113, -16, 101, -1, -49, -49, -119, 97, 92, -116, -85, -2, -21, 108, 58, -117, 68, 37, 15, -86, 51, -22, 34, -119, 75, -114, 62, 120, 45, 62, 54, -25, 105, 66, -65, 109, -74, -46, -117, 125, 106, 52, 0, -21, -62, 23, -4, 17, -4, -92, 124, 69, -26, 50, 57, 40, 2, -111, -18, 6, 6, 75, -67, -19, 118, 91, 15, 103, -90, 7, -112, 49, -122, -87, -50, -68, -37, 9, 115]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-19, 118, 91, 15, 103, -90, 7, -112, 49, -122, -87, -50, -68, -37, 9, 115]");
        org.junit.Assert.assertNotNull(byteArray59);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey23);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey23);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("F216E19500A2E163BFDB4D468C3AC4C2D82FC555FBD45BC1B385D6A133775C1DE5A763C958D76CA659E0E38F63F9A22B", secretKey23);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("9B81C6E367A0128616E38549659C20803D6F05C62470E98C6ECE221E4A1BB20A2B3C5761AF981D74A9ABC4A1773C7188", secretKey23);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey58);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey58);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey58);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey58);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey58);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey58);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey58);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-20, 31, 107, -116, 22, -80, 119, 79, -91, 50, -82, 124, 86, 37, 79, -121]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-20, -83, -28, -111, 127, -118, 44, -99, 10, 68, 28, -46, -104, 92, 120, 73]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[116, 107, 40, -100, 79, 55, 107, -117, 69, 92, -70, -110, -22, 22, 85, -93]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[12, -50, -13, -45, 20, -50, -77, 104, -118, -26, -67, -37, 65, -108, -23, -102]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-14, -107, -70, -32, 78, 29, -96, 29, -103, -90, 70, 50, 29, 48, 32, -57, 15, -121, 21, 34, -41, 77, -33, -34, -59, 19, 68, 30, 54, -77, -47, 116, 116, 107, 40, -100, 79, 55, 107, -117, 69, 92, -70, -110, -22, 22, 85, -93]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[98, 20, 27, 122, -40, 70, -128, -16, -20, 120, 4, -124, -99, 7, 71, 3, -21, -63, -107, 46, 66, -53, -30, 24, 122, -10, -22, -84, -107, 98, 124, -76, 116, 107, 40, -100, 79, 55, 107, -117, 69, 92, -70, -110, -22, 22, 85, -93]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-4, -61, 61, -24, -41, 19, -73, 120, 2, -11, 46, 35, -58, -4, -25, -114, 81, -89, -69, -35, -122, 16, 41, 104, 98, -62, -118, 76, -128, 116, -36, -51, 42, -70, -91, 58, 14, 69, -81, -15, 101, -29, -115, 83, 107, 125, -24, -86, -122, 110, 115, 119, -55, -1, -40, 68, 35, -99, -88, -45, 85, 59, -14, 12, -44, -4, 19, 15, 64, -1, -31, -124, -5, -82, 7, -50, 116, 20, -83, 53, 60, -46, -40, -125, -106, -67, 3, -78, -25, 93, 62, -118, 28, 72, -83, 14, 116, 107, 40, -100, 79, 55, 107, -117, 69, 92, -70, -110, -22, 22, 85, -93]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[6, -25, -4, 106, -71, 53, -43, -3, 57, -14, -97, -52, 109, 71, -13, 17, 64, 44, -103, -30, -25, -94, -23, 42, -3, -73, 110, -87, 3, -40, -89, -32, 116, 107, 40, -100, 79, 55, 107, -117, 69, 92, -70, -110, -22, 22, 85, -93]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-21, -31, 59, -128, 33, -79, 68, 58, 96, -94, 25, 93, -22, 112, 12, -17, -61, -55, -74, -20, 40, 65, -65, -6, -69, -80, -22, 115, 8, -113, -63, 2, -78, -117, 67, -104, -54, 37, -3, -126, 17, -128, -4, -55, 19, -15, -70, 125, 73, -32, -95, 85, -95, -22, 16, 1, -14, -98, 116, 89, -45, 38, 85, 98, 5, -47, 45, 34, 56, 65, 47, -121, 103, 75, -73, -77, -95, 89, 58, 39, 34, 20, -32, -121, 75, -96, 122, 82, -8, 61, 36, -36, -50, -89, 110, 16, 116, 107, 40, -100, 79, 55, 107, -117, 69, 92, -70, -110, -22, 22, 85, -93]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-110, 40, -95, -87, -1, 35, -125, -79, 94, -95, -34, 81, -73, 36, 19, 46, -19, 89, -51, 15, -106, 17, 90, 37, -29, 71, -57, -30, 116, 48, 83, -53, 9, -83, -108, 122, 36, 69, -110, 12, 123, 8, 31, -115, -121, -70, -41, 92, 112, 56, -38, 60, 34, -73, 99, -79, 14, 53, 3, -118, -48, -57, -89, 52, -75, 27, 100, -36, -8, -46, -10, -20, 35, -31, 99, 110, 2, -98, 67, -105, 92, -15, 111, -80, 65, -81, 79, 24, -78, 35, -40, 110, 120, 61, -64, 26, 116, 107, 40, -100, 79, 55, 107, -117, 69, 92, -70, -110, -22, 22, 85, -93]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[55, 7, 8, 21, 110, 114, 94, -89, 60, 28, 26, -58, -96, -123, -126, -114, 110, 28, 117, 23, -46, 93, 58, -7, 108, -93, -29, -74, 41, -96, 84, -56, 103, 60, 15, -29, -6, 56, -32, -109, 89, 19, 62, 17, 58, 121, 11, -13, -37, -41, 43, -71, 28, 46, -80, -24, -16, -94, -70, 105, 42, -6, 67, 24, -77, 76, 9, 52, -14, -50, 18, 55, -61, 45, -76, -42, -79, 28, -100, 61, -22, -34, 115, -106, -47, 121, -90, 21, 95, 13, -66, 103, -67, 77, 68, -77, 116, 107, 40, -100, 79, 55, 107, -117, 69, 92, -70, -110, -22, 22, 85, -93]");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "370708156E725EA73C1C1AC6A085828E6E1C7517D25D3AF96CA3E3B629A054C8673C0FE3FA38E09359133E113A790BF3DBD72BB91C2EB0E8F0A2BA692AFA4318B34C0934F2CE1237C32DB4D6B11C9C3DEADE7396D179A6155F0DBE67BD4D44B3746B289C4F376B8B455CBA92EA1655A3" + "'", str35, "370708156E725EA73C1C1AC6A085828E6E1C7517D25D3AF96CA3E3B629A054C8673C0FE3FA38E09359133E113A790BF3DBD72BB91C2EB0E8F0A2BA692AFA4318B34C0934F2CE1237C32DB4D6B11C9C3DEADE7396D179A6155F0DBE67BD4D44B3746B289C4F376B8B455CBA92EA1655A3");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[43, 32, -47, 65, -3, -92, -112, -120, 124, 32, -21, 31, 64, -96, 122, -123]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-116, -39, -19, 57, -113, 63, 25, -34, -67, 87, -76, -3, 16, 46, 36, 43]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-119, -125, 7, -34, -68, 1, 21, 124, 41, 53, -90, 9, 9, 45, -22, 73]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[40, -29, 48, 56, -15, 22, 14, 62, -39, -97, -113, 21, -56, 4, -80, 87]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-93, -56, 96, -82, 69, 17, 23, 101, -30, 9, -123, -123, -13, -64, 99, 93, -20, -34, 64, 54, -1, 97, -110, -122, -43, 65, -126, -17, 106, -76, 16, -122, -119, -125, 7, -34, -68, 1, 21, 124, 41, 53, -90, 9, 9, 45, -22, 73]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-117, -68, -101, -8, 119, 75, -34, 26, 28, 121, -115, -9, -65, 62, 4, 125, -99, -56, -35, 49, -17, -68, 65, -62, -9, -125, -125, -5, -118, -71, -94, 92, -119, -125, 7, -34, -68, 1, 21, 124, 41, 53, -90, 9, 9, 45, -22, 73]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-117, -57, 12, -60, 100, -90, -112, -3, -99, -101, 14, -113, -13, 1, -16, -124, -24, -61, -45, -120, 30, -109, -125, 44, -72, -5, -41, -118, 97, 35, 48, -26, -110, -55, -117, -86, -78, 105, -102, -57, 21, 18, 24, -116, 100, 97, 47, -32, -29, 38, 87, -42, -37, 51, -83, 92, 115, -103, 64, -84, 14, -14, -25, -35, -46, 0, 119, 87, 12, -42, -89, 10, -116, 113, -67, -69, 113, -122, 59, 44, 19, 61, 78, -64, 47, -56, -51, 121, -56, 98, -64, -7, -15, -21, -105, -99, -119, -125, 7, -34, -68, 1, 21, 124, 41, 53, -90, 9, 9, 45, -22, 73]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[89, -32, -45, -122, 110, 10, 42, -65, 70, 4, -72, 48, -96, -55, 79, -99, -49, -118, 60, -27, 68, -83, 30, 38, -27, -104, -33, 84, 105, -45, -73, 57, -119, -125, 7, -34, -68, 1, 21, 124, 41, 53, -90, 9, 9, 45, -22, 73]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-117, -57, 12, -60, 100, -90, -112, -3, -99, -101, 14, -113, -13, 1, -16, -124, -24, -61, -45, -120, 30, -109, -125, 44, -72, -5, -41, -118, 97, 35, 48, -26, -110, -55, -117, -86, -78, 105, -102, -57, 21, 18, 24, -116, 100, 97, 47, -32, -29, 38, 87, -42, -37, 51, -83, 92, 115, -103, 64, -84, 14, -14, -25, -35, -46, 0, 119, 87, 12, -42, -89, 10, -116, 113, -67, -69, 113, -122, 59, 44, 19, 61, 78, -64, 47, -56, -51, 121, -56, 98, -64, -7, -15, -21, -105, -99, -119, -125, 7, -34, -68, 1, 21, 124, 41, 53, -90, 9, 9, 45, -22, 73]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-40, 36, -7, 23, -73, 97, -59, 6, 42, -127, 34, -91, 56, -114, 26, 88, -75, -114, 97, 127, -64, 115, 14, 25, -1, 40, 14, -18, 45, -104, 31, -78, -40, -30, -74, -1, -103, 92, 86, -53, 72, 61, -1, -113, 109, 28, 48, -52, -28, -97, -113, -27, 88, -74, -126, 48, -14, 10, -71, 116, 48, -47, 72, 78, 5, -48, 118, 70, -3, 35, 38, -76, 99, -116, 79, -108, 22, 90, 0, 44, -16, 116, -85, 104, -124, 74, 80, -77, -113, 92, 62, 45, 47, 76, 27, 18, -119, -125, 7, -34, -68, 1, 21, 124, 41, 53, -90, 9, 9, 45, -22, 73]");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey10);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass22 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[71, -104, 46, -102, 41, 99, 63, -63, -43, 55, 0, -124, -77, 127, -12, -122]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey18);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey18);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey18);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        byte[] byteArray68 = new byte[] {};
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray68);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey70);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey74);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey74);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey74);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey74);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey74);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey74);
        javax.crypto.SecretKey secretKey84 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey84);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey84);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey84);
        java.lang.Class<?> wildcardClass88 = secretKey84.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-23, 56, -74, -113, -127, -56, 73, -63, -41, 46, 96, 78, 62, -26, -106, -39]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[35, -85, 105, -100, 106, 46, -50, -58, -110, 40, -4, 115, 18, -13, -67, 112]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-41, -63, 25, -92, 118, -91, 91, -27, 61, -33, 73, 45, -77, -14, 77, -20]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[117, -22, -26, 102, 118, -75, 34, 82, -2, -8, 3, -126, -93, 55, 57, -29]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[117, -22, -26, 102, 118, -75, 34, 82, -2, -8, 3, -126, -93, 55, 57, -29]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[38, -62, -1, 22, -76, -7, -73, -122, -80, -122, 41, 89, -128, -51, 65, 112]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[117, -22, -26, 102, 118, -75, 34, 82, -2, -8, 3, -126, -93, 55, 57, -29]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-66, -64, -64, 125, -97, 20, 64, 5, -96, 126, -119, 92, 18, -1, 72, -64, -15, -5, -48, 113, 11, 72, 18, 74, 95, 69, -125, 43, -21, 46, 101, -7, 74, -96, 20, -11, -110, 15, -124, 115, -10, -116, 5, 65, 119, 94, 23, 114, -2, 125, 40, 104, -124, -77, -18, -35, 32, -121, 80, 20, -58, -86, -10, 100, -21, 125, 8, 67, -123, 8, -45, -75, -28, 61, -98, 55, 44, -37, -33, -98, 41, 47, 0, -115, -59, 102, 123, -103, 37, 16, -19, -26, 39, -21, 127, 102, -41, -63, 25, -92, 118, -91, 91, -27, 61, -33, 73, 45, -77, -14, 77, -20]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-37, -118, -3, -57, -113, -113, -22, -38, -40, -19, -19, -90, -21, -43, 64, -70, 63, 103, -59, -126, 72, 42, 49, -48, -110, -63, -57, 9, 117, 51, -45, -117, -41, -63, 25, -92, 118, -91, 91, -27, 61, -33, 73, 45, -77, -14, 77, -20]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[75, -44, 21, 45, 59, 11, 10, 87, -77, 97, 75, -60, 124, 77, -91, 126]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-73, 107, 33, -128, 114, 72, 22, 47, 74, 43, -107, -4, 24, 15, -4, 2]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[2, -70, 69, -95, 71, -97, -43, -114, 84, 76, -109, -91, -31, -27, 106, -105]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[117, 114, -28, -16, -6, -9, -56, -90, -63, -122, 117, -86, 110, 104, -93, -58]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-111, -61, 60, -18, 126, 6, 2, 80, -11, -22, -61, 71, 120, 111, 70, 17]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-46, 106, -126, -56, -66, 29, 16, 21, 67, 76, -109, 103, 99, -104, -112, 12]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-43, 92, 126, 28, -75, 49, -49, 28, -17, 16, -33, 30, 5, 13, 79, 19]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-90, -54, 57, 24, 114, 84, -46, 95, -52, 16, 51, -87, 107, 123, -118, 25]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-61, 17, -96, -26, 64, -58, -7, 18, 96, 115, -69, -17, -96, -106, 22, 57, -107, -79, -38, 104, -51, 99, -91, -105, -104, 92, -86, -90, -21, 4, 27, -64, -43, 92, 126, 28, -75, 49, -49, 28, -17, 16, -33, 30, 5, 13, 79, 19]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-113, 127, -63, -31, -62, -21, -57, -60, 32, -23, -11, -32, 67, 82, 103, -45, 21, 122, -75, 46, -4, -2, 94, -113, 64, 6, 27, 40, 36, 44, -104, 110, -43, 92, 126, 28, -75, 49, -49, 28, -17, 16, -33, 30, 5, 13, 79, 19]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey84);
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[69, -29, 112, 94, -30, 60, 47, -35, 20, -6, -68, 66, 46, 89, -38, 98, -96, 18, -10, 12, 58, -91, -116, 87, -23, -25, -92, 44, -19, 47, 70, 94, -18, 56, -109, -99, 77, 93, 21, -23, 94, 47, 71, 87, -30, 96, -62, -3, 8, 64, 80, -44, -53, -97, 76, -103, 54, 68, -84, 18, -43, -83, 107, 7, -108, 82, 91, -22, 50, -56, -51, 85, 10, -80, 92, -53, 114, 77, 66, 120, -35, -57, 83, 62, -43, -18, 74, -14, 11, -6, 92, 97, 32, 66, 77, -7, 103, 48, 53, 84, 10, 39, -30, -28, -24, 61, 68, -98, 35, 98, 118, -23]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("6000978D729A5EAF02789174FCEF78DC19A6A5353FA2EE08001847BF93F672C57842A660B60BA3E3BAFC4CA493DB93BD616BA839F8FC6BCE8F25A5CFF9986984A5A08FB7FA9398912FBF66BA83D5698C9B89FE34ECEA63E7E13593D7BE10CB607921E0CEEC09BCE538EB3873308F1B39", secretKey28);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey42);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD016B569A2999509F59EE7F094987DD", secretKey42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey42);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[29, -48, 57, 104, 76, 121, -67, -66, 49, -6, 19, -1, -9, 62, -35, -61]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-41, -111, 1, -48, 116, -14, 39, -7, 89, 22, 54, 9, 50, 48, -15, -26]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-20, 121, 119, -21, 82, 4, 56, 30, 114, -69, -76, -32, -5, -93, -6, -117]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[107, -115, 61, -120, 80, 109, -32, -44, -37, 127, -39, 35, 112, 117, -116, -128]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-26, -14, -20, -26, -95, 121, 91, 94, -48, 30, -108, -101, -59, 78, 22, 69]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-15, -100, 119, 62, -36, 126, 41, 66, -51, -110, 11, -23, -41, 19, -7, 74]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-15, -100, 119, 62, -36, 126, 41, 66, -51, -110, 11, -23, -41, 19, -7, 74]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-111, 101, -91, -93, -53, -50, 109, -11, 92, -61, -69, -14, 22, -80, -80, 48, 57, 65, -126, 65, 41, -31, 73, -103, 35, -45, -14, -14, 101, 24, -84, 96, -26, -14, -20, -26, -95, 121, 91, 94, -48, 30, -108, -101, -59, 78, 22, 69]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-58, -89, -82, -89, -124, -28, -51, 38, -128, 99, 73, 44, 18, -32, 119, 14]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-107, -83, -63, 51, -42, 3, 39, -67, 119, 28, 30, 96, -57, -15, -66, 50]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-107, -83, -63, 51, -42, 3, 39, -67, 119, 28, 30, 96, -57, -15, -66, 50]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[23, -19, -6, -109, -110, -74, 18, -46, 98, -104, 78, -26, 98, 57, -69, 90]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-107, -83, -63, 51, -42, 3, 39, -67, 119, 28, 30, 96, -57, -15, -66, 50]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[16, 76, -75, -38, 41, 74, -91, -124, 16, 109, -35, -27, -52, -116, -111, 87, 114, 40, 5, 40, 53, -120, -39, -33, -29, 3, -93, -15, 55, -112, 28, -4, -58, -89, -82, -89, -124, -28, -51, 38, -128, 99, 73, 44, 18, -32, 119, 14]");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey53);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("5784F055C33712DDA9B4B7376B39A6513C329F87A9F175B6DD9D71D895BB1ED6D8203AD2502D56B57A671EA07AE1A6B3", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("D8374E477731ACFCA017ADD7723B9412BB46995011D143129EA27A9419ACEAD053429D6CA2B06C2283E7DA8E3B22C415", secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey53);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        java.lang.Class<?> wildcardClass64 = byteArray62.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, -78, 9, -11, 0, 47, -108, -52, -96, 89, -84, 75, -104, 19, -123, -6]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[67, -79, 110, 97, -4, 93, 14, 30, -77, 16, -84, 89, -78, 26, -26, -104]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[124, -39, 93, -83, 108, -15, 42, -28, -1, -15, -108, -51, 69, -107, 60, -15]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-16, 39, 62, -89, 14, 62, 25, -1, -19, -4, 90, -57, 26, 60, -100, 61]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-71, 9, 0, -84, -116, -23, -102, -100, -92, 19, -92, -34, 39, -114, -102, 26]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[42, 15, -87, -23, -90, -12, 74, 119, 3, -26, 9, -80, -10, 57, -95, 88]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[87, 38, 86, 57, 100, -72, -1, -115, 56, 14, 3, -127, 91, -90, 6, -92]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[111, -62, 115, 53, 55, -65, 14, -8, 40, 39, 35, -93, 52, -119, -97, 44]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-43, -120, 7, -124, 42, -109, 45, -42, -43, -118, -107, 111, -28, 68, -26, -61]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[55, 6, -50, -25, 45, -75, -55, -69, 104, 118, -46, -77, 115, -41, -64, -92]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[90, -1, -63, 31, -125, 78, 68, -121, -65, 64, -53, 116, -45, 16, -91, 47]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-43, -120, 7, -124, 42, -109, 45, -42, -43, -118, -107, 111, -28, 68, -26, -61]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[27, 8, -54, -69, -77, 17, -97, 58, 108, 25, 121, -50, -48, 36, -58, -69, -37, -11, -38, -74, -104, 73, 6, 47, -1, 34, 96, 73, 18, -10, 74, -14, 57, 43, 120, 125, 3, 46, -72, 17, 107, -11, 51, -75, 106, 16, -63, 47, -26, -61, -107, -62, 123, -63, 70, 83, 71, -24, -93, 111, -5, 119, 45, 127, -28, -71, -88, 118, 44, -111, 60, 113, -115, 46, -115, 81, -44, 21, 113, -84, -49, 121, 7, -124, -21, -123, -121, 52, 127, 32, 42, -98, -38, 66, 91, 107, -43, -120, 7, -124, 42, -109, 45, -42, -43, -118, -107, 111, -28, 68, -26, -61]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-79, 39, -58, 51, -44, 101, -125, 78, -16, 3, -111, -83, -93, -29, 118, -117, 40, -71, 7, -56, 50, 37, 40, -95, 34, 19, -54, -5, 56, -13, -40, 18, 18, 74, -9, 106, 106, -26, -80, -126, -119, -41, 95, 19, 110, 76, 57, -103, 48, 4, -109, -76, 39, 119, 12, 42, 91, -62, -91, 37, -73, -16, -97, -88, 58, 122, -87, 45, -77, 69, -105, 82, 21, 72, 82, -25, 62, -115, -125, 83, 30, 122, -113, 73, 89, 44, 9, -111, 8, 81, -47, 102, 40, -15, -37, 73, -43, -120, 7, -124, 42, -109, 45, -42, -43, -118, -107, 111, -28, 68, -26, -61]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[2, -50, 43, -99, 127, -71, 20, -71, 74, 98, -115, 7, -106, -3, -54, -70, -31, -60, 38, -73, 117, 37, -119, 94, -114, -114, 84, -51, -37, 77, 12, 38, 17, -112, -128, 119, 107, 108, -106, 38, -10, 23, 41, 109, -86, 116, 22, -19, 69, 121, -54, 101, -3, 74, 12, 112, 26, -52, 21, -113, 59, -11, -117, 105, 100, -88, -65, 88, 94, 88, -121, -103, -117, -63, -127, 68, 12, -66, 29, 120, 35, -103, 71, 44, 119, 86, 31, 115, -112, -82, -73, -102, -54, 56, -97, 118, -43, -120, 7, -124, 42, -109, 45, -42, -43, -118, -107, 111, -28, 68, -26, -61]");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "02CE2B9D7FB914B94A628D0796FDCABAE1C426B77525895E8E8E54CDDB4D0C26119080776B6C9626F617296DAA7416ED4579CA65FD4A0C701ACC158F3BF58B6964A8BF585E5887998BC181440CBE1D782399472C77561F7390AEB79ACA389F76D58807842A932DD6D58A956FE444E6C3" + "'", str63, "02CE2B9D7FB914B94A628D0796FDCABAE1C426B77525895E8E8E54CDDB4D0C26119080776B6C9626F617296DAA7416ED4579CA65FD4A0C701ACC158F3BF58B6964A8BF585E5887998BC181440CBE1D782399472C77561F7390AEB79ACA389F76D58807842A932DD6D58A956FE444E6C3");
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey8);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey8);
        java.lang.Class<?> wildcardClass14 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[90, 38, 72, -4, 18, 53, 26, 53, -79, 110, 127, 11, 61, -91, -69, -50]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[24, -71, 80, 50, -60, 97, -7, -92, -15, 117, 68, -128, -30, -48, -55, 33]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[50, -8, -40, 96, 42, -24, -26, -21, -73, -107, 114, 26, -95, 39, -50, -98]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[58, -15, -26, -46, -100, 108, 101, 65, -3, 40, -58, 24, 87, -104, -121, -69, -95, -49, 100, -98, -108, 0, 39, -70, 45, 73, -11, -62, 39, 28, 72, -45, 90, 38, 72, -4, 18, 53, 26, 53, -79, 110, 127, 11, 61, -91, -69, -50]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED2D61593A531E2255F53B4F6F4EA29D5F9E591D3904507E42825F52ED6C86632F9B108C71242F3B374015747786223358B6760232DD795099C0C94F93FCDBE4BD2DBF01B514E838FCD564310943B263D38F8E62EC1912DF93C03CFB3B653D47957B8F5383C4D2316F89A9FA0314A4B8", secretKey5);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey54);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey65);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey65);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey65);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey65);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7FA568134806C9105C34D583C29871A41AE5CE04D352F794BBBC55C17CC3D7B2E48B2428828EE039A91A06CFBF22DBA03F23A99544AD69867843E16A8BBCB065F997601695DCE4DA9232998E7CFA9275FD14E9B5BE58653BB989CC8C93C323B9A2602029745C486376259619FE42C1DC969C5F23218132538C69A93E2C46029CAFBCB3A325C55A351897A58F95136EEE2494FA973744222FA873EEAD1E15360A868A656A3C665D51EC62012BA7C41A8A5BF8AD314E65E180BA4087E8D6B89D6623982F2B436A6758077463A37F0FFC47E55DE5DFB67D8B3F67F9F6BD7C9678E01B5950A89DB569E40DEBF8146983CC8", secretKey65);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("BB0A24C93C719D18515FA134D81BE0B18BFFC347F0028434040FB1A431384C7ECF1259BD45F6E0629C856BE68581671B", secretKey65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey65);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[40, -99, 61, 83, 104, 95, -95, 126, 81, -1, 55, 17, 108, 113, 42, 82]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[9, -82, 66, -76, 16, 41, -62, -80, -30, -25, -105, -45, 84, 51, 86, -48]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[9, -82, 66, -76, 16, 41, -62, -80, -30, -25, -105, -45, 84, 51, 86, -48]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[40, -99, 61, 83, 104, 95, -95, 126, 81, -1, 55, 17, 108, 113, 42, 82]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-101, 95, -7, 4, 111, -20, -67, 31, 81, 23, -66, -38, 99, -44, -47, 11]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-25, -121, 23, 68, -19, -96, 39, -103, -18, 30, 17, 110, 77, 20, -66, -27]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-36, 87, -38, 102, 96, 19, 79, 26, 46, 50, 76, -43, 93, -13, 23, 2]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[39, 87, -66, -78, -102, -117, -118, 87, 20, 36, -53, 54, 105, 39, 90, 67]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-71, -58, -73, -62, 97, -42, -71, 51, 94, -49, 11, 118, 109, 81, -9, -29]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-110, 27, -84, 44, 112, -13, -2, -35, -16, -58, -115, -1, -59, -83, 52, 58]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[4, 8, 67, -126, 95, 5, 32, 98, -128, -99, -95, 21, 116, -33, 23, 71]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-47, -124, -25, -72, -58, 101, -58, 56, -4, 114, 85, 53, 96, -25, 52, 9]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[7, -6, -97, 88, 2, 35, -71, 60, -50, 84, -40, -23, -80, 115, -18, -106]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-77, 43, 66, 86, -114, 35, -32, -78, -117, -63, -83, -66, 69, 100, 23, -86]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[55, -104, -65, 82, -84, -120, 0, 104, 100, 124, 127, -70, 114, 112, 92, 7]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[7, -6, -97, 88, 2, 35, -71, 60, -50, 84, -40, -23, -80, 115, -18, -106]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-76, -8, 22, 76, 5, 102, -45, 76, -34, -121, 82, -95, 66, 58, 31, 67, 7, -35, -29, -88, 24, 85, -11, -31, -57, -38, 22, -116, -58, 32, -60, 119, 7, -6, -97, 88, 2, 35, -71, 60, -50, 84, -40, -23, -80, 115, -18, -106]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[7, -6, -97, 88, 2, 35, -71, 60, -50, 84, -40, -23, -80, 115, -18, -106]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-43, -33, -7, 74, 52, 13, 27, -101, 101, -96, 54, 61, -82, 123, -45, 27, 31, 49, 95, 60, 105, 70, 98, -111, 83, 34, 78, 126, 18, 119, -120, 87, -118, -26, 75, -34, -36, -67, -62, -23, 0, 111, 33, 36, 77, 23, 58, -121, 13, -110, 7, 124, -34, 62, -43, 88, -125, 124, 23, -47, -119, -22, -73, 112, 19, 72, -2, 41, 25, -53, -40, 118, -59, 123, 119, 61, -10, 1, -52, 38, -60, -71, -48, -36, -112, 84, 2, 110, 101, -2, 115, -70, -127, -49, -110, 32, 7, -6, -97, 88, 2, 35, -71, 60, -50, 84, -40, -23, -80, 115, -18, -106]");
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("85901A7A07774EF1B30A7D77F78D499830E94396D39F6D0A240A6BA509D22CD00BBA7DCDA4CC37D69BA13844D5AF219C", secretKey22);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey54);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey54);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey54);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey54);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("1C604D3CCD338D22944C6C4CF4B997A3030197072DC82231F441A1B6CCECC3F353DDF444625888C8C6E87A9597FBF4A8", secretKey54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey54);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[84, -24, -25, 66, -62, -56, 14, 120, 93, -52, -48, 106, 15, 86, -76, 97]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[66, 107, -122, -126, -104, -26, -51, 107, 1, -34, -91, 59, -128, -123, 35, -53]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-33, -121, 23, -76, 116, 11, -12, -85, 117, -32, 112, 57, -112, -52, -80, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[66, 34, 76, 90, -77, 14, 24, -66, -34, -73, -128, -39, -93, 73, 118, -63]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-51, 23, -115, 61, -57, 43, -22, 85, -118, 44, 118, 93, 116, 108, -72, 5, -96, 80, 4, -111, -23, -52, -74, 89, 91, 90, -43, -46, 119, 54, -20, 32, -33, -121, 23, -76, 116, 11, -12, -85, 117, -32, 112, 57, -112, -52, -80, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-33, -121, 23, -76, 116, 11, -12, -85, 117, -32, 112, 57, -112, -52, -80, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[66, 34, 76, 90, -77, 14, 24, -66, -34, -73, -128, -39, -93, 73, 118, -63]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-79, -83, -72, 103, 36, 58, 35, -29, -80, 87, -51, -13, 41, 85, 35, 17, -74, 72, 10, -25, 116, 44, 38, -27, 97, -30, -93, -113, -99, 76, -56, -123, -33, -121, 23, -76, 116, 11, -12, -85, 117, -32, 112, 57, -112, -52, -80, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[124, 27, 116, 31, 23, -75, 57, 11, 53, 71, -41, -2, -72, 42, -14, -45, 122, 64, -65, -83, -77, -108, 54, -19, -116, 47, -117, 38, 87, 63, 68, 52, 21, 119, -74, 109, 23, 33, 112, 69, -10, 24, -11, 120, 79, -55, -86, 40, -74, 105, 42, -25, 107, 117, 15, 71, 95, -84, 79, -59, -85, -91, 97, 101, -63, 102, -31, 77, -92, 91, -60, 49, 61, -80, -117, -98, 42, -118, 32, -19, 115, -64, -17, 102, 47, 86, -109, -42, -91, -77, 48, -57, -66, -84, -21, 98, -33, -121, 23, -76, 116, 11, -12, -85, 117, -32, 112, 57, -112, -52, -80, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-2, 71, -8, -89, 122, 113, -93, 23, 66, 92, -34, -9, 68, 39, -38, -18, 85, -49, 35, -27, 18, -44, 53, 8, 28, 84, -84, -53, 70, 27, 76, 103, 119, 44, 123, 121, 58, -72, 38, 40, -104, 60, -72, 65, 18, -80, 17, 55, 92, 93, -104, 40, -73, 45, -77, -50, -68, -30, 93, -59, 52, 59, 91, 36, 86, 107, -125, -84, 18, 64, 100, 36, -12, -15, -125, 54, -98, 112, 69, -35, -41, -83, -52, -75, 109, 79, -55, -77, -37, 53, 108, -51, -11, -46, 117, -74, -33, -121, 23, -76, 116, 11, -12, -85, 117, -32, 112, 57, -112, -52, -80, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-65, 72, -73, -110, -40, 57, -70, 14, 32, -8, 112, -68, 110, 11, -17, 9]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-88, 18, -23, -78, -112, 61, -54, -7, -86, 72, 119, -112, 36, -74, -91, -40]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[114, 11, -86, -65, -12, 44, 74, -9, -57, 34, 41, 19, -95, -99, 74, -52]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[85, -106, -94, 121, -84, -35, 23, -50, 56, 24, 17, 62, 68, -42, -125, -17]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-127, -116, 7, 18, 39, 54, 31, 47, 15, -90, -19, -11, 80, -28, 22, 124, 101, 4, -30, 10, -104, 93, 51, -56, 63, -99, 12, 56, -25, -100, 123, -128, 114, 11, -86, -65, -12, 44, 74, -9, -57, 34, 41, 19, -95, -99, 74, -52]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[79, -51, -27, 69, 92, 50, -80, 11, -44, -66, 114, -95, -80, 93, 119, 120, 79, -100, -107, -95, 39, 72, -81, 62, 79, -51, 51, -67, -68, 1, -35, -6, 114, 11, -86, -65, -12, 44, 74, -9, -57, 34, 41, 19, -95, -99, 74, -52]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[40, 45, 113, -121, -99, -94, -61, 28, -29, -97, 61, -128, -118, -75, 85, -11, -23, 23, -36, 28, -111, 57, -119, 35, 67, 125, 13, 126, 7, -76, 114, -51, 78, -115, 29, 68, 38, 76, 35, -34, -15, 13, -5, -11, 84, 22, 31, 94, -85, 98, 14, 115, -23, 107, 70, -58, -93, 55, -104, -52, -9, -81, 5, 11, 48, 28, 83, 106, -105, 24, -22, 109, -29, 85, 119, -100, 118, 115, 64, -29, -41, -4, -73, -44, 2, -64, 54, 107, -77, 22, -84, 78, 99, 25, 105, -123, 114, 11, -86, -65, -12, 44, 74, -9, -57, 34, 41, 19, -95, -99, 74, -52]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-73, 21, -78, 50, -97, -102, 117, 81, -48, 25, -80, -115, -76, -66, 96, -115, 8, -125, 15, -52, -51, -89, 47, -105, -33, -80, -10, 106, 97, -76, 14, 71, -44, -102, 13, 97, 104, 114, -77, 127, 17, -104, -108, -57, -85, -30, 15, 9, 87, 64, -27, -110, -61, -62, 10, -121, -11, -3, -28, 34, 77, -2, 50, 48, 103, -116, 116, 47, -63, -122, -2, -36, -8, 24, -35, -119, -61, 83, 48, 92, 127, -109, 93, 10, 43, -5, 87, -121, 119, 108, 54, -24, -1, -6, -121, 99, 114, 11, -86, -65, -12, 44, 74, -9, -57, 34, 41, 19, -95, -99, 74, -52]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[34, 64, 113, 57, -111, -36, -123, -106, 16, -85, -123, -18, -99, -17, -89, 59, -80, -77, -16, 15, 114, -34, 83, -73, 110, -17, 76, 122, 48, -41, 64, 103, -61, -85, -15, -78, -20, -60, 58, 69, 38, 106, 125, 92, -60, 37, 76, -96, 33, -104, 51, -100, -18, -120, 108, 36, -78, 119, 73, -51, 56, 104, 122, 108, 76, 35, 42, 41, 93, 16, -123, -120, 109, 108, -105, -7, 42, 91, -51, 118, 106, 3, 86, 118, 126, 89, 54, 55, 114, -33, -23, 19, 126, -43, -30, 31, 114, 11, -86, -65, -12, 44, 74, -9, -57, 34, 41, 19, -95, -99, 74, -52]");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB05108861568B77067864E393C66A651FA7D65C7972104CEC7664A6D568630EFF7F44008DECFABECC47EF00F1E1F507", secretKey1);
        java.lang.Class<?> wildcardClass3 = byteArray2.getClass();
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[64, -5, -52, 117, -52, 68, 1, -114, -90, 41, 57, 35, -80, 80, 35, -37, 3, 6, -124, -91, -35, -93, 1, 47, 49, -24, -60, -45, 114, -58, 67, -95, 5, 23, -47, -61, 97, 24, -50, -124, 114, 56, -24, -101, 82, 21, 39, -60, 98, 0, -80, 1, -82, 30, 31, -32, -97, 82, -77, -67, -88, 21, -73, 119, 30, 18, -14, -84, 61, 88, 45, -43, -85, -21, 76, 60, -47, 92, -27, -3, 81, -94, -86, -27, 99, 13, 28, 88, -53, 36, -42, 25, 1, 18, -71, 30, -95, 68, -12, -25, -57, -93, -69, 47, -91, 75, -52, 31, -107, -49, -91, 69]");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey63);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey63);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey63);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey63);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey63);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("A856F4BB028ED37E42CCF9A0F314FBC195A260BA04EEEF22D305973260944F431BE4FC79E853B7AF60ECDC1555D9124211637AF288C9EC32916D12A203EB5EFA19BE8DB3AB1518F05C443DD81721AF22E81EED89735A10E4AA3A9B09F8438210CA4375536161AC4CDE469F449ACF1A07", secretKey63);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey63);
        java.lang.Class<?> wildcardClass74 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-69, 80, -44, 19, 87, -93, -41, 86, 110, -1, -45, 90, 6, 105, -58, 109]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-32, 65, -56, 99, -121, -11, -51, -78, -80, 6, 99, -74, 121, -19, 48, -6]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[95, -43, -69, 71, -112, 34, 56, 58, -78, -10, 70, -77, -109, -119, -85, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-78, -121, 38, 106, 7, 75, -126, 123, -78, 89, 15, -74, -29, 100, 42, -62]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-77, -89, 113, 86, 48, 105, 91, 30, 72, -37, -118, 42, -20, -9, 71, 125]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[112, 122, 79, 49, 22, 95, -87, -127, 58, -110, -76, -99, 52, -90, 120, -29]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-70, -59, 63, 15, -99, 125, -71, -2, 69, 125, 26, -99, -94, -116, 13, -7]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-15, 113, -81, 111, 126, 98, 82, 87, 4, -53, -68, -26, 5, -113, 14, -66]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-37, -21, 89, 46, -78, 106, -10, -82, 18, 54, 3, -45, -108, -106, 117, 8]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[30, -126, 74, -19, 53, 98, -38, 45, -41, 31, -104, 55, -88, 0, 123, -27]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[20, -67, 69, -31, -90, -29, 104, 33, -38, 88, -112, -92, 44, -76, 8, -29]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[50, -56, -123, 34, 94, 32, -128, 84, 114, -46, 59, -18, 93, -14, 46, -62]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-91, -110, 29, -89, 126, -108, -91, -85, -51, 88, 11, 62, -93, 114, 91, -63]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[20, -67, 69, -31, -90, -29, 104, 33, -38, 88, -112, -92, 44, -76, 8, -29]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-73, -30, 50, 58, 115, 94, 113, -93, 84, 81, -94, -7, -14, 120, 94, 13, -4, -65, -13, -116, -107, -80, 20, 63, -32, 46, 113, 34, 113, 79, 12, 79, 20, -67, 69, -31, -90, -29, 104, 33, -38, 88, -112, -92, 44, -76, 8, -29]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[29, -2, -62, -128, -6, 63, -118, -81, -5, 0, -78, -25, 43, -63, 75, -27]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-127, 49, -7, -45, -44, -109, 88, -26, -76, -89, 68, 86, -41, 55, -66, -58]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-33, -96, 45, 83, 65, 115, 31, 113, -83, -11, -54, 80, 49, -30, -11, -62, 10, 22, -65, 46, 120, 107, 4, 13, 77, 93, 68, -107, -63, 116, 113, 55, 48, 75, -109, -1, -32, 40, 87, -63, 71, 106, -92, 49, 117, 2, 20, 10, 24, 8, 94, 125, -4, 1, 99, -17, 68, 20, -29, -33, -74, 10, -78, -119, -63, 52, -51, -69, 51, -28, -72, 83, -26, 31, -56, -85, 83, 125, -66, 4, -50, 87, -69, 45, 79, 86, 74, -97, -79, -99, -19, 70, 93, -123, 72, -32, 29, -2, -62, -128, -6, 63, -118, -81, -5, 0, -78, -25, 43, -63, 75, -27]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-81, -127, 16, 16, 127, 98, 99, 61, 43, -121, -40, 44, -65, -29, 91, 93, -67, -13, 55, -46, -36, 108, 26, 73, -86, -3, 56, -75, 41, 127, 94, 38, 29, -2, -62, -128, -6, 63, -118, -81, -5, 0, -78, -25, 43, -63, 75, -27]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-110, -4, 126, -86, -69, 85, 30, -120, 8, -61, 8, -117, 116, -45, -102, -111, 23, -110, -104, 52, -32, -90, 46, 6, 64, -123, 0, -60, 112, -70, 70, -107, 29, -2, -62, -128, -6, 63, -118, -81, -5, 0, -78, -25, 43, -63, 75, -27]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.Class<?> wildcardClass10 = byteArray6.getClass();
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[108, -76, 88, 82, 109, -20, 106, 55, 50, 91, -10, 81, 26, -37, -72, -20]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[61, 34, 16, -55, -9, 92, -44, 118, -35, 23, -6, 118, -24, 13, -95, 13]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[103, -81, -55, 78, -92, 75, -67, -88, -114, -70, 56, 84, 85, 117, 60, -89]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "67AFC94EA44BBDA88EBA385455753CA7" + "'", str7, "67AFC94EA44BBDA88EBA385455753CA7");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "67AFC94EA44BBDA88EBA385455753CA7" + "'", str8, "67AFC94EA44BBDA88EBA385455753CA7");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "67AFC94EA44BBDA88EBA385455753CA7" + "'", str9, "67AFC94EA44BBDA88EBA385455753CA7");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey17);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey17);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("3607647E50ECCCABE8DE03DFAC3EC1AA", secretKey17);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("A21EC590EE50DD2F2D974BA9D65033DD", secretKey17);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey17);
        java.lang.Class<?> wildcardClass25 = secretKey17.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[57, 19, -39, -122, -4, -62, -60, 23, 46, -81, 17, -57, 68, -49, -54, 46]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[124, 115, 39, -76, -41, 79, 101, -58, -79, -25, 113, -65, 95, 89, -115, -90]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-112, 70, -125, -94, -93, -127, -47, 30, 26, -122, 48, -99, -49, 126, -82, 25]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-92, -90, -114, 19, -58, -34, 102, 4, 67, -114, 41, -54, -3, -100, 13, -5, -5, 99, -65, -11, -30, -35, 51, -115, 57, -27, -117, 57, -110, 0, 75, -110, 17, 112, -80, 93, -39, -53, -48, -105, -22, -5, -73, -113, -89, 45, 47, 104]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[22, 124, 64, -10, 125, 26, -124, 125, 5, 31, 48, -23, -117, 35, 32, -115, -95, 67, -106, -74, -115, -51, 22, -75, -58, 53, -102, 29, 82, -58, 123, 51, -119, 57, 15, 39, 116, 51, -103, 8, -98, 66, 111, 8, -79, -7, 98, 81, 83, 31, -59, -1, -35, -122, 124, -52, -14, -9, 107, -42, -114, 13, 9, -29, -30, -92, -50, 3, -70, 61, -65, -45, 5, 11, -59, 66, 27, -32, 74, 44, -64, 88, -99, -41, -120, -99, 37, -52, -17, -56, 41, -47, -6, 112, 46, -96, 17, 112, -80, 93, -39, -53, -48, -105, -22, -5, -73, -113, -89, 45, 47, 104]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[82, -128, -63, -100, 98, 107, 0, -83, 53, 1, -100, -115, -114, 65, -74, 38, -60, -34, -45, 111, -5, -107, -101, -119, -44, -57, -77, -104, -123, 52, 5, 116, 72, 14, 77, -4, 33, 114, -106, -35, 82, -71, 119, 118, -106, -6, 29, -13, 116, -54, 70, -99, 43, 87, -57, -5, -83, 85, 115, 65, -107, 75, 0, -22, -28, 35, 76, 16, -8, 92, -93, -36, -86, 67, 122, -2, -118, 70, -15, -98, 118, -42, -99, -113, 118, -116, 88, -29, -90, 35, -49, 107, 93, 22, -116, -104, 17, 112, -80, 93, -39, -53, -48, -105, -22, -5, -73, -113, -89, 45, 47, 104]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[93, 100, 89, 2, 42, 19, 48, 26, 56, 79, -30, -41, -53, 120, -65, -92, 39, 72, -37, -105, -98, -108, -128, -46, -25, -50, 85, -59, 88, -33, 17, 36, 17, 112, -80, 93, -39, -53, -48, -105, -22, -5, -73, -113, -89, 45, 47, 104]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-39, -2, 44, -101, -74, -26, 39, -90, -110, -9, 58, -37, 21, 41, 9, 89, 12, -18, -121, -65, 127, -18, -86, 67, 99, 49, 27, 94, -19, 21, -89, -119, 17, 112, -80, 93, -39, -53, -48, -105, -22, -5, -73, -113, -89, 45, 47, 104]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.Class<?> wildcardClass29 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[92, 2, -106, 51, -27, 124, 45, 104, 116, -91, -43, -125, 68, -65, -21, 82]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-97, 37, 56, 32, -28, -96, -1, -89, -88, -56, -108, 20, -53, 110, -124, -80]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-94, 45, 104, 80, 4, 63, 85, -34, 43, 29, -3, -69, 116, -30, 11, 95]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[95, -115, -14, -17, -92, -62, 73, -36, 97, -75, 95, 25, -106, 74, 34, -123]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[11, 39, 98, -76, -73, 10, 37, 38, 53, -86, -41, 80, -20, 92, 47, -91, 13, 67, 13, 59, -8, 40, 115, -19, 118, -44, 53, -117, 34, -48, 12, -99, -94, 45, 104, 80, 4, 63, 85, -34, 43, 29, -3, -69, 116, -30, 11, 95]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[11, 39, 98, -76, -73, 10, 37, 38, 53, -86, -41, 80, -20, 92, 47, -91, 13, 67, 13, 59, -8, 40, 115, -19, 118, -44, 53, -117, 34, -48, 12, -99, -94, 45, 104, 80, 4, 63, 85, -34, 43, 29, -3, -69, 116, -30, 11, 95]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-94, 45, 104, 80, 4, 63, 85, -34, 43, 29, -3, -69, 116, -30, 11, 95]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "A22D6850043F55DE2B1DFDBB74E20B5F" + "'", str27, "A22D6850043F55DE2B1DFDBB74E20B5F");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "A22D6850043F55DE2B1DFDBB74E20B5F" + "'", str28, "A22D6850043F55DE2B1DFDBB74E20B5F");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("0F13C839C422524812F32D85784F2C37", secretKey1);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey5);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-29, -97, 10, -57, -105, -107, 108, 125, 77, 114, 52, -99, -54, -100, 40, -125, -71, -23, -71, 74, 39, -36, -6, 48, 118, 56, -43, -42, -43, -91, -78, 13, -89, -4, -73, 15, -67, 66, 41, 79, -94, 55, 50, 66, -88, 11, -53, -69]");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-118, -119, -3, 62, 122, -50, 74, -5, -71, 67, -26, 58, -126, 66, 54, 21]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-30, 57, 111, -120, -10, 115, -128, -80, -83, 88, -97, 84, 91, -102, -117, 106, -4, 105, 61, 101, 64, -104, -19, -12, -11, -98, -77, 21, 3, -82, 71, 36, 32, -3, -76, 100, -75, -70, -6, 91, 46, -77, 32, -92, 34, 29, -106, 62]");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("3607647E50ECCCABE8DE03DFAC3EC1AA", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("A21EC590EE50DD2F2D974BA9D65033DD", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-79, 49, -66, 77, -31, -27, 50, -9, -74, -94, -82, 92, 90, -66, 64, -118]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[43, -53, 37, -108, -104, 97, -83, -50, -45, 26, -46, 94, 52, 93, 43, 108, -19, -65, -90, 122, 8, -98, 54, -86, -64, -93, -32, -17, 81, 125, -19, -38, 54, 94, 73, -124, 71, 40, 86, 58, 66, 72, -31, 9, 98, -71, 99, -74]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[104, -12, 48, -14, 55, 65, 44, -84, 53, -65, -48, 102, 110, -100, 7, 26, -98, -27, -11, 14, -12, 97, -48, 15, -76, -43, -56, 14, -59, -67, -48, -117, -84, -1, 31, 82, 17, 53, 17, 50, -106, 82, -23, -39, 123, 69, 42, 91, 123, 12, 73, 67, 112, 36, 24, 56, -65, 110, 98, 123, -14, -1, -63, -80, 122, -23, 111, -30, -92, 105, -90, -10, -43, -80, 97, -117, -81, -95, 79, 113, 70, 96, -14, -64, 10, -31, 80, -69, -81, -26, -16, 99, -66, -81, 102, 57, 54, 94, 73, -124, 71, 40, 86, 58, 66, 72, -31, 9, 98, -71, 99, -74]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-68, -47, -56, -125, -98, 51, -119, 103, 122, -67, 77, -43, -57, -92, -117, 99, 37, 92, 36, 75, -102, -89, 87, 77, 101, -22, 37, 23, 4, -37, 17, -69, 65, -52, -41, -29, 57, 49, -78, -37, -46, -92, 127, 1, 111, -115, 22, -82, -122, -34, -88, 94, 51, 40, 43, -26, 42, 23, -96, -24, 30, 44, -64, 124, -50, 116, 120, 98, -47, 6, 100, 50, -20, 41, 89, -43, -86, 83, 47, 85, 114, 117, -62, 109, -104, 71, 71, 4, 86, 8, -110, -103, -103, 21, -3, 83, 54, 94, 73, -124, 71, 40, 86, 58, 66, 72, -31, 9, 98, -71, 99, -74]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-126, -90, 74, -49, -125, -102, -87, 34, -102, 33, 110, -59, 12, -50, 12, -5, 43, 76, 43, 55, -91, -47, -59, -15, 1, -84, 42, -33, 87, -102, 39, -61, 54, 94, 73, -124, 71, 40, 86, 58, 66, 72, -31, 9, 98, -71, 99, -74]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[15, -120, 117, 57, -40, 18, -7, 58, -98, -28, 58, 50, -5, -16, 5, 48, 49, -101, 53, -88, -23, 85, 101, 80, -61, 48, 73, 88, 88, -26, -11, -8, 54, 94, 73, -124, 71, 40, 86, 58, 66, 72, -31, 9, 98, -71, 99, -74]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("3C958EAE5BDAA1A3BD060C71944EB0A8534B539AFEFDB79EBDD7ADD12402BF8C30B281A8C4450399314DBDEB5B01CDB0CE81CE5565A8BB5D3EB7E0BBA6E1F4684A32FD476B52A5A71A1A384A30F8D4DC2D074F8AC9F8AEBA957BD34BF36177AFB289109350640BEB720378DCC725B342", secretKey8);
        java.lang.Class<?> wildcardClass17 = byteArray16.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[67, 55, -33, 94, 79, -99, -42, -117, -58, 125, 79, 8, -21, 114, -11, -113]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-87, -34, -109, 120, 83, -56, -36, 48, 38, -102, 27, 25, 57, 95, -58, 76]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-114, -67, -19, -8, 57, 1, 0, 88, 38, 1, -121, 20, -45, -119, -40, 40]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[67, 55, -33, 94, 79, -99, -42, -117, -58, 125, 79, 8, -21, 114, -11, -113]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-12, -58, 103, 3, -78, -32, -112, 92, -62, 16, -46, 33, -80, -7, -23, 67, 26, -33, 49, 60, 124, 117, -116, 125, 91, -54, -124, -117, -87, 95, 14, -18, 123, -90, 54, -49, 73, -84, 101, -118, -69, 47, 47, -35, -59, -40, -22, -87, 91, 65, -55, 126, 30, 116, -75, -113, -68, 47, 21, 87, 70, -49, -33, -48, 10, 88, -108, 94, 96, 27, 47, 121, 122, -111, 124, 83, -60, -117, 64, 20, -71, 19, 110, -3, 123, 124, 22, -65, 116, -36, -124, -90, -49, -42, -78, -3, 67, 55, -33, 94, 79, -99, -42, -117, -58, 125, 79, 8, -21, 114, -11, -113]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[95, 47, 39, -13, 53, -13, 37, 93, -79, -79, -60, 52, 116, 5, -41, -45, 107, 98, -8, -9, -33, 1, 74, 123, 105, -80, -39, 114, 67, 53, 112, 42, 67, 55, -33, 94, 79, -99, -42, -117, -58, 125, 79, 8, -21, 114, -11, -113]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey11);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey11);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey11);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey54);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey54);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey54);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey54);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey63);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[108, 21, -12, -52, -96, -109, -2, -67, 32, -67, -93, 121, -25, 8, 57, 39]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[75, -14, 89, 71, 98, -47, 116, 104, -16, 91, 18, 56, 107, -93, 100, -124]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[75, -14, 89, 71, 98, -47, 116, 104, -16, 91, 18, 56, 107, -93, 100, -124]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[39, 112, 26, -48, 77, 60, 106, -37, 25, 81, -41, 26, -16, 90, 63, 46]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[75, -14, 89, 71, 98, -47, 116, 104, -16, 91, 18, 56, 107, -93, 100, -124]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-116, -30, -44, -65, 13, 45, 96, -53, 5, 65, -59, -60, 8, 81, -11, 0, -108, 23, 7, 48, 49, -61, 52, -29, -71, -119, 19, -51, -4, -108, -74, -13, 108, 21, -12, -52, -96, -109, -2, -67, 32, -67, -93, 121, -25, 8, 57, 39]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[37, -102, 97, -84, 52, 50, 81, -72, 54, -108, -100, 110, -45, -75, 112, -120, 77, 77, -36, -15, 56, 31, -122, -28, -35, -11, -32, -29, -68, 24, -38, 3, 111, 40, -51, -50, 14, -111, 15, 80, -100, -14, -36, -70, -116, -106, -72, 68, 7, 51, -86, -5, 2, -3, 16, -66, -14, -55, 56, 81, 55, -12, 61, -90, 99, -32, 70, 102, 97, 117, 7, -70, 0, 122, -97, 57, -71, -103, -20, 94, -28, -102, 59, -109, -81, 90, -85, 104, 97, 5, 63, 87, -79, -127, -16, -54, 108, 21, -12, -52, -96, -109, -2, -67, 32, -67, -93, 121, -25, 8, 57, 39]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[27, 48, 51, 25, -128, 47, -122, -89, 77, 90, -78, -106, -112, -106, -120, -71, 23, 91, -9, 29, 40, -116, -54, 67, -76, 17, -37, -42, 36, 96, 71, -42, -67, -37, 36, -96, 74, 125, -50, -35, -107, -3, 76, 53, -118, -111, 86, -60, -123, 74, 101, -33, 19, 80, 37, 68, -56, -72, 10, 99, 12, 114, -56, -113, -80, 16, 30, 96, -110, -124, 78, -86, 86, -19, 90, 65, 91, 42, 97, 98, -118, 31, 90, 106, -19, -71, -122, 58, -124, 13, 63, 47, 68, 0, -59, -71, 108, 21, -12, -52, -96, -109, -2, -67, 32, -67, -93, 121, -25, 8, 57, 39]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-25, 10, -24, -100, 31, 6, 16, -62, -34, 53, 18, 104, -101, 81, -37, -118, 108, 9, -97, 13, 58, -48, 104, 36, -101, -22, 74, 92, -40, 24, 70, 2, 108, 21, -12, -52, -96, -109, -2, -67, 32, -67, -93, 121, -25, 8, 57, 39]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[108, 21, -12, -52, -96, -109, -2, -67, 32, -67, -93, 121, -25, 8, 57, 39]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[50, -24, 11, -47, -33, 81, 55, 52, 18, 100, -100, -9, 53, -29, 19, 125, 82, 118, -12, 42, -103, 84, -122, -63, 39, -96, -77, -112, 116, 121, 82, 80, 108, 21, -12, -52, -96, -109, -2, -67, 32, -67, -93, 121, -25, 8, 57, 39]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "32E80BD1DF51373412649CF735E3137D5276F42A995486C127A0B390747952506C15F4CCA093FEBD20BDA379E7083927" + "'", str23, "32E80BD1DF51373412649CF735E3137D5276F42A995486C127A0B390747952506C15F4CCA093FEBD20BDA379E7083927");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[98, -93, 16, 57, -28, -28, 16, -43, -51, -89, -72, -113, 79, 79, 95, 35]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[123, -97, -76, 59, 32, -12, 19, -4, 63, 54, 56, -84, 83, -1, -28, -4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[124, 5, -97, 61, 121, 62, 111, -97, -77, -66, 0, -24, 91, 70, 26, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[23, 122, -52, 78, 7, 109, 36, -50, 3, -96, -87, 50, -122, 59, 62, 26]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-119, 29, 62, 63, 85, -83, 116, -52, -41, 11, -13, 55, -63, 107, 52, -118]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[53, -99, 103, -6, 34, 72, 79, -11, -90, 26, -30, 23, 31, 57, 15, 116]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[53, -99, 103, -6, 34, 72, 79, -11, -90, 26, -30, 23, 31, 57, 15, 116]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[125, 25, 93, 71, -29, -112, -14, -62, -21, -105, -4, -71, -25, 47, 17, -65, 111, -3, 3, 21, 77, -97, -111, 124, -124, 111, -71, 7, 50, 102, -118, 12, -119, 29, 62, 63, 85, -83, 116, -52, -41, 11, -13, 55, -63, 107, 52, -118]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey17);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey17);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey17);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("7CA49FB87215185DDB50BA3084C558F36D00F53E952403E977CB3632DE840FE960FDBC24442AAAB8B37E391826BC1C1E87980A92D112094033FD24B876593F2EF6182DB6D31A14F6B8E49CEEC74CA7003F717F754356175B555ECF25F8DE63FBA48E91FA121C2BA2CB8028DB8F7D15CD", secretKey17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey17);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[9, -94, 57, -49, 12, 68, -79, -126, 38, -2, -26, -94, -21, -77, -64, -109]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[111, 42, -46, 106, 120, 53, 102, 1, -20, 77, -126, 114, 119, -93, 80, -15]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-91, -25, -88, -58, 82, -66, 127, 13, -43, 49, 22, -69, -100, 10, -44, -7]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "A5E7A8C652BE7F0DD53116BB9C0AD4F9" + "'", str7, "A5E7A8C652BE7F0DD53116BB9C0AD4F9");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "A5E7A8C652BE7F0DD53116BB9C0AD4F9" + "'", str8, "A5E7A8C652BE7F0DD53116BB9C0AD4F9");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "A5E7A8C652BE7F0DD53116BB9C0AD4F9" + "'", str9, "A5E7A8C652BE7F0DD53116BB9C0AD4F9");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[87, -98, -97, -92, 7, -75, 37, 21, 92, -17, -20, 19, 61, -84, -102, 124]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[115, -24, 83, 7, 25, 13, 58, -10, -67, -100, 98, -17, 66, -58, -18, 72]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[115, -114, 82, -95, -105, 76, -64, 52, 21, 81, 41, 72, -99, -93, -115, 55]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[114, 54, 60, 3, -118, -16, 56, 112, -42, 92, -70, 39, 120, -117, 83, -68, 78, 11, 16, 7, -29, 46, 9, 125, -55, -13, 122, -63, -102, 122, 77, -4, 87, -98, -97, -92, 7, -75, 37, 21, 92, -17, -20, 19, 61, -84, -102, 124]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[73, -52, -11, 12, -105, 117, -52, -17, 13, 26, -79, 98, 35, 106, 85, -89, 108, -120, -71, 0, -127, 68, 69, 76, 52, -9, 103, 50, -16, -103, 50, 47, 87, -98, -97, -92, 7, -75, 37, 21, 92, -17, -20, 19, 61, -84, -102, 124]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[123, 87, -20, -84, -84, 68, 30, 90, -51, 30, -123, -30, -8, 74, -19, -114, -41, 35, -93, 68, 54, 58, -123, 92, -81, -22, 28, -31, -18, -18, -69, 28, 87, -98, -97, -92, 7, -75, 37, 21, 92, -17, -20, 19, 61, -84, -102, 124]");
        org.junit.Assert.assertNotNull(byteArray24);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) -1 };
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, -1]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0AFF" + "'", str3, "0AFF");
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("\u90de\007\ufffd\ufffd\ufffd#\f\ufffd\ufffdi$i \033WQ}\016\ufffd\ufffd\ufffd\ufffd\u0327W\036\004b4f9\"\ufffd5n\000c", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        java.lang.Class<?> wildcardClass18 = byteArray16.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-7, -99, -117, 116, 47, -1, 33, 124, 47, 118, -86, 118, -118, 74, 113, -2]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[51, 24, -38, -50, -17, -46, 84, 50, 85, 49, 100, -65, 81, -57, 109, 57]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[51, 24, -38, -50, -17, -46, 84, 50, 85, 49, 100, -65, 81, -57, 109, 57]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-6, -40, 6, -10, 121, 1, 96, 86, -35, 102, -114, 32, 76, 101, 109, -111]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-7, -99, -117, 116, 47, -1, 33, 124, 47, 118, -86, 118, -118, 74, 113, -2]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-104, -127, 57, -53, 15, -42, -59, 106, -123, -96, 111, 121, -67, -124, -122, -84, -2, -31, 49, -121, 90, -87, -109, -126, -71, 100, -11, -44, -67, -7, -35, 27, -55, -22, -123, -37, -26, -87, 64, -120, 83, -50, 109, -118, -10, -108, -33, -45, -52, -66, -81, -59, 14, 72, -39, -30, -75, 52, -46, -101, 96, 50, -71, 21, 60, 120, -103, -107, -32, -14, -26, -43, -25, -42, 76, 80, 59, 91, -126, 78, -60, -63, 33, -70, 121, -76, -67, 6, -123, -118, 74, 61, -13, -40, 60, 118, -7, -99, -117, 116, 47, -1, 33, 124, 47, 118, -86, 118, -118, 74, 113, -2]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-26, -13, 85, -24, -67, 118, 61, -109, 40, -41, 72, -42, -26, 83, -110, -73, -57, -33, 66, 101, -5, 105, 50, -68, -82, -59, -10, -20, -91, -85, -81, -11, 21, 126, 23, -124, -65, -38, -48, 85, -15, 99, -88, -68, -13, 44, 92, 95, 106, 63, -56, -51, 83, 84, 56, 13, 63, 97, -86, 123, -35, 113, 113, 117, -84, -36, -14, 119, -25, 97, -93, -16, 120, 25, -65, -1, 100, -25, -10, 19]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "E6F355E8BD763D9328D748D6E65392B7C7DF4265FB6932BCAEC5F6ECA5ABAFF5157E1784BFDAD055F163A8BCF32C5C5F6A3FC8CD5354380D3F61AA7BDD717175ACDCF277E761A3F07819BFFF64E7F613" + "'", str17, "E6F355E8BD763D9328D748D6E65392B7C7DF4265FB6932BCAEC5F6ECA5ABAFF5157E1784BFDAD055F163A8BCF32C5C5F6A3FC8CD5354380D3F61AA7BDD717175ACDCF277E761A3F07819BFFF64E7F613");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BEBA20EB6E226639B18D711EB33F4341FB0FF3ABB4F555955A1F4A34DCD07DDE673D60E567E40636D2ED65AB40832F7", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("05E0FB985BB3FF3F5F1B31487504E81FD2B8B431D2207AC560130AAFA857FC6F1B0516C518C023028C2DEABEEF12D5ED", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.Class<?> wildcardClass28 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[85, -72, -53, -109, -114, -109, 97, -10, 2, 50, 38, -66, 114, 55, 62, -78]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[70, 124, 101, -105, -84, -68, -121, 13, -117, -18, 99, -34, 82, -40, -89, -120]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[111, 58, 30, 46, 16, 92, -65, -13, 2, 95, -37, 6, -105, 97, 92, 112]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[95, -1, 83, 60, -77, -39, 83, -6, -23, -56, 67, -1, 101, 18, -39, -54]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[36, -64, -109, 14, 33, -89, 4, 34, -89, -71, -31, -2, -11, -127, 29, -85, 47, 103, 14, 104, -95, -68, 37, 81, 23, -127, 103, -3, -58, 78, -17, -81, 111, 58, 30, 46, 16, 92, -65, -13, 2, 95, -37, 6, -105, 97, 92, 112]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[111, 58, 30, 46, 16, 92, -65, -13, 2, 95, -37, 6, -105, 97, 92, 112]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "E5C06CE6AD71B8A69E5F381767D57D2166D943E9AB07E83A865944C209345ADE5584C0C16671B7471AB435644AF8950BC63803AF920D648E8129B220C59366B2B3F236F45A39EE7EA22C5472C8BC4C89E8535713C4D670646B852CD12BDF6BFAF7551096842F464A2F0485D4F6D6E090A864FDF27666136CB6B1D6779901A244D05512A4DF78274FDFB1296192C2ABF4FD83A1D81717BF182CE1682E8302151B9DFDBB255BCB7CE74F883CEE917B7D2D52AC574CB2F61195DD92DAEB8D9F4B85F56A54EE681659806DB1311A3C8B9A13AD53A1FE8E752C615AB01D60A8EDDD1AF5851006B50CCCCF110EF582473DE08A93ACB6E82D4C3A50D61152D42B6992C52263C2E5DBE96AF5FE0EC8C68DBBA8675D126D0ECBD997534A8739EABBB7912D63751E8BA75050D90AEA16F3BE2080191B91D0C648AFDEE90D4E4E601FAF15C746900744476FC13EF6BBA387B254B32A267AC55839A9758DD0194977D4A31D5E2CB436145DDFCC89C692473D8E8374813FC91F45A6E4BED2F1262A3BE97522BB63B1D678D590B44692320B2F2BF885C9B29C09FA39A81F6EC00D01800BB0F8C2476351A181BB735C6E799E756DD030067173AFF4AA61F7657031DC98904CF1A5FEE59F00D16543C7ECEA9446E22F9D210EC1DB38E91D2F4A0EB8EDEB6F39FDCD6F3A1E2E105CBFF3025FDB0697615C70" + "'", str27, "E5C06CE6AD71B8A69E5F381767D57D2166D943E9AB07E83A865944C209345ADE5584C0C16671B7471AB435644AF8950BC63803AF920D648E8129B220C59366B2B3F236F45A39EE7EA22C5472C8BC4C89E8535713C4D670646B852CD12BDF6BFAF7551096842F464A2F0485D4F6D6E090A864FDF27666136CB6B1D6779901A244D05512A4DF78274FDFB1296192C2ABF4FD83A1D81717BF182CE1682E8302151B9DFDBB255BCB7CE74F883CEE917B7D2D52AC574CB2F61195DD92DAEB8D9F4B85F56A54EE681659806DB1311A3C8B9A13AD53A1FE8E752C615AB01D60A8EDDD1AF5851006B50CCCCF110EF582473DE08A93ACB6E82D4C3A50D61152D42B6992C52263C2E5DBE96AF5FE0EC8C68DBBA8675D126D0ECBD997534A8739EABBB7912D63751E8BA75050D90AEA16F3BE2080191B91D0C648AFDEE90D4E4E601FAF15C746900744476FC13EF6BBA387B254B32A267AC55839A9758DD0194977D4A31D5E2CB436145DDFCC89C692473D8E8374813FC91F45A6E4BED2F1262A3BE97522BB63B1D678D590B44692320B2F2BF885C9B29C09FA39A81F6EC00D01800BB0F8C2476351A181BB735C6E799E756DD030067173AFF4AA61F7657031DC98904CF1A5FEE59F00D16543C7ECEA9446E22F9D210EC1DB38E91D2F4A0EB8EDEB6F39FDCD6F3A1E2E105CBFF3025FDB0697615C70");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey48);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("BBAAED8DE0D0C63321DF75B0AC548D582A1DA3A3009A9309B260CF925C680C9F80615A52802C23CA2F5D9D15A8D778E2", secretKey48);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey48);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("482BC6D9BDD296EE583CD291CF07D86E85942568064B0B1C85099F542535565829ACF9D8D8746BF6071B3D3E378A9D86C453C070B2A0BABA4EA785D30089B55A50C87FB07DDC1FD44D7B1D8A2C83F7D9AA5F9EE7D04C41DA84D4D46033866AA87DEC15B6C47EDB65E36C96BCD1FC93AB565619976DE15C696AA168CE716BB720CF288D13616F3444C400D1EE1E1A6730AB0B4821222C121A74CB748D499D24EDB8C1B1CE1911C70A4714CA0B368B326A63C9F6070E08268FAAE43A8F126627CE442C164B3411E8B548B3C0878286D44B2EF405A501AECA5E367FAA1A91B69BC4ECB79EE90FDCD715D9DF8AE7B617F880", secretKey48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey48);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-128, 26, -121, -24, -74, -28, -107, -66, 4, -101, -24, 46, 61, -87, 37, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-77, -66, -2, -50, 45, -31, -76, 122, -83, -63, -124, -103, 15, 61, -3, 48]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-18, 79, 20, -47, 98, 46, -55, -120, -11, -101, -29, -103, -106, -99, -49, 50]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-67, -40, 22, -8, 41, -57, 6, 21, 1, -116, 70, -79, 65, 74, 0, -85]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-3, -6, 91, -38, 74, -96, -98, -120, 33, 120, 61, 101, 117, -1, -118, 30, -80, -28, 103, -86, 86, 90, 6, -90, 75, -67, -47, 116, 110, -35, -83, 50, -18, 79, 20, -47, 98, 46, -55, -120, -11, -101, -29, -103, -106, -99, -49, 50]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-18, 79, 20, -47, 98, 46, -55, -120, -11, -101, -29, -103, -106, -99, -49, 50]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[42, -40, -120, 39, -84, -100, 107, 68, 119, -108, -57, 48, -65, -23, -81, -81, 118, 89, 79, 13, 8, 68, 83, -69, 110, 113, -121, 57, -67, 45, -44, 90, -67, 102, -21, 28, 35, 19, 55, -19, 93, 11, 19, -2, 97, 23, -67, -82, -105, -38, 56, -33, -20, -18, -81, 36, 100, -81, -10, -122, -68, 53, -55, 91, 41, -77, 29, -22, 123, -99, -121, -13, -29, -38, 64, 44, 14, -111, -107, 46, -18, 114, -114, -59, 112, 65, 51, -83, -50, 122, 38, 54, 40, -53, 38, 89, -18, 79, 20, -47, 98, 46, -55, -120, -11, -101, -29, -103, -106, -99, -49, 50]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2AD88827AC9C6B447794C730BFE9AFAF76594F0D084453BB6E718739BD2DD45ABD66EB1C231337ED5D0B13FE6117BDAE97DA38DFECEEAF2464AFF686BC35C95B29B31DEA7B9D87F3E3DA402C0E91952EEE728EC5704133ADCE7A263628CB2659EE4F14D1622EC988F59BE399969DCF32" + "'", str27, "2AD88827AC9C6B447794C730BFE9AFAF76594F0D084453BB6E718739BD2DD45ABD66EB1C231337ED5D0B13FE6117BDAE97DA38DFECEEAF2464AFF686BC35C95B29B31DEA7B9D87F3E3DA402C0E91952EEE728EC5704133ADCE7A263628CB2659EE4F14D1622EC988F59BE399969DCF32");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[77, -73, 89, -8, 51, -33, 78, -118, -95, -97, 47, -84, 115, 20, -128, 79]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[42, 8, -111, -15, -22, -24, 88, 33, 117, 18, 127, -108, -128, 48, -28, 60]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-57, 94, -42, 110, -111, -107, -70, 104, 91, 47, -109, -116, 89, -109, 42, -23]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-65, -124, 12, -68, 49, -50, -52, 75, -104, 72, 15, 75, 47, -61, 87, -81]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[113, -90, -92, -57, -125, -34, 30, 123, -54, 112, -119, -57, 103, -62, -41, 87, -32, 62, 120, -25, 54, 68, -44, -52, -46, 18, 24, -63, -81, 100, 109, -115, -57, 94, -42, 110, -111, -107, -70, 104, 91, 47, -109, -116, 89, -109, 42, -23]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[56, 36, -118, 47, -83, 77, 62, 20, 43, -11, 122, 7, 0, 117, 117, -69, -32, -97, -36, 30, -45, 124, 0, -71, -50, -54, 99, -110, 21, 27, -72, 77, 20, -83, 40, -9, 53, 106, -88, -23, -66, -120, -25, 122, 116, 90, 5, 92, -125, 72, -115, -75, -6, -2, -88, -67, 47, -28, -125, 36, -40, -113, -82, -87, 85, -43, 62, 126, 21, 19, 47, -97, -27, 37, 45, -67, -85, 91, 22, -71, 7, -75, -13, -102, 47, -72, 92, 36, 75, 109, 60, -96, -77, 17, 119, 99, -57, 94, -42, 110, -111, -107, -70, 104, 91, 47, -109, -116, 89, -109, 42, -23]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-116, -87, -123, 63, -63, -81, -46, 48, -19, 119, 47, 45, -37, 15, 41, 114, 6, -91, -96, 2, 112, -116, -44, 33, 29, -99, 2, 112, 61, 66, -35, -128, -57, 94, -42, 110, -111, -107, -70, 104, 91, 47, -109, -116, 89, -109, 42, -23]");
        org.junit.Assert.assertNotNull(byteArray56);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey66);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey66);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("4A7080D96AEC6F8D77F3F1D43596449D0450C85B1B705D4E1FEE2CDBD69571D1CBF22CDC9704D263D70F45F564F946F9", secretKey66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey66);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[14, 33, 9, 103, -110, 35, -34, -56, -92, -16, 109, -18, -30, 66, 72, -110]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-124, 47, -94, 83, -49, 114, 18, -38, -125, -116, -47, 12, 38, 84, 65, 10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-116, 114, -39, 43, 14, -61, 16, -44, 35, -97, 72, 51, 124, -124, -2, -74]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-41, 57, -113, -29, 96, -62, -124, -3, 4, 118, 29, 43, -56, 55, 3, 89]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-35, 111, 2, 123, -123, -117, -2, -2, 50, 16, 114, 75, -61, 89, 27, 51]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[125, 3, -117, 76, -22, -50, 72, 28, -55, -107, -5, -120, 69, -122, 17, 108]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[119, 105, 109, -59, 108, 41, -21, 14, 34, 122, -99, 68, 105, -117, -67, -40]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-49, -1, -70, 108, 98, -120, -68, 13, -116, 38, 76, -72, -128, 19, -26, -105]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-91, -127, 37, -84, 126, -96, 99, -27, -16, 6, 95, -69, 25, 18, 83, 114]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, -75, -88, -80, 5, -124, -72, 51, 64, 49, 105, -78, -112, -25, 108, -88]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[58, -16, -89, -94, -115, 100, 65, -4, 45, 123, 96, 73, 90, 68, 60, 94]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-91, -127, 37, -84, 126, -96, 99, -27, -16, 6, 95, -69, 25, 18, 83, 114]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[58, -16, -89, -94, -115, 100, 65, -4, 45, 123, 96, 73, 90, 68, 60, 94]");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "3AF0A7A28D6441FC2D7B60495A443C5E" + "'", str59, "3AF0A7A28D6441FC2D7B60495A443C5E");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[32, -39, 118, -41, -8, 98, -34, -125, 86, 54, 29, -96, 72, 15, -112, -56]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[49, -9, 1, -36, -77, -69, -68, -77, 6, 114, -81, 86, -42, 34, -90, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[49, -9, 1, -36, -77, -69, -68, -77, 6, 114, -81, 86, -42, 34, -90, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[58, -34, -64, -94, 89, -84, 69, -125, -121, -89, 43, 70, 29, 43, 70, -32]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100, 32, -116, 105, -29, 24, -123, -76, 5, 0, -29, -4, -79, -92, -2, 37, -44, 118, -7, -24, 87, -99, -110, 104, 65, 124, 54, -26, 58, -67, -62, -72, 32, -39, 118, -41, -8, 98, -34, -125, 86, 54, 29, -96, 72, 15, -112, -56]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[2, -74, -65, -72, 33, 115, -53, 118, -67, -112, -78, 69, -93, 106, -101, 90, 41, -78, -25, 17, -40, 7, -71, -34, -40, 104, 27, 9, -97, 73, 94, -86, 9, -79, 14, -105, 75, -17, -42, 94, -79, 84, 93, 0, 107, -116, 63, -107, 101, -53, 45, -114, 66, 61, 32, -120, 54, -66, -32, -128, 83, 0, 68, 88, 107, -98, -58, -78, 63, -68, -21, 54, 6, -31, -91, -56, 110, 6, 2, -112, -94, -102, 127, 30, 57, 23, -19, -123, 33, -33, -91, 36, -77, -107, 95, -18, 32, -39, 118, -41, -8, 98, -34, -125, 86, 54, 29, -96, 72, 15, -112, -56]");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B428DBC2488C5A1B26659B9CD9178AB3D67F0EE277758201EB12FF0268D03FB142561EBA5D257ECCB97FCD67E0FC70A", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("8DF2BDAF369377059BEFB5DA4457D594F86E6CE3F0C389EF533332973DC61CDEDCA458BAEA640449F75EFC83ACF55250", secretKey8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[19, 36, -61, 61, -88, -43, 21, 109, -126, -25, -10, -14, 37, -103, 38, -21]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[109, -85, 20, -14, -29, -39, -65, 40, -128, 112, -94, -112, -7, 113, -57, 89]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[109, -85, 20, -14, -29, -39, -65, 40, -128, 112, -94, -112, -7, 113, -57, 89]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[127, 33, 106, -1, -33, -60, -78, -53, 49, 59, 120, -50, -36, -79, -95, 54]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-28, 116, 70, 1, -10, 96, -8, -21, -19, 0, 97, -128, 94, 28, 114, -37, -62, -101, -118, 90, -42, 18, 61, -70, -40, -33, -51, 34, 82, -126, -61, -118, 19, 36, -61, 61, -88, -43, 21, 109, -126, -25, -10, -14, 37, -103, 38, -21]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[33, 70, 69, 2, -23, 37, 88, -124, -17, -63, 5, -128, 123, -39, -110, -52, -25, 108, 72, -102, 59, -81, -112, 5, -98, 72, -40, -83, 99, 117, 2, -17, -42, -114, -26, 54, -72, -53, 54, -36, -14, 69, 110, -3, -63, 84, -60, -57, -82, -26, 18, 121, 98, 55, 11, -42, 42, 77, -80, 90, 66, 34, -38, -79, 125, -116, 95, -118, 37, -96, -113, -107, 24, -82, 55, 121, -64, -91, -59, 41, -16, 6, -30, 5, 115, 6, -112, 49, -67, -105, 91, 18, 115, -53, 111, -28, 19, 36, -61, 61, -88, -43, 21, 109, -126, -25, -10, -14, 37, -103, 38, -21]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[115, 14, -34, 62, 123, -77, 12, 108, -72, 59, 37, 11, -23, -99, -110, 70, 105, 89, -108, -26, 122, -49, -73, -72, 109, -79, -46, -120, -24, 86, 59, 47, -111, -95, -63, -21, -53, 61, -37, -4, 42, 33, 66, 114, -46, 111, -11, 90, -88, -109, 87, -112, -16, 63, -95, 121, -93, 15, 119, 16, 93, -92, -113, -35, 2, 9, -7, -96, -11, 82, 45, -23, -33, 99, 18, -34, 71, -52, -126, 60, 102, 19, 40, -4, 37, 78, 81, 34, 62, -103, 91, -33, 37, 39, 18, 19, 19, 36, -61, 61, -88, -43, 21, 109, -126, -25, -10, -14, 37, -103, 38, -21]");
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey10);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[71, -88, -8, -114, 48, -123, -91, -79, -66, 65, 8, -110, 125, -88, -63, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[50, 35, 12, -122, -105, 121, -43, -61, 21, -6, 65, 117, 83, -34, 96, -83]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[50, 35, 12, -122, -105, 121, -43, -61, 21, -6, 65, 117, 83, -34, 96, -83]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "32230C869779D5C315FA417553DE60AD" + "'", str7, "32230C869779D5C315FA417553DE60AD");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "32230C869779D5C315FA417553DE60AD" + "'", str8, "32230C869779D5C315FA417553DE60AD");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "32230C869779D5C315FA417553DE60AD" + "'", str9, "32230C869779D5C315FA417553DE60AD");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-38, 31, 96, -44, -127, 31, -22, -26, 71, 13, -70, 122, -11, -123, -28, 74]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[99, -84, -70, -111, -109, -97, -63, 62, -24, 48, -55, 60, -23, -85, 46, 74]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-28, -101, -123, -8, -43, -95, -60, -52, 108, 121, 94, 112, 15, -23, 118, 60]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[73, 83, -75, -44, -87, -38, -56, -8, -66, 6, -86, -64, -32, 53, -110, -120]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[90, 82, -126, 115, -82, -104, 95, 68, 119, -84, 73, 125, 104, -22, -73, 119, 59, 92, -58, -30, 89, 76, 64, -93, -34, 85, -16, -91, -108, 59, 60, 63, -28, -101, -123, -8, -43, -95, -60, -52, 108, 121, 94, 112, 15, -23, 118, 60]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, -80, -67, -38, -107, 103, -80, -128, 34, 3, -79, 11, 123, 16, 41, 76, 18, -98, 88, -38, -120, 101, 116, -109, -123, -13, 110, -48, -127, -92, -9, -106, -28, -101, -123, -8, -43, -95, -60, -52, 108, 121, 94, 112, 15, -23, 118, 60]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-29, -71, -3, 114, -9, -99, -39, 54, -106, 23, 54, -24, 102, 54, -36, 17, 121, -50, 83, -95, 24, -112, -36, 102, -8, -89, 65, 72, 120, 16, -113, -69, -124, 70, 56, -101, -82, 102, -61, -105, -97, -10, 4, -114, -125, 89, 23, 67, 113, 27, 73, 34, 39, -32, 18, 80, -2, -108, 80, -113, 109, -123, -27, -12, -15, 7, -42, 46, -117, -59, 111, -82, 43, -9, 79, 99, 71, -49, -83, 39, 81, -4, -36, -27, 119, 102, -29, 10, 75, 13, 98, 8, 1, -45, -105, -50, -28, -101, -123, -8, -43, -95, -60, -52, 108, 121, 94, 112, 15, -23, 118, 60]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-75, 2, -47, -99, -15, 77, -27, 126, 47, 96, -50, -9, -117, -20, 20, 21, -62, 94, -81, 91, -1, -47, 117, 7, -61, 97, -2, 65, 46, -17, 43, -109, -28, -101, -123, -8, -43, -95, -60, -52, 108, 121, 94, 112, 15, -23, 118, 60]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "B502D19DF14DE57E2F60CEF78BEC1415C25EAF5BFFD17507C361FE412EEF2B93E49B85F8D5A1C4CC6C795E700FE9763C" + "'", str29, "B502D19DF14DE57E2F60CEF78BEC1415C25EAF5BFFD17507C361FE412EEF2B93E49B85F8D5A1C4CC6C795E700FE9763C");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "B502D19DF14DE57E2F60CEF78BEC1415C25EAF5BFFD17507C361FE412EEF2B93E49B85F8D5A1C4CC6C795E700FE9763C" + "'", str30, "B502D19DF14DE57E2F60CEF78BEC1415C25EAF5BFFD17507C361FE412EEF2B93E49B85F8D5A1C4CC6C795E700FE9763C");
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey30);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-121, 117, -59, 96, -107, 77, -38, -30, -2, -6, -23, 117, 18, 39, 108, -126]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[61, 1, 71, 2, -70, -75, 123, 11, -121, -91, -88, -90, 49, 30, 121, 117]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[44, 1, 89, -127, 37, 77, -72, -66, 56, -22, 29, 71, 80, 124, 53, -86, 108, -87, 112, 78, 3, 118, -10, -2, 3, 100, 35, 1, 22, -71, 9, -96, 59, -60, 17, 31, 108, -112, 20, -36, -69, -47, -4, -56, -36, -71, -93, -65, 105, -17, -18, 79, 51, -17, 67, -127, 56, 57, -19, 19, -71, -85, 99, 19, 124, 51, 22, -105, -7, -79, 45, 32, 123, 32, 45, 8, 111, -74, 12, 5, -74, 51, -23, 11, 85, -118, -80, 124, 55, 91, 90, -17, 24, 65, 118, -126, -121, 117, -59, 96, -107, 77, -38, -30, -2, -6, -23, 117, 18, 39, 108, -126]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "57258DE96915505E1AD839C4A6821E5456E732EEE26F32846B2576DD35C76E62F1CA4DB68D81FEA13CF03C1600DBDAEBCAE75FCE622EDE6835A806E46E936EED89DCEECCC7411C63E02AB48C53A343FD75763DC16D4B9825FA7A5891C757BAB02644FCCCBC73A31C3C9A492E10F3D97365A522952061E1C5101E99F7FAE4D591D37F09A641B1DDD672E266DC33DF4AE3A46F60F458C9D4AB58B1D546EED1910C204ACB457266ECEF3D0AD984114E478B33B90FD4C94A8DA5F7E0E1CCA62EF8F0286BE51704A7E6797281423560A733ACD57260BC84261C8B7FDF6F03E00A4D958775C560954DDAE2FEFAE97512276C82" + "'", str9, "57258DE96915505E1AD839C4A6821E5456E732EEE26F32846B2576DD35C76E62F1CA4DB68D81FEA13CF03C1600DBDAEBCAE75FCE622EDE6835A806E46E936EED89DCEECCC7411C63E02AB48C53A343FD75763DC16D4B9825FA7A5891C757BAB02644FCCCBC73A31C3C9A492E10F3D97365A522952061E1C5101E99F7FAE4D591D37F09A641B1DDD672E266DC33DF4AE3A46F60F458C9D4AB58B1D546EED1910C204ACB457266ECEF3D0AD984114E478B33B90FD4C94A8DA5F7E0E1CCA62EF8F0286BE51704A7E6797281423560A733ACD57260BC84261C8B7FDF6F03E00A4D958775C560954DDAE2FEFAE97512276C82");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "57258DE96915505E1AD839C4A6821E5456E732EEE26F32846B2576DD35C76E62F1CA4DB68D81FEA13CF03C1600DBDAEBCAE75FCE622EDE6835A806E46E936EED89DCEECCC7411C63E02AB48C53A343FD75763DC16D4B9825FA7A5891C757BAB02644FCCCBC73A31C3C9A492E10F3D97365A522952061E1C5101E99F7FAE4D591D37F09A641B1DDD672E266DC33DF4AE3A46F60F458C9D4AB58B1D546EED1910C204ACB457266ECEF3D0AD984114E478B33B90FD4C94A8DA5F7E0E1CCA62EF8F0286BE51704A7E6797281423560A733ACD57260BC84261C8B7FDF6F03E00A4D958775C560954DDAE2FEFAE97512276C82" + "'", str10, "57258DE96915505E1AD839C4A6821E5456E732EEE26F32846B2576DD35C76E62F1CA4DB68D81FEA13CF03C1600DBDAEBCAE75FCE622EDE6835A806E46E936EED89DCEECCC7411C63E02AB48C53A343FD75763DC16D4B9825FA7A5891C757BAB02644FCCCBC73A31C3C9A492E10F3D97365A522952061E1C5101E99F7FAE4D591D37F09A641B1DDD672E266DC33DF4AE3A46F60F458C9D4AB58B1D546EED1910C204ACB457266ECEF3D0AD984114E478B33B90FD4C94A8DA5F7E0E1CCA62EF8F0286BE51704A7E6797281423560A733ACD57260BC84261C8B7FDF6F03E00A4D958775C560954DDAE2FEFAE97512276C82");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-81, -91, -64, 71, 53, -21, -52, 31, -94, 9, 89, 29, -53, -105, -101, 31]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, 71, 38, -78, 73, 66, 126, 82, -107, 33, -119, 77, -65, 86, 64, -62]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[28, 31, -110, 102, 96, -120, 2, 126, -113, 66, -68, -91, -101, -58, 98, -114]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[77, 0, 5, -106, 73, -120, -76, -96, 52, -122, 100, 15, -106, -58, -119, 19]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[33, -62, 23, 92, -30, -52, 30, -23, -105, -122, -124, 9, 70, -53, 51, 39, -50, 71, -124, -61, -102, 105, -24, -113, 106, -84, -115, -75, -71, 126, -83, -37, 28, 31, -110, 102, 96, -120, 2, 126, -113, 66, -68, -91, -101, -58, 98, -114]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[33, -62, 23, 92, -30, -52, 30, -23, -105, -122, -124, 9, 70, -53, 51, 39, -50, 71, -124, -61, -102, 105, -24, -113, 106, -84, -115, -75, -71, 126, -83, -37, 28, 31, -110, 102, 96, -120, 2, 126, -113, 66, -68, -91, -101, -58, 98, -114]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[28, 31, -110, 102, 96, -120, 2, 126, -113, 66, -68, -91, -101, -58, 98, -114]");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("79AAC6BADDEE51E806D5C55C344BCE07C014789F446BFB96606CC5F491A4CCBBE53D15D8EA22EB6673FB1293F0E712BB", secretKey2);
        java.lang.Class<?> wildcardClass5 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-34, 75, -103, 54, -70, 13, -94, 40, -79, -121, -57, 4, -30, -98, -95, -126, -118, -69, 1, 65, -17, 108, 16, 60, 96, -60, 61, 3, -116, 17, -89, 34, -5, -98, 123, -49, 46, 127, 93, 28, -115, -63, -120, 113, -102, -28, -33, -32, -99, 69, -14, -120, 44, -29, 43, 67, -94, -29, 63, 6, -115, -51, -88, 47, 104, 98, -109, -33, 62, 28, 35, -97, 78, 34, 12, -128, 6, 87, -48, -66, -92, -93, -29, 75, 101, 67, -94, 89, 104, -90, 106, 26, 42, 75, 114, -44, 19, 85, 106, -91, -105, 56, -51, -10, -88, -126, 85, -103, 9, -31, -85, -31]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[19, -65, -5, 12, -77, 20, 99, 97, -80, -41, 18, -66, -101, -63, -92, -94, -111, 61, 80, -116, -36, -9, 58, -36, 5, 60, -8, 81, -104, -51, 52, 101, 77, -47, -78, 76, 15, -13, -107, -9, -59, 39, -113, 86, 16, 49, -42, -48, 47, -90, 26, 25, -67, 111, -19, 70, -29, -57, -109, -83, 85, 66, -98, -79, 66, 98, 39, -99, 91, -47, 6, 122, 98, 102, -16, 103, -30, 87, -89, -97, 62, 116, -1, -12, -37, 15, 114, -61, 48, 56, 103, 11, -26, 93, -52, 39, 19, 85, 106, -91, -105, 56, -51, -10, -88, -126, 85, -103, 9, -31, -85, -31]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey17);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[90, -8, 64, 38, -101, -55, 33, -45, -88, -1, -14, 110, 81, 33, -93, 20]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-20, -31, -28, -86, 13, 22, -5, 4, -108, -74, -22, 73, -56, -33, 22, -75]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[69, 31, 51, 123, 103, 87, -113, 64, 26, -11, -17, 3, -59, -43, 16, -91]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[90, -8, 64, 38, -101, -55, 33, -45, -88, -1, -14, 110, 81, 33, -93, 20]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "5AF840269BC921D3A8FFF26E5121A314" + "'", str9, "5AF840269BC921D3A8FFF26E5121A314");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "5AF840269BC921D3A8FFF26E5121A314" + "'", str10, "5AF840269BC921D3A8FFF26E5121A314");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[125, 103, -78, 88, -113, -62, 43, 22, 41, 92, 43, 2, -112, -21, 99, 15]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-121, -59, 42, -16, -126, -4, 50, -90, 112, 15, -50, 25, -3, -80, -86, -101]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-121, -59, 42, -16, -126, -4, 50, -90, 112, 15, -50, 25, -3, -80, -86, -101]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-46, 24, -7, -116, 61, 61, -77, 16, 113, -83, 110, -20, 45, -82, -98, 72]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-121, -59, 42, -16, -126, -4, 50, -90, 112, 15, -50, 25, -3, -80, -86, -101]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[17, -63, 116, -82, 33, 92, -15, -2, -99, -78, 49, -16, 22, 71, 5, 38, -111, 22, 27, -2, 102, -62, -79, 52, 125, -19, -49, 87, 40, -38, -13, 85, 125, 103, -78, 88, -113, -62, 43, 22, 41, 92, 43, 2, -112, -21, 99, 15]");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey7);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey18);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E07B4BC03CA77CE3B6B1690E9A4B53D1B86B5C5D0EA675A64737A8CF5E3739F7E134859685CD93A14D0ECC62208C220", secretKey18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey18);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-52, -1, 62, -14, -90, -70, -7, -75, 2, 29, -67, -30, -17, 110, -4, 127]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-82, 62, -106, 5, 13, 39, -80, 21, -75, 73, -80, 100, 24, -52, 114, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-82, 62, -106, 5, 13, 39, -80, 21, -75, 73, -80, 100, 24, -52, 114, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-20, 104, -26, 100, 93, 21, 113, 110, -25, 45, 112, 85, 95, 13, 44, -7]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-82, 62, -106, 5, 13, 39, -80, 21, -75, 73, -80, 100, 24, -52, 114, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-53, -113, -98, -57, 108, 65, 5, 40, -41, -34, -18, 49, 79, -73, -29, -56, -102, 39, -76, -34, 81, -21, 31, 88, -73, -90, 104, -47, 107, 4, 3, 9, -52, -1, 62, -14, -90, -70, -7, -75, 2, 29, -67, -30, -17, 110, -4, 127]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[8, -67, 42, 62, 27, 49, 105, 34, 64, -59, 109, -7, 19, -25, 115, 121, 29, -128, -111, -37, -65, 27, 3, 31, 85, -41, -43, -38, -13, 34, -104, 106, -52, -1, 62, -14, -90, -70, -7, -75, 2, 29, -67, -30, -17, 110, -4, 127]");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[57, -100, 122, 31, -37, -27, 115, 12, 126, 93, 20, 26, 87, 31, -25, 106]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[58, -67, -46, -19, 115, 106, -32, -90, -50, -125, 77, -85, 16, 119, 47, 6]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[116, -59, 2, -22, 21, 35, 78, -86, -39, -21, -72, 127, -96, -101, 85, 49, 110, -13, 78, 37, 32, 25, 28, 2, -67, 104, 60, -62, -52, 90, -43, 36, 91, -103, 26, 55, 24, 64, -38, -3, 48, -7, 108, -67, 89, 86, 61, -20, 15, 69, -2, -63, -19, 36, 97, -79, 120, -119, 53, 5, -46, 44, -119, 42, 93, 56, -112, -16, -107, -42, -21, 65, -117, 71, 96, 63, -43, -15, 65, 56, -60, -115, -125, 71, -90, 73, -30, 115, -52, 52, -120, 35, 54, -83, 108, -120, 57, -100, 122, 31, -37, -27, 115, 12, 126, 93, 20, 26, 87, 31, -25, 106]");
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey39);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey39);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey39);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey39);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey39);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("6000978D729A5EAF02789174FCEF78DC19A6A5353FA2EE08001847BF93F672C57842A660B60BA3E3BAFC4CA493DB93BD616BA839F8FC6BCE8F25A5CFF9986984A5A08FB7FA9398912FBF66BA83D5698C9B89FE34ECEA63E7E13593D7BE10CB607921E0CEEC09BCE538EB3873308F1B39", secretKey39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey39);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[89, 58, 63, -125, -97, -72, 91, -76, 107, -29, 29, -2, 8, 83, 41, -114]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-4, -108, 83, -121, 70, -64, -82, 106, -72, 34, -2, 62, 16, -36, 95, -72]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-17, 27, 118, 19, 74, -6, 45, 108, 81, 62, 65, -101, 94, -64, 43, 125]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[89, 58, 63, -125, -97, -72, 91, -76, 107, -29, 29, -2, 8, 83, 41, -114]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-86, 16, 85, -127, -47, -116, 85, -67, -14, 35, -51, 72, 93, -19, -75, -3, 86, -112, -114, 58, 58, -81, 17, 122, 21, -30, -25, -84, -31, -85, -32, 126, 120, 87, -89, 111, 76, 78, 16, -85, 11, 60, 47, -21, 20, 77, 83, 12, 84, 42, -28, -100, -25, -124, 102, -36, -91, 127, -62, -35, -51, 20, -38, 80, -70, -119, -81, 41, 63, -97, -117, 42, 113, -116, 94, -104, -39, -48, -42, 43, -78, -78, -110, 43, -49, 81, 22, 126, 89, 106, 7, 64, -96, 52, -23, 84, 89, 58, 63, -125, -97, -72, 91, -76, 107, -29, 29, -2, 8, 83, 41, -114]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[89, 58, 63, -125, -97, -72, 91, -76, 107, -29, 29, -2, 8, 83, 41, -114]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[42, -117, 73, 121, 14, -125, 113, 55, 37, 77, 125, -127, -32, 3, 38, -37]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-96, 4, -44, 50, 48, 127, 79, -45, -64, -65, 41, -7, -20, 16, -26, -30]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[32, -78, 0, 41, -76, 74, -103, -127, -65, 118, 70, 15, 123, 1, -125, -116]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-92, -15, -98, 16, -113, 66, 92, -35, 127, -95, -78, -97, 11, 49, -19, 16]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-100, -39, 66, -11, 56, -91, 86, -38, 76, -3, 18, 85, 119, 20, 37, 59, 17, 77, 77, -46, -114, 84, -59, -82, 53, 63, 98, -42, -8, 101, -45, 14, 32, -78, 0, 41, -76, 74, -103, -127, -65, 118, 70, 15, 123, 1, -125, -116]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[23, -63, 69, -93, 16, 92, -39, -31, -24, 99, 10, -78, 65, -95, -76, -90, -48, -70, 98, -51, 51, -84, -91, 80, 94, -108, 32, -68, -120, 5, -35, 100, 32, -78, 0, 41, -76, 74, -103, -127, -65, 118, 70, 15, 123, 1, -125, -116]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-111, -44, 31, -6, 56, -34, 8, 5, -73, -12, 66, -89, -31, -28, 25, 126, 2, 105, -38, -30, 70, -21, 72, 120, 92, -3, 66, 121, -112, 109, 25, -8, 11, -101, 12, -10, 76, 2, 90, 109, -85, -41, 126, 122, 23, -15, 59, -62, -104, 87, 10, -116, 1, 45, 3, 64, 64, 127, -49, 105, 113, -103, 94, 61, -62, 15, -75, -24, 2, -120, -89, 64, 19, 103, -108, 63, -65, -38, -68, 114, -16, -113, -43, -11, 18, -68, -64, 112, -94, -4, -20, 22, -88, 113, -125, 84, 32, -78, 0, 41, -76, 74, -103, -127, -65, 118, 70, 15, 123, 1, -125, -116]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-93, 0, -100, -27, -119, -64, 68, -22, -57, 105, -1, -74, -84, -58, 39, 31, 94, -53, -27, 88, 82, 100, 39, -61, 49, 20, -123, 96, -42, 50, -90, 82, 32, -78, 0, 41, -76, 74, -103, -127, -65, 118, 70, 15, 123, 1, -125, -116]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[34, -40, -120, 107, 36, 113, 60, -28, -119, -48, 127, -42, 56, 122, -4, -14, 48, 46, -83, -53, 8, -38, -74, -81, -128, 63, -11, 64, 34, -50, -97, 37, 59, -110, 114, 119, -108, -72, -61, -30, 110, -87, -8, -87, 89, -118, -47, 34, -112, 94, -5, 23, 47, 83, -42, -124, 2, 59, 79, 56, 70, -9, -97, 8, -50, 8, -64, 37, -124, 43, 36, 63, -52, 90, 58, 27, -100, -37, -80, -71, -68, -69, 52, -31, 18, -105, 11, 73, -77, -74, 107, -42, -18, -123, 42, -53, 32, -78, 0, 41, -76, 74, -103, -127, -65, 118, 70, 15, 123, 1, -125, -116]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("C99944BC551B7E3A3FE32399C81DC371", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("F79DE48FFECBC3240EB83BC4F262A429E37ECDF1713013289132C2DCD6E7183A3CB835DC4520DF439A34FCDE5402ADFC4B9F57E2A6461EC417B79C120B77B802CDB8DE874E8E2233FAD2926F66B5A8EAD2D583C56B35B571FA9E68F584EDD9044F253E4254FF191ED61CE27E11C9C85D", secretKey7);
        java.lang.Class<?> wildcardClass15 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-62, 0, 118, 63, 90, -102, 109, -37, 78, 106, -72, -20, 116, 117, -103, 37]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[12, -21, -29, -4, -84, -21, 74, 77, -80, -26, -11, 120, 68, 76, 95, 118]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[5, -50, 57, -84, -3, -19, 20, 47, 87, -36, -28, 108, 37, -2, -101, 97, 89, 19, 0, 126, -8, 36, 16, -47, -95, 99, 0, 95, 103, 15, -28, 82, -46, 115, 114, -118, -14, -13, -32, -114, -83, 40, -56, -44, 122, -82, -61, -2, 112, -80, 15, 4, 90, -12, 30, -123, -64, 44, 10, 33, 107, 96, 57, -20, 64, 42, 51, -24, -51, -49, -121, 49, 110, 119, 43, -10, 77, -79, -79, -87, 39, -97, 24, -71, 76, -121, -53, 123, -9, -28, -81, -58, -60, -61, -45, -80, -62, 0, 118, 63, 90, -102, 109, -37, 78, 106, -72, -20, 116, 117, -103, 37]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 59, 24, -77, 39, -64, 17, 113, -30, 19, -69, 65, -11, -8, -19, -119, -49, -11, -82, -5, 65, -8, -79, -43, -27, 90, 86, 80, -48, 119, -47, 9, -62, 0, 118, 63, 90, -102, 109, -37, 78, 106, -72, -20, 116, 117, -103, 37]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[66, 70, -104, -28, -53, 75, 34, -106, -127, 31, -127, -38, 24, -93, -115, -29, 43, 127, 109, -24, -45, -15, 12, 15, 87, 37, -49, -85, 63, -97, -56, -27, -62, 0, 118, 63, 90, -102, 109, -37, 78, 106, -72, -20, 116, 117, -103, 37]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("9F676289759550F5BA82DF346EBAE9F6FFED3FB52F2B9BC8DDF882742C3CC155556C487A318E1531058811F96CF6B244", secretKey20);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.Class<?> wildcardClass30 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-127, 31, 48, 75, -125, -44, 57, 20, 27, -14, -16, 74, 108, 21, -9, 31]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[82, 120, 101, -118, 72, -4, 25, 59, -55, 116, 26, 24, -11, 26, 86, 89]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-20, -124, -80, 79, -114, -5, -39, 53, 75, 83, 103, -111, -122, 5, -32, -98]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-37, 68, 86, 99, -108, -79, 65, 94, 68, -33, 24, 107, -4, -11, -123, -16]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[113, 116, -92, 0, 41, -53, -17, 3, 11, 94, 60, 101, -123, 97, -65, -91, -80, -27, 60, 95, 57, -11, 2, -23, -66, -32, -7, -57, 61, -30, -76, 38, -20, -124, -80, 79, -114, -5, -39, 53, 75, 83, 103, -111, -122, 5, -32, -98]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[12, -126, 22, -102, -23, 108, 30, -3, -112, -65, -59, 125, 97, 6, 101, -74, -128, -63, -78, 40, -75, -99, -115, -99, -17, -90, -102, -40, -114, 126, -100, -73, -20, -124, -80, 79, -114, -5, -39, 53, 75, 83, 103, -111, -122, 5, -32, -98]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-43, 6, -90, -114, -11, 26, -30, -29, -4, 61, -78, -104, -89, 124, -127, -41, -46, -119, 25, -3, -70, 49, 70, -8, -91, 123, 83, -73, -116, 83, 29, -125, -65, 112, -32, -61, 105, -10, 27, -98, -35, 55, -57, -125, -38, 66, -33, -6, 84, 93, -120, 72, -55, 94, 125, -76, -100, 35, 49, 46, 80, -9, 79, 113, -47, 43, 66, 101, -12, 73, 93, 59, -69, 115, -42, 45, 17, -20, 105, 43, 74, -62, 67, -120, 122, -22, 18, 91, 54, -45, 58, 10, -64, -45, -127, -109, -20, -124, -80, 79, -114, -5, -39, 53, 75, 83, 103, -111, -122, 5, -32, -98]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[26, 53, 87, -120, -30, 48, 22, -99, 21, 54, -87, 96, -43, -22, 28, 94, -45, -5, -28, -85, -47, -118, -20, -39, -91, -101, -3, -14, -53, -36, 27, 126, -118, -89, 33, 93, -103, -89, -8, -112, 126, 76, -27, -94, -17, 53, 57, 116, -8, 98, -10, 21, -94, -69, -30, 8, 63, 93, -8, -15, -25, -67, -88, 49, 89, -109, 55, -111, 6, 90, -24, 47, 69, 59, -54, -56, -111, -94, -102, 37, -6, -50, -81, 72, -47, -4, 119, 42, 63, 107, -100, -76, -38, -90, -64, 64, -20, -124, -80, 79, -114, -5, -39, 53, 75, 83, 103, -111, -122, 5, -32, -98]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1A355788E230169D1536A960D5EA1C5ED3FBE4ABD18AECD9A59BFDF2CBDC1B7E8AA7215D99A7F8907E4CE5A2EF353974F862F615A2BBE2083F5DF8F1E7BDA83159933791065AE82F453BCAC891A29A25FACEAF48D1FC772A3F6B9CB4DAA6C040EC84B04F8EFBD9354B5367918605E09E" + "'", str29, "1A355788E230169D1536A960D5EA1C5ED3FBE4ABD18AECD9A59BFDF2CBDC1B7E8AA7215D99A7F8907E4CE5A2EF353974F862F615A2BBE2083F5DF8F1E7BDA83159933791065AE82F453BCAC891A29A25FACEAF48D1FC772A3F6B9CB4DAA6C040EC84B04F8EFBD9354B5367918605E09E");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        byte[] byteArray0 = null;
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey31);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("E03D16C43BDCC978B0F2F916B4FA73499E4117B6AD284A1BFC2E9B5F18B31F77C366A946CD628684727E7D09AEB987952AFAACCE8846853C1A42427DC6D20628570DF39DE8EE9EEFAF8079EA09D7469088034DCA30FA70490D6C57379275F7BB4D5EC1CD1E75C1F3A88A59C58775B868", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-29, -95, 15, 78, -110, -71, 18, -85, 10, -104, -77, -30, 120, -13, -26, -13]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[33, -65, 114, 78, -106, -7, -13, 58, -72, 23, 18, 90, -80, 78, -73, 89]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-77, -102, 56, 17, -87, -103, 79, 40, 57, 118, 100, -28, 80, 88, -24, 82]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[109, 93, 38, -116, -81, -3, 69, -30, -119, -85, -15, 97, 97, -86, -48, 90]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[31, -10, -47, -102, 25, -105, 19, 0, 103, -128, 95, 115, 74, 84, -42, 50]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-67, -15, -29, 67, -28, 39, -92, 90, 41, -124, -38, -89, 9, -114, 78, -30]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-66, 96, 98, 7, 25, 123, 127, 66, 51, -29, -102, -6, -25, 47, -26, -59, -62, 44, -101, -56, -127, 29, -81, -33, -42, 23, 62, 117, 40, -43, 50, 112, 31, -10, -47, -102, 25, -105, 19, 0, 103, -128, 95, 115, 74, 84, -42, 50]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-17, 124, 44, 97, 74, 48, 21, 51, -64, -16, 117, -63, -107, -69, -108, -50, -44, -69, -120, -80, 76, 54, -39, 105, -54, 77, 24, -85, -85, -65, 55, -93, 31, -10, -47, -102, 25, -105, 19, 0, 103, -128, 95, 115, 74, 84, -42, 50]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-16, -7, 48, -90, -85, -29, -49, 66, 115, 115, -31, -124, -15, 40, 86, -61, -24, -64, -114, -107, -109, -22, 107, -113, -20, 66, -35, -37, 65, -83, -126, -90, 12, 24, 42, 89, -84, -3, -93, -89, 33, 76, 111, -44, 126, 31, 33, 82, 20, -3, 31, -22, 8, -33, -115, 67, -102, -126, 109, -106, 24, -64, -26, -8, 123, 120, 89, 72, -74, -87, 119, 39, -20, -62, -108, -30, -111, 122, -90, 114, 99, 3, -37, 70, 21, -65, -80, -82, -32, -121, 72, -27, 5, -76, -120, -54, 31, -10, -47, -102, 25, -105, 19, 0, 103, -128, 95, 115, 74, 84, -42, 50]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("97CF624BF37B6002E75D548A2CDA26CB070312C17894ACF51CF23F4093EC873AB002843427AAD069394875B87A133F6609631BA0E251B17E4C03BF5267D74173EF79922E6377527A3F9E622D182D3C70BF557A9F4708B64072A2A4E73C5129D76552D84E70589F9997722D98FCBFEB60", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.Class<?> wildcardClass26 = byteArray24.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-95, 38, 67, -95, -63, -21, -56, 65, 11, 52, -100, -91, -17, -2, -108, -56]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-124, 57, 113, -94, 119, -8, 70, 42, -39, 10, 67, -42, 108, -93, -32, -32, -87, -87, -31, -68, -95, -85, 125, 112, 81, -18, 96, 47, 23, -31, 106, -38, -121, 112, 35, -81, 14, -106, -128, -96, -109, 127, 17, 23, -120, 16, 91, 86]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "843971A277F8462AD90A43D66CA3E0E0A9A9E1BCA1AB7D7051EE602F17E16ADA877023AF0E9680A0937F111788105B56" + "'", str25, "843971A277F8462AD90A43D66CA3E0E0A9A9E1BCA1AB7D7051EE602F17E16ADA877023AF0E9680A0937F111788105B56");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey12);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey12);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("76DE08D3D0237590A7B9F87AA9A0913B6C5C4E3A66D01F038A1D78F6F6A4D016924FCE6FC43C342D5E38EB051FD1E2A1", secretKey12);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("3875C109CE5D196F2B4443E414403B06086F1CE2C036D4E1AA2B10B2937D45A7C8ABB55589D6A36A8A19F2C12D3A8408", secretKey12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey12);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-101, -55, -20, 22, 96, -58, 28, 55, 13, 4, 124, -98, -31, -117, -65, -79]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-127, -73, 123, -115, -13, 125, -69, -35, 122, 43, 38, 68, 125, -97, -59, -18]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "81B77B8DF37DBBDD7A2B26447D9FC5EE" + "'", str5, "81B77B8DF37DBBDD7A2B26447D9FC5EE");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "81B77B8DF37DBBDD7A2B26447D9FC5EE" + "'", str6, "81B77B8DF37DBBDD7A2B26447D9FC5EE");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[122, 72, -108, -75, -22, -39, 79, -104, 70, -126, -24, -95, 48, -96, -88, -9]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[74, -53, -114, -53, -59, 63, 91, -67, 67, -62, 25, -24, 112, 21, 59, 64, 113, 98, -105, 120, 117, 77, -103, -73, -50, 30, 122, 66, -14, -117, -98, 65, -33, -15, 45, 4, -9, 16, 48, -99, -11, 57, -39, 93, -101, 32, -12, -87]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-20, 95, 46, 31, 52, 103, 29, 34, -9, -33, -107, -88, -34, 65, -109, 34, 24, 16, 16, 36, -15, 19, 6, -88, -61, -45, -118, 39, -40, -68, 51, 105, 87, 101, 72, -82, -12, -101, 57, -125, -9, -62, 106, 113, 69, 41, -17, -41, 19, -20, -16, -37, -62, -16, 40, -91, -94, 101, 119, 17, 84, 124, -85, -51, 93, 48, -89, 9, -30, 35, 126, -70, 24, 123, 70, -36, 72, 59, 77, -41, 33, 47, 9, 46, -104, -38, -72, 44, -11, 39, 67, 69, 65, -31, 59, -110, -33, -15, 45, 4, -9, 16, 48, -99, -11, 57, -39, 93, -101, 32, -12, -87]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[85, 41, 3, -110, 42, -116, 23, 16, 39, -32, 57, -122, -55, -6, 78, -15, 23, 3, -66, -52, 74, -118, -117, -105, 87, -55, -72, -67, 47, 23, -109, 53, 86, 123, 52, -128, -3, 19, -16, -18, 31, -43, -22, 57, 69, -62, -10, -27, -13, 54, 23, -5, 72, -89, 15, -21, 23, -111, 63, 112, -69, -123, 108, -51, 20, -38, 96, -90, -95, 98, -35, 48, 54, 120, 4, -5, 64, 93, -63, 124, -2, 63, 70, 38, 31, -110, 71, -52, -79, -110, 124, 96, 8, 12, 21, 127, -33, -15, 45, 4, -9, 16, 48, -99, -11, 57, -39, 93, -101, 32, -12, -87]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[96, 18, -114, 98, 36, -98, 60, 40, -48, 123, -122, 91, 110, -97, -85, 5, -49, -128, 19, 19, 127, 93, -28, -79, -20, -107, -4, -93, -15, -118, 109, 54, -12, 21, -41, -18, 94, -50, 72, 43, 94, -5, -11, -83, -70, -1, 46, -66, -5, 12, -11, -42, -59, 116, 119, -101, -88, 73, 25, 25, 48, -29, -63, 115, 58, -72, 23, -97, -104, 103, -72, 52, 78, 96, 43, 87, 126, 54, -5, -79, -96, 108, 79, -16, 37, 85, 23, -60, -42, -101, 109, 64, -54, 119, 1, 13, -33, -15, 45, 4, -9, 16, 48, -99, -11, 57, -39, 93, -101, 32, -12, -87]");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-92, -15, 104, -119, -55, 8, 91, -119, -76, 96, -47, 4, 127, 123, -8, 59]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[123, -55, 5, 9, -120, -23, 99, 24, 116, 0, -14, -53, -59, 108, 54, -17]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[123, -55, 5, 9, -120, -23, 99, 24, 116, 0, -14, -53, -59, 108, 54, -17]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-17, -6, 78, 69, -15, 8, 80, -49, -41, -25, 27, -59, -88, -37, 112, -113]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-92, -15, 104, -119, -55, 8, 91, -119, -76, 96, -47, 4, 127, 123, -8, 59]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9123DF082EB7475B16517AF3330A117FB76216788F933036954F4B64BC0579F4536FD33CAE5138D20BDA2B81FB28C80A9E1A59C5EBB3855C1D832BE5DF1FABB302B33F6AB07BE09E1C4C563F39E7B827651980F72FB402EB05F7332E7041D760E9728D00E98E2BA8967AF5489702C0772480DE0801BA9A41B4B2EB717F2881F4402D9307DDDD50719F8F8259721052B13EC3A1453BE5E4ADC743875396229299A595D001928C6E39D6C4E08C493804024ABF97B36F1E1561AF098E94A66B5628FD65F56269C8E0B8EB5259CD1E70D68DA56992E05455A8947E4696D7018F3E11A4F16889C9085B89B460D1047F7BF83B" + "'", str13, "9123DF082EB7475B16517AF3330A117FB76216788F933036954F4B64BC0579F4536FD33CAE5138D20BDA2B81FB28C80A9E1A59C5EBB3855C1D832BE5DF1FABB302B33F6AB07BE09E1C4C563F39E7B827651980F72FB402EB05F7332E7041D760E9728D00E98E2BA8967AF5489702C0772480DE0801BA9A41B4B2EB717F2881F4402D9307DDDD50719F8F8259721052B13EC3A1453BE5E4ADC743875396229299A595D001928C6E39D6C4E08C493804024ABF97B36F1E1561AF098E94A66B5628FD65F56269C8E0B8EB5259CD1E70D68DA56992E05455A8947E4696D7018F3E11A4F16889C9085B89B460D1047F7BF83B");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9123DF082EB7475B16517AF3330A117FB76216788F933036954F4B64BC0579F4536FD33CAE5138D20BDA2B81FB28C80A9E1A59C5EBB3855C1D832BE5DF1FABB302B33F6AB07BE09E1C4C563F39E7B827651980F72FB402EB05F7332E7041D760E9728D00E98E2BA8967AF5489702C0772480DE0801BA9A41B4B2EB717F2881F4402D9307DDDD50719F8F8259721052B13EC3A1453BE5E4ADC743875396229299A595D001928C6E39D6C4E08C493804024ABF97B36F1E1561AF098E94A66B5628FD65F56269C8E0B8EB5259CD1E70D68DA56992E05455A8947E4696D7018F3E11A4F16889C9085B89B460D1047F7BF83B" + "'", str14, "9123DF082EB7475B16517AF3330A117FB76216788F933036954F4B64BC0579F4536FD33CAE5138D20BDA2B81FB28C80A9E1A59C5EBB3855C1D832BE5DF1FABB302B33F6AB07BE09E1C4C563F39E7B827651980F72FB402EB05F7332E7041D760E9728D00E98E2BA8967AF5489702C0772480DE0801BA9A41B4B2EB717F2881F4402D9307DDDD50719F8F8259721052B13EC3A1453BE5E4ADC743875396229299A595D001928C6E39D6C4E08C493804024ABF97B36F1E1561AF098E94A66B5628FD65F56269C8E0B8EB5259CD1E70D68DA56992E05455A8947E4696D7018F3E11A4F16889C9085B89B460D1047F7BF83B");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9123DF082EB7475B16517AF3330A117FB76216788F933036954F4B64BC0579F4536FD33CAE5138D20BDA2B81FB28C80A9E1A59C5EBB3855C1D832BE5DF1FABB302B33F6AB07BE09E1C4C563F39E7B827651980F72FB402EB05F7332E7041D760E9728D00E98E2BA8967AF5489702C0772480DE0801BA9A41B4B2EB717F2881F4402D9307DDDD50719F8F8259721052B13EC3A1453BE5E4ADC743875396229299A595D001928C6E39D6C4E08C493804024ABF97B36F1E1561AF098E94A66B5628FD65F56269C8E0B8EB5259CD1E70D68DA56992E05455A8947E4696D7018F3E11A4F16889C9085B89B460D1047F7BF83B" + "'", str15, "9123DF082EB7475B16517AF3330A117FB76216788F933036954F4B64BC0579F4536FD33CAE5138D20BDA2B81FB28C80A9E1A59C5EBB3855C1D832BE5DF1FABB302B33F6AB07BE09E1C4C563F39E7B827651980F72FB402EB05F7332E7041D760E9728D00E98E2BA8967AF5489702C0772480DE0801BA9A41B4B2EB717F2881F4402D9307DDDD50719F8F8259721052B13EC3A1453BE5E4ADC743875396229299A595D001928C6E39D6C4E08C493804024ABF97B36F1E1561AF098E94A66B5628FD65F56269C8E0B8EB5259CD1E70D68DA56992E05455A8947E4696D7018F3E11A4F16889C9085B89B460D1047F7BF83B");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("095B570818310585D0405956CBBA6CAE63732C67F7538AEA25A4C4E0CBCE351DFA61BF290C3276FCF85393D00C2F35C1CDCFC19622D7E1E5F345C17BB904C8243F7CA53245C6ECCC8AF4AEA778E203624666E8E4BCA02788FB7993BD52DCBADFBD68D8C6471E68FE5C6FD80D6E18EF86", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.Class<?> wildcardClass16 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 92, -81, -20, 62, 87, -21, -123, -72, 73, 89, -61, -80, 11, 100, 54]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[18, -102, -121, -79, -42, -62, 15, -65, 48, -64, 109, 108, -96, 79, 4, -43]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-77, -66, 126, -32, -22, -102, 75, 54, 81, -21, -11, -94, 105, -70, 106, 109]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 92, -81, -20, 62, 87, -21, -123, -72, 73, 89, -61, -80, 11, 100, 54]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-68, -107, -119, -125, 94, -27, -100, -12, -66, 16, -120, 49, -122, 47, -1, 0, -99, -117, -113, -7, 115, 71, -99, -13, -98, -72, -80, -118, -40, 8, 27, -101, 122, -6, 23, -103, 36, -64, -91, -67, 64, -120, -55, -16, -36, 104, -94, -86, -89, -79, -57, -88, -115, 49, -31, 111, 35, 113, -102, 25, -112, 60, 8, -119, -48, 118, -88, 13, -24, 75, 9, 121, -18, 67, -32, -27, -99, 120, -124, 68, 11, -33, 98, 8, 100, -105, -120, -117, -68, -124, 98, -88, -121, -31, -78, -95, 47, 92, -81, -20, 62, 87, -21, -123, -72, 73, 89, -61, -80, 11, 100, 54]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[91, 95, 86, -125, 66, -9, 33, -62, 100, -101, -100, -36, 15, 58, -19, -62, -106, -125, -50, 10, -37, -13, -3, -80, 53, -4, -59, 120, -15, 17, -118, 111, 47, 92, -81, -20, 62, 87, -21, -123, -72, 73, 89, -61, -80, 11, 100, 54]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "76B64A8AFE3B92826EA73BCD92E61D49E821A8098D541B38A6C5756AEA1BD0AD4CA8237784A68CD6673E3A586765B692E9E406C12ED37E11EDBCDA17B86FD9483D01CA1F2D0E9A9672470E967D999AF49D6E68FAE57DB1855F70B5FDFB2240D67395616E95219C166EC866FEB855C4B48203492C80FE37BB2F09B58AF3C960C7833BD468F01153F3E51A74D23416846E9F8CFA898D727486B9ACC595C9D963F2161C61BF6AC7B2A520E7C5594B9B434F01B88C9C70BCFA2463B7B5CF36985EEA3C14DBEC356F64AEE60A76ADE7E80254CC5D251FC6C8C1F60228D19D281179052F5CAFEC3E57EB85B84959C3B00B6436" + "'", str15, "76B64A8AFE3B92826EA73BCD92E61D49E821A8098D541B38A6C5756AEA1BD0AD4CA8237784A68CD6673E3A586765B692E9E406C12ED37E11EDBCDA17B86FD9483D01CA1F2D0E9A9672470E967D999AF49D6E68FAE57DB1855F70B5FDFB2240D67395616E95219C166EC866FEB855C4B48203492C80FE37BB2F09B58AF3C960C7833BD468F01153F3E51A74D23416846E9F8CFA898D727486B9ACC595C9D963F2161C61BF6AC7B2A520E7C5594B9B434F01B88C9C70BCFA2463B7B5CF36985EEA3C14DBEC356F64AEE60A76ADE7E80254CC5D251FC6C8C1F60228D19D281179052F5CAFEC3E57EB85B84959C3B00B6436");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray41 = new byte[] {};
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey43);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey47);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey47);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray41, secretKey47);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey47);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey47);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey47);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey47);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey47);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey47);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-33, 105, 48, 39, 111, -81, 116, -8, -59, 90, -96, -1, 59, -11, -108, -36]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[18, -47, 54, -77, -92, -114, -54, 3, -73, 111, 108, 12, 27, 32, -22, -20]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[90, 26, 61, -77, 81, 118, 12, -40, -55, 31, -123, -11, -61, 60, -22, -127]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-105, 104, 23, 114, -11, 41, 121, 96, -48, -51, -11, -121, -68, -25, 46, -47]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-90, 22, 84, 91, -74, -112, -9, -50, -14, 92, 92, 122, 53, -45, 95, 11, 87, -64, 0, 80, 104, 60, 17, 4, -3, 63, -43, 29, -91, -30, -107, -35, 90, 26, 61, -77, 81, 118, 12, -40, -55, 31, -123, -11, -61, 60, -22, -127]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[90, 26, 61, -77, 81, 118, 12, -40, -55, 31, -123, -11, -61, 60, -22, -127]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "5A1A3DB351760CD8C91F85F5C33CEA81" + "'", str25, "5A1A3DB351760CD8C91F85F5C33CEA81");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-106, -16, -106, -36, 9, 8, 93, 2, 3, -62, -115, 77, -55, 19, 57, 43]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[15, 120, 40, -47, -66, 67, -18, 91, 24, 55, 59, -113, -47, -96, -128, 91]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[4, -77, 74, -106, 6, 26, -13, -19, 35, -110, 6, -6, -64, 89, -104, -106]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-16, 14, -76, 86, 14, 71, -113, 89, 57, -62, -25, -111, -13, -22, -93, -68]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[24, -7, 61, -92, -99, 125, 104, 20, -7, -80, -55, -52, -95, 11, -33, 94, -93, 81, -36, 35, 104, 54, 72, 26, -44, 86, 44, 73, 70, 12, -56, -2, 4, -77, 74, -106, 6, 26, -13, -19, 35, -110, 6, -6, -64, 89, -104, -106]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-98, -85, 80, -87, -116, 72, -30, 63, 6, -70, -59, 115, -62, 116, 92, 34, 85, -2, 46, 118, -37, -112, -105, 12, -8, 21, -121, 126, 6, -55, 54, -64, 4, -77, 74, -106, 6, 26, -13, -19, 35, -110, 6, -6, -64, 89, -104, -106]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[96, -62, 37, -6, 25, 30, -33, -113, -20, -112, 93, -8, 30, 124, 39, -108, -127, -86, 52, -100, 51, 89, 86, 17, 6, 86, -4, 41, 26, 31, -8, -88, -50, -78, 87, -3, 36, 109, 99, 28, -89, -106, 44, 67, 39, -98, -128, 33, -120, 95, -37, -93, -95, -31, 59, -67, -80, 88, -69, -17, 84, -121, -36, 123, -57, -121, 47, -35, 111, 33, -101, 104, 84, -99, 48, -2, 60, -52, 52, 20, -18, 93, -5, -52, 50, 56, 18, -64, 109, -113, -97, -16, -4, -66, -90, 67, 4, -77, 74, -106, 6, 26, -13, -19, 35, -110, 6, -6, -64, 89, -104, -106]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-24, 47, 1, 28, -52, -65, -42, -74, -83, 96, -112, 111, 71, 37, 73, 16, -128, -105, -93, 16, -44, -50, -20, -79, 76, 34, -52, 79, -24, -11, -76, 26, 4, -77, 74, -106, 6, 26, -13, -19, 35, -110, 6, -6, -64, 89, -104, -106]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[81, -15, -67, 4, 70, 10, -29, 120, 35, -1, 26, -41, -119, -89, -25, -86, -65, 10, -2, 28, 85, -34, -112, 14, 31, 70, -89, -28, -118, 122, 47, 15, 70, 83, 62, -68, 26, -119, 70, 123, 69, -109, 44, -58, 89, -7, 2, 119, -67, 6, 82, 54, -14, -90, -102, 70, -46, -20, -91, 75, 94, 105, 116, -111, 119, -46, 44, 77, -117, -103, 58, -2, -1, 20, 87, -39, -119, 96, -120, -25, 83, 114, 120, -43, 42, 77, -56, -70, -84, -78, -16, 63, -109, 122, -71, -71, 4, -77, 74, -106, 6, 26, -13, -19, 35, -110, 6, -6, -64, 89, -104, -106]");
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey2);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[26, 35, -23, -100, 53, 28, -4, 75, -59, -6, 24, 121, 53, -65, -82, 62, 57, -52, -52, 54, 31, -56, -54, -11, -23, 104, -68, 9, 65, 76, 83, -118, -26, -116, 102, -59, 86, -40, 70, -89, 78, -83, 106, -34, 112, 104, -11, -80, 10, 15, -58, 41, -77, -24, -89, -125, -76, 19, -124, -38, 0, -50, -58, -61, -70, -100, 16, 115, 122, 54, 25, 124, 13, -79, 100, 64, 55, 76, 70, -70, -117, 115, -52, -32, -38, 83, 29, 0, -2, -48, 118, 85, 48, 8, -107, 81, 26, -99, -41, 92, -60, 3, -3, -127, -41, -96, 71, 9, 72, 80, 55, 67]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[46, 54, -67, 120, 85, -116, 75, 81, -37, 88, 48, 28, -91, 3, 59, 13, 58, 21, -53, -43, 6, 101, 71, 3, -90, 78, 116, 96, -121, -83, -96, 51, 26, -99, -41, 92, -60, 3, -3, -127, -41, -96, 71, 9, 72, 80, 55, 67]");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-37, 75, -48, -120, -18, 92, -30, 8, -32, -88, -86, -53, 16, -40, -72, 54]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[113, -61, -80, -57, 94, 49, 72, 123, 101, -34, 59, -74, -12, -95, 8, 34]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[113, -61, -80, -57, 94, 49, 72, 123, 101, -34, 59, -74, -12, -95, 8, 34]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-52, 102, -52, -74, 55, -105, -9, 98, -37, 110, 100, -76, -23, 111, -29, -98]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-37, 75, -48, -120, -18, 92, -30, 8, -32, -88, -86, -53, 16, -40, -72, 54]");
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey61);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey61);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey61);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey61);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("73912D453669B7FE81F32940C313724166866F2175F958719DB06EACDD4B5B281CDFE84185F2C4749276BA8BA5DBD8CF2E04DD8ED74819514EFAF9BC4E90AF512FCF0DFE37924499911E8A60792941EBA04320836BF21CEADDDA3D50DE7CD3D4D05E7829B393DF4225B293463740D538", secretKey61);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("\006\ufffd\ufffd\t\ufffd\023S\031\ufffd\ufffd}+", secretKey61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey61);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[4, 117, 6, -109, -40, -15, 109, -16, -36, -35, -73, -35, 4, 30, -80, 52]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-71, 102, -14, 45, -19, -122, 113, -126, 30, -54, 37, 55, 25, 27, -57, 80]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[35, 117, -69, 16, 39, 67, 74, 93, -30, -15, 28, 88, 67, 67, 126, 58]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-69, -58, 20, 6, 27, 111, -81, -118, 80, 29, -75, -3, -44, 114, 4, 108]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[38, 116, 70, 90, -11, 95, 68, 126, 75, 85, -75, 47, -16, -34, -120, 34, -121, 9, 0, -127, -12, 53, -64, 26, 92, 52, 66, -60, 23, -31, -35, -36, 35, 117, -69, 16, 39, 67, 74, 93, -30, -15, 28, 88, 67, 67, 126, 58]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-90, -46, 99, -103, -25, -85, -101, -121, 18, -69, 20, -12, -22, 83, -93, -11, 6, 78, 47, -81, -122, -81, -94, 66, 23, -18, 23, 67, 94, 11, 64, -60, 35, 117, -69, 16, 39, 67, 74, 93, -30, -15, 28, 88, 67, 67, 126, 58]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-102, 38, -8, 27, 81, 77, -78, -90, 85, 32, -119, 8, -67, 86, -81, -70, 49, -125, -100, -57, -126, 119, -127, -34, 56, 74, -96, -89, 105, 114, -115, 118, 17, 126, -73, 127, -109, -24, 73, -96, -3, 109, 121, 47, -32, -47, 2, -11, -7, -76, 83, 25, -120, 10, 52, 31, -36, 88, 3, 81, 51, 15, -115, -64, 105, 21, -25, 17, -98, 104, 100, 119, 49, -48, -15, -102, 25, 18, -76, -100, 39, -91, -83, -42, 33, -17, 15, 75, 121, -90, 80, 52, -25, -74, -101, 63, 35, 117, -69, 16, 39, 67, 74, 93, -30, -15, 28, 88, 67, 67, 126, 58]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[39, -123, 41, -53, 54, 109, -63, 42, -22, 56, -11, 31, 66, -9, 94, -10, -6, -35, 103, 9, -105, 106, 37, -69, 80, 82, 0, -113, -20, -64, 82, 103, 35, 117, -69, 16, 39, 67, 74, 93, -30, -15, 28, 88, 67, 67, 126, 58]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[35, 117, -69, 16, 39, 67, 74, 93, -30, -15, 28, 88, 67, 67, 126, 58]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-117, -78, -89, 32, -16, -88, -21, -33, -68, 113, 57, -17, -39, -79, 19, -35]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-92, -75, -20, -65, -50, 66, -94, 17, 6, 18, 54, 123, -5, 31, -44, -52]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[51, 42, 44, -16, -102, 73, 86, -108, -39, -73, 25, -44, -44, 19, 48, 9]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-67, 57, 82, 23, -62, 66, -49, -54, 44, 51, 113, 23, 123, -16, 119, -47]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-108, 40, -20, 9, 7, -18, 38, -23, -116, 89, -94, -15, -28, -43, 102, -66]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[125, -92, 125, -71, 82, 15, 32, 115, 36, 126, 71, -88, -72, 100, 48, -59]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[125, -92, 125, -71, 82, 15, 32, 115, 36, 126, 71, -88, -72, 100, 48, -59]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[29, 60, 48, -51, -8, -12, 46, 107, 95, 32, 71, -92, -128, -77, 117, -9, 4, -22, -18, 89, -51, 53, 52, 23, -108, -70, -12, 121, -10, -111, -87, 85, -108, 40, -20, 9, 7, -18, 38, -23, -116, 89, -94, -15, -28, -43, 102, -66]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[109, -33, 4, 31, 74, 88, 58, -10, 115, 74, 116, 42, -100, 80, -46, -61, -102, -47, -12, 76, 105, 26, -4, -99, 117, -32, -50, -82, -54, 34, -3, -94, -108, 40, -20, 9, 7, -18, 38, -23, -116, 89, -94, -15, -28, -43, 102, -66]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[76, -3, 114, -89, -102, 22, -30, 113, 84, -17, 55, 105, 27, -77, 37, 88, 54, 100, -89, -46, 79, 29, 123, 79, -45, 57, -10, 48, 108, -111, 49, 86]");
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("FDD1CC2D1FDDF23E86F7D0084C44CD45D045C2489C75264FE354E400659337C6D3C301D96A30FA65A7F5014B3B6AC53B", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BEBA20EB6E226639B18D711EB33F4341FB0FF3ABB4F555955A1F4A34DCD07DDE673D60E567E40636D2ED65AB40832F7", secretKey22);
        java.lang.Class<?> wildcardClass33 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 48, -65, -84, 90, 86, 75, -26, 38, 122, -124, -67, 53, 86, 4, 84]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[42, -27, -66, 60, -94, 124, 75, -57, 84, -77, -28, 41, -11, 65, -81, 48]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[108, 90, 125, -59, -125, 3, 75, 37, 113, -48, -111, -100, 82, -124, -37, 28]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-50, 95, -100, -82, 107, 17, -54, 12, 41, -24, 7, -109, -71, -125, -119, -13]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-106, 38, -60, 74, -94, 22, 13, -54, 1, -101, 48, 79, -62, 42, -21, 33, 68, 59, 43, -47, -101, 98, 114, 122, 101, -51, 96, 73, 31, 61, 33, -91, 108, 90, 125, -59, -125, 3, 75, 37, 113, -48, -111, -100, 82, -124, -37, 28]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[103, -37, -95, 86, 122, 53, 47, 75, 112, 9, 46, 9, 28, 81, -89, 100, 87, 49, 74, -108, 42, 116, -79, 22, -97, 31, 118, 109, 80, -44, -125, 83, 108, 90, 125, -59, -125, 3, 75, 37, 113, -48, -111, -100, 82, -124, -37, 28]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-84, -64, 70, -32, 111, -29, -73, 93, -71, 79, 84, -60, -105, 76, -63, 73, 102, -42, -69, -125, -103, 43, -105, 38, -30, -38, -65, -45, 20, -36, -75, -57, -60, -60, -23, -25, 113, -17, -114, 30, -66, -59, -61, -87, 65, 43, 87, 40, 32, 123, -49, 31, 39, 87, 68, -70, -78, 77, -57, -30, 108, 45, -71, -44, -85, 120, 66, -61, -64, 114, 97, -21, -103, -74, 107, -85, 123, 34, 42, 30, -29, -109, 47, 92, 48, -80, -53, -84, -41, 106, 87, 119, 52, 79, 96, -117, 108, 90, 125, -59, -125, 3, 75, 37, 113, -48, -111, -100, 82, -124, -37, 28]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[39, 98, 45, 120, 26, 67, -6, -52, -106, -33, 8, -104, -121, -40, 72, -22, 74, -45, -102, -83, -45, 96, -1, -103, -71, -40, 36, -100, -90, 7, 90, -65, 108, 90, 125, -59, -125, 3, 75, 37, 113, -48, -111, -100, 82, -124, -37, 28]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-27, -127, 90, 24, -49, 117, -78, -91, 111, 67, -113, 29, 38, -70, -107, -112, -64, -12, 125, -20, 43, -22, -64, 8, -75, 125, -5, 109, 106, -23, 6, -125, 97, 108, -67, -3, 57, -111, -60, -27, -121, 68, -9, -13, -60, 122, -51, -64, 57, 36, -39, 20, -64, 38, -21, 24, -10, 126, 41, -6, -2, 23, 18, -114, -9, -20, 94, 119, 22, 67, -19, 92, 3, -21, -96, -107, 13, -73, -8, 99, -100, 83, 28, -41, -76, -66, -87, 46, -29, 89, -44, -70, -68, 97, -59, 86, 108, 90, 125, -59, -125, 3, 75, 37, 113, -48, -111, -100, 82, -124, -37, 28]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[54, -74, -20, 50, -68, 61, 81, -99, -119, 23, -45, -3, -93, -37, -126, -90, 22, -39, 94, -126, -67, -105, -82, -44, -116, -61, -109, 50, -103, 34, -28, -73, -98, -33, 75, -43, 25, -52, -127, 25, -61, -93, -108, 78, 96, 96, 52, -32, 23, 36, -61, -64, -67, 95, 20, -103, 53, -99, -128, -109, -110, -44, -3, -46, 71, 34, -99, -8, 60, -31, 119, -36, 33, -81, -100, -102, 83, -88, -76, -37, 89, 21, -122, -119, -1, 48, -112, 43, 111, 114, -101, 50, -56, -28, -12, -102, 108, 90, 125, -59, -125, 3, 75, 37, 113, -48, -111, -100, 82, -124, -37, 28]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey51);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey68);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey68);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E3004902688E1BC3644525442F9DC38", secretKey68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey68);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[57, 105, 27, -74, 79, 54, -60, 119, -73, -30, 112, 53, -123, 83, 10, -89]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-31, -123, -10, 98, 3, -124, 122, 80, 115, -65, -22, 48, 82, -91, 5, 65]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-43, 112, -43, -122, 25, 103, -63, 58, -47, 52, -124, 11, -18, 121, 73, -110]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-55, 87, -79, 101, -67, 74, 41, 110, -79, 62, 13, 92, 99, 93, -85, -20]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-127, 37, 31, 37, -83, 121, -53, -40, 65, 47, 67, 72, -104, 66, -128, 9]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[16, 70, 2, -24, 21, 28, 71, -122, 73, 31, 66, 61, -25, -75, 120, 5]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[20, 79, 62, -53, -65, -77, 93, -98, 127, -107, -109, 24, 67, 60, -21, -96]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-55, -42, -30, -73, -86, 61, 36, 73, 117, 123, -26, -88, 29, 81, 120, -112]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-34, 58, 66, 118, 59, -16, 107, 102, -53, -65, -78, -58, 21, -98, 58, 108]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-124, 56, 107, -108, -43, 103, -111, -119, -39, -1, 5, 58, 59, 49, 91, 114]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[43, -52, -32, 56, 123, 123, 81, -52, 52, -122, 84, 127, -88, -18, 41, 71]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-34, 58, 66, 118, 59, -16, 107, 102, -53, -65, -78, -58, 21, -98, 58, 108]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[58, -10, -92, -27, 113, -58, 6, -35, 59, 33, -12, 98, -25, 43, 105, 104, 104, 106, 95, 16, -72, -42, -64, -99, -117, -34, -1, -87, 39, -93, -1, 120, -34, 58, 66, 118, 59, -16, 107, 102, -53, -65, -78, -58, 21, -98, 58, 108]");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "3AF6A4E571C606DD3B21F462E72B6968686A5F10B8D6C09D8BDEFFA927A3FF78DE3A42763BF06B66CBBFB2C6159E3A6C" + "'", str59, "3AF6A4E571C606DD3B21F462E72B6968686A5F10B8D6C09D8BDEFFA927A3FF78DE3A42763BF06B66CBBFB2C6159E3A6C");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "3AF6A4E571C606DD3B21F462E72B6968686A5F10B8D6C09D8BDEFFA927A3FF78DE3A42763BF06B66CBBFB2C6159E3A6C" + "'", str60, "3AF6A4E571C606DD3B21F462E72B6968686A5F10B8D6C09D8BDEFFA927A3FF78DE3A42763BF06B66CBBFB2C6159E3A6C");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[24, 80, 12, 59, 111, 63, -25, -1, -43, -52, 7, -29, 75, -8, 110, 121]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[29, -19, -112, -60, 30, -42, 23, 18, 56, 17, 106, 37, 70, -101, 120, 86]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[29, -19, -112, -60, 30, -42, 23, 18, 56, 17, 106, 37, 70, -101, 120, 86]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-89, -46, -7, -60, -100, -119, -11, 55, -11, 75, -75, 114, 72, 70, -28, -38]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[29, -19, -112, -60, 30, -42, 23, 18, 56, 17, 106, 37, 70, -101, 120, 86]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-94, 22, 116, -31, 50, -52, -126, 69, -75, 29, -85, -55, -9, -46, 45, 82, -101, 48, -46, 14, -117, -51, -115, -34, -114, 18, 9, 118, -97, -126, -8, 21, 24, 80, 12, 59, 111, 63, -25, -1, -43, -52, 7, -29, 75, -8, 110, 121]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-82, 87, -128, -46, -9, 22, -11, 27, -118, 106, -35, 84, 15, 23, 10, -102, -19, 33, 17, -63, 16, 19, 8, -105, 69, 65, -104, -124, -104, -118, -70, 8, 24, 80, 12, 59, 111, 63, -25, -1, -43, -52, 7, -29, 75, -8, 110, 121]");
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey40);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey67);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        byte[] byteArray77 = new byte[] {};
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray77);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray77, secretKey79);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey83);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey83);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray77, secretKey83);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey83);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey83);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("469F801EA353158E3E89CA18D7CCDFADA03BFBE30937878145368419267FF8E58E05E01B03758D40E4D42FC50A2839A75F7DADDB1A9B05B7C77AE48B7BE66F1D1665F37C77CFDA34BAFCF6C90E51DEA0C1C1140E226822BB8978329D2222818AAC4033113C40D61325D64F66225F7B95", secretKey83);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey83);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[69, 67, -123, 78, -81, 88, -110, 50, 124, -73, -8, 20, -46, 69, -61, 124]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[66, 101, 62, 3, -45, -74, -69, -39, -66, -42, 76, -97, -106, -88, 35, -2]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-41, -60, 29, -3, 46, -88, -91, 122, -50, -110, -86, -36, 112, 94, 46, 44]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, -74, 92, 2, 95, -46, 34, 92, 57, -117, -77, 36, 59, 119, 44, -69]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-31, 54, 125, -101, 43, -105, -52, -5, -112, -103, -65, -113, -3, 16, 80, -109]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[35, -87, 73, 52, 72, 118, -95, 85, -103, 94, -103, -82, 33, -12, -83, -14]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-93, 2, 13, 67, -56, 25, -25, -69, 81, -74, 64, 101, -81, 26, -104, -47]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[91, 5, 93, -95, -105, 45, 103, -62, -1, 80, 45, 47, -95, 58, 12, -27]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[74, 15, -71, -4, -121, 19, -40, 36, -112, -17, -33, -114, -79, -70, 10, -76, -89, 23, -74, -10, -7, 3, -105, -33, 116, -128, -126, 95, 99, -20, -13, -17, -93, 2, 13, 67, -56, 25, -25, -69, 81, -74, 64, 101, -81, 26, -104, -47]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-81, 19, 74, 84, 57, 19, -116, 27, 11, 98, 97, -45, -2, 32, 87, 68, -65, -86, 127, -76, 38, -96, 88, 54, 38, -58, 52, 105, 35, -6, 67, 60, -93, 2, 13, 67, -56, 25, -25, -69, 81, -74, 64, 101, -81, 26, -104, -47]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[78, -22, -123, 115, -43, -17, 82, 56, -39, -102, 92, -42, 13, 65, -24, 36, -113, 43, -2, -34, -68, -99, -94, 70, -128, 27, -83, 21, -57, -33, -10, -126, 14, 31, 88, 52, 18, 28, -121, -34, -106, 44, 30, -127, -10, 12, 31, 118, 18, 104, 96, 121, 79, -102, 50, 47, 6, 106, -60, 44, 121, 28, -66, -106, -44, -70, -124, -56, 59, -118, -78, -54, -89, 30, -23, -86, -92, 93, -122, 64, -9, 113, 21, -17, 86, 62, 120, -109, -51, 12, 95, -105, -82, 47, 47, 46, -93, 2, 13, 67, -56, 25, -25, -69, 81, -74, 64, 101, -81, 26, -104, -47]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "4EEA8573D5EF5238D99A5CD60D41E8248F2BFEDEBC9DA246801BAD15C7DFF6820E1F5834121C87DE962C1E81F60C1F76126860794F9A322F066AC42C791CBE96D4BA84C83B8AB2CAA71EE9AAA45D8640F77115EF563E7893CD0C5F97AE2F2F2EA3020D43C819E7BB51B64065AF1A98D1" + "'", str49, "4EEA8573D5EF5238D99A5CD60D41E8248F2BFEDEBC9DA246801BAD15C7DFF6820E1F5834121C87DE962C1E81F60C1F76126860794F9A322F066AC42C791CBE96D4BA84C83B8AB2CAA71EE9AAA45D8640F77115EF563E7893CD0C5F97AE2F2F2EA3020D43C819E7BB51B64065AF1A98D1");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "4EEA8573D5EF5238D99A5CD60D41E8248F2BFEDEBC9DA246801BAD15C7DFF6820E1F5834121C87DE962C1E81F60C1F76126860794F9A322F066AC42C791CBE96D4BA84C83B8AB2CAA71EE9AAA45D8640F77115EF563E7893CD0C5F97AE2F2F2EA3020D43C819E7BB51B64065AF1A98D1" + "'", str50, "4EEA8573D5EF5238D99A5CD60D41E8248F2BFEDEBC9DA246801BAD15C7DFF6820E1F5834121C87DE962C1E81F60C1F76126860794F9A322F066AC42C791CBE96D4BA84C83B8AB2CAA71EE9AAA45D8640F77115EF563E7893CD0C5F97AE2F2F2EA3020D43C819E7BB51B64065AF1A98D1");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-24, 8, 39, 10, 127, 56, 35, -45, 15, -89, 40, -7, 72, -61, 5, 111]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[3, -8, -11, 16, 66, -63, 13, -65, -78, -109, 13, -2, -68, 32, 100, -76]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[3, -8, -11, 16, 66, -63, 13, -65, -78, -109, 13, -2, -68, 32, 100, -76]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[29, 52, -20, -82, -55, 112, -53, -75, -71, 69, 97, 31, -65, -84, -43, -13]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-108, -116, -35, -125, -28, -77, -49, 56, 84, -66, -68, -7, 76, -54, -97, -122]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-94, 101, 45, -96, -45, 81, 102, -106, -53, 1, 42, 38, -15, -6, -124, -124, -82, -86, 112, -79, 124, -89, -24, 9, 5, 17, 27, 55, 93, 6, 43, -107, -2, 44, 110, 44, -78, -7, -94, 102, 69, 37, -5, 104, 89, 49, -92, -24, 3, 4, 3, -78, 58, -35, 6, -53, 61, -42, -72, 63, -19, 102, 123, -77, 40, 126, -76, -104, 126, -8, 102, 78, -16, 61, -44, -55, 42, -83, -8, -114, 24, -92, 64, 124, 73, -38, -127, -41, -126, -67, -48, 92, -42, 14, 121, 31, 29, 52, -20, -82, -55, 112, -53, -75, -71, 69, 97, 31, -65, -84, -43, -13]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-7, 40, -102, -39, -59, -90, -126, 122, -44, 24, -109, -88, 115, -110, -102, -56]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey2);
        java.lang.Class<?> wildcardClass5 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[78, -116, 109, -101, -126, -44, -126, -32, -29, -82, 77, 53, -21, 113, -86, 24]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[75, 65, -6, -39, 96, 38, 15, -113, 40, 96, -36, -10, 118, -87, -97, -100, 6, 46, 75, -12, 2, 59, 39, -87, 17, -76, -22, -69, -4, 126, -115, -3, 42, 120, 96, -72, -89, 69, -12, 11, -128, -31, -43, -94, 3, 91, 48, -7, -126, 70, -44, -110, 55, -25, 73, -91, -57, 74, -128, 30, 47, 115, -77, 102, 14, 18, 102, -114, -24, 54, 62, -95, 116, 81, 111, 122, -45, -5, -71, 82, -118, -80, 110, -108, 90, -70, 105, 107, 25, 84, -11, -19, -58, 66, 37, 59, 78, -116, 109, -101, -126, -44, -126, -32, -29, -82, 77, 53, -21, 113, -86, 24]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey58);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey58);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey58);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey58);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey87);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey87);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey87);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey87);
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("D7C1DE87806880D3EB8DC40B1AB5421EEDC5A1D206D8942E8633B09A3FFDA257FC38C2C5F14D2725CDE598D0986A6466", secretKey87);
        java.lang.String str97 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey87);
        java.lang.Class<?> wildcardClass98 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[81, 123, 39, -54, 117, -22, -96, -11, -113, -126, 17, 120, -2, -24, -68, 44]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-85, -70, 82, -23, 10, -2, -66, -24, 79, 112, 124, -56, 78, -56, -70, 20]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[46, -119, -99, -8, 116, -9, -48, -122, -76, -111, 52, 100, 24, -46, 88, -56]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-79, -93, 12, -11, 64, -72, 93, -107, -68, 90, -107, -1, 62, -4, 35, 95]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[41, -66, 107, 1, 109, 120, -126, 95, -84, -105, -25, -113, 2, -115, -112, -17]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[11, -106, -35, -109, -50, 109, 8, -122, 58, 18, -14, 76, -76, -22, 119, -80]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[83, -52, 61, 43, 107, -10, 33, 59, 66, 8, -76, -8, -4, -97, -96, -58]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-20, -78, -78, 39, -22, 74, -112, 25, -87, -96, 103, 18, 59, -7, -102, -1]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-107, 62, 9, -122, 53, -100, 53, 108, -106, -117, -125, -117, -52, 114, -13, 8]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-38, 38, 89, -126, -15, 53, -81, -29, -54, -69, -102, -70, 21, 103, -10, -118]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-67, -60, -36, -56, -16, -122, 112, -3, 59, -73, -52, 65, -6, -108, 120, -20]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, 62, -55, -20, -120, -91, 91, -102, 120, -79, -1, 48, -20, 93, 74, 65]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, 62, -55, -20, -120, -91, 91, -102, 120, -79, -1, 48, -20, 93, 74, 65]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-72, 46, 123, 48, 61, -40, 14, 122, 123, 62, 62, -12, 66, 80, -113, -62, 122, -117, -106, -40, -51, -47, -62, 43, -100, 27, 54, -103, -120, 90, -117, 49, -67, -60, -36, -56, -16, -122, 112, -3, 59, -73, -52, 65, -6, -108, 120, -20]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[71, -62, 59, 53, -32, 0, -24, 75, -100, -113, 76, -87, 37, -63, -15, -119]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[4, 4, -55, -117, -93, -81, -41, 86, 92, 89, -82, 46, -99, -47, 84, -15]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-20, -69, -107, 113, -3, 5, 99, 59, -71, 14, 28, 80, -114, 108, 47, -12]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[19, -81, -49, -91, 47, 4, -128, -35, 97, -42, -27, 84, 1, 126, -27, -63]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[41, 6, -65, -122, 0, -23, 42, -22, 75, 65, -94, -98, 22, 90, -102, -72, -71, -53, 76, -42, 93, -16, 52, -54, -85, 93, 49, -98, 116, -77, 67, 103, -20, -69, -107, 113, -3, 5, 99, 59, -71, 14, 28, 80, -114, 108, 47, -12]");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-1, 8, -80, -33, -98, -59, -59, 108, 67, 89, 26, 75, 108, 89, 108, 68, -24, -83, -35, 8, 105, 30, -88, -122, -90, -47, -91, 34, -5, -53, -72, -85, -20, -69, -107, 113, -3, 5, 99, 59, -71, 14, 28, 80, -114, 108, 47, -12]");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[55, 36, 48, -112, -55, 13, -111, -46, 110, 42, -54, 105, 16, -124, -64, -128, -90, 84, -59, -53, -78, 53, -37, -70, -5, 99, -49, 118, 113, 108, 22, 97, 6, -108, 23, 57, 12, 43, -64, -38, 86, 30, 75, 42, 59, 103, -51, 0, 91, 24, 48, 48, 35, -13, -66, -74, 89, 72, 79, 16, -110, 73, 121, -107, 0, -119, 69, 48, -117, -40, -32, 85, 87, -61, 80, 27, 75, 32, -71, 48, -32, -19, 52, -50, 0, 44, 113, -19, -13, -27, 40, 94, -3, -115, -21, -126, -20, -69, -107, 113, -3, 5, 99, 59, -71, 14, 28, 80, -114, 108, 47, -12]");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-1, 8, -80, -33, -98, -59, -59, 108, 67, 89, 26, 75, 108, 89, 108, 68, -24, -83, -35, 8, 105, 30, -88, -122, -90, -47, -91, 34, -5, -53, -72, -85, -20, -69, -107, 113, -3, 5, 99, 59, -71, 14, 28, 80, -114, 108, 47, -12]");
        org.junit.Assert.assertNotNull(byteArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-75, 88, -38, 18, -70, -96, -77, -86, 92, 91, 84, -104, -48, -17, -50, -46, -46, 30, 45, -2, 127, 25, -121, 24, 65, -47, 103, -79, 127, 41, -13, 110, 28, -94, 44, 46, -118, -31, 24, 10, 34, 19, -14, -58, 74, -90, -66, -81, -74, -63, 47, 119, -115, -19, 75, -4, -15, 67, -14, 18, 63, 63, 62, 73, 110, 50, 44, 17, -114, 100, 78, -45, 11, -54, 93, 64, -43, 79, -31, -46, 59, -80, 60, -53, 30, 63, -86, -14, -125, 6, -71, -54, -92, -37, -72, 125, -20, -69, -107, 113, -3, 5, 99, 59, -71, 14, 28, 80, -114, 108, 47, -12]");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F21A68CEB8F7782F78365B8EB4A75C7", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[87, 106, 127, -56, 101, -82, 67, -96, -79, -101, 24, -7, 67, 88, -3, 34]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-43, -112, 29, -78, 36, -98, -17, 106, -50, 63, -29, 39, -110, -71, -49, 32]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[115, 79, 96, -101, -94, 23, 41, -73, 59, 108, -20, -13, -125, -77, -69, -89]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-6, 114, 23, 97, 114, -83, -96, 72, 47, 98, -116, -127, 59, -103, -9, 123, -113, 114, -25, -85, -79, 106, -110, -19, 66, 94, -11, -49, -32, 122, -25, 105, 87, 106, 127, -56, 101, -82, 67, -96, -79, -101, 24, -7, 67, 88, -3, 34]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[124, -31, -55, 20, 117, 46, -116, -84, 97, 84, 115, -78, 58, -8, 50, 74, -36, -67, 88, -92, 90, 16, -99, -69, -53, -112, 64, 35, 87, 104, -26, -81, 81, -12, -35, 120, 5, -52, -109, -8, 75, 22, 123, -33, -17, -11, 11, -115, -128, 122, -99, -67, -13, 84, 1, -58, 116, 11, 77, 89, -16, 25, 107, 90, -66, 73, -7, 54, -70, 51, -23, 17, -53, -115, 28, 85, 0, -8, 9, 9, -117, 41, 21, -102, -45, -51, 92, 84, -71, 118, -13, 41, 79, 42, -103, -75, 87, 106, 127, -56, 101, -82, 67, -96, -79, -101, 24, -7, 67, 88, -3, 34]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("563DE29ABDF3B322774D53C6769F8756F6CB8D0751688168C8A25C0F11B9885EAD02BA61A5E409EF72AF98E12730EC5F", secretKey19);
        java.lang.Class<?> wildcardClass27 = secretKey19.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[62, 20, -115, -26, 61, -114, -28, 117, 38, -124, 12, 86, 74, 85, 58, 113]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-8, 68, -11, -100, -98, 39, -1, 116, 112, 88, -98, -104, -116, 112, -62, 6]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[99, 121, 121, -108, 86, 75, -76, 110, -81, -99, -66, 77, 97, 122, 39, -31]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[48, 108, -59, 77, 72, -105, 24, -98, -107, 96, 40, -98, -79, 43, 37, 92]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-62, -22, -25, -99, -48, -32, 21, 123, -76, -83, 43, 101, 80, 8, 33, 62, 70, 42, -74, 4, 55, 74, -6, 1, 100, 93, 103, -13, -42, 4, 53, -88, 99, 121, 121, -108, 86, 75, -76, 110, -81, -99, -66, 77, 97, 122, 39, -31]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[99, 121, 121, -108, 86, 75, -76, 110, -81, -99, -66, 77, 97, 122, 39, -31]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-32, -41, -69, 9, -71, 3, 121, -128, 20, -1, 63, 89, 74, -64, 28, -74, 29, -5, 108, 104, -36, 37, -96, -125, -126, 52, 33, 29, 58, -3, 20, 111, -107, 4, -28, -27, 1, -124, -77, 126, 116, -89, 113, 71, 6, 5, -37, 6, -120, 74, 109, -28, 125, 29, -66, -65, -59, -18, -21, -93, -111, 89, -106, -47, 2, -127, 125, 114, 15, 22, 39, 108, -63, -46, 100, 92, -106, -10, 39, 123, -16, 42, 47, 81, -65, 17, -27, -80, -67, -92, 58, 43, -35, 98, -123, 71, 99, 121, 121, -108, 86, 75, -76, 110, -81, -99, -66, 77, 97, 122, 39, -31]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A494E98093A680F6637D5CA2F38135", secretKey40);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("A2D8F083733477FAD741354D9C085E8C0519C40DDAE2E8B497A09030BF0968BC51CC6ABC26681E2216E6279C3B3C93F7", secretKey40);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey56 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey56);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey56);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("B1DBC6D8C76B9B429B798A5AF462FDCEB5B2BDD6AE70100D680205DE423357CB90BF10E3E989EEF56F5E4AF56E766C82", secretKey56);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("492130927E71ABCE608DA3DE4148C5014798BBED7F8E89CB8C6DEC5DDB2CA9C9CEE71F5A95DF659C8092F753C7E0EAA5", secretKey56);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("3607647E50ECCCABE8DE03DFAC3EC1AA", secretKey56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey56);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-83, -93, 73, -57, -110, -33, 63, 102, 63, 113, -3, -22, -119, -116, 109, 39]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[29, 62, 6, -56, 120, 122, 80, -100, -123, 14, -44, -95, 73, -126, -92, -39]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-8, -80, 28, 81, 78, -53, 54, 8, -121, -24, -15, -90, 41, 101, 80, -3]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-110, -112, -93, -29, -57, 40, -66, 106, -45, 98, -6, -17, 1, 4, 95, -126]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-115, -71, -91, 116, 20, -92, 90, 35, -95, 14, 27, 37, -27, -87, -71, 46]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[75, -124, 46, -116, -69, 27, -43, -43, -43, -52, -106, -120, 30, 2, 64, -7]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[38, 37, 45, -10, 87, 68, -119, 89, -50, 127, 67, 35, 100, 32, 26, 79]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 80, 83, 20, -35, 31, -58, -6, 76, -19, 83, 8, -79, -95, -68, 103]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-76, -58, -97, -117, -79, -120, 63, -15, 0, 56, 27, 110, -75, 37, 83, -15, 126, 41, 100, -67, 31, 119, 62, 114, 120, -12, 118, -124, -80, 97, -128, -75, 38, 37, 45, -10, 87, 68, -119, 89, -50, 127, 67, 35, 100, 32, 26, 79]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[124, 124, 13, 101, -101, -73, 72, 9, -47, -76, -17, 64, 111, -75, -15, 26, -68, 92, -98, 65, -80, 73, 113, -108, 95, -76, -95, 60, -37, -110, 118, 12, 38, 37, 45, -10, 87, 68, -119, 89, -50, 127, 67, 35, 100, 32, 26, 79]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-58, 35, 57, -126, 56, 115, -118, -65, -86, -94, 38, -100, -128, -13, 85, 74, -42, -118, 20, 60, 86, -18, 21, 111, -71, 56, 17, 71, 3, -69, 7, 49, -125, -75, -47, 71, 41, -120, 38, 26, 103, -75, -76, 104, -57, 120, 95, -74, 54, -99, 15, -54, 89, 41, 63, -51, 126, -15, 20, -84, 89, 21, 1, -1, 26, -14, -8, 65, -49, 26, -73, -113, 41, -24, 64, 9, -106, -26, -59, 106, 117, -79, -69, 60, -26, -13, 20, 74, 102, -112, -113, -68, 95, 21, -45, 95, 38, 37, 45, -10, 87, 68, -119, 89, -50, 127, 67, 35, 100, 32, 26, 79]");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "C623398238738ABFAAA2269C80F3554AD68A143C56EE156FB938114703BB073183B5D1472988261A67B5B468C7785FB6369D0FCA59293FCD7EF114AC591501FF1AF2F841CF1AB78F29E8400996E6C56A75B1BB3CE6F3144A66908FBC5F15D35F26252DF657448959CE7F432364201A4F" + "'", str49, "C623398238738ABFAAA2269C80F3554AD68A143C56EE156FB938114703BB073183B5D1472988261A67B5B468C7785FB6369D0FCA59293FCD7EF114AC591501FF1AF2F841CF1AB78F29E8400996E6C56A75B1BB3CE6F3144A66908FBC5F15D35F26252DF657448959CE7F432364201A4F");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "C623398238738ABFAAA2269C80F3554AD68A143C56EE156FB938114703BB073183B5D1472988261A67B5B468C7785FB6369D0FCA59293FCD7EF114AC591501FF1AF2F841CF1AB78F29E8400996E6C56A75B1BB3CE6F3144A66908FBC5F15D35F26252DF657448959CE7F432364201A4F" + "'", str50, "C623398238738ABFAAA2269C80F3554AD68A143C56EE156FB938114703BB073183B5D1472988261A67B5B468C7785FB6369D0FCA59293FCD7EF114AC591501FF1AF2F841CF1AB78F29E8400996E6C56A75B1BB3CE6F3144A66908FBC5F15D35F26252DF657448959CE7F432364201A4F");
        org.junit.Assert.assertNotNull(secretKey56);
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[59, -7, 101, 74, -96, -8, -49, -75, 126, -123, 51, 51, 10, -98, -2, -78]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-97, 18, 67, -5, 72, 69, 57, 4, 57, 39, -3, -85, -51, -123, 103, 35, -15, -4, -90, -10, -67, -32, 5, 83, -7, 85, 9, 85, -21, 90, -46, -10, 82, 22, -82, 105, -47, -124, 28, 113, 99, 110, -83, 40, 3, 41, -91, 13]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-108, -61, 104, -40, 27, 35, 32, 38, -106, 37, 22, 33, -68, 123, -107, -7, -89, 56, -82, 27, -59, 0, -107, 66, 113, -105, -34, -77, -62, -117, -95, -63, -12, -37, 73, -48, -74, 44, -9, 43, -9, -83, 64, 11, 98, -38, 57, 65, -33, 48, -101, 46, -105, 104, 0, -11, 71, -126, -103, 7, -64, 87, 18, 89, -15, -61, 70, 101, -98, -1, -35, 50, 47, 101, -80, 120, -101, -124, 115, 103, 83, -17, 92, -57, -87, 111, 70, 14, -75, 88, -71, 126, 65, -17, -72, 30, 82, 22, -82, 105, -47, -124, 28, 113, 99, 110, -83, 40, 3, 41, -91, 13]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[24, -122, 99, -31, -64, 44, -54, 15, -106, 51, 112, -79, 119, -102, 34, 3, -24, 75, 14, 110, -65, -63, -71, 109, -77, 20, 115, 21, -97, -91, -45, 97, 87, -45, -65, -10, -89, 2, 125, 34, 76, -3, -84, -60, 109, -14, -25, -85, -62, 116, 112, -128, -98, -59, -62, 5, -13, 68, -101, 122, -3, -52, -95, 126, -51, 1, 117, 78, -45, -120, 34, -98, 16, 95, 34, -23, -57, 31, -3, -81, -62, -84, 99, -86, -117, 89, 44, -100, -64, 110, 14, 55, -15, 67, -93, 53, 82, 22, -82, 105, -47, -124, 28, 113, 99, 110, -83, 40, 3, 41, -91, 13]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[49, 99, 109, -32, -25, 81, -49, -49, -104, -118, -127, -94, -23, 121, 78, 124, -94, -85, 35, 47, 15, 9, 108, 83, 62, -91, 72, 113, 93, 113, -70, 38, 82, 22, -82, 105, -47, -124, 28, 113, 99, 110, -83, 40, 3, 41, -91, 13]");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey51);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey51);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey51);
        java.lang.Class<?> wildcardClass59 = byteArray58.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -20, -91, -14, 31, 105, 68, -111, 16, 76, 53, -40, -53, -46, 2, 17]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-43, 12, 91, -11, 17, -93, 90, -34, -34, 106, -27, -45, -77, 91, 121, -63]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[62, 115, -61, 56, 79, 64, -9, -83, -18, 35, 28, -25, 111, 2, 62, 63]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[2, -27, 43, 99, -9, -74, -107, -91, 117, -94, -84, -5, -1, 96, -68, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[64, 42, -111, 68, -28, -64, -117, -79, -64, 106, 24, -32, 69, -91, 40, -105]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[30, 28, -58, -69, -46, 81, -58, 106, 23, -27, -64, -78, 73, 125, -107, 58]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[13, 4, 34, -74, -39, -52, -13, 25, -42, 65, -93, -122, 70, -58, -68, 100]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-120, 118, -79, -116, -11, 95, 89, -83, -43, -84, -82, -113, -103, -38, -64, -49]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[90, 67, 22, -22, 89, 32, -18, -2, -91, -7, 67, 88, 75, -89, 72, 93]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[117, -85, -113, -25, -128, 49, 18, 87, 34, -62, -78, 22, 80, -103, 110, 23]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[77, 113, -119, 8, 90, 9, 72, -77, 20, -95, 91, 32, -18, 12, -128, -128]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[90, 67, 22, -22, 89, 32, -18, -2, -91, -7, 67, 88, 75, -89, 72, 93]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[77, 113, -119, 8, 90, 9, 72, -77, 20, -95, 91, 32, -18, 12, -128, -128]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("EACAC9E1DB4C7D2A6F5E024BD02B263D81601C254C4C8F9B0B7CD92A2817689633581A41FDE193D74DBDBC242C99E50E", secretKey20);
        java.lang.Class<?> wildcardClass29 = secretKey20.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[28, -82, 84, -69, -84, -51, -38, 69, -86, 61, 64, 52, 108, -77, 22, -74]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-73, -82, 37, -55, 127, -76, 101, 103, -65, 22, -58, 2, -76, 29, 56, 33]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-52, 92, 50, -112, -23, -96, -116, 24, 2, -111, -66, 106, -20, 82, -18, -100]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, -2, -7, -125, -27, 44, -116, -42, 99, 38, 55, 1, 94, -125, -119, -115]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-10, -79, 59, -110, -115, 23, -78, 25, 124, -24, -46, 59, 49, -11, -34, 98, 56, -57, 110, -19, -96, -82, -82, 63, 85, -23, 96, -40, -9, -50, 28, -79, -52, 92, 50, -112, -23, -96, -116, 24, 2, -111, -66, 106, -20, 82, -18, -100]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[108, 82, 94, 32, -103, 82, 18, 72, -36, -67, 31, -61, -113, 41, -86, 12, 3, 107, -105, -72, -52, -18, -76, -58, 30, 33, -15, 60, 68, -1, 57, -56, -52, 92, 50, -112, -23, -96, -116, 24, 2, -111, -66, 106, -20, 82, -18, -100]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[103, -74, -57, -17, -54, -119, -90, 50, -62, 93, -27, 14, 115, -71, 102, -72, 98, -106, -27, 95, -47, 37, -127, 98, 126, -33, -64, 25, 80, -81, 69, -103, -106, 125, -85, 62, 117, -47, 35, -34, -102, -127, -82, 15, -122, 117, -104, 64, -93, 59, 17, -110, -64, 49, -83, 35, 7, -93, 59, 32, -47, 46, 5, -112, -27, -92, 56, 119, -124, -5, 108, 0, 10, -105, 12, 7, 92, -27, -14, -82, -60, -14, -87, 34, 23, 112, 93, -82, -82, 85, 8, -42, -4, 40, 18, -41, -52, 92, 50, -112, -23, -96, -116, 24, 2, -111, -66, 106, -20, 82, -18, -100]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-61, 64, 63, 51, 51, -107, -78, -93, -113, 48, -70, -69, 107, 23, 3, -90, -14, -21, 47, 33, 17, -91, 71, -23, 31, 72, -93, -35, 55, 74, -108, 40, 115, 99, 34, 90, -74, -7, 63, -40, -38, -122, 84, -71, -94, -60, -100, -103, 65, 99, -81, -11, 110, 59, 121, -108, -27, -93, -110, 92, -42, 19, -22, -55, -11, 92, -47, 59, 10, 120, 12, -104, 106, -89, -22, 47, -115, 123, -50, -128, 54, -69, -61, -127, -37, 89, -10, 57, -20, 117, 113, 82, 31, 46, -13, 89, -52, 92, 50, -112, -23, -96, -116, 24, 2, -111, -66, 106, -20, 82, -18, -100]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("D2EB69B56C650E7EAF6D399A2BEE9C43EC0509922C232320054B6690572AB0BAB0D3F78DE5CA37780A7CBB4594D2131C", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF64AE69762A347B0ABEFB8F173EDC8A", secretKey20);
        java.lang.Class<?> wildcardClass29 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-4, -52, -41, -33, 6, 124, -93, -74, -97, 34, 69, -103, 72, -47, 91, -10]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-59, -126, -119, -25, 104, 48, 69, 25, 66, -51, -10, -117, -98, 88, 101, -55]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-122, -35, 78, -14, 36, 69, 94, -112, -82, -123, -35, 53, -104, 91, -79, 122]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[68, -66, -85, -78, -34, 83, 79, -38, -91, -100, 46, -75, -118, 109, -20, -50]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[31, 62, 18, -95, -38, 70, -37, -79, 63, -68, -3, 99, 35, -31, 40, -9, -79, 49, -27, 7, 51, -127, 104, -9, 25, 73, 48, 92, 18, 27, 8, -79, -122, -35, 78, -14, 36, 69, 94, -112, -82, -123, -35, 53, -104, 91, -79, 122]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[7, -13, 84, 93, -90, 106, -67, 38, -27, 10, -60, 87, -11, -17, -39, -14, 82, 1, -24, 51, 42, -70, -115, 77, -40, -20, -43, -33, 66, 106, -79, 67, -122, -35, 78, -14, 36, 69, 94, -112, -82, -123, -35, 53, -104, 91, -79, 122]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[19, -17, -53, -92, -112, 55, -87, -47, 103, -81, -106, 39, 84, 125, -78, -104, 52, -93, 109, 83, -30, 54, 127, -59, 113, -27, 117, -110, -117, 45, -128, -117, 52, -42, -11, -111, 91, 92, -84, 76, -75, 34, -54, 16, -5, -78, 6, 49, 102, -33, -48, 76, 22, -65, -90, 66, -81, -14, 87, -20, -117, 124, 72, 79, 18, -22, 3, -108, -81, -96, 10, -114, -54, -60, 59, 22, -41, 46, -66, -20, 30, 3, 64, 47, 74, 93, -47, 58, 23, -89, -116, -70, 60, -70, 71, -72, -122, -35, 78, -14, 36, 69, 94, -112, -82, -123, -35, 53, -104, 91, -79, 122]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-113, 102, -66, 56, -46, 70, 122, 101, -20, 83, 98, -45, 19, -32, -70, 49, -14, -13, -35, -3, -126, -56, -38, -80, 49, 33, -99, -49, -13, -52, 37, 33, -122, -35, 78, -14, 36, 69, 94, -112, -82, -123, -35, 53, -104, 91, -79, 122]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC81C4A05F1694F3C823275FE5E58F88", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6EA4E116455BC7AF3FB5BF064D6F874CB5F555408DB9AD9F9733DFD99DAC4D7FEEE704EFF20D5601E11B02E83309E581", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[26, 0, -89, 43, -119, -2, 121, -117, -62, -28, 60, -96, -107, -36, 105, 38]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[109, -11, 14, -47, 14, -21, 89, -86, 90, -107, -18, 28, 45, -15, 32, -88]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-55, -118, 73, 91, 73, -13, 1, -63, -92, -65, 113, 40, -40, -51, -23, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[26, 0, -89, 43, -119, -2, 121, -117, -62, -28, 60, -96, -107, -36, 105, 38]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-32, -122, 63, -42, 34, 117, -34, 94, -46, 68, -75, 118, -20, 109, 56, 71, 35, -19, -62, 68, -99, -122, -37, 90, 47, -70, -27, -51, 110, 84, -75, -97, 47, -13, 83, -86, -51, 37, 72, -11, -88, -36, 48, -11, -27, 89, -80, 105, -107, 23, -37, -84, 57, 17, 98, 17, -123, -67, -98, 48, -79, 74, -50, 38, -25, 35, -60, 14, 68, -84, 87, 127, 38, 87, 106, 117, -100, -20, -58, -61, 53, -46, 60, 113, 60, 4, -62, -62, -39, -52, -63, 42, -72, 27, 89, -61, 26, 0, -89, 43, -119, -2, 121, -117, -62, -28, 60, -96, -107, -36, 105, 38]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[106, -127, 112, -86, -119, -54, -58, 90, 81, -14, 117, -33, 78, -48, 98, -65, -96, 21, -67, -108, 90, 19, -93, 123, -73, -116, -6, -128, 25, -114, -103, -105, 26, 0, -89, 43, -119, -2, 121, -117, -62, -28, 60, -96, -107, -36, 105, 38]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[41, 7, 40, -62, 44, -100, -14, -80, 106, -25, 11, -32, -31, 125, -32, 59, 30, 98, 59, -10, 56, 50, -126, 38, -16, 77, 26, -67, -52, 84, 106, 120, -28, 111, 78, 110, 19, -81, -109, -77, -9, 82, -2, -2, 25, 59, -15, 85, 37, -128, 76, 33, 70, 98, 120, 91, -4, 98, 60, -15, -104, -115, -122, 15, -62, 120, -9, 112, 119, -86, -66, 78, -73, 102, -71, -62, -6, 43, -27, -84, -56, 58, 125, 110, 11, 93, -27, 31, -89, 86, 107, 30, 80, 1, -51, -109, 26, 0, -89, 43, -119, -2, 121, -117, -62, -28, 60, -96, -107, -36, 105, 38]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "290728C22C9CF2B06AE70BE0E17DE03B1E623BF638328226F04D1ABDCC546A78E46F4E6E13AF93B3F752FEFE193BF15525804C214662785BFC623CF1988D860FC278F77077AABE4EB766B9C2FA2BE5ACC83A7D6E0B5DE51FA7566B1E5001CD931A00A72B89FE798BC2E43CA095DC6926" + "'", str15, "290728C22C9CF2B06AE70BE0E17DE03B1E623BF638328226F04D1ABDCC546A78E46F4E6E13AF93B3F752FEFE193BF15525804C214662785BFC623CF1988D860FC278F77077AABE4EB766B9C2FA2BE5ACC83A7D6E0B5DE51FA7566B1E5001CD931A00A72B89FE798BC2E43CA095DC6926");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "290728C22C9CF2B06AE70BE0E17DE03B1E623BF638328226F04D1ABDCC546A78E46F4E6E13AF93B3F752FEFE193BF15525804C214662785BFC623CF1988D860FC278F77077AABE4EB766B9C2FA2BE5ACC83A7D6E0B5DE51FA7566B1E5001CD931A00A72B89FE798BC2E43CA095DC6926" + "'", str16, "290728C22C9CF2B06AE70BE0E17DE03B1E623BF638328226F04D1ABDCC546A78E46F4E6E13AF93B3F752FEFE193BF15525804C214662785BFC623CF1988D860FC278F77077AABE4EB766B9C2FA2BE5ACC83A7D6E0B5DE51FA7566B1E5001CD931A00A72B89FE798BC2E43CA095DC6926");
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[6, -43, -14, -79, 81, 92, -53, 103, 70, -24, -108, 122, -50, -68, -125, 7]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-14, 124, -118, -109, -69, 43, 7, 100, -125, 20, -118, 115, -76, -49, 15, -79]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[58, -68, 65, 77, 23, 110, -95, 52, 127, -94, -94, 8, 34, 118, -52, -100]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[43, -108, 30, -82, 100, 58, 60, -84, 126, -123, 109, -21, -107, -108, 16, -121]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[9, 5, 103, 62, -95, 25, 30, -102, 44, 39, 23, 54, -82, -98, 35, -51, 64, -63, 57, -30, 68, 8, 61, 50, 84, -62, 79, -42, -118, 13, -127, -71, 58, -68, 65, 77, 23, 110, -95, 52, 127, -94, -94, 8, 34, 118, -52, -100]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[58, -68, 65, 77, 23, 110, -95, 52, 127, -94, -94, 8, 34, 118, -52, -100]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[43, -108, 30, -82, 100, 58, 60, -84, 126, -123, 109, -21, -107, -108, 16, -121]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-37, -100, -117, -16, 57, 27, 127, -79, 43, 119, -123, -69, 62, 98, -54, 103, -67, -95, -68, 117, 29, 4, -118, -39, -124, -28, -62, -102, 116, 8, -116, -35, 58, -68, 65, 77, 23, 110, -95, 52, 127, -94, -94, 8, 34, 118, -52, -100]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-85, 41, 14, 62, -36, 0, -74, -114, 67, 5, 5, 122, 112, 91, 22, -103, 22, 55, 37, 82, -37, 107, 18, 114, 58, -43, -90, -32, -37, -42, 111, 121, 58, -68, 65, 77, 23, 110, -95, 52, 127, -94, -94, 8, 34, 118, -52, -100]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE68DA2F1F34ADA215B332D60E4832CF54FDD100D7A2873EA21A7FD8E79FF78C8317536D82F47E89C63938EDBFEFA600", secretKey14);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[67, -14, 55, -1, 117, -15, -108, -2, 9, 110, 25, -42, 0, -54, 94, 39]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-110, -15, 16, -39, -11, 127, -63, 102, -26, 14, 79, 76, 103, -85, 64, -93]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-13, 120, 84, -60, 102, -115, 93, -33, 53, -29, 125, 38, 73, -3, -111, -38]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[67, -14, 55, -1, 117, -15, -108, -2, 9, 110, 25, -42, 0, -54, 94, 39]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43F237FF75F194FE096E19D600CA5E27" + "'", str9, "43F237FF75F194FE096E19D600CA5E27");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "43F237FF75F194FE096E19D600CA5E27" + "'", str10, "43F237FF75F194FE096E19D600CA5E27");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[17, -46, 90, 99, -45, -82, 2, -54, -115, 29, -22, -12, 29, -31, -116, 39]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-83, 34, -115, -44, -45, 25, 71, -93, -20, -97, 4, 15, -22, 58, 114, -122, -88, -60, -79, 76, -35, -16, -123, -2, -96, -26, 91, -101, -103, 43, 120, -63, -12, 93, -98, 85, -4, 77, 102, 20, -37, 5, 125, -18, -110, 84, 122, -28, 12, 117, -36, 109, -73, 29, 37, -23, -73, 62, -33, 124, 99, -37, 62, -62, -43, -96, -65, 9, -58, -30, 81, -78, 42, -37, 93, 83, -5, -63, -86, 35, 8, -59, -65, 108, 62, -70, -107, 7, -90, 64, -42, 110, -17, 0, 40, -117, 17, -46, 90, 99, -45, -82, 2, -54, -115, 29, -22, -12, 29, -31, -116, 39]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-19, 125, 27, -1, -26, 36, -108, 82, 28, -16, 98, -127, 52, 9, -80, 39, -82, 34, 16, 65, -15, 26, 34, 0, 82, 0, 87, 52, -45, 22, -110, 85, -14, -12, 115, -100, 97, -11, -43, 63, -53, 114, 52, 80, 64, -72, -7, -77, 113, 47, -29, -98, -55, -58, -104, -41, 10, 89, 76, 0, 22, -27, -63, -45, -85, 41, -35, -64, -103, 26, 37, 81, -87, 19, -25, -15, 100, -45, 88, -23, -24, 57, 57, 31, 123, 63, -19, -67, -123, -90, 95, 86, 110, 35, -93, -67, 17, -46, 90, 99, -45, -82, 2, -54, -115, 29, -22, -12, 29, -31, -116, 39]");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("A35A4B7DCA76110C35A6F4E5644F9704", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B3941A4E55FAF238D8E8BF13FB4D21492250F347E402AC986D1DE87AB655EDF269BE0F8F96916DBD56F7E3196CC7A72E", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("FC2ADCD18D162C8920DB97F0C0C634711DB10081D4104B95EEEFF5F3ADE0BB157D7456B7D2CA9E24863C9F957B1107C6E8FFB482F884310F241617A64E768BA85D66755D57BC4AA17ACB453B017A2DDAE0AE535E62C76DF0339F3CA2BC57BCA67D911BB749D88E15CB8002A3523C39FB2DC72276BF06C72CA4CC865299D546C241DC535CFCC92CCEF7E9BCD401FD180BFD506B5933B791B56B598B79616BCC5918AA7742AD9CC0CD71393BBE05D85E24E364699D44909C1BDBAC4587B49EF6C8A3B3FED37DE30F100B41C9E030945F3448A252CE00BB3AF25B5CF4B2B3AF5D22647FDAC45BA6BBF04A2E89432B9B2F71", secretKey31);
        java.lang.Class<?> wildcardClass42 = byteArray41.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[122, -116, -28, -2, -76, -55, -118, 94, 3, -29, 24, 49, -22, 53, 111, -23]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[8, 126, -87, -80, 9, -126, 19, 36, -15, -76, -106, -71, -14, -104, -34, -66]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[117, -126, -8, 115, -65, -96, -128, -45, 25, 90, 83, -124, -25, -11, 123, -70]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[54, 8, -59, -73, 3, -43, 93, -94, -38, -120, 50, 48, -120, -114, 91, 43]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-5, -21, 112, 48, 67, 15, 74, 124, -54, 69, -103, 86, 35, 110, -93, 122]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-95, 37, 106, 45, 42, 10, -126, -77, -60, 3, -112, -117, 33, 115, 120, -16]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-95, 37, 106, 45, 42, 10, -126, -77, -60, 3, -112, -117, 33, 115, 120, -16]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[62, -89, 71, -97, 55, -96, -128, 107, -21, 19, -98, -109, 78, -77, -116, -11, 112, 82, 90, -127, 14, -50, -66, 96, -9, -80, 72, 38, 32, 93, 28, 3, -5, -21, 112, 48, 67, 15, 74, 124, -54, 69, -103, 86, 35, 110, -93, 122]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-120, 84, -22, 42, 55, 105, 32, -73, 96, -23, 23, -86, 12, -27, 10, -20, 52, -15, -76, -19, 91, 6, 43, -62, -91, -98, 120, -42, 37, -68, -85, 32, -5, -21, 112, 48, 67, 15, 74, 124, -54, 69, -103, 86, 35, 110, -93, 122]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-8, -53, 10, 30, 36, -79, 127, -92, 54, -51, 12, -118, -3, -66, -119, 65, 41, 118, -80, -121, 0, 110, -55, 25, 113, -26, 35, -106, -126, -55, 54, 116, -5, -21, 112, 48, 67, 15, 74, 124, -54, 69, -103, 86, 35, 110, -93, 122]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[126, -62, -72, 42, 63, 57, -18, 36, -117, 44, 69, -78, 55, 120, 56, 6, -110, 126, 102, -32, -25, -119, 11, 61, -40, 15, 1, -78, -8, -107, 110, -60, -127, -2, 43, 24, -85, -30, -1, 50, -96, 56, 90, 52, -100, 77, -58, -53, -67, -111, -105, -77, 78, -63, -75, 51, -79, 107, 3, 66, -109, 82, -62, -102, 84, -28, 31, 49, -79, -57, 122, 32, -59, 83, 118, 19, -2, 121, -8, 40, 88, 39, -60, 119, 110, -82, 91, 59, 3, 61, -19, -72, -108, 118, -60, -9, -5, -21, 112, 48, 67, 15, 74, 124, -54, 69, -103, 86, 35, 110, -93, 122]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey42);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey53);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey85);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("C0B1E3813E41303C2E8876BF6C9BD60C", secretKey85);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("D31E77100EEB0E88FD5BD5D9A92D7E07", secretKey85);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("A81AD6210D7B9E5E8D7CD14D27F602DE76A2D78A0CB6F92EE8EBD2A4EDA3B9B90DF3A1C40BE37077C890EA053E5744CED4009962550F58F42A0764C6BDA8BAB99E9E6291DF104146F21A7A2492F18A783794D5F595A527F58109B2AA785B3CCB1A5E813472A32094E96A488DE2296A4196AF137D1FA63740CD0D70FD217720C3FA017FC27137169C164563FCCFADB2BD087989D056216DE643800569540118EC2D428E696B85F983691BFD9D37CF1547FE529A66CB6F6C538F11A7D6E4094F004BFB9F6D3FE66A4658404D5752E0897F005CC7BB176A4E4FCD31C94077CFB2350F7906F62D5FAA3BF6C60494748F126E", secretKey85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey85);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-114, 76, -58, 83, 72, 81, -120, -66, 121, -3, 109, -24, -21, 68, -43, 8]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-109, -56, -68, 33, 75, -101, 65, -120, 116, -69, -5, -38, 111, 24, -54, -23]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-73, 93, -86, 62, 5, 107, -98, -62, 106, -11, 33, 30, -20, -83, 63, 112]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-13, -1, 123, -114, -72, 45, 17, -124, 120, 34, -42, 2, 63, -19, -128, 85]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[88, -1, 72, -33, 111, 46, -48, -6, -68, -40, 38, 69, 18, -5, -18, -68]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-14, 67, 10, -105, -67, 110, -87, 86, 33, -14, 90, 125, 16, -13, 44, -3]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-123, 96, -120, 33, 18, 28, -13, -27, 56, -13, -98, 97, 115, 51, -5, -101]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-60, 21, -82, -19, -126, -36, -86, -9, 28, 92, 127, -7, 69, 73, -72, 54]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[16, 75, 97, -24, -85, -16, 94, -111, -127, -57, -75, -24, 126, -103, -10, 127]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[51, -8, 85, 16, 76, 91, 31, 104, -103, 77, -50, 86, -97, 29, -111, -65]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[35, -26, 118, 26, -26, -94, -48, -4, -55, -101, -118, 62, 22, 87, 51, -114]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[16, 75, 97, -24, -85, -16, 94, -111, -127, -57, -75, -24, 126, -103, -10, 127]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-22, -58, 87, 74, 7, 43, -72, 78, -111, -93, -105, 64, 77, 9, -53, -67, -125, 106, 36, 71, 68, 50, 110, 127, -81, -10, 120, -118, 44, 118, -29, -27, 16, 75, 97, -24, -85, -16, 94, -111, -127, -57, -75, -24, 126, -103, -10, 127]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[16, 75, 97, -24, -85, -16, 94, -111, -127, -57, -75, -24, 126, -103, -10, 127]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-38, -119, 104, -19, -74, 48, 101, -75, 36, -18, 95, 10, 71, -98, -72, -80]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[46, 4, 50, -17, 41, -79, -49, 66, 91, -90, -77, 16, -14, 15, -11, 110]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-14, -28, -24, 69, -39, 1, 109, -71, 39, 21, -33, 126, -37, 37, -108, 116]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-40, 5, -45, -29, 100, -5, -80, 40, 33, 87, -21, -29, 95, 41, -3, 113]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-80, -27, 44, -65, -97, 47, 65, 107, 3, 63, 102, 75, -55, -3, -113, -59, -105, -103, -54, -11, -90, -113, -20, 20, 47, 24, -17, -4, -11, 26, -112, -112, -14, -28, -24, 69, -39, 1, 109, -71, 39, 21, -33, 126, -37, 37, -108, 116]");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-14, -28, -24, 69, -39, 1, 109, -71, 39, 21, -33, 126, -37, 37, -108, 116]");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-40, 5, -45, -29, 100, -5, -80, 40, 33, 87, -21, -29, 95, 41, -3, 113]");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-63, -123, 73, -91, -38, 66, 104, 12, -85, -1, -16, 54, 79, -122, -64, -82, -117, -28, 33, -54, 87, 111, 65, 17, 52, 33, -115, 62, 54, -124, -26, 120, -14, -28, -24, 69, -39, 1, 109, -71, 39, 21, -33, 126, -37, 37, -108, 116]");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[84, 126, -20, 84, 99, -114, 30, -99, 28, -48, 93, 127, -15, 119, -110, 63, -87, -43, -37, 61, -4, 68, 64, -82, 122, -100, 87, 117, -56, 120, -85, 77, -14, -28, -24, 69, -39, 1, 109, -71, 39, 21, -33, 126, -37, 37, -108, 116]");
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("524D9957091D8EBB78959B931A46FDF4", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("9064C037AF9E5D70FD1CD309DA0972CC5E9192C96E339E7E32DF21FA831481C252F6D92B4C95D781066E70DBEAFE501F671DF8208383B677C6373BDFA99AD94871DEE69F64BA1EF7941EAD529CD6D0F0CFDACC8B2CD1D04A56B14021A6942ECC3BD8B5C680B217F3C220BF26DF5D2B4E", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey41);
        byte[] byteArray53 = new byte[] {};
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray53);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray53);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey59);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey59);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey59);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey59);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey59);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray50, secretKey59);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[12, 126, 10, 96, -47, 93, 111, 24, -47, 115, -122, -100, 71, -60, 104, 98]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-95, -70, -90, -22, -32, -9, 4, 105, 43, 35, 94, -79, -64, 8, 96, 6]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[43, 18, 124, -71, -24, 17, -80, -105, -9, -121, 76, 30, 118, -104, 96, 60]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, 8, -79, 98, 47, 10, 81, -82, -11, 93, -116, 86, 78, 10, -23]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[6, 126, -10, 119, 41, 31, -34, 121, -115, 35, -38, 87, 8, -124, -52, 40]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-109, 62, 11, 20, 71, -64, 119, -109, 119, 22, 84, 19, -88, -77, 10, -22]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-87, -58, 16, 2, 70, 74, 76, 52, 37, -79, 84, 90, -22, -95, -103, 94]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-97, -98, 23, -23, 114, -24, -98, 45, 75, 107, -109, -60, -126, 109, -81, 90]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-120, 16, 79, 114, -35, 94, -52, -43, 93, -31, -83, 116, -110, -111, -85, 75, 78, 101, 62, 108, 62, 46, 99, 32, -71, -124, 23, 35, -47, -99, -60, -36, -87, -58, 16, 2, 70, 74, 76, 52, 37, -79, 84, 90, -22, -95, -103, 94]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-121, 34, 10, 18, 86, 122, 117, 2, -119, -113, -118, -72, -104, -103, -84, -52, -61, 105, -74, 41, 15, 105, 89, -90, -120, 72, -17, -99, -47, -84, 16, 78, -87, -58, 16, 2, 70, 74, 76, 52, 37, -79, 84, 90, -22, -95, -103, 94]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-33, -84, 13, -73, -81, 5, 27, -36, 80, -2, 47, 115, 119, -127, -102, 24]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-79, -27, -103, -114, -7, 122, 89, -39, 97, -3, 45, -67, -14, 81, -20, 25]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-79, -27, -103, -114, -7, 122, 89, -39, 97, -3, 45, -67, -14, 81, -20, 25]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-33, -84, 13, -73, -81, 5, 27, -36, 80, -2, 47, 115, 119, -127, -102, 24]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-33, -84, 13, -73, -81, 5, 27, -36, 80, -2, 47, 115, 119, -127, -102, 24]");
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        byte[] byteArray38 = new byte[] {};
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray38);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey40);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey44);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey44);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey55);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey55);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey55);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey55);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey55);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("BD668A117D0313E58D1FFC562B6A9CE30E3C6561CE8F23362E4F050812CAAB0AC573ACF2D00DCFEE4AAE999B0D95269229E380BEBD15F4773B391955C417414A52E82F97D9F11CCAD3C54C412C4002F8819B1FB98BFCA10CEAFF4656CFD87A8004FCA05D2E7BF6C8724A4B9D69214A6A", secretKey55);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("E03D16C43BDCC978B0F2F916B4FA73499E4117B6AD284A1BFC2E9B5F18B31F77C366A946CD628684727E7D09AEB987952AFAACCE8846853C1A42427DC6D20628570DF39DE8EE9EEFAF8079EA09D7469088034DCA30FA70490D6C57379275F7BB4D5EC1CD1E75C1F3A88A59C58775B868", secretKey55);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey73);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey73);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-86, 45, 122, -67, 44, -37, 4, 110, 69, 117, 28, 101, -91, 97, 127, -26]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[88, -53, 1, -69, 24, 116, 53, -128, -27, 24, 71, -27, -123, 113, -93, -120]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-21, -109, 81, -54, 11, 82, 41, 98, -78, -43, 23, -101, 23, 65, 79, 45]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-56, -76, 10, -34, 110, 101, -52, 108, 98, 80, -40, 32, 124, 36, 59, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[92, 31, 44, -5, 111, -113, -125, -66, -54, -100, 1, -60, 48, 30, -78, -32]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[78, -71, 118, -34, -46, 102, 64, 111, -51, 97, 8, 42, 42, 20, 102, -58]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[89, -27, -70, 7, -110, -97, -74, 21, -80, 113, -56, 48, -83, -118, -10, 107]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[106, -104, -109, 73, -107, -84, -105, 26, -114, 55, 18, -22, -122, 50, -79, -58]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[94, -12, 28, 18, -25, 22, -103, -82, -101, -91, 4, -38, -78, -95, 63, -13]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[86, -103, -117, -120, -125, -91, -81, 125, -53, -2, 122, 68, 123, 67, 77, -21]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[63, -94, -29, 47, 58, 15, 116, -66, -85, 74, -22, -28, 49, -67, 82, -86]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[94, -12, 28, 18, -25, 22, -103, -82, -101, -91, 4, -38, -78, -95, 63, -13]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[103, 102, 64, -11, -104, 37, -59, -125, -29, -24, -21, -80, 72, -14, -94, -63, -13, -94, 50, -94, -72, -114, -111, 50, 49, -68, 21, -108, -22, 67, 24, -48, 94, -12, 28, 18, -25, 22, -103, -82, -101, -91, 4, -38, -78, -95, 63, -13]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[94, -12, 28, 18, -25, 22, -103, -82, -101, -91, 4, -38, -78, -95, 63, -13]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-100, -120, 98, -127, 29, 5, 116, 8, 4, 23, 76, -69, 90, 37, -64, -43]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-70, -45, 87, 84, 13, 68, 77, 100, -14, -15, 28, 30, -87, -125, -96, 72]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-70, -45, 87, 84, 13, 68, 77, 100, -14, -15, 28, 30, -87, -125, -96, 72]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[118, -73, -88, -103, 67, 98, 66, 22, -32, -42, 77, 116, -71, 127, 123, -24]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-100, -120, 98, -127, 29, 5, 116, 8, 4, 23, 76, -69, 90, 37, -64, -43]");
        org.junit.Assert.assertNotNull(byteArray79);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey13);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB05108861568B77067864E393C66A651FA7D65C7972104CEC7664A6D568630EFF7F44008DECFABECC47EF00F1E1F507", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8A0262A2855CA2EC59576B3E1D93167", secretKey21);
        java.lang.Class<?> wildcardClass27 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[78, 78, 29, 12, 32, -88, 50, -126, -118, 16, -75, -95, 57, -96, -25, -61]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[20, 67, -4, -27, -2, -85, -28, 107, 42, -91, -19, 3, 58, -5, -96, -63, -34, 91, -17, 102, 81, 42, 66, -79, -97, -126, 53, -92, 56, -100, 75, 26, 22, -53, -9, 57, 79, -37, 40, -123, -39, -65, -17, 74, 7, -20, -71, 11]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[42, -39, 116, 111, -27, 31, -71, -106, 103, 24, -20, 96, -21, 31, -81, -47, 97, 33, 50, 108, 74, 86, -2, -34, 39, 9, 101, 109, -59, 56, -81, -26, 22, -10, 87, 102, 5, -3, 48, -29, 105, -105, 56, 75, -1, 19, 19, 7, -26, -106, -126, 18, -58, 11, -8, 65, 59, -110, -116, 1, -53, 86, 43, -36, -79, -76, 107, 25, 79, 50, -42, 42, 87, -88, -19, -107, -19, 92, 9, 78, 125, -69, -91, 72, -98, -79, -21, 77, 54, 100, 25, -89, -20, -22, 59, -101, 22, -53, -9, 57, 79, -37, 40, -123, -39, -65, -17, 74, 7, -20, -71, 11]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[69, -1, 99, -102, -94, 19, 49, 41, -1, 110, 15, -108, 66, 124, 1, -69, 16, 55, 50, 69, -11, -104, -122, 105, -4, -109, -92, 119, -18, 10, -78, -98, 22, -53, -9, 57, 79, -37, 40, -123, -39, -65, -17, 74, 7, -20, -71, 11]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("211B281077A89A87FF0FB87EC3DA82D1", secretKey25);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("9D2E72A20F18C3E17348DE6BBE69C51FE5531DB4E86830FF7D5519F83903D325BC9C4055C2F497FBD5F1877582E3F969", secretKey25);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("675F11B60121579EBBA020113A12CE80", secretKey25);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey25);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey46);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey46);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey46);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF775DC1EBDE3BA44A6F9BD550955E95DD315DF7FF65158B8AFCC61DC8AEBC83E851C3441BB44A637CCB960BC780B3EFA41A0651CE5D62628C0C217A0730BCBDFCE954B5438366F42C37DE703660F1F9240A193AB8A61A6898A724D1A00780A23D835A86D4779797FC60BF8B0EB8EA6B", secretKey46);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("508380463B279F88BA991D8C01E9AB5E82EA2F47BCDFDF38340DE16537E50CBBBE3C63E0ECF3A695148E403FF490F4BA58670B485C598323585595245B8C6C35D8AFBAB401419C791C4E639E987610A73A69713278CA83CD63054A23B242ACA507B8E14566EB5B8F765839A1B49AAE54", secretKey46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey46);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[36, 15, 14, 89, -42, -93, -25, -122, -109, -45, 58, -124, -9, -11, 94, -14]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[127, 122, -96, -60, 28, 22, -86, -79, -127, 7, 122, -94, -107, 46, -71, -120]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[85, 105, 3, -59, -89, -88, -107, 45, -109, 125, 60, 27, -74, -113, 33, -104]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[127, 93, -14, 117, -53, -8, -41, 36, -24, 119, -36, -31, 105, -96, -71, -119, 106, 27, -34, 125, -57, 56, -103, 124, -65, -9, -49, -12, -48, -39, 51, -6, 94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-2, 64, -74, 34, -126, -17, -105, -116, -117, -13, 2, 8, 47, -35, -98, -77, 122, 72, 51, 20, -83, 119, -128, -101, 13, -126, 72, 46, 31, -115, 110, -117, 94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[98, -98, -36, -92, -79, -107, 41, 93, 46, -112, -15, 125, -67, -116, -92, -60, 45, 37, -97, -7, 127, 99, 20, 25, -5, -47, -63, -42, 100, 12, 59, 43, 22, 111, -93, -66, 110, -40, 8, -96, -33, -92, -42, -115, -112, -75, 87, -46, -76, 97, 116, -111, 2, -69, 6, 122, -111, 24, 40, -111, 5, 4, -122, 10, 51, -120, 112, 115, -27, -77, 120, 92, -42, -9, -54, 79, 7, -23, -30, 66, -117, -6, -33, 30, 64, 119, -35, -72, 4, -41, 9, 31, -4, 122, 64, 71, 94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[21, -95, -46, 91, -58, 87, 91, 60, -31, 58, 47, -30, 46, 40, 121, 28, -38, -105, 121, 21, -84, -49, 102, 10, -84, -113, -117, -117, 22, 82, 78, -113, 69, 12, -19, 49, 71, -45, -2, 82, 81, 52, 103, 10, 82, -8, 48, -7, -107, 104, 68, 85, -87, -25, 71, 16, -97, 3, 116, -122, -38, 22, 74, -94, -39, 118, 0, 35, 47, 62, 11, 7, 95, 56, 97, -68, -64, -59, 42, -88, -36, -3, 55, 70, -4, 72, 32, 70, 11, 45, -127, -78, 95, 85, -27, -70, 94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-98, 11, 110, 47, 85, -101, -110, 35, 15, -72, 11, 51, 61, -126, 85, -6, -65, -82, -44, 76, -74, 12, -93, 83, 37, 83, 17, 3, -55, 23, 125, -12, 94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-115, 64, 124, 38, -27, -105, -34, 35, 103, -13, -51, -33, 127, 90, 124, -15, 68, -39, 41, 91, 13, 65, 24, 47, 68, -116, 71, 73, -8, 71, -35, 63, -14, 82, -44, -2, -90, -5, 64, 83, 53, 54, 121, 93, -32, 31, -77, -105, -73, -101, 77, 84, -86, -101, 1, 47, -117, 78, 29, -123, 13, 113, -47, 79, -52, 91, 47, 14, -92, -111, 1, -60, -10, 94, -36, 114, 36, -110, 116, 54, -76, -49, 52, 108, -41, -120, -105, -89, 87, -18, 42, 17, 17, 59, 103, -104, 94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[66, -86, -19, 2, 13, -94, 112, -18, 89, 115, -10, -68, -105, -50, 13, -27, 124, 102, -20, -83, 125, 13, -18, 114, 101, 5, -14, 8, -102, -74, -11, 123, 94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-37, 14, -57, -2, -3, 127, -46, 115, -80, 29, -52, 26, -127, 121, 108, 79, 115, 32, 5, 17, -3, 18, -45, -110, 21, 121, -88, 112, -10, -56, -109, 57, 94, -114, -49, 92, 65, -128, -89, -113, -99, -47, -106, -122, 31, -49, -119, -126]");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[75, 23, 77, -51, 38, -35, 42, -9, -113, 85, -72, -77, 86, -66, 58, -75]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-102, 88, 99, -10, 81, -62, 58, 110, 31, -20, 59, 113, 36, 77, 61, -105]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-102, 88, 99, -10, 81, -62, 58, 110, 31, -20, 59, 113, 36, 77, 61, -105]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[84, -85, -41, -97, -33, 124, 102, -86, 25, 118, 65, 123, 75, -114, 57, -54]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[75, 23, 77, -51, 38, -35, 42, -9, -113, 85, -72, -77, 86, -66, 58, -75]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertNotNull(byteArray53);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey13);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("8C9FD4D6B8AB5A4F1AE9A5774CCDDDEC", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("CC739217F74A0F43A86E2E4353A89848764311966C131D4EA70B94AA3D9F2BB499368C0D06876FEFBB6CF661FDA9CD20D20B4F9201000A3B8C4919FAAB890652E98B4C65FF73F7C5EFA5C20D5CD4F4A07792195DD8230BD6355150693AD2C320F14C5D89E3E65F0524DB3980722D1EB1", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        java.lang.Class<?> wildcardClass27 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-40, 94, -112, 122, 27, 122, 107, 15, 9, 60, 1, -29, -21, 20, 53, -28]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-62, -114, -116, 8, -103, 24, -111, -32, 31, 69, 43, -30, 104, 61, 104, 68, 28, -47, -84, 29, 56, -101, 89, 115, -22, -60, -53, 86, 21, -18, 56, -56, 112, 37, -31, -90, -58, 52, -73, 6, 74, 0, 126, -24, -60, 65, -75, 56]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[112, 37, -31, -90, -58, 52, -73, 6, 74, 0, 126, -24, -60, 65, -75, 56]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("02CE2B9D7FB914B94A628D0796FDCABAE1C426B77525895E8E8E54CDDB4D0C26119080776B6C9626F617296DAA7416ED4579CA65FD4A0C701ACC158F3BF58B6964A8BF585E5887998BC181440CBE1D782399472C77561F7390AEB79ACA389F76D58807842A932DD6D58A956FE444E6C3", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey24);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey24);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey24);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey24);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey24);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey24);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("699611F6E9C38184B127DF182CB76BDE3108F8757459079C03782D2FA700E00CE50FC381317F3214CA779F000618F9E5", secretKey24);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey42);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E1967767FBCA9187364B14093D005B637DBE91B2976363574232CE85116F01D166B47891C81BDBC9F77F8848CC39E71474A928EB91D881CDF9EC4DDE7252AA9A435EE1BDE8B240F21A1D1B4FFE75996226C1CD2BD742FFA9ABCF23870D8001A51036471E38BC7ED00A707B277F1A2A85EF0F14916F4C16777ECF2D34D7B4D2FF1AF4CBBADF4C95C01B48726F27A04FD1A7B178BF9E45868E2CA232F29FFDC5E005017B2E23B8CD5D8CC1C102CC4BF9A9F32B22A9F474104BFC0E8CB9863C7DB708EF3F149A810CEEEE2FE64315F32241590357462707D8F48DC82B9D18378750266F61B97521CE0AB6AF87A58E2585C", secretKey42);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-112, 126, 17, -96, -8, -75, 90, 63, 114, -109, -53, -59, 89, 55, 77, 66]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[60, -69, 14, 29, 30, -95, -85, -44, 126, 114, -119, 123, 25, 99, -25, 91]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[45, 82, 11, -56, 77, -81, -65, -97, 103, -68, 57, 110, -107, 94, 1, 56]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-29, 82, 42, 104, -17, 86, -11, 6, 40, -70, -15, -109, -91, -78, 12, 116]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-103, 118, 13, 114, -72, -72, -27, -50, -102, -121, 122, -19, 64, -77, -13, -59, -90, 15, -39, 63, 119, 51, -107, -57, -41, -125, -121, 88, -85, 101, 53, 94, 45, 82, 11, -56, 77, -81, -65, -97, 103, -68, 57, 110, -107, 94, 1, 56]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-122, -31, -53, 106, 93, -113, -36, -75, -122, 85, -22, -4, 82, -30, 7, -10, -17, -20, 95, 96, 69, -105, -68, 92, 43, -67, 48, 105, -90, -128, 31, -79, 45, 82, 11, -56, 77, -81, -65, -97, 103, -68, 57, 110, -107, 94, 1, 56]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[96, 122, -65, 105, 63, 74, -100, 90, -103, 27, 27, -79, -101, -1, -74, 50, -45, -115, 73, 2, -79, 117, -3, -6, 60, 51, 45, 57, -124, 28, -62, 21, 35, 67, 107, -104, -119, 2, 120, -54, -119, 78, 42, 33, 8, -72, 83, 42, 104, 79, 86, -20, 88, 58, -82, -78, 37, -97, 21, 8, 67, -112, -66, -6, 39, -113, -69, 27, 70, 75, 113, 107, -13, 70, -74, 59, 80, -119, 81, 126, 118, 40, 4, -46, 58, 43, -53, 49, -113, -40, -47, -5, -13, -38, 38, 78, 45, 82, 11, -56, 77, -81, -65, -97, 103, -68, 57, 110, -107, 94, 1, 56]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[25, -6, -46, 47, 100, 23, 56, -115, -10, 118, -39, -42, -3, 70, -13, 37, 53, 97, 33, -38, -4, -2, -83, 107, 95, -81, 122, -110, 24, 14, -48, -128, 45, 82, 11, -56, 77, -81, -65, -97, 103, -68, 57, 110, -107, 94, 1, 56]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[96, 122, -65, 105, 63, 74, -100, 90, -103, 27, 27, -79, -101, -1, -74, 50, -45, -115, 73, 2, -79, 117, -3, -6, 60, 51, 45, 57, -124, 28, -62, 21, 35, 67, 107, -104, -119, 2, 120, -54, -119, 78, 42, 33, 8, -72, 83, 42, 104, 79, 86, -20, 88, 58, -82, -78, 37, -97, 21, 8, 67, -112, -66, -6, 39, -113, -69, 27, 70, 75, 113, 107, -13, 70, -74, 59, 80, -119, 81, 126, 118, 40, 4, -46, 58, 43, -53, 49, -113, -40, -47, -5, -13, -38, 38, 78, 45, 82, 11, -56, 77, -81, -65, -97, 103, -68, 57, 110, -107, 94, 1, 56]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-95, 83, 53, 121, -37, -63, 127, -107, 106, -27, 59, 37, 54, 41, -121, 32, 6, -111, 118, -1, 22, -93, -122, 1, -68, -69, -56, -119, -59, 47, 22, 78, 23, 42, 74, 116, 71, 74, 43, 6, -19, 117, -24, -97, -54, -53, -111, 89, 57, -25, 45, -116, -78, 78, 127, 77, -80, 44, 41, 86, 55, -100, 100, 60, 19, -36, -93, 81, 60, -103, 110, 109, 54, 56, -83, -29, 12, -111, -21, -59, 53, -44, -17, 1, 65, -46, -10, 90, 27, 96, -103, -68, 73, 120, -10, -80, 45, 82, 11, -56, 77, -81, -65, -97, 103, -68, 57, 110, -107, 94, 1, 56]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[45, 82, 11, -56, 77, -81, -65, -97, 103, -68, 57, 110, -107, 94, 1, 56]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-50, -70, -53, 68, -91, 59, -22, 66, 93, -111, 124, 111, -101, -1, 37, -81, 63, 57, 2, 43, 75, -61, 102, -59, 2, -73, 111, -6, 14, -121, -7, -1, 76, 114, -79, -17, -33, 35, 12, -71, -116, -117, 125, -88, -4, 97, 80, 43, -84, -113, -54, -91, -65, -9, -41, 51, 68, -74, -40, 18, 71, -105, 11, 99, 13, 91, 119, -92, 71, 8, 94, 88, 14, 56, -59, 56, -24, 24, -28, -47, -68, 53, -6, 56, -124, 77, -104, 13, 62, -52, -21, 118, -30, 92, -21, 59, 45, 82, 11, -56, 77, -81, -65, -97, 103, -68, 57, 110, -107, 94, 1, 56]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-81, 25, 105, 58, -96, -51, 88, 75, 35, 72, -6, 98, -18, -28, -36, -91]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-3, -82, -82, -66, -86, 98, -50, -73, -73, -42, -77, 110, -89, 55, 27, 108, 105, -34, 114, -123, 26, 73, 37, 102, -91, -117, -128, -74, -111, -26, -128, 4, 118, -88, -85, -5, -76, 80, 34, 11, 22, -29, -119, -122, -13, -108, 117, 105]");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey30);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        byte[] byteArray55 = new byte[] {};
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray55);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey57);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray55, secretKey61);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey61);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey61);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey61);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey61);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey61);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey61);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-25, 125, 57, 117, 23, -100, 78, -91, -33, 52, 99, -75, -35, 81, 87, -19]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[38, 32, -127, 90, 4, 101, 3, 15, -38, -112, -37, -72, 83, 108, -74, 29]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[84, 17, 108, -92, -111, -36, -50, 87, -98, -110, -36, -67, 82, 107, -62, -59]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[38, -116, 1, 46, -20, 77, 85, -27, 13, -51, 72, -17, 80, 54, -74, -78]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[58, -65, 118, 92, -119, -71, 30, 60, -52, -43, -37, 43, 44, 12, 46, -53]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[19, 6, 118, 67, 68, -27, 50, -43, -115, 40, -81, -86, -8, 126, 93, -34]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[19, 6, 118, 67, 68, -27, 50, -43, -115, 40, -81, -86, -8, 126, 93, -34]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[122, 124, 56, -32, 101, 41, -85, -85, 110, -121, -39, -16, -86, -11, 111, -58, -55, 43, -18, 123, -1, -104, -98, 89, -44, -101, 98, -74, -70, 94, 17, 36, 58, -65, 118, 92, -119, -71, 30, 60, -52, -43, -37, 43, 44, 12, 46, -53]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[74, 112, 96, -73, -62, 10, -102, 96, 114, 32, 44, -15, 114, -22, 69, 66, 28, 80, -13, 109, -85, 113, 19, -47, -30, -66, 7, -114, 86, -39, 85, -3, 58, -65, 118, 92, -119, -71, 30, 60, -52, -43, -37, 43, 44, 12, 46, -53]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-126, -51, 81, 24, 76, -82, 67, 11, -30, 74, -105, -68, 68, 34, -111, 122]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[54, -41, 37, -87, 32, 124, -3, -49, -41, 105, -98, 16, -110, 89, -111, 20]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-31, -16, -93, -61, 82, -27, -10, 58, 1, -83, 34, -94, -70, 73, 97, 6]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-15, 28, 121, -122, -85, -55, -108, -78, -89, 71, -55, 40, 40, -15, -63, -121]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-7, -15, -54, -59, 112, 72, -98, -73, 82, -97, 24, -64, 83, -111, 70, -97, 91, 83, -69, 39, 83, -24, 59, 94, 93, 18, -70, 111, -127, 12, -62, -63, -31, -16, -93, -61, 82, -27, -10, 58, 1, -83, 34, -94, -70, 73, 97, 6]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[52, -91, 7, 15, -120, 107, -119, -31, -76, 51, 80, -18, 37, -47, -82, -8, 23, -12, 15, 43, 11, -2, 56, -38, 120, 71, -94, 37, 114, -52, 10, -44, -31, -16, -93, -61, 82, -27, -10, 58, 1, -83, 34, -94, -70, 73, 97, 6]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-25, -95, -101, 33, 60, 55, -34, -100, 53, -9, -88, 3, 37, 94, 9, 36, 109, -108, 125, 104, -78, 85, -82, -16, -81, 110, 51, 22, 15, -33, -28, -50, -30, -73, -68, 11, 24, 35, 18, -32, 97, -113, 111, -14, -84, -64, 93, -8, -66, -29, 61, -15, -120, 98, -32, -95, 82, 30, -10, -21, -83, 66, 32, -80, 72, 6, 30, 66, 101, 120, -66, 14, -21, -10, -93, 63, 42, -13, -58, -123, -51, -123, -117, -97, -21, -9, 77, -125, -127, -53, 11, 113, -43, 28, 23, -33, -31, -16, -93, -61, 82, -27, -10, 58, 1, -83, 34, -94, -70, 73, 97, 6]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[18, 121, -22, -111, -52, 7, 74, -29, -104, 92, -126, -23, 121, 39, 76, 63, 83, 25, 21, 69, 49, -93, -27, -91, 38, 26, 81, 35, 30, -15, -37, 126, -31, -16, -93, -61, 82, -27, -10, 58, 1, -83, 34, -94, -70, 73, 97, 6]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-25, -95, -101, 33, 60, 55, -34, -100, 53, -9, -88, 3, 37, 94, 9, 36, 109, -108, 125, 104, -78, 85, -82, -16, -81, 110, 51, 22, 15, -33, -28, -50, -30, -73, -68, 11, 24, 35, 18, -32, 97, -113, 111, -14, -84, -64, 93, -8, -66, -29, 61, -15, -120, 98, -32, -95, 82, 30, -10, -21, -83, 66, 32, -80, 72, 6, 30, 66, 101, 120, -66, 14, -21, -10, -93, 63, 42, -13, -58, -123, -51, -123, -117, -97, -21, -9, 77, -125, -127, -53, 11, 113, -43, 28, 23, -33, -31, -16, -93, -61, 82, -27, -10, 58, 1, -83, 34, -94, -70, 73, 97, 6]");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("359F3F1E11BDB6514B5CAAF6FA46CBC03CD2A5F511DAD2381BAF069CAA0F81BC3DA1CC90B0711D39A1F452E5ED48D600CBD112873DA2201666EEDD928348C9A33A7B650EAE432ADA675A820C41830FED40425D3FE248A82E6868D8B5B57E56C17C6B61ED0C19CCF8EB4E3E0CF6C4EFC7900057C4FA03D8C8CA2AEBA7F4C9E0267C7AABA6725AE719AF2A6AA011F3EEB47B6D9F6082EAC72F7B1DC39A2DE9DC08FA59DF51DAAE437E27021DF45C385195F96331BD3A79EDD9519E04E29DCCBB384608D17100EF747684E5013A4FA99059E448E438C3590170E183D02079EFCE7C28A358310F225BDD415C6219F884E69B", secretKey19);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D669C812611D412655010D6916985B059C2ACCA7638BFD35C26DB570E39BEE6AF38863876BD0B0E868ACC2E632A40C2", secretKey34);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey34);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[5, 126, 104, -10, -88, -32, -66, 90, -110, 75, 82, 0, -71, -105, -52, 64]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-126, -37, -51, -121, 90, -112, -9, -67, 114, 120, -78, 31, -49, -51, 124, 17]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-10, 22, 102, 125, 21, 60, 15, -70, 60, -6, -75, 29, 103, -115, 50, -8]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-102, -15, -33, -79, 114, -68, -58, 100, 72, -65, 8, 73, 68, 2, 29, 45]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-33, -27, 57, 51, 78, 29, 6, 99, 88, -23, 72, -25, 118, -8, -29, 120, -87, -68, 119, -76, 71, 28, 10, 89, 44, -52, -27, -36, -104, 118, -4, 7, -10, 22, 102, 125, 21, 60, 15, -70, 60, -6, -75, 29, 103, -115, 50, -8]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-10, 22, 102, 125, 21, 60, 15, -70, 60, -6, -75, 29, 103, -115, 50, -8]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[77, 122, -71, -49, 103, -23, -92, 14, 75, -3, 41, -115, 47, 33, -127, 16]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[61, 67, -124, 61, 34, 123, 35, 19, 95, 35, -55, -2, -102, 38, -114, 39]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[61, 67, -124, 61, 34, 123, 35, 19, 95, 35, -55, -2, -102, 38, -114, 39]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-33, 9, 106, -118, -127, -23, -56, 88, -52, -68, 79, -83, -41, 42, -127, 22]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[77, 122, -71, -49, 103, -23, -92, 14, 75, -3, 41, -115, 47, 33, -127, 16]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[4, 3, -23, -35, 27, -96, 32, -69, -87, 115, 104, 86, 103, -59, 21, 2, 67, -87, 94, 95, 93, 5, -26, -108, 25, 105, -86, 10, 50, 57, 75, 18, 120, -34, -45, -86, 25, -104, 106, 21, -99, -120, 90, -42, 29, 83, -91, 81, 91, -61, -119, 102, -38, 57, -46, 6, -37, -101, -65, -112, 29, 103, 46, -47, -73, -86, 13, -112, -28, 23, 120, -85, 122, -25, -83, -51, 45, -110, 31, 46, -9, -87, 51, 57, -110, 55, 0, 79, -39, 21, 102, 6, -54, 1, -30, 48, 77, 122, -71, -49, 103, -23, -92, 14, 75, -3, 41, -115, 47, 33, -127, 16]");
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("52D718ECA78E10B3BC750CF380B0FF99E769026474AE7A9B8910C287866C7496C055C7D2A2A2FE115CA71C4082269B9F1E47A761E3CF7EFB70B5FF3A11595FB4B6E5242C88927C5968D6C8A9026E57E91903D7084F785D24846676E2CDCB55216D2B02E4693D36369C119843F92C7F6D", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("B0E0288C89053BE7343CAFC104C041B7", secretKey52);
        java.lang.Class<?> wildcardClass61 = secretKey52.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-17, -76, -116, 27, -14, -88, 46, 92, 122, 5, -20, -34, -63, -104, -18, 45]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[42, -113, -87, 34, 115, -38, -22, 27, 79, 46, -8, 94, -69, -37, 1, 75]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-52, 29, -24, 97, 111, 42, -94, 50, 85, -41, 26, -126, -109, 9, 36, -48]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-97, 89, 17, 11, 27, 87, 83, -99, 85, -43, 107, 26, -127, -11, 106, -45]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[117, -81, -3, 56, 109, -35, 56, -9, -27, 14, 17, 109, 6, 6, -34, -26]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[90, 32, 51, -91, 7, 62, -39, -59, 118, 68, -66, 86, -94, -1, 33, 10]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[73, 70, -114, -74, -30, -19, 23, -127, -109, 107, -42, -82, 123, 113, 100, -68]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-72, -9, 27, -25, -102, 0, 26, -103, 22, 116, 61, 62, 111, -9, -94, 70]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-50, -21, -105, 118, -73, -6, -23, -89, 21, 85, -117, -37, 111, -42, -117, -96]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-7, -28, 125, -33, 109, -4, -26, 103, -95, -79, -71, -81, -48, -111, -80, 76]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[92, 15, 7, 2, -38, -113, 123, -112, 52, 19, 107, -61, -14, -106, 48, -120]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-50, -21, -105, 118, -73, -6, -23, -89, 21, 85, -117, -37, 111, -42, -117, -96]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-114, -60, 103, -128, 27, -86, -43, -7, -19, -122, 27, 92, -100, -88, 23, -33, -14, -121, 107, 75, -41, 120, -100, 113, -10, 54, -124, 13, -22, -111, 12, 92, -50, -21, -105, 118, -73, -6, -23, -89, 21, 85, -117, -37, 111, -42, -117, -96]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("2A4720E5CE0AE7742E74B6A20AC62FA1", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31FF6CDA09262CE6D5FDCEABB48560AD98576A6677F3ABE48533BBD7C29C9A30D41EBE5F1257C3A09B3ABCA7F7452B0A80E7148F3DF4C809808542E161FC0008E9028C1A8E6B643E7E6E2EAD07B64342E5ABA3F75877A84195A1A8ADD0915DB19D8B6721C0E6C6F566BD0CDFAB6FB5BB", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("0906663DA00BFFA452C77F74D00DB7C5", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("42A9E31F46BAE597FC92324E1581C218D01FE552E36D89E7F8CB31B270ABC37E43C29B4D9055411C2C86F3CBB966206069FAB266B41DFFC4B6899407F594966DF534C6D165272574D0F45DD7DB3BDCC96FD8A62B1A97D49990FC82ADD6F52B044A263BD66F93EC98035ECC4DB8FF1A41", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("EAC72EF852CDB6957C3B3337E6AAFD898344A88D77B133A96575F0FEB6CF0963128C98F6465FFE174B01995E525881A246B950010C3B3FFF7E403973C3C9B01F417D856F9374C29863F9E7D0D560FCB83F86A08537994AB45AB171BA1516C64BE9700FFD6717E17102708CE6C175F0C61AF40BDC1F2B4CDC5AB3D06F00B10FC61D7ABB4EDA1D2188273BED2443A77CCCFC395CA3FA9031CE25EAA8E3FE6FC96AE723B2F0F1E0972E129CC50B23C986DD439104F2C841934C4FD047981A7EC8E383A490CDE1F2529B38D0BA929584B94DC2C8A22527897CF13C38B10D6DDB1D0C2D1892F255F35B002F69AEA221C52658", secretKey30);
        java.lang.Class<?> wildcardClass40 = byteArray39.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[74, -43, 41, 108, 59, 108, 40, 94, -33, 16, -40, -26, 16, 65, -74, -18]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[22, -81, -1, -51, -8, 2, -86, 86, 60, 17, -21, -82, 68, 9, 48, 63]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-24, 126, 115, -26, 97, 120, -96, -40, -112, 79, 6, 58, 46, -34, 33, -2]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[49, -111, 106, 74, 90, -117, -105, 53, 37, -77, 80, 114, 25, 2, -128, 108]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[73, -102, -31, 104, 81, 22, -110, 11, 108, -48, 72, -42, 17, 41, -117, -121]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-20, 97, -118, 16, -39, -53, 115, -17, 65, 51, -114, -44, -61, 47, -84, 110]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-20, 97, -118, 16, -39, -53, 115, -17, 65, 51, -114, -44, -61, 47, -84, 110]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-100, 9, 2, -44, 11, 71, -84, -74, -30, 21, -30, 73, 28, -54, -102, -48, -68, 110, 91, 125, -42, -66, 76, 109, -117, 42, -84, -93, -29, 42, -23, -94, 73, -102, -31, 104, 81, 22, -110, 11, 108, -48, 72, -42, 17, 41, -117, -121]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[73, 106, 50, -72, 47, 119, -43, -67, 115, 58, 40, -63, -34, -100, 5, -51, 99, 94, 0, 122, -82, 76, 124, -21, 100, 40, -89, -96, 31, -43, 32, -16, 73, -102, -31, 104, 81, 22, -110, 11, 108, -48, 72, -42, 17, 41, -117, -121]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey54);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey54);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey54);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("6239AD068962000ACA718EFAF846D269", secretKey54);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("AD98B15EC4EAA216B5006552245F70E0D288A296762705A2A7D9BE2EC8DB247706C43CA83C04A72673EC752C21DF094080ED10984D1C5FFBF6B2C0767B3CA38FB91664EC7EF00795CB9A7220B5740260BEE494E2DE15E7AF7EB9756F3576BC7F8C575D6231AE077756506019190A9A8A", secretKey54);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("B9CBB8D1D76A7101E2CBA5A9F41EEB0882C556B0419C29D62021B3F287B4E279AB3F1E048D5343C5EB32D3C6FC426B8CD3785BCA66E08B2D3B83EE4D3F5C65325F63EA53BAFD2FC5DCF0EFF011EF697E7C6CBD616DEC7FCB10E5B9EBA01E1033B5983D2E8F95D7B4B43B802C4FEA2FE1", secretKey54);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("CD198EFC2672FA6BEF6F45D9FEE33B18651BB3565EBA3257F08155838FD75942363EC7EA546805BB94AEF52FDD477D01125B4E2DAEC8D434218DB974E1B495D265F4A9681DBA55AFC75242BDD74201214DEDED1D5FD8088AB1D95A3B28225441E59E24AC6039AE3B0F08C20654BE4F62E171D25DE91A1C939AB68E3E41E39D3CD370131C6DE3A1E22736EF463F7C140769BB0815D79E0D0A7B3229030C7189BAD88183375BF514801B0B32CB6403B2207A4F882FB7E47F662152B7CEACCCAD642558020A6CEBB9A2555312B735F3C937D48C141280A658ABF9F1435D05F988AF9CBC3C86B91C9479630A0055118AC57A", secretKey54);
        java.lang.Class<?> wildcardClass65 = secretKey54.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-127, -114, -33, -77, 80, -92, -67, 20, 73, 37, 119, -118, -83, -118, 127, -37]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-65, -62, -8, 50, 30, -41, -100, 30, 39, 10, -33, 31, -64, -119, -62, -128]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-14, -76, -91, -76, -93, 114, 78, 32, 11, 66, 91, -20, 14, -70, -76, 109]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-51, 10, -78, 100, -45, -122, -43, 77, -65, -115, -98, 4, -49, 90, 122, -67]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[64, -13, 22, -11, -118, -123, -106, 117, -34, -8, 56, -94, -33, -103, -62, 115]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-74, -17, -69, 23, 72, -40, -70, -83, 101, 7, 12, 45, 55, -10, -124, 97]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[62, 72, -73, 53, 43, -126, 43, -71, -100, -1, 72, -121, 99, -67, -108, 9]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-90, -105, 26, 24, -22, -68, -18, 44, 5, 13, 101, 33, 82, 96, 81, -17]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[79, 86, -80, -97, 50, 76, -122, -98, 2, -63, 29, -18, -46, -11, -92, -17]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[41, 112, 14, -128, -67, -39, 56, -42, 64, 69, -43, -70, -18, -28, 70, -23]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[90, 55, 87, -93, 117, 54, -66, 90, 118, 105, -17, 41, -122, -57, -51, 111]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[79, 86, -80, -97, 50, 76, -122, -98, 2, -63, 29, -18, -46, -11, -92, -17]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[44, 100, 60, 4, -6, 32, -60, 116, -82, 113, 118, 101, 52, -56, -35, -85, -115, 7, 55, -95, 103, -12, -82, -116, 44, -108, 8, 105, 28, -90, 76, 19, 79, 86, -80, -97, 50, 76, -122, -98, 2, -63, 29, -18, -46, -11, -92, -17]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("F37CFCE767766D2BB2EDDD5F417F7BB8", secretKey37);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey37);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("9DB241B05DF020FCF4F640C4736F16E0BCE52DB85631A435E6C5E961238DB2339CF5FB057C40246BC45CD06EC29EDF788FC22583EE17ED7882B3BD36D637360B88EDDD8BEFF5B6853DB9FD594F577DA46137B7FA57FEA0E880F6B35CB3920B98A61572EC5BADBB0B351CBA251193D256", secretKey37);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("CD01115EEF8E7C1973DBAAFB50D2A1A2FAFD2F6915CDF8C87D646EF6A8318C009493038A1656ACA713F806334109FDBA", secretKey37);
        java.lang.Class<?> wildcardClass45 = byteArray44.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[76, 27, 122, -42, -124, 74, 54, 112, 59, 95, 13, 2, -87, 93, 71, 77]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-75, 62, -21, -115, 84, 123, 92, 5, 8, 60, 10, -38, -6, -83, 71, -101]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-100, 15, -91, -120, -68, 49, -79, -41, -124, 57, 48, 82, 6, -85, -108, 9]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-116, -76, -60, -54, 100, 31, -56, -52, -48, -64, 23, 19, 59, 105, -22, 122]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[111, 126, -48, 40, 111, 79, -92, -87, -45, 50, -47, 15, 78, 77, 58, 102]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-71, 96, 87, -110, 4, 65, -51, -76, -74, -79, 13, -25, -10, 121, 69, 50]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-71, 96, 87, -110, 4, 65, -51, -76, -74, -79, 13, -25, -10, 121, 69, 50]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-127, -82, -15, 44, 83, -22, -48, -45, 18, 41, 50, -44, -91, -84, -56, 117]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-116, 107, 92, -95, -88, -12, 119, -88, -97, -14, -63, -40, -76, -17, -9, -59]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-116, 107, 92, -95, -88, -12, 119, -88, -97, -14, -63, -40, -76, -17, -9, -59]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[76, 15, -9, -70, -74, -26, -91, -10, -62, 40, -56, -8, 29, -28, 72, 116, -63, -108, -13, 31, 0, -118, -75, 70, 78, -22, 122, 22, 50, 44, -54, 31, -127, -82, -15, 44, 83, -22, -48, -45, 18, 41, 50, -44, -91, -84, -56, 117]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-105, -111, 23, 70, -66, 3, 11, -9, 73, -66, 76, 57, 23, -83, -69, -4, 39, -97, -67, 126, 88, 55, 62, 32, -42, 14, -36, 21, 112, -5, 26, -52, -84, 121, -53, 42, 72, 54, 70, -102, -92, -6, 74, -28, -10, 62, 100, -36, -19, -59, -5, -42, -80, 1, 93, 17, 81, 40, 27, 2, 59, 48, 31, -48, 3, -55, -52, 76, -112, -50, -104, -68, 107, -36, 118, 45, -111, 64, -84, -123, -126, 77, -17, -43, 80, 11, -67, 53, -63, -79, -64, 39, 84, -95, -12, -103, -127, -82, -15, 44, 83, -22, -48, -45, 18, 41, 50, -44, -91, -84, -56, 117]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("D360375F6FF85133F4A3BC5317DAB8BA", secretKey52);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey52);
        byte[] byteArray63 = new byte[] {};
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray63);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray63);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey69);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey69);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("6E8947382244B4A2A91E7149459C593D", secretKey69);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("D45152E3D9B26696B7B16CF476A6E2617DDF79307ACD9F749274DBFABAACD612C46677A23A852D706FC53C51F0BD320FF9C2C014456244398F783B2B1B31F622DA090D0B5D2C2D3085BB89A6BE3671A5C56F8708DEA18989BCCE6A97F9454D49DDCC1F57462405C9A56AF0712886B895", secretKey69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey69);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -63, 94, -15, -126, 116, 95, 51, 13, -31, 2, 28, 6, 93, -99, -42]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[83, 22, -29, -69, 1, 82, 53, 71, -126, -111, 3, -96, 122, -53, 100, 7]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-62, 49, 116, 80, -17, 20, 68, -33, -77, 36, -33, 86, -88, -1, 90, -8]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-106, 27, 21, 65, -68, -61, 85, 36, -69, 78, -117, -39, -26, 123, 17, -34]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[37, 94, -88, -79, 58, -41, 119, 126, -34, 37, -39, -1, -42, 116, -72, -87]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-99, 75, 96, 35, -44, 58, -113, -38, 20, 123, 44, -47, 121, -116, -23, -73]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[121, 52, 23, 121, -109, -72, 79, -63, -64, -57, 109, 35, -87, -73, -45, 123]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-21, -32, -15, 67, 68, 27, -128, -77, -10, -108, 94, 26, -97, -111, -85, -81]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[117, -111, -54, 72, 46, 69, 60, -69, -27, 108, 55, 28, -43, -51, -82, 50]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[67, 113, 65, -114, 86, 44, 104, 102, -103, 78, 34, -115, 5, 10, -57, -59]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-9, 10, 72, 52, -62, 40, -13, 64, -66, -56, 0, -41, -44, -44, 47, -48]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[117, -111, -54, 72, 46, 69, 60, -69, -27, 108, 55, 28, -43, -51, -82, 50]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[12, 48, -110, 111, -36, 93, 97, -86, 87, 69, 15, -100, 126, 58, 100, 24, 100, 81, 0, 31, -3, -51, 120, -75, -20, -87, -58, -1, -70, -86, -10, 69, 117, -111, -54, 72, 46, 69, 60, -69, -27, 108, 55, 28, -43, -51, -82, 50]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[106, -103, 90, -119, 41, 0, 109, -96, -91, -94, 46, -93, -9, 28, -101, -118, -50, 68, 4, 58, 54, -75, -92, -17, 0, 105, 100, -65, 39, 15, -55, -18, 117, -111, -54, 72, 46, 69, 60, -69, -27, 108, 55, 28, -43, -51, -82, 50]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[52, -22, 63, -115, 84, 63, 63, -37, 18, -7, 116, -96, 100, -99, -23, 120]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-14, 28, -121, -82, 85, 97, -25, -113, 85, 105, -59, -107, 99, 46, 77, 37]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-14, 28, -121, -82, 85, 97, -25, -113, 85, 105, -59, -107, 99, 46, 77, 37]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[66, 55, -47, -124, -50, -119, 59, 86, -41, -118, -123, 18, -20, 87, -47, -98, -84, -73, -111, 108, 26, 43, 88, -124, 56, 53, 30, 102, -75, 105, -79, -91, 52, -22, 63, -115, 84, 63, 63, -37, 18, -7, 116, -96, 100, -99, -23, 120]");
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey15);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey25);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey25);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("3FDFDBCC8A11B6DD72C22912332D44C6", secretKey25);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B7A38D6D21171BD03040AE8BD0942D20", secretKey25);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("1A40ECD3B2A9314622399ABA69549C94487F641AD1BD91A4CA86F5E131C22614EE1ADF210C784D299D0E1D609E072785", secretKey25);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("054AE839BAC6A6585E85681FC631A91F8AB8E91621788529012D60B6E771E53FB71BFB2CCC5313E8FE903434414AABBA", secretKey25);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("4F28645FEB088D6F58EE2A6480B4EDDD", secretKey25);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("6B1CB753E6CB676D43DF5C3D409AB876882EFDC91C41EC7F2EA3EBD95A9E32F16F62EE797F5B11F6A21134D8A6B031FA", secretKey25);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey45);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("9E3FA735129C449B99534E5E23A8CD37381E7A83D9BEBA2014B2C5301D9CBF2939A122A8A7ABF168E3D309422D89A40503600C06C72412872F119661B5C91C2BFDDB687C5C90027C4E4E15C34EB35CC5B0D23EEB4FEA44B6705E349738317C8F3FE0B5B4056E29386E3DEF440334A03F", secretKey45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray38, secretKey45);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[119, -55, 83, -120, -28, 29, -109, 117, -95, 99, 113, 121, -115, -117, 113, -68]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[42, 1, -84, 101, 68, 26, -20, -72, 46, -1, 86, -79, 105, -116, -67, -66]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[123, -19, 70, 31, 77, 58, 23, -106, -109, 19, -65, 48, 59, -65, -96, 5]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-100, -83, 10, 95, 24, -86, -66, -8, -108, 63, 55, -94, 7, 50, 34, 39, -83, -22, -77, -36, 62, 118, 84, 30, -75, 91, 33, 126, 97, 14, -25, 61, -62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-124, 7, 74, -60, 58, 27, 26, -60, 80, -63, 61, 16, -118, -104, -15, -114, 78, -68, 86, 72, 113, 80, 121, 110, 0, 95, 88, 126, 8, -22, -75, -21, -62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[112, 70, 77, -32, 117, -121, 118, -29, 88, 5, 122, -100, 69, -72, 78, -55, -121, 57, -120, -74, 117, 98, 23, 52, 16, 62, 11, 62, 42, -74, -62, 84, -127, -80, 28, 89, -109, 82, 76, 119, 67, 48, 107, -72, -90, 28, -30, -15, 88, -72, -61, 42, -86, -37, 21, -105, 126, -27, -3, -61, 76, 41, -95, -24, 4, 47, -34, -108, -50, -84, -52, -29, -4, -97, 65, 119, 120, 57, 116, -64, -39, -93, -100, 16, -6, 55, -91, -44, 26, -51, -26, 124, 123, -33, -76, 1, -62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[76, 98, -106, 113, -121, 123, 93, -42, -53, -30, 124, -109, 28, 117, -30, 49, 56, -60, 114, -49, -69, -77, -118, 125, 55, 67, 92, -95, 113, -114, -65, 54, -62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[112, 70, 77, -32, 117, -121, 118, -29, 88, 5, 122, -100, 69, -72, 78, -55, -121, 57, -120, -74, 117, 98, 23, 52, 16, 62, 11, 62, 42, -74, -62, 84, -127, -80, 28, 89, -109, 82, 76, 119, 67, 48, 107, -72, -90, 28, -30, -15, 88, -72, -61, 42, -86, -37, 21, -105, 126, -27, -3, -61, 76, 41, -95, -24, 4, 47, -34, -108, -50, -84, -52, -29, -4, -97, 65, 119, 120, 57, 116, -64, -39, -93, -100, 16, -6, 55, -91, -44, 26, -51, -26, 124, 123, -33, -76, 1, -62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-22, 53, -1, 91, -59, -123, 23, -100, -44, 104, 24, 89, 58, 115, 98, -58, -96, -98, 98, 23, 58, 49, -118, -111, -68, 72, -9, 89, -55, 36, 110, 66, 73, -112, -75, -121, -112, 81, 35, 4, 118, 36, -116, 2, -102, 99, -52, 123, 53, 47, 116, 125, 86, 39, 84, -26, -30, -86, -65, -14, 27, -93, 123, 120, 77, -127, -89, -72, -113, 86, 61, 36, 94, 77, -12, 16, 48, 45, -86, -99, 11, 32, -79, 40, -7, -71, 120, 116, -89, 60, 11, 82, 74, -76, -44, 48, -62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-13, 12, -5, 58, -89, 40, 55, -62, -2, -64, 92, -64, 63, 89, 7, -14, 17, -24, 122, 48, -89, -25, -24, 122, -82, 118, -128, -22, 59, -117, -116, 87, -62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[97, 23, -120, 99, -68, -33, 102, -70, -76, 90, 35, -84, -67, -16, 42, -7, -98, -88, 98, -72, 45, 83, 22, -93, -76, 16, 105, -98, 34, -26, 5, 100, -89, -118, 41, 46, -64, 36, -25, -84, 67, -19, 104, -11, -109, 25, -110, -127, -106, 61, -60, 35, 10, -77, -59, 106, 106, 72, -102, -80, -1, -38, 83, -105, -105, 41, -6, 47, 82, 9, 85, -95, -97, -87, 3, -99, -29, -7, -97, -47, 100, 104, 52, 66, 36, 54, 104, -118, 89, 114, 98, -102, 10, 74, -14, -5, -62, 26, -100, -126, -15, 23, -96, -109, -121, -123, -15, -58, -111, -34, 63, -33]");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-96, 37, 36, 62, 36, -44, 99, 84, 7, -40, -99, 127, -99, -104, 105, -43]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[33, -93, 28, -87, -27, 76, -32, 42, 62, -116, 66, 79, 28, -99, 77, -116]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[33, -93, 28, -87, -27, 76, -32, 42, 62, -116, 66, 79, 28, -99, 77, -116]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[88, -84, 5, 121, -94, 52, 98, -72, -127, -66, -71, 7, -113, 44, -52, -69]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-96, 37, 36, 62, 36, -44, 99, 84, 7, -40, -99, 127, -99, -104, 105, -43]");
        org.junit.Assert.assertNotNull(byteArray51);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("E9A1D1CAFA48E2AC6AF64F3F168B543B", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("F5D28FDC16EF101B4A67318C5A3AD68907A8EDC826BA92A64EA648F6899232223081A1FC1C1438C298BD310586743BC5504899C1BCA99428874256CE6AE984FFFC890C16F2BBAA8EFDC36FC9DB483E37D43DA929034675142FA1A1C70E51EB7AD165534B3F8B4F0935FE8A4EC43B057950FF131331DA2A25540C3EC80D7819CBDCB581922DC3EE385C37D8B5930BC8C9296D27D1C7437EB6ADABFD6EA9B8B9CF7FBCB82F8FA7784381624F442B20310E3EE4286D7D0A5AF44C4E11A247353227AE264E06550DC4C1836399E06B1747B6005B610DED29F01D01419FEC4FD43B34584149F10881E78E83AC1FBCBCFBAD7E", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[4, -93, -15, 9, 90, 56, 26, -74, -16, -48, -88, -55, 13, -98, -106, 77]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-72, 2, 61, -15, -27, 80, -96, 91, 115, 60, -56, -94, -73, 28, -34, 31]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[29, -102, -107, -85, -33, -111, -66, 68, 55, -22, 19, 71, 68, -56, 5, -45]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-6, -24, -91, -16, 19, -56, 30, 6, 8, 77, 40, 115, -125, -50, 74, 26]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[34, 63, -4, 35, -79, -126, -51, -22, 27, -73, -27, -90, -86, 88, -112, -3, -2, -110, 37, -56, 66, -54, 1, 10, 6, -25, -67, -54, -74, -15, 82, 7, 29, -102, -107, -85, -33, -111, -66, 68, 55, -22, 19, 71, 68, -56, 5, -45]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[29, -102, -107, -85, -33, -111, -66, 68, 55, -22, 19, 71, 68, -56, 5, -45]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-6, -24, -91, -16, 19, -56, 30, 6, 8, 77, 40, 115, -125, -50, 74, 26]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[34, 63, -4, 35, -79, -126, -51, -22, 27, -73, -27, -90, -86, 88, -112, -3, -2, -110, 37, -56, 66, -54, 1, 10, 6, -25, -67, -54, -74, -15, 82, 7, 29, -102, -107, -85, -33, -111, -66, 68, 55, -22, 19, 71, 68, -56, 5, -45]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }
}

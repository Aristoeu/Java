package MinimumSumPartition;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 10);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-705));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-10) + "'", int10 == (-10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-725) + "'", int15 == (-725));
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-27));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-564));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-53) + "'", int14 == (-53));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-131) + "'", int16 == (-131));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-173) + "'", int18 == (-173));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-668) + "'", int21 == (-668));
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-751) + "'", int14 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-503) + "'", int16 == (-503));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-543));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass20 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 12);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-893));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-175) + "'", int8 == (-175));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-92) + "'", int10 == (-92));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-997) + "'", int15 == (-997));
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-105) + "'", int12 == (-105));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-105) + "'", int14 == (-105));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 21);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-213));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-336));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-73));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-209));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-31));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-63) + "'", int12 == (-63));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-95) + "'", int15 == (-95));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 43 + "'", int16 == 43);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-401));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-4) + "'", int11 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-505) + "'", int13 == (-505));
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-417) + "'", int12 == (-417));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-356));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-218));
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-232) + "'", int12 == (-232));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-61) + "'", int14 == (-61));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-460) + "'", int16 == (-460));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-322) + "'", int18 == (-322));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-875));
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-979) + "'", int11 == (-979));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-457));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-561) + "'", int15 == (-561));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-771));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-435));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-503));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-193));
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-148) + "'", int16 == (-148));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-297) + "'", int20 == (-297));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-260));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-563));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-175) + "'", int8 == (-175));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-667) + "'", int10 == (-667));
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-687));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-393));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-20));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-497) + "'", int11 == (-497));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-124) + "'", int19 == (-124));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-252));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass8 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-72) + "'", int6 == (-72));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-83) + "'", int14 == (-83));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-232) + "'", int21 == (-232));
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass19 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-73));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-193));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-297) + "'", int22 == (-297));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-20));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-395));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-195));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-499) + "'", int19 == (-499));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-299) + "'", int21 == (-299));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-521) + "'", int23 == (-521));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-581) + "'", int25 == (-581));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 51 + "'", int26 == 51);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-104));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-233));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-208) + "'", int13 == (-208));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-337) + "'", int15 == (-337));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-373) + "'", int17 == (-373));
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-173));
        java.lang.Class<?> wildcardClass9 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-94));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-645));
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-393) + "'", int12 == (-393));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-104) + "'", int16 == (-104));
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-176));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-11));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-115) + "'", int14 == (-115));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-123));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-279));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-227) + "'", int11 == (-227));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-383) + "'", int13 == (-383));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-439) + "'", int8 == (-439));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-732));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-175));
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-685));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        java.lang.Class<?> wildcardClass12 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-89) + "'", int15 == (-89));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-94) + "'", int13 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-311) + "'", int13 == (-311));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-157));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-261) + "'", int10 == (-261));
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-148));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        java.lang.Class<?> wildcardClass13 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-439) + "'", int8 == (-439));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-601) + "'", int13 == (-601));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-232) + "'", int18 == (-232));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-692));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass10 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-103) + "'", int6 == (-103));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-420) + "'", int8 == (-420));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-393));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-727));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-936));
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1040) + "'", int19 == (-1040));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-71));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-281));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        java.lang.Class<?> wildcardClass14 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-63) + "'", int12 == (-63));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-125) + "'", int11 == (-125));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-53) + "'", int15 == (-53));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-420) + "'", int17 == (-420));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-373));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-83));
        java.lang.Class<?> wildcardClass16 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-271) + "'", int14 == (-271));
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-297));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-603));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-401) + "'", int10 == (-401));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-707) + "'", int13 == (-707));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-404) + "'", int14 == (-404));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-311) + "'", int15 == (-311));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-540));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-543) + "'", int12 == (-543));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-644) + "'", int15 == (-644));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-356));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-232) + "'", int12 == (-232));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-61) + "'", int14 == (-61));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-460) + "'", int16 == (-460));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-187) + "'", int11 == (-187));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass13 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-103) + "'", int6 == (-103));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-128) + "'", int7 == (-128));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-20));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-279));
        java.lang.Class<?> wildcardClass9 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-299) + "'", int8 == (-299));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-252));
        java.lang.Class<?> wildcardClass11 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-316) + "'", int10 == (-316));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-173) + "'", int11 == (-173));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-395) + "'", int13 == (-395));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-24) + "'", int15 == (-24));
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (int) (short) 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-977));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36 + "'", int11 == 36);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1041) + "'", int13 == (-1041));
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-957));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-247));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-351) + "'", int15 == (-351));
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-271));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-645));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-417) + "'", int12 == (-417));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-375) + "'", int14 == (-375));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-749) + "'", int18 == (-749));
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-213));
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int27 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass28 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-317) + "'", int25 == (-317));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 51 + "'", int26 == 51);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 53 + "'", int27 == 53);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 43);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-399));
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-520) + "'", int16 == (-520));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-503) + "'", int19 == (-503));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-240));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-105));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-24) + "'", int11 == (-24));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-209) + "'", int13 == (-209));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-168));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-311) + "'", int13 == (-311));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-272) + "'", int16 == (-272));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-131));
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-103) + "'", int14 == (-103));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-235) + "'", int18 == (-235));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-27) + "'", int16 == (-27));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-20) + "'", int19 == (-20));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-20) + "'", int23 == (-20));
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-125) + "'", int11 == (-125));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-104) + "'", int16 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-165));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-269) + "'", int11 == (-269));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-313) + "'", int18 == (-313));
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        java.lang.Class<?> wildcardClass12 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-364));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-751));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-375));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-855) + "'", int14 == (-855));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-479) + "'", int16 == (-479));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-53) + "'", int15 == (-53));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-420) + "'", int17 == (-420));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-477) + "'", int13 == (-477));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-939));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-104) + "'", int16 == (-104));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1043) + "'", int20 == (-1043));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-271));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-375) + "'", int14 == (-375));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-51));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass22 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-621));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-115));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-7));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-11));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-627));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-731) + "'", int11 == (-731));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-157) + "'", int13 == (-157));
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass25 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-72) + "'", int19 == (-72));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-393) + "'", int22 == (-393));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-7));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-111) + "'", int10 == (-111));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-20));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) -1);
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-271));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-252));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-175));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        java.lang.Class<?> wildcardClass17 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-316) + "'", int13 == (-316));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-239) + "'", int15 == (-239));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 43 + "'", int16 == 43);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-728));
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-173) + "'", int12 == (-173));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-832) + "'", int17 == (-832));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 53);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass14 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-19) + "'", int10 == (-19));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33 + "'", int12 == 33);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '#');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-229));
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-69) + "'", int9 == (-69));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass18 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-551));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-521) + "'", int16 == (-521));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-148) + "'", int18 == (-148));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-356) + "'", int17 == (-356));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-72) + "'", int19 == (-72));
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-477) + "'", int11 == (-477));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-148));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-420) + "'", int13 == (-420));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-300));
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-72) + "'", int16 == (-72));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-581) + "'", int12 == (-581));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-299));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-403) + "'", int18 == (-403));
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-185));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-401));
        java.lang.Class<?> wildcardClass16 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-259));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-94) + "'", int17 == (-94));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-363) + "'", int19 == (-363));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-373));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-83));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-27));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-499));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-4) + "'", int13 == (-4));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-300));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        java.lang.Class<?> wildcardClass7 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (int) (byte) 0);
        java.lang.Class<?> wildcardClass14 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-333) + "'", int11 == (-333));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-64) + "'", int13 == (-64));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-260));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-83) + "'", int13 == (-83));
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-603));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1039));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-707) + "'", int13 == (-707));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1143) + "'", int16 == (-1143));
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-173));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        java.lang.Class<?> wildcardClass15 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-237) + "'", int13 == (-237));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-173) + "'", int11 == (-173));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-467));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-235));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1143));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-103) + "'", int16 == (-103));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-339) + "'", int20 == (-339));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1247) + "'", int22 == (-1247));
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-420) + "'", int15 == (-420));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-105) + "'", int17 == (-105));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-563));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass23 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-108) + "'", int14 == (-108));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-61) + "'", int16 == (-61));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-667) + "'", int20 == (-667));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-104) + "'", int22 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-94) + "'", int13 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-187));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-173) + "'", int12 == (-173));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-291) + "'", int14 == (-291));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-125));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-175));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-155));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-215));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-232) + "'", int12 == (-232));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-61) + "'", int14 == (-61));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-404) + "'", int16 == (-404));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1063));
        java.lang.Class<?> wildcardClass20 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-123));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-227) + "'", int11 == (-227));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-7));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-11));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-187));
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-73));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-232) + "'", int15 == (-232));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-356) + "'", int17 == (-356));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-177) + "'", int19 == (-177));
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass9 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-209));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass9 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-279) + "'", int13 == (-279));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-751) + "'", int15 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        java.lang.Class<?> wildcardClass9 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-5));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-156));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-260) + "'", int9 == (-260));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-543) + "'", int11 == (-543));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-520) + "'", int16 == (-520));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-52));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1167));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-156) + "'", int9 == (-156));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-128) + "'", int11 == (-128));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1271) + "'", int13 == (-1271));
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-355));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-94) + "'", int19 == (-94));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-459) + "'", int22 == (-459));
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-251));
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-355) + "'", int11 == (-355));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-83));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-187) + "'", int8 == (-187));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-417) + "'", int13 == (-417));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-103) + "'", int17 == (-103));
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-176));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-280) + "'", int13 == (-280));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-311) + "'", int15 == (-311));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-218));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-105));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-503));
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-24) + "'", int11 == (-24));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-209) + "'", int13 == (-209));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-607) + "'", int17 == (-607));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-401));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-505) + "'", int16 == (-505));
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-312));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-395));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-195));
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-417));
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-581));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-499) + "'", int19 == (-499));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-299) + "'", int21 == (-299));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-521) + "'", int23 == (-521));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 51 + "'", int24 == 51);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-685) + "'", int26 == (-685));
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-331));
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-435) + "'", int18 == (-435));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-157));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1167));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-173) + "'", int12 == (-173));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1271) + "'", int15 == (-1271));
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-104) + "'", int15 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass9 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-143));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-247) + "'", int15 == (-247));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-561));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-135));
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-156));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-439) + "'", int14 == (-439));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-260) + "'", int16 == (-260));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-167));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass9 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-227));
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-331) + "'", int11 == (-331));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-271));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (int) 'a');
        java.lang.Class<?> wildcardClass17 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-335) + "'", int8 == (-335));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-64) + "'", int11 == (-64));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-64) + "'", int14 == (-64));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 33 + "'", int16 == 33);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-94) + "'", int15 == (-94));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        java.lang.Class<?> wildcardClass5 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-835));
        java.lang.Class<?> wildcardClass24 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-94) + "'", int19 == (-94));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-939) + "'", int23 == (-939));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-4) + "'", int13 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-71) + "'", int17 == (-71));
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 33);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-356));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-218));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-71) + "'", int10 == (-71));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-232) + "'", int12 == (-232));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-61) + "'", int14 == (-61));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-460) + "'", int16 == (-460));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-322) + "'", int18 == (-322));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-4) + "'", int20 == (-4));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-131));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-563));
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-103) + "'", int14 == (-103));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-235) + "'", int18 == (-235));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-667) + "'", int20 == (-667));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-24) + "'", int14 == (-24));
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-523));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-627) + "'", int11 == (-627));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-128) + "'", int7 == (-128));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-591));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-105));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-209) + "'", int7 == (-209));
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-645));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-207) + "'", int16 == (-207));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-749) + "'", int19 == (-749));
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-977));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-997) + "'", int15 == (-997));
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-205));
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-919));
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1023) + "'", int12 == (-1023));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-247));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-123) + "'", int15 == (-123));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-61));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-51));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-289));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-503));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-71));
        java.lang.Class<?> wildcardClass9 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-523) + "'", int6 == (-523));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-91) + "'", int8 == (-91));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-103) + "'", int12 == (-103));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-645));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        java.lang.Class<?> wildcardClass22 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-175) + "'", int15 == (-175));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-749) + "'", int18 == (-749));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-373) + "'", int21 == (-373));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-21));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        java.lang.Class<?> wildcardClass14 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-20) + "'", int9 == (-20));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-41) + "'", int11 == (-41));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-41));
        java.lang.Class<?> wildcardClass10 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-145) + "'", int9 == (-145));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 10);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-94) + "'", int15 == (-94));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-24) + "'", int10 == (-24));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-279) + "'", int13 == (-279));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-165));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-269) + "'", int11 == (-269));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-105) + "'", int13 == (-105));
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, 1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-64));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-564));
        java.lang.Class<?> wildcardClass16 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-63) + "'", int8 == (-63));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-128) + "'", int12 == (-128));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-628) + "'", int15 == (-628));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-111));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-333));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-131) + "'", int10 == (-131));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-353) + "'", int12 == (-353));
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-607));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-711) + "'", int20 == (-711));
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass24 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-94) + "'", int19 == (-94));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-207));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-311) + "'", int11 == (-311));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-52) + "'", int13 == (-52));
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-331));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-716));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-103) + "'", int13 == (-103));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-435) + "'", int15 == (-435));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-820) + "'", int17 == (-820));
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-625));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-105) + "'", int14 == (-105));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (short) 10);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        java.lang.Class<?> wildcardClass12 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-10) + "'", int10 == (-10));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-92));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-260));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-196) + "'", int14 == (-196));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-364) + "'", int16 == (-364));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-205));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-309) + "'", int13 == (-309));
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-836));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass11 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-167) + "'", int12 == (-167));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-711));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-72));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-271));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-299));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        java.lang.Class<?> wildcardClass13 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-335) + "'", int8 == (-335));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-363) + "'", int11 == (-363));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-393));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-20));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-497) + "'", int11 == (-497));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-124) + "'", int19 == (-124));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-364));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-581));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-468) + "'", int15 == (-468));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-685) + "'", int17 == (-685));
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-313));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-523));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-627) + "'", int15 == (-627));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-381));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-7) + "'", int10 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-485) + "'", int12 == (-485));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-520) + "'", int12 == (-520));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 10);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-601));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-383));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-395) + "'", int12 == (-395));
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-592));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-7) + "'", int15 == (-7));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-52) + "'", int19 == (-52));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-696) + "'", int21 == (-696));
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 84);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-588));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-52));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-979));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-811));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-423));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-51) + "'", int15 == (-51));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-915) + "'", int17 == (-915));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-527) + "'", int19 == (-527));
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 84);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-53) + "'", int9 == (-53));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-157) + "'", int12 == (-157));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-415));
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-108) + "'", int17 == (-108));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-519) + "'", int20 == (-519));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-520) + "'", int16 == (-520));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) -1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-103));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-128));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-232) + "'", int15 == (-232));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-356) + "'", int17 == (-356));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-175));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-647));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-279) + "'", int13 == (-279));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-751) + "'", int15 == (-751));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        java.lang.Class<?> wildcardClass8 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-128) + "'", int7 == (-128));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass5 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-108));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-24) + "'", int6 == (-24));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-212) + "'", int9 == (-212));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-89) + "'", int11 == (-89));
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-218));
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-322) + "'", int17 == (-322));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-313) + "'", int8 == (-313));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        java.lang.Class<?> wildcardClass20 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-581) + "'", int17 == (-581));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-313) + "'", int19 == (-313));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass4 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-20));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-591));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-420));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-524) + "'", int13 == (-524));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-437));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-291));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-564));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-395) + "'", int17 == (-395));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-104) + "'", int20 == (-104));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-668) + "'", int22 == (-668));
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-27));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-499));
        java.lang.Class<?> wildcardClass9 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-128));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-355));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-395));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-195));
        java.lang.Class<?> wildcardClass22 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-499) + "'", int19 == (-499));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-299) + "'", int21 == (-299));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-176));
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-53));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-439) + "'", int10 == (-439));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-503) + "'", int12 == (-503));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-545));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-520) + "'", int17 == (-520));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-649) + "'", int19 == (-649));
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-24) + "'", int11 == (-24));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        java.lang.Class<?> wildcardClass18 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-27) + "'", int12 == (-27));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-477) + "'", int16 == (-477));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 10);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) -1);
        java.lang.Class<?> wildcardClass19 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-439) + "'", int8 == (-439));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-167));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-155));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-313));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-175) + "'", int8 == (-175));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-333) + "'", int10 == (-333));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-647));
        java.lang.Class<?> wildcardClass20 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        java.lang.Class<?> wildcardClass14 = intArray5.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-175));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-51));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-105) + "'", int12 == (-105));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-123) + "'", int11 == (-123));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-89) + "'", int18 == (-89));
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass9 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-148) + "'", int16 == (-148));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-262));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-395));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-499) + "'", int19 == (-499));
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-251));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 15);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        java.lang.Class<?> wildcardClass23 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-27) + "'", int16 == (-27));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-20) + "'", int19 == (-20));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-439));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-623));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-543) + "'", int11 == (-543));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-727) + "'", int15 == (-727));
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass10 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-229) + "'", int10 == (-229));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-381));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-835));
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-644));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-467));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-399));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-193));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-105) + "'", int17 == (-105));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-420));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-27));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-131) + "'", int11 == (-131));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1063));
        java.lang.Class<?> wildcardClass22 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-520) + "'", int16 == (-520));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-503) + "'", int19 == (-503));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1167) + "'", int21 == (-1167));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-353));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1043));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-457) + "'", int14 == (-457));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-104) + "'", int17 == (-104));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1147) + "'", int20 == (-1147));
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        int[] intArray4 = new int[] { (-685), (-64), (-41), (-167) };
        // The following exception was thrown during execution in test generation
        try {
            int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -956");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-685, -64, -41, -167]");
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-229) + "'", int12 == (-229));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-72) + "'", int16 == (-72));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-156));
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-128) + "'", int17 == (-128));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-260) + "'", int20 == (-260));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-611));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-668));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-715) + "'", int14 == (-715));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-772) + "'", int16 == (-772));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-207) + "'", int17 == (-207));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-420) + "'", int13 == (-420));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        java.lang.Class<?> wildcardClass7 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-239));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-148) + "'", int16 == (-148));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-343) + "'", int19 == (-343));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-10));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-261));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-280));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass14 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-300));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-271));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-417) + "'", int12 == (-417));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-375) + "'", int14 == (-375));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-497));
        java.lang.Class<?> wildcardClass17 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-89));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-4));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-220));
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-185));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-380));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-289) + "'", int9 == (-289));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-484) + "'", int11 == (-484));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-311));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-415) + "'", int14 == (-415));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-4));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-415));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass23 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-312) + "'", int15 == (-312));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-108) + "'", int17 == (-108));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-519) + "'", int20 == (-519));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-647));
        java.lang.Class<?> wildcardClass7 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '4');
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-363));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-94) + "'", int16 == (-94));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-144));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 43);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-125));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 15);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-420));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-92));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-61) + "'", int7 == (-61));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-229) + "'", int10 == (-229));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-89) + "'", int12 == (-89));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-524) + "'", int15 == (-524));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-196) + "'", int18 == (-196));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-148) + "'", int20 == (-148));
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-156));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-467));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-876));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-220) + "'", int9 == (-220));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-531) + "'", int11 == (-531));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-940) + "'", int13 == (-940));
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-175) + "'", int15 == (-175));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-416));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-395));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-520) + "'", int10 == (-520));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-103) + "'", int12 == (-103));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-420) + "'", int14 == (-420));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-499) + "'", int17 == (-499));
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-611));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-715) + "'", int14 == (-715));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-524));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-157));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-261) + "'", int15 == (-261));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-523));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-631));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-627) + "'", int15 == (-627));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-735) + "'", int17 == (-735));
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-289));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-124));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-393) + "'", int12 == (-393));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-228) + "'", int14 == (-228));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1040));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-83) + "'", int14 == (-83));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1144) + "'", int17 == (-1144));
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-175) + "'", int11 == (-175));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass10 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-103));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-207) + "'", int16 == (-207));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-259));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-237));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-167) + "'", int11 == (-167));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-341) + "'", int15 == (-341));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-187));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-252));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-356) + "'", int17 == (-356));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-507));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-157) + "'", int12 == (-157));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-611) + "'", int16 == (-611));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-165) + "'", int15 == (-165));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) '#');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-232));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1351));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-353));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-457) + "'", int14 == (-457));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-104));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-208) + "'", int10 == (-208));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-416) + "'", int13 == (-416));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        int[] intArray5 = new int[] { ' ', 1, (short) 0, (short) 0, (short) 10 };
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray5);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray5, (-187));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[32, 1, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 43 + "'", int7 == 43);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43 + "'", int10 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-251) + "'", int12 == (-251));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-260));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-313));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-611));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-668));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-715) + "'", int14 == (-715));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-772) + "'", int16 == (-772));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 84);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-341));
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-20) + "'", int16 == (-20));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-445) + "'", int18 == (-445));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-167) + "'", int9 == (-167));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-52) + "'", int11 == (-52));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass13 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-668));
        java.lang.Class<?> wildcardClass15 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-772) + "'", int14 == (-772));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-601) + "'", int13 == (-601));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-72) + "'", int17 == (-72));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-24) + "'", int19 == (-24));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-156));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-260) + "'", int10 == (-260));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-809));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1023));
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-213));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-811));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-893));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-439) + "'", int8 == (-439));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-915) + "'", int10 == (-915));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-997) + "'", int12 == (-997));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-731));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-601) + "'", int13 == (-601));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-835) + "'", int16 == (-835));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass12 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-167));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-525));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-271) + "'", int9 == (-271));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-4) + "'", int13 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-629) + "'", int16 == (-629));
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 15);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 21);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-269));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-497));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-939));
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-83) + "'", int12 == (-83));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-373) + "'", int14 == (-373));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-601) + "'", int18 == (-601));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1043) + "'", int21 == (-1043));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-69));
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-173) + "'", int11 == (-173));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-148));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-252) + "'", int16 == (-252));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-420));
        java.lang.Class<?> wildcardClass16 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-271));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 84);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 36);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-477));
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-252));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-261));
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass8 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 51);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-21) + "'", int5 == (-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-269));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-439) + "'", int10 == (-439));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-503) + "'", int12 == (-503));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass19 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-104) + "'", int14 == (-104));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-148) + "'", int16 == (-148));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-131));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 10);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass13 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-519));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-623) + "'", int12 == (-623));
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-624));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-19));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-312));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-457));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-7));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 80);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-11));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-187));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-335));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-220));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-439) + "'", int10 == (-439));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-324) + "'", int12 == (-324));
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-19));
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-123) + "'", int13 == (-123));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-291));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-541));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-523));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-68));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-627) + "'", int15 == (-627));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-172) + "'", int18 == (-172));
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-155));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-229));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-545));
        java.lang.Class<?> wildcardClass21 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-259) + "'", int15 == (-259));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-333) + "'", int17 == (-333));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-649) + "'", int20 == (-649));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 10);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-143));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass21 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-312));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-644));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-104) + "'", int9 == (-104));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-416) + "'", int14 == (-416));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-312) + "'", int17 == (-312));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-748) + "'", int20 == (-748));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-61));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 100);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-165) + "'", int11 == (-165));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-4) + "'", int15 == (-4));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) ' ');
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-123));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-27) + "'", int12 == (-27));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-143) + "'", int15 == (-143));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 10);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-333));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-5));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-94) + "'", int12 == (-94));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-437) + "'", int16 == (-437));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-109) + "'", int18 == (-109));
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-176));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-11));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-280) + "'", int12 == (-280));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-115) + "'", int14 == (-115));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-313));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-271));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-92));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-168));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-417) + "'", int12 == (-417));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-375) + "'", int14 == (-375));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-196) + "'", int17 == (-196));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-272) + "'", int19 == (-272));
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-72));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int25 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-213));
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int27 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-176) + "'", int12 == (-176));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-128) + "'", int15 == (-128));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-167) + "'", int17 == (-167));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51 + "'", int19 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51 + "'", int20 == 51);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 51 + "'", int21 == 51);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 51 + "'", int22 == 51);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-317) + "'", int25 == (-317));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 51 + "'", int26 == 51);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 51 + "'", int27 == 51);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-333));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1043));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-209));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-109));
        java.lang.Class<?> wildcardClass16 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-313) + "'", int9 == (-313));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-213) + "'", int15 == (-213));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 51 + "'", int16 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass10 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-7));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-484));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-175) + "'", int9 == (-175));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-111) + "'", int12 == (-111));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51 + "'", int14 == 51);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-588) + "'", int16 == (-588));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-104));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-63));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-543));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-399));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-477));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-809));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-503) + "'", int10 == (-503));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-581) + "'", int12 == (-581));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-913) + "'", int14 == (-913));
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-403));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-437));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 36);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-507) + "'", int10 == (-507));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-541) + "'", int13 == (-541));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-68) + "'", int16 == (-68));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-277));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass20 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-105));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-520));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, 0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-625));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-468));
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-1039));
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int26 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-399));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-540) + "'", int12 == (-540));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-20) + "'", int15 == (-20));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-645) + "'", int17 == (-645));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-488) + "'", int19 == (-488));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1059) + "'", int23 == (-1059));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-419) + "'", int26 == (-419));
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-459));
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-105) + "'", int10 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-563) + "'", int16 == (-563));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 100);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-4) + "'", int11 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-503));
        java.lang.Class<?> wildcardClass7 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-523) + "'", int6 == (-523));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-772));
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-24) + "'", int10 == (-24));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-876) + "'", int13 == (-876));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-1247));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-128) + "'", int7 == (-128));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1351) + "'", int12 == (-1351));
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) ' ');
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-707));
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-72) + "'", int5 == (-72));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-811) + "'", int11 == (-811));
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 53);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        java.lang.Class<?> wildcardClass12 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-108));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 80);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-208));
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-24) + "'", int7 == (-24));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-312) + "'", int9 == (-312));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-53));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-157) + "'", int14 == (-157));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass12 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) 0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-104) + "'", int6 == (-104));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-125) + "'", int8 == (-125));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-373));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-300));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-52));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-668));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-51) + "'", int6 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-103) + "'", int9 == (-103));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-477) + "'", int13 == (-477));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-404) + "'", int17 == (-404));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-156) + "'", int19 == (-156));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-772) + "'", int21 == (-772));
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 51);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-316));
        java.lang.Class<?> wildcardClass18 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51 + "'", int9 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-7) + "'", int13 == (-7));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-53) + "'", int15 == (-53));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-420) + "'", int17 == (-420));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass14 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-125) + "'", int11 == (-125));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-104) + "'", int13 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        int[] intArray1 = new int[] { (short) 10 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) -1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (int) (byte) 100);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-24));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-7));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray1, (-457));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray1);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray1);
        java.lang.Class<?> wildcardClass20 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-21) + "'", int3 == (-21));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 80 + "'", int6 == 80);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-44) + "'", int10 == (-44));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-27) + "'", int12 == (-27));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-477) + "'", int17 == (-477));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 0);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 51 + "'", int8 == 51);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-104) + "'", int10 == (-104));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-607));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-105));
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-213));
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (short) -1);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) 'a');
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-24));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-155));
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-229));
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-205));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-7) + "'", int11 == (-7));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-128) + "'", int13 == (-128));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-259) + "'", int15 == (-259));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-333) + "'", int17 == (-333));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 51 + "'", int18 == 51);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-309) + "'", int20 == (-309));
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-252));
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        java.lang.Class<?> wildcardClass15 = intArray0.getClass();
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 51);
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-208));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 36);
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        int[] intArray0 = new int[] {};
        int int1 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-795));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) '4');
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) 0);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-44));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        java.lang.Class<?> wildcardClass17 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 51 + "'", int5 == 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51 + "'", int6 == 51);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-52) + "'", int8 == (-52));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-104) + "'", int12 == (-104));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-148) + "'", int14 == (-148));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        int[] intArray2 = new int[] { '4', (short) 1 };
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int5 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, 53);
        int int7 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-63));
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (int) (byte) -1);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray2);
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray2, (-71));
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[52, 1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-51) + "'", int5 == (-51));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-167) + "'", int7 == (-167));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-105) + "'", int9 == (-105));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 51 + "'", int10 == 51);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51 + "'", int11 == 51);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-175) + "'", int14 == (-175));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int10 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (short) 0);
        int int12 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-21));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int15 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-111));
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int17 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-51));
        int int21 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int23 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, 31);
        int int24 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        int[] intArray0 = new int[] {};
        int int2 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 1);
        int int3 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int4 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int6 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-1));
        int int8 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 100);
        int int9 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int11 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-69));
        int int13 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-229));
        int int14 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int16 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (int) (byte) 10);
        int int18 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-143));
        int int19 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getSum(intArray0);
        int int20 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.subSet(intArray0);
        int int22 = com.thealgorithms.dynamicprogramming.MinimumSumPartition.getMin(intArray0, (-820));
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }
}

